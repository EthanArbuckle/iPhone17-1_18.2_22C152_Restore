void sub_1929CF804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v25;

  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>::~wrapper_kernel(Espresso::generic_pool_kernel *this)
{
  *(void *)this = &unk_1EE3197B0;
  v2 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  v3 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_pool_kernel::~generic_pool_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE3197B0;
  v2 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  v3 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_pool_kernel::~generic_pool_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F120;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::QuantSimEngine::engine::~engine(Espresso::QuantSimEngine::engine *this)
{
  *(void *)this = &unk_1EE332290;
  v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE332290;
  v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

__n128 Espresso::QuantSimEngine::engine::create_context@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  v4 = operator new(0xB8uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1EE382DF0;
  uint64_t v5 = Espresso::context_cpu::context_cpu((uint64_t)(v4 + 3), a1);
  v4[3] = &unk_1EE331B60;
  *((unsigned char *)v4 + 80) = 1;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1929CFB58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::QuantSimEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::QuantSimEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382DF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::QuantSimEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382DF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double Espresso::QuantSimEngine::engine::make_abstract_blob_container@<D0>(void *a1@<X1>, int a2@<W2>, uint64_t *a3@<X8>)
{
  v6 = (char *)operator new(0x100uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)v6 = &unk_1EE382D80;
  uint64_t v7 = Espresso::abstract_blob_container::abstract_blob_container((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE331A28;
  double result = 0.0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *((_DWORD *)v6 + 62) = a2;
  *a3 = v7;
  a3[1] = (uint64_t)v6;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::QuantSimEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::QuantSimEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382D80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::QuantSimEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE382D80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::HXEngine::convolution_kernel::set_weights()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "use set_weights(blob<float,4>::ptr blob");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1929CFD8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::HXEngine::convolution_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 816) = v2;
  v4 = *(std::__shared_weak_count **)(a1 + 824);
  *(void *)(a1 + 824) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t Espresso::HXEngine::convolution_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v6 = a2[1];
    if (v6 == 7)
    {
      if (*(_DWORD *)*a2 != 1650423912 || *(_DWORD *)(*a2 + 3) != 1935763810) {
        return Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key(a2);
      }
      return 1;
    }
    if (v6 != 9)
    {
      if (v6 != 11) {
        return Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key(a2);
      }
      uint64_t v7 = (uint64_t *)*a2;
      if (*(void *)*a2 != 0x656C6163735F7868 || *(void *)(*a2 + 3) != 0x74756F656C616373)
      {
        uint64_t v9 = *v7;
        uint64_t v10 = *(uint64_t *)((char *)v7 + 3);
        if (v9 != 0x74666968735F7868 || v10 != 0x74756F7466696873) {
          return Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key(a2);
        }
      }
      return 1;
    }
    uint64_t v3 = (uint64_t *)*a2;
    goto LABEL_36;
  }
  int v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 == 7)
  {
    int v12 = *(_DWORD *)((char *)a2 + 3);
    BOOL v13 = *(_DWORD *)a2 == 1650423912;
    int v14 = 1935763810;
    goto LABEL_37;
  }
  uint64_t v3 = a2;
  if (v2 == 9)
  {
LABEL_36:
    uint64_t v17 = *v3;
    int v12 = *((unsigned __int8 *)v3 + 8);
    BOOL v13 = v17 == 0x656E72656B5F7868;
    int v14 = 108;
LABEL_37:
    if (!v13 || v12 != v14) {
      return Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key(a2);
    }
    return 1;
  }
  if (v2 == 11)
  {
    if (*a2 == 0x656C6163735F7868 && *(uint64_t *)((char *)a2 + 3) == 0x74756F656C616373) {
      return 1;
    }
    if (*a2 == 0x74666968735F7868 && *(uint64_t *)((char *)a2 + 3) == 0x74756F7466696873) {
      return 1;
    }
  }
  return Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key(a2);
}

void Espresso::HXEngine::convolution_kernel::__set_weights_finalize(void *a1)
{
  if (!a1[76])
  {
    Espresso::HXEngine::hx_quantization_converter_helper::get_conv_weights((Espresso::HXEngine::hx_quantization_converter_helper *)&v16, (Espresso::generic_convolution_kernel *)(a1 + 96), (uint64_t)a1);
    uint64_t v3 = v16;
    int v2 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    a1[70] = v3;
    v4 = (std::__shared_weak_count *)a1[71];
    a1[71] = v2;
    if (v4) {
      nitro::nitro_function::nitro_function(v4);
    }
    uint64_t v6 = v18;
    uint64_t v5 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    a1[72] = v6;
    uint64_t v7 = (std::__shared_weak_count *)a1[73];
    a1[73] = v5;
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
    uint64_t v8 = v20;
    uint64_t v9 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    a1[74] = v8;
    uint64_t v10 = (std::__shared_weak_count *)a1[75];
    a1[75] = v9;
    if (v10)
    {
      nitro::nitro_function::nitro_function(v10);
      uint64_t v8 = a1[74];
    }
    if (v8 && *(_DWORD *)(v8 + 8))
    {
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v8 + 16);
      do
        *(_DWORD *)(v12 + 4 * v11++) += 8;
      while (v11 < *(unsigned int *)(v8 + 8));
    }
    uint64_t v14 = v22;
    BOOL v13 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    a1[76] = v14;
    v15 = (std::__shared_weak_count *)a1[77];
    a1[77] = v13;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
  }
}

void Espresso::HXEngine::convolution_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, void *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  unint64_t v6 = a5;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
    uint64_t v9 = a3;
    switch(*((unsigned char *)a3 + 23))
    {
      case 7:
        if (*(_DWORD *)a3 != 1650423912 || *(_DWORD *)((char *)a3 + 3) != 1935763810) {
          goto LABEL_58;
        }
        goto LABEL_15;
      case 9:
        if (*a3 != 0x656E72656B5F7868 || *((unsigned char *)a3 + 8) != 108) {
          goto LABEL_58;
        }
        goto LABEL_46;
      case 0xA:
        goto LABEL_34;
      case 0xB:
        if (*a3 == 0x656C6163735F7868 && *(void *)((char *)a3 + 3) == 0x74756F656C616373) {
          goto LABEL_62;
        }
        if (*a3 != 0x74666968735F7868 || *(void *)((char *)a3 + 3) != 0x74756F7466696873) {
          goto LABEL_58;
        }
        goto LABEL_64;
      default:
        goto LABEL_58;
    }
  }
  switch(a3[1])
  {
    case 7:
      if (*(_DWORD *)*a3 != 1650423912 || *(_DWORD *)(*a3 + 3) != 1935763810) {
        goto LABEL_58;
      }
LABEL_15:
      std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,Espresso::blob<int,1>::UnitializedBlobType,void>(&v86, *(_DWORD *)(a1 + 344), 1, 1, 1);
      std::string::size_type v12 = v86.__r_.__value_.__r.__words[0];
      BOOL v13 = *(std::__shared_weak_count **)(a1 + 568);
      *(_OWORD *)(a1 + 560) = *(_OWORD *)&v86.__r_.__value_.__l.__data_;
      if (v13)
      {
        nitro::nitro_function::nitro_function(v13);
        std::string::size_type v14 = *(void *)(a1 + 560);
      }
      else
      {
        std::string::size_type v14 = v12;
      }
      if (v6 != 4 * *(int *)(v14 + 8))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v83, v6);
        v44 = std::string::insert(&v83, 0, "Unexpected size ");
        long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v84.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        v46 = std::string::append(&v84, "/");
        long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        v85.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v82, 4 * *(int *)(*(void *)(a1 + 560) + 8));
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v48 = &v82;
        }
        else {
          v48 = (std::string *)v82.__r_.__value_.__r.__words[0];
        }
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v82.__r_.__value_.__l.__size_;
        }
        v50 = std::string::append(&v85, (const std::string::value_type *)v48, size);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v86.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v86);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      goto LABEL_93;
    case 9:
      if (*(void *)*a3 != 0x656E72656B5F7868 || *(unsigned char *)(*a3 + 8) != 108) {
        goto LABEL_58;
      }
LABEL_46:
      if (a6)
      {
        uint64_t v26 = *a6;
        if (*a6)
        {
          v27 = (std::__shared_weak_count *)a6[1];
          if (v27)
          {
            char v28 = 0;
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v80 = v26;
            v81 = v27;
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_73;
          }
        }
      }
      else
      {
        uint64_t v26 = 0;
      }
      v27 = 0;
      uint64_t v80 = v26;
      v81 = 0;
      char v28 = 1;
LABEL_73:
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<signed char,1>(&v86, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v80, *(_DWORD *)(a1 + 348) * *(_DWORD *)(a1 + 344) * *(_DWORD *)(a1 + 352) * *(_DWORD *)(a1 + 356), (a4 & 0x3F) == 0);
      v42 = *(std::__shared_weak_count **)(a1 + 616);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)&v86.__r_.__value_.__l.__data_;
      if (v42) {
        nitro::nitro_function::nitro_function(v42);
      }
      if (v81) {
        nitro::nitro_function::nitro_function(v81);
      }
      if ((v28 & 1) == 0)
      {
        nitro::nitro_function::nitro_function(v27);
      }
      return;
    case 0xALL:
      uint64_t v9 = (uint64_t *)*a3;
LABEL_34:
      uint64_t v18 = *v9;
      int v19 = *((unsigned __int16 *)v9 + 4);
      if (v18 != 0x61727478655F7868 || v19 != 26207) {
        goto LABEL_58;
      }
      if (a5 != 4)
      {
        v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v83, v6);
        v54 = std::string::insert(&v83, 0, "Unexpected size ");
        long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        v84.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        v56 = std::string::append(&v84, "/");
        long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v85.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v82, 4uLL);
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v58 = &v82;
        }
        else {
          v58 = (std::string *)v82.__r_.__value_.__r.__words[0];
        }
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v59 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v59 = v82.__r_.__value_.__l.__size_;
        }
        v60 = std::string::append(&v85, (const std::string::value_type *)v58, v59);
        long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        v86.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v53, &v86);
        __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      v21 = (void *)(a1 + 768);
      uint64_t v22 = a3;
      v23 = a4;
      size_t v24 = 4;
      goto LABEL_59;
    case 0xBLL:
      v29 = (uint64_t *)*a3;
      if (*(void *)*a3 == 0x656C6163735F7868 && *(void *)(*a3 + 3) == 0x74756F656C616373)
      {
LABEL_62:
        std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,Espresso::blob<int,1>::UnitializedBlobType,void>(&v86, *(_DWORD *)(a1 + 344), 1, 1, 1);
        std::string::size_type v34 = v86.__r_.__value_.__r.__words[0];
        v35 = *(std::__shared_weak_count **)(a1 + 584);
        *(_OWORD *)(a1 + 576) = *(_OWORD *)&v86.__r_.__value_.__l.__data_;
        if (v35)
        {
          nitro::nitro_function::nitro_function(v35);
          std::string::size_type v14 = *(void *)(a1 + 576);
        }
        else
        {
          std::string::size_type v14 = v34;
        }
        if (v6 != 4 * *(int *)(v14 + 8))
        {
          v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v83, v6);
          v63 = std::string::insert(&v83, 0, "Unexpected size ");
          long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
          v84.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v64;
          v63->__r_.__value_.__l.__size_ = 0;
          v63->__r_.__value_.__r.__words[2] = 0;
          v63->__r_.__value_.__r.__words[0] = 0;
          v65 = std::string::append(&v84, "/");
          long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          v85.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v66;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v82, 4 * *(int *)(*(void *)(a1 + 576) + 8));
          if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v67 = &v82;
          }
          else {
            v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
          }
          if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v68 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v68 = v82.__r_.__value_.__l.__size_;
          }
          v69 = std::string::append(&v85, (const std::string::value_type *)v67, v68);
          long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
          v86.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v70;
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v62, &v86);
          __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
LABEL_93:
        v52 = *(void **)(v14 + 16);
        memcpy(v52, a4, v6);
      }
      else
      {
        uint64_t v31 = *v29;
        uint64_t v32 = *(uint64_t *)((char *)v29 + 3);
        if (v31 == 0x74666968735F7868 && v32 == 0x74756F7466696873)
        {
LABEL_64:
          uint64_t v36 = *(int *)(a1 + 344);
          v37 = (char *)operator new(0x58uLL);
          *((void *)v37 + 1) = 0;
          *((void *)v37 + 2) = 0;
          *(void *)v37 = &unk_1EE389C30;
          v38 = (void **)(v37 + 24);
          *((void *)v37 + 3) = &unk_1EE36C070;
          *(_OWORD *)(v37 + 56) = 0u;
          *(_OWORD *)(v37 + 72) = 0u;
          *((_DWORD *)v37 + 8) = v36;
          *((void *)v37 + 5) = Espresso::kern_alloc_uninitialized((Espresso *)(4 * v36));
          v37[48] = 1;
          *(void *)&long long v39 = v37 + 24;
          *((void *)&v39 + 1) = v37;
          v40 = *(std::__shared_weak_count **)(a1 + 600);
          *(_OWORD *)(a1 + 592) = v39;
          if (v40)
          {
            nitro::nitro_function::nitro_function(v40);
            v38 = *(void ***)(a1 + 592);
          }
          if (v6 != 4 * *((int *)v38 + 2))
          {
            v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string(&v83, v6);
            v72 = std::string::insert(&v83, 0, "Unexpected size ");
            long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
            v84.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v73;
            v72->__r_.__value_.__l.__size_ = 0;
            v72->__r_.__value_.__r.__words[2] = 0;
            v72->__r_.__value_.__r.__words[0] = 0;
            v74 = std::string::append(&v84, "/");
            long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
            v85.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v75;
            v74->__r_.__value_.__l.__size_ = 0;
            v74->__r_.__value_.__r.__words[2] = 0;
            v74->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v82, 4 * *(int *)(*(void *)(a1 + 592) + 8));
            if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v76 = &v82;
            }
            else {
              v76 = (std::string *)v82.__r_.__value_.__r.__words[0];
            }
            if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v77 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v77 = v82.__r_.__value_.__l.__size_;
            }
            v78 = std::string::append(&v85, (const std::string::value_type *)v76, v77);
            long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
            v86.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v79;
            v78->__r_.__value_.__l.__size_ = 0;
            v78->__r_.__value_.__r.__words[2] = 0;
            v78->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v71, &v86);
            __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          memcpy(v38[2], a4, v6);
          if (v6)
          {
            v41 = *(_DWORD **)(*(void *)(a1 + 592) + 16);
            do
            {
              *v41++ += 8;
              --v6;
            }
            while (v6);
          }
        }
        else
        {
LABEL_58:
          v21 = (void *)(a1 + 768);
          uint64_t v22 = a3;
          v23 = a4;
          size_t v24 = a5;
LABEL_59:
          Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob(v21, v22, v23, v24);
        }
      }
      return;
    default:
      goto LABEL_58;
  }
}

void sub_1929D0994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v37 - 57) < 0) {
    operator delete(*(void **)(v37 - 80));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v35 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v36);
  goto LABEL_14;
}

void sub_1929D0A90()
{
  shared_owners = (std::__shared_weak_count *)v0[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v0[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v3);
  JUMPOUT(0x1929D0A88);
}

void sub_1929D0ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if ((v11 & 1) == 0) {
    nitro::nitro_function::nitro_function(v10);
  }
  JUMPOUT(0x1929D0A88);
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,Espresso::blob<int,1>::UnitializedBlobType,void>(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_1EE389B88;
  *((void *)v10 + 3) = &unk_1EE36C010;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  double result = Espresso::kern_alloc_uninitialized((Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5));
  *((void *)v10 + 5) = result;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
  return result;
}

void sub_1929D0BD4(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::HXEngine::convolution_kernel::share_weights(void *a1, uint64_t a2)
{
  if (!*(void *)a2
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v5 = v4;
  unint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = v4[70];
  uint64_t v8 = v4[71];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  a1[70] = v7;
  uint64_t v9 = (std::__shared_weak_count *)a1[71];
  a1[71] = v8;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = v5[72];
  uint64_t v11 = v5[73];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  a1[72] = v10;
  std::string::size_type v12 = (std::__shared_weak_count *)a1[73];
  a1[73] = v11;
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  uint64_t v13 = v5[74];
  uint64_t v14 = v5[75];
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  a1[74] = v13;
  v15 = (std::__shared_weak_count *)a1[75];
  a1[75] = v14;
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  uint64_t v16 = v5[76];
  uint64_t v17 = v5[77];
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  a1[76] = v16;
  uint64_t v18 = (std::__shared_weak_count *)a1[77];
  a1[77] = v17;
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v6)
  {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_1929D0DA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::HXEngine::convolution_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, const void ***a4)
{
  uint64_t v9 = *(const void **)(a1 + 8);
  if (v9
  {
    v60 = *(std::__shared_weak_count **)(a1 + 16);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    v60 = 0;
  }
  std::string::size_type v12 = *(std::__shared_weak_count **)(a2 + 8);
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v13 = v11[16];
    nitro::nitro_function::nitro_function(v12);
  }
  else
  {
    uint64_t v13 = v11[16];
  }
  int v14 = *(_DWORD *)(v13 + 56);
  verbose_level = v14;
  v15 = *(const void **)(a1 + 8);
  if (v15
  {
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 16);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  int v73 = v14;
  if (*(void *)a2
  {
    uint64_t v17 = *(void *)(a2 + 8);
    if (v17)
    {
      v78 = *(std::__shared_weak_count **)(a2 + 8);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      v78 = 0;
    }
  }
  else
  {
    v78 = 0;
    v71 = 0;
  }
  uint64_t v18 = *a4;
  int v19 = **a4;
  if (v19
  {
    unint64_t v20 = (unint64_t)v18[1];
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v20 = 0;
    v72 = 0;
  }
  uint64_t v21 = *a3;
  if (*(void *)v21
  {
    uint64_t v22 = *(std::__shared_weak_count **)(v21 + 8);
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v22 = 0;
    long long v70 = 0;
  }
  v76 = (std::__shared_weak_count *)v20;
  std::string::size_type v77 = v22;
  uint64_t v23 = *(void *)(a1 + 560);
  long long v75 = v16;
  if (!v23)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "bias not set");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v24 = *(_DWORD *)(a1 + 352);
  int v25 = *(_DWORD *)(a1 + 356);
  unsigned int v26 = *(_DWORD *)(a1 + 344);
  unsigned int v27 = *(_DWORD *)(a1 + 348);
  int v28 = v72[2];
  unsigned int __val = v72[3];
  uint64_t v68 = *(void *)(*(void *)(a1 + 576) + 16);
  uint64_t v69 = *(void *)(v23 + 16);
  uint64_t v66 = *(void *)(*(void *)(a1 + 608) + 16);
  uint64_t v67 = *(void *)(*(void *)(a1 + 592) + 16);
  float v29 = (float)v24 + 1.0;
  if (v24 < 3) {
    float v29 = 4.0;
  }
  float v30 = ceilf(log2f(v29));
  unsigned int v31 = vcvtmd_u64_f64(32.0 / (v30 * v30));
  if ((int)(v31 << 10) >= 4096) {
    unint64_t v32 = 4096;
  }
  else {
    unint64_t v32 = v31 << 10;
  }
  if (0x9000 / (v25 * v24 * v27) >= 0x80) {
    unsigned int v33 = 128;
  }
  else {
    unsigned int v33 = 0x9000 / (v25 * v24 * v27);
  }
  LODWORD(v4) = vcvtps_u32_f32((float)v26 / (float)v33);
  BOOL v34 = v73 < 1;
  unsigned int v74 = v33;
  if (!v34)
  {
    printf("[H10::convolution_kernel] (kern %d %d %d %d) stripes=%d ci=%d max_c=%d frameWBase=%d pW=%d\n", v24, v25, v27, v26, 1, v4, v33, v32 / v27, v31);
    unsigned int v33 = v74;
  }
  unsigned int v65 = v26;
  if (v27 > v32)
  {
    v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Invalid kernel width!");
    __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v35 = v78;
  if (v28 * v27 < 0x10 || !__val)
  {
    long long v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v103, v28 * v27);
    v52 = std::string::insert(&v103, 0, "ISP min size error wk=");
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    *(void *)&v100[16] = *((void *)&v52->__r_.__value_.__l + 2);
    *(_OWORD *)v100 = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    v54 = std::string::append((std::string *)v100, "h=");
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    *(void *)&v93[16] = *((void *)&v54->__r_.__value_.__l + 2);
    *(_OWORD *)v93 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v102, __val);
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v56 = &v102;
    }
    else {
      v56 = (std::string *)v102.__r_.__value_.__r.__words[0];
    }
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v102.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v102.__r_.__value_.__l.__size_;
    }
    v58 = std::string::append((std::string *)v93, (const std::string::value_type *)v56, size);
    long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    *(void *)&v81[16] = *((void *)&v58->__r_.__value_.__l + 2);
    *(_OWORD *)v81 = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v51, (const std::string *)v81);
    __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v36 = *(_OWORD *)(a1 + 320);
  *(_OWORD *)v100 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)&v100[16] = v36;
  uint64_t v101 = *(void *)(a1 + 336);
  unint64_t v37 = *(unsigned int *)(a1 + 344);
  unint64_t v38 = *(unsigned int *)(a1 + 348);
  long long v39 = *(_OWORD *)(a1 + 432);
  long long v96 = *(_OWORD *)(a1 + 416);
  long long v97 = v39;
  long long v98 = *(_OWORD *)(a1 + 448);
  uint64_t v99 = *(void *)(a1 + 464);
  long long v40 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)v93 = *(_OWORD *)(a1 + 352);
  *(_OWORD *)&v93[16] = v40;
  long long v41 = *(_OWORD *)(a1 + 400);
  long long v94 = *(_OWORD *)(a1 + 384);
  long long v95 = v41;
  unint64_t v42 = v37;
  unsigned int v61 = v37;
  v43 = v77;
  if (*(_WORD *)(a1 + 434))
  {
    unint64_t v42 = v37 | ((unint64_t)*(unsigned __int16 *)(a1 + 430) << 32);
    unsigned int v61 = *(unsigned __int16 *)(a1 + 434);
  }
  if (v4 < 2)
  {
    v103.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
    v103.__r_.__value_.__l.__size_ = (std::string::size_type)v78;
    if (v78) {
      atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)v81 = *(_OWORD *)v100;
    *(_OWORD *)&v81[16] = *(_OWORD *)&v100[16];
    uint64_t v82 = v101;
    int v83 = v37;
    int v84 = v38;
    long long v89 = v96;
    long long v90 = v97;
    long long v91 = v98;
    uint64_t v92 = v99;
    long long v85 = *(_OWORD *)v93;
    long long v86 = *(_OWORD *)&v93[16];
    long long v87 = v94;
    long long v88 = v95;
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
    v102.__r_.__value_.__l.__size_ = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    }
    long long v79 = v70;
    uint64_t v80 = v77;
    if (v77) {
      atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::HXEngine::convolution_kernel::launch_conv_h10(a1, (uint64_t)&v103, (uint64_t)v81, &v102, (uint64_t *)&v79, v69, v68, v67, v66, v38, v38, v42 & 0xFFFF00000000 | v37, v61);
    if (v77) {
      nitro::nitro_function::nitro_function(v77);
    }
    if (v20) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v20);
    }
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
    int v35 = v78;
    if (v78)
    {
      nitro::nitro_function::nitro_function(v78);
      int v35 = v78;
    }
  }
  else
  {
    __vala = (_DWORD *)a1;
    int v44 = 0;
    int v45 = 0;
    unint64_t v62 = HIDWORD(v42);
    unsigned int v46 = v33;
    do
    {
      if (v65 >= v46) {
        unsigned int v47 = v46;
      }
      else {
        unsigned int v47 = v65;
      }
      uint64_t v48 = v47 - v45;
      if (verbose_level >= 2)
      {
        printf("CONV: DMA: %d %d %d -> %d %d %d (%d)\n", v38, 0, v38, v48, v45 + v62, v61, v48);
        unsigned int v33 = v74;
        int v35 = v78;
      }
      v103.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
      v103.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v75) {
        atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)v81 = *(_OWORD *)v100;
      *(_OWORD *)&v81[16] = *(_OWORD *)&v100[16];
      uint64_t v82 = v101;
      int v83 = v48;
      int v84 = v38;
      long long v89 = v96;
      long long v90 = v97;
      long long v91 = v98;
      uint64_t v92 = v99;
      long long v85 = *(_OWORD *)v93;
      long long v86 = *(_OWORD *)&v93[16];
      long long v87 = v94;
      long long v88 = v95;
      v102.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
      v102.__r_.__value_.__l.__size_ = (std::string::size_type)v76;
      if (v76) {
        atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v79 = v70;
      uint64_t v80 = v77;
      if (v77) {
        atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v20 = v20 & 0xFFFFFFFF00000000 | v38;
      unint64_t v32 = v32 & 0xFFFFFFFF00000000 | v61;
      Espresso::HXEngine::convolution_kernel::launch_conv_h10((uint64_t)__vala, (uint64_t)&v103, (uint64_t)v81, &v102, (uint64_t *)&v79, v69 + 4 * v33 * v44, v68 + 4 * v33 * v44, v67 + 4 * v33 * v44, v66 + v33 * v44 * __vala[88] * __vala[89] * __vala[87], v38, v20, v48 | ((unint64_t)(v45 + v62) << 32), v32);
      uint64_t v16 = v75;
      v43 = v77;
      if (v77) {
        nitro::nitro_function::nitro_function(v77);
      }
      if (v76) {
        nitro::nitro_function::nitro_function(v76);
      }
      if (v75) {
        nitro::nitro_function::nitro_function(v75);
      }
      int v35 = v78;
      if (v78)
      {
        nitro::nitro_function::nitro_function(v78);
        int v35 = v78;
      }
      unsigned int v33 = v74;
      v45 += v74;
      v46 += v74;
      ++v44;
      --v4;
    }
    while (v4);
  }
  if (v43)
  {
    nitro::nitro_function::nitro_function(v43);
    int v35 = v78;
  }
  if (v76)
  {
    nitro::nitro_function::nitro_function(v76);
    int v35 = v78;
  }
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (v60)
  {
    nitro::nitro_function::nitro_function(v60);
  }
}

void sub_1929D1728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,std::__shared_weak_count *a34,std::__shared_weak_count *a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v71 - 113) < 0) {
    operator delete(*(void **)(v71 - 136));
  }
  if (a69 < 0) {
    operator delete(a64);
  }
  if (*(char *)(v71 - 153) < 0) {
    operator delete(*(void **)(v71 - 176));
  }
  if (*(char *)(v71 - 89) < 0)
  {
    operator delete(*(void **)(v71 - 112));
    if ((v69 & 1) == 0)
    {
LABEL_14:
      if (a35) {
        nitro::nitro_function::nitro_function(a35);
      }
      if (a34) {
        nitro::nitro_function::nitro_function(a34);
      }
      if (a36) {
        nitro::nitro_function::nitro_function(a36);
      }
      if (a33) {
        nitro::nitro_function::nitro_function(a33);
      }
      if (a19) {
        nitro::nitro_function::nitro_function(a19);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v69)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v70);
  goto LABEL_14;
}

void Espresso::HXEngine::convolution_kernel::launch_conv_h10(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, unsigned int a11, unint64_t a12, unsigned int a13)
{
  unint64_t v18 = a10;
  int v19 = (*(uint64_t (**)(void))(*(void *)*a4 + 32))();
  uint64_t v20 = *(void *)(*(void *)a2 + 128);
  v116 = a5;
  v117 = a4;
  int v21 = *(_DWORD *)(*a4 + 8);
  int v22 = *(_DWORD *)(*a4 + 12);
  int v111 = *(_DWORD *)(*a5 + 8);
  int v112 = *(_DWORD *)(*a5 + 12);
  v126[0] = 0;
  v126[1] = 0;
  memset(&v123[1], 0, 48);
  memset(v124, 0, sizeof(v124));
  v125 = (uint64_t *)v126;
  long long v127 = 0u;
  long long v128 = 0u;
  v123[0] = 4;
  int v23 = *(_DWORD *)(a3 + 48);
  uint64_t v115 = a3;
  int v103 = *(_DWORD *)(a3 + 52);
  if (verbose_level >= 2) {
    printf("[launch_conv_h10] %d %d %d -> %d %d %d (interm %d %d)\n", v21, v22, a10, v111, v112, a12, *(_DWORD *)(a1 + 752), *(_DWORD *)(a1 + 756));
  }
  unsigned int v24 = (int *)Espresso::HXEngine::HXCompiler::op_t::create_conf<sCIspGeneralProcessGCPrimConf_HOG_RES_MATCH_MATCH>((uint64_t)v123);
  int v25 = v24;
  unsigned int v26 = (std::__shared_weak_count *)v117[1];
  v122[0] = *v117;
  v122[1] = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  setup_match_match(v24, (uint64_t)v122, a10, a11, 0, v19);
  int v102 = v23;
  uint64_t v101 = v20;
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  uint64_t v27 = 0;
  if ((a12 & 0x80000000) == 0) {
    int v28 = a12;
  }
  else {
    int v28 = a12 + 1;
  }
  uint64_t v29 = a9;
  uint64_t v30 = (uint64_t)(v25 + 74);
  uint64_t v113 = (uint64_t)(v25 + 589);
  v110 = (uint64_t *)(a1 + 668);
  uint64_t v119 = (v28 >> 1);
  int v109 = (((unsigned __int16)(v28 >> 1) << 9) + 32256) & 0x7E00;
  int v114 = (4 * (_WORD)a10 + 16380) & 0x3FFC | ((v28 >> 1 << 14) + 2080768) & 0x1FC000 | 1;
  char v31 = 1;
  do
  {
    char v32 = v31;
    setup_match_base(v30);
    int v34 = *(_DWORD *)(v115 + 48);
    int v33 = *(_DWORD *)(v115 + 52);
    int v35 = *(unsigned __int16 *)(v115 + 72);
    uint64_t v36 = *(void *)(v115 + 80);
    int v37 = *(__int16 *)(v115 + 92);
    int v38 = *(__int16 *)(v115 + 94);
    uint64_t v39 = *v117;
    long long v40 = (std::__shared_weak_count *)v117[1];
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v42 = *v116;
    long long v41 = (std::__shared_weak_count *)v116[1];
    if (v41) {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v43 = *(_DWORD *)(a1 + 752);
    int v44 = *(_DWORD *)(a1 + 756);
    BOOL v45 = v36 == 0;
    if (v35) {
      BOOL v45 = (v35 & 0xFFFE) == 2;
    }
    int v47 = *(_DWORD *)(v39 + 8);
    int v46 = *(_DWORD *)(v39 + 12);
    uint64_t v48 = *(void *)(v42 + 8);
    int v49 = v34 * v18;
    unsigned int v50 = (v34 * v18) << 10;
    *(_DWORD *)(v30 + 44) = v114;
    *(_DWORD *)(v30 + 48) = v50 & 0x7FFC00 | ((v33 & 0x3F) << 23);
    *(_DWORD *)(v30 + 52) = v37 * v18 - 1;
    *(void *)(v30 + 56) = (v38 - 1);
    *(_DWORD *)(v30 + 64) = 0;
    if (v45)
    {
      unsigned int v51 = (v50 >> 11) & 0xFFF;
      unsigned int v52 = (v33 & 0x3Fu) << 23 >> 24;
    }
    else
    {
      unsigned int v52 = 0;
      unsigned int v51 = (v34 << 31 >> 31) & (a10 >> 1);
    }
    *(_DWORD *)(v30 + 68) = v51;
    *(_DWORD *)(v30 + 72) = v52;
    *(void *)(v30 + 76) = v48;
    if (v43 >= 1) {
      *(_DWORD *)(v30 + 76) = v43;
    }
    if (v44 >= 1) {
      *(_DWORD *)(v30 + 80) = v44;
    }
    *(void *)(v30 + 84) = 0x1E00000020;
    *(_DWORD *)(v30 + 92) = 0x2000;
    if ((int)a12 > 1)
    {
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v55 = v119;
      do
      {
        v56 = (_DWORD *)(v30 + v54);
        v56[24] = 2;
        v56[90] = 0;
        v56[364] = 0;
        uint64_t v57 = v30 + v53;
        *(_WORD *)(v57 + 1720) = 1;
        *(_WORD *)(v57 + 1852) = 0;
        v56[158] = *(_DWORD *)(a6 + 4 * v27 + 4 * v53);
        v56[224] = *(_DWORD *)(a8 + 4 * v27 + 4 * v53);
        v56[290] = *(_DWORD *)(a7 + 4 * v27 + 4 * v53);
        v54 += 4;
        v53 += 2;
        --v55;
      }
      while (v55);
    }
    *(_DWORD *)(v30 + 624) = v33 * v119 * v49;
    *(_DWORD *)(v30 + 628) = 0;
    *(_OWORD *)(v30 + 1424) = 0u;
    *(_OWORD *)(v30 + 1440) = 0u;
    *(void *)(v30 + 1984) = 0;
    *(_DWORD *)(v30 + 1992) = 0;
    *(_DWORD *)(v30 + 1996) = v47 * v18;
    *(_DWORD *)(v30 + 2000) = v46;
    if (v41) {
      nitro::nitro_function::nitro_function(v41);
    }
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
    if (*(_DWORD *)(a1 + 760))
    {
      char v118 = v32;
      int v58 = *(_DWORD *)(a1 + 624);
      unsigned int v59 = *(_DWORD *)(a1 + 628);
      unsigned int v60 = *(_DWORD *)(a1 + 632);
      int v61 = *(_DWORD *)(a1 + 640);
      int v62 = *(_DWORD *)(a1 + 644);
      int v63 = *(unsigned __int16 *)(a1 + 660);
      uint64_t v64 = *v110;
      uint64_t v65 = *(void *)(a1 + 736);
      uint64_t v66 = *(std::__shared_weak_count **)(a1 + 744);
      if (v66) {
        atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v63) {
        BOOL v67 = (v63 & 0xFFFE) == 2;
      }
      else {
        BOOL v67 = v64 == 0;
      }
      if (verbose_level >= 2)
      {
        int v99 = v60;
        int v100 = v61;
        int v68 = v62;
        unsigned int v108 = v60;
        int v69 = v61;
        uint64_t v70 = a1;
        uint64_t v71 = v66;
        int v72 = v58;
        unsigned int v73 = v59;
        printf("[fused pool %d %d %d] type %d size %d %d strde %d %d valid %d (scale %d shift %d)\n", v111, v112, v119, v58, v59, v99, v100, v62, v67, **(_DWORD **)(v65 + 16), *(_DWORD *)(*(void *)(v65 + 16) + 4));
        unsigned int v59 = v73;
        int v58 = v72;
        uint64_t v66 = v71;
        a1 = v70;
        int v61 = v69;
        unsigned int v60 = v108;
        int v62 = v68;
      }
      unsigned int v74 = v59 >> 1;
      unsigned int v75 = v60 >> 1;
      if (!v67)
      {
        LOWORD(v74) = 0;
        LOWORD(v75) = 0;
      }
      *(_WORD *)(v30 + 2012) = v74;
      *(_WORD *)(v30 + 2014) = v75;
      *(_DWORD *)(v30 + 2008) = 1;
      *(_DWORD *)(v30 + 2032) = 0;
      v76 = *(int **)(v65 + 16);
      int v77 = *v76;
      int v78 = v76[1];
      if (!v58)
      {
        unsigned int v79 = v59;
        int v104 = v62;
        float v80 = ldexp(1.0, -v78) * (double)v77;
        float v81 = 1.0 / (double)(int)(v60 * v79) * v80;
        double v82 = v81;
        int v83 = vcvtmd_s64_f64(log2(4096.0 / v81));
        if (v83 >= 20) {
          int v83 = 20;
        }
        if (v83 <= 8) {
          int v78 = 8;
        }
        else {
          int v78 = v83;
        }
        int v77 = vcvtpd_s64_f64(ldexp(1.0, v78) * v82);
        int v62 = v104;
        int v58 = 0;
        LOBYTE(v59) = v79;
      }
      *(_DWORD *)(v30 + 2040) = v77;
      *(_DWORD *)(v30 + 2036) = 0;
      *(_DWORD *)(v30 + 2044) = v78 - 8;
      *(_DWORD *)(v30 + 2052) = 1;
      int v84 = ((v62 << 17) + 393216) & 0x60000;
      if (v58 == 1) {
        int v85 = 0x200000;
      }
      else {
        int v85 = 0x400000;
      }
      *(_DWORD *)(v30 + 2004) = v109 | (2 * (v59 & 0xF)) | v85 | (32 * (v60 & 0xF)) | ((v61 << 15) + 98304) & 0x18000 | v84 | *(_DWORD *)(v30 + 2004) & 0xFF180000 | 1;
      *(_DWORD *)(v30 + 2016) = v111;
      *(_DWORD *)(v30 + 2020) = v112;
      uint64_t v29 = a9;
      unint64_t v18 = a10;
      char v32 = v118;
      if (v66) {
        nitro::nitro_function::nitro_function(v66);
      }
    }
    char v31 = 0;
    uint64_t v30 = v113;
    uint64_t v27 = 1;
  }
  while ((v32 & 1) != 0);
  int v86 = v102 * v18 * v103;
  signed int v87 = (v86 + 63) & 0xFFFFFFC0;
  size_t v88 = v87 * (int)v119;
  if (v88 <= *(void *)&v123[10] - *(void *)&v123[8])
  {
    if (v88 < *(void *)&v123[10] - *(void *)&v123[8]) {
      *(void *)&v123[10] = *(void *)&v123[8] + v88;
    }
  }
  else
  {
    std::vector<signed char>::__append((unint64_t *)&v123[8], v88 - (*(void *)&v123[10] - *(void *)&v123[8]));
  }
  if (v88 <= *(void *)&v124[3] - *(void *)&v124[1])
  {
    if (v88 < *(void *)&v124[3] - *(void *)&v124[1]) {
      *(void *)&v124[3] = *(void *)&v124[1] + v88;
    }
  }
  else
  {
    std::vector<signed char>::__append((unint64_t *)&v124[1], v88 - (*(void *)&v124[3] - *(void *)&v124[1]));
  }
  bzero(*(void **)&v123[8], v88);
  bzero(*(void **)&v124[1], v88);
  if ((int)a12 >= 2)
  {
    uint64_t v89 = 0;
    int v90 = 0;
    uint64_t v91 = v119;
    do
    {
      memcpy((void *)(*(void *)&v123[8] + v89), (const void *)(v29 + v90), v86);
      v90 += 2 * v86;
      v89 += v87;
      --v91;
    }
    while (v91);
    uint64_t v92 = 0;
    int v93 = v102 * v18 * v103;
    uint64_t v94 = v119;
    do
    {
      memcpy((void *)(*(void *)&v124[1] + v92), (const void *)(v29 + v93), v86);
      v93 += 2 * v102 * v103 * v18;
      v92 += v87;
      --v94;
    }
    while (v94);
  }
  v129[0] = 4;
  long long v95 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v125, 4, v129);
  *((_DWORD *)v95 + 8) = 3;
  *((_DWORD *)v95 + 9) = v86;
  *((_DWORD *)v95 + 10) = v119;
  *((_DWORD *)v95 + 12) = 0;
  *((_DWORD *)v95 + 13) = v87;
  *((_DWORD *)v95 + 14) = 8;
  v129[0] = 5;
  long long v96 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v125, 5, v129);
  *((_DWORD *)v96 + 8) = 3;
  *((_DWORD *)v96 + 9) = v86;
  *((_DWORD *)v96 + 10) = v119;
  *((_DWORD *)v96 + 12) = 0;
  *((_DWORD *)v96 + 13) = v87;
  *((_DWORD *)v96 + 14) = 8;
  long long v97 = (std::__shared_weak_count *)v117[1];
  v121[0] = *v117;
  v121[1] = (uint64_t)v97;
  if (v97) {
    atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v98 = (std::__shared_weak_count *)v116[1];
  v120[0] = *v116;
  v120[1] = (uint64_t)v98;
  if (v98) {
    atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  setup_buffers((uint64_t)v123, v121, v18, a11, v120, a12, a13, 1);
  if (v98) {
    nitro::nitro_function::nitro_function(v98);
  }
  if (v97) {
    nitro::nitro_function::nitro_function(v97);
  }
  Espresso::HXEngine::HXCompiler::add_operation(v101, (uint64_t)v123);
  if (*((void *)&v128 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v128 + 1));
  }
  if (*((void *)&v127 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v127 + 1));
  }
  std::__tree<int>::destroy(v126[0]);
  if (*(void *)&v124[1])
  {
    *(void *)&v124[3] = *(void *)&v124[1];
    operator delete(*(void **)&v124[1]);
  }
  if (*(void *)&v123[8])
  {
    *(void *)&v123[10] = *(void *)&v123[8];
    operator delete(*(void **)&v123[8]);
  }
  if (*(void *)&v123[2])
  {
    *(void *)&v123[4] = *(void *)&v123[2];
    operator delete(*(void **)&v123[2]);
  }
}

void sub_1929D2140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  Espresso::HXEngine::HXCompiler::op_t::~op_t((Espresso::HXEngine::HXCompiler::op_t *)&a52);
  _Unwind_Resume(a1);
}

unint64_t Espresso::HXEngine::HXCompiler::op_t::create_conf<sCIspGeneralProcessGCPrimConf_HOG_RES_MATCH_MATCH>(uint64_t a1)
{
  uint64_t v3 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = (unint64_t *)(a1 + 8);
  unint64_t v6 = v4 - (void)v3;
  if (v6 >> 6 > 0x44)
  {
    if (v6 != 4416) {
      *(void *)(a1 + 16) = v3 + 4416;
    }
  }
  else
  {
    std::vector<signed char>::__append(v5, 4416 - v6);
    uint64_t v3 = (char *)*v5;
  }
  bzero(v3, 0x1140uLL);
  return *v5;
}

int *setup_match_match(int *result, uint64_t a2, int a3, uint64_t a4, int a5, int a6)
{
  int v6 = *result;
  int v7 = *result | 2;
  *double result = v7;
  switch(a5)
  {
    case 0:
      char v8 = 27;
      goto LABEL_4;
    case 1:
      char v8 = 11;
LABEL_4:
      unsigned int v9 = v6 & 0xFFFFFFC1 | (2 * (v8 & 0x1F));
      goto LABEL_7;
    case 2:
      unsigned int v9 = v6 & 0xFFFFFFC1 | 0xE;
      goto LABEL_7;
    case 3:
      unsigned int v9 = v7 & 0xFFFFFFC3 | 0x10;
LABEL_7:
      *double result = v9;
      break;
    default:
      break;
  }
  int v10 = *(_DWORD *)(*(void *)a2 + 12);
  result[1] = *(_DWORD *)(*(void *)a2 + 8) * a3;
  result[2] = v10;
  if (a6 == 4)
  {
    int v11 = 8;
  }
  else
  {
    if (a6 != 5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "unsupported compute_path");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v11 = 4;
  }
  result[3] = v11;
  result[4] = 0;
  return result;
}

void sub_1929D22F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double setup_match_base(uint64_t a1)
{
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0x1FE0 | 1;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 48) & 0xE00003FF | 0x800400;
  *(void *)(a1 + 84) = 0x1E00000020;
  *(_DWORD *)(a1 + 624) = 1;
  *(_DWORD *)(a1 + 1432) = 1;
  *(_DWORD *)(a1 + 1444) = 1;
  *(_WORD *)(a1 + 1988) = 1;
  *(_DWORD *)(a1 + 92) |= 0x2000u;
  memset_pattern16((void *)(a1 + 1160), &xmmword_192DCA970, 0x100uLL);
  uint64_t v2 = 0;
  *(void *)&long long v3 = 0x1000100010001;
  *((void *)&v3 + 1) = 0x1000100010001;
  do
  {
    *(_OWORD *)(a1 + 1720 + v2) = v3;
    v2 += 16;
  }
  while (v2 != 128);
  *(_DWORD *)(a1 + 2004) = *(_DWORD *)(a1 + 2004) & 0xFFFFFE01 | 0x22;
  *(void *)&double result = 0x100000001;
  *(void *)(a1 + 2024) = 0x100000001;
  *(_DWORD *)(a1 + 2040) = 1;
  *(_DWORD *)(a1 + 2052) = 1;
  return result;
}

void setup_buffers(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t *a5, unint64_t a6, uint64_t a7, int a8)
{
  int v9 = a6;
  int v11 = a3;
  unint64_t v14 = HIDWORD(a3);
  unint64_t v15 = HIDWORD(a6);
  int v16 = (*(uint64_t (**)(void))(*(void *)*a2 + 32))();
  BOOL v45 = a5;
  uint64_t v17 = (_DWORD *)*a5;
  int v44 = a2;
  unint64_t v18 = (_DWORD *)*a2;
  if (v16 == 4) {
    int v19 = 8;
  }
  else {
    int v19 = 4;
  }
  int v46 = v19;
  if (v14)
  {
    BOOL v20 = 1;
    if (v15)
    {
LABEL_6:
      BOOL v21 = 1;
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v20 = v18[4] != v11;
    if (v15) {
      goto LABEL_6;
    }
  }
  BOOL v21 = v17[4] != v9;
LABEL_9:
  int v22 = v18[2];
  int v23 = v18[3];
  if (v20)
  {
    char v24 = v16 != 4;
    v23 *= v22;
    int v25 = v18[4];
    int v26 = v14 << (v16 != 4);
  }
  else
  {
    int v26 = 0;
    char v24 = v16 != 4;
    int v25 = v22 * v11;
    v11 *= v22;
  }
  int v27 = a8;
  int v28 = v17[2];
  int v29 = v17[3];
  int v30 = (v25 << v24) + 63;
  unsigned int v31 = v30 & 0xFFFFFFC0;
  if (v21)
  {
    v29 *= v28;
    int v32 = v17[4];
    int v33 = v15 << v24;
  }
  else
  {
    int v33 = 0;
    int v32 = v28 * v9;
    v9 *= v28;
  }
  unsigned int v34 = ((v32 << v24) + 63) & 0xFFFFFFC0;
  if (verbose_level >= 2) {
    printf("[h10 setup_buffer] (dma trick: %d %d match2: %d) buffs: %d %d %d %d -> %d %d %d %d\n", v20, v21, v27, v11, v23, v30 & 0xFFFFFFC0, v26, v9, v29, v34, v33);
  }
  int v47 = 0;
  int v35 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)(a1 + 80), 0, &v47);
  *((_DWORD *)v35 + 8) = 0;
  *((_DWORD *)v35 + 9) = v11;
  *((_DWORD *)v35 + 10) = v23;
  *((_DWORD *)v35 + 12) = v26;
  *((_DWORD *)v35 + 13) = v31;
  *((_DWORD *)v35 + 14) = v46;
  if (v27)
  {
    int v47 = 2;
    uint64_t v36 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)(a1 + 80), 2, &v47);
    *((_DWORD *)v36 + 8) = 0;
    *((_DWORD *)v36 + 9) = v11;
    *((_DWORD *)v36 + 10) = v23;
    *((_DWORD *)v36 + 12) = v26;
    *((_DWORD *)v36 + 13) = v31;
    *((_DWORD *)v36 + 14) = v46;
    int v47 = 14;
    int v37 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)(a1 + 80), 14, &v47);
  }
  else
  {
    int v47 = 12;
    int v37 = std::__tree<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::HXEngine::HXCompiler::buffer_info_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)(a1 + 80), 12, &v47);
  }
  *((_DWORD *)v37 + 8) = 2;
  *((_DWORD *)v37 + 9) = v9;
  *((_DWORD *)v37 + 10) = v29;
  *((_DWORD *)v37 + 12) = v33;
  *((_DWORD *)v37 + 13) = v34;
  *((_DWORD *)v37 + 14) = v46;
  uint64_t v39 = *v44;
  uint64_t v38 = v44[1];
  if (v38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
  }
  long long v40 = *(std::__shared_weak_count **)(a1 + 112);
  *(void *)(a1 + 104) = v39;
  *(void *)(a1 + 112) = v38;
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  uint64_t v42 = *v45;
  uint64_t v41 = v45[1];
  if (v41) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
  }
  int v43 = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 120) = v42;
  *(void *)(a1 + 128) = v41;
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
}

void Espresso::HXEngine::HXCompiler::op_t::~op_t(Espresso::HXEngine::HXCompiler::op_t *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  std::__tree<int>::destroy(*((void **)this + 11));
  uint64_t v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 8) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
  }
}

void Espresso::HXEngine::convolution_kernel::~convolution_kernel(Espresso::HXEngine::convolution_kernel *this)
{
  Espresso::HXEngine::convolution_kernel::~convolution_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 103);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 101);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 99);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 97);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 93);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  int v7 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  char v8 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  int v9 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  int v10 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

uint64_t Espresso::HXEngine::pool_kernel::supports_weight_key(uint64_t a1, uint64_t a2)
{
  int v2 = *(char *)(a2 + 23);
  if (v2 < 0)
  {
    if (*(void *)(a2 + 8) != 14) {
      return Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key((_DWORD *)a2);
    }
    long long v3 = *(uint64_t **)a2;
  }
  else
  {
    long long v3 = (uint64_t *)a2;
    if (v2 != 14) {
      return Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key((_DWORD *)a2);
    }
  }
  uint64_t v4 = *v3;
  uint64_t v5 = *(uint64_t *)((char *)v3 + 6);
  if (v4 != 0x656C6163735F7868 || v5 != 0x74666968735F656CLL) {
    return Espresso::HXEngine::hx_quantization_converter_helper::supports_weight_key((_DWORD *)a2);
  }
  return 1;
}

void Espresso::HXEngine::pool_kernel::__set_weights_finalize(void *a1)
{
  if (!a1[54])
  {
    Espresso::HXEngine::hx_quantization_converter_helper::get_pool_weights((Espresso::HXEngine::hx_quantization_converter_helper *)&v5, a1 + 56);
    uint64_t v3 = v5;
    int v2 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v4 = (std::__shared_weak_count *)a1[55];
    a1[54] = v3;
    a1[55] = v2;
    if (v4) {
      nitro::nitro_function::nitro_function(v4);
    }
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
  }
}

void *Espresso::HXEngine::pool_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5)
{
  if (verbose_level >= 2)
  {
    if (*(char *)(a3 + 23) >= 0) {
      int v9 = (const char *)a3;
    }
    else {
      int v9 = *(const char **)a3;
    }
    printf("[pool_kernel::__set_weight_raw_blob %s\n", v9);
  }
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a3 + 23) != 10)
    {
      int v10 = (uint64_t *)a3;
      if (*(unsigned char *)(a3 + 23) != 14) {
        goto LABEL_24;
      }
      goto LABEL_13;
    }
    if (*(void *)a3 != 0x61727478655F7868 || *(_WORD *)(a3 + 8) != 26207) {
      goto LABEL_24;
    }
LABEL_33:
    if (a5 != 4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v37 = a5;
      uint64_t v38 = exception;
      std::to_string(&v48, v37);
      uint64_t v39 = std::string::insert(&v48, 0, "Unexpected size ");
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      uint64_t v41 = std::string::append(&v49, "/");
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v47, 4uLL);
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v43 = &v47;
      }
      else {
        int v43 = (std::string *)v47.__r_.__value_.__r.__words[0];
      }
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v47.__r_.__value_.__l.__size_;
      }
      BOOL v45 = std::string::append(&v50, (const std::string::value_type *)v43, size);
      long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v38, &v51);
      __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v19 = (void *)(a1 + 448);
    BOOL v20 = (_DWORD *)a3;
    BOOL v21 = a4;
    size_t v22 = 4;
    goto LABEL_25;
  }
  uint64_t v11 = *(void *)(a3 + 8);
  if (v11 == 10)
  {
    if (**(void **)a3 != 0x61727478655F7868 || *(_WORD *)(*(void *)a3 + 8) != 26207) {
      goto LABEL_24;
    }
    goto LABEL_33;
  }
  if (v11 != 14)
  {
LABEL_24:
    int v19 = (void *)(a1 + 448);
    BOOL v20 = (_DWORD *)a3;
    BOOL v21 = a4;
    size_t v22 = a5;
LABEL_25:
    return Espresso::HXEngine::hx_quantization_converter_helper::__set_weight_raw_blob(v19, v20, v21, v22);
  }
  int v10 = *(uint64_t **)a3;
LABEL_13:
  uint64_t v12 = *v10;
  uint64_t v13 = *(uint64_t *)((char *)v10 + 6);
  if (v12 != 0x656C6163735F7868 || v13 != 0x74666968735F656CLL) {
    goto LABEL_24;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,Espresso::blob<int,1>::UnitializedBlobType,void>(&v51, 2, 1, 1, 1);
  std::string::size_type v15 = v51.__r_.__value_.__r.__words[0];
  int v16 = *(std::__shared_weak_count **)(a1 + 440);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
  if (v16)
  {
    nitro::nitro_function::nitro_function(v16);
    std::string::size_type v17 = *(void *)(a1 + 432);
  }
  else
  {
    std::string::size_type v17 = v15;
  }
  if (a5 != 4 * *(int *)(v17 + 8))
  {
    int v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v26 = a5;
    int v27 = v25;
    std::to_string(&v48, v26);
    int v28 = std::string::insert(&v48, 0, "Unexpected size ");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    int v30 = std::string::append(&v49, "/");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v47, 4 * *(int *)(*(void *)(a1 + 432) + 8));
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v32 = &v47;
    }
    else {
      int v32 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v33 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v33 = v47.__r_.__value_.__l.__size_;
    }
    unsigned int v34 = std::string::append(&v50, (const std::string::value_type *)v32, v33);
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v27, &v51);
    __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double result = memcpy(*(void **)(v17 + 16), a4, a5);
  if (verbose_level >= 2) {
    return (void *)printf("[pool_kernel::__set_weight_raw_blob] %d %d\n", **(_DWORD **)(*(void *)(a1 + 432) + 16), *(_DWORD *)(*(void *)(*(void *)(a1 + 432) + 16) + 4));
  }
  return result;
}

void sub_1929D2CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v37 - 57) < 0) {
    operator delete(*(void **)(v37 - 80));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (v36) {
    __cxa_free_exception(v35);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::HXEngine::pool_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  int v6 = *(const void **)(a1 + 8);
  if (v6
  {
    uint64_t v37 = *(std::__shared_weak_count **)(a1 + 16);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v37 = 0;
  }
  int v9 = *(std::__shared_weak_count **)(a2 + 8);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = v8[16];
    nitro::nitro_function::nitro_function(v9);
  }
  else
  {
    uint64_t v10 = v8[16];
  }
  int v11 = *(_DWORD *)(v10 + 56);
  verbose_level = v11;
  uint64_t v12 = *a4;
  uint64_t v13 = **a4;
  if (v13)
  {
    if (v14 && (std::string::size_type v15 = (atomic_ullong *)v12[1]) != 0)
    {
      long long v40 = (std::__shared_weak_count *)v12[1];
      atomic_fetch_add_explicit(v15 + 1, 1uLL, memory_order_relaxed);
    }
    else
    {
      long long v40 = 0;
    }
  }
  else
  {
    long long v40 = 0;
    unint64_t v14 = 0;
  }
  int v16 = *a3;
  std::string::size_type v17 = **a3;
  if (v17)
  {
    if (v18)
    {
      int v19 = (std::__shared_weak_count *)v16[1];
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      int v19 = 0;
    }
  }
  else
  {
    int v19 = 0;
    unint64_t v18 = 0;
  }
  unint64_t v20 = *(unsigned int *)(a1 + 408);
  unsigned int v21 = *(unsigned __int16 *)(a1 + 370);
  if (*(_WORD *)(a1 + 370))
  {
    v20 |= (unint64_t)*(unsigned __int16 *)(a1 + 366) << 32;
  }
  else
  {
    unsigned int v21 = *(_DWORD *)(a1 + 408);
    if (!v20)
    {
      unint64_t v20 = v18[4];
      unsigned int v21 = v18[4];
    }
  }
  unsigned int v22 = v14[4];
  if (v22 != v20)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v46, v22);
    long long v29 = std::string::insert(&v46, 0, "Pool input/output channels mismatch ");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    long long v31 = std::string::append(&v47, "/");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v45, v20);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v33 = &v45;
    }
    else {
      std::string::size_type v33 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v45.__r_.__value_.__l.__size_;
    }
    long long v35 = std::string::append(&v48, (const std::string::value_type *)v33, size);
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v49);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v40) {
    atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v23 = vcvtps_u32_f32((float)v20 * 0.015625);
  if (v11 >= 2) {
    printf("h10 [pool_kernel::__launch] %d -> %d citer=%d\n", v20, v20, v23);
  }
  if (v23 < 2)
  {
    v42[0] = v18;
    v42[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v41[0] = v14;
    v41[1] = v40;
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::HXEngine::pool_kernel::__launch_h10(a1, a2, v42, v41, v20, v20, v20, v21);
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
  }
  else
  {
    int v24 = 0;
    uint64_t v25 = 0;
    v44[0] = v18;
    v44[1] = v19;
    unsigned int v26 = 64;
    v43[0] = v14;
    v43[1] = v40;
    do
    {
      if (v26 >= v20) {
        int v27 = v20;
      }
      else {
        int v27 = v26;
      }
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::HXEngine::pool_kernel::__launch_h10(a1, a2, v44, v43, (v27 + v24) | (unint64_t)(v25 << 32), v20, (v27 + v24) | ((unint64_t)(HIDWORD(v20) + v25) << 32), v21);
      if (v40) {
        nitro::nitro_function::nitro_function(v40);
      }
      if (v19) {
        nitro::nitro_function::nitro_function(v19);
      }
      uint64_t v25 = (v25 + 64);
      v26 += 64;
      v24 -= 64;
      --v23;
    }
    while (v23);
  }
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  if (v19)
  {
    nitro::nitro_function::nitro_function(v19);
    nitro::nitro_function::nitro_function(v19);
  }
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  if (v37)
  {
    nitro::nitro_function::nitro_function(v37);
  }
}

void sub_1929D32AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v45 - 89) < 0) {
    operator delete(*(void **)(v45 - 112));
  }
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v45 - 121) < 0) {
    operator delete(*(void **)(v45 - 144));
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a36 < 0)
  {
    operator delete(a31);
    if ((v44 & 1) == 0)
    {
LABEL_14:
      if (v42) {
        nitro::nitro_function::nitro_function(v42);
      }
      if (a16) {
        nitro::nitro_function::nitro_function(a16);
      }
      if (a13) {
        nitro::nitro_function::nitro_function(a13);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v43);
  goto LABEL_14;
}

void Espresso::HXEngine::pool_kernel::__launch_h10(uint64_t a1, uint64_t a2, void *a3, void *a4, unint64_t a5, unsigned int a6, unint64_t a7, unsigned int a8)
{
  uint64_t v12 = a4;
  int v15 = (*(uint64_t (**)(void))(*(void *)*a4 + 32))();
  v88[0] = 0;
  v88[1] = 0;
  memset(&v85[1], 0, 48);
  memset(__p, 0, sizeof(__p));
  signed int v87 = v88;
  long long v89 = 0u;
  long long v90 = 0u;
  v85[0] = 4;
  int v16 = *(const void **)(a1 + 8);
  if (v16
  {
    std::string::size_type v17 = *(std::__shared_weak_count **)(a1 + 16);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    std::string::size_type v17 = 0;
  }
  if (verbose_level >= 2) {
    printf("[launch_pool_h10] %d %d %d -> %d %d %d\n", *(_DWORD *)(*v12 + 8), *(_DWORD *)(*v12 + 12), a5, *(_DWORD *)(*a3 + 8), *(_DWORD *)(*a3 + 12), a7);
  }
  int v78 = v17;
  unint64_t v18 = (int *)Espresso::HXEngine::HXCompiler::op_t::create_conf<sCIspGeneralProcessGCPrimConf_HOG_RES_MATCH_MATCH>((uint64_t)v85);
  int v19 = v18;
  unint64_t v20 = (std::__shared_weak_count *)v12[1];
  v84[0] = *v12;
  v84[1] = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  setup_match_match(v18, (uint64_t)v84, a5, a6, 3, v15);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  uint64_t v76 = a6;
  setup_match_base((uint64_t)(v19 + 74));
  int v21 = *(_DWORD *)(a1 + 304);
  unsigned int v22 = *(_DWORD *)(a1 + 308);
  unsigned int v23 = *(_DWORD *)(a1 + 312);
  int v24 = *(_DWORD *)(a1 + 320);
  int v25 = *(_DWORD *)(a1 + 324);
  int v26 = *(unsigned __int16 *)(a1 + 340);
  uint64_t v27 = *(void *)(a1 + 348);
  uint64_t v28 = *a3;
  long long v29 = (std::__shared_weak_count *)a3[1];
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v30 = *v12;
  long long v31 = (std::__shared_weak_count *)v12[1];
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v77 = a8;
  unint64_t v80 = a5;
  uint64_t v75 = a2;
  uint64_t v32 = *(void *)(a1 + 432);
  std::string::size_type v33 = *(std::__shared_weak_count **)(a1 + 440);
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v26) {
    BOOL v34 = (v26 & 0xFFFE) == 2;
  }
  else {
    BOOL v34 = v27 == 0;
  }
  int v36 = *(_DWORD *)(v30 + 8);
  int v35 = *(_DWORD *)(v30 + 12);
  int v37 = *(_DWORD *)(v28 + 8);
  int v38 = *(_DWORD *)(v28 + 12);
  unint64_t v79 = a7;
  v19[85] = ((a7 << 14) + 2080768) & 0x1FC000 | (4 * v80 + 16380) & 0x3FFC | v19[85] & 3;
  v19[86] &= 0x1FFFFC00u;
  v19[87] = v24 * v80 - 1;
  char v39 = v25 - 1;
  v19[88] = v25 - 1;
  *(void *)(v19 + 89) = 0;
  v19[93] = v37;
  v19[94] = v38;
  v19[95] = 32;
  *((void *)v19 + 48) = 0x20000000001ELL;
  unsigned int v40 = v22 >> 1;
  unsigned int v41 = v23 >> 1;
  if (!v34)
  {
    LOWORD(v40) = 0;
    LOWORD(v41) = 0;
  }
  *((_WORD *)v19 + 1154) = v40;
  *((_WORD *)v19 + 1155) = v41;
  v19[576] = 1;
  v19[582] = 0;
  long long v42 = *(int **)(v32 + 16);
  int v44 = *v42;
  int v43 = v42[1];
  if (verbose_level >= 2)
  {
    BOOL v67 = v33;
    int v69 = v12;
    int v71 = v36;
    int v73 = v24;
    uint64_t v64 = v31;
    uint64_t v66 = v29;
    unsigned int v45 = v23;
    unsigned int v46 = v22;
    int v47 = v21;
    int v48 = v35;
    int v49 = v37;
    char v50 = v39;
    printf("pool: scale %d shift %d\n", v44, v43);
    char v39 = v50;
    int v37 = v49;
    int v36 = v71;
    int v24 = v73;
    int v35 = v48;
    std::string::size_type v33 = v67;
    uint64_t v12 = v69;
    int v21 = v47;
    unsigned int v22 = v46;
    unsigned int v23 = v45;
    long long v31 = v64;
    long long v29 = v66;
  }
  if (!v21)
  {
    char v51 = v39;
    int v52 = v37;
    int v65 = v38;
    int v72 = v36;
    int v74 = v24;
    int v68 = v35;
    unsigned int v53 = v22;
    unsigned int v70 = v23;
    float v54 = ldexp(1.0, -v43) * (double)v44;
    float v55 = 1.0 / (double)(int)(v70 * v53) * v54;
    double v56 = v55;
    int v57 = vcvtmd_s64_f64(log2(4096.0 / v55));
    if (v57 >= 20) {
      int v57 = 20;
    }
    if (v57 <= 8) {
      int v43 = 8;
    }
    else {
      int v43 = v57;
    }
    int v44 = vcvtpd_s64_f64(ldexp(1.0, v43) * v56);
    LOBYTE(v23) = v70;
    LOBYTE(v22) = v53;
    int v21 = 0;
    int v36 = v72;
    int v24 = v74;
    int v35 = v68;
    int v38 = v65;
    int v37 = v52;
    char v39 = v51;
  }
  v19[584] = v44;
  v19[583] = 0;
  v19[585] = v43 - 8;
  v19[587] = 1;
  if (v21 == 1) {
    int v58 = 0x200000;
  }
  else {
    int v58 = 0x400000;
  }
  v19[575] = (((_WORD)v79 << 9) + 32256) & 0x7E00 | v58 & 0xFFF9FE01 | (2 * (v22 & 0xF)) & 0x1F | (unsigned __int16)(32 * (v23 & 0xF)) | ((v24 << 15) + 98304) & 0x18000 | ((v39 & 3) << 17) | v19[575] & 0xFF180000 | 1;
  v19[578] = v37;
  v19[579] = v38;
  v19[573] = v36 * v80;
  v19[574] = v35;
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  unsigned int v59 = (std::__shared_weak_count *)v12[1];
  v83[0] = *v12;
  v83[1] = (uint64_t)v59;
  if (v59) {
    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v60 = (std::__shared_weak_count *)a3[1];
  v82[0] = *a3;
  v82[1] = (uint64_t)v60;
  if (v60) {
    atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  setup_buffers((uint64_t)v85, v83, v80, v76, v82, v79, v77, 0);
  if (v60) {
    nitro::nitro_function::nitro_function(v60);
  }
  if (v59) {
    nitro::nitro_function::nitro_function(v59);
  }
  int v62 = *(std::__shared_weak_count **)(v75 + 8);
  if (v62)
  {
    atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v63 = v61[16];
    nitro::nitro_function::nitro_function(v62);
  }
  else
  {
    uint64_t v63 = v61[16];
  }
  Espresso::HXEngine::HXCompiler::add_operation(v63, (uint64_t)v85);
  if (v78) {
    nitro::nitro_function::nitro_function(v78);
  }
  if (*((void *)&v90 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v90 + 1));
  }
  if (*((void *)&v89 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v89 + 1));
  }
  std::__tree<int>::destroy(v88[0]);
  if (*(void *)&__p[1])
  {
    *(void *)&__p[3] = *(void *)&__p[1];
    operator delete(*(void **)&__p[1]);
  }
  if (*(void *)&v85[8])
  {
    *(void *)&v85[10] = *(void *)&v85[8];
    operator delete(*(void **)&v85[8]);
  }
  if (*(void *)&v85[2])
  {
    *(void *)&v85[4] = *(void *)&v85[2];
    operator delete(*(void **)&v85[2]);
  }
}

void sub_1929D3A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (v33)
  {
    nitro::nitro_function::nitro_function(v33);
    if (!v34)
    {
LABEL_3:
      if (!v35)
      {
LABEL_8:
        if (a23) {
          nitro::nitro_function::nitro_function(a23);
        }
        Espresso::HXEngine::HXCompiler::op_t::~op_t((Espresso::HXEngine::HXCompiler::op_t *)&a33);
        _Unwind_Resume(a1);
      }
LABEL_7:
      nitro::nitro_function::nitro_function(v35);
      goto LABEL_8;
    }
  }
  else if (!v34)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v34);
  if (!v35) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void Espresso::HXEngine::pool_kernel::~pool_kernel(Espresso::HXEngine::pool_kernel *this)
{
  *(void *)this = &unk_1EE36EF58;
  int v2 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  Espresso::generic_pool_kernel::~generic_pool_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE36EF58;
  int v2 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }

  Espresso::generic_pool_kernel::~generic_pool_kernel(this);
}

void Espresso::HXEngine::concat_kernel::~concat_kernel(Espresso::HXEngine::concat_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::HXEngine::context_transfer_kernel::blob_options(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::HXEngine::context_transfer_kernel::__launch(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = v4[16];
    nitro::nitro_function::nitro_function(v5);
  }
  else
  {
    uint64_t v6 = v4[16];
  }
  uint64_t v7 = *(void *)(a1 + 312);
  char v8 = *(std::__shared_weak_count **)(a1 + 320);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!*(void *)(v6 + 216))
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_8;
    }
LABEL_19:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "HX: only one context transfer is supported");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(void *)(v6 + 216)) {
    goto LABEL_19;
  }
LABEL_8:
  int v9 = *(std::__shared_weak_count **)(v6 + 224);
  *(void *)(v6 + 216) = v7;
  *(void *)(v6 + 224) = v8;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = *(int *)(v6 + 88);
  long long v11 = *(_OWORD *)(*(void *)(*(void *)(v6 + 48) + 32) + 16 * v10);
  uint64_t v12 = *(void *)(*(void *)(*(void *)(v6 + 48) + 32) + 16 * v10 + 8);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(v6 + 208);
  *(_OWORD *)(v6 + 200) = v11;
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_1929D3D70(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::HXEngine::context_transfer_kernel::~context_transfer_kernel(Espresso::HXEngine::context_transfer_kernel *this)
{
  Espresso::generic_context_transfer_kernel::~generic_context_transfer_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXEngine::pool_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::HXEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BE88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BE88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::convolution_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::HXEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BF30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BF30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel::~softmax_nd_kernel(Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::gradient_not_implemented_error::~gradient_not_implemented_error(std::runtime_error *this)
{
  Espresso::gradient_not_implemented_error::~gradient_not_implemented_error(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE365E60;
  if (SHIBYTE(this[3].__imp_.__imp_) < 0) {
    operator delete((void *)this[2].__imp_.__imp_);
  }
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }

  std::runtime_error::~runtime_error(this);
}

void Espresso::build_variable_loader(void *a1, uint64_t *a2, unsigned __int8 **a3)
{
  *(void *)&long long v59 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  if (!v5 || (uint64_t v7 = *a3, v7 == a3[1]))
  {
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    char v8 = *(std::__shared_weak_count **)(v5 + 24);
    v45[0] = *(void *)(v5 + 16);
    v45[1] = (uint64_t)v8;
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v5 = *a2;
      uint64_t v7 = *a3;
    }
    Espresso::net::get_global(&v23, v5, v7);
    int v9 = (*(uint64_t (**)(std::string::size_type))(*(void *)v23.__r_.__value_.__l.__data_ + 32))(v23.__r_.__value_.__r.__words[0]);
    v44[0] = 0;
    v44[1] = 0;
    Espresso::sequential_builder::sequential_builder((uint64_t)&v46, v45, v9, v44);
    if (v23.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v23.__r_.__value_.__l.__size_);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    uint64_t v10 = *a3;
    long long v11 = a3[1];
    if (*a3 != v11)
    {
      while (1)
      {
        if ((char)v10[23] < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v10, *((void *)v10 + 1));
        }
        else
        {
          long long v12 = *(_OWORD *)v10;
          __str.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v12;
        }
        Espresso::net::get_global(&v41, *a2, (unsigned __int8 *)&__str);
        std::operator+<char>();
        uint64_t v13 = v41;
        std::string v23 = *(std::string *)(v41 + 8);
        std::string::basic_string[abi:ne180100]<0>(&__p, "load_constant");
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v58, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
        }
        else {
          std::string v58 = v40;
        }
        long long v31 = 0;
        uint64_t v32 = 0;
        std::string::size_type v33 = 0;
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
        v56.__r_.__value_.__s.__data_[8] = 0;
        long long v31 = (std::string *)operator new(0x18uLL);
        uint64_t v32 = v31;
        std::string::size_type v33 = v31 + 1;
        uint64_t v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v33, (long long *)&v58, &v59, v31);
        Espresso::sequential_builder::add<Espresso::load_constant_params>((uint64_t *)&v54, &v46, (uint64_t)&__p, (uint64_t)&v40, (uint64_t)&v23, v34, v35, (uint64_t *)&v31);
        if (!v54) {
          break;
        }
        if (!v14) {
          goto LABEL_21;
        }
        int v15 = v55;
        if (v55)
        {
          atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_22;
        }
LABEL_24:
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        if (v39 < 0) {
          operator delete(__p);
        }
        int v16 = v42;
        v30[0] = v13;
        v30[1] = v42;
        if (v42) {
          atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::sync_copy_to_host(&__p, v30);
        if (v16) {
          nitro::nitro_function::nitro_function(v16);
        }
        uint64_t v28 = __p;
        long long v29 = v38;
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::generic_load_constant_kernel::set_constant_blob(v14, (uint64_t)&v28);
        if (v29) {
          nitro::nitro_function::nitro_function(v29);
        }
        if (v38) {
          nitro::nitro_function::nitro_function(v38);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
        memset(&v23, 0, sizeof(v23));
        char v24 = 0;
        long long v25 = xmmword_192DC3600;
        uint64_t v26 = 0x100000001;
        int v27 = 0;
        std::string::operator=(&v23, &__str);
        std::string::basic_string[abi:ne180100]<0>(&__p, "store_global");
        std::operator+<char>();
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v56, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
        }
        else {
          std::string v56 = v40;
        }
        unint64_t v18 = 0;
        int v19 = 0;
        unint64_t v20 = 0;
        float v54 = (void **)&v18;
        LOBYTE(v55) = 0;
        unint64_t v18 = (std::string *)operator new(0x18uLL);
        int v19 = v18;
        unint64_t v20 = v18 + 1;
        int v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20, (long long *)&v56, (long long *)&v57, v18);
        memset(v17, 0, sizeof(v17));
        Espresso::sequential_builder::add<Espresso::store_global_params_t>(&v21, &v46, (uint64_t)&__p, (uint64_t)&v58, (uint64_t)&v23, (uint64_t)v18, (uint64_t)v19, v17);
        if (v22) {
          nitro::nitro_function::nitro_function(v22);
        }
        float v54 = (void **)v17;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v54);
        float v54 = (void **)&v18;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v54);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v56.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        if (v39 < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
        if (v42) {
          nitro::nitro_function::nitro_function(v42);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        v10 += 24;
        if (v10 == v11) {
          goto LABEL_60;
        }
      }
      unint64_t v14 = 0;
LABEL_21:
      int v15 = 0;
LABEL_22:
      if (v55) {
        nitro::nitro_function::nitro_function(v55);
      }
      goto LABEL_24;
    }
LABEL_60:
    *(_OWORD *)&v23.__r_.__value_.__r.__words[1] = 0uLL;
    v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23.__r_.__value_.__l.__size_;
    Espresso::sequential_builder::build_from_shapes((uint64_t)&v46, (uint64_t)&v23, a1);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v23, (char *)v23.__r_.__value_.__l.__size_);
    std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v53);
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    if (v51) {
      nitro::nitro_function::nitro_function(v51);
    }
    if (v50) {
      nitro::nitro_function::nitro_function(v50);
    }
    if (v49 < 0) {
      operator delete(v48[5]);
    }
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v48, v48[1]);
    if (v47) {
      nitro::nitro_function::nitro_function(v47);
    }
  }
}

void sub_1929D4594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
}

void sub_1929D4748()
{
}

void sub_1929D4750()
{
}

void sub_1929D4758()
{
}

void Espresso::sequential_builder::add<Espresso::store_global_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  int v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  long long v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  long long v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1929D4940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::make_filled_bc(uint64_t *a1, uint64_t a2, float a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(void))(**(void **)(*(void *)a2 + 8) + 24))(*(void *)(*(void *)a2 + 8));
  uint64_t v8 = *a1;
  uint64_t v11 = 0;
  long long v12 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v8 + 16))(v8, a5, &v11);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  int v9 = (std::__shared_weak_count *)a1[1];
  v10[0] = *a1;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::fill_bc(v10, a3);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1929D4AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  int v15 = *(std::__shared_weak_count **)(v12 + 8);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::fill_bc(void *a1, float a2)
{
  void (***v11)(uint64_t *__return_ptr, void);
  uint64_t v12;
  std::__shared_weak_count *v13;
  void v14[5];
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v12, *(_DWORD *)(*a1 + 8), *(_DWORD *)(*a1 + 12), *(_DWORD *)(*a1 + 16), *(_DWORD *)(*a1 + 20));
  uint64_t v4 = v12;
  uint64_t v5 = *(int *)(v12 + 8);
  for (uint64_t i = 12; i != 24; i += 4)
    v5 *= *(int *)(v12 + i);
  if (v5)
  {
    uint64_t v7 = *(float **)(v12 + 24);
    do
    {
      *v7++ = a2;
      --v5;
    }
    while (v5);
  }
  uint64_t v8 = *a1;
  int v9 = (std::__shared_weak_count *)a1[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void (****)(uint64_t *__return_ptr, void))(v8 + 72);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3321888768;
  v14[2] = ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEENS1_INS_4blobIfLi4EEEEE_block_invoke_13021;
  v14[3] = &__block_descriptor_64_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE_e10_v16__0r_v8l;
  v14[4] = v8;
  int v15 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = v4;
  uint64_t v17 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_context::compute_batch_sync(v11, v14);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1929D4C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a16)
  {
    nitro::nitro_function::nitro_function(a16);
    if (!v18)
    {
LABEL_5:
      if (!v19) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if (!v18)
  {
    goto LABEL_5;
  }
  nitro::nitro_function::nitro_function(v18);
  if (!v19)
  {
LABEL_6:
    if (!v18) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_11:
  nitro::nitro_function::nitro_function(v19);
  if (!v18) {
LABEL_8:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  nitro::nitro_function::nitro_function(v18);
  goto LABEL_8;
}

uint64_t ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEENS1_INS_4blobIfLi4EEEEE_block_invoke_13021(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 48))(*(void *)(a1 + 32), a2, a1 + 48);
}

uint64_t Espresso::gradient_not_implemented_error::gradient_not_implemented_error(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  std::operator+<char>();
  uint64_t v8 = std::string::append(&v27, " of type ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = *((char *)a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v11 = *(const std::string::value_type **)a2;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    std::string::size_type v12 = *((void *)a2 + 1);
  }
  uint64_t v13 = std::string::append(&v28, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  int v15 = std::string::append(&v29, " at index ");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v19 = std::string::append(&v30, (const std::string::value_type *)p_p, size);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  int64_t v32 = v19->__r_.__value_.__r.__words[2];
  long long v31 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (v32 >= 0) {
    uint64_t v21 = (const char *)&v31;
  }
  else {
    uint64_t v21 = (const char *)v31;
  }
  std::runtime_error::runtime_error((std::runtime_error *)a1, v21);
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1EE365E60;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v22 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v22;
  }
  std::string v23 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v24 = *a3;
    *(void *)(a1 + 56) = *((void *)a3 + 2);
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
  }
  *(void *)(a1 + 64) = a4;
  return a1;
}

void sub_1929D4EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 + 39) < 0) {
    operator delete(*v41);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)v40);
  _Unwind_Resume(a1);
}

void Espresso::mark_block_start(uint64_t *a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = (std::__shared_weak_count *)a1[1];
    v25[0] = *a1;
    v25[1] = (uint64_t)v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v5 = *a1;
    }
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 24);
    v24[0] = *(void *)(v5 + 16);
    v24[1] = (uint64_t)v7;
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v5 = *a1;
    }
    int v8 = *(_DWORD *)(**(void **)(v5 + 32) + 12);
    v23[0] = 0;
    v23[1] = 0;
    Espresso::sequential_builder::sequential_builder((Espresso::sequential_builder *)&v26, v25, v24, v8, v23);
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
    uint64_t v9 = v36;
    memset(v17, 0, sizeof(v17));
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v17, 0, (uint64_t)v18);
    Espresso::make_filled_bc(&v21, (uint64_t)&v34, 1.0, v9, (uint64_t)v18);
    if (__p)
    {
      long long v20 = __p;
      operator delete(__p);
    }
    int v10 = v22;
    v14[0] = v21;
    v14[1] = (uint64_t)v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v13 = *(std::string *)a2;
    }
    Espresso::sequential_builder::load_global_op((std::string *)a2, &v13, (uint64_t *)&v26, v14, (uint64_t)&v15);
    if (v16 < 0) {
      operator delete(v15);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    Espresso::sequential_builder::build_from_shapes((uint64_t)&v26, (uint64_t)v26, 1, &v11);
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v37);
    if (v35) {
      nitro::nitro_function::nitro_function(v35);
    }
    if (v33) {
      nitro::nitro_function::nitro_function(v33);
    }
    if (v32) {
      nitro::nitro_function::nitro_function(v32);
    }
    if (v31 < 0) {
      operator delete(v30);
    }
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v28, v29);
    if (v27) {
      nitro::nitro_function::nitro_function(v27);
    }
  }
  std::operator+<char>();
  mark_scope(a1, a2, (uint64_t)&v26);
  if ((v28[7] & 0x80000000) != 0) {
    operator delete(v26);
  }
}

void sub_1929D51D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  if (a34) {
    nitro::nitro_function::nitro_function(a34);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&a41);
  _Unwind_Resume(a1);
}

void sub_1929D5244()
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  if (v0) {
    nitro::nitro_function::nitro_function(v0);
  }
  JUMPOUT(0x1929D523CLL);
}

void sub_1929D5264(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1929D523CLL);
}

void mark_scope(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v40 = *MEMORY[0x1E4F143B8];
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(*a1 + 136), (unsigned __int8 *)a2))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(void *)a2;
    }
    uint64_t v27 = v10;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("blob of name %s does not exist", &v27);
  }
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  v26[0] = *a1;
  v26[1] = (uint64_t)v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a1;
  }
  int v8 = *(std::__shared_weak_count **)(v6 + 24);
  v25[0] = *(void *)(v6 + 16);
  v25[1] = (uint64_t)v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a1;
  }
  int v9 = *(_DWORD *)(**(void **)(v6 + 32) + 12);
  v24[0] = 0;
  v24[1] = 0;
  Espresso::sequential_builder::sequential_builder((Espresso::sequential_builder *)&v27, v26, v25, v9, v24);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "copy");
  int v19 = 0;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v39 = *(std::string *)a2;
  }
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  v37.__r_.__value_.__s.__data_[8] = 0;
  char v16 = (std::string *)operator new(0x18uLL);
  uint64_t v17 = v16;
  uint64_t v18 = v16 + 1;
  uint64_t v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (long long *)&v39, &v40, v16);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v37 = *(std::string *)a3;
  }
  std::string v13 = 0;
  long long v14 = 0;
  int v15 = 0;
  uint64_t v35 = &v13;
  char v36 = 0;
  std::string v13 = (std::string *)operator new(0x18uLL);
  long long v14 = v13;
  int v15 = v13 + 1;
  long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (long long *)&v37, (long long *)&v38, v13);
  Espresso::sequential_builder::add<Espresso::copy_params_t>(&v22, &v27, (uint64_t)__p, a3, (uint64_t)&v19, (uint64_t)v16, (uint64_t)v17, (uint64_t *)&v13);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  uint64_t v35 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  Espresso::sequential_builder::build_from_shapes((uint64_t)&v27, v27, 1, &v11);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v34);
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  if (v30 < 0) {
    operator delete(v29[5]);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v29, v29[1]);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
}

void sub_1929D5588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  *(void *)(v33 - 112) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 112));
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&a33);
  _Unwind_Resume(a1);
}

void sub_1929D562C()
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  if (v0) {
    nitro::nitro_function::nitro_function(v0);
  }
  JUMPOUT(0x1929D5624);
}

void sub_1929D564C()
{
}

void Espresso::mark_block_end(void *a1, uint64_t a2)
{
  std::operator+<char>();
  mark_scope(a1, a2, (uint64_t)&__p);
  if (v5 < 0) {
    operator delete(__p);
  }
}

void sub_1929D56B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::guard_block_with_if (uint64_t a1, uint64_t a2)
{
  v2[4] = *MEMORY[0x1E4F143B8];
  v2[0] = &unk_1EE37C5E8;
  v2[1] = a2;
  v2[3] = v2;
  Espresso::transform_network_inplace(a1);
}

void sub_1929D5750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(Espresso::net &,Espresso::sequential_builder &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0,std::allocator<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0>,void ()(Espresso::net&,Espresso::sequential_builder &)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0,std::allocator<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0>,void ()(Espresso::net&,Espresso::sequential_builder &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso19guard_block_with_ifERNSt3__110shared_ptrINS_3netEEERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0,std::allocator<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0>,void ()(Espresso::net&,Espresso::sequential_builder &)>::operator()(uint64_t a1, Espresso::net *a2, uint64_t *a3)
{
  *((void *)&v41 + 1) = *MEMORY[0x1E4F143B8];
  std::operator+<char>();
  std::operator+<char>();
  uint64_t v6 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) != v6)
  {
    for (unint64_t i = 0; i < (*((void *)a2 + 5) - v6) >> 4; ++i)
    {
      uint64_t v8 = *(void *)(v6 + 16 * i);
      int v9 = (const void **)(v8 + 16);
      uint64_t v10 = *(unsigned __int8 *)(v8 + 39);
      size_t v11 = *(void *)(v8 + 24);
      if ((v10 & 0x80u) == 0) {
        std::string::size_type v12 = (void *)*(unsigned __int8 *)(v8 + 39);
      }
      else {
        std::string::size_type v12 = *(void **)(v8 + 24);
      }
      unint64_t v13 = v37;
      if ((v37 & 0x80u) != 0) {
        unint64_t v13 = (unint64_t)v36[1];
      }
      if (v12 == (void *)v13)
      {
        if ((v37 & 0x80u) == 0) {
          long long v14 = v36;
        }
        else {
          long long v14 = (void **)v36[0];
        }
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*v9, v14, v11))
          {
LABEL_30:
            std::string::basic_string[abi:ne180100]<0>(__p, "cf_if");
            int v19 = *(long long **)(a1 + 8);
            if (*((char *)v19 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v19, *((void *)v19 + 1));
            }
            else
            {
              long long v20 = *v19;
              v40.__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
              *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v20;
            }
            uint64_t v26 = 0;
            uint64_t v27 = 0;
            std::string v28 = 0;
            uint64_t v38 = (void **)&v26;
            char v39 = 0;
            uint64_t v26 = (std::string *)operator new(0x18uLL);
            uint64_t v27 = v26;
            std::string v28 = v26 + 1;
            uint64_t v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v28, (long long *)&v40, &v41, v26);
            memset(v25, 0, sizeof(v25));
            Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v32, a3, (uint64_t)__p, (uint64_t)v36, (uint64_t)&v29, (uint64_t)v26, (uint64_t)v27, v25);
            if (v33) {
              nitro::nitro_function::nitro_function(v33);
            }
            uint64_t v38 = (void **)v25;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v38);
            uint64_t v38 = (void **)&v26;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v38);
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v40.__r_.__value_.__l.__data_);
            }
LABEL_42:
            if (v31 < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_44;
          }
        }
        else
        {
          if (!*(unsigned char *)(v8 + 39)) {
            goto LABEL_30;
          }
          int v15 = (unsigned __int8 *)(v8 + 16);
          uint64_t v16 = v10;
          while (*v15 == *(unsigned __int8 *)v14)
          {
            ++v15;
            long long v14 = (void **)((char *)v14 + 1);
            if (!--v16) {
              goto LABEL_30;
            }
          }
        }
      }
      unint64_t v17 = v35;
      if ((v35 & 0x80u) != 0) {
        unint64_t v17 = (unint64_t)v34[1];
      }
      if (v12 == (void *)v17)
      {
        if ((v35 & 0x80u) == 0) {
          uint64_t v18 = v34;
        }
        else {
          uint64_t v18 = (void **)v34[0];
        }
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(*v9, v18, v11))
          {
LABEL_34:
            std::string::basic_string[abi:ne180100]<0>(__p, "cf_end");
            memset(v22, 0, sizeof(v22));
            memset(v21, 0, sizeof(v21));
            Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v23, a3, (uint64_t)__p, (uint64_t)v34, (uint64_t)&v38, 0, 0, v21);
            if (v24) {
              nitro::nitro_function::nitro_function(v24);
            }
            v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
            v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
            goto LABEL_42;
          }
        }
        else
        {
          if (!v10) {
            goto LABEL_34;
          }
          while (*(unsigned __int8 *)v9 == *(unsigned __int8 *)v18)
          {
            int v9 = (const void **)((char *)v9 + 1);
            uint64_t v18 = (void **)((char *)v18 + 1);
            if (!--v10) {
              goto LABEL_34;
            }
          }
        }
      }
      Espresso::sequential_builder::add_layer_from_network((Espresso::sequential_builder *)a3, a2, i);
LABEL_44:
      uint64_t v6 = *((void *)a2 + 4);
    }
  }
  if ((char)v35 < 0) {
    operator delete(v34[0]);
  }
  if ((char)v37 < 0) {
    operator delete(v36[0]);
  }
}

void sub_1929D5B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (*(char *)(v37 - 145) < 0) {
    operator delete(*(void **)(v37 - 168));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0,std::allocator<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0>,void ()(Espresso::net&,Espresso::sequential_builder &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37C5E8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0,std::allocator<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0>,void ()(Espresso::net&,Espresso::sequential_builder &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1EE37C5E8;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0,std::allocator<Espresso::guard_block_with_if (std::shared_ptr<Espresso::net> &,std::string const&)::$_0>,void ()(Espresso::net&,Espresso::sequential_builder &)>::~__func()
{
}

void *std::__function::__func<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0,std::allocator<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0,std::allocator<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso27transform_consts_to_globalsERNS_3netERKNSt3__16vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0,std::allocator<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::operator()(void *a1, Espresso::net *a2, uint64_t *a3)
{
  void (***v23)(uint64_t *__return_ptr, void);
  uint64_t v24;
  std::__shared_weak_count *v25;
  long long v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  std::string *v33;
  uint64_t v34;
  std::string *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  std::string v42;
  uint64_t v43[2];
  long long v44;
  std::string::size_type v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  long long v48;
  int v49;
  int v50;
  long long v51;
  long long __p;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t v58;
  std::__split_buffer<std::string> __v;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;

  uint64_t v4 = (std::string **)a1[1];
  char v5 = *v4;
  char v39 = (uint64_t *)v4[1];
  if (*v4 != (std::string *)v39)
  {
    while (1)
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(a1[2] + 16), (unsigned __int8 *)v5))
      {
        if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0) {
          char v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
        }
        __v.__first_ = v5;
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Blob %s does not exist", &__v);
      }
      uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(a1[2] + 16), (unsigned __int8 *)v5);
      if (!v6) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v7 = *((int *)v6 + 10);
      std::string v58 = 0;
      std::string v58 = *(void *)(*(void *)(a1[2] + 152) + 8 * v7);
      uint64_t v8 = (uint64_t *)(*((void *)a2 + 4) + 16 * v58);
      uint64_t v10 = *v8;
      int v9 = (std::__shared_weak_count *)v8[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v11 = *(const void **)(v10 + 64);
      if (!v11
      {
        if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0) {
          char v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
        }
        __v.__first_ = v5;
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Blob %s is not a constant", &__v);
      }
      unint64_t v13 = v12;
      long long v14 = *(std::__shared_weak_count **)(v10 + 72);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v56, v12 + 43);
      Espresso::abstract_blob_container::make((uint64_t)(v13 + 1), (int *)(v10 + 8), (unsigned int *)(v10 + 12), &v54);
      uint64_t v15 = (*(uint64_t (**)(uint64_t *))(*v13 + 384))(v13);
      int v16 = *(_DWORD *)(v15 + 16);
      long long v17 = *(_OWORD *)v15;
      uint64_t v53 = 0;
      char v51 = 0u;
      std::string __p = 0u;
      int v48 = v17;
      int v18 = *(_DWORD *)(v15 + 20);
      char v49 = v16;
      char v50 = v18;
      uint64_t v46 = 0;
      int v47 = 0;
      (*(void (**)(uint64_t, long long *, uint64_t *))(*(void *)v54 + 16))(v54, &v48, &v46);
      if (v47) {
        nitro::nitro_function::nitro_function(v47);
      }
      uint64_t v19 = v54;
      long long v20 = v55;
      if (v55) {
        atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v21 = v56;
      uint64_t v22 = v57;
      if (v57) {
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = *(void (****)(uint64_t *__return_ptr, void))(v19 + 72);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)MEMORY[0x1E4F143A8];
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)3321888768;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEENS1_INS_4blobIfLi4EEEEE_block_invoke_13021;
      __v.__end_cap_.__value_ = (std::string *)&__block_descriptor_64_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE_e10_v16__0r_v8l;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)v19;
      unsigned int v60 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v61 = v21;
      int v62 = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::abstract_context::compute_batch_sync(v23, &__v);
      if (v62) {
        nitro::nitro_function::nitro_function(v62);
      }
      if (v60) {
        nitro::nitro_function::nitro_function(v60);
      }
      if (v22) {
        nitro::nitro_function::nitro_function(v22);
      }
      if (v20) {
        nitro::nitro_function::nitro_function(v20);
      }
      long long v24 = a1[3];
      long long v25 = v55;
      v43[0] = v54;
      v43[1] = (uint64_t)v55;
      if (v55) {
        atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v42, v5->__r_.__value_.__l.__data_, v5->__r_.__value_.__l.__size_);
      }
      else
      {
        uint64_t v26 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v26;
      }
      Espresso::sequential_builder::load_global_op(v5, &v42, a3, v43, (uint64_t)&v44);
      uint64_t v27 = *(void *)(v24 + 16);
      std::string v28 = *(void *)(v24 + 8);
      if (v28 >= v27)
      {
        char v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *(void *)v24) >> 3);
        char v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *(void *)v24) >> 3);
        if (2 * v32 > v31) {
          char v31 = 2 * v32;
        }
        uint64_t v33 = (std::string *)(v32 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v31);
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v24 + 16);
        if (v33) {
          uint64_t v33 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((unint64_t)v33);
        }
        else {
          uint64_t v34 = 0;
        }
        unsigned __int8 v35 = v33 + v30;
        __v.__first_ = v33;
        __v.__begin_ = v35;
        __v.__end_cap_.__value_ = &v33[v34];
        *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v44;
        v35->__r_.__value_.__r.__words[2] = v45;
        int v44 = 0uLL;
        unsigned int v45 = 0;
        __v.__end_ = v35 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v24, &__v);
        char v29 = *(void *)(v24 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        *(_OWORD *)std::string v28 = v44;
        *(void *)(v28 + 16) = v45;
        unsigned int v45 = 0;
        int v44 = 0uLL;
        char v29 = v28 + 24;
        *(void *)(v24 + 8) = v28 + 24;
      }
      *(void *)(v24 + 8) = v29;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v25) {
        goto LABEL_47;
      }
LABEL_48:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(a1[4], &v58, &v58);
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (v55) {
        nitro::nitro_function::nitro_function(v55);
      }
      if (v22) {
        nitro::nitro_function::nitro_function(v22);
      }
      if (v14) {
        nitro::nitro_function::nitro_function(v14);
      }
      if (v9) {
        nitro::nitro_function::nitro_function(v9);
      }
      if (++v5 == (std::string *)v39) {
        goto LABEL_62;
      }
    }
    operator delete(v42.__r_.__value_.__l.__data_);
    if (!v25) {
      goto LABEL_48;
    }
LABEL_47:
    nitro::nitro_function::nitro_function(v25);
    goto LABEL_48;
  }
LABEL_62:
  uint64_t v37 = *((void *)a2 + 4);
  char v36 = *((void *)a2 + 5);
  if (v36 != v37)
  {
    uint64_t v38 = 0;
    do
    {
      if (!std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((void *)a1[4], v38))
      {
        Espresso::sequential_builder::add_layer_from_network((Espresso::sequential_builder *)a3, a2, v38);
        uint64_t v37 = *((void *)a2 + 4);
        char v36 = *((void *)a2 + 5);
      }
      ++v38;
    }
    while (v38 < (v36 - v37) >> 4);
  }
}

void sub_1929D61E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,std::__shared_weak_count *a40)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  if (a34) {
    operator delete(a34);
  }
  if (a38) {
    nitro::nitro_function::nitro_function(a38);
  }
  if (a40)
  {
    nitro::nitro_function::nitro_function(a40);
    if (!v41)
    {
LABEL_13:
      if (!v40) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
  else if (!v41)
  {
    goto LABEL_13;
  }
  nitro::nitro_function::nitro_function(v41);
  if (!v40) {
LABEL_15:
  }
    _Unwind_Resume(exception_object);
LABEL_14:
  nitro::nitro_function::nitro_function(v40);
  goto LABEL_15;
}

void sub_1929D62EC()
{
  if (!v0) {
    JUMPOUT(0x1929D62CCLL);
  }
  JUMPOUT(0x1929D62C4);
}

__n128 std::__function::__func<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0,std::allocator<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37CAB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0,std::allocator<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE37CAB8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0,std::allocator<Espresso::transform_consts_to_globals(Espresso::net &,std::vector<std::string> const&)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::~__func()
{
}

void Espresso::convolution_grad_kernel_cpu::clear_weights(Espresso::convolution_grad_kernel_cpu *this)
{
}

void Espresso::convolution_grad_kernel_cpu::__launch(int32x2_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  char v5 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v5)
  {
    uint64_t v7 = (int32x2_t *)*((void *)v5 + 20);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)v5 + 21);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  uint64_t v8 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v8)
  {
    int v9 = (int32x2_t *)v8[20];
    uint64_t v10 = (std::__shared_weak_count *)v8[21];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v9 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v53 = v9;
  size_t v11 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 2);
  if (v11)
  {
    std::string::size_type v12 = (std::__shared_weak_count *)v11[21];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    std::string::size_type v12 = 0;
  }
  unint64_t v13 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 3);
  if (v13)
  {
    uint64_t v15 = (std::__shared_weak_count *)*((void *)v13 + 21);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  LODWORD(v16) = a1[52].i32[1];
  if ((int)v16 <= 1) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = v16;
  }
  uint64_t v52 = v16;
  int v17 = a1[47].i16[0];
  switch(v17)
  {
    case 4:
      goto LABEL_23;
    case 2:
      int32x2_t v21 = 0;
      break;
    case 1:
LABEL_23:
      v18.i32[0] = a1[49].i16[2];
      v18.i32[1] = a1[49].i16[3];
      int32x2_t v19 = vmax_s32(vsub_s32(vmla_s32(a1[44], vadd_s32(v53[1], (int32x2_t)-1), v18), v7[1]), 0);
      int32x2_t v20 = (int32x2_t)vshr_n_u32((uint32x2_t)v19, 1uLL);
      int32x2_t v21 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a1[47].u16[0] == 1), 0x1FuLL)), (int8x8_t)v20, (int8x8_t)vsub_s32(v19, v20));
      break;
    default:
      v14.i16[0] = a1[48].i16[0];
      v14.i16[2] = a1[48].i16[2];
      int32x2_t v21 = vshr_n_s32(vshl_n_s32(v14, 0x10uLL), 0x10uLL);
      break;
  }
  int32x2_t v56 = v21;
  uint64_t v22 = a4[1];
  int v47 = v10;
  int v48 = v6;
  uint64_t v46 = v12;
  if ((unint64_t)(v22 - *a4) < 0x11)
  {
    int32x2_t v26 = a1[35];
    if (*(void *)&v26 == *(void *)&a1[36])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "associated_forward_kernel not configured");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v27 = **(void ***)&v26;
    long long v25 = *(std::__shared_weak_count **)(*(void *)&v26 + 8);
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v57, v27, v25);
    char v51 = *(const float **)(v57 + 24);
    if (v58) {
      nitro::nitro_function::nitro_function(v58);
    }
    if (v25) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v23 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v22, 1);
    uint64_t v24 = *((void *)v23 + 20);
    long long v25 = (std::__shared_weak_count *)*((void *)v23 + 21);
    if (v25)
    {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      char v51 = *(const float **)(v24 + 24);
LABEL_35:
      nitro::nitro_function::nitro_function(v25);
      goto LABEL_37;
    }
    char v51 = *(const float **)(v24 + 24);
  }
LABEL_37:
  std::string v28 = v53;
  __int32 v29 = a1[43].i32[0];
  int v30 = a1[44].i32[0] * a1[43].i32[1] * a1[44].i32[1];
  int v31 = v53[1].i32[0];
  int v32 = v53[1].i32[1];
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&v57, v31, v32, v30, 1);
  if (v53[2].i32[1] >= 1)
  {
    __int32 v33 = 0;
    int v34 = v29 / (int)v52;
    int __ldc = v32 * v31;
    int v36 = v30 / (int)v52;
    int v49 = v56.i32[0];
    char v50 = v7;
    do
    {
      uint64_t v37 = 0;
      float v55 = (Espresso *)(*(void *)&v7[3] + 4 * v7[1].i32[0] * v33 * v7[1].i32[1] * v7[2].i32[0]);
      v56.i32[0] = v33;
      __B = (const float *)(*(void *)&v28[3] + 4 * v28[1].i32[1] * v28[2].i32[0] * v28[1].i32[0] * v33);
      std::string v40 = v51;
      uint64_t v39 = v52;
      do
      {
        cblas_sgemm(CblasRowMajor, CblasTrans, CblasNoTrans, v36, __ldc, v34, 1.0, v40, v36, __B, __ldc, 0.0, (float *)(*(void *)(v57 + 24) + v37), __ldc);
        v37 += 4 * __ldc * v36;
        __B += __ldc * v34;
        v40 += v36 * v34;
        --v39;
      }
      while (v39);
      std::string v28 = v53;
      uint64_t v7 = v50;
      int v41 = a1[50].i16[0];
      if (v41 <= 1) {
        int v41 = 1;
      }
      int v42 = a1[50].i16[1];
      if (v42 <= 1) {
        int v42 = 1;
      }
      Espresso::colbuffer2image(v55, *(float **)(v57 + 24), (const float *)a1[43].u32[1], v50[1].i32[1], v50[1].i32[0], v53[1].i32[1], v53[1].i32[0], a1[44].i32[1], a1[44].i32[0], v56.i32[1], v49, a1[49].i16[2], a1[49].i16[3], v41, v42, v44, v45, SHIDWORD(v45));
      __int32 v33 = v56.i32[0] + 1;
    }
    while (v56.i32[0] + 1 < v53[2].i32[1]);
  }
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  if (v48)
  {
    nitro::nitro_function::nitro_function(v48);
  }
}

void sub_1929D6850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (v20)
  {
    nitro::nitro_function::nitro_function(v20);
    if (!v19)
    {
LABEL_3:
      if (!v18) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if (!v19)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v19);
  if (!v18)
  {
LABEL_4:
    if (!v17) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  nitro::nitro_function::nitro_function(v18);
  if (!v17) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_5:
  nitro::nitro_function::nitro_function(v17);
  goto LABEL_6;
}

void Espresso::convolution_grad_kernel_cpu::~convolution_grad_kernel_cpu(Espresso::convolution_grad_kernel_cpu *this)
{
  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::convolution_weights_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    uint64_t v7 = v6[20];
    uint64_t v8 = (std::__shared_weak_count *)v6[21];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  int v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v9)
  {
    size_t v11 = (_DWORD *)v9[20];
    uint64_t v10 = (std::__shared_weak_count *)v9[21];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    size_t v11 = 0;
    uint64_t v10 = 0;
  }
  std::string::size_type v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  if (v12)
  {
    unint64_t v13 = (std::__shared_weak_count *)v12[21];
    uint64_t v80 = v12[20];
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v80 = 0;
    unint64_t v13 = 0;
  }
  LODWORD(v14) = *(_DWORD *)(a1 + 420);
  if ((int)v14 <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v14;
  }
  uint64_t v84 = v14;
  int v15 = v11[2];
  int v16 = v11[3];
  int v17 = *(_DWORD *)(a1 + 352);
  int v18 = *(_DWORD *)(a1 + 356);
  int v19 = *(__int16 *)(a1 + 376);
  int v78 = v8;
  uint64_t v76 = v13;
  switch(v19)
  {
    case 4:
      goto LABEL_19;
    case 2:
      signed int v30 = 0;
      signed int v28 = 0;
      break;
    case 1:
LABEL_19:
      int v20 = v18 + (v16 - 1) * *(__int16 *)(a1 + 398) - *(_DWORD *)(v80 + 12);
      int v21 = v17 + (v15 - 1) * *(__int16 *)(a1 + 396) - *(_DWORD *)(v80 + 8);
      unsigned int v22 = v20 & ~(v20 >> 31);
      unsigned int v23 = v21 & ~(v21 >> 31);
      int v24 = *(unsigned __int16 *)(a1 + 376);
      unsigned int v25 = v23 >> 1;
      unsigned int v26 = v23 - (v23 >> 1);
      unsigned int v27 = v22 >> 1;
      signed int v28 = v22 - (v22 >> 1);
      BOOL v29 = v24 == 1;
      if (v24 == 1) {
        signed int v30 = v25;
      }
      else {
        signed int v30 = v26;
      }
      if (v29) {
        signed int v28 = v27;
      }
      break;
    default:
      signed int v30 = *(__int16 *)(a1 + 384);
      signed int v28 = *(__int16 *)(a1 + 388);
      break;
  }
  unsigned int v77 = v10;
  int v31 = *(_DWORD *)(a1 + 344);
  int v32 = *(_DWORD *)(a1 + 348);
  int v33 = v18 * v17;
  int v34 = v18 * v17 * v32;
  if (v30 <= v28) {
    signed int v30 = v28;
  }
  if (v17 == 1) {
    signed int v35 = 0;
  }
  else {
    signed int v35 = v30;
  }
  int v91 = v35;
  if (v18 == 1) {
    signed int v36 = 0;
  }
  else {
    signed int v36 = v30;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&v98, v15, v16, v33 * v32, 1);
  uint64_t v37 = 0;
  int v38 = v31 / (int)v84;
  int __ldb = v16 * v15;
  int __ldc = v34 / (int)v84;
  int v41 = v34 / (int)v84 * (v31 / (int)v84);
  int v42 = v34 / (int)v84 * __ldb;
  int __M = v38;
  int v43 = v38 * __ldb;
  int v83 = *(void **)(v7 + 24);
  uint64_t v44 = *(int *)(v7 + 8);
  do
  {
    v44 *= *(int *)(v7 + 12 + v37);
    v37 += 4;
  }
  while (v37 != 12);
  uint64_t v45 = v11;
  if (v44) {
    bzero(v83, 4 * v44);
  }
  if ((int)v11[5] >= 1)
  {
    int v90 = 0;
    int v79 = 2 * v36;
    uint64_t v96 = 4 * v41;
    uint64_t v97 = v98;
    uint64_t v94 = 4 * v43;
    uint64_t v95 = 4 * v42;
    uint64_t v46 = -(uint64_t)v36;
    uint64_t v85 = a1;
    float v81 = v11;
    do
    {
      uint64_t v89 = *((void *)v45 + 3);
      int v87 = v45[3];
      int v88 = v45[2];
      int v86 = v45[4];
      int v47 = *(_DWORD *)(a1 + 356);
      int v48 = *(_DWORD *)(a1 + 352);
      uint64_t v93 = (v48 * v47 * *(_DWORD *)(a1 + 348));
      if ((int)v93 > 0)
      {
        uint64_t v49 = 0;
        uint64_t v51 = *(int *)(v80 + 8);
        uint64_t v50 = *(int *)(v80 + 12);
        uint64_t v52 = *(_DWORD **)(v97 + 24);
        uint64_t v53 = *(__int16 *)(v85 + 396);
        uint64_t v54 = *(__int16 *)(v85 + 398);
        int v55 = ((int)v50 + v79 - v47) / (int)v54;
        uint64_t v56 = (v55 + 1);
        int v57 = ((int)v51 + 2 * v91 - v48) / (int)v53;
        int v58 = v57 + 1;
        uint64_t v92 = *(void *)(v80 + 24) + 4 * (int)v50 * *(_DWORD *)(v80 + 16) * (int)v51 * v90;
        do
        {
          if ((v55 & 0x80000000) == 0)
          {
            uint64_t v59 = 0;
            uint64_t v60 = (int)v49 - (v91 + (int)v49 / v48 * v48);
            uint64_t v61 = v92 + 4 * v51 * (v46 + (int)v49 / v48 % v47 + (int)v49 / (v48 * v47) * (int)v50) + 4 * v60;
            int v62 = v52;
            do
            {
              uint64_t v63 = v46 + v59 * v54 + (int)v49 / v48 % v47;
              BOOL v65 = v63 >= 0 && v63 < v50;
              if ((v57 & 0x80000000) == 0)
              {
                uint64_t v66 = 0;
                BOOL v67 = v62;
                uint64_t v68 = (v57 + 1);
                do
                {
                  BOOL v69 = v60 + v66 >= 0 && v65;
                  int v70 = 0;
                  if (v69 && v60 + v66 < v51) {
                    int v70 = *(_DWORD *)(v61 + 4 * v66);
                  }
                  *v67++ = v70;
                  v66 += v53;
                  --v68;
                }
                while (v68);
              }
              ++v59;
              v61 += 4 * (int)v54 * (uint64_t)(int)v51;
              v62 += v58;
            }
            while (v59 != v56);
          }
          ++v49;
          v52 += (int)v56 * (uint64_t)v58;
        }
        while (v49 != v93);
      }
      uint64_t v72 = 0;
      int v73 = (const float *)(v89 + 4 * v87 * v86 * v88 * v90);
      __C = (float *)v83;
      uint64_t v74 = v84;
      a1 = v85;
      uint64_t v45 = v81;
      do
      {
        cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, __M, __ldc, __ldb, 1.0, v73, __ldb, (const float *)(*(void *)(v97 + 24) + v72), __ldb, 1.0, __C, __ldc);
        __C = (float *)((char *)__C + v96);
        v72 += v95;
        int v73 = (const float *)((char *)v73 + v94);
        --v74;
      }
      while (v74);
      ++v90;
    }
    while (v90 < v81[5]);
  }
  if (v99) {
    nitro::nitro_function::nitro_function(v99);
  }
  if (v76) {
    nitro::nitro_function::nitro_function(v76);
  }
  if (v77) {
    nitro::nitro_function::nitro_function(v77);
  }
  if (v78)
  {
    nitro::nitro_function::nitro_function(v78);
  }
}

void sub_1929D6EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16)
{
  if (a14)
  {
    nitro::nitro_function::nitro_function(a14);
    if (!a15)
    {
LABEL_3:
      if (!a16) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!a15)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(a15);
  if (!a16) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  nitro::nitro_function::nitro_function(a16);
  goto LABEL_5;
}

void Espresso::convolution_weights_grad_kernel_cpu::~convolution_weights_grad_kernel_cpu(Espresso::convolution_weights_grad_kernel_cpu *this)
{
  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::pool_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (!v4)
  {
    uint64_t v6 = 0;
    goto LABEL_5;
  }
  uint64_t v6 = (int32x2_t *)*((void *)v4 + 20);
  uint64_t v5 = *((void *)v4 + 21);
  if (!v5)
  {
LABEL_5:
    uint64_t v94 = 0;
    goto LABEL_6;
  }
  uint64_t v94 = (std::__shared_weak_count *)*((void *)v4 + 21);
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
LABEL_6:
  uint64_t v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  if (v7 && (uint64_t v8 = *((void *)v7 + 21)) != 0)
  {
    uint64_t v93 = (std::__shared_weak_count *)*((void *)v7 + 21);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v93 = 0;
  }
  int v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v9)
  {
    uint64_t v97 = (int32x2_t *)*((void *)v9 + 20);
    uint64_t v11 = *((void *)v9 + 21);
    if (v11)
    {
      uint64_t v92 = (std::__shared_weak_count *)*((void *)v9 + 21);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v97 = 0;
  }
  uint64_t v92 = 0;
LABEL_15:
  unint64_t v12 = v6[1].i32[0];
  int v13 = *(__int16 *)(a1 + 316);
  if (v13 != 4)
  {
    if (v13 == 2)
    {
      int32x2_t v16 = 0;
      goto LABEL_21;
    }
    if (v13 != 1)
    {
      v10.i16[0] = *(_WORD *)(a1 + 324);
      v10.i16[2] = *(_WORD *)(a1 + 328);
      int32x2_t v16 = vshr_n_s32(vshl_n_s32(v10, 0x10uLL), 0x10uLL);
      goto LABEL_21;
    }
  }
  int32x2_t v14 = vmax_s32(vmla_s32(vsub_s32(*(int32x2_t *)(a1 + 284), v6[1]), vadd_s32(v97[1], (int32x2_t)-1), *(int32x2_t *)(a1 + 296)), 0);
  int32x2_t v15 = (int32x2_t)vshr_n_u32((uint32x2_t)v14, 1uLL);
  int32x2_t v16 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(unsigned __int16 *)(a1 + 316) == 1), 0x1FuLL)), (int8x8_t)v15, (int8x8_t)vsub_s32(v14, v15));
LABEL_21:
  unint64_t v17 = 0;
  int v100 = v6[2].i32[0];
  while (1)
  {
    uint64_t v18 = 0;
    unint64_t v19 = v12;
    do
      v19 *= v6[1].i32[++v18];
    while (v18 != 3);
    if (v19 <= v17) {
      break;
    }
    *(_DWORD *)(*(void *)&v6[3] + 4 * v17++) = 0;
  }
  if (v6[2].i32[1] >= 1)
  {
    __int32 v98 = 0;
    __int32 v20 = v16.i32[0];
    int v108 = -v16.i32[0];
    __int32 v112 = v16.i32[1];
    int v99 = -v16.i32[1];
    uint64_t v96 = v6;
    do
    {
      int32x2_t v21 = v97[3];
      __int32 v22 = v97[1].i32[0];
      __int32 v23 = v97[1].i32[1];
      __int32 v24 = v97[2].i32[0];
      int32x2_t v25 = v6[3];
      __int32 v26 = v6[1].i32[0];
      __int32 v27 = v6[1].i32[1];
      __int32 v28 = v6[2].i32[0];
      int v29 = *(_DWORD *)(a1 + 280);
      if (v29 == 2)
      {
        printf("Grad of L2 pooling not implemented, %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU_Backward.mm", 328);
        int v29 = *(_DWORD *)(a1 + 280);
      }
      uint64_t v30 = *(void *)&v21 + 4 * v22 * v98 * v23 * v24;
      switch(v29)
      {
        case 2:
          goto LABEL_33;
        case 1:
          int v58 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
          uint64_t v59 = *((void *)v58 + 20);
          uint64_t v60 = *((void *)v58 + 21);
          if (v60)
          {
            int v102 = (std::__shared_weak_count *)*((void *)v58 + 21);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
          }
          else
          {
            int v102 = 0;
          }
          if (v100 >= 1)
          {
            int v61 = 0;
            uint64_t v62 = *(void *)&v25 + 4 * v26 * v98 * v27 * v28;
            uint64_t v63 = *(int *)(v59 + 8);
            int v64 = *(_DWORD *)(v59 + 12) * v63;
            uint64_t v66 = v97[1].u32[0];
            uint64_t v65 = v97[1].u32[1];
            int v67 = v96[1].i32[0];
            int v68 = v96[1].i32[1];
            uint64_t v114 = *(void *)(v59 + 24) + 4 * v64 * *(_DWORD *)(v59 + 16) * v98;
            int v69 = v97[1].i32[0];
            uint64_t v103 = 4 * v64;
            int v111 = *(_DWORD *)(v59 + 8);
            uint64_t v70 = 4 * v63;
            do
            {
              int v107 = v61;
              if ((int)v65 >= 1)
              {
                uint64_t v71 = 0;
                int v72 = *(_DWORD *)(a1 + 300);
                int v73 = *(_DWORD *)(a1 + 288);
                int v74 = v99;
                do
                {
                  int v75 = v72 * v71 - v112;
                  if (v75 + v73 >= v68) {
                    int v76 = v68;
                  }
                  else {
                    int v76 = v75 + v73;
                  }
                  if (v69 >= 1)
                  {
                    uint64_t v77 = 0;
                    int v78 = v75 & ~(v75 >> 31);
                    int v79 = *(_DWORD *)(a1 + 296);
                    int v80 = *(_DWORD *)(a1 + 284);
                    int v81 = v108;
                    do
                    {
                      if (v78 >= v76)
                      {
                        int v89 = -1;
                        int v86 = -1;
                      }
                      else
                      {
                        int v82 = v79 * v77 - v20;
                        int v83 = v82 + v80;
                        if (v82 + v80 >= v67) {
                          int v83 = v67;
                        }
                        int v84 = v82 & ~(v82 >> 31);
                        float v85 = 0.0;
                        int v86 = -1;
                        uint64_t v87 = v114 + 4 * v111 * (v74 & ~(v74 >> 31));
                        int v88 = v78;
                        int v89 = -1;
                        do
                        {
                          uint64_t v90 = v81 & ~(v81 >> 31);
                          if (v84 < v83)
                          {
                            do
                            {
                              if (*(float *)(v87 + 4 * v90) > v85 || v89 == -1)
                              {
                                float v85 = *(float *)(v87 + 4 * v90);
                                int v89 = v90;
                                int v86 = v88;
                              }
                              ++v90;
                            }
                            while (v90 < v83);
                          }
                          ++v88;
                          v87 += v70;
                        }
                        while (v88 < v76);
                      }
                      *(float *)(v62 + 4 * (v89 + v86 * v67)) = *(float *)(v30 + 4 * (v77 + v71 * (int)v66))
                                                                + *(float *)(v62 + 4 * (v89 + v86 * v67));
                      ++v77;
                      v81 += v79;
                    }
                    while (v77 != v66);
                  }
                  ++v71;
                  v74 += v72;
                }
                while (v71 != v65);
              }
              v30 += 4 * (int)v66 * (int)v65;
              v62 += 4 * v68 * v67;
              ++v61;
              v114 += v103;
            }
            while (v107 + 1 != v100);
          }
          if (v102) {
            nitro::nitro_function::nitro_function(v102);
          }
          break;
        case 0:
LABEL_33:
          if (v100 >= 1)
          {
            int v31 = 0;
            uint64_t v32 = v97[1].u32[0];
            uint64_t v110 = v97[1].u32[1];
            uint64_t v33 = v96[1].i32[0];
            int v113 = v97[1].i32[0];
            uint64_t v106 = *(void *)&v25 + 4 * v27 * v28 * v26 * v98;
            __int32 v104 = v96[1].i32[1];
            uint64_t v34 = 4 * v33;
            do
            {
              int v101 = v31;
              if ((int)v110 >= 1)
              {
                uint64_t v35 = 0;
                int v36 = *(_DWORD *)(a1 + 300);
                int v105 = *(_DWORD *)(a1 + 288);
                int v37 = v99;
                do
                {
                  if (v113 >= 1)
                  {
                    uint64_t v38 = 0;
                    int v39 = v36 * v35 - v112;
                    __int32 v40 = v105 + v39;
                    if (v105 + v39 >= v104 + v112) {
                      __int32 v40 = v104 + v112;
                    }
                    if (v40 >= v104) {
                      __int32 v41 = v104;
                    }
                    else {
                      __int32 v41 = v40;
                    }
                    int v42 = v39 & ~(v39 >> 31);
                    int v43 = *(_DWORD *)(a1 + 296);
                    int v44 = *(_DWORD *)(a1 + 284);
                    int v45 = v40 - v39;
                    int v46 = *(_DWORD *)(a1 + 308);
                    int v47 = v41 - v42;
                    uint64_t v48 = v41;
                    int v49 = v108;
                    do
                    {
                      int v50 = v43 * v38 - v20;
                      int v51 = v44 + v50;
                      if (v44 + v50 >= (int)v33 + v20) {
                        int v51 = v33 + v20;
                      }
                      int v52 = v50 & ~(v50 >> 31);
                      if (v51 >= (int)v33) {
                        int v53 = v33;
                      }
                      else {
                        int v53 = v51;
                      }
                      int v54 = (v51 - v50) * v45;
                      if (v46) {
                        int v54 = (v53 - v52) * v47;
                      }
                      if (v42 < (int)v48)
                      {
                        uint64_t v55 = v106 + v34 * (v37 & ~(v37 >> 31));
                        uint64_t v56 = v37 & ~(v37 >> 31);
                        do
                        {
                          uint64_t v57 = v49 & ~(v49 >> 31);
                          if (v53 > v52)
                          {
                            do
                            {
                              *(float *)(v55 + 4 * v57) = *(float *)(v55 + 4 * v57)
                                                        + (float)(*(float *)(v30 + 4 * (v35 * (int)v32 + v38))
                                                                * (float)(1.0 / (float)v54));
                              ++v57;
                            }
                            while (v57 < v53);
                          }
                          ++v56;
                          v55 += v34;
                        }
                        while (v56 < v48);
                      }
                      ++v38;
                      v49 += v43;
                    }
                    while (v38 != v32);
                  }
                  ++v35;
                  v37 += v36;
                }
                while (v35 != v110);
              }
              v30 += 4 * (int)v32 * (int)v110;
              int v31 = v101 + 1;
              v106 += 4 * v104 * (int)v33;
            }
            while (v101 + 1 != v100);
          }
          break;
      }
      uint64_t v6 = v96;
      ++v98;
    }
    while (v98 < v96[2].i32[1]);
  }
  if (v92) {
    nitro::nitro_function::nitro_function(v92);
  }
  if (v93) {
    nitro::nitro_function::nitro_function(v93);
  }
  if (v94)
  {
    nitro::nitro_function::nitro_function(v94);
  }
}

void Espresso::pool_grad_kernel_cpu::~pool_grad_kernel_cpu(Espresso::pool_grad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::nonlinearity_grad_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    uint64_t v7 = *((void *)v6 + 20);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)v6 + 21);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  int v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v9)
  {
    uint64_t v11 = *((void *)v9 + 20);
    uint64_t v10 = *((void *)v9 + 21);
    if (v10)
    {
      v125 = (std::__shared_weak_count *)*((void *)v9 + 21);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  v125 = 0;
LABEL_10:
  unint64_t v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  if (v12)
  {
    uint64_t v14 = *((void *)v12 + 20);
    uint64_t v13 = *((void *)v12 + 21);
    if (v13)
    {
      v124 = (std::__shared_weak_count *)*((void *)v12 + 21);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  v124 = 0;
LABEL_15:
  int32x2_t v15 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 2);
  if (v15)
  {
    uint64_t v17 = *((void *)v15 + 20);
    uint64_t v16 = *((void *)v15 + 21);
    if (v16)
    {
      v123 = (std::__shared_weak_count *)*((void *)v15 + 21);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  v123 = 0;
LABEL_20:
  uint64_t v18 = 0;
  uint64_t v19 = *(int *)(v11 + 8);
  do
  {
    v19 *= *(int *)(v11 + 12 + v18);
    v18 += 4;
  }
  while (v18 != 12);
  uint64_t v20 = *(unsigned int *)(a1 + 280);
  switch((int)v20)
  {
    case 0:
      if (v19)
      {
        int32x2_t v21 = *(float **)(v11 + 24);
        __int32 v22 = *(float **)(v14 + 24);
        __int32 v23 = *(float **)(v7 + 24);
        do
        {
          float v24 = *v21++;
          float v25 = v24;
          float v26 = *v22++;
          if (v26 <= 0.0) {
            float v27 = 0.0;
          }
          else {
            float v27 = 1.0;
          }
          *v23++ = v25 * v27;
          --v19;
        }
        while (v19);
      }
      goto LABEL_161;
    case 1:
      if (v19)
      {
        int v76 = *(float **)(v17 + 24);
        uint64_t v77 = *(float **)(v11 + 24);
        int v78 = *(float **)(v7 + 24);
        do
        {
          float v79 = *v76++;
          float v80 = v79;
          float v81 = *v77++;
          *v78++ = (float)(1.0 - (float)(v80 * v80)) * v81;
          --v19;
        }
        while (v19);
      }
      goto LABEL_161;
    case 3:
      if (v19)
      {
        uint64_t v57 = *(float **)(v17 + 24);
        int v58 = *(float **)(v11 + 24);
        uint64_t v59 = *(float **)(v7 + 24);
        do
        {
          float v60 = *v57++;
          float v61 = v60;
          float v62 = *v58++;
          *v59++ = (float)(v61 - (float)(v61 * v61)) * v62;
          --v19;
        }
        while (v19);
      }
      goto LABEL_161;
    case 6:
      if (v19)
      {
        int v73 = *(float **)(v11 + 24);
        int v74 = *(float **)(v7 + 24);
        do
        {
          float v75 = *v73++;
          *v74++ = v75 * *(float *)(a1 + 284);
          --v19;
        }
        while (v19);
      }
      goto LABEL_161;
    case 7:
      float v42 = *(float *)(a1 + 288);
      float v43 = *(float *)(a1 + 284);
      float v44 = (float)-v42 / v43;
      float v45 = (float)(1.0 - v42) / v43;
      if (v43 <= 0.0)
      {
        if (v19)
        {
          uint64_t v88 = 0;
          uint64_t v89 = *(void *)(v14 + 24);
          uint64_t v90 = *(void *)(v7 + 24);
          do
          {
            float v91 = *(float *)(v89 + 4 * v88);
            float v92 = 0.0;
            if (v91 > v45 && v91 < v44) {
              float v92 = *(float *)(*(void *)(v11 + 24) + 4 * v88) * *(float *)(a1 + 284);
            }
            *(float *)(v90 + 4 * v88++) = v92;
          }
          while (v19 != v88);
        }
      }
      else if (v19)
      {
        uint64_t v46 = 0;
        uint64_t v47 = *(void *)(v14 + 24);
        uint64_t v48 = *(void *)(v7 + 24);
        do
        {
          float v49 = *(float *)(v47 + 4 * v46);
          float v50 = 0.0;
          if (v49 > v44 && v49 < v45) {
            float v50 = *(float *)(*(void *)(v11 + 24) + 4 * v46) * *(float *)(a1 + 284);
          }
          *(float *)(v48 + 4 * v46++) = v50;
        }
        while (v19 != v46);
      }
      goto LABEL_161;
    case 8:
      if (v19)
      {
        uint64_t v52 = 0;
        uint64_t v53 = *(void *)(v11 + 24);
        uint64_t v54 = *(void *)(v14 + 24);
        uint64_t v55 = *(void *)(v7 + 24);
        do
        {
          float v56 = *(float *)(v53 + 4 * v52);
          if (*(float *)(v54 + 4 * v52) <= 0.0) {
            float v56 = v56 * (float)(*(float *)(a1 + 284) + *(float *)(*(void *)(v17 + 24) + 4 * v52));
          }
          *(float *)(v55 + 4 * v52++) = v56;
        }
        while (v19 != v52);
      }
      goto LABEL_161;
    case 12:
      if (v19)
      {
        int v82 = *(float **)(v14 + 24);
        int v83 = *(float **)(v11 + 24);
        int v84 = *(float **)(v7 + 24);
        do
        {
          float v85 = *v82++;
          float v86 = fabsf(v85);
          float v87 = *v83++;
          *v84++ = v87 / (float)((float)(v86 + 1.0) * (float)(v86 + 1.0));
          --v19;
        }
        while (v19);
      }
      goto LABEL_161;
    case 14:
      if (v19)
      {
        uint64_t v63 = *(float **)(v11 + 24);
        int v64 = *(float **)(v14 + 24);
        uint64_t v65 = *(float **)(v7 + 24);
        do
        {
          float v66 = *v63++;
          float v67 = v66;
          float v68 = *v64++;
          float v69 = v68;
          if (v68 <= *(float *)(a1 + 284)) {
            float v70 = 0.0;
          }
          else {
            float v70 = 1.0;
          }
          float v71 = v67 * v70;
          if (v69 >= *(float *)(a1 + 288)) {
            float v72 = 0.0;
          }
          else {
            float v72 = 1.0;
          }
          *v65++ = v71 * v72;
          --v19;
        }
        while (v19);
      }
      goto LABEL_161;
    case 16:
      if (v19)
      {
        uint64_t v35 = 0;
        uint64_t v36 = *(void *)(v11 + 24);
        uint64_t v37 = *(void *)(v14 + 24);
        uint64_t v38 = *(void *)(v7 + 24);
        do
        {
          double v39 = *(float *)(v36 + 4 * v35);
          if (*(float *)(v37 + 4 * v35) <= 0.0) {
            double v40 = (*(float *)(*(void *)(v17 + 24) + 4 * v35) + 1.75809934) * v39;
          }
          else {
            double v40 = v39 * 1.05070099;
          }
          float v41 = v40;
          *(float *)(v38 + 4 * v35++) = v41;
        }
        while (v19 != v35);
      }
      goto LABEL_161;
    case 17:
      uint64_t v28 = a3[1];
      if (v28 == *a3)
      {
        uint64_t v161 = 0;
        v162 = 0;
        uint64_t v29 = v28;
      }
      else
      {
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v161, (uint64_t *)*a3);
        uint64_t v28 = *a3;
        uint64_t v29 = a3[1];
      }
      v120 = v8;
      if ((unint64_t)(v29 - v28) <= 0x10)
      {
        uint64_t v159 = 0;
        v160 = 0;
      }
      else
      {
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v159, (uint64_t *)(v28 + 16));
        if ((unint64_t)(a3[1] - *a3) > 0x20)
        {
          Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v157, (uint64_t *)(*a3 + 32));
          goto LABEL_105;
        }
      }
      uint64_t v157 = 0;
      v158 = 0;
LABEL_105:
      uint64_t v94 = (uint64_t *)a4[1];
      if (v94 == (uint64_t *)*a4)
      {
        uint64_t v155 = 0;
        v156 = 0;
        uint64_t v95 = v94;
      }
      else
      {
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v155, (uint64_t *)*a4);
        uint64_t v94 = (uint64_t *)*a4;
        uint64_t v95 = (uint64_t *)a4[1];
      }
      if ((unint64_t)((char *)v95 - (char *)v94) <= 0x10)
      {
        uint64_t v153 = 0;
        v154 = 0;
        goto LABEL_115;
      }
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v153, v94 + 2);
      uint64_t v94 = (uint64_t *)*a4;
      if ((unint64_t)(a4[1] - *a4) <= 0x20)
      {
LABEL_115:
        uint64_t v151 = 0;
        v152 = 0;
        goto LABEL_116;
      }
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v151, v94 + 4);
      uint64_t v94 = (uint64_t *)*a4;
      if ((unint64_t)(a4[1] - *a4) <= 0x40)
      {
LABEL_116:
        uint64_t v149 = 0;
        v150 = 0;
        goto LABEL_117;
      }
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v149, v94 + 8);
      uint64_t v94 = (uint64_t *)*a4;
      if ((unint64_t)(a4[1] - *a4) <= 0x50)
      {
LABEL_117:
        uint64_t v147 = 0;
        v148 = 0;
        goto LABEL_118;
      }
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v147, v94 + 10);
      uint64_t v94 = (uint64_t *)*a4;
      if ((unint64_t)(a4[1] - *a4) > 0x60)
      {
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v145, v94 + 12);
        uint64_t v94 = (uint64_t *)*a4;
        goto LABEL_119;
      }
LABEL_118:
      uint64_t v145 = 0;
      v146 = 0;
LABEL_119:
      Espresso::abstract_blob_container::shape((char *)__N, *v94);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v139, (const Espresso::layer_shape *)__N, 0);
      if (v144 > 3)
      {
        if (v144 == 5)
        {
          uint64_t v127 = v140 * (uint64_t)SLODWORD(v139);
          vDSP_Length v97 = v142 * (uint64_t)v143 * v141;
        }
        else if (v144 == 4)
        {
          uint64_t v127 = SLODWORD(v139);
          vDSP_Length v97 = v141 * (uint64_t)v142 * v140;
        }
        else
        {
          uint64_t v127 = 0;
LABEL_134:
          vDSP_Length v97 = 0;
        }
      }
      else
      {
        switch(v144)
        {
          case 1u:
            uint64_t v96 = 1;
            goto LABEL_131;
          case 2u:
            uint64_t v96 = SLODWORD(v139);
            goto LABEL_131;
          case 3u:
            uint64_t v96 = v140 * (uint64_t)SLODWORD(v139);
            goto LABEL_131;
          case 4u:
            uint64_t v96 = v140 * (uint64_t)SLODWORD(v139) * v141;
            goto LABEL_131;
          case 5u:
            uint64_t v96 = v140 * (uint64_t)SLODWORD(v139) * v141 * v142;
LABEL_131:
            uint64_t v127 = v96;
            if (v144) {
              goto LABEL_132;
            }
            goto LABEL_134;
          default:
            uint64_t v127 = 0;
            if (!v144) {
              goto LABEL_134;
            }
LABEL_132:
            vDSP_Length v97 = *((int *)&v139 + (int)v144 - 1);
            break;
        }
      }
      if (__p)
      {
        v138 = __p;
        operator delete(__p);
      }
      uint64_t __n = v97;
      if (!*(void *)(a1 + 320))
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,Espresso::blob<float,1>::UnitializedBlobType,void>(__N, __n * 4, 1, 1, 1);
        __int32 v98 = *(std::__shared_weak_count **)(a1 + 328);
        *(_OWORD *)(a1 + 320) = *(_OWORD *)__N;
        if (v98) {
          nitro::nitro_function::nitro_function(v98);
        }
      }
      if (v127)
      {
        vDSP_Length v99 = 0;
        uint64_t v134 = 0;
        uint64_t v122 = v149;
        uint64_t v129 = 3 * v97;
        uint64_t v130 = 8 * v97;
        uint64_t v121 = v147;
        do
        {
          uint64_t v100 = *(void *)(v122 + 24);
          vDSP_Length v101 = v100 + v99;
          uint64_t v102 = *(void *)(v121 + 24);
          vDSP_Length v133 = v99;
          vDSP_Length v103 = v102 + v99;
          __int32 v104 = *(float **)(*(void *)(a1 + 320) + 16);
          vDSP_vadd((const float *)(v100 + v99), 1, (const float *)(v102 + v99), 1, v104, 1, v97);
          vDSP_vadd((const float *)(v100 + __n * 4 + v133), 1, (const float *)(v102 + __n * 4 + v133), 1, &v104[v97], 1, v97);
          int v105 = &v104[2 * v97];
          vDSP_vadd((const float *)(v101 + v130), 1, (const float *)(v103 + v130), 1, v105, 1, v97);
          uint64_t v106 = (const float *)(v101 + v129 * 4);
          int v107 = &v104[3 * v97];
          vDSP_vadd(v106, 1, (const float *)(v103 + v129 * 4), 1, v107, 1, v97);
          vDSP_vsadd(&v104[v97], 1, (const float *)(a1 + 284), &v104[v97], 1, v97);
          LODWORD(__N[0]) = v97;
          float v139 = -2.0;
          v165[0] = 1.0;
          vDSP_vsmul(v107, 1, &v139, v107, 1, v97);
          vvexpf(v107, v107, (const int *)__N);
          vDSP_vsadd(v107, 1, v165, v107, 1, SLODWORD(__N[0]));
          vvrecf(v107, v107, (const int *)__N);
          float __C = -1.0;
          float v164 = 2.0;
          vDSP_vsmsa(v107, 1, &v164, &__C, v107, 1, SLODWORD(__N[0]));
          LODWORD(__N[0]) = v97;
          float v139 = 1.0;
          vDSP_vneg(v104, 1, v104, 1, v97);
          vvexpf(v104, v104, (const int *)__N);
          vDSP_vsadd(v104, 1, &v139, v104, 1, SLODWORD(__N[0]));
          vvrecf(v104, v104, (const int *)__N);
          LODWORD(__N[0]) = v97;
          float v139 = 1.0;
          vDSP_vneg(&v104[v97], 1, &v104[v97], 1, v97);
          vvexpf(&v104[v97], &v104[v97], (const int *)__N);
          vDSP_vsadd(&v104[v97], 1, &v139, &v104[v97], 1, SLODWORD(__N[0]));
          vvrecf(&v104[v97], &v104[v97], (const int *)__N);
          LODWORD(__N[0]) = v97;
          float v139 = 1.0;
          vDSP_vneg(v105, 1, v105, 1, v97);
          vvexpf(v105, v105, (const int *)__N);
          vDSP_vsadd(v105, 1, &v139, v105, 1, SLODWORD(__N[0]));
          vvrecf(v105, v105, (const int *)__N);
          v131 = (Espresso *)&v104[v97];
          uint64_t v108 = *(void *)(v161 + 24);
          uint64_t v109 = *(void *)(v159 + 24);
          uint64_t v126 = *(void *)(v145 + 24);
          uint64_t v110 = (const float *)(*(void *)(v151 + 24) + v134);
          int v111 = (float *)(*(void *)(v157 + 24) + v134);
          uint64_t v112 = *(void *)(v155 + 24);
          uint64_t v113 = *(void *)(v153 + 24);
          LODWORD(__N[0]) = v97;
          float v139 = -2.0;
          v165[0] = 1.0;
          vDSP_vsmul(v110, 1, &v139, v111, 1, v97);
          vvexpf(v111, v111, (const int *)__N);
          vDSP_vsadd(v111, 1, v165, v111, 1, SLODWORD(__N[0]));
          vvrecf(v111, v111, (const int *)__N);
          float __C = -1.0;
          float v164 = 2.0;
          vDSP_vsmsa(v111, 1, &v164, &__C, v111, 1, SLODWORD(__N[0]));
          uint64_t v114 = (float *)(v108 + v133);
          uint64_t v115 = (float *)(v108 + v133 + v130);
          Espresso::dsigmoid((Espresso *)v105, v115, v97);
          __D = (float *)(v113 + v134);
          vDSP_vmul((const float *)(v113 + v134), 1, v115, 1, v115, 1, v97);
          vDSP_vmul(v111, 1, v115, 1, v115, 1, v97);
          __E = (float *)(v109 + v133);
          memcpy(&__E[(unint64_t)v130 / 4], v115, __n * 4);
          Espresso::dtanh((Espresso *)v111, v111, v97);
          Espresso::dsigmoid((Espresso *)v104, __E, v97);
          vDSP_vmul(__E, 1, v107, 1, __E, 1, v97);
          vDSP_vmul(v105, 1, v111, 1, v114, 1, v97);
          vDSP_vmul(v114, 1, __E, 1, v114, 1, v97);
          v117 = (const float *)(v112 + v134);
          vDSP_vmma(__E, 1, v117, 1, v114, 1, (const float *)(v113 + v134), 1, __E, 1, v97);
          char v118 = &__E[__n];
          memcpy(v114, __E, __n * 4);
          Espresso::dsigmoid(v131, &__E[__n], v97);
          vDSP_vmul(v118, 1, (const float *)(v126 + v134), 1, v118, 1, v97);
          vDSP_vmul(v105, 1, v111, 1, &v114[__n], 1, v97);
          vDSP_vmul(&v114[__n], 1, &__E[__n], 1, &v114[__n], 1, v97);
          vDSP_vmma(v118, 1, v117, 1, &v114[__n], 1, __D, 1, v118, 1, v97);
          uint64_t v119 = &__E[v129];
          memcpy(&v114[__n], v118, __n * 4);
          Espresso::dtanh((Espresso *)v107, v119, v97);
          vDSP_vmul(v119, 1, v104, 1, v119, 1, v97);
          vDSP_vmul(v105, 1, v111, 1, &v114[v129], 1, v97);
          vDSP_vmul(&v114[v129], 1, v119, 1, &v114[v129], 1, v97);
          vDSP_vmma(v119, 1, v117, 1, &v114[v129], 1, __D, 1, v119, 1, v97);
          memcpy(&v114[v129], v119, __n * 4);
          vDSP_vmul(v117, 1, (const float *)v131, 1, v104, 1, v97);
          vDSP_vmul(__D, 1, v105, 1, v107, 1, v97);
          vDSP_vmul(v107, 1, (const float *)v131, 1, v107, 1, v97);
          vDSP_vmul(v107, 1, v111, 1, v107, 1, v97);
          vDSP_vadd(v104, 1, v107, 1, v111, 1, v97);
          v134 += __n * 4;
          vDSP_Length v99 = v133 + 16 * v97;
          --v127;
        }
        while (v127);
      }
      if (v146) {
        nitro::nitro_function::nitro_function(v146);
      }
      uint64_t v8 = v120;
      if (v148) {
        nitro::nitro_function::nitro_function(v148);
      }
      if (v150) {
        nitro::nitro_function::nitro_function(v150);
      }
      if (v152) {
        nitro::nitro_function::nitro_function(v152);
      }
      if (v154) {
        nitro::nitro_function::nitro_function(v154);
      }
      if (v156) {
        nitro::nitro_function::nitro_function(v156);
      }
      if (v158) {
        nitro::nitro_function::nitro_function(v158);
      }
      if (v160) {
        nitro::nitro_function::nitro_function(v160);
      }
      if (v162) {
        nitro::nitro_function::nitro_function(v162);
      }
LABEL_161:
      if (v123) {
        nitro::nitro_function::nitro_function(v123);
      }
      if (v124) {
        nitro::nitro_function::nitro_function(v124);
      }
      if (v125) {
        nitro::nitro_function::nitro_function(v125);
      }
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      return;
    case 24:
      if (v19)
      {
        uint64_t v30 = *(float **)(v14 + 24);
        int v31 = *(float **)(v11 + 24);
        uint64_t v32 = *(float **)(v7 + 24);
        do
        {
          float v33 = 0.0;
          if (*v30 <= *(float *)(a1 + 288))
          {
            float v33 = 1.0;
            if (*v30 <= 0.0) {
              float v33 = *(float *)(a1 + 284);
            }
          }
          float v34 = *v31++;
          *v32++ = v34 * v33;
          ++v30;
          --v19;
        }
        while (v19);
      }
      goto LABEL_161;
    default:
      Espresso::throw_exception_selector<Espresso::generic_error,int &>("activation_grad_cpu for activation mode %d is not implemented", v20);
  }
}

void sub_1929D86EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,std::__shared_weak_count *a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  float v41 = *(std::__shared_weak_count **)(v39 - 224);
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  float v42 = *(std::__shared_weak_count **)(v39 - 208);
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  float v43 = *(std::__shared_weak_count **)(v39 - 192);
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
  float v44 = *(std::__shared_weak_count **)(v39 - 176);
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  float v45 = *(std::__shared_weak_count **)(v39 - 160);
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  uint64_t v46 = *(std::__shared_weak_count **)(v39 - 144);
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  uint64_t v47 = *(std::__shared_weak_count **)(v39 - 128);
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  uint64_t v48 = *(std::__shared_weak_count **)(v39 - 112);
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::dsigmoid(Espresso *this, float *__D, vDSP_Length __N)
{
  float __C = 1.0;
  float __B = -1.0;
  vDSP_vsmsa((const float *)this, 1, &__B, &__C, __D, 1, __N);
  vDSP_vmul((const float *)this, 1, __D, 1, __D, 1, __N);
}

void Espresso::dtanh(Espresso *this, float *__C, vDSP_Length __N)
{
  float __Ca = 1.0;
  float __B = -1.0;
  vDSP_vmul((const float *)this, 1, (const float *)this, 1, __C, 1, __N);
  vDSP_vsmsa(__C, 1, &__B, &__Ca, __C, 1, __N);
}

void Espresso::nonlinearity_grad_cpu::~nonlinearity_grad_cpu(Espresso::nonlinearity_grad_cpu *this)
{
  *(void *)this = &unk_1EE356DA8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE356DA8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::concat_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v5)
  {
    uint64_t v7 = *((void *)v5 + 20);
    uint64_t v6 = *((void *)v5 + 21);
    if (v6)
    {
      uint64_t v18 = (std::__shared_weak_count *)*((void *)v5 + 21);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v18 = 0;
LABEL_6:
  uint64_t v8 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = *(int *)(v7 + 12) * (uint64_t)*(int *)(v7 + 8);
    uint64_t v12 = 4 * (int)v11 * *(_DWORD *)(v7 + 16);
    do
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v19, *(void **)(v8 + 16 * v9), *(std::__shared_weak_count **)(v8 + 16 * v9 + 8));
      uint64_t v13 = v19;
      if (*(int *)(v7 + 20) >= 1)
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 4 * v11 * v10;
        do
        {
          memcpy((void *)(*(void *)(v13 + 24) + 4 * v14 * *(int *)(v13 + 16)), (const void *)(*(void *)(v7 + 24) + v16), 4 * *(_DWORD *)(v13 + 16) * (int)v11);
          ++v15;
          v14 += v11;
          v16 += v12;
        }
        while (v15 < *(int *)(v7 + 20));
      }
      uint64_t v17 = *(int *)(v13 + 16);
      if (v20) {
        nitro::nitro_function::nitro_function(v20);
      }
      v10 += v17;
      ++v9;
      uint64_t v8 = *a3;
    }
    while (v9 < (a3[1] - *a3) >> 4);
  }
  if (v18)
  {
    nitro::nitro_function::nitro_function(v18);
  }
}

void sub_1929D8BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9)
{
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::concat_grad_kernel_cpu::~concat_grad_kernel_cpu(Espresso::concat_grad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

const char *Espresso::generic_softmax_loss_grad_kernel::kernel_type_str(Espresso::generic_softmax_loss_grad_kernel *this)
{
  return "softmax_loss_grad";
}

void Espresso::generic_softmax_loss_grad_kernel::top_shapes_for_bottom_shapes(long long **a1@<X1>, void *a2@<X8>)
{
  *((void *)&v12 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v4 = *((void *)*a1 + 4);
  long long v5 = (*a1)[1];
  v7[0] = **a1;
  v7[1] = v5;
  uint64_t v8 = v4;
  std::string __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v3 + 5), *((void *)v3 + 6), (uint64_t)(*((void *)v3 + 6) - *((void *)v3 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
}

void sub_1929D8CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = v18;
  *(void *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::softmax_loss_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (a4[1] - *a4 != 48) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("softmax_loss_grad_kernel needs 3 inputs: y, label, dy");
  }
  uint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    uint64_t v8 = v6[20];
    uint64_t v7 = (std::__shared_weak_count *)v6[21];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  unint64_t v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v9)
  {
    uint64_t v11 = v9[20];
    uint64_t v10 = (std::__shared_weak_count *)v9[21];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  long long v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  if (v12)
  {
    uint64_t v13 = v12[20];
    uint64_t v14 = (std::__shared_weak_count *)v12[21];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  uint64_t v15 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 2);
  if (v15)
  {
    uint64_t v16 = (std::__shared_weak_count *)v15[21];
    uint64_t v43 = v15[20];
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v43 = 0;
    uint64_t v16 = 0;
  }
  uint64_t v39 = v10;
  double v40 = v7;
  uint64_t v37 = v16;
  uint64_t v38 = v14;
  if (*(unsigned char *)(a1 + 307))
  {
    Espresso::abstract_blob_container::shape((char *)__B, *(void *)*a4);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v47, (const Espresso::layer_shape *)__B, 0);
    if (__p)
    {
      uint64_t v46 = __p;
      operator delete(__p);
    }
    uint64_t v17 = v48 - 1;
    int v18 = v47[v17];
    if (v48 < 1)
    {
      int v20 = 1;
    }
    else
    {
      uint64_t v19 = 0;
      int v20 = 1;
      do
      {
        if (v19 < v17) {
          v20 *= v47[v19];
        }
        ++v19;
      }
      while (v48 != v19);
    }
    LODWORD(v21) = *(_DWORD *)(v11 + 8);
    int v22 = 1;
    int v23 = v18;
    int v24 = v18;
  }
  else
  {
    LODWORD(v21) = *(_DWORD *)(v11 + 8);
    int v22 = *(_DWORD *)(v11 + 12) * v21;
    int v23 = *(_DWORD *)(v11 + 16);
    int v20 = *(_DWORD *)(v11 + 20);
    int v24 = *(_DWORD *)(v8 + 12) * *(_DWORD *)(v8 + 8) * *(_DWORD *)(v8 + 16);
  }
  uint64_t v25 = 0;
  uint64_t v26 = *(void *)(v8 + 24);
  uint64_t v27 = *(void *)(v13 + 24);
  uint64_t v21 = (int)v21;
  do
  {
    v21 *= *(int *)(v11 + 12 + v25);
    v25 += 4;
  }
  while (v25 != 12);
  memcpy(*(void **)(v8 + 24), *(const void **)(v11 + 24), 4 * v21);
  if (*(unsigned char *)(a1 + 305))
  {
    if (v20 >= 1)
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (v22 >= 1)
        {
          for (uint64_t j = 0; j != v22; ++j)
          {
            uint64_t v30 = j + v22 * (int)*(float *)(v27 + 4 * j);
            *(float *)(v26 + 4 * v30) = *(float *)(v26 + 4 * v30) + -1.0;
          }
        }
        v26 += 4 * v24;
        v27 += 4 * v22;
      }
    }
    uint64_t v31 = 0;
    __B[0] = **(float **)(v43 + 24) / (float)(v20 * v22);
    vDSP_Length v32 = *(int *)(v8 + 8);
    do
    {
      v32 *= *(int *)(v8 + 12 + v31);
      v31 += 4;
    }
    while (v31 != 12);
    vDSP_vsmul(*(const float **)(v8 + 24), 1, __B, *(float **)(v8 + 24), 1, v32);
  }
  else if (v20 >= 1)
  {
    uint64_t v33 = v8;
    uint64_t v42 = 0;
    uint64_t v41 = v20;
    do
    {
      if (v22 >= 1)
      {
        uint64_t v34 = 0;
        uint64_t v35 = v42 * v22;
        do
        {
          uint64_t v36 = v34 + v22 * (int)*(float *)(v27 + 4 * (v34 + v35));
          *(float *)(v26 + 4 * v36) = *(float *)(v26 + 4 * v36) + -1.0;
          vDSP_vsmul((const float *)(*(void *)(v33 + 24) + 4 * v42 * v22 * v23 + 4 * v34), v22, (const float *)(*(void *)(v43 + 24) + 4 * v35 + 4 * v34), (float *)(*(void *)(v33 + 24) + 4 * v42 * v22 * v23 + 4 * v34), v22, v23);
          ++v34;
        }
        while (v34 != v22);
      }
      v26 += 4 * v24;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
}

void sub_1929D9110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (a9)
  {
    nitro::nitro_function::nitro_function(a9);
    if (!a10)
    {
LABEL_3:
      if (!a11) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if (!a10)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(a10);
  if (!a11)
  {
LABEL_4:
    if (!a12) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  nitro::nitro_function::nitro_function(a11);
  if (!a12) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_5:
  nitro::nitro_function::nitro_function(a12);
  goto LABEL_6;
}

void Espresso::softmax_loss_grad_kernel_cpu::~softmax_loss_grad_kernel_cpu(Espresso::softmax_loss_grad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::bias_params,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

uint64_t Espresso::bias_kernel_cpu::num_weights_blob(Espresso::bias_kernel_cpu *this)
{
  return 1;
}

double Espresso::bias_kernel_cpu::get_weights_blob@<D0>(Espresso::bias_kernel_cpu *this@<X0>, _OWORD *a2@<X8>)
{
  Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,1>>>((uint64_t *)&v4, (void *)this + 1, (void *)this + 41);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

const char *Espresso::generic_bias_kernel::kernel_type_str(Espresso::generic_bias_kernel *this)
{
  return "bias";
}

void Espresso::bias_kernel_cpu::clear_weights(Espresso::bias_kernel_cpu *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 42);
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

void Espresso::bias_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v7)
  {
    uint64_t v8 = (std::__shared_weak_count *)v7[21];
    uint64_t v31 = v7[20];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v8 = 0;
  }
  unint64_t v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v9)
  {
    uint64_t v10 = (std::__shared_weak_count *)v9[21];
    uint64_t v30 = v9[20];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v28 = v8;
  Espresso::abstract_blob_container::shape((char *)&__B, *(void *)*a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v32, (const Espresso::layer_shape *)&__B, 0);
  uint64_t v27 = v10;
  if (__p)
  {
    uint64_t v36 = __p;
    operator delete(__p);
  }
  int v29 = v32[0];
  if (v32[0] >= 1)
  {
    int v11 = 0;
    if (*(unsigned char *)(a1 + 308)) {
      vDSP_Length v12 = 1;
    }
    else {
      vDSP_Length v12 = v32[3] * (uint64_t)v32[2];
    }
    uint64_t v13 = (uint64_t *)(v31 + 8);
    uint64_t v14 = (uint64_t *)(v30 + 8);
    do
    {
      uint64_t v15 = 0;
      uint64_t __B = *v13;
      int v34 = *(_DWORD *)(v31 + 16);
      int v16 = 1;
      do
      {
        v16 *= *(_DWORD *)((char *)v13 + v15);
        v15 += 4;
      }
      while (v15 != 12);
      uint64_t v17 = *(void *)(v31 + 24);
      int v18 = (std::__shared_weak_count *)operator new(0x60uLL);
      uint64_t v19 = 0;
      v18->__shared_owners_ = 0;
      v18->__shared_weak_owners_ = 0;
      v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389990;
      *(_OWORD *)&v18[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v18[3].__shared_owners_ = 0u;
      uint64_t v20 = __B;
      v18[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BEF0;
      v18[1].__shared_owners_ = v20;
      LODWORD(v18[1].__shared_weak_owners_) = v34;
      v18[2].__vftable = (std::__shared_weak_count_vtbl *)(v17 + 4 * v16 * v11);
      LOBYTE(v18[2].__shared_owners_) = 0;
      uint64_t __B = *v14;
      int v34 = *(_DWORD *)(v30 + 16);
      int v21 = 1;
      do
      {
        v21 *= *(_DWORD *)((char *)v14 + v19);
        v19 += 4;
      }
      while (v19 != 12);
      uint64_t v22 = *(void *)(v30 + 24);
      int v23 = (std::__shared_weak_count *)operator new(0x60uLL);
      v23->__shared_owners_ = 0;
      v23->__shared_weak_owners_ = 0;
      v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389990;
      *(_OWORD *)&v23[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v23[3].__shared_owners_ = 0u;
      uint64_t v24 = __B;
      v23[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BEF0;
      v23[1].__shared_owners_ = v24;
      LODWORD(v23[1].__shared_weak_owners_) = v34;
      v23[2].__vftable = (std::__shared_weak_count_vtbl *)(v22 + 4 * v21 * v11);
      LOBYTE(v23[2].__shared_owners_) = 0;
      if (*(int *)(a1 + 304) >= 1)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        do
        {
          LODWORD(__B) = 0;
          LODWORD(__B) = *(_DWORD *)(*(void *)(*(void *)(a1 + 328) + 16) + 4 * v26);
          vDSP_vsadd((const float *)((char *)v18[2].__vftable + v25), 1, (const float *)&__B, (float *)((char *)v18[2].__vftable + v25), 1, v12);
          ++v26;
          v25 += 4 * v12;
        }
        while (v26 < *(int *)(a1 + 304));
      }
      nitro::nitro_function::nitro_function(v23);
      nitro::nitro_function::nitro_function(v18);
      ++v11;
    }
    while (v11 != v29);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
}

void sub_1929D9564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::bias_kernel_cpu::~bias_kernel_cpu(Espresso::bias_kernel_cpu *this)
{
  *(void *)this = &unk_1EE332470;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::generic_bias_kernel::~generic_bias_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE332470;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_bias_kernel::~generic_bias_kernel(this);
}

void Espresso::bias_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    uint64_t v8 = *((void *)v6 + 20);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 21);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  unint64_t v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (!v9)
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    if (!v7) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v11 = *((void *)v9 + 20);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 21);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7) {
LABEL_9:
  }
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_10:
  Espresso::abstract_blob_container::shape((char *)v33, *(void *)*a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v32, (const Espresso::layer_shape *)v33, 0);
  unint64_t v12 = 0;
  uint64_t v13 = v32[0];
  int v14 = *(unsigned __int8 *)(a1 + 308);
  int v16 = v33[0];
  int v15 = v33[1];
  unint64_t v17 = *(int *)(v8 + 8);
  while (1)
  {
    uint64_t v18 = 0;
    unint64_t v19 = v17;
    do
    {
      v19 *= *(int *)(v8 + 12 + v18);
      v18 += 4;
    }
    while (v18 != 12);
    if (v19 <= v12) {
      break;
    }
    *(_DWORD *)(*(void *)(v8 + 24) + 4 * v12++) = 0;
  }
  if ((int)v13 >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    unsigned int v22 = v16 * v15;
    if (v14) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = v22;
    }
    uint64_t v24 = *(unsigned int *)(a1 + 304);
    do
    {
      if ((int)v24 >= 1)
      {
        uint64_t v25 = 0;
        uint64_t v26 = *(void *)(v8 + 24);
        uint64_t v27 = (float *)(*(void *)(v11 + 24) + v20);
        do
        {
          float v28 = 0.0;
          if ((int)v23 >= 1)
          {
            int v29 = v27;
            uint64_t v30 = v23;
            do
            {
              float v31 = *v29++;
              float v28 = v28 + v31;
              --v30;
            }
            while (v30);
          }
          *(float *)(v26 + 4 * v25) = v28 + *(float *)(v26 + 4 * v25);
          ++v25;
          v27 += (int)v23;
        }
        while (v25 != v24);
      }
      ++v21;
      v20 += 4 * (int)v24 * (uint64_t)(int)v23;
    }
    while (v21 != v13);
  }
  if (__p)
  {
    uint64_t v35 = __p;
    operator delete(__p);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_1929D9884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    if (!v19)
    {
LABEL_3:
      if (!v20) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if (!v19)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v19);
  if (!v20)
  {
LABEL_4:
    if (!v19) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  nitro::nitro_function::nitro_function(v20);
  if (!v19) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_5:
  nitro::nitro_function::nitro_function(v19);
  goto LABEL_6;
}

void Espresso::bias_grad_kernel_cpu::~bias_grad_kernel_cpu(Espresso::bias_grad_kernel_cpu *this)
{
  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::batchnorm_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v7)
  {
    uint64_t v8 = (std::__shared_weak_count *)v7[21];
    uint64_t v112 = v7[20];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v112 = 0;
    uint64_t v8 = 0;
  }
  unint64_t v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v9)
  {
    uint64_t v10 = (std::__shared_weak_count *)v9[21];
    uint64_t v113 = v9[20];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v113 = 0;
    uint64_t v10 = 0;
  }
  float v92 = v10;
  uint64_t v93 = v8;
  if (*(_DWORD *)(a1 + 308))
  {
    if (*(_DWORD *)(a1 + 312)) {
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("batchnorm_grad for training && training_instancenorm != MVA_NONE is not supported now");
    }
    uint64_t v11 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
    uint64_t v13 = *((void *)v11 + 20);
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v11 + 21);
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      __int32 v104 = *(float **)(v13 + 24);
      nitro::nitro_function::nitro_function(v12);
    }
    else
    {
      __int32 v104 = *(float **)(v13 + 24);
    }
    unint64_t v17 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 2);
    uint64_t v19 = *((void *)v17 + 20);
    uint64_t v18 = (std::__shared_weak_count *)*((void *)v17 + 21);
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      __int32 v98 = *(const float **)(v19 + 24);
      nitro::nitro_function::nitro_function(v18);
    }
    else
    {
      __int32 v98 = *(const float **)(v19 + 24);
    }
    uint64_t v20 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 3);
    uint64_t v22 = *((void *)v20 + 20);
    uint64_t v21 = (std::__shared_weak_count *)*((void *)v20 + 21);
    if (v21)
    {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v23 = *(void *)(v22 + 24);
      nitro::nitro_function::nitro_function(v21);
    }
    else
    {
      uint64_t v23 = *(void *)(v22 + 24);
    }
    uint64_t v24 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 4);
    uint64_t v26 = *((void *)v24 + 20);
    uint64_t v25 = (std::__shared_weak_count *)*((void *)v24 + 21);
    if (v25)
    {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v97 = *(void *)(v26 + 24);
      nitro::nitro_function::nitro_function(v25);
    }
    else
    {
      uint64_t v97 = *(void *)(v26 + 24);
    }
    uint64_t v27 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 1);
    uint64_t v29 = *((void *)v27 + 20);
    float v28 = (std::__shared_weak_count *)*((void *)v27 + 21);
    if (v28)
    {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v96 = *(void *)(v29 + 24);
      nitro::nitro_function::nitro_function(v28);
    }
    else
    {
      uint64_t v96 = *(void *)(v29 + 24);
    }
    uint64_t v30 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 2);
    uint64_t v32 = *((void *)v30 + 20);
    float v31 = (std::__shared_weak_count *)*((void *)v30 + 21);
    if (v31)
    {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v95 = *(void *)(v32 + 24);
      nitro::nitro_function::nitro_function(v31);
    }
    else
    {
      uint64_t v95 = *(void *)(v32 + 24);
    }
    vDSP_Length v33 = *(int *)(v112 + 12) * (uint64_t)*(int *)(v112 + 8);
    unint64_t v101 = *(int *)(v112 + 16);
    unint64_t v103 = *(int *)(v112 + 20);
    unint64_t v110 = v101 * v33;
    vDSP_Length v99 = *(float **)(v112 + 24);
    uint64_t v34 = 4 * v33;
    if (v103)
    {
      uint64_t v35 = 0;
      uint64_t v37 = *(void *)(v112 + 24);
      uint64_t v36 = *(int *)(v112 + 16);
      if (v101 <= 1) {
        uint64_t v36 = 1;
      }
      uint64_t v94 = v36;
      uint64_t v107 = 4 * v110;
      do
      {
        if (v101)
        {
          uint64_t v38 = 0;
          uint64_t v39 = v104;
          double v40 = v98;
          uint64_t v41 = v94;
          do
          {
            *(float *)&uint64_t __B = -*v39;
            vDSP_vsadd((const float *)(v23 + v38), 1, (const float *)&__B, (float *)(v37 + v38), 1, v33);
            vDSP_vsdiv((const float *)(v37 + v38), 1, v40++, (float *)(v37 + v38), 1, v33);
            v38 += v34;
            ++v39;
            --v41;
          }
          while (v41);
        }
        ++v35;
        v37 += v107;
        v23 += v107;
      }
      while (v35 != v103);
    }
    uint64_t v42 = v99;
    if (v101)
    {
      uint64_t v106 = 0;
      uint64_t v108 = 0;
      float v43 = (float)(v103 * v33);
      if (v33 <= 1) {
        uint64_t v44 = 1;
      }
      else {
        uint64_t v44 = v33;
      }
      if (v103 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v103;
      }
      uint64_t v46 = 4 * v110;
      do
      {
        uint64_t v100 = v42;
        if (v103)
        {
          uint64_t v47 = 0;
          uint64_t v48 = v108;
          float v49 = 0.0;
          float v50 = 0.0;
          do
          {
            uint64_t v51 = *(void *)(v113 + 24);
            LODWORD(__B) = 0;
            vDSP_sve((const float *)(v51 + 4 * (v106 * v33 + v47 * v110)), 1, (float *)&__B, v33);
            if (v33)
            {
              uint64_t v52 = (float *)(v51 + v48);
              uint64_t v53 = v42;
              uint64_t v54 = v44;
              do
              {
                float v55 = *v53++;
                float v56 = v55;
                float v57 = *v52++;
                float v50 = v50 + (float)(v56 * v57);
                --v54;
              }
              while (v54);
            }
            float v49 = v49 + *(float *)&__B;
            ++v47;
            v48 += v46;
            uint64_t v42 = (float *)((char *)v42 + v46);
          }
          while (v47 != v45);
        }
        else
        {
          float v50 = 0.0;
          float v49 = 0.0;
        }
        uint64_t v58 = v108;
        *(float *)(v95 + 4 * v106) = v49;
        *(float *)(v96 + 4 * v106) = v50;
        float v115 = (float)-v49 / v43;
        *(float *)&uint64_t __B = (float)-v50 / v43;
        float v114 = *(float *)(v97 + 4 * v106) / v98[v106];
        uint64_t v59 = v45;
        if (v103)
        {
          do
          {
            float v60 = (float *)(*(void *)(v112 + 24) + v58);
            uint64_t v61 = *(void *)(v113 + 24);
            vDSP_vsmul(v60, 1, (const float *)&__B, v60, 1, v33);
            vDSP_vsadd(v60, 1, &v115, v60, 1, v33);
            vDSP_vadd(v60, 1, (const float *)(v61 + v58), 1, v60, 1, v33);
            vDSP_vsmul(v60, 1, &v114, v60, 1, v33);
            v58 += v46;
            --v59;
          }
          while (v59);
        }
        ++v106;
        v108 += v34;
        uint64_t v42 = &v100[(unint64_t)v34 / 4];
      }
      while (v106 != v101);
    }
    goto LABEL_78;
  }
  uint64_t v14 = a4[1];
  if ((unint64_t)(v14 - *a4) <= 0x1F) {
    Espresso::throw_exception_selector<Espresso::generic_error>("batchnorm_grad for inference mode batchnorm needs batchnorm_coefs as the second input");
  }
  int v15 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v14, 1);
  if (!v15)
  {
    uint64_t v105 = 0;
    goto LABEL_62;
  }
  uint64_t v105 = *((void *)v15 + 20);
  uint64_t v16 = *((void *)v15 + 21);
  if (!v16)
  {
LABEL_62:
    uint64_t v102 = 0;
    goto LABEL_63;
  }
  uint64_t v102 = (std::__shared_weak_count *)*((void *)v15 + 21);
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
LABEL_63:
  if (*(int *)(v112 + 20) >= 1)
  {
    int v62 = 0;
    uint64_t v63 = (uint64_t *)(v112 + 8);
    int v64 = (uint64_t *)(v113 + 8);
    uint64_t v109 = a1;
    do
    {
      uint64_t v65 = 0;
      uint64_t __B = *v63;
      int v117 = *(_DWORD *)(v112 + 16);
      int v66 = 1;
      do
      {
        int v67 = v66;
        int v68 = *(_DWORD *)((char *)v63 + v65);
        v66 *= v68;
        v65 += 4;
      }
      while (v65 != 12);
      uint64_t v69 = *(void *)(v112 + 24);
      float v70 = (std::__shared_weak_count *)operator new(0x60uLL);
      uint64_t v71 = 0;
      uint64_t v111 = v69;
      v70->__shared_owners_ = 0;
      v70->__shared_weak_owners_ = 0;
      v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389990;
      *(_OWORD *)&v70[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v70[3].__shared_owners_ = 0u;
      uint64_t v72 = __B;
      v70[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BEF0;
      v70[1].__shared_owners_ = v72;
      LODWORD(v70[1].__shared_weak_owners_) = v117;
      v70[2].__vftable = (std::__shared_weak_count_vtbl *)(v69 + 4 * v66 * v62);
      LOBYTE(v70[2].__shared_owners_) = 0;
      uint64_t __B = *v64;
      int v117 = *(_DWORD *)(v113 + 16);
      int v73 = 1;
      do
      {
        int v74 = v73;
        int v75 = *(_DWORD *)((char *)v64 + v71);
        v73 *= v75;
        v71 += 4;
      }
      while (v71 != 12);
      uint64_t v76 = *(void *)(v113 + 24);
      uint64_t v77 = (std::__shared_weak_count *)operator new(0x60uLL);
      v77->__shared_owners_ = 0;
      v77->__shared_weak_owners_ = 0;
      v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389990;
      *(_OWORD *)&v77[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v77[3].__shared_owners_ = 0u;
      uint64_t v78 = __B;
      v77[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BEF0;
      v77[1].__shared_owners_ = v78;
      LODWORD(v77[1].__shared_weak_owners_) = v117;
      v77[2].__vftable = (std::__shared_weak_count_vtbl *)(v76 + 4 * v73 * v62);
      LOBYTE(v77[2].__shared_owners_) = 0;
      uint64_t v79 = *(unsigned int *)(v109 + 304);
      if ((int)v79 >= 1)
      {
        uint64_t v80 = 0;
        int v81 = 0;
        int v82 = HIDWORD(v70[1].__shared_owners_) * LODWORD(v70[1].__shared_owners_);
        uint64_t v83 = *(void *)(v105 + 24);
        do
        {
          if (v82 >= 1)
          {
            int v84 = (float *)(v111 + 4 * v62 * v67 * v68 + 4 * v81);
            float v85 = (float *)(v76 + 4 * v62 * v74 * v75 + 4 * v81);
            float v86 = (float *)(v83 + 16 * v80);
            float v87 = *v86;
            float v88 = v86[3];
            int v89 = v82;
            float v90 = 1.0 / v88;
            do
            {
              float v91 = *v85++;
              *v84++ = v87 * (float)(v90 * v91);
              --v89;
            }
            while (v89);
          }
          ++v80;
          v81 += v82;
        }
        while (v80 != v79);
      }
      nitro::nitro_function::nitro_function(v77);
      nitro::nitro_function::nitro_function(v70);
      ++v62;
    }
    while (v62 < *(_DWORD *)(v112 + 20));
  }
  if (v102) {
    nitro::nitro_function::nitro_function(v102);
  }
LABEL_78:
  if (v92) {
    nitro::nitro_function::nitro_function(v92);
  }
  if (v93) {
    nitro::nitro_function::nitro_function(v93);
  }
}

void sub_1929DA170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::batchnorm_grad_kernel_cpu::~batchnorm_grad_kernel_cpu(Espresso::batchnorm_grad_kernel_cpu *this)
{
  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel(this);
}

const char *Espresso::generic_l2_normalize_grad_kernel::kernel_type_str(Espresso::generic_l2_normalize_grad_kernel *this)
{
  return "l2_normalize_grad";
}

void Espresso::l2_normalize_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    uint64_t v7 = (std::__shared_weak_count *)v6[21];
    uint64_t v38 = v6[20];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v7 = 0;
  }
  uint64_t v8 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v8)
  {
    unint64_t v9 = (std::__shared_weak_count *)v8[21];
    uint64_t v37 = v8[20];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v37 = 0;
    unint64_t v9 = 0;
  }
  uint64_t v10 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  if (v10)
  {
    uint64_t v11 = v10[20];
    unint64_t v12 = (std::__shared_weak_count *)v10[21];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
  }
  uint64_t v13 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 2);
  if (v13)
  {
    uint64_t v14 = v13[20];
    int v15 = (std::__shared_weak_count *)v13[21];
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v14 = 0;
    int v15 = 0;
  }
  uint64_t v35 = v9;
  uint64_t v36 = v7;
  vDSP_Length v33 = v15;
  uint64_t v34 = v12;
  Espresso::abstract_blob_container::shape((char *)__C, *(void *)*a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v44, (const Espresso::layer_shape *)__C, 0);
  if (__p)
  {
    float v43 = __p;
    operator delete(__p);
  }
  uint64_t v16 = v45;
  if (v45 < 1)
  {
    int v18 = 1;
    int v19 = 1;
LABEL_31:
    uint64_t v23 = 0;
    vDSP_Length v24 = v19;
    uint64_t v25 = v18;
    uint64_t v26 = 4 * v19;
    do
    {
      uint64_t v27 = (const float *)(*(void *)(v14 + 24) + v23);
      float v28 = (const float *)(*(void *)(v37 + 24) + v23);
      uint64_t v29 = *(void *)(v38 + 24);
      uint64_t v30 = *(void *)(v11 + 24);
      __C[0] = 0.0;
      vDSP_dotpr(v27, 1, v28, 1, __C, v24);
      float v31 = (float *)(v29 + v23);
      vDSP_vsmul(v27, 1, __C, v31, 1, v24);
      vDSP_vsub(v31, 1, v28, 1, v31, 1, v24);
      float v40 = 0.0;
      vDSP_svesq((const float *)(v30 + v23), 1, &v40, v24);
      float v32 = pow(v40 + 0.000001, -0.5);
      float __B = v32;
      vDSP_vsmul(v31, 1, &__B, v31, 1, v24);
      v23 += v26;
      --v25;
    }
    while (v25);
    goto LABEL_33;
  }
  uint64_t v17 = 0;
  int v18 = 1;
  int v19 = 1;
  do
  {
    BOOL v20 = v17++ <= *(int *)(a1 + 288);
    int v21 = v44[(int)--v16];
    if (v20) {
      int v22 = v44[(int)v16];
    }
    else {
      int v22 = 1;
    }
    v19 *= v22;
    if (v20) {
      int v21 = 1;
    }
    v18 *= v21;
  }
  while (v16);
  if (v18 >= 1) {
    goto LABEL_31;
  }
LABEL_33:
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
}

void sub_1929DA58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::l2_normalize_grad_kernel_cpu::~l2_normalize_grad_kernel_cpu(Espresso::l2_normalize_grad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::inner_product_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    uint64_t v8 = *((void *)v6 + 20);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 21);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  unint64_t v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v9)
  {
    uint64_t v11 = *((void *)v9 + 20);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 21);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  unint64_t v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  uint64_t v14 = *((void *)v12 + 20);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v12 + 21);
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    float __B = *(const float **)(v14 + 24);
    nitro::nitro_function::nitro_function(v13);
  }
  else
  {
    float __B = *(const float **)(v14 + 24);
  }
  Espresso::abstract_blob_container::shape(v17, *(void *)*a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v20, (const Espresso::layer_shape *)v17, 0);
  if (__p)
  {
    int v19 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 344) || v24 <= 3)
  {
    switch(v24)
    {
      case 1u:
        int v16 = 1;
        break;
      case 2u:
        goto LABEL_21;
      case 3u:
        goto LABEL_22;
      case 4u:
        int v16 = v21 * v20 * v22;
        break;
      case 5u:
        int v16 = v21 * v20 * v22 * v23;
        break;
      default:
        goto LABEL_23;
    }
  }
  else if (v24 == 5)
  {
LABEL_22:
    int v16 = v21 * v20;
  }
  else if (v24 == 4)
  {
LABEL_21:
    int v16 = v20;
  }
  else
  {
LABEL_23:
    int v16 = 0;
  }
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, v16, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), 1.0, *(const float **)(v11 + 24), *(_DWORD *)(a1 + 304), __B, *(_DWORD *)(a1 + 308), 0.0, *(float **)(v8 + 24), *(_DWORD *)(a1 + 308));
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_1929DA824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (v21)
  {
    nitro::nitro_function::nitro_function(v21);
    if (!v20) {
LABEL_4:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v20)
  {
    goto LABEL_4;
  }
  nitro::nitro_function::nitro_function(v20);
  goto LABEL_4;
}

void Espresso::inner_product_grad_kernel_cpu::~inner_product_grad_kernel_cpu(Espresso::inner_product_grad_kernel_cpu *this)
{
  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::inner_product_weights_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    uint64_t v8 = *((void *)v6 + 20);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 21);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  unint64_t v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v9)
  {
    uint64_t v11 = *((void *)v9 + 20);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 21);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  unint64_t v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  if (v12)
  {
    uint64_t v14 = *((void *)v12 + 20);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)v12 + 21);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v13 = 0;
  }
  Espresso::abstract_blob_container::shape(v16, *(void *)*a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v19, (const Espresso::layer_shape *)v16, 0);
  if (__p)
  {
    int v18 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 344) || v23 <= 3)
  {
    switch(v23)
    {
      case 1u:
        int v15 = 1;
        break;
      case 2u:
        goto LABEL_22;
      case 3u:
        goto LABEL_23;
      case 4u:
        int v15 = v20 * v19 * v21;
        break;
      case 5u:
        int v15 = v20 * v19 * v21 * v22;
        break;
      default:
        goto LABEL_24;
    }
  }
  else if (v23 == 5)
  {
LABEL_23:
    int v15 = v20 * v19;
  }
  else if (v23 == 4)
  {
LABEL_22:
    int v15 = v19;
  }
  else
  {
LABEL_24:
    int v15 = 0;
  }
  cblas_sgemm(CblasRowMajor, CblasTrans, CblasNoTrans, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), v15, 1.0, *(const float **)(v11 + 24), *(_DWORD *)(a1 + 304), *(const float **)(v14 + 24), *(_DWORD *)(a1 + 308), 0.0, *(float **)(v8 + 24), *(_DWORD *)(a1 + 308));
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_1929DAB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (v22)
  {
    nitro::nitro_function::nitro_function(v22);
    if (v21)
    {
LABEL_8:
      nitro::nitro_function::nitro_function(v21);
      if (!v20) {
LABEL_5:
      }
        _Unwind_Resume(exception_object);
LABEL_4:
      nitro::nitro_function::nitro_function(v20);
      goto LABEL_5;
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  if (!v20) {
    goto LABEL_5;
  }
  goto LABEL_4;
}

void Espresso::inner_product_weights_grad_kernel_cpu::~inner_product_weights_grad_kernel_cpu(Espresso::inner_product_weights_grad_kernel_cpu *this)
{
  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::elementwise_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v6)
  {
    uint64_t v8 = *((void *)v6 + 20);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 21);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  if (*(_DWORD *)(a1 + 280))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "not supported");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  if (v10 != *a3)
  {
    unint64_t v11 = 0;
    do
    {
      unint64_t v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v9, v10, v11);
      if (v12)
      {
        uint64_t v14 = *((void *)v12 + 20);
        uint64_t v13 = (std::__shared_weak_count *)*((void *)v12 + 21);
        if (v13)
        {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          int v15 = *(void **)(v14 + 24);
          nitro::nitro_function::nitro_function(v13);
        }
        else
        {
          int v15 = *(void **)(v14 + 24);
        }
      }
      else
      {
        int v15 = (void *)MEMORY[0x18];
      }
      uint64_t v16 = 0;
      uint64_t v17 = *(int *)(v8 + 8);
      do
      {
        v17 *= *(int *)(v8 + 12 + v16);
        v16 += 4;
      }
      while (v16 != 12);
      memcpy(v15, *(const void **)(v8 + 24), 4 * v17);
      ++v11;
      uint64_t v9 = *a3;
      uint64_t v10 = a3[1];
    }
    while (v11 < (v10 - *a3) >> 4);
  }
  if (v7)
  {
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_1929DAE40(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::elementwise_grad_kernel_cpu::~elementwise_grad_kernel_cpu(Espresso::elementwise_grad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::dropout_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_dropout_grad_kernel::kernel_type_str(Espresso::generic_dropout_grad_kernel *this)
{
  return "dropout_grad";
}

void Espresso::dropout_grad_kernel_cpu::__launch(uint64_t a1, uint64_t a2, void ***a3, void ***a4)
{
  float v5 = *(float *)(a1 + 280);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v20, **a3, (std::__shared_weak_count *)(*a3)[1]);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v18, (*a4)[2], (std::__shared_weak_count *)(*a4)[3]);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v16, **a4, (std::__shared_weak_count *)(*a4)[1]);
  unint64_t v6 = 0;
  uint64_t v8 = v20;
  unint64_t v9 = *(int *)(v20 + 8);
  uint64_t v10 = v16;
  uint64_t v11 = v18;
  uint64_t v12 = v20 + 12;
  while (1)
  {
    uint64_t v13 = 0;
    unint64_t v14 = v9;
    do
    {
      v14 *= *(int *)(v12 + v13);
      v13 += 4;
    }
    while (v13 != 12);
    if (v6 >= v14) {
      break;
    }
    float v7 = 1.0 / (1.0 - v5);
    *(float *)(*(void *)(v8 + 24) + 4 * v6) = (float)(*(float *)(*(void *)(v10 + 24) + 4 * v6)
                                                      * *(float *)(*(void *)(v11 + 24) + 4 * v6))
                                              * v7;
    ++v6;
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  int v15 = v21;
  if (v21)
  {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_1929DAFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::dropout_grad_kernel_cpu::~dropout_grad_kernel_cpu(Espresso::dropout_grad_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::MPSGraphEngine::Kernels::stack_nd_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t *a3)
{
  uint64_t v5 = a3[4] - a3[3];
  if (v5 != 64)
  {
    uint64_t v12 = a2[1];
    v24[0] = *a2;
    v24[1] = v12;
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
      uint64_t v5 = a3[4] - a3[3];
    }
    std::to_string(&v18, v5 >> 6);
    uint64_t v13 = std::string::insert(&v18, 0, "[Dispatch::MPSGraph::stack_nd_kernel] unsupported: number of outputs must be 1, received ");
    std::string v19 = *v13;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v19, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v24, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    uint64_t v25 = (void **)v22;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v25);
    uint64_t v25 = (void **)v21;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v25);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    unint64_t v14 = (void *)v18.__r_.__value_.__r.__words[0];
    goto LABEL_32;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1] - *a3;
  if (v7)
  {
    if ((unint64_t)v7 < 0x41) {
      return 1;
    }
    unint64_t v8 = v7 >> 6;
    if (v8 <= 2) {
      unint64_t v8 = 2;
    }
    uint64_t v9 = v6 + 64;
    unint64_t v10 = v8 - 1;
    while (Espresso::layer_shape::operator==(v6, v9))
    {
      v9 += 64;
      if (!--v10) {
        return 1;
      }
    }
    int v15 = *a2;
    uint64_t v12 = a2[1];
    v16[0] = v15;
    v16[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v19, "[Dispatch::MPSGraph::stack_nd_kernel] unsupported: all inputs must be same shape and rank");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v19, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v16, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  else
  {
    uint64_t v12 = a2[1];
    v17[0] = *a2;
    v17[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v19, "[Dispatch::MPSGraph::stack_nd_kernel] unsupported: number of inputs must be at least 1");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v19, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v17, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    unint64_t v14 = (void *)v19.__r_.__value_.__r.__words[0];
LABEL_32:
    operator delete(v14);
  }
LABEL_33:
  if (v12) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v12);
  }
  return 0;
}

void sub_1929DB2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a26);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::stack_nd_kernel::~stack_nd_kernel(Espresso::MPSGraphEngine::Kernels::stack_nd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

float H12GPUHeuristics::get_dram_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 48), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

uint64_t H12GPUHeuristics::get_highest_device_pstate(H12GPUHeuristics *this)
{
  return 4;
}

float H12GPUHeuristics::get_flops_per_sec(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5) * 384.0;
}

float H12GPUHeuristics::get_aggregate_write_bw(uint64_t a1, uint64_t a2)
{
  float v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 2);
  return (float)((*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2) * 0.1) + (float)(v4 * 0.8);
}

float H12GPUHeuristics::get_aggregate_read_bw(uint64_t a1, uint64_t a2)
{
  float v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 2);
  return (float)((*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2) * 0.1) + (float)(v4 * 0.8);
}

float H12GPUHeuristics::get_aggregate_local_cache_write_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)((float)(*((float *)v2 + 5) * 64.0) * 4.0) * 9.3132e-10;
}

float H12GPUHeuristics::get_aggregate_local_cache_read_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)((float)(*((float *)v2 + 5) * 64.0) * 4.0) * 9.3132e-10;
}

float H12GPUHeuristics::get_af_aggregate_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5) + *((float *)v2 + 5);
}

float H12GPUHeuristics::get_af_write_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

float H12GPUHeuristics::get_af_read_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

void H12GPUHeuristics::~H12GPUHeuristics(H12GPUHeuristics *this)
{
  H12GPUHeuristics::~H12GPUHeuristics(this);

  JUMPOUT(0x192FF16B0);
}

{
  char *v2;

  *(void *)this = &unk_1EE3208A8;
  uint64_t v2 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 88);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
}

float newpGPUHeuristics::get_dram_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 48), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

float newpGPUHeuristics::get_aggregate_write_bw(uint64_t a1, uint64_t a2)
{
  float v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 2);
  return (float)((*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2) * 0.1) + (float)(v4 * 0.8);
}

float newpGPUHeuristics::get_aggregate_read_bw(uint64_t a1, uint64_t a2)
{
  float v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 2);
  return (float)((*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2) * 0.1) + (float)(v4 * 0.8);
}

float newpGPUHeuristics::get_aggregate_local_cache_write_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)((float)(*((float *)v2 + 5) * 64.0) * 4.0) * 9.3132e-10;
}

float newpGPUHeuristics::get_aggregate_local_cache_read_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)((float)(*((float *)v2 + 5) * 64.0) * 4.0) * 9.3132e-10;
}

float newpGPUHeuristics::get_af_write_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

float newpGPUHeuristics::get_af_read_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

void newpGPUHeuristics::~newpGPUHeuristics(newpGPUHeuristics *this)
{
  newpGPUHeuristics::~newpGPUHeuristics(this);

  JUMPOUT(0x192FF16B0);
}

{
  char *v2;

  *(void *)this = &unk_1EE321108;
  uint64_t v2 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 88);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
}

float JadeGPUHeuristics::get_dram_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 48), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

uint64_t JadeGPUHeuristics::get_highest_device_pstate(JadeGPUHeuristics *this)
{
  return 5;
}

float JadeGPUHeuristics::get_flops_per_sec(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  float v3 = *((float *)v2 + 5) * 4096.0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZNK17JadeGPUHeuristics17get_flops_per_secE13Device_PState12Compute_Path_block_invoke;
  block[3] = &__block_descriptor_36_e5_v8__0l;
  float v6 = v3;
  if (JadeGPUHeuristics::get_flops_per_sec(Device_PState,Compute_Path)const::onceToken != -1) {
    dispatch_once(&JadeGPUHeuristics::get_flops_per_sec(Device_PState,Compute_Path)const::onceToken, block);
  }
  return v3;
}

void ___ZNK17JadeGPUHeuristics17get_flops_per_secE13Device_PState12Compute_Path_block_invoke(float *a1, const char *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  float v3 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    double v4 = (float)(a1[8] / 1.0e12);
    int v5 = 134217984;
    double v6 = v4;
    _os_log_debug_impl(&dword_1920CB000, v3, OS_LOG_TYPE_DEBUG, "JadeGPUHeuristics tflops/s %f", (uint8_t *)&v5, 0xCu);
  }
}

float JadeGPUHeuristics::get_aggregate_write_bw(uint64_t a1, uint64_t a2)
{
  float v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 2);
  return (float)((*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2) * 0.1) + (float)(v4 * 0.8);
}

float JadeGPUHeuristics::get_aggregate_read_bw(uint64_t a1, uint64_t a2)
{
  float v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 2);
  return (float)((*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2) * 0.1) + (float)(v4 * 0.8);
}

float JadeGPUHeuristics::get_aggregate_local_cache_write_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)((float)(*((float *)v2 + 5) * 64.0) * 32.0) * 9.3132e-10;
}

float JadeGPUHeuristics::get_aggregate_local_cache_read_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)((float)(*((float *)v2 + 5) * 64.0) * 32.0) * 9.3132e-10;
}

float JadeGPUHeuristics::get_af_aggregate_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5) + *((float *)v2 + 5);
}

float JadeGPUHeuristics::get_af_write_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

float JadeGPUHeuristics::get_af_read_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

void JadeGPUHeuristics::~JadeGPUHeuristics(JadeGPUHeuristics *this)
{
  JadeGPUHeuristics::~JadeGPUHeuristics(this);

  JUMPOUT(0x192FF16B0);
}

{
  char *v2;

  *(void *)this = &unk_1EE320FE8;
  uint64_t v2 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 88);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
}

BOOL Espresso::MPSGraphEngine::Kernels::expand_dims_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 280);
  if (v3)
  {
    int v5 = a2[1];
    v15[0] = *a2;
    v15[1] = v5;
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->i64[1], 1uLL, memory_order_relaxed);
      int v6 = *(_DWORD *)(a1 + 280);
    }
    else
    {
      int v6 = v3;
    }
    std::to_string(&v9, v6);
    uint64_t v7 = std::string::insert(&v9, 0, "[Dispatch::MPSGraph::expand_dims_kernel] unsupported: nd_axis ");
    std::string v10 = *v7;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v10, a3, 0);
    Espresso::emit_kernel_validation_warning(v15, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v14) {
      nitro::nitro_function::nitro_function(v14);
    }
    uint64_t v16 = (void **)&v13;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v16);
    uint64_t v16 = (void **)&v12;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    if (v5) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v5);
    }
  }
  return v3 == 0;
}

void sub_1929DBFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a22);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::expand_dims_kernel::~expand_dims_kernel(Espresso::MPSGraphEngine::Kernels::expand_dims_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::Util::BlobOperation::elementwise<unsigned char,float,float,int>(uint64_t result, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, void (***a9)(void, unint64_t, unint64_t, unint64_t, uint64_t))
{
  uint64_t v50 = result;
  int v9 = a2[4];
  if (v9)
  {
    uint64_t v59 = 0;
    double result = 0;
    LODWORD(v11) = *a2;
    int v12 = a2[1];
    uint64_t v13 = v12 * *a2;
    int v14 = a2[2];
    int v15 = a2[3];
    uint64_t v69 = v14 * v13;
    int v16 = *a4;
    int v89 = a4[1];
    uint64_t v80 = v89 * *a4;
    int v79 = a4[2];
    uint64_t v67 = v79 * v80;
    uint64_t v68 = a4[3];
    int v57 = a4[4];
    int v17 = *a6;
    int v88 = a6[1];
    uint64_t v78 = v88 * *a6;
    int v77 = a6[2];
    uint64_t v65 = v77 * v78;
    uint64_t v66 = a6[3];
    int v18 = *a8;
    int v87 = a8[1];
    uint64_t v76 = v87 * *a8;
    int v75 = a8[2];
    uint64_t v81 = v12 * (int)v11;
    uint64_t v56 = v14 * (uint64_t)v15 * v13;
    int v55 = a6[4];
    uint64_t v63 = v75 * v76;
    uint64_t v64 = a8[3];
    int v54 = a8[4];
    int v19 = v11;
    int v20 = v12;
    int v21 = v14;
    int v22 = v15;
    do
    {
      uint64_t v23 = result;
      uint64_t v24 = v67 * v68 * result;
      if (v57 == 1) {
        uint64_t v24 = 0;
      }
      uint64_t v25 = v65 * v66 * result;
      if (v55 == 1) {
        uint64_t v25 = 0;
      }
      uint64_t v58 = v23;
      uint64_t v26 = v63 * v64 * v23;
      if (v54 == 1) {
        uint64_t v26 = 0;
      }
      if (v22)
      {
        uint64_t v62 = *(void *)(*(void *)a3 + 24) + 4 * v24;
        uint64_t v60 = *(void *)(*(void *)a7 + 24) + 4 * v26;
        uint64_t v61 = *(void *)(*(void *)a5 + 24) + 4 * v25;
        uint64_t v71 = *(void *)(*(void *)v50 + 24) + v59;
        uint64_t v27 = 0;
        do
        {
          uint64_t v28 = v27 * v67;
          if (v68 == 1) {
            uint64_t v28 = 0;
          }
          if (v66 == 1) {
            uint64_t v29 = 0;
          }
          else {
            uint64_t v29 = v27 * v65;
          }
          uint64_t v70 = v27;
          uint64_t v30 = v27 * v63;
          if (v64 == 1) {
            uint64_t v30 = 0;
          }
          if (v21)
          {
            uint64_t v74 = v62 + 4 * v28;
            uint64_t v31 = 0;
            uint64_t v73 = v61 + 4 * v29;
            uint64_t v86 = v71;
            uint64_t v72 = v60 + 4 * v30;
            do
            {
              uint64_t v32 = v31 * v80;
              uint64_t v33 = v31;
              if (v79 == 1) {
                uint64_t v32 = 0;
              }
              uint64_t v34 = v31 * v78;
              if (v77 == 1) {
                uint64_t v34 = 0;
              }
              uint64_t v82 = v33;
              uint64_t v35 = v33 * v76;
              if (v75 == 1) {
                uint64_t v35 = 0;
              }
              if (v20)
              {
                unint64_t v36 = 0;
                uint64_t v85 = v74 + 4 * v32;
                uint64_t v84 = v73 + 4 * v34;
                uint64_t v83 = v72 + 4 * v35;
                do
                {
                  unint64_t v37 = v36 * *a4;
                  if (v89 == 1) {
                    unint64_t v37 = 0;
                  }
                  unint64_t v38 = v36 * *a6;
                  if (v88 == 1) {
                    unint64_t v38 = 0;
                  }
                  unint64_t v39 = v36 * *a8;
                  if (v87 == 1) {
                    unint64_t v39 = 0;
                  }
                  if (v11)
                  {
                    unint64_t v40 = 0;
                    unint64_t v41 = v85 + 4 * v37;
                    unint64_t v42 = v84 + 4 * v38;
                    unint64_t v93 = v36;
                    uint64_t v43 = v86 + v36 * v19;
                    unint64_t v44 = v83 + 4 * v39;
                    do
                    {
                      if (v16 == 1) {
                        unint64_t v45 = 0;
                      }
                      else {
                        unint64_t v45 = v40;
                      }
                      unint64_t v46 = v41 + 4 * v45;
                      if (v17 == 1) {
                        unint64_t v47 = 0;
                      }
                      else {
                        unint64_t v47 = v40;
                      }
                      unint64_t v48 = v42 + 4 * v47;
                      if (v18 == 1) {
                        unint64_t v49 = 0;
                      }
                      else {
                        unint64_t v49 = v40;
                      }
                      (**a9)(a9, v43 + v40++, v46, v48, v44 + 4 * v49);
                      unint64_t v11 = *a2;
                    }
                    while (v40 < v11);
                    int v12 = a2[1];
                    unint64_t v36 = v93;
                  }
                  ++v36;
                  int v19 = v11;
                }
                while (v36 < v12);
                int v14 = a2[2];
                int v19 = v11;
                int v20 = v12;
              }
              uint64_t v31 = v82 + 1;
              v86 += v81;
            }
            while (v82 + 1 < (unint64_t)v14);
            int v15 = a2[3];
            int v21 = v14;
          }
          uint64_t v27 = v70 + 1;
          v71 += v69;
        }
        while (v70 + 1 < (unint64_t)v15);
        int v9 = a2[4];
        int v22 = v15;
      }
      double result = v58 + 1;
      v59 += v56;
    }
    while (v58 + 1 < (unint64_t)v9);
  }
  return result;
}

uint64_t Espresso::Util::BlobOperation::elementwise<unsigned char,unsigned short,float,int>(uint64_t result, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, void (***a9)(void, unint64_t, unint64_t, unint64_t, uint64_t))
{
  uint64_t v50 = result;
  int v9 = a2[4];
  if (v9)
  {
    uint64_t v59 = 0;
    double result = 0;
    LODWORD(v11) = *a2;
    int v12 = a2[1];
    uint64_t v13 = v12 * *a2;
    int v14 = a2[2];
    int v15 = a2[3];
    uint64_t v69 = v14 * v13;
    int v16 = *a4;
    int v89 = a4[1];
    uint64_t v80 = v89 * *a4;
    int v79 = a4[2];
    uint64_t v67 = v79 * v80;
    uint64_t v68 = a4[3];
    int v57 = a4[4];
    int v17 = *a6;
    int v88 = a6[1];
    uint64_t v78 = v88 * *a6;
    int v77 = a6[2];
    uint64_t v65 = v77 * v78;
    uint64_t v66 = a6[3];
    int v18 = *a8;
    int v87 = a8[1];
    uint64_t v76 = v87 * *a8;
    int v75 = a8[2];
    uint64_t v81 = v12 * (int)v11;
    uint64_t v56 = v14 * (uint64_t)v15 * v13;
    int v55 = a6[4];
    uint64_t v63 = v75 * v76;
    uint64_t v64 = a8[3];
    int v54 = a8[4];
    int v19 = v11;
    int v20 = v12;
    int v21 = v14;
    int v22 = v15;
    do
    {
      uint64_t v23 = result;
      uint64_t v24 = v67 * v68 * result;
      if (v57 == 1) {
        uint64_t v24 = 0;
      }
      uint64_t v25 = v65 * v66 * result;
      if (v55 == 1) {
        uint64_t v25 = 0;
      }
      uint64_t v58 = v23;
      uint64_t v26 = v63 * v64 * v23;
      if (v54 == 1) {
        uint64_t v26 = 0;
      }
      if (v22)
      {
        uint64_t v62 = *(void *)(*(void *)a3 + 24) + 2 * v24;
        uint64_t v60 = *(void *)(*(void *)a7 + 24) + 4 * v26;
        uint64_t v61 = *(void *)(*(void *)a5 + 24) + 4 * v25;
        uint64_t v71 = *(void *)(*(void *)v50 + 24) + v59;
        uint64_t v27 = 0;
        do
        {
          uint64_t v28 = v27 * v67;
          if (v68 == 1) {
            uint64_t v28 = 0;
          }
          if (v66 == 1) {
            uint64_t v29 = 0;
          }
          else {
            uint64_t v29 = v27 * v65;
          }
          uint64_t v70 = v27;
          uint64_t v30 = v27 * v63;
          if (v64 == 1) {
            uint64_t v30 = 0;
          }
          if (v21)
          {
            uint64_t v74 = v62 + 2 * v28;
            uint64_t v31 = 0;
            uint64_t v73 = v61 + 4 * v29;
            uint64_t v86 = v71;
            uint64_t v72 = v60 + 4 * v30;
            do
            {
              uint64_t v32 = v31 * v80;
              uint64_t v33 = v31;
              if (v79 == 1) {
                uint64_t v32 = 0;
              }
              uint64_t v34 = v31 * v78;
              if (v77 == 1) {
                uint64_t v34 = 0;
              }
              uint64_t v82 = v33;
              uint64_t v35 = v33 * v76;
              if (v75 == 1) {
                uint64_t v35 = 0;
              }
              if (v20)
              {
                unint64_t v36 = 0;
                uint64_t v85 = v74 + 2 * v32;
                uint64_t v84 = v73 + 4 * v34;
                uint64_t v83 = v72 + 4 * v35;
                do
                {
                  unint64_t v37 = v36 * *a4;
                  if (v89 == 1) {
                    unint64_t v37 = 0;
                  }
                  unint64_t v38 = v36 * *a6;
                  if (v88 == 1) {
                    unint64_t v38 = 0;
                  }
                  unint64_t v39 = v36 * *a8;
                  if (v87 == 1) {
                    unint64_t v39 = 0;
                  }
                  if (v11)
                  {
                    unint64_t v40 = 0;
                    unint64_t v41 = v85 + 2 * v37;
                    unint64_t v42 = v84 + 4 * v38;
                    unint64_t v93 = v36;
                    uint64_t v43 = v86 + v36 * v19;
                    unint64_t v44 = v83 + 4 * v39;
                    do
                    {
                      if (v16 == 1) {
                        unint64_t v45 = 0;
                      }
                      else {
                        unint64_t v45 = v40;
                      }
                      unint64_t v46 = v41 + 2 * v45;
                      if (v17 == 1) {
                        unint64_t v47 = 0;
                      }
                      else {
                        unint64_t v47 = v40;
                      }
                      unint64_t v48 = v42 + 4 * v47;
                      if (v18 == 1) {
                        unint64_t v49 = 0;
                      }
                      else {
                        unint64_t v49 = v40;
                      }
                      (**a9)(a9, v43 + v40++, v46, v48, v44 + 4 * v49);
                      unint64_t v11 = *a2;
                    }
                    while (v40 < v11);
                    int v12 = a2[1];
                    unint64_t v36 = v93;
                  }
                  ++v36;
                  int v19 = v11;
                }
                while (v36 < v12);
                int v14 = a2[2];
                int v19 = v11;
                int v20 = v12;
              }
              uint64_t v31 = v82 + 1;
              v86 += v81;
            }
            while (v82 + 1 < (unint64_t)v14);
            int v15 = a2[3];
            int v21 = v14;
          }
          uint64_t v27 = v70 + 1;
          v71 += v69;
        }
        while (v70 + 1 < (unint64_t)v15);
        int v9 = a2[4];
        int v22 = v15;
      }
      double result = v58 + 1;
      v59 += v56;
    }
    while (v58 + 1 < (unint64_t)v9);
  }
  return result;
}

uint64_t Espresso::Util::BlobOperation::elementwise<float,unsigned char,float,int>(uint64_t result, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, void (***a9)(void, uint64_t, uint64_t, unint64_t, uint64_t))
{
  uint64_t v53 = result;
  int v9 = a2[4];
  if (v9)
  {
    uint64_t v62 = 0;
    uint64_t v11 = 0;
    LODWORD(v12) = *a2;
    int v13 = a2[1];
    uint64_t v14 = v13 * *a2;
    int v15 = a2[2];
    int v16 = a2[3];
    int v17 = *a4;
    int v92 = a4[1];
    int v83 = a4[2];
    uint64_t v84 = v92 * *a4;
    uint64_t v71 = v83 * v84;
    uint64_t v72 = a4[3];
    int v60 = a4[4];
    int v18 = *a6;
    int v91 = a6[1];
    uint64_t v82 = v91 * *a6;
    int v81 = a6[2];
    uint64_t v69 = v81 * v82;
    uint64_t v70 = a6[3];
    int v19 = *a8;
    int v90 = a8[1];
    uint64_t v80 = v90 * *a8;
    uint64_t v20 = v15 * (uint64_t)(int)v14;
    uint64_t v59 = 4 * v20 * v16;
    uint64_t v66 = 4 * v20;
    uint64_t v67 = a8[2] * v80;
    uint64_t v78 = 4 * v14;
    int v79 = a8[2];
    int v58 = a6[4];
    uint64_t v68 = a8[3];
    int v57 = a8[4];
    int v21 = *a2;
    int v22 = v13;
    int v23 = v15;
    int v24 = v16;
    do
    {
      uint64_t v25 = v71 * v72 * v11;
      if (v60 == 1) {
        uint64_t v25 = 0;
      }
      uint64_t v26 = v69 * v70 * v11;
      if (v58 == 1) {
        uint64_t v26 = 0;
      }
      uint64_t v61 = v11;
      uint64_t v27 = v67 * v68 * v11;
      if (v57 == 1) {
        uint64_t v27 = 0;
      }
      if (v24)
      {
        uint64_t v65 = *(void *)(*(void *)a3 + 24) + v25;
        uint64_t v63 = *(void *)(*(void *)a7 + 24) + 4 * v27;
        uint64_t v64 = *(void *)(*(void *)a5 + 24) + 4 * v26;
        uint64_t v74 = *(void *)(*(void *)v53 + 24) + v62;
        uint64_t v28 = 0;
        do
        {
          uint64_t v29 = v28;
          if (v72 == 1) {
            uint64_t v30 = 0;
          }
          else {
            uint64_t v30 = v28 * v71;
          }
          uint64_t v31 = v29 * v69;
          if (v70 == 1) {
            uint64_t v31 = 0;
          }
          uint64_t v73 = v29;
          uint64_t v32 = v29 * v67;
          if (v68 == 1) {
            uint64_t v32 = 0;
          }
          if (v23)
          {
            uint64_t v77 = v65 + v30;
            uint64_t v89 = v74;
            uint64_t v76 = v64 + 4 * v31;
            uint64_t v33 = 0;
            uint64_t v75 = v63 + 4 * v32;
            do
            {
              uint64_t v34 = v33 * v84;
              uint64_t v35 = v33;
              if (v83 == 1) {
                uint64_t v34 = 0;
              }
              uint64_t v36 = v33 * v82;
              if (v81 == 1) {
                uint64_t v36 = 0;
              }
              uint64_t v85 = v35;
              uint64_t v37 = v35 * v80;
              if (v79 == 1) {
                uint64_t v37 = 0;
              }
              if (v22)
              {
                uint64_t v38 = 0;
                unint64_t v39 = 0;
                uint64_t v88 = v77 + v34;
                uint64_t v87 = v76 + 4 * v36;
                uint64_t v86 = v75 + 4 * v37;
                do
                {
                  unint64_t v40 = v39 * *a4;
                  if (v92 == 1) {
                    unint64_t v40 = 0;
                  }
                  unint64_t v41 = v39 * *a6;
                  if (v91 == 1) {
                    unint64_t v41 = 0;
                  }
                  unint64_t v42 = v39 * *a8;
                  if (v90 == 1) {
                    unint64_t v42 = 0;
                  }
                  if (v12)
                  {
                    unint64_t v96 = v39;
                    uint64_t v97 = v38;
                    unint64_t v43 = 0;
                    uint64_t v44 = v88 + v40;
                    unint64_t v45 = v87 + 4 * v41;
                    uint64_t v46 = v89 + v38 * v21;
                    unint64_t v47 = v86 + 4 * v42;
                    do
                    {
                      if (v17 == 1) {
                        unint64_t v48 = 0;
                      }
                      else {
                        unint64_t v48 = v43;
                      }
                      uint64_t v49 = v44 + v48;
                      if (v18 == 1) {
                        unint64_t v50 = 0;
                      }
                      else {
                        unint64_t v50 = v43;
                      }
                      unint64_t v51 = v45 + 4 * v50;
                      if (v19 == 1) {
                        unint64_t v52 = 0;
                      }
                      else {
                        unint64_t v52 = v43;
                      }
                      (**a9)(a9, v46, v49, v51, v47 + 4 * v52);
                      ++v43;
                      unint64_t v12 = *a2;
                      v46 += 4;
                    }
                    while (v43 < v12);
                    int v13 = a2[1];
                    unint64_t v39 = v96;
                    uint64_t v38 = v97;
                  }
                  ++v39;
                  v38 += 4;
                  int v21 = v12;
                }
                while (v39 < v13);
                int v15 = a2[2];
                int v21 = v12;
                int v22 = v13;
              }
              uint64_t v33 = v85 + 1;
              v89 += v78;
            }
            while (v85 + 1 < (unint64_t)v15);
            int v16 = a2[3];
            int v23 = v15;
          }
          uint64_t v28 = v73 + 1;
          v74 += v66;
        }
        while (v73 + 1 < (unint64_t)v16);
        int v9 = a2[4];
        int v24 = v16;
      }
      uint64_t v11 = v61 + 1;
      double result = v59;
      v62 += v59;
    }
    while (v61 + 1 < (unint64_t)v9);
  }
  return result;
}

uint64_t Espresso::Util::BlobOperation::elementwise<unsigned short,unsigned char,float,int>(uint64_t result, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, void (***a9)(void, uint64_t, uint64_t, unint64_t, uint64_t))
{
  uint64_t v53 = result;
  int v9 = a2[4];
  if (v9)
  {
    uint64_t v62 = 0;
    uint64_t v11 = 0;
    LODWORD(v12) = *a2;
    int v13 = a2[1];
    uint64_t v14 = v13 * *a2;
    int v15 = a2[2];
    int v16 = a2[3];
    int v17 = *a4;
    int v92 = a4[1];
    int v83 = a4[2];
    uint64_t v84 = v92 * *a4;
    uint64_t v71 = v83 * v84;
    uint64_t v72 = a4[3];
    int v60 = a4[4];
    int v18 = *a6;
    int v91 = a6[1];
    uint64_t v82 = v91 * *a6;
    int v81 = a6[2];
    uint64_t v69 = v81 * v82;
    uint64_t v70 = a6[3];
    int v19 = *a8;
    int v90 = a8[1];
    uint64_t v80 = v90 * *a8;
    uint64_t v20 = v15 * (uint64_t)(int)v14;
    uint64_t v59 = 2 * v20 * v16;
    uint64_t v66 = 2 * v20;
    uint64_t v67 = a8[2] * v80;
    uint64_t v78 = 2 * v14;
    int v79 = a8[2];
    int v58 = a6[4];
    uint64_t v68 = a8[3];
    int v57 = a8[4];
    int v21 = *a2;
    int v22 = v13;
    int v23 = v15;
    int v24 = v16;
    do
    {
      uint64_t v25 = v71 * v72 * v11;
      if (v60 == 1) {
        uint64_t v25 = 0;
      }
      uint64_t v26 = v69 * v70 * v11;
      if (v58 == 1) {
        uint64_t v26 = 0;
      }
      uint64_t v61 = v11;
      uint64_t v27 = v67 * v68 * v11;
      if (v57 == 1) {
        uint64_t v27 = 0;
      }
      if (v24)
      {
        uint64_t v65 = *(void *)(*(void *)a3 + 24) + v25;
        uint64_t v63 = *(void *)(*(void *)a7 + 24) + 4 * v27;
        uint64_t v64 = *(void *)(*(void *)a5 + 24) + 4 * v26;
        uint64_t v74 = *(void *)(*(void *)v53 + 24) + v62;
        uint64_t v28 = 0;
        do
        {
          uint64_t v29 = v28;
          if (v72 == 1) {
            uint64_t v30 = 0;
          }
          else {
            uint64_t v30 = v28 * v71;
          }
          uint64_t v31 = v29 * v69;
          if (v70 == 1) {
            uint64_t v31 = 0;
          }
          uint64_t v73 = v29;
          uint64_t v32 = v29 * v67;
          if (v68 == 1) {
            uint64_t v32 = 0;
          }
          if (v23)
          {
            uint64_t v77 = v65 + v30;
            uint64_t v89 = v74;
            uint64_t v76 = v64 + 4 * v31;
            uint64_t v33 = 0;
            uint64_t v75 = v63 + 4 * v32;
            do
            {
              uint64_t v34 = v33 * v84;
              uint64_t v35 = v33;
              if (v83 == 1) {
                uint64_t v34 = 0;
              }
              uint64_t v36 = v33 * v82;
              if (v81 == 1) {
                uint64_t v36 = 0;
              }
              uint64_t v85 = v35;
              uint64_t v37 = v35 * v80;
              if (v79 == 1) {
                uint64_t v37 = 0;
              }
              if (v22)
              {
                uint64_t v38 = 0;
                unint64_t v39 = 0;
                uint64_t v88 = v77 + v34;
                uint64_t v87 = v76 + 4 * v36;
                uint64_t v86 = v75 + 4 * v37;
                do
                {
                  unint64_t v40 = v39 * *a4;
                  if (v92 == 1) {
                    unint64_t v40 = 0;
                  }
                  unint64_t v41 = v39 * *a6;
                  if (v91 == 1) {
                    unint64_t v41 = 0;
                  }
                  unint64_t v42 = v39 * *a8;
                  if (v90 == 1) {
                    unint64_t v42 = 0;
                  }
                  if (v12)
                  {
                    unint64_t v96 = v39;
                    uint64_t v97 = v38;
                    unint64_t v43 = 0;
                    uint64_t v44 = v88 + v40;
                    unint64_t v45 = v87 + 4 * v41;
                    uint64_t v46 = v89 + v38 * v21;
                    unint64_t v47 = v86 + 4 * v42;
                    do
                    {
                      if (v17 == 1) {
                        unint64_t v48 = 0;
                      }
                      else {
                        unint64_t v48 = v43;
                      }
                      uint64_t v49 = v44 + v48;
                      if (v18 == 1) {
                        unint64_t v50 = 0;
                      }
                      else {
                        unint64_t v50 = v43;
                      }
                      unint64_t v51 = v45 + 4 * v50;
                      if (v19 == 1) {
                        unint64_t v52 = 0;
                      }
                      else {
                        unint64_t v52 = v43;
                      }
                      (**a9)(a9, v46, v49, v51, v47 + 4 * v52);
                      ++v43;
                      unint64_t v12 = *a2;
                      v46 += 2;
                    }
                    while (v43 < v12);
                    int v13 = a2[1];
                    unint64_t v39 = v96;
                    uint64_t v38 = v97;
                  }
                  ++v39;
                  v38 += 2;
                  int v21 = v12;
                }
                while (v39 < v13);
                int v15 = a2[2];
                int v21 = v12;
                int v22 = v13;
              }
              uint64_t v33 = v85 + 1;
              v89 += v78;
            }
            while (v85 + 1 < (unint64_t)v15);
            int v16 = a2[3];
            int v23 = v15;
          }
          uint64_t v28 = v73 + 1;
          v74 += v66;
        }
        while (v73 + 1 < (unint64_t)v16);
        int v9 = a2[4];
        int v24 = v16;
      }
      uint64_t v11 = v61 + 1;
      double result = v59;
      v62 += v59;
    }
    while (v61 + 1 < (unint64_t)v9);
  }
  return result;
}

void sub_1929DD3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ETDataPoint;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1929DD440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,ETDataPoint_buffer>,std::__map_value_compare<std::string,std::__value_type<std::string,ETDataPoint_buffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ETDataPoint_buffer>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  int v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v6 = (uint64_t **)v5;
        unint64_t v8 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4)) {
          break;
        }
        int v5 = *v6;
        int v9 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a2)) {
        break;
      }
      int v9 = v6 + 1;
      int v5 = v6[1];
      if (!v5) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_9:
    std::string v10 = (uint64_t *)v6;
    int v6 = (uint64_t **)operator new(0x50uLL);
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    uint64_t v11 = *(uint64_t **)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    v6[6] = v11;
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    void *v6 = 0;
    v6[1] = 0;
    v6[2] = v10;
    *int v9 = (uint64_t *)v6;
    unint64_t v12 = (uint64_t *)**a1;
    int v13 = (uint64_t *)v6;
    if (v12)
    {
      *a1 = v12;
      int v13 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6;
}

void sub_1929DD5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,vImage_Buffer>,std::__map_value_compare<std::string,std::__value_type<std::string,vImage_Buffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,vImage_Buffer>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, _OWORD **a3)
{
  int v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  int v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    int v6 = operator new(0x58uLL);
    unint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *unint64_t v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *(_OWORD *)((char *)v6 + 56) = 0u;
    *(_OWORD *)((char *)v6 + 72) = 0u;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_1929DD734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1929DD7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1929DD8E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929DD968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929DDA90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929DDCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }

  _Unwind_Resume(a1);
}

void sub_1929DDEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _Unwind_Resume(a1);
}

void sub_1929DE044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  _Unwind_Resume(a1);
}

void sub_1929DE2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEENS1_INS_4blobIfLi4EEEEE_block_invoke_13442(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 48))(*(void *)(a1 + 32), a2, a1 + 48);
}

void sub_1929DE460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __assign_helper_atomic_property__95(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  float v4 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void *__copy_helper_atomic_property__94(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *double result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __assign_helper_atomic_property__13488(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  float v4 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void *__copy_helper_atomic_property__13490(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *double result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1929DE6EC(_Unwind_Exception *a1)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1929DE888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929DEA1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929DEAB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929DF020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  nitro::nitro_function::nitro_function(v18);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::weights_initializer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386C10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::weights_initializer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386C10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1929DF1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1929DF270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1929DF570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a27 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1929DF90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a27 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1929DFA78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929DFBF4(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D3F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D3F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1929E00BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,char *a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a20, a21);
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&a29);
  uint64_t v34 = *(std::__shared_weak_count **)(v32 - 200);
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }

  _Unwind_Resume(a1);
}

void sub_1929E05CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,Espresso::layer_training_transform_info>::~pair(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  float v4 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  float v4 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long &>(int a1)
{
  Espresso::throw_exception_with_format<Espresso::not_implemented_error>("variable index == %d is not implemented", a1);
}

void std::__shared_ptr_emplace<Espresso::gradient_builder>::__on_zero_shared(void *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(a1 + 11));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(a1 + 8), a1[9]);
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void std::__shared_ptr_emplace<Espresso::gradient_builder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384830;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::gradient_builder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1929E12D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a50) {
    nitro::nitro_function::nitro_function(a50);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x200]);
  unint64_t v52 = *(std::__shared_weak_count **)(v50 - 144);
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  _Unwind_Resume(a1);
}

void sub_1929E1810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1929E18A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929E1DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }

  _Unwind_Resume(a1);
}

void sub_1929E1F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1929E20AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929E22A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929E23BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929E28C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1929E2B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1929E2D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a20 < 0) {
    operator delete(a15);
  }

  _Unwind_Resume(a1);
}

size_t Espresso::debug::read_blob_f4(Espresso::debug *this, __sFILE *__stream)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v9 = xmmword_192DCA970;
  if (!__stream)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Null file pointer");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  fread(&v9, 4uLL, 4uLL, __stream);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(this, v9, SDWORD1(v9), SDWORD2(v9), SHIDWORD(v9));
  uint64_t v4 = 0;
  int v5 = *(void **)(*(void *)this + 24);
  uint64_t v6 = *(int *)(*(void *)this + 8);
  do
  {
    v6 *= *(int *)(*(void *)this + 12 + v4);
    v4 += 4;
  }
  while (v4 != 12);

  return fread(v5, 4 * v6, 1uLL, __stream);
}

void sub_1929E2EB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1929E2FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,2>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,2>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,2>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  uint64_t v7 = a1 + 1;
  unint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v10 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4)) {
          break;
        }
        int v5 = *v7;
        unint64_t v8 = v7;
        if (!*v7) {
          goto LABEL_7;
        }
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2)) {
        return v7;
      }
      unint64_t v8 = v7 + 1;
      int v5 = v7[1];
      if (!v5) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    uint64_t v11 = operator new(0x48uLL);
    v16[0] = v11;
    v16[1] = v6;
    char v17 = 0;
    unint64_t v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(void *)(a3 + 16);
    }
    v11[7] = 0;
    v11[8] = 0;
    char v17 = 1;
    *uint64_t v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    *unint64_t v8 = v11;
    int v13 = (uint64_t *)**a1;
    uint64_t v14 = v11;
    if (v13)
    {
      *a1 = v13;
      uint64_t v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_1929E3100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::generic_error,char const*,unsigned long &>(const char *a1, int a2)
{
}

void sub_1929E3314(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void sub_1929E3500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929E35E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929E3688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,ETDataPoint * {__strong}>,std::__map_value_compare<int,std::__value_type<int,ETDataPoint * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,ETDataPoint * {__strong}>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,ETDataPoint * {__strong}>,std::__map_value_compare<int,std::__value_type<int,ETDataPoint * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,ETDataPoint * {__strong}>>>::destroy(*a1);
    std::__tree<std::__value_type<int,ETDataPoint * {__strong}>,std::__map_value_compare<int,std::__value_type<int,ETDataPoint * {__strong}>,std::less<int>,true>,std::allocator<std::__value_type<int,ETDataPoint * {__strong}>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

void sub_1929E3930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_1929E39E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929E3AC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t et_data_source::get_num_samples(id *this)
{
  return (int)[this[2] numberOfDataPoints];
}

void et_data_source::~et_data_source(et_data_source *this)
{
  *(void *)this = &unk_1EE318948;
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)this + 24, *((char **)this + 4));

  JUMPOUT(0x192FF16B0);
}

{
  *(void *)this = &unk_1EE318948;
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
}

void et_data_source::get_data_for_sample(id *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  int v5 = [this[2] numberOfDataPoints];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Size of et_data_source is null");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v6 = (et_data_source *)this[3];
  if (v6 != (et_data_source *)(this + 4))
  {
    unsigned int v30 = a2 % v5;
    do
    {
      uint64_t v7 = [this[2] dataPointAtIndex:v30];
      unint64_t v8 = (char *)v6 + 32;
      if (*((char *)v6 + 55) < 0) {
        unint64_t v8 = (char *)*((void *)v6 + 4);
      }
      long long v9 = [NSString stringWithUTF8String:v8];
      uint64_t v10 = (const void *)[v7 bufferWithKey:v9];

      uint64_t v11 = operator new(0x60uLL);
      v11[1] = 0;
      v11[2] = 0;
      *uint64_t v11 = &unk_1EE3899C8;
      int v12 = *((_DWORD *)v6 + 14);
      int v13 = *((_DWORD *)v6 + 15);
      uint64_t v14 = *((int *)v6 + 16);
      v11[3] = &unk_1EE36BF10;
      *((_OWORD *)v11 + 4) = 0u;
      *((_OWORD *)v11 + 5) = 0u;
      *((_DWORD *)v11 + 8) = v12;
      *((_DWORD *)v11 + 9) = v13;
      *((_DWORD *)v11 + 10) = v14;
      *((_DWORD *)v11 + 11) = 1;
      int v15 = (Espresso *)(4 * v12 * (uint64_t)v13 * v14);
      int v16 = Espresso::kern_alloc_uninitialized(v15);
      bzero(v16, (size_t)v15);
      v11[6] = v16;
      *((unsigned char *)v11 + 56) = 1;
      uint64_t v32 = (long long *)((char *)v6 + 32);
      char v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v6 + 32, &v32);
      *(void *)&long long v18 = v11 + 3;
      *((void *)&v18 + 1) = v11;
      int v19 = (std::__shared_weak_count *)*((void *)v17 + 6);
      *(_OWORD *)(v17 + 40) = v18;
      if (v19) {
        nitro::nitro_function::nitro_function(v19);
      }
      uint64_t v32 = (long long *)((char *)v6 + 32);
      uint64_t v20 = *(void **)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v6 + 32, &v32)+ 5)+ 24);
      uint64_t v32 = (long long *)((char *)v6 + 32);
      int v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v6 + 32, &v32);
      uint64_t v22 = 0;
      uint64_t v23 = *((void *)v21 + 5);
      uint64_t v24 = *(int *)(v23 + 8);
      uint64_t v25 = v23 + 12;
      do
      {
        v24 *= *(int *)(v25 + v22);
        v22 += 4;
      }
      while (v22 != 12);
      memcpy(v20, v10, 4 * v24);

      uint64_t v26 = (et_data_source *)*((void *)v6 + 1);
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          uint64_t v26 = *(et_data_source **)v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (et_data_source *)*((void *)v6 + 2);
          BOOL v28 = *(void *)v27 == (void)v6;
          uint64_t v6 = v27;
        }
        while (!v28);
      }
      uint64_t v6 = v27;
    }
    while (v27 != (et_data_source *)(this + 4));
  }
}

void sub_1929E3E44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_1929E42B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 72);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }

  _Unwind_Resume(a1);
}

void sub_1929E44A8(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  if (a3) {
    nitro::nitro_function::nitro_function(a3);
  }
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)va);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c55_ZTSNSt3__110shared_ptrIN8Espresso9MPSEngine7contextEEE56c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void *__copy_helper_block_ea8_40c55_ZTSNSt3__110shared_ptrIN8Espresso9MPSEngine7contextEEE56c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1929E465C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _Unwind_Resume(a1);
}

void sub_1929E47CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(a1);
}

void sub_1929E492C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(a1);
}

void sub_1929E4A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(a1);
}

void sub_1929E4F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,char *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,char a57,char *a58)
{
  a32 = &a54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  std::__tree<std::string>::destroy((uint64_t)&a57, a58);

  if (a31) {
    nitro::nitro_function::nitro_function(a31);
  }

  _Unwind_Resume(a1);
}

uint64_t et_data_source::et_data_source(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1EE318948;
  id v6 = v5;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 40) = 0;
  uint64_t v7 = *(unsigned __int8 **)(*(void *)a3 + 232);
  uint64_t v8 = *(void *)a3 + 240;
  if (v7 != (unsigned __int8 *)v8)
  {
    uint64_t v9 = *(void *)a3 + 136;
    do
    {
      *(void *)&v18[0] = v7 + 32;
      uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, v7 + 32, (long long **)v18);
      Espresso::abstract_blob_container::shape((char *)v18, *((void *)v10 + 5));
      uint64_t v22 = (long long *)(v7 + 32);
      uint64_t v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 24), (void *)v7 + 4, &v22);
      long long v12 = v18[1];
      *(_OWORD *)(v11 + 56) = v18[0];
      *(_OWORD *)(v11 + 72) = v12;
      *((void *)v11 + 11) = v19;
      int v13 = (void *)*((void *)v11 + 12);
      if (v13)
      {
        *((void *)v11 + 13) = v13;
        operator delete(v13);
        *((void *)v11 + 12) = 0;
        *((void *)v11 + 13) = 0;
        *((void *)v11 + 14) = 0;
      }
      *((_OWORD *)v11 + 6) = v20;
      *((void *)v11 + 14) = v21;
      uint64_t v14 = (unsigned __int8 *)*((void *)v7 + 1);
      if (v14)
      {
        do
        {
          int v15 = v14;
          uint64_t v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          int v15 = (unsigned __int8 *)*((void *)v7 + 2);
          BOOL v16 = *(void *)v15 == (void)v7;
          uint64_t v7 = v15;
        }
        while (!v16);
      }
      uint64_t v7 = v15;
    }
    while (v15 != (unsigned __int8 *)v8);
  }

  return a1;
}

void sub_1929E522C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v18, *(char **)(v16 + 32));

  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<et_data_source,std::allocator<et_data_source>,et_data_source,void>(void *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1EE37EF28;
  *((unsigned char *)v4 + 32) = *(unsigned char *)(a2 + 8);
  v4[3] = &unk_1EE318948;
  v4[5] = *(id *)(a2 + 16);
  uint64_t result = std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)(v4 + 6), (long long **)(a2 + 24));
  *a1 = v4 + 3;
  a1[1] = v4;
  return result;
}

void sub_1929E5308(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1929E5618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_56c185_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN8Espresso4blobIfLi4EEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SB_EEEEEE(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(a1 + 56);
}

uint64_t __copy_helper_block_ea8_56c185_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN8Espresso4blobIfLi4EEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SB_EEEEEE(uint64_t a1, uint64_t a2)
{
  return std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map(a1 + 56, a2 + 56);
}

uint64_t std::__shared_ptr_emplace<et_data_source>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<et_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37EF28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<et_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37EF28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1929E5BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  et_data_source::~et_data_source((et_data_source *)&a43);
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }

  _Unwind_Resume(a1);
}

void et_data_source::dump_blobs(long long *a1, const void **a2)
{
  uint64_t v3 = (*(uint64_t (**)(long long *))(*(void *)a1 + 32))(a1);
  v50[0] = 0;
  v50[1] = 0;
  uint64_t v49 = (uint64_t *)v50;
  uint64_t v4 = (long long *)*((void *)a1 + 3);
  uint64_t v35 = a1 + 2;
  if (v4 != a1 + 2)
  {
    do
    {
      std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100](&v43, v4 + 2);
      *(_OWORD *)uint64_t v38 = v44;
      *(_OWORD *)&v38[16] = v45;
      unint64_t v39 = v46;
      unint64_t v41 = 0;
      uint64_t v42 = 0;
      std::string __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v47, (uint64_t)v48, (v48 - (unsigned char *)v47) >> 2);
      id v5 = operator new(0x60uLL);
      v5[1] = 0;
      v5[2] = 0;
      *id v5 = &unk_1EE3899C8;
      int v6 = *(_DWORD *)v38;
      int v7 = *(_DWORD *)&v38[4];
      uint64_t v8 = *(int *)&v38[8];
      v5[3] = &unk_1EE36BF10;
      *((_OWORD *)v5 + 4) = 0u;
      *((_OWORD *)v5 + 5) = 0u;
      *((_DWORD *)v5 + 8) = v6;
      *((_DWORD *)v5 + 9) = v7;
      *((_DWORD *)v5 + 10) = v8;
      *((_DWORD *)v5 + 11) = v3;
      uint64_t v9 = (Espresso *)(4 * v6 * (uint64_t)v7 * v8 * (int)v3);
      uint64_t v10 = Espresso::kern_alloc_uninitialized(v9);
      bzero(v10, (size_t)v9);
      v5[6] = v10;
      *((unsigned char *)v5 + 56) = 1;
      v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
      uint64_t v11 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v49, &v43, (long long **)&v37);
      *(void *)&long long v12 = v5 + 3;
      *((void *)&v12 + 1) = v5;
      int v13 = (std::__shared_weak_count *)v11[8];
      *(_OWORD *)(v11 + 7) = v12;
      if (v13) {
        nitro::nitro_function::nitro_function(v13);
      }
      if (__p)
      {
        unint64_t v41 = __p;
        operator delete(__p);
      }
      if (v47)
      {
        unint64_t v48 = v47;
        operator delete(v47);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      uint64_t v14 = (long long *)*((void *)v4 + 1);
      if (v14)
      {
        do
        {
          int v15 = v14;
          uint64_t v14 = *(long long **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          int v15 = (long long *)*((void *)v4 + 2);
          BOOL v16 = *(void *)v15 == (void)v4;
          uint64_t v4 = v15;
        }
        while (!v16);
      }
      uint64_t v4 = v15;
    }
    while (v15 != v35);
  }
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      (**(void (***)(std::string *__return_ptr, long long *, uint64_t))a1)(&v43, a1, i);
      uint64_t v18 = (long long *)v43.__r_.__value_.__r.__words[2];
      if (v43.__r_.__value_.__r.__words[2])
      {
        do
        {
          std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)v38, v18 + 1);
          if ((v38[23] & 0x80000000) != 0) {
            std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)v38, *(std::string::size_type *)&v38[8]);
          }
          else {
            std::string v37 = *(std::string *)v38;
          }
          uint64_t v19 = 0;
          uint64_t v20 = *(int *)(*(void *)&v38[24] + 8);
          uint64_t v21 = v20;
          do
          {
            v21 *= *(int *)(*(void *)&v38[24] + 12 + v19);
            v19 += 4;
          }
          while (v19 != 12);
          for (uint64_t j = 0; j != 12; j += 4)
            v20 *= *(int *)(*(void *)&v38[24] + 12 + j);
          unint64_t v51 = &v37;
          uint64_t v23 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v49, &v37, (long long **)&v51);
          memcpy((void *)(*(void *)(v23[7] + 24) + 4 * v20 * i), *(const void **)(*(void *)&v38[24] + 24), 4 * v21);
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v37.__r_.__value_.__l.__data_);
          }
          if (v39) {
            nitro::nitro_function::nitro_function(v39);
          }
          if ((v38[23] & 0x80000000) != 0) {
            operator delete(*(void **)v38);
          }
          uint64_t v18 = *(long long **)v18;
        }
        while (v18);
        uint64_t v24 = (void *)v43.__r_.__value_.__r.__words[2];
      }
      else
      {
        uint64_t v24 = 0;
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v24);
      uint64_t v25 = (void *)v43.__r_.__value_.__r.__words[0];
      v43.__r_.__value_.__r.__words[0] = 0;
      if (v25) {
        operator delete(v25);
      }
    }
  }
  uint64_t v26 = (long long *)*((void *)a1 + 3);
  if (v26 != v35)
  {
    do
    {
      std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100](&v43, v26 + 2);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (const void **)&v43.__r_.__value_.__l.__data_, (uint64_t)&v37);
      uint64_t v27 = std::string::append(&v37, ".f4");
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      *(void *)&v38[16] = *((void *)&v27->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v38 = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (v38[23] >= 0) {
        uint64_t v29 = v38;
      }
      else {
        uint64_t v29 = *(const char **)v38;
      }
      v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
      unsigned int v30 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v49, &v43, (long long **)&v37);
      uint64_t v31 = (std::__shared_weak_count *)v30[8];
      v36[0] = v30[7];
      v36[1] = v31;
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::debug::write_blob<std::shared_ptr<Espresso::blob<float,4>>>(v29, (uint64_t)v36);
      if (v31) {
        nitro::nitro_function::nitro_function(v31);
      }
      if ((v38[23] & 0x80000000) != 0) {
        operator delete(*(void **)v38);
      }
      if (v47)
      {
        unint64_t v48 = v47;
        operator delete(v47);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      uint64_t v32 = (long long *)*((void *)v26 + 1);
      if (v32)
      {
        do
        {
          uint64_t v33 = v32;
          uint64_t v32 = *(long long **)v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          uint64_t v33 = (long long *)*((void *)v26 + 2);
          BOOL v16 = *(void *)v33 == (void)v26;
          uint64_t v26 = v33;
        }
        while (!v16);
      }
      uint64_t v26 = v33;
    }
    while (v33 != v35);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v50[0]);
}

void sub_1929E61C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::pair<std::string const,Espresso::layer_shape>::~pair((uint64_t)&a31);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(v31 - 112));
  _Unwind_Resume(a1);
}

void sub_1929E6844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a37) {
    nitro::nitro_function::nitro_function(a37);
  }

  _Unwind_Resume(a1);
}

void sub_1929E6AC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929E7B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p)
{
  if (__p) {
    operator delete(__p);
  }

  if (SLOBYTE(STACK[0x29F]) < 0) {
    operator delete((void *)STACK[0x288]);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&STACK[0x2D0]);
  Espresso::network_shape::~network_shape((char **)&STACK[0x3A8]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&STACK[0x3D8], (char *)STACK[0x3E0]);
  if (STACK[0x3F8]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x3F8]);
  }

  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,ETLossMode>(uint64_t a1)
{
}

void sub_1929E8874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::generic_error,char const*,char const*>(char *a1, uint64_t a2, uint64_t a3)
{
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,ETVariableInitializationMode>(uint64_t a1)
{
}

void sub_1929E8BD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929E8C94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929E8DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929E8E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1929E9060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_conv_kernel::set_quantization_ranges_blob(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 712) = v6;
  int v7 = *(std::__shared_weak_count **)(a1 + 720);
  *(void *)(a1 + 720) = v5;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a3 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::V9Engine::v9_conv_kernel::setup_weights_bias_if_ready(a1);
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_1929E9150(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::V9Engine::v9_conv_kernel::setup_weights_bias_if_ready(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 712);
  if (v2)
  {
    if (*(void *)(a1 + 696))
    {
      uint64_t v3 = *(void *)(a1 + 680);
      if (v3)
      {
        uint64_t v4 = *(std::__shared_weak_count **)(a1 + 688);
        if (v4)
        {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v2 = *(void *)(a1 + 712);
        }
        uint64_t v5 = *(std::__shared_weak_count **)(a1 + 720);
        if (v5) {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*(_DWORD *)(a1 + 416))
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v216, *(_DWORD *)(a1 + 344), 1, 1, 1);
          uint64_t v3 = v216;
          uint64_t v6 = v217;
          if (v4) {
            nitro::nitro_function::nitro_function(v4);
          }
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v216, 2 * *(_DWORD *)(a1 + 344), 1, 1, 1);
          uint64_t v2 = v216;
          int v7 = v217;
          if (v5) {
            nitro::nitro_function::nitro_function(v5);
          }
          uint64_t v8 = *(void *)(a1 + 680);
          uint64_t v9 = *(std::__shared_weak_count **)(a1 + 688);
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v10 = *(unsigned int *)(a1 + 344);
          if ((int)v10 >= 1)
          {
            uint64_t v11 = 0;
            uint64_t v12 = *(void *)(v8 + 16);
            uint64_t v13 = *(void *)(*(void *)(a1 + 712) + 16);
            uint64_t v14 = *(void *)(v2 + 16);
            uint64_t v15 = 4 * v10;
            uint64_t v16 = *(void *)(v3 + 16);
            uint64_t v17 = v14 + 4 * v10;
            uint64_t v18 = v13 + 4 * v10;
            uint64_t v19 = (float *)(v12 + 8);
            do
            {
              float v20 = *(v19 - 2);
              float v21 = *(v19 - 1);
              float v22 = *v19;
              float v23 = v19[1];
              v19 += 4;
              float v24 = 1.0 / v23;
              *(float *)(v14 + v11) = (float)(v20 * v24) * *(float *)(v13 + v11);
              *(float *)(v17 + v11) = (float)(v20 * v24) * *(float *)(v18 + v11);
              *(float *)(v16 + v11) = v21 + (float)((float)-(float)(v22 * v24) * v20);
              v11 += 4;
            }
            while (v15 != v11);
          }
          if (v9) {
            nitro::nitro_function::nitro_function(v9);
          }
          uint64_t v5 = v7;
          uint64_t v4 = v6;
        }
        uint64_t v25 = *(const void **)(a1 + 8);
        if (!v25
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
          exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
        }
        uint64_t v27 = *(std::__shared_weak_count **)(a1 + 16);
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v28 = (void *)v26[18];
        uint64_t v29 = *(void *)(a1 + 696);
        uint64_t v30 = *(int *)(v29 + 8);
        for (uint64_t i = 12; i != 32; i += 4)
          v30 *= *(int *)(v29 + i);
        uint64_t v32 = [v28 newBufferWithBytes:*(void *)(v29 + 32) length:v30 options:0];
        uint64_t v33 = *(void **)(a1 + 624);
        *(void *)(a1 + 624) = v32;

        if (v27) {
          nitro::nitro_function::nitro_function(v27);
        }
        uint64_t v34 = *(const void **)(a1 + 8);
        if (!v34
        {
          v191 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v191, "Espresso: wrong_context_type");
          v191->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
        }
        uint64_t v36 = *(std::__shared_weak_count **)(a1 + 16);
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v37 = [v35[18] newBufferWithBytes:*(void *)(v2 + 16) length:4 * *(int *)(v2 + 8) options:0];
        uint64_t v38 = *(void **)(a1 + 640);
        *(void *)(a1 + 640) = v37;

        if (v36) {
          nitro::nitro_function::nitro_function(v36);
        }
        unint64_t v39 = *(const void **)(a1 + 8);
        if (!v39 {
          || (uint64_t v40 = *(int *)(v3 + 8),
        }
        {
          v192 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v192, "Espresso: wrong_context_type");
          v192->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
        }
        uint64_t v42 = *(std::__shared_weak_count **)(a1 + 16);
        if (v42) {
          atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string v43 = (void *)v41[18];
        if ((unint64_t)(2 * v40) <= 0x10) {
          uint64_t v44 = 16;
        }
        else {
          uint64_t v44 = 2 * v40;
        }
        uint64_t v45 = [v43 newBufferWithLength:v44 options:0];
        uint64_t v46 = *(void **)(a1 + 648);
        *(void *)(a1 + 648) = v45;

        if (v42) {
          nitro::nitro_function::nitro_function(v42);
        }
        unint64_t v47 = *(int **)(v3 + 16);
        unint64_t v48 = (_WORD *)[*(id *)(a1 + 648) contents];
        if (v40)
        {
          do
          {
            int v49 = *v47++;
            _S0 = v49;
            __asm { FCVT            H0, S0 }
            *v48++ = _S0;
            --v40;
          }
          while (v40);
        }
        if (!v5) {
          goto LABEL_180;
        }
        int v55 = v5;
        goto LABEL_179;
      }
    }
  }
  uint64_t v56 = *(void *)(a1 + 680);
  if (!v56 && (*(_DWORD *)(a1 + 336) || *(_DWORD *)(a1 + 416))) {
    return;
  }
  uint64_t v57 = *(void *)(a1 + 664);
  if (!v57) {
    return;
  }
  int v58 = *(std::__shared_weak_count **)(a1 + 688);
  if (v58)
  {
    atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v57 = *(void *)(a1 + 664);
  }
  uint64_t v59 = *(std::__shared_weak_count **)(a1 + 672);
  if (v59) {
    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(_DWORD *)(a1 + 416))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v216, *(_DWORD *)(a1 + 344), 1, 1, 1);
    uint64_t v56 = v216;
    int v60 = v217;
    if (v58) {
      nitro::nitro_function::nitro_function(v58);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v216, *(void *)(a1 + 664) + 8);
    uint64_t v57 = v216;
    uint64_t v62 = v217;
    if (v59) {
      nitro::nitro_function::nitro_function(v59);
    }
    Espresso::util_bake_batchnorm_generic(*(unsigned int *)(a1 + 344), *(_DWORD *)(*(void *)(a1 + 664) + 12)* *(_DWORD *)(*(void *)(a1 + 664) + 8)* *(_DWORD *)(*(void *)(a1 + 664) + 16), 1, *(void *)(*(void *)(a1 + 664) + 24), *(const float **)(v57 + 24), *(float **)(*(void *)(a1 + 680) + 16), *(const float **)(v56 + 16), v61);
    if (v60) {
      atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 680) = v56;
    uint64_t v63 = *(std::__shared_weak_count **)(a1 + 688);
    *(void *)(a1 + 688) = v60;
    if (v63) {
      nitro::nitro_function::nitro_function(v63);
    }
    *(_DWORD *)(a1 + 416) = 0;
    uint64_t v59 = v62;
  }
  else
  {
    int v60 = v58;
  }
  uint64_t v199 = v56;
  v201 = v60;
  if (v59) {
    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v65 = *(unsigned int *)(v57 + 8);
  uint64_t v66 = *(unsigned int *)(v57 + 12);
  uint64_t v64 = v57 + 8;
  int v195 = *(_DWORD *)(v57 + 20);
  int v196 = *(_DWORD *)(v57 + 16);
  uint64_t v202 = *(int *)(a1 + 592);
  v203 = v59;
  int v211 = (v196 - 1) / (int)v202;
  uint64_t v67 = (v211 + 1);
  uint64_t v204 = *(int *)(a1 + 560);
  int v207 = (v195 - 1) / (int)v204;
  int v68 = v207 + 1;
  uint64_t v210 = (v207 + 1);
  v200 = (void *)a1;
  if (*(unsigned char *)(a1 + 596))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,6>,std::allocator<Espresso::blob<float,6>>,int &,int &,int &,int &,int &,int &,void>(&v216, v202, v204, v211 + 1, v65, v66, v68);
    uint64_t v114 = 0;
    uint64_t v116 = v216;
    float v115 = v217;
    uint64_t v117 = 1;
    do
    {
      *(&v216 + v114) = (int)v117;
      v117 *= *(unsigned int *)(v64 + 4 * v114++);
    }
    while (v114 != 4);
    uint64_t v118 = v217;
    uint64_t v119 = v218;
    uint64_t v120 = v219;
    if (v59) {
      atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v121 = 0;
    v213 = *(_DWORD **)(v57 + 24);
    uint64_t v122 = 1;
    do
    {
      *(&v216 + v121) = (int)v122;
      v122 *= *(unsigned int *)(v116 + 4 * v121++ + 8);
    }
    while (v121 != 6);
    v123 = v217;
    uint64_t v124 = v218;
    uint64_t v126 = v219;
    uint64_t v125 = v220;
    uint64_t v127 = v221;
    if (v115) {
      atomic_fetch_add_explicit(&v115->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v215 = *(char **)(v116 + 32);
    uint64_t v128 = *(int *)(v116 + 8);
    for (uint64_t j = 12; j != 32; j += 4)
      v128 *= *(int *)(v116 + j);
    uint64_t v197 = v116;
    v198 = v115;
    if (v128)
    {
      uint64_t v194 = v120;
      uint64_t v130 = v118;
      uint64_t v131 = v119;
      uint64_t v132 = v125;
      bzero(v215, 4 * v128);
      uint64_t v125 = v132;
      uint64_t v119 = v131;
      uint64_t v120 = v194;
      uint64_t v118 = v130;
    }
    if ((v207 & 0x80000000) == 0)
    {
      uint64_t v133 = 0;
      if (v195 >= (int)v204) {
        uint64_t v134 = v204;
      }
      else {
        uint64_t v134 = v195;
      }
      if (v196 >= (int)v202) {
        uint64_t v135 = v202;
      }
      else {
        uint64_t v135 = v196;
      }
      uint64_t v136 = 4 * v124;
      uint64_t v137 = 4 * v125;
      uint64_t v138 = 4 * v126;
      uint64_t v139 = 4 * (void)v123;
      uint64_t v206 = 4 * v120 * v204;
      uint64_t v209 = 4 * v127;
      uint64_t v140 = 4 * v119 * v202;
      uint64_t v141 = 4 * (void)v118;
      uint64_t v142 = 4 * v120;
      uint64_t v143 = 4 * v119;
      do
      {
        if ((v211 & 0x80000000) == 0)
        {
          uint64_t v144 = 0;
          uint64_t v145 = v213;
          v146 = v215;
          do
          {
            if ((int)v66 >= 1)
            {
              uint64_t v147 = 0;
              v148 = v145;
              uint64_t v149 = v146;
              do
              {
                if ((int)v65 >= 1)
                {
                  uint64_t v150 = 0;
                  uint64_t v151 = v148;
                  v152 = v149;
                  do
                  {
                    if ((int)v134 >= 1)
                    {
                      uint64_t v153 = 0;
                      v154 = v151;
                      uint64_t v155 = v152;
                      do
                      {
                        v156 = v154;
                        uint64_t v157 = v155;
                        uint64_t v158 = v135;
                        if ((int)v135 >= 1)
                        {
                          do
                          {
                            *v157++ = *v156;
                            v156 = (_DWORD *)((char *)v156 + v143);
                            --v158;
                          }
                          while (v158);
                        }
                        ++v153;
                        uint64_t v155 = (_DWORD *)((char *)v155 + v139);
                        v154 = (_DWORD *)((char *)v154 + v142);
                      }
                      while (v153 != v134);
                    }
                    ++v150;
                    v152 = (_DWORD *)((char *)v152 + v138);
                    ++v151;
                  }
                  while (v150 != v65);
                }
                ++v147;
                v149 += v137;
                v148 = (_DWORD *)((char *)v148 + v141);
              }
              while (v147 != v66);
            }
            ++v144;
            v146 += v136;
            uint64_t v145 = (_DWORD *)((char *)v145 + v140);
          }
          while (v144 != v67);
        }
        ++v133;
        v215 += v209;
        v213 = (_DWORD *)((char *)v213 + v206);
      }
      while (v133 != v210);
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,6>,std::allocator<Espresso::blob<float,6>>,int &,int &,int &,int &,int &,int &,void>(&v216, v204, v202, v211 + 1, v65, v66, v68);
    uint64_t v69 = 0;
    uint64_t v71 = v216;
    uint64_t v70 = v217;
    uint64_t v72 = 1;
    do
    {
      *(&v216 + v69) = (int)v72;
      v72 *= *(unsigned int *)(v64 + 4 * v69++);
    }
    while (v69 != 4);
    uint64_t v73 = v217;
    uint64_t v74 = v218;
    uint64_t v75 = v219;
    if (v59) {
      atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v76 = 0;
    v212 = *(_DWORD **)(v57 + 24);
    uint64_t v77 = 1;
    do
    {
      *(&v216 + v76) = (int)v77;
      v77 *= *(unsigned int *)(v71 + 4 * v76++ + 8);
    }
    while (v76 != 6);
    uint64_t v78 = v217;
    uint64_t v79 = v218;
    uint64_t v80 = v219;
    uint64_t v81 = v220;
    uint64_t v82 = v221;
    if (v70) {
      atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v214 = *(char **)(v71 + 32);
    uint64_t v83 = *(int *)(v71 + 8);
    for (uint64_t k = 12; k != 32; k += 4)
      v83 *= *(int *)(v71 + k);
    uint64_t v197 = v71;
    v198 = v70;
    if (v83)
    {
      uint64_t v193 = v75;
      uint64_t v85 = v73;
      uint64_t v86 = v74;
      uint64_t v87 = v82;
      bzero(v214, 4 * v83);
      uint64_t v82 = v87;
      uint64_t v74 = v86;
      uint64_t v75 = v193;
      uint64_t v73 = v85;
    }
    if ((v207 & 0x80000000) == 0)
    {
      uint64_t v88 = 0;
      if (v195 >= (int)v204) {
        uint64_t v89 = v204;
      }
      else {
        uint64_t v89 = v195;
      }
      if (v196 >= (int)v202) {
        uint64_t v90 = v202;
      }
      else {
        uint64_t v90 = v196;
      }
      uint64_t v91 = 4 * v79;
      uint64_t v92 = 4 * v81;
      uint64_t v93 = 4 * v80;
      uint64_t v94 = 4 * (void)v78;
      uint64_t v205 = 4 * v75 * v204;
      uint64_t v208 = 4 * v82;
      uint64_t v95 = 4 * v74 * v202;
      uint64_t v96 = 4 * (void)v73;
      uint64_t v97 = 4 * v75;
      uint64_t v98 = 4 * v74;
      do
      {
        if ((v211 & 0x80000000) == 0)
        {
          uint64_t v99 = 0;
          uint64_t v100 = v212;
          unint64_t v101 = v214;
          do
          {
            if ((int)v66 >= 1)
            {
              uint64_t v102 = 0;
              unint64_t v103 = v100;
              __int32 v104 = v101;
              do
              {
                if ((int)v65 >= 1)
                {
                  uint64_t v105 = 0;
                  uint64_t v106 = v103;
                  uint64_t v107 = v104;
                  do
                  {
                    if ((int)v89 >= 1)
                    {
                      uint64_t v108 = 0;
                      uint64_t v109 = v106;
                      unint64_t v110 = v107;
                      do
                      {
                        uint64_t v111 = v109;
                        uint64_t v112 = v110;
                        uint64_t v113 = v90;
                        if ((int)v90 >= 1)
                        {
                          do
                          {
                            *uint64_t v112 = *v111;
                            uint64_t v112 = (_DWORD *)((char *)v112 + v94);
                            uint64_t v111 = (_DWORD *)((char *)v111 + v98);
                            --v113;
                          }
                          while (v113);
                        }
                        ++v108;
                        ++v110;
                        uint64_t v109 = (_DWORD *)((char *)v109 + v97);
                      }
                      while (v108 != v89);
                    }
                    ++v105;
                    uint64_t v107 = (_DWORD *)((char *)v107 + v93);
                    ++v106;
                  }
                  while (v105 != v65);
                }
                ++v102;
                v104 += v92;
                unint64_t v103 = (_DWORD *)((char *)v103 + v96);
              }
              while (v102 != v66);
            }
            ++v99;
            v101 += v91;
            uint64_t v100 = (_DWORD *)((char *)v100 + v95);
          }
          while (v99 != v67);
        }
        ++v88;
        v214 += v208;
        v212 = (_DWORD *)((char *)v212 + v205);
      }
      while (v88 != v210);
    }
  }
  if (v198) {
    nitro::nitro_function::nitro_function(v198);
  }
  if (v203)
  {
    nitro::nitro_function::nitro_function(v203);
    nitro::nitro_function::nitro_function(v203);
  }
  uint64_t v159 = *(int *)(v197 + 8);
  for (uint64_t m = 12; m != 32; m += 4)
    v159 *= *(int *)(v197 + m);
  uint64_t v161 = (const void *)v200[1];
  if (!v161
  {
    v188 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v188, "Espresso: wrong_context_type");
    v188->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  v163 = (std::__shared_weak_count *)v200[2];
  if (v163) {
    atomic_fetch_add_explicit(&v163->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v164 = (void *)v162[18];
  if ((unint64_t)(2 * v159) <= 0x10) {
    uint64_t v165 = 16;
  }
  else {
    uint64_t v165 = 2 * v159;
  }
  v166 = (void *)[v164 newBufferWithLength:v165 options:0];
  if (v163) {
    nitro::nitro_function::nitro_function(v163);
  }
  v167 = *(int **)(v197 + 32);
  id v168 = v166;
  for (n = (_WORD *)[v168 contents]; v159; --v159)
  {
    int v170 = *v167++;
    _S0 = v170;
    __asm { FCVT            H0, S0 }
    *n++ = _S0;
  }
  v172 = (int *)(v200 + 43);
  if (v199) {
    v172 = (int *)(v199 + 8);
  }
  v173 = (const void *)v200[1];
  if (!v173 {
    || (uint64_t v174 = *v172,
  }
  {
    v189 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v189, "Espresso: wrong_context_type");
    v189->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  v176 = (std::__shared_weak_count *)v200[2];
  if (v176) {
    atomic_fetch_add_explicit(&v176->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v177 = (void *)v175[18];
  if ((unint64_t)(2 * v174) <= 0x10) {
    uint64_t v178 = 16;
  }
  else {
    uint64_t v178 = 2 * v174;
  }
  v179 = (void *)[v177 newBufferWithLength:v178 options:0];
  if (v176) {
    nitro::nitro_function::nitro_function(v176);
  }
  if (v199)
  {
    v180 = *(int **)(v199 + 16);
    v181 = (_WORD *)[v179 contents];
    uint64_t v4 = v201;
    if (v174)
    {
      do
      {
        int v182 = *v180++;
        _S0 = v182;
        __asm { FCVT            H0, S0 }
        *v181++ = _S0;
        --v174;
      }
      while (v174);
    }
  }
  else
  {
    id v184 = v179;
    bzero((void *)[v184 contents], objc_msgSend(v184, "length"));
    uint64_t v4 = v201;
  }
  v185 = (void *)v200[78];
  v200[78] = v168;
  id v186 = v168;

  v187 = (void *)v200[81];
  v200[81] = v179;

  if (v198) {
    nitro::nitro_function::nitro_function(v198);
  }
  if (v203)
  {
    int v55 = v203;
LABEL_179:
    nitro::nitro_function::nitro_function(v55);
  }
LABEL_180:
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
  }
}

void sub_1929E9F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1929EA08C()
{
  JUMPOUT(0x1929EA098);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,6>,std::allocator<Espresso::blob<float,6>>,int &,int &,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v14 = (char *)operator new(0x68uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)uint64_t v14 = &unk_1EE389A38;
  *((void *)v14 + 3) = &unk_1EE36BF50;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *((_DWORD *)v14 + 8) = a2;
  *((_DWORD *)v14 + 9) = a3;
  *((_DWORD *)v14 + 10) = a4;
  *((_DWORD *)v14 + 11) = a5;
  *((_DWORD *)v14 + 12) = a6;
  *((_DWORD *)v14 + 13) = a7;
  uint64_t v15 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5 * a6 * a7);
  uint64_t v16 = Espresso::kern_alloc_uninitialized(v15);
  bzero(v16, (size_t)v15);
  *((void *)v14 + 7) = v16;
  v14[64] = 1;
  *a1 = v14 + 24;
  a1[1] = v14;
}

void sub_1929EA1DC(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[4].__vftable;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_conv_kernel::set_quantization_lut_blob()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Not implemented/deprecated");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1929EA254(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_conv_kernel::set_quantized_weights_blob(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v87 = v3;
  uint64_t v5 = *(int *)(a1 + 560);
  uint64_t v6 = *(int *)(a1 + 592);
  uint64_t v8 = *(unsigned int *)(v4 + 8);
  uint64_t v9 = *(unsigned int *)(v4 + 12);
  uint64_t v7 = v4 + 8;
  int v88 = *(_DWORD *)(v4 + 16);
  int v97 = (v88 - 1) / (int)v6;
  uint64_t v10 = (v97 + 1);
  int v82 = *(_DWORD *)(v4 + 20);
  int v93 = (v82 - 1) / (int)v5;
  int v11 = v93 + 1;
  uint64_t v96 = (v93 + 1);
  if (*(unsigned char *)(a1 + 596))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,6>,std::allocator<Espresso::blob<unsigned char,6>>,int &,int &,int &,int &,int &,int &,void>(&v102, v6, v5, v97 + 1, v8, v9, v11);
    uint64_t v46 = 0;
    uint64_t v47 = v102;
    uint64_t v86 = v103;
    uint64_t v48 = 1;
    do
    {
      *(&v102 + v46) = (int)v48;
      v48 *= *(unsigned int *)(v7 + 4 * v46++);
    }
    while (v46 != 4);
    int v49 = v103;
    uint64_t v50 = v104;
    uint64_t v51 = v105;
    if (v87) {
      atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v52 = 0;
    unint64_t v101 = *(unsigned char **)(v4 + 24);
    uint64_t v53 = 1;
    do
    {
      *(&v102 + v52) = (int)v53;
      v53 *= *(unsigned int *)(v47 + 4 * v52++ + 8);
    }
    while (v52 != 6);
    int v54 = v103;
    uint64_t v55 = v104;
    uint64_t v56 = v105;
    uint64_t v57 = v106;
    uint64_t v92 = v107;
    if (v86) {
      atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v99 = *(unsigned char **)(v47 + 32);
    uint64_t v58 = *(int *)(v47 + 8);
    for (uint64_t i = 12; i != 32; i += 4)
      v58 *= *(int *)(v47 + i);
    if (v58)
    {
      for (uint64_t j = 0; j != v58; ++j)
        *(unsigned char *)(*(void *)(v47 + 32) + j) = 0;
    }
    uint64_t v83 = v47;
    if ((v93 & 0x80000000) == 0)
    {
      uint64_t v61 = 0;
      if (v82 >= (int)v5) {
        uint64_t v62 = v5;
      }
      else {
        uint64_t v62 = v82;
      }
      if (v88 >= (int)v6) {
        uint64_t v63 = v6;
      }
      else {
        uint64_t v63 = v88;
      }
      uint64_t v90 = v51 * v5;
      uint64_t v64 = v50 * v6;
      do
      {
        uint64_t v95 = v61;
        if ((v97 & 0x80000000) == 0)
        {
          uint64_t v65 = 0;
          uint64_t v66 = v99;
          uint64_t v67 = v101;
          do
          {
            if ((int)v9 >= 1)
            {
              uint64_t v68 = 0;
              uint64_t v69 = v67;
              uint64_t v70 = v66;
              do
              {
                if ((int)v8 >= 1)
                {
                  uint64_t v71 = 0;
                  uint64_t v72 = v69;
                  uint64_t v73 = v70;
                  do
                  {
                    if ((int)v62 >= 1)
                    {
                      uint64_t v74 = 0;
                      uint64_t v75 = v72;
                      uint64_t v76 = v73;
                      do
                      {
                        uint64_t v77 = v75;
                        uint64_t v78 = v76;
                        uint64_t v79 = v63;
                        if ((int)v63 >= 1)
                        {
                          do
                          {
                            *v78++ = *v77;
                            v77 += v50;
                            --v79;
                          }
                          while (v79);
                        }
                        ++v74;
                        uint64_t v76 = (char *)v54 + (void)v76;
                        v75 += v51;
                      }
                      while (v74 != v62);
                    }
                    ++v71;
                    v73 += v56;
                    ++v72;
                  }
                  while (v71 != v8);
                }
                ++v68;
                v70 += v57;
                uint64_t v69 = (char *)v49 + (void)v69;
              }
              while (v68 != v9);
            }
            ++v65;
            v66 += v55;
            v67 += v64;
          }
          while (v65 != v10);
        }
        ++v61;
        v99 += v92;
        v101 += v90;
      }
      while (v95 + 1 != v96);
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,6>,std::allocator<Espresso::blob<unsigned char,6>>,int &,int &,int &,int &,int &,int &,void>(&v102, v5, v6, v97 + 1, v8, v9, v11);
    uint64_t v12 = 0;
    uint64_t v13 = v102;
    uint64_t v86 = v103;
    uint64_t v14 = 1;
    do
    {
      *(&v102 + v12) = (int)v14;
      v14 *= *(unsigned int *)(v7 + 4 * v12++);
    }
    while (v12 != 4);
    uint64_t v15 = v103;
    uint64_t v16 = v104;
    uint64_t v17 = v105;
    if (v87) {
      atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = 0;
    uint64_t v100 = *(unsigned char **)(v4 + 24);
    uint64_t v19 = 1;
    do
    {
      *(&v102 + v18) = (int)v19;
      v19 *= *(unsigned int *)(v13 + 4 * v18++ + 8);
    }
    while (v18 != 6);
    float v20 = v103;
    uint64_t v21 = v104;
    uint64_t v22 = v105;
    uint64_t v23 = v106;
    uint64_t v91 = v107;
    if (v86) {
      atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v98 = *(unsigned char **)(v13 + 32);
    uint64_t v24 = *(int *)(v13 + 8);
    for (uint64_t k = 12; k != 32; k += 4)
      v24 *= *(int *)(v13 + k);
    if (v24)
    {
      for (uint64_t m = 0; m != v24; ++m)
        *(unsigned char *)(*(void *)(v13 + 32) + m) = 0;
    }
    uint64_t v83 = v13;
    if ((v93 & 0x80000000) == 0)
    {
      uint64_t v27 = 0;
      if (v82 >= (int)v5) {
        uint64_t v28 = v5;
      }
      else {
        uint64_t v28 = v82;
      }
      if (v88 >= (int)v6) {
        uint64_t v29 = v6;
      }
      else {
        uint64_t v29 = v88;
      }
      uint64_t v89 = v17 * v5;
      uint64_t v30 = v16 * v6;
      do
      {
        uint64_t v94 = v27;
        if ((v97 & 0x80000000) == 0)
        {
          uint64_t v31 = 0;
          uint64_t v32 = v98;
          uint64_t v33 = v100;
          do
          {
            if ((int)v9 >= 1)
            {
              uint64_t v34 = 0;
              uint64_t v35 = v33;
              uint64_t v36 = v32;
              do
              {
                if ((int)v8 >= 1)
                {
                  uint64_t v37 = 0;
                  uint64_t v38 = v35;
                  unint64_t v39 = v36;
                  do
                  {
                    if ((int)v28 >= 1)
                    {
                      uint64_t v40 = 0;
                      unint64_t v41 = v38;
                      uint64_t v42 = v39;
                      do
                      {
                        std::string v43 = v41;
                        uint64_t v44 = v42;
                        uint64_t v45 = v29;
                        if ((int)v29 >= 1)
                        {
                          do
                          {
                            unsigned char *v44 = *v43;
                            uint64_t v44 = (char *)v20 + (void)v44;
                            v43 += v16;
                            --v45;
                          }
                          while (v45);
                        }
                        ++v40;
                        ++v42;
                        v41 += v17;
                      }
                      while (v40 != v28);
                    }
                    ++v37;
                    v39 += v22;
                    ++v38;
                  }
                  while (v37 != v8);
                }
                ++v34;
                v36 += v23;
                uint64_t v35 = (char *)v15 + (void)v35;
              }
              while (v34 != v9);
            }
            ++v31;
            v32 += v21;
            v33 += v30;
          }
          while (v31 != v10);
        }
        uint64_t v27 = v94 + 1;
        v98 += v91;
        v100 += v89;
      }
      while (v94 + 1 != v96);
    }
  }
  if (v86) {
    nitro::nitro_function::nitro_function(v86);
  }
  if (v87)
  {
    nitro::nitro_function::nitro_function(v87);
    nitro::nitro_function::nitro_function(v87);
  }
  if (v86) {
    atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 696) = v83;
  uint64_t v80 = *(std::__shared_weak_count **)(a1 + 704);
  *(void *)(a1 + 704) = v86;
  if (v80) {
    nitro::nitro_function::nitro_function(v80);
  }
  uint64_t v81 = *(std::__shared_weak_count **)(a3 + 8);
  if (v81) {
    atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::V9Engine::v9_conv_kernel::setup_weights_bias_if_ready(a1);
  if (v81) {
    nitro::nitro_function::nitro_function(v81);
  }
  if (v86)
  {
    nitro::nitro_function::nitro_function(v86);
  }
}

void sub_1929EA82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,6>,std::allocator<Espresso::blob<unsigned char,6>>,int &,int &,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v14 = (char *)operator new(0x68uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)uint64_t v14 = &unk_1EE389B50;
  *((void *)v14 + 3) = &unk_1EE36BFF0;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *((_DWORD *)v14 + 8) = a2;
  *((_DWORD *)v14 + 9) = a3;
  *((_DWORD *)v14 + 10) = a4;
  *((_DWORD *)v14 + 11) = a5;
  *((_DWORD *)v14 + 12) = a6;
  *((_DWORD *)v14 + 13) = a7;
  size_t v15 = a3 * (uint64_t)a2 * a4 * a5 * a6 * a7;
  uint64_t v16 = Espresso::kern_alloc_uninitialized((Espresso *)v15);
  bzero(v16, v15);
  *((void *)v14 + 7) = v16;
  v14[64] = 1;
  *a1 = v14 + 24;
  a1[1] = v14;
}

void sub_1929EA968(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[4].__vftable;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::blob<unsigned char,6>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BFF0;
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 32), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<unsigned char,6>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BFF0;
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 32), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned char,6>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned char,6>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389B50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned char,6>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389B50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::V9Engine::v9_conv_kernel::get_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 672);
  *a2 = *(void *)(this + 664);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t Espresso::V9Engine::v9_conv_kernel::get_biases@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 688);
  *a2 = *(void *)(this + 680);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::V9Engine::v9_conv_kernel::set_weights(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 664) = v6;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 672);
  *(void *)(a1 + 672) = v5;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a3 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::V9Engine::v9_conv_kernel::setup_weights_bias_if_ready(a1);
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_1929EAC18(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::V9Engine::v9_conv_kernel::set_biases(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 680) = v6;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 688);
  *(void *)(a1 + 688) = v5;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a3 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::V9Engine::v9_conv_kernel::setup_weights_bias_if_ready(a1);
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_1929EACBC(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::V9Engine::v9_conv_kernel::set_weights()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Invalid call");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1929EAD1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_conv_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 424))(a1, &v5, &v3);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_1929EADBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::V9Engine::v9_conv_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 416))(a1, &v5, &v3);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_1929EAE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

const char *Espresso::V9Engine::v9_conv_kernel::kernel_type_str(Espresso::V9Engine::v9_conv_kernel *this)
{
  return "v9_conv";
}

void Espresso::V9Engine::v9_conv_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  Espresso::generic_convolution_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::V9Engine::v9_conv_kernel::setup_weights_bias_if_ready(a1);
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_1929EAF04(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::V9Engine::v9_conv_kernel::wisdom_tunables(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t Espresso::V9Engine::v9_conv_kernel::wisdom_key()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"C,", 2);
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"K,", 2);
  uint64_t v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"X,", 2);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Y,", 2);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"G,", 2);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"W,", 2);
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"H,", 2);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"S,", 2);
  uint64_t v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"V,", 2);
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v14);
}

void sub_1929EB230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_conv_kernel::tmp_aux_buffer_share(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 640))
  {
    if (!*(void *)a2
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Inconsistent state");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      objc_storeStrong((id *)(a1 + 776), v4[97]);
      nitro::nitro_function::nitro_function(v5);
    }
    else
    {
      id v6 = v4[97];
      objc_storeStrong((id *)(a1 + 776), v6);
    }
  }
}

void sub_1929EB358(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_conv_kernel::tmp_aux_buffer_create(const void **this, uint64_t a2)
{
  if (this[80])
  {
    uint64_t v5 = (std::__shared_weak_count *)this[2];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = [v4[18] newBufferWithLength:a2 options:0];
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
    uint64_t v7 = (void *)this[97];
    this[97] = (const void *)v6;
  }
}

void sub_1929EB440(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::V9Engine::v9_conv_kernel::tmp_aux_buffer_size(Espresso::V9Engine::v9_conv_kernel *this)
{
  if (!*((void *)this + 80)) {
    return 0;
  }
  unsigned int v1 = *((_DWORD *)this + 165) - 1;
  uint64_t v2 = [*((id *)this + 78) length];
  if (v1 <= 1) {
    return 2 * v2;
  }
  else {
    return 4 * v2;
  }
}

void Espresso::V9Engine::v9_conv_kernel::top_shapes_for_bottom_shapes(int32x2_t *a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  if (a1[101].i32[0] < 1 || a1[101].i32[1] < 1)
  {
    Espresso::generic_convolution_kernel::top_shapes_for_bottom_shapes((uint64_t)a1, a2, a3);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
    std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v5, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 6);
    *(int32x2_t *)v5[0] = vmul_s32(*(int32x2_t *)v5[0], a1[101]);
    Espresso::generic_convolution_kernel::top_shapes_for_bottom_shapes((uint64_t)a1, v5, a3);
    uint64_t v6 = v5;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  }
}

void sub_1929EB570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_conv_kernel::clear_weights(Espresso::V9Engine::v9_conv_kernel *this)
{
  uint64_t v2 = (char *)this + 664;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 84);
  *(_OWORD *)uint64_t v2 = 0u;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 88);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 90);
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 7) = 0;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 81);
  *((void *)this + 81) = 0;

  uint64_t v7 = (void *)*((void *)this + 78);
  *((void *)this + 78) = 0;

  uint64_t v8 = (void *)*((void *)this + 79);
  *((void *)this + 79) = 0;

  uint64_t v9 = (void *)*((void *)this + 80);
  *((void *)this + 80) = 0;
}

void Espresso::V9Engine::v9_conv_kernel::share_weights(uint64_t a1, const void **a2)
{
  if (*a2)
  {
    if (v3)
    {
      uint64_t v4 = v3;
      objc_storeStrong((id *)(a1 + 648), v3[81]);
      objc_storeStrong((id *)(a1 + 624), v4[78]);
      objc_storeStrong((id *)(a1 + 632), v4[79]);
      objc_storeStrong((id *)(a1 + 640), v4[80]);
      uint64_t v5 = *(void **)(a1 + 616);
      *(void *)(a1 + 616) = 0;
    }
  }
}

void Espresso::V9Engine::v9_conv_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  if (*(void *)a2)
  {
    if (v8)
    {
      uint64_t v9 = *(std::__shared_weak_count **)(a2 + 8);
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v10 = *(const void **)(a1 + 8);
  if (v10
  {
    int v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v219 = 0;
    int v11 = 0;
  }
  uint64_t v12 = *a4;
  char v13 = **a4;
  if (v13)
  {
    if (v14 && (size_t v15 = (atomic_ullong *)v12[1]) != 0)
    {
      v217 = (std::__shared_weak_count *)v12[1];
      atomic_fetch_add_explicit(v15 + 1, 1uLL, memory_order_relaxed);
    }
    else
    {
      v217 = 0;
    }
  }
  else
  {
    v217 = 0;
    uint64_t v14 = 0;
  }
  uint64_t v16 = *a3;
  uint64_t v17 = **a3;
  if (v17)
  {
    if (v18 && (uint64_t v19 = (atomic_ullong *)v16[1]) != 0)
    {
      uint64_t v218 = (std::__shared_weak_count *)v16[1];
      atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v218 = 0;
    }
  }
  else
  {
    uint64_t v218 = 0;
    uint64_t v18 = 0;
  }
  int v20 = *((_DWORD *)v14 + 5);
  int v21 = v18[2];
  if (v20 != *(__int16 *)(a1 + 438) || v21 != *(_DWORD *)(a1 + 304) || v18[3] != *(_DWORD *)(a1 + 308))
  {
    *(_DWORD *)(a1 + 304) = v21;
    int v22 = v18[3];
    *(_DWORD *)(a1 + 308) = v22;
    int v23 = *((_DWORD *)v14 + 2);
    *(_DWORD *)(a1 + 312) = v23;
    int v24 = *((_DWORD *)v14 + 3);
    *(_DWORD *)(a1 + 316) = v24;
    *(_WORD *)(a1 + 438) = v20;
    *(_DWORD *)(a1 + 324) = v18[51];
    int v25 = *(__int16 *)(a1 + 376);
    if (v25 != 4)
    {
      if (v25 == 2)
      {
        unsigned int v38 = 0;
        unsigned int v39 = 0;
        unsigned int v40 = 0;
        unsigned int v41 = 0;
      }
      else
      {
        if (v25 == 1) {
          goto LABEL_30;
        }
        unsigned int v38 = *(__int16 *)(a1 + 384);
        unsigned int v39 = *(__int16 *)(a1 + 386);
        unsigned int v40 = *(__int16 *)(a1 + 388);
        unsigned int v41 = *(__int16 *)(a1 + 390);
      }
LABEL_48:
      *(_WORD *)(a1 + 404) = v38;
      *(_WORD *)(a1 + 406) = v40;
      if (!v38)
      {
        BOOL v42 = !v39 && v40 == 0;
        if (v42 && v41 == 0) {
          *(_WORD *)(a1 + 376) = 2;
        }
      }
      uint64_t v44 = *(void **)(a1 + 616);
      *(void *)(a1 + 616) = 0;

      goto LABEL_59;
    }
LABEL_30:
    int v26 = *(__int16 *)(a1 + 402);
    if (v26 <= 1) {
      int v26 = 1;
    }
    int v27 = *(__int16 *)(a1 + 400);
    if (v27 <= 1) {
      int v27 = 1;
    }
    int v28 = (v22 - 1) * *(__int16 *)(a1 + 398) - v24 + (*(_DWORD *)(a1 + 356) - 1) * v26 + 1;
    int v29 = (v21 - 1) * *(__int16 *)(a1 + 396) - v23 + (*(_DWORD *)(a1 + 352) - 1) * v27 + 1;
    unsigned int v30 = v28 & ~(v28 >> 31);
    unsigned int v31 = v29 & ~(v29 >> 31);
    int v32 = *(unsigned __int16 *)(a1 + 376);
    unsigned int v33 = v31 >> 1;
    unsigned int v34 = v31 - (v31 >> 1);
    unsigned int v35 = v30 >> 1;
    unsigned int v36 = v30 - (v30 >> 1);
    BOOL v37 = v32 == 1;
    if (v32 == 1) {
      unsigned int v38 = v31 >> 1;
    }
    else {
      unsigned int v38 = v31 - (v31 >> 1);
    }
    if (v32 == 1) {
      unsigned int v39 = v34;
    }
    else {
      unsigned int v39 = v33;
    }
    if (v32 == 1) {
      unsigned int v40 = v35;
    }
    else {
      unsigned int v40 = v36;
    }
    if (v37) {
      unsigned int v41 = v36;
    }
    else {
      unsigned int v41 = v35;
    }
    goto LABEL_48;
  }
LABEL_59:
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v220, (uint64_t)v8);
  id v45 = v220[0];
  uint64_t v46 = (void *)*((void *)v18 + 20);
  uint64_t v47 = (void *)*((void *)v14 + 20);
  if (v218) {
    atomic_fetch_add_explicit(&v218->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v217) {
    atomic_fetch_add_explicit(&v217->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v211 = v45;
  id v215 = v46;
  id v216 = v47;
  int v48 = *(_DWORD *)(a1 + 344);
  int v50 = v48 - 1;
  BOOL v49 = v48 < 1;
  int v51 = v48 + 2;
  if (v49) {
    int v52 = v51;
  }
  else {
    int v52 = v50;
  }
  if (!*(void *)(a1 + 624))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "weights not set!");
    goto LABEL_293;
  }
  if (!*(void *)(a1 + 648))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "biases not set!");
LABEL_293:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v213 = *(_DWORD *)(a1 + 304);
  int v214 = *(_DWORD *)(a1 + 308);
  int v53 = *(__int16 *)(a1 + 438);
  long long v229 = 0uLL;
  uint64_t v230 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v229, *(const void **)(a1 + 744), *(void *)(a1 + 752), (uint64_t)(*(void *)(a1 + 752) - *(void *)(a1 + 744)) >> 2);
  uint64_t v54 = *((void *)v219 + 3);
  if (v54 && *(unsigned char *)(v54 + 12))
  {
    Espresso::wisdom_trainer2::get_tune(v54, a1, (uint64_t)a3, (uint64_t)a4, &v226);
    if ((void)v229)
    {
      *((void *)&v229 + 1) = v229;
      operator delete((void *)v229);
    }
    long long v229 = v226;
    uint64_t v230 = v227;
  }
  int v208 = v53;
  int v209 = v52;
  long long v55 = v229;
  if (Espresso::V9Engine::v9_conv_kernel::setup_for_tune(a1, (uint64_t)&v229, v213, v214))
  {
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::V9Engine::v9_conv_kernel::setup_weights_bias_if_ready(a1);
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  uint64_t v56 = *((void *)v219 + 3);
  if (v56 && *(unsigned char *)(v56 + 12) && *((void *)&v55 + 1) == (void)v55 && (long long *)(v56 + 112) != &v229) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v56 + 112), (char *)v229, *((uint64_t *)&v229 + 1), (uint64_t)(*((void *)&v229 + 1) - v229) >> 2);
  }
  int v206 = *(_DWORD *)(a1 + 568);
  int v207 = *(_DWORD *)(a1 + 564);
  int v57 = *(_DWORD *)(a1 + 560);
  if (v57 >= 0) {
    int v58 = *(_DWORD *)(a1 + 560);
  }
  else {
    int v58 = v57 + 3;
  }
  int v202 = *(_DWORD *)(a1 + 728);
  int v203 = v58;
  int v204 = *(_DWORD *)(a1 + 732);
  int v205 = *(_DWORD *)(a1 + 736);
  WORD3(v228) = 0;
  uint64_t v59 = **a4;
  int v61 = v59[2];
  int v60 = v59[3];
  LOWORD(v226) = v61;
  WORD1(v226) = v60;
  int v62 = *(_DWORD *)(a1 + 808);
  if (v62 >= 2) {
    LOWORD(v226) = v62 * v61;
  }
  int v63 = *(_DWORD *)(a1 + 812);
  if (v63 >= 2) {
    WORD1(v226) = v63 * v60;
  }
  WORD2(v226) = *(_DWORD *)(a1 + 304);
  WORD3(v226) = *(_DWORD *)(a1 + 308);
  int v64 = *(__int16 *)(a1 + 396);
  if (v64 <= 1) {
    LOWORD(v64) = 1;
  }
  WORD6(v226) = v64;
  int v65 = *(__int16 *)(a1 + 398);
  if (v65 <= 1) {
    LOWORD(v65) = 1;
  }
  HIWORD(v226) = v65;
  LODWORD(v227) = *(_DWORD *)(a1 + 404);
  int v66 = *(_DWORD *)(a1 + 592);
  int v67 = *((_DWORD *)v14 + 63);
  WORD2(v227) = *((_DWORD *)v14 + 62) / v66;
  WORD3(v227) = v67 / v66;
  int v68 = v18[63] / v57;
  DWORD2(v227) = v18[62] / v57;
  HIDWORD(v227) = v68;
  LODWORD(v228) = v18[65] / v57;
  DWORD2(v228) = *(_DWORD *)(a1 + 368);
  HIDWORD(v228) = DWORD2(v228);
  int v69 = *(_DWORD *)(a1 + 420);
  if (v69 <= 1) {
    int v69 = 1;
  }
  WORD5(v226) = *(_DWORD *)(a1 + 348) / v69;
  WORD4(v226) = *(_DWORD *)(a1 + 344);
  WORD2(v228) = 0;
  id v70 = *((id *)v14 + 21);
  uint64_t v71 = v70;
  if ((*(unsigned char *)(a1 + 592) & 7) != 0)
  {
    if (v70) {
      goto LABEL_98;
    }
  }
  else
  {
    id v82 = *((id *)v14 + 33);

    uint64_t v71 = v82;
    if (v82) {
      goto LABEL_98;
    }
  }
  *(_DWORD *)(a1 + 588) = 2;
LABEL_98:
  if ((*(unsigned char *)(a1 + 596) & 2) != 0) {
    *(_DWORD *)(a1 + 588) = 2;
  }
  uint64_t v210 = v71;
  if (!*(void *)(a1 + 608))
  {
    __int16 v72 = *(_WORD *)(a1 + 376);
    uint64_t v73 = objc_opt_new();
    uint64_t v74 = objc_opt_new();
    uint64_t v75 = v74;
    if (*(_DWORD *)(a1 + 328)) {
      unsigned int v76 = 0;
    }
    else {
      unsigned int v76 = -1;
    }
    if (*(_DWORD *)(a1 + 332)) {
      unsigned int v76 = 1;
    }
    int v77 = *(_DWORD *)(a1 + 364);
    if (!v77) {
      unsigned int v76 = 0;
    }
    if (v77 == 1) {
      unsigned int v76 = 1;
    }
    if (v77 == 2) {
      uint64_t v78 = 2;
    }
    else {
      uint64_t v78 = v76;
    }
    uint64_t v79 = *(unsigned int *)(a1 + 352);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 352);
    objc_msgSend(v74, "appendFormat:", @"%d:%d_", 2, v79);
    [v73 setConstantValue:__p type:41 atIndex:2];
    uint64_t v80 = *(unsigned int *)(a1 + 356);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 356);
    objc_msgSend(v75, "appendFormat:", @"%d:%d_", 3, v80);
    [v73 setConstantValue:__p type:41 atIndex:3];
    LOWORD(__p[0]) = v78;
    objc_msgSend(v75, "appendFormat:", @"%d:%d_", 4, v78);
    [v73 setConstantValue:__p type:37 atIndex:4];
    if (*(_WORD *)(a1 + 378) == 2)
    {
      __int16 v81 = 102;
    }
    else if (*(_DWORD *)(a1 + 568) != 1 {
           || (*(_WORD *)(a1 + 390)
    }
             ? (BOOL v83 = (*(unsigned __int16 *)(a1 + 376) | *(unsigned __int16 *)(a1 + 384) | *(unsigned __int16 *)(a1 + 386) | *(unsigned __int16 *)(a1 + 388)) == 0)
             : (BOOL v83 = 0),
               v83 ? (__int16 v81 = 2) : (__int16 v81 = v72),
               *(_DWORD *)(a1 + 564) != 1))
    {
      __int16 v81 = 0;
    }
    LOWORD(__p[0]) = v81;
    objc_msgSend(v75, "appendFormat:", @"%d:%d_", 5, v81);
    [v73 setConstantValue:__p type:41 atIndex:5];
    uint64_t v84 = *(unsigned int *)(a1 + 420);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 420);
    objc_msgSend(v75, "appendFormat:", @"%d:%d_", 6, v84);
    [v73 setConstantValue:__p type:41 atIndex:6];
    uint64_t v85 = *(unsigned int *)(a1 + 424);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 424);
    objc_msgSend(v75, "appendFormat:", @"%d:%d_", 8, v85);
    [v73 setConstantValue:__p type:41 atIndex:8];
    LOWORD(__p[0]) = *(_WORD *)(a1 + 396);
    objc_msgSend(v75, "appendFormat:", @"%d:%d_", 13, SLOWORD(__p[0]));
    [v73 setConstantValue:__p type:41 atIndex:13];
    LOWORD(__p[0]) = *(_WORD *)(a1 + 398);
    objc_msgSend(v75, "appendFormat:", @"%d:%d_", 14, SLOWORD(__p[0]));
    [v73 setConstantValue:__p type:41 atIndex:14];
    LOWORD(__p[0]) = *(_WORD *)(a1 + 400);
    objc_msgSend(v75, "appendFormat:", @"%d:%d_", 15, SLOWORD(__p[0]));
    [v73 setConstantValue:__p type:41 atIndex:15];
    LOWORD(__p[0]) = *(_WORD *)(a1 + 402);
    objc_msgSend(v75, "appendFormat:", @"%d:%d_", 16, SLOWORD(__p[0]));
    [v73 setConstantValue:__p type:41 atIndex:16];
    uint64_t v86 = *(unsigned int *)(a1 + 656);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 656);
    objc_msgSend(v75, "appendFormat:", @"%d:%d_", 17, v86);
    [v73 setConstantValue:__p type:41 atIndex:17];
    uint64_t v87 = *(unsigned int *)(a1 + 808);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 808);
    objc_msgSend(v75, "appendFormat:", @"%d:%d_", 18, v87);
    [v73 setConstantValue:__p type:41 atIndex:18];
    uint64_t v88 = *(unsigned int *)(a1 + 812);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 812);
    objc_msgSend(v75, "appendFormat:", @"%d:%d_", 19, v88);
    [v73 setConstantValue:__p type:41 atIndex:19];
    LOWORD(__p[0]) = *(_WORD *)(a1 + 430);
    objc_msgSend(v75, "appendFormat:", @"%d:%d_", 20, LOWORD(__p[0]));
    [v73 setConstantValue:__p type:41 atIndex:20];
    std::string::basic_string[abi:ne180100]<0>(&v231, "conv_v9");
    std::to_string(&v232, *(_DWORD *)(a1 + 560));
    uint64_t v89 = std::string::insert(&v232, 0, "_oc");
    long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
    *(void *)&long long v222 = *((void *)&v89->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v90;
    v89->__r_.__value_.__l.__size_ = 0;
    v89->__r_.__value_.__r.__words[2] = 0;
    v89->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v222) & 0x80u) == 0) {
      uint64_t v91 = __p;
    }
    else {
      uint64_t v91 = (void **)__p[0];
    }
    if ((SBYTE7(v222) & 0x80u) == 0) {
      std::string::size_type v92 = BYTE7(v222);
    }
    else {
      std::string::size_type v92 = (std::string::size_type)__p[1];
    }
    std::string::append(&v231, (const std::string::value_type *)v91, v92);
    if (SBYTE7(v222) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v232.__r_.__value_.__l.__data_);
    }
    std::to_string(&v232, *(_DWORD *)(a1 + 564));
    int v93 = std::string::insert(&v232, 0, "_oy");
    long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    *(void *)&long long v222 = *((void *)&v93->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v222) & 0x80u) == 0) {
      uint64_t v95 = __p;
    }
    else {
      uint64_t v95 = (void **)__p[0];
    }
    if ((SBYTE7(v222) & 0x80u) == 0) {
      std::string::size_type v96 = BYTE7(v222);
    }
    else {
      std::string::size_type v96 = (std::string::size_type)__p[1];
    }
    std::string::append(&v231, (const std::string::value_type *)v95, v96);
    if (SBYTE7(v222) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v232.__r_.__value_.__l.__data_);
    }
    std::to_string(&v232, *(_DWORD *)(a1 + 568));
    int v97 = std::string::insert(&v232, 0, "_ox");
    long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
    *(void *)&long long v222 = *((void *)&v97->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v98;
    v97->__r_.__value_.__l.__size_ = 0;
    v97->__r_.__value_.__r.__words[2] = 0;
    v97->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v222) & 0x80u) == 0) {
      uint64_t v99 = __p;
    }
    else {
      uint64_t v99 = (void **)__p[0];
    }
    if ((SBYTE7(v222) & 0x80u) == 0) {
      std::string::size_type v100 = BYTE7(v222);
    }
    else {
      std::string::size_type v100 = (std::string::size_type)__p[1];
    }
    std::string::append(&v231, (const std::string::value_type *)v99, v100);
    if (SBYTE7(v222) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v232.__r_.__value_.__l.__data_);
    }
    std::to_string(&v232, *(_DWORD *)(a1 + 572));
    unint64_t v101 = std::string::insert(&v232, 0, "_kx");
    long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
    *(void *)&long long v222 = *((void *)&v101->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v102;
    v101->__r_.__value_.__l.__size_ = 0;
    v101->__r_.__value_.__r.__words[2] = 0;
    v101->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v222) & 0x80u) == 0) {
      unint64_t v103 = __p;
    }
    else {
      unint64_t v103 = (void **)__p[0];
    }
    if ((SBYTE7(v222) & 0x80u) == 0) {
      std::string::size_type v104 = BYTE7(v222);
    }
    else {
      std::string::size_type v104 = (std::string::size_type)__p[1];
    }
    std::string::append(&v231, (const std::string::value_type *)v103, v104);
    if (SBYTE7(v222) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v232.__r_.__value_.__l.__data_);
    }
    std::to_string(&v232, *(_DWORD *)(a1 + 576));
    uint64_t v105 = std::string::insert(&v232, 0, "_ky");
    long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
    *(void *)&long long v222 = *((void *)&v105->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v106;
    v105->__r_.__value_.__l.__size_ = 0;
    v105->__r_.__value_.__r.__words[2] = 0;
    v105->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v222) & 0x80u) == 0) {
      uint64_t v107 = __p;
    }
    else {
      uint64_t v107 = (void **)__p[0];
    }
    if ((SBYTE7(v222) & 0x80u) == 0) {
      std::string::size_type v108 = BYTE7(v222);
    }
    else {
      std::string::size_type v108 = (std::string::size_type)__p[1];
    }
    std::string::append(&v231, (const std::string::value_type *)v107, v108);
    if (SBYTE7(v222) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v232.__r_.__value_.__l.__data_);
    }
    std::to_string(&v232, *(_DWORD *)(a1 + 580));
    uint64_t v109 = std::string::insert(&v232, 0, "_weights_type");
    long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
    *(void *)&long long v222 = *((void *)&v109->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v110;
    v109->__r_.__value_.__l.__size_ = 0;
    v109->__r_.__value_.__r.__words[2] = 0;
    v109->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v222) & 0x80u) == 0) {
      uint64_t v111 = __p;
    }
    else {
      uint64_t v111 = (void **)__p[0];
    }
    if ((SBYTE7(v222) & 0x80u) == 0) {
      std::string::size_type v112 = BYTE7(v222);
    }
    else {
      std::string::size_type v112 = (std::string::size_type)__p[1];
    }
    std::string::append(&v231, (const std::string::value_type *)v111, v112);
    if (SBYTE7(v222) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v232.__r_.__value_.__l.__data_);
    }
    std::to_string(&v232, *(_DWORD *)(a1 + 584));
    uint64_t v113 = std::string::insert(&v232, 0, "_image_type");
    long long v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
    *(void *)&long long v222 = *((void *)&v113->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v114;
    v113->__r_.__value_.__l.__size_ = 0;
    v113->__r_.__value_.__r.__words[2] = 0;
    v113->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v222) & 0x80u) == 0) {
      float v115 = __p;
    }
    else {
      float v115 = (void **)__p[0];
    }
    if ((SBYTE7(v222) & 0x80u) == 0) {
      std::string::size_type v116 = BYTE7(v222);
    }
    else {
      std::string::size_type v116 = (std::string::size_type)__p[1];
    }
    std::string::append(&v231, (const std::string::value_type *)v115, v116);
    if (SBYTE7(v222) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v232.__r_.__value_.__l.__data_);
    }
    std::to_string(&v232, *(_DWORD *)(a1 + 588));
    uint64_t v117 = std::string::insert(&v232, 0, "_tex_mode");
    long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
    *(void *)&long long v222 = *((void *)&v117->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v118;
    v117->__r_.__value_.__l.__size_ = 0;
    v117->__r_.__value_.__r.__words[2] = 0;
    v117->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v222) & 0x80u) == 0) {
      uint64_t v119 = __p;
    }
    else {
      uint64_t v119 = (void **)__p[0];
    }
    if ((SBYTE7(v222) & 0x80u) == 0) {
      std::string::size_type v120 = BYTE7(v222);
    }
    else {
      std::string::size_type v120 = (std::string::size_type)__p[1];
    }
    std::string::append(&v231, (const std::string::value_type *)v119, v120);
    if (SBYTE7(v222) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v232.__r_.__value_.__l.__data_);
    }
    std::to_string(&v232, *(_DWORD *)(a1 + 592));
    uint64_t v121 = std::string::insert(&v232, 0, "_nk");
    long long v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
    *(void *)&long long v222 = *((void *)&v121->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v122;
    v121->__r_.__value_.__l.__size_ = 0;
    v121->__r_.__value_.__r.__words[2] = 0;
    v121->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v222) & 0x80u) == 0) {
      v123 = __p;
    }
    else {
      v123 = (void **)__p[0];
    }
    if ((SBYTE7(v222) & 0x80u) == 0) {
      std::string::size_type v124 = BYTE7(v222);
    }
    else {
      std::string::size_type v124 = (std::string::size_type)__p[1];
    }
    std::string::append(&v231, (const std::string::value_type *)v123, v124);
    if (SBYTE7(v222) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v232.__r_.__value_.__l.__data_);
    }
    std::to_string(&v232, *(_DWORD *)(a1 + 596));
    uint64_t v125 = std::string::insert(&v232, 0, "_accum_mode");
    long long v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
    *(void *)&long long v222 = *((void *)&v125->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v126;
    v125->__r_.__value_.__l.__size_ = 0;
    v125->__r_.__value_.__r.__words[2] = 0;
    v125->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v222) & 0x80u) == 0) {
      uint64_t v127 = __p;
    }
    else {
      uint64_t v127 = (void **)__p[0];
    }
    if ((SBYTE7(v222) & 0x80u) == 0) {
      std::string::size_type v128 = BYTE7(v222);
    }
    else {
      std::string::size_type v128 = (std::string::size_type)__p[1];
    }
    std::string::append(&v231, (const std::string::value_type *)v127, v128);
    if (SBYTE7(v222) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v232.__r_.__value_.__l.__data_);
    }
    std::to_string(&v232, *(_DWORD *)(a1 + 600));
    uint64_t v129 = std::string::insert(&v232, 0, "_accum_bits");
    long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
    *(void *)&long long v222 = *((void *)&v129->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v130;
    v129->__r_.__value_.__l.__size_ = 0;
    v129->__r_.__value_.__r.__words[2] = 0;
    v129->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v222) & 0x80u) == 0) {
      uint64_t v131 = __p;
    }
    else {
      uint64_t v131 = (void **)__p[0];
    }
    if ((SBYTE7(v222) & 0x80u) == 0) {
      std::string::size_type v132 = BYTE7(v222);
    }
    else {
      std::string::size_type v132 = (std::string::size_type)__p[1];
    }
    std::string::append(&v231, (const std::string::value_type *)v131, v132);
    if (SBYTE7(v222) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v232.__r_.__value_.__l.__data_);
    }
    int v133 = SHIBYTE(v231.__r_.__value_.__r.__words[2]);
    std::string::size_type v134 = v231.__r_.__value_.__r.__words[0];
    id v135 = v75;
    uint64_t v136 = [v135 UTF8String];
    if (v133 >= 0) {
      uint64_t v137 = &v231;
    }
    else {
      uint64_t v137 = (std::string *)v134;
    }
    uint64_t v138 = [*((id *)v219 + 20) kernelForFunction:v137 cacheString:v136 withConstants:v73];
    uint64_t v139 = *(void **)(a1 + 608);
    *(void *)(a1 + 608) = v138;

    if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v231.__r_.__value_.__l.__data_);
    }

    uint64_t v71 = v210;
  }
  id v140 = v211;
  if (*(void *)(a1 + 640))
  {
    v200 = v9;
    v201 = v11;
    uint64_t v141 = *(void *)(a1 + 8);
    uint64_t v142 = objc_opt_new();
    uint64_t v143 = objc_opt_new();
    int v144 = *(_DWORD *)(a1 + 352);
    int v145 = *(_DWORD *)(a1 + 356);
    int v146 = *(_DWORD *)(a1 + 348);
    if (*(int *)(a1 + 420) <= 1) {
      int v147 = 1;
    }
    else {
      int v147 = *(_DWORD *)(a1 + 420);
    }
    int v148 = *(_DWORD *)(a1 + 592);
    uint64_t v149 = *(unsigned int *)(a1 + 560);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 560);
    id v212 = v143;
    objc_msgSend(v143, "appendFormat:", @"%d:%d_", 0, v149);
    [v142 setConstantValue:__p type:41 atIndex:0];
    uint64_t v150 = *(unsigned int *)(a1 + 592);
    LOWORD(__p[0]) = *(_DWORD *)(a1 + 592);
    objc_msgSend(v212, "appendFormat:", @"%d:%d_", 1, v150);
    [v142 setConstantValue:__p type:41 atIndex:1];
    unint64_t v151 = ((v145 * v144 * v148 + v145 * v144 * v148 * ((v146 - 1) / (v147 * v148))) * v149);
    uint64_t v152 = (v151 - 1);
    if (v151 == 1)
    {
      uint64_t v153 = 0xFFFFFFFFLL;
      unint64_t v154 = 0xFFFFFFFFLL;
    }
    else
    {
      unsigned int v155 = __clz(v152);
      uint64_t v152 = 31 - v155;
      uint64_t v153 = (((1 << (v155 ^ 0x3F)) + (unint64_t)v151 - 1) / v151) - 1;
      unint64_t v154 = __PAIR64__(v152, v153);
    }
    int v11 = v201;
    __p[0] = (void *)v154;
    objc_msgSend(v212, "appendFormat:", @"%d:%d_%d_", 2, v153, v152);
    [v142 setConstantValue:__p type:34 atIndex:2];
    id v156 = v212;
    uint64_t v157 = objc_msgSend(*(id *)(v141 + 160), "kernelForFunction:cacheString:withConstants:", "v9_dequantize_range", objc_msgSend(v156, "UTF8String"), v142);
    uint64_t v158 = (void *)v157;
    if (*(unsigned char *)(a1 + 596))
    {
      uint64_t v160 = objc_msgSend(*(id *)(v141 + 160), "kernelForFunction:cacheString:withConstants:", "v9_dequantize_range_nkfirst", objc_msgSend(v156, "UTF8String"), v142);

      uint64_t v159 = (void *)v160;
    }
    else
    {
      uint64_t v159 = (void *)v157;
    }
    [v140 setComputePipelineState:v159];
    if (!*(void *)(a1 + 776))
    {
      uint64_t v197 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v197, "Inconsistent state");
      __cxa_throw(v197, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v161 = *(_DWORD *)(a1 + 344);
    uint64_t v9 = v200;
    [v140 setBuffer:*(void *)(a1 + 624) offset:0 atIndex:0];
    [v140 setBuffer:*(void *)(a1 + 640) offset:0 atIndex:1];
    [v140 setBuffer:*(void *)(a1 + 776) offset:0 atIndex:2];
    int v162 = v151 + v151 * ((v161 - 1) / *(_DWORD *)(a1 + 560));
    LODWORD(__p[0]) = *(_DWORD *)(a1 + 560);
    HIDWORD(__p[0]) = v162;
    __p[1] = (void *)__PAIR64__(*(_DWORD *)(a1 + 344), v151);
    int v163 = *(_DWORD *)(a1 + 348);
    int v164 = *(_DWORD *)(a1 + 420);
    int v165 = v163 - 1;
    if (v164 < 1) {
      int v164 = 1;
    }
    else {
      int v163 = v165 / v164 + 1;
    }
    int v166 = *(_DWORD *)(a1 + 592) + *(_DWORD *)(a1 + 592) * (v165 / (*(_DWORD *)(a1 + 592) * v164));
    DWORD1(v222) = *(_DWORD *)(a1 + 592);
    DWORD2(v222) = v166;
    LODWORD(v222) = v163;
    if ((v162 & 3) != 0)
    {
      v198 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v198, "tot parameters % 4 == 0 for quantized conv");
      __cxa_throw(v198, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    [v140 setBytes:__p length:28 atIndex:3];
    int v167 = HIDWORD(__p[0]) + 510;
    if (SHIDWORD(__p[0]) >= 1) {
      int v167 = HIDWORD(__p[0]) - 1;
    }
    v232.__r_.__value_.__r.__words[0] = (v167 >> 9) + 1;
    *(int64x2_t *)&v232.__r_.__value_.__r.__words[1] = vdupq_n_s64(1uLL);
    *(_OWORD *)&v231.__r_.__value_.__l.__data_ = xmmword_192DCA420;
    v231.__r_.__value_.__r.__words[2] = 1;
    [v140 dispatchThreadgroups:&v232 threadsPerThreadgroup:&v231];

    uint64_t v71 = v210;
  }

  if (*((unsigned char *)v219 + 64))
  {
    id v168 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      id v168 = (void *)*v168;
    }
    v169 = [NSString stringWithUTF8String:v168];
    [v140 setLabel:v169];
  }
  [v140 setComputePipelineState:*(void *)(a1 + 608)];
  int v170 = *(_DWORD *)(a1 + 728);
  int v171 = *(_DWORD *)(a1 + 732);
  uint64_t v172 = *(int *)(a1 + 736);
  unint64_t v173 = [*(id *)(a1 + 608) maxTotalThreadsPerThreadgroup];
  uint64_t v174 = v171 * (uint64_t)v170;
  int v175 = v174 * v172;
  if (v173 < v174 * v172)
  {
    v188 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v225, v175);
    v189 = std::string::insert(&v225, 0, "max number of threadgroups ");
    long long v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
    v231.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v190;
    v189->__r_.__value_.__l.__size_ = 0;
    v189->__r_.__value_.__r.__words[2] = 0;
    v189->__r_.__value_.__r.__words[0] = 0;
    v191 = std::string::append(&v231, "/");
    long long v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
    v232.__r_.__value_.__r.__words[2] = v191->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v192;
    v191->__r_.__value_.__l.__size_ = 0;
    v191->__r_.__value_.__r.__words[2] = 0;
    v191->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v224, [*(id *)(a1 + 608) maxTotalThreadsPerThreadgroup]);
    if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v193 = &v224;
    }
    else {
      uint64_t v193 = (std::string *)v224.__r_.__value_.__r.__words[0];
    }
    if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v224.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v224.__r_.__value_.__l.__size_;
    }
    int v195 = std::string::append(&v232, (const std::string::value_type *)v193, size);
    long long v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
    *(void *)&long long v222 = *((void *)&v195->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v196;
    v195->__r_.__value_.__l.__size_ = 0;
    v195->__r_.__value_.__r.__words[2] = 0;
    v195->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v188, (const std::string *)__p);
    __cxa_throw(v188, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  [v140 setBuffer:v216 offset:0 atIndex:0];
  [v140 setBuffer:v215 offset:0 atIndex:1];
  [v140 setBytes:&v226 length:48 atIndex:2];
  if (!*(_DWORD *)(a1 + 588)) {
    [v140 setTexture:v71 atIndex:0];
  }
  if ((*(unsigned char *)(a1 + 596) & 2) != 0)
  {
    uint64_t v176 = *(void *)(a1 + 632);
    if (!v176)
    {
      uint64_t v199 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v199, "w texture not created");
      __cxa_throw(v199, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    [v140 setTexture:v176 atIndex:1];
  }
  uint64_t v177 = *(void *)(a1 + 776);
  if (v177) {
    [v140 setBuffer:v177 offset:0 atIndex:3];
  }
  else {
    [v140 setBuffer:*(void *)(a1 + 624) offset:0 atIndex:3];
  }
  [v140 setBuffer:*(void *)(a1 + 648) offset:0 atIndex:4];
  int v178 = *(_DWORD *)(a1 + 656);
  if (v178 >= 2)
  {
    int v182 = 0;
    do
    {
      long long v222 = v227;
      long long v223 = v228;
      *(_OWORD *)std::string __p = v226;
      int v183 = (unsigned __int16)((WORD5(v226) - 1) / *(_DWORD *)(a1 + 592) + 1) / v178;
      WORD2(v223) = v183 * v182++;
      WORD3(v223) = v183 * v182;
      [v140 setBytes:__p length:48 atIndex:2];
      v232.__r_.__value_.__r.__words[0] = (v213 - 1) / (v202 * v206) + 1;
      v232.__r_.__value_.__l.__size_ = (v214 - 1) / (v204 * v207) + 1;
      v232.__r_.__value_.__r.__words[2] = (v208 + v208 * (v209 >> 2) - 1) / (v205 * (v203 >> 2)) + 1;
      std::string::size_type v184 = *(int *)(a1 + 736);
      uint64_t v185 = *(void *)(a1 + 728);
      *(void *)&long long v186 = (int)v185;
      *((void *)&v186 + 1) = SHIDWORD(v185);
      *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v186;
      v231.__r_.__value_.__r.__words[2] = v184;
      [v140 dispatchThreadgroups:&v232 threadsPerThreadgroup:&v231];
      int v178 = *(_DWORD *)(a1 + 656);
    }
    while (v182 < v178);
  }
  else
  {
    __p[0] = (void *)((v213 - 1) / (v202 * v206) + 1);
    __p[1] = (void *)((v214 - 1) / (v204 * v207) + 1);
    *(void *)&long long v222 = (v208 + v208 * (v209 >> 2) - 1) / (v205 * (v203 >> 2)) + 1;
    std::string::size_type v179 = *(int *)(a1 + 736);
    uint64_t v180 = *(void *)(a1 + 728);
    *(void *)&long long v181 = (int)v180;
    *((void *)&v181 + 1) = SHIDWORD(v180);
    *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v181;
    v232.__r_.__value_.__r.__words[2] = v179;
    [v140 dispatchThreadgroups:__p threadsPerThreadgroup:&v232];
  }

  if ((void)v229)
  {
    *((void *)&v229 + 1) = v229;
    operator delete((void *)v229);
  }

  if (v217) {
    nitro::nitro_function::nitro_function(v217);
  }
  if (v218)
  {
    nitro::nitro_function::nitro_function(v218);

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v220);
    nitro::nitro_function::nitro_function(v218);
    if (!v217) {
      goto LABEL_284;
    }
    goto LABEL_283;
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v220);
  if (v217) {
LABEL_283:
  }
    nitro::nitro_function::nitro_function(v217);
LABEL_284:
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1929ECE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23,std::__shared_weak_count *a24,std::__shared_weak_count *a25,uint64_t a26,id a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (*(char *)(v51 - 89) < 0) {
    operator delete(*(void **)(v51 - 112));
  }
  if (*(char *)(v51 - 121) < 0) {
    operator delete(*(void **)(v51 - 144));
  }
  if (a49 < 0)
  {
    operator delete(a44);
    if ((v50 & 1) == 0)
    {
LABEL_14:

      int v53 = *(void **)(v51 - 176);
      if (v53)
      {
        *(void *)(v51 - 168) = v53;
        operator delete(v53);
      }

      if (a24) {
        nitro::nitro_function::nitro_function(a24);
      }
      if (a25) {
        nitro::nitro_function::nitro_function(a25);
      }

      Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a27);
      if (a25) {
        nitro::nitro_function::nitro_function(a25);
      }
      if (a24) {
        nitro::nitro_function::nitro_function(a24);
      }
      if (a13) {
        nitro::nitro_function::nitro_function(a13);
      }
      if (a12) {
        nitro::nitro_function::nitro_function(a12);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v50)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v49);
  goto LABEL_14;
}

uint64_t Espresso::V9Engine::v9_conv_kernel::setup_for_tune(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = *(const void **)(a1 + 8);
  if (v8)
  {
    if (v9)
    {
      uint64_t v10 = *(std::__shared_weak_count **)(a1 + 16);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  int v11 = *(_DWORD *)(a1 + 420);
  if (v11 >= 2) {
    char v12 = *(_DWORD *)(a1 + 344) / v11;
  }
  else {
    char v12 = *(_DWORD *)(a1 + 344);
  }
  if (v11 >= 2) {
    int v13 = *(_DWORD *)(a1 + 420);
  }
  else {
    int v13 = 1;
  }
  int v14 = *(_DWORD *)(a1 + 348);
  int v15 = [v9[18] supportsFeatureSet:11];
  if (v15)
  {
    *(void *)(a1 + 564) = 0x100000003;
    int v16 = *(_DWORD *)(a1 + 348);
    int v17 = *(_DWORD *)(a1 + 420);
    if (v17 < 2)
    {
      if (v16 >= 16)
      {
        int v17 = 1;
LABEL_25:
        if (v16 / v17 > 128)
        {
LABEL_28:
          int v18 = 4;
LABEL_29:
          *(_DWORD *)(a1 + 560) = v18;
          goto LABEL_30;
        }
        int v19 = 3;
LABEL_27:
        *(_DWORD *)(a1 + 568) = 2;
        *(_DWORD *)(a1 + 564) = v19;
        goto LABEL_28;
      }
    }
    else if (v16 / v17 >= 16)
    {
      goto LABEL_25;
    }
    int v19 = 2;
    goto LABEL_27;
  }
  if (([v9[18] supportsFeatureSet:4] & 1) != 0
    || [v9[18] supportsFeatureSet:1])
  {
    *(void *)(a1 + 564) = 0x100000002;
    if ((v12 & 7) != 0) {
      int v18 = 4;
    }
    else {
      int v18 = 8;
    }
    goto LABEL_29;
  }
  if ([v9[18] supportsFeatureSet:1])
  {
    if (*(int *)(a1 + 560) < 9 || *(_DWORD *)(a1 + 564) * *(_DWORD *)(a1 + 568) < 3) {
      goto LABEL_30;
    }
    int v18 = 8;
    goto LABEL_29;
  }
  *(_DWORD *)(a1 + 568) = 2;
  *(void *)(a1 + 560) = 0x200000004;
LABEL_30:
  if (((v14 / v13) & 7) != 0) {
    int v20 = 4;
  }
  else {
    int v20 = 8;
  }
  *(_DWORD *)(a1 + 592) = v20;
  *(void *)(a1 + 728) = 0;
  *(_DWORD *)(a1 + 736) = 0;
  int v21 = *(_DWORD **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 < 0x1DuLL)
  {
    std::vector<int>::resize((std::vector<int> *)a2, 8uLL);
    int v21 = *(_DWORD **)a2;
    _DWORD *v21 = *(_DWORD *)(a1 + 568);
    v21[1] = *(_DWORD *)(a1 + 564);
    v21[2] = *(_DWORD *)(a1 + 560);
    uint64_t v21[3] = *(_DWORD *)(a1 + 592);
    v21[4] = *(_DWORD *)(a1 + 728);
    v21[5] = *(_DWORD *)(a1 + 732);
    v21[6] = *(_DWORD *)(a1 + 736);
    v21[7] = *(_DWORD *)(a1 + 596);
    unsigned int v22 = *(_DWORD *)(a1 + 592);
  }
  else
  {
    *(_DWORD *)(a1 + 568) = *v21;
    *(_DWORD *)(a1 + 564) = v21[1];
    *(_DWORD *)(a1 + 560) = v21[2];
    unsigned int v22 = v21[3];
    *(_DWORD *)(a1 + 592) = v22;
    *(_DWORD *)(a1 + 728) = v21[4];
    *(_DWORD *)(a1 + 732) = v21[5];
    *(_DWORD *)(a1 + 736) = v21[6];
    *(_DWORD *)(a1 + 596) = v21[7];
  }
  if (v22 <= 0x10 && ((1 << v22) & 0x10110) != 0) {
    int v23 = 0;
  }
  else {
    int v23 = 2;
  }
  *(_DWORD *)(a1 + 588) = v23;
  if (!*(_DWORD *)(a1 + 736))
  {
    if (v15)
    {
      *(void *)(a1 + 728) = 0x200000002;
      *(_DWORD *)(a1 + 736) = 1;
      int v24 = (*(_DWORD *)(a1 + 344) - 1) / *(_DWORD *)(a1 + 560) + 1;
      if ((v24 & 1) == 0)
      {
        if ((v24 & 3) != 0) {
          int v25 = 2;
        }
        else {
          int v25 = 4;
        }
        if ((v24 & 7) != 0) {
          int v26 = v25;
        }
        else {
          int v26 = 8;
        }
        *(_DWORD *)(a1 + 736) = v26;
      }
      int v27 = a4 % (4 * *(_DWORD *)(a1 + 564));
      if ((float)((float)(a3 % (4 * *(_DWORD *)(a1 + 568))) / (float)a3) >= 0.05) {
        int v28 = 2;
      }
      else {
        int v28 = 4;
      }
      *(_DWORD *)(a1 + 728) = v28;
      if ((float)((float)v27 / (float)a4) >= 0.05) {
        int v29 = 2;
      }
      else {
        int v29 = 4;
      }
      *(_DWORD *)(a1 + 732) = v29;
    }
    else
    {
      *(_DWORD *)(a1 + 736) = 1;
      int v30 = (*(_DWORD *)(a1 + 344) - 1) / *(_DWORD *)(a1 + 560) + 1;
      int v31 = *(_DWORD *)(a1 + 568);
      char v32 = (float)((float)(a3 % (2 * v31)) / (float)a3) < 0.01;
      int v33 = *(_DWORD *)(a1 + 564);
      if ((float)((float)(a3 % (2 * v31)) / (float)a3) >= 0.01) {
        int v34 = 1;
      }
      else {
        int v34 = 2;
      }
      if ((float)((float)(a4 % (2 * v33)) / (float)a4) >= 0.01) {
        int v35 = 1;
      }
      else {
        int v35 = 2;
      }
      double v36 = (float)((float)(a3 % (4 * v31)) / (float)a3);
      if ((float)((float)(a4 % (4 * v33)) / (float)a4) >= 0.01) {
        int v37 = v35;
      }
      else {
        int v37 = 4;
      }
      if (v36 < 0.01) {
        int v34 = 4;
      }
      *(_DWORD *)(a1 + 728) = v34;
      *(_DWORD *)(a1 + 732) = v37;
      if (v36 < 0.01) {
        char v32 = 2;
      }
      unsigned int v38 = v37 << v32;
      BOOL v40 = (v30 & 3) == 0 && v38 < 9;
      BOOL v41 = (v30 & 7) != 0 || v38 >= 5;
      int v42 = !v41;
      if (!v41 || (v30 & 1) == 0 || v40)
      {
        if (v40) {
          int v43 = 4;
        }
        else {
          int v43 = 2;
        }
        if (v42) {
          int v43 = 8;
        }
        *(_DWORD *)(a1 + 736) = v43;
      }
    }
  }
  size_t v44 = *(void *)(a2 + 8) - (void)v21;
  id v45 = *(const void **)(a1 + 200);
  if (v44 == *(void *)(a1 + 208) - (void)v45 && !memcmp(v21, v45, v44))
  {
    uint64_t v47 = 0;
    if (!v10) {
      return v47;
    }
    goto LABEL_97;
  }
  uint64_t v46 = *(void **)(a1 + 608);
  *(void *)(a1 + 608) = 0;

  if (a1 + 200 != a2) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a1 + 200), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  uint64_t v47 = 1;
  if (v10) {
LABEL_97:
  }
    nitro::nitro_function::nitro_function(v10);
  return v47;
}

void sub_1929ED6FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::V9Engine::v9_conv_kernel::~v9_conv_kernel(Espresso::V9Engine::v9_conv_kernel *this)
{
  Espresso::V9Engine::v9_conv_kernel::~v9_conv_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EE36FBD8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  uint64_t v3 = (void *)*((void *)this + 93);
  if (v3)
  {
    *((void *)this + 94) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 90);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 88);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 86);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 84);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

uint64_t Espresso::V9Engine::v9_conv_kernel::v9_conv_kernel(uint64_t a1, uint64_t *a2, _DWORD *a3, long long *a4)
{
  uint64_t v8 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights((void *)a1, a2);
  v8[69] = 0;
  *(_OWORD *)(v8 + 65) = 0u;
  *(_OWORD *)(v8 + 67) = 0u;
  *(_OWORD *)(v8 + 61) = 0u;
  *(_OWORD *)(v8 + 63) = 0u;
  *uint64_t v8 = &unk_1EE36FBD8;
  uint64_t v9 = v8 + 70;
  *((_OWORD *)v8 + std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)this + 35) = 0u;
  *((_OWORD *)v8 + 36) = 0u;
  *(_OWORD *)((char *)v8 + 588) = 0u;
  *((_OWORD *)v8 + 38) = 0u;
  *((_OWORD *)v8 + 39) = 0u;
  *((_OWORD *)v8 + 40) = 0u;
  *((_DWORD *)v8 + 164) = 0;
  *(_OWORD *)(v8 + 83) = 0u;
  *(_OWORD *)(v8 + 85) = 0u;
  *(_OWORD *)(v8 + 87) = 0u;
  *(_OWORD *)(v8 + 89) = 0u;
  v8[91] = 0x400000004;
  *((_DWORD *)v8 + 184) = 4;
  v8[97] = 0;
  *((unsigned char *)v8 + 768) = 0;
  v8[95] = 0;
  *(_OWORD *)(v8 + 93) = 0u;
  *((unsigned char *)v8 + 784) = 1;
  v8[101] = 0;
  *(_OWORD *)(v8 + 99) = 0u;
  *((_DWORD *)v8 + 165) = *a3;
  long long v10 = *a4;
  long long v11 = a4[2];
  *((_OWORD *)v8 + 20) = a4[1];
  *((_OWORD *)v8 + 21) = v11;
  *((_OWORD *)v8 + 19) = v10;
  long long v12 = a4[3];
  long long v13 = a4[4];
  long long v14 = a4[6];
  *((_OWORD *)v8 + 24) = a4[5];
  *((_OWORD *)v8 + 25) = v14;
  *((_OWORD *)v8 + 22) = v12;
  *((_OWORD *)v8 + 23) = v13;
  long long v15 = a4[7];
  long long v16 = a4[8];
  long long v17 = a4[9];
  *(void *)((char *)v8 + 461) = *(void *)((char *)a4 + 157);
  *((_OWORD *)v8 + 27) = v16;
  *((_OWORD *)v8 + 28) = v17;
  *((_OWORD *)v8 + 26) = v15;
  int v18 = (_DWORD *)*a2;
  if (*a2
  {
    int v19 = (std::__shared_weak_count *)a2[1];
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v19 = 0;
  }
  *(void *)((char *)v9 + 12) = 0;
  *(void *)((char *)v9 + 36) = 0x2000000001;
  if (*((_DWORD *)a4 + 36) || v18[17]) {
    *(_DWORD *)(a1 + 600) = 16;
  }
  std::string __p = 0;
  char v32 = 0;
  uint64_t v33 = 0;
  Espresso::V9Engine::v9_conv_kernel::setup_for_tune(a1, (uint64_t)&__p, 1024, 1024);
  int v20 = *(_DWORD *)(a1 + 348);
  int v21 = *(_DWORD *)(a1 + 420);
  int v22 = *(_DWORD *)(a1 + 592);
  if (v22 <= *(_DWORD *)(a1 + 560)) {
    int v22 = *(_DWORD *)(a1 + 560);
  }
  if (v21 <= 1) {
    int v21 = 1;
  }
  int v23 = (v20 - 1) / v21 / v22 + 1;
  int v24 = *(_DWORD *)(a1 + 356) * *(_DWORD *)(a1 + 352);
  int v25 = v23 * v24;
  if (v24 >= 3) {
    int v26 = 200;
  }
  else {
    int v26 = 100;
  }
  if (v25 <= v26)
  {
    int v27 = 0;
  }
  else
  {
    int v27 = 0;
    int v28 = v25 >> 1;
    if (v25 >> 1 >= 0x40) {
      int v28 = 64;
    }
    int v29 = 1;
    while (1)
    {
      if (!(v23 % v29))
      {
        int v27 = v29;
        if (v25 / v29 < v26) {
          break;
        }
      }
      if (v28 == ++v29) {
        goto LABEL_26;
      }
    }
    int v27 = v29;
LABEL_26:
    if (v27 >= 2 && v20 / v21 % (v27 * v22)) {
      int v27 = 1;
    }
  }
  *(_DWORD *)(a1 + 656) = v27;
  if (__p)
  {
    char v32 = __p;
    operator delete(__p);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  return a1;
}

void sub_1929EDAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  long long v14 = *(std::__shared_weak_count **)(v11 + 800);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }

  long long v15 = *(void **)(v11 + 744);
  if (v15)
  {
    *(void *)(v11 + 752) = v15;
    operator delete(v15);
  }
  long long v16 = *(std::__shared_weak_count **)(v11 + 720);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  long long v17 = *(std::__shared_weak_count **)(v11 + 704);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  int v18 = *(std::__shared_weak_count **)(v11 + 688);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  int v19 = *(std::__shared_weak_count **)(v11 + 672);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)v11);
  _Unwind_Resume(a1);
}

void *Espresso::dataset_estimator::dataset_estimator(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *uint64_t result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  result[3] = 0;
  result[2] = result + 3;
  result[6] = 0;
  result[4] = 0;
  result[5] = result + 6;
  result[10] = 0;
  result[9] = 0;
  result[7] = 0;
  result[8] = result + 9;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = a2[1];
  *uint64_t result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  result[3] = 0;
  result[2] = result + 3;
  result[6] = 0;
  result[4] = 0;
  result[5] = result + 6;
  result[10] = 0;
  result[9] = 0;
  result[7] = 0;
  result[8] = result + 9;
  return result;
}

void Espresso::dataset_estimator::statistics_entry_t::compute_single(Espresso::dataset_estimator::statistics_entry_t *this@<X0>, float *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v5 = (int)a2;
  uint64_t __StandardDeviation = 0;
  uint64_t __C = 0;
  vDSP_Length v8 = (int)a2;
  float v31 = 0.0;
  vDSP_minv((const float *)this, 1, (float *)&__C + 1, (int)a2);
  vDSP_maxv((const float *)this, 1, (float *)&__C, v8);
  vDSP_normalize((const float *)this, 1, 0, 1, (float *)&__StandardDeviation + 1, (float *)&__StandardDeviation, v8);
  vDSP_svesq((const float *)this, 1, &v31, v8);
  float v31 = v31 / (float)v5;
  float v9 = v31;
  *(_DWORD *)(a4 + 48) = -1082130432;
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 72) = 0;
  *(void *)(a4 + 56) = 0;
  *(unsigned char *)(a4 + 80) = 0;
  double v10 = *(float *)&__C;
  *(double *)a4 = *((float *)&__C + 1);
  *(double *)(a4 + 8) = v10;
  double v11 = *(float *)&__StandardDeviation;
  *(double *)(a4 + 16) = *((float *)&__StandardDeviation + 1);
  *(double *)(a4 + 24) = v11;
  *(double *)(a4 + 32) = v9;
  *(void *)(a4 + 40) = 1;
  if (a3)
  {
    if (v5)
    {
      if (*(float *)this >= 0.0)
      {
        vDSP_Length v13 = 0;
        while (v8 - 1 != v13)
        {
          float v14 = *((float *)this + ++v13);
          if (v14 < 0.0) {
            goto LABEL_11;
          }
        }
        vDSP_Length v13 = v8;
LABEL_11:
        BOOL v12 = v13 < v8;
      }
      else
      {
        BOOL v12 = 1;
      }
    }
    else
    {
      BOOL v12 = 0;
    }
    uint64_t v34 = 0;
    vDSP_minv((const float *)this, 1, (float *)&v34 + 1, v8);
    vDSP_maxv((const float *)this, 1, (float *)&v34, v8);
    float v15 = 1.0;
    if (vabds_f32(*(float *)&v34, *((float *)&v34 + 1)) >= 0.0000001)
    {
      if (*((float *)&v34 + 1) >= *(float *)&v34) {
        float v16 = *((float *)&v34 + 1);
      }
      else {
        float v16 = *(float *)&v34;
      }
      float v17 = 255.0 / v16;
      float v18 = fabsf(-128.0 / *((float *)&v34 + 1));
      float v19 = fabsf(127.0 / *(float *)&v34);
      if (v19 >= v18) {
        float v19 = v18;
      }
      float v20 = v12 ? v19 : v17;
      float v21 = v20 * 0.25;
      float v15 = -1.0;
      if ((float)(v20 * 0.25) <= (float)(v20 * 1.75))
      {
        float v22 = 3.4028e38;
        while (1)
        {
          __B[0] = v21;
          LODWORD(v37) = 0;
          std::vector<float>::vector(v42, v8, &v37);
          int v23 = v42[0];
          float v40 = 255.0;
          float v41 = 0.0;
          if (v12)
          {
            float v40 = 127.0;
            float v41 = -128.0;
          }
          vDSP_vsmul((const float *)this, 1, __B, v42[0], 1, v8);
          vDSP_vclip(v23, 1, &v41, &v40, v23, 1, v8);
          if (v12) {
            break;
          }
          LOBYTE(v36) = 0;
          std::vector<unsigned char>::vector(&v37, v8, &v36);
          int v27 = v37;
          vDSP_vfixru8(v23, 1, v37, 1, v8);
          vDSP_vfltu8(v27, 1, v23, 1, v8);
          int v28 = v37;
          if (v37)
          {
            unsigned int v38 = v37;
LABEL_36:
            operator delete(v28);
          }
LABEL_37:
          vDSP_vsdiv(v23, 1, __B, v23, 1, v8);
          vDSP_vsub(v23, 1, (const float *)this, 1, v23, 1, v8);
          vDSP_vabs(v23, 1, v23, 1, v8);
          float v36 = 0.0;
          LODWORD(v37) = 0;
          vDSP_normalize(v23, 1, 0, 1, (float *)&v37, &v36, v8);
          vDSP_vabs((const float *)this, 1, v23, 1, v8);
          float __Mean = 0.0;
          vDSP_normalize(v23, 1, 0, 1, &__Mean, &v36, v8);
          float v29 = *(float *)&v37;
          float v30 = __Mean;
          if (v42[0])
          {
            v42[1] = v42[0];
            operator delete(v42[0]);
          }
          if ((float)(v29 / v30) < v22)
          {
            float v15 = v21;
            float v22 = v29 / v30;
          }
          float v21 = v21 + (float)(v20 * 0.001);
          if (v21 > (float)(v20 * 1.75)) {
            goto LABEL_42;
          }
        }
        int v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        if (v5)
        {
          if (v5 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int v24 = (char *)operator new(v8);
          int v25 = v24;
          uint64_t v26 = 0;
          do
            v24[v26++] = 0;
          while (v8 != v26);
        }
        else
        {
          int v25 = 0;
        }
        vDSP_vfixr8(v23, 1, v25, 1, v8);
        vDSP_vflt8(v25, 1, v23, 1, v8);
        if (!v25) {
          goto LABEL_37;
        }
        int v28 = (unsigned __int8 *)v25;
        goto LABEL_36;
      }
    }
LABEL_42:
    *(float *)(a4 + 48) = v15;
  }
}

void sub_1929EE084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1929EE154(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::dataset_estimator::statistics_entry_t::iterative_grow_with_scalar(int8x16_t *this, float a2, __int8 a3)
{
  float v7 = a2;
  this[5].i8[0] = a3;
  Espresso::dataset_estimator::statistics_entry_t::compute_single((Espresso::dataset_estimator::statistics_entry_t *)&v7, (float *)1, 0, (uint64_t)v4);
  Espresso::dataset_estimator::statistics_entry_t::iterative_grow(this, v4, 0.0);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_1929EE1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::dataset_estimator::statistics_entry_t::iterative_grow(int8x16_t *this, int8x16_t *a2, float a3)
{
  if (a2[2].i64[1] != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "iterative_grow can only be used with b.n_samples==1");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (this[2].i64[1])
  {
    if (this[5].i8[0])
    {
      uint64_t v6 = (int *)a2[3].i64[1];
      float v7 = (int *)a2[4].i64[0];
      if (v6 == v7)
      {
        BOOL v22 = 1;
        float v21 = (int *)a2[3].i64[1];
      }
      else
      {
        uint64_t v8 = (void **)&this[3].i64[1];
        float v9 = (char *)this[4].i64[0];
        do
        {
          int v10 = *v6;
          unint64_t v11 = this[4].u64[1];
          if ((unint64_t)v9 >= v11)
          {
            vDSP_Length v13 = (char *)*v8;
            uint64_t v14 = (v9 - (unsigned char *)*v8) >> 2;
            unint64_t v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 62) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v16 = v11 - (void)v13;
            if (v16 >> 1 > v15) {
              unint64_t v15 = v16 >> 1;
            }
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v17 = v15;
            }
            if (v17)
            {
              unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
              vDSP_Length v13 = (char *)this[3].i64[1];
              float v9 = (char *)this[4].i64[0];
            }
            else
            {
              uint64_t v18 = 0;
            }
            float v19 = (_DWORD *)(v17 + 4 * v14);
            _DWORD *v19 = v10;
            BOOL v12 = (char *)(v19 + 1);
            while (v9 != v13)
            {
              int v20 = *((_DWORD *)v9 - 1);
              v9 -= 4;
              *--float v19 = v20;
            }
            this[3].i64[1] = (uint64_t)v19;
            this[4].i64[0] = (uint64_t)v12;
            this[4].i64[1] = v17 + 4 * v18;
            if (v13) {
              operator delete(v13);
            }
          }
          else
          {
            *(_DWORD *)float v9 = v10;
            BOOL v12 = v9 + 4;
          }
          this[4].i64[0] = (uint64_t)v12;
          ++v6;
          float v9 = v12;
        }
        while (v6 != v7);
        uint64_t v6 = (int *)a2[3].i64[1];
        float v21 = (int *)a2[4].i64[0];
        BOOL v22 = a2[2].i64[1] == 1;
      }
      if (v21 == v6 && v22)
      {
        float v26 = *(double *)a2[1].i64;
        int v27 = (float *)this[4].i64[0];
        unint64_t v28 = this[4].u64[1];
        if ((unint64_t)v27 >= v28)
        {
          float v30 = (float *)this[3].i64[1];
          uint64_t v31 = v27 - v30;
          if ((unint64_t)(v31 + 1) >> 62) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v32 = v28 - (void)v30;
          unint64_t v33 = (uint64_t)(v28 - (void)v30) >> 1;
          if (v33 <= v31 + 1) {
            unint64_t v33 = v31 + 1;
          }
          BOOL v34 = v32 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v34) {
            unint64_t v35 = v33;
          }
          if (v35)
          {
            unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v35);
            float v30 = (float *)this[3].i64[1];
            int v27 = (float *)this[4].i64[0];
          }
          else
          {
            uint64_t v36 = 0;
          }
          int v37 = (float *)(v35 + 4 * v31);
          unint64_t v38 = v35 + 4 * v36;
          float *v37 = v26;
          float v29 = v37 + 1;
          while (v27 != v30)
          {
            int v39 = *((_DWORD *)v27-- - 1);
            *((_DWORD *)v37-- - 1) = v39;
          }
          this[3].i64[1] = (uint64_t)v37;
          this[4].i64[0] = (uint64_t)v29;
          this[4].i64[1] = v38;
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          float *v27 = v26;
          float v29 = v27 + 1;
        }
        this[4].i64[0] = (uint64_t)v29;
      }
    }
    float64x2_t v40 = *(float64x2_t *)this;
    *(void *)&v41.f64[0] = a2->i64[0];
    *(void *)&v41.f64[1] = this->i64[1];
    *(void *)&v42.f64[0] = this->i64[0];
    *(void *)&v42.f64[1] = a2->i64[1];
    float64x2_t v43 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v42, v41), *a2, *this);
    unint64_t v44 = this[2].u64[1];
    if (!v44)
    {
      *this = (int8x16_t)v43;
      float64x2_t v40 = v43;
    }
    *(float64x2_t *)this = vmlaq_n_f64(vmulq_n_f64(v43, 1.0 - a3), v40, a3);
    double v45 = 1.0 / ((double)v44 + 1.0);
    double v46 = *(double *)this[1].i64 + v45 * (*(double *)a2[1].i64 - *(double *)this[1].i64);
    double v47 = *(double *)this[2].i64 + v45 * (*(double *)a2[2].i64 - *(double *)this[2].i64);
    *(double *)this[2].i64 = v47;
    double v48 = v47 - v46 * v46;
    double v49 = sqrt(v48);
    BOOL v50 = v48 < 0.0;
    double v51 = 0.0;
    if (!v50) {
      double v51 = v49;
    }
    *(double *)this[1].i64 = v46;
    *(double *)&this[1].i64[1] = v51;
    float v52 = *(float *)a2[3].i32;
    if (v52 >= 0.0)
    {
      float v53 = *(float *)this[3].i32;
      if (v53 != -1.0) {
        float v52 = v53 + v45 * (float)(v52 - v53);
      }
      *(float *)this[3].i32 = v52;
    }
    this[2].i64[1] = v44 + 1;
  }
  else
  {
    int8x16_t v23 = *a2;
    int8x16_t v24 = a2[1];
    int8x16_t v25 = a2[2];
    this[3].i32[0] = a2[3].i32[0];
    this[1] = v24;
    this[2] = v25;
    *this = v23;
    if (this != a2) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&this[3].i8[8], (char *)a2[3].i64[1], a2[4].i64[0], (a2[4].i64[0] - a2[3].i64[1]) >> 2);
    }
    this[5].i8[0] = a2[5].i8[0];
  }
}

void sub_1929EE54C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float Espresso::dataset_estimator::statistics_entry_t::compute_percentile(Espresso::dataset_estimator::statistics_entry_t *this, float a2)
{
  uint64_t v2 = (const void *)*((void *)this + 7);
  uint64_t v3 = *((void *)this + 8);
  if ((const void *)v3 == v2) {
    return NAN;
  }
  unint64_t v11 = 0;
  BOOL v12 = 0;
  uint64_t v13 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v11, v2, v3, (v3 - (uint64_t)v2) >> 2);
  std::__sort<std::__less<float,float> &,float *>();
  float v5 = 0.0;
  if (a2 >= 0.0) {
    float v5 = a2;
  }
  unint64_t v6 = v12 - v11;
  double v7 = v5 / 100.0 * (double)v6 + 0.5;
  if (v6 <= (unint64_t)v7) {
    unint64_t v8 = v6 - 1;
  }
  else {
    unint64_t v8 = (unint64_t)v7;
  }
  float v9 = *(float *)&v11[v8];
  BOOL v12 = v11;
  operator delete(v11);
  return v9;
}

void sub_1929EE61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::dataset_estimator::sample_stats_with_current_network_state(uint64_t **a1, uint64_t a2)
{
  void (***v7)(uint64_t *__return_ptr, void);
  void v8[6];
  std::string __p;
  __n128 (*v10)(void *, uint64_t);
  std::__shared_weak_count *v11;
  const char *v12;
  void **v13;
  void *v14[2];
  void v15[3];
  std::string *p_p;

  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[19];
  if (v5)
  {
    do
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, (long long *)(v5 + 16));
      p_p = &__p;
      unint64_t v6 = std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 5, &__p, (long long **)&p_p);
      std::vector<Espresso::dataset_estimator::statistics_entry_t>::resize(v6 + 7, *((int *)v10 + 4));
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v5 = *(void *)v5;
    }
    while (v5);
    uint64_t v4 = *a1;
  }
  __p.__r_.__value_.__r.__words[0] = 0;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
  __p.__r_.__value_.__r.__words[2] = 0x6012000000;
  int v10 = __Block_byref_object_copy__13774;
  unint64_t v11 = (std::__shared_weak_count *)__Block_byref_object_dispose__13775;
  BOOL v12 = "";
  v14[1] = 0;
  memset(v15, 0, sizeof(v15));
  uint64_t v13 = v14;
  v14[0] = 0;
  double v7 = (void (***)(uint64_t *__return_ptr, void))v4[2];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___ZN8Espresso17dataset_estimator39sample_stats_with_current_network_stateERKNS0_9options_tE_block_invoke;
  v8[3] = &unk_1E5747560;
  v8[4] = &__p;
  v8[5] = a1;
  Espresso::abstract_context::compute_batch_sync(v7, v8);
  Espresso::dataset_estimator::sample_stats_with_blobs((uint64_t)a1, __p.__r_.__value_.__l.__size_ + 48, a2);
  _Block_object_dispose(&__p, 8);
  p_p = (std::string *)v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v14[0]);
}

void sub_1929EE7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  Espresso::map_with_ordered_keys<std::string,std::shared_ptr<Espresso::blob<float,4>>>::~map_with_ordered_keys(v8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__13774(void *a1, uint64_t a2)
{
  a1[6] = *(void *)(a2 + 48);
  uint64_t v2 = (void *)(a2 + 56);
  uint64_t v3 = *(void *)(a2 + 56);
  a1[7] = v3;
  uint64_t v4 = a1 + 7;
  uint64_t v5 = *(void *)(a2 + 64);
  a1[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)(a2 + 48) = v2;
    void *v2 = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    a1[6] = v4;
  }
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 9) = result;
  a1[11] = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  return result;
}

void __Block_byref_object_dispose__13775(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(void **)(a1 + 56);

  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v2);
}

uint64_t ___ZN8Espresso17dataset_estimator39sample_stats_with_current_network_stateERKNS0_9options_tE_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 40);
  uint64_t v3 = *(long long **)(*(void *)v2 + 688);
  uint64_t v4 = *(long long **)(*(void *)v2 + 696);
  if (v3 != v4)
  {
    uint64_t v6 = result;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(v6 + 32) + 8);
      uint64_t v8 = (char **)(v7 + 72);
      float v9 = *(std::string **)(v7 + 80);
      if ((unint64_t)v9 >= *(void *)(v7 + 88))
      {
        int v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v8, (uint64_t)v3);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v8, v3);
        int v10 = v9 + 1;
      }
      *(void *)(v7 + 80) = v10;
      uint64_t v11 = *(void *)v2 + 136;
      unint64_t v15 = v3;
      uint64_t v12 = *((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (unsigned __int8 *)v3, &v15)+ 5);
      uint64_t v13 = (uint64_t **)(*(void *)(*(void *)(v6 + 32) + 8) + 48);
      unint64_t v15 = v3;
      uint64_t v14 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, v3, &v15);
      __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v12 + 40))(v12, a2, v14 + 7);
      uint64_t v3 = (long long *)((char *)v3 + 24);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    uint64_t v8 = (std::string *)(v6 + 4);
    float v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1929EEA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<Espresso::dataset_estimator::statistics_entry_t>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = 0x2E8BA2E8BA2E8BA3 * ((v5 - *a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      unint64_t v15 = v4 + 88 * a2;
      while (v5 != v15)
      {
        uint64_t v16 = *(void **)(v5 - 32);
        if (v16)
        {
          *(void *)(v5 - 24) = v16;
          operator delete(v16);
        }
        v5 -= 88;
      }
      a1[1] = v15;
    }
  }
  else
  {
    uint64_t v8 = a1[2];
    if (0x2E8BA2E8BA2E8BA3 * ((v8 - v5) >> 3) >= v7)
    {
      uint64_t v17 = v5 + 88 * v7;
      do
      {
        *(_OWORD *)(v5 + 48) = 0uLL;
        *(_OWORD *)(v5 + 64) = 0uLL;
        *(void *)(v5 + 72) = 0;
        *(void *)(v5 + 80) = 0;
        *(_OWORD *)(v5 + 16) = 0uLL;
        *(_OWORD *)(v5 + 32) = 0uLL;
        *(_OWORD *)uint64_t v5 = 0uLL;
        *(_DWORD *)(v5 + 48) = -1082130432;
        *(void *)(v5 + 56) = 0;
        *(void *)(v5 + 64) = 0;
        *(unsigned char *)(v5 + 80) = 0;
        v5 += 88;
      }
      while (v5 != v17);
      a1[1] = v17;
    }
    else
    {
      if (a2 > 0x2E8BA2E8BA2E8BALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      v18[4] = a1 + 2;
      unint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((v8 - v4) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x1745D1745D1745DLL) {
        unint64_t v11 = 0x2E8BA2E8BA2E8BALL;
      }
      else {
        unint64_t v11 = v10;
      }
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>>(v11);
      char v13 = &v12[88 * v6];
      v18[0] = v12;
      v18[1] = v13;
      v18[3] = &v12[88 * v14];
      do
      {
        *((_OWORD *)v13 + 3) = 0uLL;
        *((_OWORD *)v13 + 4) = 0uLL;
        *((void *)v13 + 9) = 0;
        *((void *)v13 + 10) = 0;
        *((_OWORD *)v13 + 1) = 0uLL;
        *((_OWORD *)v13 + 2) = 0uLL;
        *(_OWORD *)char v13 = 0uLL;
        *((_DWORD *)v13 + 12) = -1082130432;
        *((void *)v13 + 7) = 0;
        *((void *)v13 + 8) = 0;
        v13[80] = 0;
        v13 += 88;
      }
      while (v13 != &v12[88 * a2]);
      _OWORD v18[2] = &v12[88 * a2];
      std::vector<Espresso::dataset_estimator::statistics_entry_t>::__swap_out_circular_buffer(a1, v18);
      std::__split_buffer<Espresso::dataset_estimator::statistics_entry_t>::~__split_buffer((uint64_t)v18);
    }
  }
}

void Espresso::dataset_estimator::sample_stats_with_blobs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v48 = *(void *)(a2 + 32);
  if (v3 != v48)
  {
    uint64_t v54 = (void *)(a3 + 16);
    int v61 = (uint64_t **)(a1 + 40);
    float v53 = (float *)(a1 + 16);
    int v57 = (uint64_t **)(a1 + 72);
    while (1)
    {
      v68.i64[0] = v3;
      uint64_t v4 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (void *)v3, (long long **)&v68);
      if (*(char *)(v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
      }
      else
      {
        long long v5 = *(_OWORD *)v3;
        v78.__r_.__value_.__r.__words[2] = *(void *)(v3 + 16);
        *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v5;
      }
      uint64_t v7 = v4[7];
      unint64_t v6 = (std::__shared_weak_count *)v4[8];
      uint64_t v79 = v7;
      uint64_t v80 = v6;
      uint64_t v56 = v3;
      if (!v6) {
        break;
      }
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v7 = v79;
      uint64_t v8 = v80;
      if (!v80) {
        goto LABEL_10;
      }
      char v50 = 0;
      atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
      int v55 = *(_DWORD *)(v7 + 20);
      if (v55 >= 1)
      {
        int v60 = 0;
        unint64_t v9 = (float *)(*(_DWORD *)(v7 + 12) * *(_DWORD *)(v7 + 8));
        unsigned int v10 = *(_DWORD *)(v7 + 16);
        unint64_t v11 = (int)v10;
        unsigned int v52 = v10 * v9;
        uint64_t v12 = 88 * v10;
        unint64_t v58 = (int)v10;
        do
        {
          uint64_t v75 = 0;
          unsigned int v76 = 0;
          int v77 = 0;
          v68.i64[0] = (uint64_t)&v75;
          v68.i8[8] = 0;
          if (v11)
          {
            if ((v11 & 0x80000000) != 0) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            int v13 = v11;
            uint64_t v14 = (long long *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>>(v11);
            uint64_t v75 = v14;
            int v77 = (char *)v14 + 88 * v15;
            uint64_t v16 = (long long *)((char *)v14 + 88 * v13);
            do
            {
              v14[3] = 0uLL;
              v14[4] = 0uLL;
              *((void *)v14 + 9) = 0;
              *((void *)v14 + 10) = 0;
              v14[1] = 0uLL;
              uint64_t v14[2] = 0uLL;
              *uint64_t v14 = 0uLL;
              *((_DWORD *)v14 + 12) = -1082130432;
              *((void *)v14 + 7) = 0;
              *((void *)v14 + 8) = 0;
              *((unsigned char *)v14 + 80) = 0;
              uint64_t v14 = (long long *)((char *)v14 + 88);
            }
            while (v14 != v16);
            unsigned int v76 = v16;
          }
          long long v69 = 0u;
          long long v70 = 0u;
          int8x16_t v68 = 0u;
          int v71 = -1082130432;
          uint64_t v73 = 0;
          long long __p = 0uLL;
          char v74 = 0;
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v54, v56))
          {
            Espresso::dataset_estimator::statistics_entry_t::compute_single(*(Espresso::dataset_estimator::statistics_entry_t **)(v7 + 24), (float *)v52, 1, (uint64_t)v62);
            int8x16_t v68 = *(int8x16_t *)v62;
            long long v69 = *(_OWORD *)&v62[16];
            long long v70 = v63;
            int v71 = v64;
            if ((void)__p)
            {
              *((void *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            long long __p = v65;
            uint64_t v73 = v66;
            char v74 = v67;
          }
          else if ((int)v58 >= 1)
          {
            uint64_t v17 = 0;
            uint64_t v18 = 0;
            do
            {
              Espresso::dataset_estimator::statistics_entry_t::compute_single((Espresso::dataset_estimator::statistics_entry_t *)(*(void *)(v7 + 24) + v17), v9, 0, (uint64_t)v62);
              float v19 = (char *)v75 + v18;
              *(_OWORD *)float v19 = *(_OWORD *)v62;
              *((_OWORD *)v19 + 1) = *(_OWORD *)&v62[16];
              *((_OWORD *)v19 + 2) = v63;
              *((_DWORD *)v19 + 12) = v64;
              float v21 = v19 + 56;
              int v20 = (void *)*((void *)v19 + 7);
              if (v20)
              {
                *((void *)v19 + 8) = v20;
                operator delete(v20);
                void *v21 = 0;
                *((void *)v19 + 8) = 0;
                *((void *)v19 + 9) = 0;
              }
              *(_OWORD *)float v21 = v65;
              *((void *)v19 + 9) = v66;
              v19[80] = v67;
              *(void *)int v62 = &v78;
              BOOL v22 = std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v61, &v78, (long long **)v62);
              Espresso::dataset_estimator::statistics_entry_t::iterative_grow((int8x16_t *)(v22[7] + v18), (int8x16_t *)((char *)v75 + v18), 0.0);
              Espresso::dataset_estimator::statistics_entry_t::iterative_grow(&v68, (int8x16_t *)((char *)v75 + v18), 0.0);
              v18 += 88;
              v17 += 4 * (int)v9;
            }
            while (v12 != v18);
          }
          *((void *)&v70 + 1) = 1;
          *(void *)int v62 = &v78;
          int8x16_t v23 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v53, &v78, (long long **)v62);
          Espresso::dataset_estimator::statistics_entry_t::iterative_grow((int8x16_t *)(v23 + 56), &v68, *(float *)(a3 + 12));
          if (*(unsigned char *)(a3 + 8))
          {
            int8x16_t v24 = v57;
            int8x16_t v25 = *v57;
            float v26 = v57;
            if (*v57)
            {
              while (1)
              {
                while (1)
                {
                  float v26 = (uint64_t **)v25;
                  int v27 = v25 + 4;
                  if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v78, v25 + 4)) {
                    break;
                  }
                  int8x16_t v25 = *v26;
                  int8x16_t v24 = v26;
                  if (!*v26) {
                    goto LABEL_34;
                  }
                }
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v27, &v78)) {
                  break;
                }
                int8x16_t v24 = v26 + 1;
                int8x16_t v25 = v26[1];
                if (!v25) {
                  goto LABEL_34;
                }
              }
              unint64_t v28 = v26;
            }
            else
            {
LABEL_34:
              unint64_t v28 = operator new(0x50uLL);
              *(void *)int v62 = v28;
              *(void *)&v62[8] = v57;
              v62[16] = 0;
              float v29 = (std::string *)(v28 + 4);
              if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v29, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
              }
              else
              {
                *(_OWORD *)&v29->__r_.__value_.__l.__data_ = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
                v28[6] = *((void *)&v78.__r_.__value_.__l + 2);
              }
              unsigned char v28[8] = 0;
              v28[9] = 0;
              v28[7] = 0;
              v62[16] = 1;
              *unint64_t v28 = 0;
              v28[1] = 0;
              v28[2] = v26;
              char *v24 = v28;
              uint64_t v30 = **(void **)(a1 + 64);
              uint64_t v31 = v28;
              if (v30)
              {
                *(void *)(a1 + 64) = v30;
                uint64_t v31 = *v24;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v31);
              ++*(void *)(a1 + 80);
              *(void *)int v62 = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v62);
            }
            unint64_t v32 = v28[9];
            unint64_t v33 = (void *)v28[8];
            if ((unint64_t)v33 >= v32)
            {
              uint64_t v35 = v28[7];
              unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v33 - v35) >> 3);
              unint64_t v37 = v36 + 1;
              if (v36 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - v35) >> 3);
              if (2 * v38 > v37) {
                unint64_t v37 = 2 * v38;
              }
              if (v38 >= 0x555555555555555) {
                unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v39 = v37;
              }
              *(void *)&long long v63 = v28 + 9;
              if (v39)
              {
                if (v39 > 0xAAAAAAAAAAAAAAALL) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                float64x2_t v40 = (char *)operator new(24 * v39);
              }
              else
              {
                float64x2_t v40 = 0;
              }
              float64x2_t v41 = &v40[24 * v36];
              *(void *)int v62 = v40;
              *(void *)&v62[8] = v41;
              *(void *)&v62[16] = v41;
              *(void *)&v62[24] = &v40[24 * v39];
              *((void *)v41 + 1) = 0;
              *((void *)v41 + 2) = 0;
              *(void *)float64x2_t v41 = 0;
              std::vector<Espresso::dataset_estimator::statistics_entry_t>::__init_with_size[abi:ne180100]<Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*>(v41, v75, v76, 0x2E8BA2E8BA2E8BA3 * (((char *)v76 - (char *)v75) >> 3));
              uint64_t v42 = *(void *)&v62[8];
              uint64_t v34 = *(void *)&v62[16] + 24;
              *(void *)&v62[16] += 24;
              unint64_t v44 = (void *)v28[7];
              float64x2_t v43 = (void *)v28[8];
              if (v43 == v44)
              {
                int64x2_t v46 = vdupq_n_s64((unint64_t)v43);
              }
              else
              {
                do
                {
                  *(void *)(v42 - 24) = 0;
                  *(void *)(v42 - 16) = 0;
                  v42 -= 24;
                  *(void *)(v42 + 16) = 0;
                  long long v45 = *(_OWORD *)(v43 - 3);
                  v43 -= 3;
                  *(_OWORD *)uint64_t v42 = v45;
                  *(void *)(v42 + 16) = v43[2];
                  void *v43 = 0;
                  v43[1] = 0;
                  void v43[2] = 0;
                }
                while (v43 != v44);
                int64x2_t v46 = *(int64x2_t *)(v28 + 7);
                uint64_t v34 = *(void *)&v62[16];
              }
              v28[7] = v42;
              unsigned char v28[8] = v34;
              *(int64x2_t *)&v62[8] = v46;
              uint64_t v47 = v28[9];
              v28[9] = *(void *)&v62[24];
              *(void *)&v62[24] = v47;
              *(void *)int v62 = v46.i64[0];
              std::__split_buffer<std::vector<Espresso::dataset_estimator::statistics_entry_t>>::~__split_buffer((uint64_t)v62);
            }
            else
            {
              *unint64_t v33 = 0;
              v33[1] = 0;
              v33[2] = 0;
              std::vector<Espresso::dataset_estimator::statistics_entry_t>::__init_with_size[abi:ne180100]<Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*>(v33, v75, v76, 0x2E8BA2E8BA2E8BA3 * (((char *)v76 - (char *)v75) >> 3));
              uint64_t v34 = (uint64_t)(v33 + 3);
              unsigned char v28[8] = v34;
            }
            unsigned char v28[8] = v34;
          }
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          v68.i64[0] = (uint64_t)&v75;
          std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
          ++v60;
          unint64_t v11 = v58;
        }
        while (v60 != v55);
      }
      if ((v50 & 1) == 0) {
        nitro::nitro_function::nitro_function(v8);
      }
      if (v80) {
        nitro::nitro_function::nitro_function(v80);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      uint64_t v3 = v56 + 24;
      if (v56 + 24 == v48) {
        return;
      }
    }
    uint64_t v8 = 0;
LABEL_10:
    char v50 = 1;
    goto LABEL_11;
  }
}

void sub_1929EF2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a24);
  if (__p)
  {
    a43 = (uint64_t)__p;
    operator delete(__p);
  }
  a35 = v44 - 168;
  std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if ((a11 & 1) == 0) {
    nitro::nitro_function::nitro_function(v43);
  }
  int64x2_t v46 = *(std::__shared_weak_count **)(v44 - 112);
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  if (*(char *)(v44 - 121) < 0) {
    operator delete(*(void **)(v44 - 144));
  }
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::vector<Espresso::dataset_estimator::statistics_entry_t>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    unint64_t v6 = v4;
    std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t *std::vector<Espresso::dataset_estimator::statistics_entry_t>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      long long v8 = *(_OWORD *)(v2 + v5 - 88);
      long long v9 = *(_OWORD *)(v2 + v5 - 72);
      long long v10 = *(_OWORD *)(v2 + v5 - 56);
      *(_DWORD *)(v6 - 40) = *(_DWORD *)(v2 + v5 - 40);
      *(_OWORD *)(v6 - 56) = v10;
      *(_OWORD *)(v6 - 72) = v9;
      *(_OWORD *)(v6 - 88) = v8;
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 32) = 0;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(unsigned char *)(v6 - 8) = *(unsigned char *)(v2 + v5 - 8);
      v5 -= 88;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v11 = *result;
  *__n128 result = v4;
  a2[1] = v11;
  uint64_t v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<Espresso::dataset_estimator::statistics_entry_t>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 88;
    uint64_t v4 = *(void **)(v2 - 32);
    if (v4)
    {
      *(void *)(v2 - 24) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 88;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Espresso::dataset_estimator::estimate(std::string **a1, uint64_t *a2, unsigned int *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  for (std::string::size_type i = (*a1)[6].__r_.__value_.__l.__size_; i; std::string::size_type i = *(void *)i)
  {
    std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, (long long *)(i + 16));
    p_p = &__p;
    long long v9 = std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1 + 5, &__p, (long long **)&p_p);
    std::vector<Espresso::dataset_estimator::statistics_entry_t>::resize(v9 + 7, *(int *)(v24 + 16));
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v10 = *a2;
  uint64_t v11 = (std::__shared_weak_count *)a2[1];
  v22[0] = v10;
  v22[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)a1[1];
  p_p = *a1;
  int v27 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v19 = 0;
  int v20 = 0;
  float v21 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  __p.__r_.__value_.__s.__data_[8] = 0;
  float v19 = (uint64_t *)operator new(0x10uLL);
  int v20 = v19;
  float v21 = v19 + 2;
  int v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((uint64_t)&v21, &p_p, &v28, v19);
  uint64_t v13 = *a3;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = ___ZN8Espresso17dataset_estimator8estimateENSt3__110shared_ptrINS_20abstract_data_sourceEEERKNS0_9options_tEU13block_pointerFvvE_block_invoke;
  v15[3] = &unk_1E5747588;
  uint64_t v17 = a1;
  uint64_t v18 = a3;
  id v14 = v7;
  id v16 = v14;
  Espresso::feed_data_source_to_networks((uint64_t)v22, &v19, v13 | 0x100000000, v15);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_1929EF710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a21);
  if (*(void *)(v23 - 80)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)(v23 - 80));
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso17dataset_estimator8estimateENSt3__110shared_ptrINS_20abstract_data_sourceEEERKNS0_9options_tEU13block_pointerFvvE_block_invoke(void *a1, uint64_t *a2)
{
  Espresso::dataset_estimator::sample_stats_with_blobs(a1[5], *a2, a1[6]);
  uint64_t result = a1[4];
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void Espresso::feed_data_source_to_networks(uint64_t a1, uint64_t **a2, uint64_t a3, void *a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  double v49 = a4;
  long long v8 = *a2;
  id v7 = a2[1];
  char v50 = (uint64_t *)a2;
  if (v7 == *a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "feed_data_source_to_network: empty network array");
    goto LABEL_71;
  }
  if (!*(void *)a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "feed_data_source_to_network: null data source");
LABEL_71:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v9 = -1;
  do
  {
    uint64_t v10 = *v8;
    uint64_t v11 = (std::__shared_weak_count *)v8[1];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v66[0] = *(long long **)(v10 + 640);
    int v12 = *(_DWORD *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10 + 136, (unsigned __int8 *)v66[0], v66)+ 5)+ 20);
    if (v9 != -1 && v9 != v12)
    {
      int64x2_t v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v46, "feed_data_source_to_network: networks have different batch size");
      __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    v8 += 2;
    int v9 = v12;
  }
  while (v8 != v7);
  uint64_t v13 = a1;
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)a1 + 32))();
  if ((int)v14 >= (int)a3) {
    LODWORD(v15) = a3;
  }
  else {
    LODWORD(v15) = v14;
  }
  uint64_t v15 = (int)v15;
  if ((int)a3 <= 0) {
    uint64_t v15 = v14;
  }
  unint64_t v48 = (v15 - 1) / (unint64_t)v12;
  if (v48 != -1)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = (Espresso *)(*(void *(**)(long long **__return_ptr))(**(void **)v13 + 8))(v66);
      HIDWORD(v19) = -858993459 * v16;
      LODWORD(v19) = -858993459 * v16;
      if ((v19 >> 1) <= 0x19999999)
      {
        int v20 = Espresso::espresso_os_log_subsystem(v17, v18);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v67.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(v67.__r_.__value_.__r.__words[0]) = v16;
          LOWORD(v67.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v67.__r_.__value_.__r.__words[1] + 2) = v48 + 1;
          _os_log_debug_impl(&dword_1920CB000, v20, OS_LOG_TYPE_DEBUG, "[dataset_estimator::estimate] batch: %d / %d\n", (uint8_t *)&v67, 0xEu);
        }
      }
      uint64_t v22 = *v50;
      uint64_t v21 = v50[1];
      int v64 = 0;
      long long v65 = 0;
      long long v63 = 0;
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
      v67.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v23 = v21 - v22;
      if (v23)
      {
        if ((unint64_t)v23 >= 0x5555555555555551) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v23 >> 4;
        uint64_t v25 = 3 * v24;
        uint64_t v26 = 48 * v24;
        int v27 = operator new(48 * v24);
        uint64_t v28 = &v27[2 * v25];
        long long v63 = v27;
        long long v65 = v28;
        do
        {
          v27[1] = 0;
          void *v27 = v27 + 1;
          v27[2] = 0;
          v27[3] = 0;
          v27[4] = 0;
          v27[5] = 0;
          v27 += 6;
          v26 -= 48;
        }
        while (v26);
        unint64_t v29 = 0;
        int v64 = v28;
        do
        {
          long long v30 = *(_OWORD *)(v22 + 16 * v29);
          long long v51 = v30;
          uint64_t v31 = *(std::__shared_weak_count **)(v22 + 16 * v29 + 8);
          if (*((void *)&v30 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v32 = v63;
          uint64_t v34 = *(void *)(v30 + 16);
          unint64_t v33 = *(std::__shared_weak_count **)(v30 + 24);
          if (v33) {
            atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (*(unsigned char *)(v34 + 44)) {
            BOOL v35 = (a3 & 0x100000000) == 0;
          }
          else {
            BOOL v35 = 1;
          }
          if (!v35)
          {
            long long v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v45, "Invalid context: memory aliasing optimizations must be disabled (network_allocate_using_reshape_graph_coloring)");
            __cxa_throw(v45, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          uint64_t v36 = v16;
          unint64_t v37 = *(void **)(v30 + 232);
          if (v37 != (void *)(v30 + 240))
          {
            do
            {
              if (*((char *)v37 + 55) < 0) {
                std::string::__init_copy_ctor_external(&v67, (const std::string::value_type *)v37[4], v37[5]);
              }
              else {
                std::string v67 = *(std::string *)(v37 + 4);
              }
              char v68 = *((unsigned char *)v37 + 56);
              if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v66, (unsigned __int8 *)&v67))
              {
                uint64_t v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                float64x2_t v43 = std::string::append(&v61, " missing from data_source");
                long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
                v62.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v44;
                v43->__r_.__value_.__l.__size_ = 0;
                v43->__r_.__value_.__r.__words[2] = 0;
                v43->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v42, &v62);
                __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v67.__r_.__value_.__l.__data_);
              }
              unint64_t v38 = (void *)v37[1];
              if (v38)
              {
                do
                {
                  unint64_t v39 = v38;
                  unint64_t v38 = (void *)*v38;
                }
                while (v38);
              }
              else
              {
                do
                {
                  unint64_t v39 = (void *)v37[2];
                  BOOL v35 = *v39 == (void)v37;
                  unint64_t v37 = v39;
                }
                while (!v35);
              }
              unint64_t v37 = v39;
            }
            while (v39 != (void *)(v51 + 240));
          }
          v52[0] = MEMORY[0x1E4F143A8];
          v52[1] = 3321888768;
          v52[2] = ___ZN8Espresso28feed_data_source_to_networksENSt3__110shared_ptrINS_20abstract_data_sourceEEENS0_6vectorINS1_INS_3netEEENS0_9allocatorIS6_EEEENS_23feed_data_source_opts_tEU13block_pointerFvRNS4_INS_21map_with_ordered_keysINS0_12basic_stringIcNS0_11char_traitsIcEENS7_IcEEEENS1_INS_4blobIfLi4EEEEEEENS7_ISK_EEEEE_block_invoke;
          v52[3] = &__block_descriptor_108_ea8_32c185_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN8Espresso4blobIfLi4EEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SB_EEEEEE72c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
          std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map((uint64_t)__p, (uint64_t)v66);
          long long v54 = v51;
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v16 = v36;
          int v56 = v36;
          int v57 = a3;
          char v58 = BYTE4(a3);
          __int16 v59 = HIDWORD(a3) >> 8;
          char v60 = HIBYTE(a3);
          int v55 = &v32[6 * v29];
          Espresso::abstract_context::compute_batch_sync((void (***)(uint64_t *__return_ptr, void))v34, v52);
          if (*((void *)&v54 + 1)) {
            nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v54 + 1));
          }
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node((void *)__p[2]);
          float64x2_t v40 = __p[0];
          __p[0] = 0;
          if (v40) {
            operator delete(v40);
          }
          if (v33) {
            nitro::nitro_function::nitro_function(v33);
          }
          if (v31) {
            nitro::nitro_function::nitro_function(v31);
          }
          ++v29;
          uint64_t v22 = *v50;
        }
        while (v29 < (v50[1] - *v50) >> 4);
      }
      ((void (**)(id, void **))v49)[2](v49, &v63);
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
      std::vector<Espresso::map_with_ordered_keys<std::string,std::shared_ptr<Espresso::blob<float,4>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node((void *)v66[2]);
      float64x2_t v41 = v66[0];
      v66[0] = 0;
      uint64_t v13 = a1;
      if (v41) {
        operator delete(v41);
      }
      BOOL v35 = v16++ == v48;
    }
    while (!v35);
  }
}

void sub_1929EFE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  __cxa_free_exception(v49);

  _Unwind_Resume(a1);
}

void ___ZN8Espresso28feed_data_source_to_networksENSt3__110shared_ptrINS_20abstract_data_sourceEEENS0_6vectorINS1_INS_3netEEENS0_9allocatorIS6_EEEENS_23feed_data_source_opts_tEU13block_pointerFvRNS4_INS_21map_with_ordered_keysINS0_12basic_stringIcNS0_11char_traitsIcEENS7_IcEEEENS1_INS_4blobIfLi4EEEEEEENS7_ISK_EEEEE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(long long **)(a1 + 48);
  if (v4)
  {
    uint64_t v5 = a1 + 72;
    do
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, v4 + 1);
      if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(*(void *)v5 + 136), (unsigned __int8 *)&__p))
      {
        id v7 = Espresso::blob<float,4>::copy(buf, v41);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v39, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          std::string v39 = __p;
        }
        int v9 = *(std::__shared_weak_count **)&buf[8];
        long long v38 = *(_OWORD *)buf;
        if (*(void *)&buf[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
        }
        Espresso::prepare_blob_for_network((uint64_t)v7, (uint64_t *)(a1 + 72), (std::string::size_type)&v39, (uint64_t)&v38, 0);
        if (v9) {
          nitro::nitro_function::nitro_function(v9);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = *(void *)v5 + 136;
        p_p = &__p;
        uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (unsigned __int8 *)&__p, (long long **)&p_p);
        (*(void (**)(void, void *, uint8_t *))(**((void **)v11 + 5) + 48))(*((void *)v11 + 5), a2, buf);
        if (*(void *)&buf[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
        }
      }
      else if (!*(_DWORD *)(a1 + 96))
      {
        long long v8 = Espresso::espresso_os_log_subsystem(0, v6);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v12 = &__p;
          }
          else {
            int v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315138;
          *(void *)&buf[4] = v12;
          _os_log_error_impl(&dword_1920CB000, v8, OS_LOG_TYPE_ERROR, "[dataset_estimator::estimate] blob not found in network: %s", buf, 0xCu);
        }
      }
      if (v42) {
        nitro::nitro_function::nitro_function(v42);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v4 = *(long long **)v4;
    }
    while (v4);
  }
  Espresso::net::__forward(*(void *)(a1 + 72), a2, 0, 0xFFFFFFFFLL);
  uint64_t v13 = *(void **)(a1 + 72);
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v14 = (unsigned __int8 *)v13[86];
    for (std::string::size_type i = (unsigned __int8 *)v13[87]; v14 != i; v14 += 24)
    {
      uint64_t v16 = *(void *)(a1 + 72) + 136;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, v14, (long long **)&__p);
      uint64_t v19 = *((void *)v17 + 5);
      uint64_t v18 = (std::__shared_weak_count *)*((void *)v17 + 6);
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v20 = *(uint64_t ***)(a1 + 88);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      uint64_t v21 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, v14, (long long **)&__p);
      (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v19 + 40))(v19, a2, v21 + 7);
      uint64_t v22 = *(void *)(a1 + 88);
      uint64_t v23 = (char **)(v22 + 24);
      uint64_t v24 = *(std::string **)(v22 + 32);
      if ((unint64_t)v24 >= *(void *)(v22 + 40))
      {
        uint64_t v25 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v23, (uint64_t)v14);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v23, (long long *)v14);
        uint64_t v25 = v24 + 1;
      }
      *(void *)(v22 + 32) = v25;
      if (v18) {
        nitro::nitro_function::nitro_function(v18);
      }
    }
  }
  else
  {
    uint64_t v26 = (unsigned __int8 *)v13[83];
    for (uint64_t j = (unsigned __int8 *)v13[84]; v26 != j; v26 += 24)
    {
      uint64_t v28 = *(void *)(a1 + 72) + 136;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      unint64_t v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, v26, (long long **)&__p);
      uint64_t v31 = *((void *)v29 + 5);
      long long v30 = (std::__shared_weak_count *)*((void *)v29 + 6);
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v32 = *(uint64_t ***)(a1 + 88);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      unint64_t v33 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32, v26, (long long **)&__p);
      (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v31 + 40))(v31, a2, v33 + 7);
      uint64_t v34 = *(void *)(a1 + 88);
      BOOL v35 = (char **)(v34 + 24);
      uint64_t v36 = *(std::string **)(v34 + 32);
      if ((unint64_t)v36 >= *(void *)(v34 + 40))
      {
        unint64_t v37 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v35, (uint64_t)v26);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v35, (long long *)v26);
        unint64_t v37 = v36 + 1;
      }
      *(void *)(v34 + 32) = v37;
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
    }
  }
}

void sub_1929F037C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a27) {
    nitro::nitro_function::nitro_function(a27);
  }
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void std::vector<Espresso::map_with_ordered_keys<std::string,std::shared_ptr<Espresso::blob<float,4>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void **)(v4 - 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)v4 - 5));
        v4 -= 48;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t __destroy_helper_block_ea8_32c185_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN8Espresso4blobIfLi4EEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SB_EEEEEE72c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(a1 + 32);
}

uint64_t __copy_helper_block_ea8_32c185_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN8Espresso4blobIfLi4EEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SB_EEEEEE72c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map(a1 + 32, a2 + 32);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

Espresso::batchnorm_renormalizer *Espresso::batchnorm_renormalizer::batchnorm_renormalizer(Espresso::batchnorm_renormalizer *a1, Espresso::net **a2, uint64_t a3)
{
  id v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)a1 = v7;
    *((void *)a1 + 1) = v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)a1 = v7;
    *((void *)a1 + 1) = 0;
  }
  *((void *)a1 + 9) = 0;
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 6) = 0;
  *((void *)a1 + 2) = (char *)a1 + 24;
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 5) = (char *)a1 + 48;
  *((void *)a1 + 10) = 0;
  *((void *)a1 + 7) = 0;
  *((void *)a1 + 8) = (char *)a1 + 72;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  *(_OWORD *)((char *)a1 + 88) = *(_OWORD *)a3;
  std::unordered_set<std::string>::unordered_set((uint64_t)a1 + 104, a3 + 16);
  uint64_t v8 = *(void *)(a3 + 56);
  *((_DWORD *)a1 + 38) = *(_DWORD *)(a3 + 64);
  *((void *)a1 + 18) = v8;
  *((_OWORD *)a1 + 10) = 0u;
  float64x2_t v43 = (void *)((char *)a1 + 216);
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_DWORD *)a1 + 60) = 0;
  int v9 = *a2;
  v48[0] = MEMORY[0x1E4F143A8];
  v48[1] = 3321888768;
  v48[2] = ___ZN8Espresso22batchnorm_renormalizerC2ENSt3__110shared_ptrINS_3netEEENS0_9options_tE_block_invoke;
  v48[3] = &__block_descriptor_56_ea8_40c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e9_v16__0_v8l;
  v48[4] = a1;
  v48[5] = v9;
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  double v49 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::single_match_replace<Espresso::generic_convolution_kernel>(v9, v48);
  uint64_t v11 = *(Espresso **)a1;
  int v12 = (std::__shared_weak_count *)*((void *)a1 + 1);
  uint64_t v13 = *(Espresso **)a1;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v13 = *(Espresso **)a1;
  }
  Espresso::shape_network_recursive(v11, (Espresso *)((char *)v13 + 184), 0, 0);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  uint64_t v15 = *(uint64_t **)(*(void *)a1 + 32);
  uint64_t v14 = *(uint64_t **)(*(void *)a1 + 40);
  if (v15 != v14)
  {
    unint64_t v16 = 0;
    do
    {
      uint64_t v18 = *v15;
      uint64_t v17 = (std::__shared_weak_count *)v15[1];
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = *(const void **)(v18 + 64);
      if (v19)
      {
        if (v20)
        {
          uint64_t v21 = v20;
          uint64_t v22 = *(std::__shared_weak_count **)(v18 + 72);
          if (v22)
          {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
            *(void *)&long long v23 = v20;
            *((void *)&v23 + 1) = v22;
            long long v45 = v23;
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            long long v45 = (unint64_t)v20;
          }
          uint64_t v25 = (_DWORD *)*((void *)a1 + 28);
          unint64_t v24 = *((void *)a1 + 29);
          if ((unint64_t)v25 >= v24)
          {
            long long v44 = v22;
            int v27 = (_DWORD *)*v43;
            unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - *v43) >> 3);
            unint64_t v29 = v28 + 1;
            if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            long long v30 = v14;
            unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (void)v27) >> 3);
            if (2 * v31 > v29) {
              unint64_t v29 = 2 * v31;
            }
            if (v31 >= 0x555555555555555) {
              unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v32 = v29;
            }
            if (v32 > 0xAAAAAAAAAAAAAAALL) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v33 = (char *)operator new(24 * v32);
            uint64_t v34 = &v33[24 * v28];
            BOOL v35 = &v33[24 * v32];
            *(_DWORD *)uint64_t v34 = v16;
            *(_OWORD *)(v34 + 8) = v45;
            uint64_t v26 = v34 + 24;
            if (v25 == v27)
            {
              *((void *)a1 + 27) = v34;
              *((void *)a1 + 28) = v26;
              *((void *)a1 + 29) = v35;
              uint64_t v14 = v30;
              uint64_t v22 = v44;
            }
            else
            {
              uint64_t v14 = v30;
              do
              {
                int v36 = *(v25 - 6);
                v25 -= 6;
                *((_DWORD *)v34 - 6) = v36;
                v34 -= 24;
                *(_OWORD *)(v34 + 8) = *(_OWORD *)(v25 + 2);
                *((void *)v25 + 1) = 0;
                *((void *)v25 + 2) = 0;
              }
              while (v25 != v27);
              unint64_t v37 = (_DWORD *)*((void *)a1 + 27);
              uint64_t v25 = (_DWORD *)*((void *)a1 + 28);
              *((void *)a1 + 27) = v34;
              *((void *)a1 + 28) = v26;
              *((void *)a1 + 29) = v35;
              uint64_t v22 = v44;
              if (v25 != v37)
              {
                do
                {
                  long long v38 = (std::__shared_weak_count *)*((void *)v25 - 1);
                  if (v38) {
                    nitro::nitro_function::nitro_function(v38);
                  }
                  v25 -= 6;
                }
                while (v25 != v37);
                uint64_t v25 = v37;
              }
            }
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            *uint64_t v25 = v16;
            *(_OWORD *)(v25 + 2) = v45;
            uint64_t v26 = v25 + 6;
            *((void *)a1 + 28) = v25 + 6;
          }
          *((void *)a1 + 28) = v26;
          *((_DWORD *)a1 + 60) += *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v21 + 384))(v21);
          uint64_t v39 = *(void *)a1 + 56;
          unint64_t v50 = v16;
          float64x2_t v40 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v39, v16, &v50);
          if (v40[4] == v40[3])
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Inconsistent state: no inputs to BN");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          if (v22) {
            nitro::nitro_function::nitro_function(v22);
          }
        }
      }
      if (v17) {
        nitro::nitro_function::nitro_function(v17);
      }
      ++v16;
      v15 += 2;
    }
    while (v15 != v14);
  }
  Espresso::batchnorm_renormalizer::create_checkpoint(a1, 1, &v46);
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  return a1;
}

void sub_1929F09B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  *(void *)(v24 - 88) = a11;
  std::vector<std::pair<int,std::shared_ptr<Espresso::generic_batchnorm_kernel>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 88));
  uint64_t v26 = (std::__shared_weak_count *)*((void *)v23 + 26);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  int v27 = (std::__shared_weak_count *)*((void *)v23 + 24);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  *(void *)(v24 - 88) = a9;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 88));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a10);
  Espresso::dataset_estimator::~dataset_estimator(v23);
  _Unwind_Resume(a1);
}

void sub_1929F0A7C()
{
  if (!v0) {
    JUMPOUT(0x1929F0A14);
  }
  JUMPOUT(0x1929F0A0CLL);
}

void ___ZN8Espresso22batchnorm_renormalizerC2ENSt3__110shared_ptrINS_3netEEENS0_9options_tE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v63 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  unint64_t v5 = a2[3].i32[2];
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*(void *)(*v4 + 32) + 16 * v5);
  if (*(char *)(v7 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(v7 + 16), *(void *)(v7 + 24));
    uint64_t v6 = *v4;
  }
  else
  {
    std::string v57 = *(std::string *)(v7 + 16);
  }
  *(void *)float64x2_t v43 = v5;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6 + 96, v5, v43);
  if (v8[4] - v8[3] != 24) {
    goto LABEL_73;
  }
  uint64_t v9 = *v4 + 96;
  *(void *)float64x2_t v43 = v5;
  uint64_t v10 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v5, v43)[3];
  if (*((char *)v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v56.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v11;
  }
  uint64_t v12 = a2->i64[0];
  uint64_t v13 = (std::__shared_weak_count *)a2->i64[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 384))(v12);
  uint64_t v15 = (int32x2_t *)v14;
  if (*(_DWORD *)(v14 + 112))
  {
    if (*(_DWORD *)(v14 + 60) != -1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "not implemented");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    *(_DWORD *)(v14 + 112) = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)a2->i64[0] + 448))(&v54);
    uint64_t v16 = a2->i64[0];
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, v15[5].i32[0], 1, 1, 1);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 392))(v16, &v52);
    if (v53) {
      nitro::nitro_function::nitro_function(v53);
    }
    *(void *)&v43[1] = 0;
    *(void *)&v43[3] = 0x3F6666663727C5ACLL;
    __int16 v44 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v46 = 0;
    int v49 = 1065353216;
    uint64_t v50 = 0;
    uint64_t v51 = 0x200000000;
    int32x2_t v45 = vrev64_s32(v15[3]);
    v43[0] = v15[5].i32[0];
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v19 = *(void *)(v17 + 16);
    uint64_t v18 = *(std::__shared_weak_count **)(v17 + 24);
    uint64_t v41 = v19;
    uint64_t v42 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::abstract_engine_factory::shared(&v60);
    uint64_t v20 = v60.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&__str, "batchnorm");
    LODWORD(p_lpsrc) = (***(uint64_t (****)(void))(v41 + 8))(*(void *)(v41 + 8));
    Espresso::abstract_engine_factory::make_kernel_priv(v20, (uint64_t)&v41, (uint64_t)&__str, (uint64_t)v43, (int *)&p_lpsrc);
    if (lpsrc)
    {
      if (v21)
      {
        uint64_t v22 = v35;
        if (v35) {
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    uint64_t v22 = 0;
LABEL_22:
    if (v35) {
      nitro::nitro_function::nitro_function(v35);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v60.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v60.__r_.__value_.__l.__size_);
    }
    uint64_t v39 = v54;
    float64x2_t v40 = v55;
    if (v55) {
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t *))(*(void *)v21 + 392))(v21, &v39);
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v56.__r_.__value_.__l.__size_;
    }
    p_str = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, size + 13);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &v56;
      }
      else {
        uint64_t v25 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      memmove(p_str, v25, size);
    }
    strcpy((char *)p_str + size, "_bnrenorm_tmp");
    uint64_t v26 = *v4 + 96;
    lpsrc = (void *)v5;
    int v27 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v26, v5, &lpsrc);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v27 + 1, &__str, &v63, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    v38[0] = v21;
    v38[1] = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v28 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v28 = v57.__r_.__value_.__l.__size_;
    }
    unint64_t v29 = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v28 + 13);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v29 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (v28)
    {
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v30 = &v57;
      }
      else {
        long long v30 = (std::string *)v57.__r_.__value_.__r.__words[0];
      }
      memmove(v29, v30, v28);
    }
    strcpy((char *)v29 + v28, "_bnrenorm_tmp");
    uint64_t v31 = *v4 + 96;
    unint64_t v37 = v5;
    unint64_t v32 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v31, v5, &v37);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v60, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
    }
    else {
      std::string v60 = v56;
    }
    lpsrc = 0;
    BOOL v35 = 0;
    int v36 = 0;
    p_lpsrc = &lpsrc;
    char v59 = 0;
    lpsrc = operator new(0x18uLL);
    BOOL v35 = (std::__shared_weak_count *)lpsrc;
    int v36 = (char *)lpsrc + 24;
    BOOL v35 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36, (long long *)&v60, (long long *)&v61, (std::string *)lpsrc);
    Espresso::single_match_state<Espresso::generic_convolution_kernel>::add_kernel(a2, v38, &__str, &v57, v32 + 3, (std::string **)&lpsrc, 0);
    p_lpsrc = &lpsrc;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_lpsrc);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v22)
    {
      nitro::nitro_function::nitro_function(v22);
      nitro::nitro_function::nitro_function(v22);
    }
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    if (v55) {
      nitro::nitro_function::nitro_function(v55);
    }
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
LABEL_73:
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
}

void sub_1929F1114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  if (v39)
  {
    nitro::nitro_function::nitro_function(v39);
    nitro::nitro_function::nitro_function(v39);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a32) {
    nitro::nitro_function::nitro_function(a32);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (a38 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 169) < 0) {
    operator delete(*(void **)(v40 - 192));
  }
  _Unwind_Resume(exception_object);
}

void Espresso::batchnorm_renormalizer::create_checkpoint(Espresso::batchnorm_renormalizer *this@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(a3, *((_DWORD *)this + 60), 2, 1, 1);
  uint64_t v5 = *((void *)this + 27);
  uint64_t v6 = *((void *)this + 28);
  if (v5 != v6)
  {
    int v7 = 0;
    uint64_t v8 = *a3;
    do
    {
      uint64_t v10 = *(void *)(v5 + 8);
      uint64_t v9 = *(std::__shared_weak_count **)(v5 + 16);
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *(unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 384))(v10);
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v10 + 408))(__p, v10);
      if ((int)v11 >= 1)
      {
        uint64_t v12 = *(void *)(v8 + 16);
        uint64_t v13 = (int *)(*((void *)__p[0] + 2) + 12);
        int v14 = 2 * v7;
        uint64_t v15 = v11;
        do
        {
          *(_DWORD *)(v12 + 4 * v14) = *(v13 - 1);
          int v16 = *v13;
          v13 += 4;
          *(_DWORD *)(v12 + 4 * (v14 + 1)) = v16;
          v14 += 2;
          --v15;
        }
        while (v15);
        v7 += v11;
      }
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
      if (v9)
      {
        nitro::nitro_function::nitro_function(v9);
        nitro::nitro_function::nitro_function(v9);
      }
      v5 += 24;
    }
    while (v5 != v6);
  }
  if (a2)
  {
    uint64_t v18 = (char *)*((void *)this + 21);
    unint64_t v17 = *((void *)this + 22);
    if ((unint64_t)v18 < v17)
    {
      uint64_t v19 = a3[1];
      *(void *)uint64_t v18 = *a3;
      *((void *)v18 + 1) = v19;
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v20 = v18 + 16;
      *((void *)this + 21) = v18 + 16;
      goto LABEL_37;
    }
    uint64_t v21 = (char *)*((void *)this + 20);
    uint64_t v22 = (v18 - v21) >> 4;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v24 = v17 - (void)v21;
    if (v24 >> 3 > v23) {
      unint64_t v23 = v24 >> 3;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v26 = (char *)operator new(16 * v25);
    int v27 = &v26[16 * v22];
    long long v28 = *(_OWORD *)a3;
    *(_OWORD *)int v27 = *(_OWORD *)a3;
    if (*((void *)&v28 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 1uLL, memory_order_relaxed);
      uint64_t v21 = (char *)*((void *)this + 20);
      uint64_t v18 = (char *)*((void *)this + 21);
    }
    unint64_t v29 = &v26[16 * v25];
    uint64_t v20 = v27 + 16;
    if (v18 == v21)
    {
      *((void *)this + 20) = v27;
      *((void *)this + 21) = v20;
      *((void *)this + 22) = v29;
      if (!v21) {
        goto LABEL_37;
      }
    }
    else
    {
      do
      {
        long long v30 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v27 - 1) = v30;
        v27 -= 16;
        *(void *)uint64_t v18 = 0;
        *((void *)v18 + 1) = 0;
      }
      while (v18 != v21);
      uint64_t v31 = (char *)*((void *)this + 20);
      uint64_t v21 = (char *)*((void *)this + 21);
      *((void *)this + 20) = v27;
      *((void *)this + 21) = v20;
      *((void *)this + 22) = v29;
      if (v21 != v31)
      {
        do
        {
          unint64_t v32 = (std::__shared_weak_count *)*((void *)v21 - 1);
          if (v32) {
            nitro::nitro_function::nitro_function(v32);
          }
          v21 -= 16;
        }
        while (v21 != v31);
        uint64_t v21 = v31;
      }
      if (!v21) {
        goto LABEL_37;
      }
    }
    operator delete(v21);
LABEL_37:
    *((void *)this + 21) = v20;
    std::to_string(&v81, ((uint64_t)v20 - *((void *)this + 20)) >> 4);
    unint64_t v33 = std::string::insert(&v81, 0, "/tmp/bn_");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    BOOL v35 = std::string::append(&v82, ".f4");
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    int64_t v84 = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    if (v84 >= 0) {
      unint64_t v37 = __p;
    }
    else {
      unint64_t v37 = (void **)__p[0];
    }
    uint64_t v38 = *a3;
    uint64_t v39 = (std::__shared_weak_count *)a3[1];
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v40 = fopen((const char *)v37, "wb");
    if (!v40)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Null file pointer");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long __ptr = xmmword_192DCA970;
    *(void *)&long long __ptr = *(void *)(v38 + 8);
    fwrite(&__ptr, 4uLL, 4uLL, v40);
    fwrite(*(const void **)(v38 + 16), 1uLL, 4 * *(int *)(v38 + 8) * (uint64_t)*(int *)(v38 + 12), v40);
    fclose(v40);
    if (v39) {
      nitro::nitro_function::nitro_function(v39);
    }
    if (SHIBYTE(v84) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
  }
  if (!*((void *)this + 23))
  {
    uint64_t v41 = (uint64_t *)*((void *)this + 20);
    uint64_t v43 = *v41;
    uint64_t v42 = v41[1];
    if (v42) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
    }
    __int16 v44 = (std::__shared_weak_count *)*((void *)this + 24);
    *((void *)this + 23) = v43;
    *((void *)this + 24) = v42;
    if (v44) {
      nitro::nitro_function::nitro_function(v44);
    }
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(__p, *((_DWORD *)this + 60), 2, 1, 1);
  int32x2_t v45 = (float **)__p[0];
  uint64_t v46 = *((int *)__p[0] + 3) * (uint64_t)*((int *)__p[0] + 2);
  uint64_t v47 = *a3;
  if (v46)
  {
    uint64_t v48 = *(float **)(v47 + 16);
    int v49 = *(float **)(*((void *)this + 23) + 16);
    uint64_t v50 = (float *)*((void *)__p[0] + 2);
    do
    {
      float v51 = *v48++;
      float v52 = v51;
      float v53 = *v49++;
      *v50++ = vabds_f32(v52, v53);
      --v46;
    }
    while (v46);
  }
  uint64_t v54 = a3[1];
  if (v54) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
  }
  int v55 = (std::__shared_weak_count *)*((void *)this + 24);
  *((void *)this + 23) = v47;
  *((void *)this + 24) = v54;
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  std::string v56 = (float **)*((void *)this + 25);
  if (v56)
  {
    uint64_t v57 = *((int *)v45 + 3) * (uint64_t)*((int *)v45 + 2);
    if (v57)
    {
      char v58 = v45[2];
      char v59 = v56[2];
      do
      {
        float v60 = *v58++;
        *char v59 = (float)(*v59 * 0.90484) + (float)(v60 * 0.095163);
        ++v59;
        --v57;
      }
      while (v57);
    }
    int32x2_t v45 = v56;
  }
  else
  {
    uint64_t v61 = __p[1];
    if (__p[1]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
    }
    std::string v62 = (std::__shared_weak_count *)*((void *)this + 26);
    *((void *)this + 25) = v45;
    *((void *)this + 26) = v61;
    if (v62)
    {
      nitro::nitro_function::nitro_function(v62);
      int32x2_t v45 = (float **)*((void *)this + 25);
    }
  }
  uint64_t v63 = *((int *)v45 + 3) * (uint64_t)*((int *)v45 + 2);
  int v64 = v45[2];
  float v65 = *v64;
  if (v63)
  {
    uint64_t v66 = v45[2];
    uint64_t v67 = *((int *)v45 + 3) * (uint64_t)*((int *)v45 + 2);
    float v68 = *v64;
    do
    {
      float v69 = *v66++;
      float v70 = v69;
      if (v69 < v68) {
        float v68 = v70;
      }
      --v67;
    }
    while (v67);
    int v71 = v45[2];
    uint64_t v72 = *((int *)v45 + 3) * (uint64_t)*((int *)v45 + 2);
    do
    {
      float v73 = *v71++;
      float v74 = v73;
      if (v73 > v65) {
        float v65 = v74;
      }
      --v72;
    }
    while (v72);
    float v75 = 0.0;
    uint64_t v76 = *((int *)v45 + 3) * (uint64_t)*((int *)v45 + 2);
    do
    {
      float v77 = *v64++;
      float v75 = v75 + v77;
      --v76;
    }
    while (v76);
    double v78 = v75;
  }
  else
  {
    double v78 = 0.0;
    float v68 = *v64;
  }
  printf("delta_moving_average: min=%.4e max=%.4e avg=%.4e\n", v68, v65, v78 / (double)(unint64_t)v63);
  if (__p[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
  }
}

void sub_1929F1868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  __cxa_free_exception(v33);
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  BOOL v35 = *(std::__shared_weak_count **)(a13 + 8);
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::pair<int,std::shared_ptr<Espresso::generic_batchnorm_kernel>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          nitro::nitro_function::nitro_function(v6);
        }
        v4 -= 24;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Espresso::batchnorm_renormalizer::analyze(Espresso::batchnorm_renormalizer *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 20);
  uint64_t v3 = (std::__shared_weak_count *)v2[1];
  uint64_t v37 = *v2;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (int *)*((void *)this + 27);
  unint64_t v33 = v3;
  long long v34 = (int *)*((void *)this + 28);
  if (v4 != v34)
  {
    int v5 = 0;
    do
    {
      unint64_t v6 = *v4;
      uint64_t v8 = *((void *)v4 + 1);
      int v7 = (std::__shared_weak_count *)*((void *)v4 + 2);
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 384))(v8);
      int v10 = *(_DWORD *)v9;
      float v11 = *(float *)(v9 + 12);
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v8 + 408))(&v41, v8);
      uint64_t v12 = *(void *)this + 56;
      v43[0] = (long long *)v6;
      uint64_t v13 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12, v6, v43)[3];
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v13, *((void *)v13 + 1));
      }
      else
      {
        long long v14 = *v13;
        v40.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v14;
      }
      if (v10 >= 1)
      {
        BOOL v35 = v4;
        long long v36 = v7;
        uint64_t v15 = 0;
        int v16 = v5;
        uint64_t v17 = 88 * v10;
        int v18 = 2 * v16;
        unsigned int v19 = 3;
        int v20 = v16;
        do
        {
          uint64_t v21 = *(void *)(v41 + 16);
          v43[0] = (long long *)&v40;
          double v22 = *(double *)(std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 5, &v40, v43)[7]+ v15+ 16);
          v43[0] = (long long *)&v40;
          unint64_t v23 = std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 5, &v40, v43);
          uint64_t v24 = v19 - 1;
          float v25 = v22;
          float v26 = *(double *)(v23[7] + v15 + 24);
          float v27 = (float)((float)(1.0 - *((float *)this + 37)) * v25)
              + (float)(*(float *)(v21 + 4 * v24) * *((float *)this + 37));
          *(float *)(v21 + 4 * v24) = v27;
          float v28 = (float)(sqrtf(v11 + (float)(v26 * v26)) * (float)(1.0 - *((float *)this + 37)))
              + (float)(*(float *)(v21 + 4 * v19) * *((float *)this + 37));
          *(float *)(v21 + 4 * v19) = v28;
          if (!v15)
          {
            uint64_t v29 = *(void *)(v37 + 16);
            float v30 = *(float *)(v29 + 4 * v18);
            float v31 = *(float *)(v29 + 4 * (v18 + 1));
            if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v32 = &v40;
            }
            else {
              unint64_t v32 = (std::string *)v40.__r_.__value_.__r.__words[0];
            }
            printf("%s %d - %f (%f) %f (%f)\n", (const char *)v32, 0, v27, v30, v28, v31);
          }
          ++v20;
          v15 += 88;
          v19 += 4;
          v18 += 2;
        }
        while (v17 != v15);
        int v5 = v20;
        uint64_t v4 = v35;
        int v7 = v36;
      }
      uint64_t v38 = v41;
      uint64_t v39 = v42;
      if (v42) {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 392))(v8, &v38);
      if (v39) {
        nitro::nitro_function::nitro_function(v39);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (v42) {
        nitro::nitro_function::nitro_function(v42);
      }
      if (v7)
      {
        nitro::nitro_function::nitro_function(v7);
        nitro::nitro_function::nitro_function(v7);
      }
      v4 += 6;
    }
    while (v4 != v34);
  }
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
}

void sub_1929F1CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a31) {
    nitro::nitro_function::nitro_function(a31);
  }
  if (v31)
  {
    nitro::nitro_function::nitro_function(v31);
    nitro::nitro_function::nitro_function(v31);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::batchnorm_renormalizer::renormalize_bn_epoch(uint64_t a1, uint64_t *a2)
{
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x2020000000;
  int v6 = 0;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  v4[0] = *a2;
  v4[1] = (uint64_t)v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___ZN8Espresso22batchnorm_renormalizer20renormalize_bn_epochENSt3__110shared_ptrINS_20abstract_data_sourceEEE_block_invoke;
  v3[3] = &unk_1E57475B0;
  v3[4] = v5;
  v3[5] = a1;
  Espresso::dataset_estimator::estimate((std::string **)a1, v4, (unsigned int *)(a1 + 88), v3);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  _Block_object_dispose(v5, 8);
}

void sub_1929F1E08(_Unwind_Exception *a1)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Block_object_dispose((const void *)(v2 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso22batchnorm_renormalizer20renormalize_bn_epochENSt3__110shared_ptrINS_20abstract_data_sourceEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(Espresso::batchnorm_renormalizer **)(a1 + 40);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += *((_DWORD *)v1 + 23);
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) >= *((_DWORD *)v1 + 36))
  {
    Espresso::batchnorm_renormalizer::analyze(v1);
    Espresso::batchnorm_renormalizer::create_checkpoint(v1, 1, &v3);
    if (v4) {
      nitro::nitro_function::nitro_function(v4);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) -= *((_DWORD *)v1 + 36);
  }
}

void Espresso::dataset_estimator::result_t::save(void *a1, uint64_t a2)
{
  v39[2] = *MEMORY[0x1E4F143B8];
  float v31 = objc_opt_new();
  float v30 = objc_opt_new();
  uint64_t v3 = (long long *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    do
    {
      std::pair<std::string const,Espresso::dataset_estimator::statistics_entry_t>::pair[abi:ne180100](&v33, v3 + 2);
      uint64_t v4 = Espresso::dataset_estimator::result_t::save(std::string const&)::$_0::operator()((uint64_t)v34);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v5 = &v33;
      }
      else {
        int v5 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      int v6 = [NSString stringWithUTF8String:v5];
      [v31 setObject:v4 forKeyedSubscript:v6];

      if (__p)
      {
        long long v36 = __p;
        operator delete(__p);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      int v7 = (long long *)*((void *)v3 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          int v7 = *(long long **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (long long *)*((void *)v3 + 2);
          BOOL v9 = *(void *)v8 == (void)v3;
          uint64_t v3 = v8;
        }
        while (!v9);
      }
      uint64_t v3 = v8;
    }
    while (v8 != (long long *)(a1 + 1));
  }
  int v10 = (long long *)a1[3];
  float v11 = (long long *)(a1 + 4);
  if (v10 != (long long *)(a1 + 4))
  {
    do
    {
      std::pair<std::string const,std::vector<Espresso::dataset_estimator::statistics_entry_t>>::pair[abi:ne180100](&v33, v10 + 2);
      uint64_t v12 = objc_opt_new();
      uint64_t v14 = v34[0];
      uint64_t v13 = v34[1];
      while (v14 != v13)
      {
        uint64_t v15 = Espresso::dataset_estimator::result_t::save(std::string const&)::$_0::operator()(v14);
        [v12 addObject:v15];

        v14 += 88;
      }
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v16 = &v33;
      }
      else {
        int v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      uint64_t v17 = [NSString stringWithUTF8String:v16];
      [v30 setObject:v12 forKeyedSubscript:v17];

      uint64_t v37 = (void **)v34;
      std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100](&v37);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      int v18 = (long long *)*((void *)v10 + 1);
      if (v18)
      {
        do
        {
          unsigned int v19 = v18;
          int v18 = *(long long **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          unsigned int v19 = (long long *)*((void *)v10 + 2);
          BOOL v9 = *(void *)v19 == (void)v10;
          int v10 = v19;
        }
        while (!v9);
      }
      int v10 = v19;
    }
    while (v19 != v11);
  }
  v38[0] = @"entries";
  v38[1] = @"entries_per_ch";
  v39[0] = v31;
  v39[1] = v30;
  int v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v39 forKeys:v38 count:2];
  id v32 = 0;
  uint64_t v21 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v20 options:1 error:&v32];
  id v22 = v32;
  unint64_t v23 = v22;
  if (!v21)
  {
    uint64_t v27 = [v22 description];
    Espresso::throw_exception_selector<Espresso::io_error,char const*>("Cannot serialize to JSON. Error: %s", v27);
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v24 = a2;
  }
  else {
    uint64_t v24 = *(void *)a2;
  }
  float v25 = [NSString stringWithUTF8String:v24];
  char v26 = [v21 writeToFile:v25 atomically:1];

  if ((v26 & 1) == 0)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v28 = a2;
    }
    else {
      uint64_t v28 = *(void *)a2;
    }
    Espresso::throw_exception_selector<Espresso::io_error,char const*>("Cannot write to: %s", v28);
  }
}

void sub_1929F2230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

id Espresso::dataset_estimator::result_t::save(std::string const&)::$_0::operator()(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = objc_msgSend(NSNumber, "numberWithDouble:", *(double *)a1, 0.0);
  [v2 setObject:v3 forKeyedSubscript:@"min_val"];

  uint64_t v4 = objc_msgSend(NSNumber, "numberWithDouble:", *(double *)(a1 + 8), 0.0);
  [v2 setObject:v4 forKeyedSubscript:@"max_val"];

  int v5 = objc_msgSend(NSNumber, "numberWithDouble:", *(double *)(a1 + 16), 0.0);
  [v2 setObject:v5 forKeyedSubscript:@"mean"];

  int v6 = objc_msgSend(NSNumber, "numberWithDouble:", *(double *)(a1 + 24), 0.0);
  [v2 setObject:v6 forKeyedSubscript:@"stddev"];

  int v7 = objc_msgSend(NSNumber, "numberWithDouble:", *(double *)(a1 + 32), 0.0);
  [v2 setObject:v7 forKeyedSubscript:@"mean_sq"];

  *(float *)&double v8 = (float)*(unint64_t *)(a1 + 40);
  BOOL v9 = [NSNumber numberWithFloat:v8];
  [v2 setObject:v9 forKeyedSubscript:@"n_samples"];

  return v2;
}

void sub_1929F2498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::vector<Espresso::dataset_estimator::statistics_entry_t>>::~pair(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Espresso::dataset_estimator::result_t::load(uint64_t **a1, uint64_t a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1E4F1C9B8];
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  int v6 = [NSString stringWithUTF8String:v5];
  uint64_t v7 = [v4 dataWithContentsOfFile:v6];

  uint64_t v46 = (void *)v7;
  if (!v7)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v44 = a2;
    }
    else {
      uint64_t v44 = *(void *)a2;
    }
    Espresso::throw_exception_selector<Espresso::io_error,char const*>("Cannot load to: %s", v44);
  }
  id v79 = 0;
  double v8 = [MEMORY[0x1E4F28D90] JSONObjectWithData:v7 options:0 error:&v79];
  id v47 = v79;
  uint64_t v48 = v8;
  if (!v8)
  {
    objc_msgSend(v47, "description", v7);
    uint64_t v45 = [ objc_claimAutoreleasedReturnValue() UTF8String];
    Espresso::throw_exception_selector<Espresso::io_error,char const*>("Cannot de-serialize from JSON. Error: %s", v45);
  }
  int v49 = [v8 objectForKeyedSubscript:@"entries"];
  uint64_t v50 = [v8 objectForKeyedSubscript:@"entries_per_ch"];
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  obuint64_t j = v49;
  uint64_t v9 = [obj countByEnumeratingWithState:&v75 objects:v88 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v76;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v76 != v10) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void **)(*((void *)&v75 + 1) + 8 * i);
        uint64_t v13 = objc_msgSend(obj, "objectForKeyedSubscript:", v12, v46);
        Espresso::dataset_estimator::result_t::load(std::string const&)::$_0::operator()((uint64_t)&v68, v13);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v12 UTF8String]);
        uint64_t v14 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v80, __p);
        uint64_t v15 = *v14;
        if (!*v14)
        {
          int v16 = (uint64_t **)v14;
          uint64_t v15 = operator new(0x90uLL);
          std::string v82 = a1 + 1;
          v15[2] = *(_OWORD *)__p;
          *((void *)v15 + 6) = v67;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v67 = 0;
          *(_OWORD *)((char *)v15 + 104) = 0u;
          *(_OWORD *)((char *)v15 + 120) = 0u;
          *((void *)v15 + 16) = 0;
          *((void *)v15 + 17) = 0;
          *(_OWORD *)((char *)v15 + 56) = 0u;
          *(_OWORD *)((char *)v15 + 72) = 0u;
          *(_OWORD *)((char *)v15 + 88) = 0u;
          *((_DWORD *)v15 + 26) = -1082130432;
          *((void *)v15 + 14) = 0;
          *((void *)v15 + 15) = 0;
          *((unsigned char *)v15 + 136) = 0;
          LOBYTE(v83) = 1;
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v80, v16, (uint64_t *)v15);
          uint64_t v81 = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>>>>::reset[abi:ne180100]((uint64_t)&v81);
        }
        uint64_t v17 = (void *)*((void *)v15 + 14);
        long long v18 = v69;
        *(_OWORD *)((char *)v15 + 56) = v68;
        *(_OWORD *)((char *)v15 + 72) = v18;
        *(_OWORD *)((char *)v15 + 88) = v70;
        *((_DWORD *)v15 + 26) = v71;
        if (v17)
        {
          *((void *)v15 + 15) = v17;
          operator delete(v17);
          *((void *)v15 + 14) = 0;
          *((void *)v15 + 15) = 0;
          *((void *)v15 + 16) = 0;
        }
        v15[7] = v72;
        *((void *)v15 + 16) = v73;
        *((unsigned char *)v15 + 136) = v74;
        if (SHIBYTE(v67) < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v9 = [obj countByEnumeratingWithState:&v75 objects:v88 count:16];
    }
    while (v9);
  }

  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  id v53 = v50;
  uint64_t v52 = [v53 countByEnumeratingWithState:&v62 objects:v87 count:16];
  if (v52)
  {
    uint64_t v51 = *(void *)v63;
    unsigned int v19 = a1 + 3;
    std::string v56 = a1 + 4;
    do
    {
      for (uint64_t j = 0; j != v52; ++j)
      {
        if (*(void *)v63 != v51) {
          objc_enumerationMutation(v53);
        }
        int v20 = *(void **)(*((void *)&v62 + 1) + 8 * j);
        uint64_t v21 = objc_msgSend(v53, "objectForKeyedSubscript:", v20, v46);
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        id v57 = v21;
        uint64_t v22 = [v57 countByEnumeratingWithState:&v58 objects:v86 count:16];
        if (v22)
        {
          uint64_t v23 = *(void *)v59;
          do
          {
            for (uint64_t k = 0; k != v22; ++k)
            {
              if (*(void *)v59 != v23) {
                objc_enumerationMutation(v57);
              }
              float v25 = *(void **)(*((void *)&v58 + 1) + 8 * k);
              std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v20 UTF8String]);
              char v26 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)v19, &v81, __p);
              uint64_t v27 = (char *)*v26;
              if (!*v26)
              {
                uint64_t v28 = (uint64_t **)v26;
                uint64_t v27 = (char *)operator new(0x50uLL);
                *((void *)&v68 + 1) = v56;
                *((_OWORD *)v27 + 2) = *(_OWORD *)__p;
                uint64_t v29 = v67;
                __p[0] = 0;
                __p[1] = 0;
                uint64_t v67 = 0;
                *((void *)v27 + 6) = v29;
                *((void *)v27 + 7) = 0;
                *((void *)v27 + 8) = 0;
                *((void *)v27 + 9) = 0;
                LOBYTE(v69) = 1;
                std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v19, v81, v28, (uint64_t *)v27);
                *(void *)&long long v68 = 0;
                std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v68);
              }
              Espresso::dataset_estimator::result_t::load(std::string const&)::$_0::operator()((uint64_t)&v68, v25);
              unint64_t v30 = *((void *)v27 + 9);
              unint64_t v31 = *((void *)v27 + 8);
              if (v31 >= v30)
              {
                uint64_t v33 = *((void *)v27 + 7);
                uint64_t v34 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v31 - v33) >> 3);
                unint64_t v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) > 0x2E8BA2E8BA2E8BALL) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v36 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v30 - v33) >> 3);
                if (2 * v36 > v35) {
                  unint64_t v35 = 2 * v36;
                }
                if (v36 >= 0x1745D1745D1745DLL) {
                  unint64_t v37 = 0x2E8BA2E8BA2E8BALL;
                }
                else {
                  unint64_t v37 = v35;
                }
                uint64_t v85 = v27 + 72;
                uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>>(v37);
                uint64_t v39 = &v38[88 * v34];
                uint64_t v81 = (uint64_t)v38;
                std::string v82 = (uint64_t **)v39;
                int64_t v84 = &v38[88 * v40];
                long long v41 = v70;
                *((_OWORD *)v39 + 1) = v69;
                *((_OWORD *)v39 + 2) = v41;
                *((_DWORD *)v39 + 12) = v71;
                *(_OWORD *)uint64_t v39 = v68;
                *(_OWORD *)(v39 + 56) = v72;
                *((void *)v39 + 9) = v73;
                uint64_t v73 = 0;
                long long v72 = 0uLL;
                v39[80] = v74;
                BOOL v83 = v39 + 88;
                std::vector<Espresso::dataset_estimator::statistics_entry_t>::__swap_out_circular_buffer((uint64_t *)v27 + 7, &v81);
                uint64_t v42 = *((void *)v27 + 8);
                std::__split_buffer<Espresso::dataset_estimator::statistics_entry_t>::~__split_buffer((uint64_t)&v81);
                uint64_t v43 = (void *)v72;
                *((void *)v27 + 8) = v42;
                if (v43) {
                  operator delete(v43);
                }
              }
              else
              {
                long long v32 = v69;
                *(_OWORD *)unint64_t v31 = v68;
                *(_OWORD *)(v31 + 16) = v32;
                *(_OWORD *)(v31 + 32) = v70;
                *(_DWORD *)(v31 + 48) = v71;
                *(_OWORD *)(v31 + 56) = v72;
                *(void *)(v31 + 72) = v73;
                *(unsigned char *)(v31 + 80) = v74;
                *((void *)v27 + 8) = v31 + 88;
              }
              if (SHIBYTE(v67) < 0) {
                operator delete(__p[0]);
              }
            }
            uint64_t v22 = [v57 countByEnumeratingWithState:&v58 objects:v86 count:16];
          }
          while (v22);
        }
      }
      uint64_t v52 = [v53 countByEnumeratingWithState:&v62 objects:v87 count:16];
    }
    while (v52);
  }
}

void sub_1929F2BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50)
{
  _Unwind_Resume(a1);
}

void Espresso::dataset_estimator::result_t::load(std::string const&)::$_0::operator()(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = -1082130432;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  id v15 = v3;
  uint64_t v4 = [v3 objectForKeyedSubscript:@"min_val"];
  [v4 doubleValue];
  *(void *)a1 = v5;

  int v6 = [v15 objectForKeyedSubscript:@"max_val"];
  [v6 doubleValue];
  *(void *)(a1 + 8) = v7;

  double v8 = [v15 objectForKeyedSubscript:@"mean"];
  [v8 doubleValue];
  *(void *)(a1 + 16) = v9;

  uint64_t v10 = [v15 objectForKeyedSubscript:@"stddev"];
  [v10 doubleValue];
  *(void *)(a1 + 24) = v11;

  uint64_t v12 = [v15 objectForKeyedSubscript:@"mean_sq"];
  [v12 doubleValue];
  *(void *)(a1 + 32) = v13;

  uint64_t v14 = [v15 objectForKeyedSubscript:@"n_samples"];
  *(void *)(a1 + 40) = [v14 unsignedLongValue];
}

void sub_1929F2E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unique_ptr<Espresso::tracer>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<Espresso::tracer>::reset[abi:ne180100]((Espresso::tracer **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 vision::DCN::FaceList::merge_bounding_boxes(uint64_t *a1, char *__p, float32x2_t *a3, double a4, double a5, double a6, __n128 a7)
{
  float32x2_t v9 = a3[3];
  float v10 = *((float *)__p + 7);
  float32x2_t v11 = (float32x2_t)vrev64_s32((int32x2_t)v9);
  a7.n128_f32[0] = v10 + v9.f32[1];
  float v12 = (float)(vmuls_lane_f32(a3[2].f32[0], v9, 1) + (float)(*((float *)__p + 4) * v10)) / (float)(v10 + v9.f32[1]);
  __n128 v19 = a7;
  v9.i32[0] = a3[2].i32[1];
  float32x2_t v13 = vdiv_f32(vmla_n_f32(vmul_f32(v9, v11), *(float32x2_t *)(__p + 20), v10), (float32x2_t)vdup_lane_s32((int32x2_t)a7.n128_u64[0], 0));
  uint64_t v14 = *(void *)__p;
  *(void *)(v14 + 8) = *((void *)__p + 1);
  **((void **)__p + 1) = v14;
  --a1[2];
  operator delete(__p);
  id v15 = (float32x2_t *)*a3;
  v15[1] = a3[1];
  **(void **)&a3[1] = v15;
  --a1[2];
  operator delete(a3);
  int v16 = (char *)operator new(0x20uLL);
  *((float *)v16 + 4) = v12;
  *(float32x2_t *)(v16 + 20) = v13;
  __n128 result = v19;
  *((_DWORD *)v16 + 7) = v19.n128_u32[0];
  uint64_t v18 = *a1;
  *(void *)int v16 = *a1;
  *((void *)v16 + 1) = a1;
  *(void *)(v18 + 8) = v16;
  *a1 = (uint64_t)v16;
  ++a1[2];
  return result;
}

void *Espresso::zephyr::ir_function_object::ir_function_object(void *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v2 = (atomic_ullong *)*((void *)a2 + 3);
  *this = 0;
  this[1] = 0;
  this[2] = v2;
  *this = atomic_fetch_add(v2, 1uLL);
  this[3] = a2;
  return this;
}

{
  atomic_ullong *v2;

  uint64_t v2 = (atomic_ullong *)*((void *)a2 + 3);
  *this = 0;
  this[1] = 0;
  this[2] = v2;
  *this = atomic_fetch_add(v2, 1uLL);
  this[3] = a2;
  return this;
}

uint64_t Espresso::zephyr::function_t::function_t(uint64_t a1, atomic_ullong *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  unint64_t add = atomic_fetch_add(a2, 1uLL);
  *(void *)a1 = &unk_1EE36EDB8;
  *(void *)(a1 + 8) = add;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = a1 + 64;
  *(void *)(a1 + 72) = a1 + 64;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  uint64_t v4 = (char *)operator new(0xC0uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)uint64_t v4 = &unk_1EE38BDE0;
  uint64_t v5 = *(atomic_ullong **)(a1 + 24);
  *(_OWORD *)(v4 + 24) = 0u;
  *((void *)v4 + 5) = v5;
  *((void *)v4 + 3) = atomic_fetch_add(v5, 1uLL);
  *((void *)v4 + 6) = a1;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *((void *)v4 + 13) = 0;
  *((_DWORD *)v4 + 28) = 1065353216;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *((void *)v4 + 23) = 0;
  *(void *)&long long v6 = v4 + 24;
  *((void *)&v6 + 1) = v4;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v6;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  double v8 = (char *)operator new(0xC0uLL);
  *(_OWORD *)(v8 + 8) = 0u;
  *(void *)double v8 = &unk_1EE38BDE0;
  float32x2_t v9 = *(atomic_ullong **)(a1 + 24);
  *(_OWORD *)(v8 + 24) = 0u;
  *((void *)v8 + 5) = v9;
  *((void *)v8 + 3) = atomic_fetch_add(v9, 1uLL);
  *((void *)v8 + 6) = a1;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *((void *)v8 + 13) = 0;
  *((_DWORD *)v8 + 28) = 1065353216;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *((void *)v8 + 23) = 0;
  *(void *)&long long v10 = v8 + 24;
  *((void *)&v10 + 1) = v8;
  float32x2_t v11 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v10;
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  return a1;
}

void sub_1929F3198(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table((uint64_t)(v1 + 11));
  std::__list_imp<std::shared_ptr<Espresso::basic_block::instruction>>::clear(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[7];
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  long long v6 = (std::__shared_weak_count *)v1[5];
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = v1[2];
  v1[2] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  _Unwind_Resume(a1);
}

void Espresso::zephyr::function_t::~function_t(Espresso::zephyr::function_t *this)
{
  *(void *)this = &unk_1EE36EDB8;
  for (uint64_t i = (uint64_t *)*((void *)this + 13); i; uint64_t i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0) {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[2], i[3]);
    }
    else {
      std::string __p = *(std::string *)(i + 2);
    }
    uint64_t v3 = i[5];
    uint64_t v4 = (std::__shared_weak_count *)i[6];
    uint64_t v12 = v3;
    float32x2_t v13 = v4;
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v3 = v12;
    }
    uint64_t v5 = *(void *)(v3 + 8);
    *(void *)(v3 + 8) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  for (uint64_t j = (long long *)*((void *)this + 18); j; uint64_t j = *(long long **)j)
  {
    std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, j + 1);
    uint64_t v7 = *(void *)(v12 + 8);
    *(void *)(v12 + 8) = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::__list_imp<std::shared_ptr<Espresso::basic_block::instruction>>::clear((uint64_t *)this + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table((uint64_t)this + 88);
  std::__list_imp<std::shared_ptr<Espresso::basic_block::instruction>>::clear((uint64_t *)this + 8);
  double v8 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  float32x2_t v9 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
}

void Espresso::zephyr::function_t::get_referenced_objects(Espresso::zephyr::function_t *this@<X0>, uint64_t *a2@<X8>)
{
  v26[4] = *MEMORY[0x1E4F143B8];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = (uint64_t)(a2 + 1);
  uint64_t v4 = (char *)this + 64;
  for (uint64_t i = *((void *)this + 9); (char *)i != v4; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v6 = *(void *)(i + 16);
    uint64_t v7 = v6 + 112;
    for (uint64_t j = *(void *)(v6 + 120); j != v7; uint64_t j = *(void *)(j + 8))
    {
      float32x2_t v9 = *(void **)(j + 16);
      std::__tree<Espresso::zephyr::ir_object const*>::__emplace_unique_key_args<Espresso::zephyr::ir_object const*,Espresso::zephyr::ir_object const*>(a2, (unint64_t)v9, (uint64_t)v9);
      uint64_t v10 = (unint64_t *)v9[15];
      float32x2_t v11 = (unint64_t *)v9[16];
      while (v10 != v11)
      {
        std::__tree<Espresso::zephyr::ir_object const*>::__emplace_unique_key_args<Espresso::zephyr::ir_object const*,Espresso::zephyr::ir_object const*>(a2, *v10, *v10);
        ++v10;
      }
      float32x2_t v13 = (unint64_t *)v9[12];
      uint64_t v12 = (unint64_t *)v9[13];
      while (v13 != v12)
      {
        std::__tree<Espresso::zephyr::ir_object const*>::__emplace_unique_key_args<Espresso::zephyr::ir_object const*,Espresso::zephyr::ir_object const*>(a2, *v13, *v13);
        ++v13;
      }
    }
  }
  uint64_t v14 = *((void *)this + 5);
  v26[0] = *((void *)this + 4);
  v26[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *((void *)this + 7);
  uint64_t v26[2] = *((void *)this + 6);
  v26[3] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  char v16 = 0;
  uint64_t v17 = 0;
  do
  {
    char v18 = v16;
    __n128 v19 = (void *)v26[2 * v17];
    std::__tree<Espresso::zephyr::ir_object const*>::__emplace_unique_key_args<Espresso::zephyr::ir_object const*,Espresso::zephyr::ir_object const*>(a2, (unint64_t)v19, (uint64_t)v19);
    int v20 = (unint64_t *)v19[15];
    uint64_t v21 = (unint64_t *)v19[16];
    while (v20 != v21)
    {
      std::__tree<Espresso::zephyr::ir_object const*>::__emplace_unique_key_args<Espresso::zephyr::ir_object const*,Espresso::zephyr::ir_object const*>(a2, *v20, *v20);
      ++v20;
    }
    uint64_t v23 = (unint64_t *)v19[12];
    uint64_t v22 = (unint64_t *)v19[13];
    while (v23 != v22)
    {
      std::__tree<Espresso::zephyr::ir_object const*>::__emplace_unique_key_args<Espresso::zephyr::ir_object const*,Espresso::zephyr::ir_object const*>(a2, *v23, *v23);
      ++v23;
    }
    char v16 = 1;
    uint64_t v17 = 1;
  }
  while ((v18 & 1) == 0);
  for (uint64_t k = 3; k != -1; k -= 2)
  {
    float v25 = (std::__shared_weak_count *)v26[k];
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
  }
}

void sub_1929F35CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v12 = 24;
  while (1)
  {
    float32x2_t v13 = *(std::__shared_weak_count **)(&a10 + v12);
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    v12 -= 16;
    if (v12 == -8)
    {
      std::__tree<int>::destroy(*v10);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t *std::__tree<Espresso::zephyr::ir_object const*>::__emplace_unique_key_args<Espresso::zephyr::ir_object const*,Espresso::zephyr::ir_object const*>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    float32x2_t v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    *float32x2_t v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    std::__shared_weak_count *v6 = v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      uint64_t *v4 = v10;
      float32x2_t v11 = *v6;
    }
    else
    {
      float32x2_t v11 = v9;
    }
    __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

void Espresso::zephyr::function_t::clear_unreferenced(int8x8_t *this)
{
  Espresso::zephyr::function_t::get_referenced_objects((Espresso::zephyr::function_t *)this, &v36);
  for (uint64_t i = (int8x8_t *)this[9]; i != &this[8]; uint64_t i = (int8x8_t *)i[1])
  {
    int8x8_t v3 = i[2];
    uint64_t v4 = *(void *)&v3 + 112;
    for (uint64_t j = *(void *)(*(void *)&v3 + 120); j != v4; uint64_t j = *(void *)(j + 8))
      std::__tree<Espresso::zephyr::ir_object const*>::__emplace_unique_key_args<Espresso::zephyr::ir_object const*,Espresso::zephyr::ir_object const*>(&v36, *(void *)(j + 16), *(void *)(j + 16));
  }
  uint64_t v6 = (int8x8_t *)this[18];
  if (v6)
  {
    while (1)
    {
      uint64_t v7 = v37;
      if (v37)
      {
        unint64_t v8 = (unint64_t)v6[5];
        do
        {
          unint64_t v9 = v7[4];
          if (v8 >= v9)
          {
            if (v9 >= v8)
            {
              float32x2_t v13 = (int8x8_t *)*v6;
              goto LABEL_42;
            }
            ++v7;
          }
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      int8x8_t v10 = this[17];
      unint64_t v11 = (unint64_t)v6[1];
      uint8x8_t v12 = (uint8x8_t)vcnt_s8(v10);
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] > 1uLL)
      {
        if (v11 >= *(void *)&v10) {
          v11 %= *(void *)&v10;
        }
      }
      else
      {
        v11 &= *(void *)&v10 - 1;
      }
      float32x2_t v13 = (int8x8_t *)*v6;
      int8x8_t v14 = this[16];
      uint64_t v15 = *(int8x8_t **)(*(void *)&v14 + 8 * v11);
      do
      {
        char v16 = v15;
        uint64_t v15 = (int8x8_t *)*v15;
      }
      while (v15 != v6);
      if (v16 != &this[18])
      {
        unint64_t v17 = (unint64_t)v16[1];
        if (v12.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&v10) {
            v17 %= *(void *)&v10;
          }
        }
        else
        {
          v17 &= *(void *)&v10 - 1;
        }
        char v18 = (void *)*v6;
        if (v17 == v11) {
          goto LABEL_34;
        }
      }
      if (!v13) {
        break;
      }
      unint64_t v19 = (unint64_t)v13[1];
      if (v12.u32[0] > 1uLL)
      {
        if (v19 >= *(void *)&v10) {
          v19 %= *(void *)&v10;
        }
      }
      else
      {
        v19 &= *(void *)&v10 - 1;
      }
      char v18 = (void *)*v6;
      if (v19 != v11) {
        break;
      }
LABEL_35:
      unint64_t v20 = v18[1];
      if (v12.u32[0] > 1uLL)
      {
        if (v20 >= *(void *)&v10) {
          v20 %= *(void *)&v10;
        }
      }
      else
      {
        v20 &= *(void *)&v10 - 1;
      }
      if (v20 != v11)
      {
        *(void *)(*(void *)&this[16] + 8 * v20) = v16;
        char v18 = (void *)*v6;
      }
LABEL_41:
      *char v16 = (int8x8_t)v18;
      int8x8_t *v6 = 0;
      --*(void *)&this[19];
      uint64_t v38 = v6;
      uint64_t v39 = this + 18;
      char v40 = 1;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v38);
LABEL_42:
      uint64_t v6 = v13;
      if (!v13) {
        goto LABEL_43;
      }
    }
    *(void *)(*(void *)&v14 + 8 * v11) = 0;
    char v18 = (void *)*v6;
LABEL_34:
    if (!v18) {
      goto LABEL_41;
    }
    goto LABEL_35;
  }
LABEL_43:
  uint64_t v21 = (int8x8_t *)this[13];
  if (v21)
  {
    while (1)
    {
      uint64_t v22 = v37;
      if (v37)
      {
        unint64_t v23 = (unint64_t)v21[5];
        do
        {
          unint64_t v24 = v22[4];
          if (v23 >= v24)
          {
            if (v24 >= v23)
            {
              uint64_t v28 = (int8x8_t *)*v21;
              goto LABEL_78;
            }
            ++v22;
          }
          uint64_t v22 = (void *)*v22;
        }
        while (v22);
      }
      int8x8_t v25 = this[12];
      unint64_t v26 = (unint64_t)v21[1];
      uint8x8_t v27 = (uint8x8_t)vcnt_s8(v25);
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] > 1uLL)
      {
        if (v26 >= *(void *)&v25) {
          v26 %= *(void *)&v25;
        }
      }
      else
      {
        v26 &= *(void *)&v25 - 1;
      }
      uint64_t v28 = (int8x8_t *)*v21;
      int8x8_t v29 = this[11];
      unint64_t v30 = *(int8x8_t **)(*(void *)&v29 + 8 * v26);
      do
      {
        unint64_t v31 = v30;
        unint64_t v30 = (int8x8_t *)*v30;
      }
      while (v30 != v21);
      if (v31 != &this[13])
      {
        unint64_t v32 = (unint64_t)v31[1];
        if (v27.u32[0] > 1uLL)
        {
          if (v32 >= *(void *)&v25) {
            v32 %= *(void *)&v25;
          }
        }
        else
        {
          v32 &= *(void *)&v25 - 1;
        }
        uint64_t v33 = (void *)*v21;
        if (v32 == v26) {
          goto LABEL_70;
        }
      }
      if (!v28) {
        break;
      }
      unint64_t v34 = (unint64_t)v28[1];
      if (v27.u32[0] > 1uLL)
      {
        if (v34 >= *(void *)&v25) {
          v34 %= *(void *)&v25;
        }
      }
      else
      {
        v34 &= *(void *)&v25 - 1;
      }
      uint64_t v33 = (void *)*v21;
      if (v34 != v26) {
        break;
      }
LABEL_71:
      unint64_t v35 = v33[1];
      if (v27.u32[0] > 1uLL)
      {
        if (v35 >= *(void *)&v25) {
          v35 %= *(void *)&v25;
        }
      }
      else
      {
        v35 &= *(void *)&v25 - 1;
      }
      if (v35 != v26)
      {
        *(void *)(*(void *)&this[11] + 8 * vstd::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)this + 35) = v31;
        uint64_t v33 = (void *)*v21;
      }
LABEL_77:
      *unint64_t v31 = (int8x8_t)v33;
      int8x8_t *v21 = 0;
      --*(void *)&this[14];
      uint64_t v38 = v21;
      uint64_t v39 = this + 13;
      char v40 = 1;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v38);
LABEL_78:
      uint64_t v21 = v28;
      if (!v28) {
        goto LABEL_79;
      }
    }
    *(void *)(*(void *)&v29 + 8 * v26) = 0;
    uint64_t v33 = (void *)*v21;
LABEL_70:
    if (!v33) {
      goto LABEL_77;
    }
    goto LABEL_71;
  }
LABEL_79:
  std::__tree<int>::destroy(v37);
}

void sub_1929F3A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

char *Espresso::zephyr::function_t::new_value(uint64_t a1, uint64_t a2)
{
  v65[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(void *)uint64_t v5 = &unk_1EE38BE18;
  *(_OWORD *)(v5 + 24) = 0u;
  uint64_t v6 = *(atomic_ullong **)(a1 + 24);
  *((void *)v5 + 5) = v6;
  *((void *)v5 + 3) = atomic_fetch_add(v6, 1uLL);
  *((void *)v5 + 6) = a1;
  *(_OWORD *)(v5 + 56) = 0u;
  uint64_t v7 = (void **)(v5 + 56);
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *((void *)v5 + 13) = 0;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v62 = *(std::string *)a2;
  }
  unint64_t __val = 0;
LABEL_5:
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v62);
  int8x8_t v9 = *(int8x8_t *)(a1 + 136);
  if (v9)
  {
    unint64_t v10 = v8;
    uint8x8_t v11 = (uint8x8_t)vcnt_s8(v9);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v2 = v8;
      if (v8 >= *(void *)&v9) {
        unint64_t v2 = v8 % *(void *)&v9;
      }
    }
    else
    {
      unint64_t v2 = (*(void *)&v9 - 1) & v8;
    }
    float32x2_t v13 = *(unsigned __int8 ***)(*(void *)(a1 + 128) + 8 * v2);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v10 == v15)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)&v62))
          {
            if (*(char *)(a2 + 23) >= 0) {
              size_t v16 = *(unsigned __int8 *)(a2 + 23);
            }
            else {
              size_t v16 = *(void *)(a2 + 8);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v64, v16 + 1);
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v17 = &v64;
            }
            else {
              unint64_t v17 = (std::string *)v64.__r_.__value_.__r.__words[0];
            }
            if (v16)
            {
              if (*(char *)(a2 + 23) >= 0) {
                char v18 = (const void *)a2;
              }
              else {
                char v18 = *(const void **)a2;
              }
              memmove(v17, v18, v16);
            }
            *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 95;
            std::to_string(&v63, __val);
            if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v19 = &v63;
            }
            else {
              unint64_t v19 = (std::string *)v63.__r_.__value_.__r.__words[0];
            }
            if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v63.__r_.__value_.__l.__size_;
            }
            uint64_t v21 = std::string::append(&v64, (const std::string::value_type *)v19, size);
            std::string::size_type v22 = v21->__r_.__value_.__r.__words[0];
            v65[0] = v21->__r_.__value_.__l.__size_;
            *(void *)((char *)v65 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
            char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
            v21->__r_.__value_.__l.__size_ = 0;
            v21->__r_.__value_.__r.__words[2] = 0;
            v21->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v62.__r_.__value_.__l.__data_);
            }
            v62.__r_.__value_.__r.__words[0] = v22;
            v62.__r_.__value_.__l.__size_ = v65[0];
            *(std::string::size_type *)((char *)&v62.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v65 + 7);
            *((unsigned char *)&v62.__r_.__value_.__s + 23) = v23;
            if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v63.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v64.__r_.__value_.__l.__data_);
            }
            ++__val;
            goto LABEL_5;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= *(void *)&v9) {
              v15 %= *(void *)&v9;
            }
          }
          else
          {
            v15 &= *(void *)&v9 - 1;
          }
          if (v15 != v2) {
            break;
          }
        }
      }
    }
  }
  if (v5[79] < 0) {
    operator delete(*v7);
  }
  *(_OWORD *)uint64_t v7 = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
  *((void *)v5 + 9) = *((void *)&v62.__r_.__value_.__l + 2);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 24))(&v64, a1);
  std::string::size_type v24 = v64.__r_.__value_.__r.__words[0];
  v64.__r_.__value_.__r.__words[0] = 0;
  uint64_t v25 = *((void *)v5 + 4);
  *((void *)v5 + 4) = v24;
  if (v25)
  {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    std::string::size_type v26 = v64.__r_.__value_.__r.__words[0];
    v64.__r_.__value_.__r.__words[0] = 0;
    if (v26) {
      (*(void (**)(std::string::size_type))(*(void *)v26 + 8))(v26);
    }
  }
  unint64_t v27 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v7);
  unint64_t v28 = v27;
  unint64_t v29 = *(void *)(a1 + 136);
  if (v29)
  {
    uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
    v30.i16[0] = vaddlv_u8(v30);
    unint64_t v31 = v30.u32[0];
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v2 = v27;
      if (v27 >= v29) {
        unint64_t v2 = v27 % v29;
      }
    }
    else
    {
      unint64_t v2 = (v29 - 1) & v27;
    }
    unint64_t v32 = *(std::string::size_type **)(*(void *)(a1 + 128) + 8 * v2);
    if (v32)
    {
      for (std::string::size_type j = *v32; j; std::string::size_type j = *(void *)j)
      {
        unint64_t v34 = *(void *)(j + 8);
        if (v34 == v28)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(j + 16), (unsigned __int8 *)v7)) {
            goto LABEL_127;
          }
        }
        else
        {
          if (v31 > 1)
          {
            if (v34 >= v29) {
              v34 %= v29;
            }
          }
          else
          {
            v34 &= v29 - 1;
          }
          if (v34 != v2) {
            break;
          }
        }
      }
    }
  }
  unint64_t v35 = operator new(0x38uLL);
  uint64_t v36 = (void *)(a1 + 144);
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  v64.__r_.__value_.__l.__size_ = a1 + 144;
  v64.__r_.__value_.__s.__data_[16] = 0;
  void *v35 = 0;
  v35[1] = v28;
  unint64_t v37 = (std::string *)(v35 + 2);
  if (v5[79] < 0)
  {
    std::string::__init_copy_ctor_external(v37, *((const std::string::value_type **)v5 + 7), *((void *)v5 + 8));
  }
  else
  {
    *(_OWORD *)&v37->__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    v35[4] = *((void *)v5 + 9);
  }
  v35[5] = 0;
  v35[6] = 0;
  v64.__r_.__value_.__s.__data_[16] = 1;
  float v38 = (float)(unint64_t)(*(void *)(a1 + 152) + 1);
  float v39 = *(float *)(a1 + 160);
  if (!v29 || (float)(v39 * (float)v29) < v38)
  {
    BOOL v40 = 1;
    if (v29 >= 3) {
      BOOL v40 = (v29 & (v29 - 1)) != 0;
    }
    unint64_t v41 = v40 | (2 * v29);
    unint64_t v42 = vcvtps_u32_f32(v38 / v39);
    if (v41 <= v42) {
      int8x8_t prime = (int8x8_t)v42;
    }
    else {
      int8x8_t prime = (int8x8_t)v41;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v29 = *(void *)(a1 + 136);
    if (*(void *)&prime > v29) {
      goto LABEL_83;
    }
    if (*(void *)&prime < v29)
    {
      unint64_t v50 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 152) / *(float *)(a1 + 160));
      if (v29 < 3 || (uint8x8_t v51 = (uint8x8_t)vcnt_s8((int8x8_t)v29), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
      {
        unint64_t v50 = std::__next_prime(v50);
      }
      else
      {
        uint64_t v52 = 1 << -(char)__clz(v50 - 1);
        if (v50 >= 2) {
          unint64_t v50 = v52;
        }
      }
      if (*(void *)&prime <= v50) {
        int8x8_t prime = (int8x8_t)v50;
      }
      if (*(void *)&prime >= v29)
      {
        unint64_t v29 = *(void *)(a1 + 136);
      }
      else
      {
        if (prime)
        {
LABEL_83:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v44 = operator new(8 * *(void *)&prime);
          uint64_t v45 = *(void **)(a1 + 128);
          *(void *)(a1 + 128) = v44;
          if (v45) {
            operator delete(v45);
          }
          uint64_t v46 = 0;
          *(int8x8_t *)(a1 + 136) = prime;
          do
            *(void *)(*(void *)(a1 + 128) + 8 * v46++) = 0;
          while (*(void *)&prime != v46);
          id v47 = (void *)*v36;
          if (*v36)
          {
            unint64_t v48 = v47[1];
            uint8x8_t v49 = (uint8x8_t)vcnt_s8(prime);
            v49.i16[0] = vaddlv_u8(v49);
            if (v49.u32[0] > 1uLL)
            {
              if (v48 >= *(void *)&prime) {
                v48 %= *(void *)&prime;
              }
            }
            else
            {
              v48 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 128) + 8 * v48) = v36;
            id v53 = (void *)*v47;
            if (*v47)
            {
              do
              {
                unint64_t v54 = v53[1];
                if (v49.u32[0] > 1uLL)
                {
                  if (v54 >= *(void *)&prime) {
                    v54 %= *(void *)&prime;
                  }
                }
                else
                {
                  v54 &= *(void *)&prime - 1;
                }
                if (v54 != v48)
                {
                  uint64_t v55 = *(void *)(a1 + 128);
                  if (!*(void *)(v55 + 8 * v54))
                  {
                    *(void *)(v55 + 8 * v54) = v47;
                    goto LABEL_108;
                  }
                  *id v47 = *v53;
                  void *v53 = **(void **)(*(void *)(a1 + 128) + 8 * v54);
                  **(void **)(*(void *)(a1 + 128) + 8 * v54) = v53;
                  id v53 = v47;
                }
                unint64_t v54 = v48;
LABEL_108:
                id v47 = v53;
                id v53 = (void *)*v53;
                unint64_t v48 = v54;
              }
              while (v53);
            }
          }
          unint64_t v29 = (unint64_t)prime;
          goto LABEL_112;
        }
        long long v60 = *(void **)(a1 + 128);
        *(void *)(a1 + 128) = 0;
        if (v60) {
          operator delete(v60);
        }
        unint64_t v29 = 0;
        *(void *)(a1 + 136) = 0;
      }
    }
LABEL_112:
    if ((v29 & (v29 - 1)) != 0)
    {
      if (v28 >= v29) {
        unint64_t v2 = v28 % v29;
      }
      else {
        unint64_t v2 = v28;
      }
    }
    else
    {
      unint64_t v2 = (v29 - 1) & v28;
    }
  }
  std::string v56 = *(std::string::size_type **)(*(void *)(a1 + 128) + 8 * v2);
  std::string::size_type j = v64.__r_.__value_.__r.__words[0];
  if (v56)
  {
    *(void *)v64.__r_.__value_.__l.__data_ = *v56;
LABEL_125:
    std::string::size_type *v56 = j;
    goto LABEL_126;
  }
  *(void *)v64.__r_.__value_.__l.__data_ = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = j;
  *(void *)(*(void *)(a1 + 128) + 8 * v2) = v36;
  if (*(void *)j)
  {
    unint64_t v57 = *(void *)(*(void *)j + 8);
    if ((v29 & (v29 - 1)) != 0)
    {
      if (v57 >= v29) {
        v57 %= v29;
      }
    }
    else
    {
      v57 &= v29 - 1;
    }
    std::string v56 = (std::string::size_type *)(*(void *)(a1 + 128) + 8 * v57);
    goto LABEL_125;
  }
LABEL_126:
  v64.__r_.__value_.__r.__words[0] = 0;
  ++*(void *)(a1 + 152);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v64);
LABEL_127:
  atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
  long long v58 = *(std::__shared_weak_count **)(j + 48);
  *(void *)(j + 40) = v5 + 24;
  *(void *)(j + 48) = v5;
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v5);
  return v5 + 24;
}

void sub_1929F4214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  nitro::nitro_function::nitro_function(v30);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::zephyr::value_t>::__on_zero_shared(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

void std::__shared_ptr_emplace<Espresso::zephyr::value_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BE18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::zephyr::value_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BE18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

char *Espresso::zephyr::function_t::new_detached_node(uint64_t a1, uint64_t a2)
{
  v66[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (char *)operator new(0xC0uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(void *)uint64_t v5 = &unk_1EE38BDE0;
  *(_OWORD *)(v5 + 24) = 0u;
  uint64_t v6 = *(atomic_ullong **)(a1 + 24);
  *((void *)v5 + 5) = v6;
  *((void *)v5 + 3) = atomic_fetch_add(v6, 1uLL);
  *((void *)v5 + 6) = a1;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *((void *)v5 + 13) = 0;
  *((_DWORD *)v5 + 28) = 1065353216;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *((void *)v5 + 23) = 0;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v63 = *(std::string *)a2;
  }
  unint64_t v7 = 0;
LABEL_5:
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v63);
  int8x8_t v9 = *(int8x8_t *)(a1 + 96);
  if (v9)
  {
    unint64_t v10 = v8;
    uint8x8_t v11 = (uint8x8_t)vcnt_s8(v9);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v2 = v8;
      if (v8 >= *(void *)&v9) {
        unint64_t v2 = v8 % *(void *)&v9;
      }
    }
    else
    {
      unint64_t v2 = (*(void *)&v9 - 1) & v8;
    }
    float32x2_t v13 = *(unsigned __int8 ***)(*(void *)(a1 + 88) + 8 * v2);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v10 == v15)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)&v63))
          {
            if (*(char *)(a2 + 23) >= 0) {
              size_t v16 = *(unsigned __int8 *)(a2 + 23);
            }
            else {
              size_t v16 = *(void *)(a2 + 8);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v65, v16 + 1);
            if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v17 = &v65;
            }
            else {
              unint64_t v17 = (std::string *)v65.__r_.__value_.__r.__words[0];
            }
            if (v16)
            {
              if (*(char *)(a2 + 23) >= 0) {
                char v18 = (const void *)a2;
              }
              else {
                char v18 = *(const void **)a2;
              }
              memmove(v17, v18, v16);
            }
            *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 95;
            std::to_string(&v64, v7);
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v19 = &v64;
            }
            else {
              unint64_t v19 = (std::string *)v64.__r_.__value_.__r.__words[0];
            }
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v64.__r_.__value_.__l.__size_;
            }
            uint64_t v21 = std::string::append(&v65, (const std::string::value_type *)v19, size);
            std::string::size_type v22 = v21->__r_.__value_.__r.__words[0];
            v66[0] = v21->__r_.__value_.__l.__size_;
            *(void *)((char *)v66 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
            char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
            v21->__r_.__value_.__l.__size_ = 0;
            v21->__r_.__value_.__r.__words[2] = 0;
            v21->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v63.__r_.__value_.__l.__data_);
            }
            v63.__r_.__value_.__r.__words[0] = v22;
            v63.__r_.__value_.__l.__size_ = v66[0];
            *(std::string::size_type *)((char *)&v63.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v66 + 7);
            *((unsigned char *)&v63.__r_.__value_.__s + 23) = v23;
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v64.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v65.__r_.__value_.__l.__data_);
            }
            ++v7;
            goto LABEL_5;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= *(void *)&v9) {
              v15 %= *(void *)&v9;
            }
          }
          else
          {
            v15 &= *(void *)&v9 - 1;
          }
          if (v15 != v2) {
            break;
          }
        }
      }
    }
  }
  std::string::size_type v24 = (void **)(v5 + 168);
  if (v5[191] < 0) {
    operator delete(*v24);
  }
  *(_OWORD *)std::string::size_type v24 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
  *((void *)v5 + 23) = *((void *)&v63.__r_.__value_.__l + 2);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v65, a1);
  std::string::size_type v25 = v65.__r_.__value_.__r.__words[0];
  v65.__r_.__value_.__r.__words[0] = 0;
  uint64_t v26 = *((void *)v5 + 4);
  *((void *)v5 + 4) = v25;
  if (v26)
  {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    std::string::size_type v27 = v65.__r_.__value_.__r.__words[0];
    v65.__r_.__value_.__r.__words[0] = 0;
    if (v27) {
      (*(void (**)(std::string::size_type))(*(void *)v27 + 8))(v27);
    }
  }
  unint64_t v28 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 168));
  unint64_t v29 = v28;
  unint64_t v30 = *(void *)(a1 + 96);
  if (v30)
  {
    uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
    v31.i16[0] = vaddlv_u8(v31);
    unint64_t v32 = v31.u32[0];
    if (v31.u32[0] > 1uLL)
    {
      unint64_t v2 = v28;
      if (v28 >= v30) {
        unint64_t v2 = v28 % v30;
      }
    }
    else
    {
      unint64_t v2 = (v30 - 1) & v28;
    }
    uint64_t v33 = *(std::string::size_type **)(*(void *)(a1 + 88) + 8 * v2);
    if (v33)
    {
      for (std::string::size_type j = *v33; j; std::string::size_type j = *(void *)j)
      {
        unint64_t v35 = *(void *)(j + 8);
        if (v35 == v29)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(j + 16), (unsigned __int8 *)v5 + 168))
          {
            long long v61 = v5 + 24;
            goto LABEL_127;
          }
        }
        else
        {
          if (v32 > 1)
          {
            if (v35 >= v30) {
              v35 %= v30;
            }
          }
          else
          {
            v35 &= v30 - 1;
          }
          if (v35 != v2) {
            break;
          }
        }
      }
    }
  }
  uint64_t v36 = operator new(0x38uLL);
  unint64_t v37 = (void *)(a1 + 104);
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
  v65.__r_.__value_.__l.__size_ = a1 + 104;
  v65.__r_.__value_.__s.__data_[16] = 0;
  *uint64_t v36 = 0;
  v36[1] = v29;
  float v38 = (std::string *)(v36 + 2);
  if (v5[191] < 0)
  {
    std::string::__init_copy_ctor_external(v38, *((const std::string::value_type **)v5 + 21), *((void *)v5 + 22));
  }
  else
  {
    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)v24;
    v36[4] = *((void *)v5 + 23);
  }
  v36[5] = 0;
  v36[6] = 0;
  v65.__r_.__value_.__s.__data_[16] = 1;
  float v39 = (float)(unint64_t)(*(void *)(a1 + 112) + 1);
  float v40 = *(float *)(a1 + 120);
  if (!v30 || (float)(v40 * (float)v30) < v39)
  {
    BOOL v41 = 1;
    if (v30 >= 3) {
      BOOL v41 = (v30 & (v30 - 1)) != 0;
    }
    unint64_t v42 = v41 | (2 * v30);
    unint64_t v43 = vcvtps_u32_f32(v39 / v40);
    if (v42 <= v43) {
      int8x8_t prime = (int8x8_t)v43;
    }
    else {
      int8x8_t prime = (int8x8_t)v42;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v30 = *(void *)(a1 + 96);
    if (*(void *)&prime > v30) {
      goto LABEL_83;
    }
    if (*(void *)&prime < v30)
    {
      unint64_t v51 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 112) / *(float *)(a1 + 120));
      if (v30 < 3 || (uint8x8_t v52 = (uint8x8_t)vcnt_s8((int8x8_t)v30), v52.i16[0] = vaddlv_u8(v52), v52.u32[0] > 1uLL))
      {
        unint64_t v51 = std::__next_prime(v51);
      }
      else
      {
        uint64_t v53 = 1 << -(char)__clz(v51 - 1);
        if (v51 >= 2) {
          unint64_t v51 = v53;
        }
      }
      if (*(void *)&prime <= v51) {
        int8x8_t prime = (int8x8_t)v51;
      }
      if (*(void *)&prime >= v30)
      {
        unint64_t v30 = *(void *)(a1 + 96);
      }
      else
      {
        if (prime)
        {
LABEL_83:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v45 = operator new(8 * *(void *)&prime);
          uint64_t v46 = *(void **)(a1 + 88);
          *(void *)(a1 + 88) = v45;
          if (v46) {
            operator delete(v46);
          }
          uint64_t v47 = 0;
          *(int8x8_t *)(a1 + 96) = prime;
          do
            *(void *)(*(void *)(a1 + 88) + 8 * v47++) = 0;
          while (*(void *)&prime != v47);
          unint64_t v48 = (void *)*v37;
          if (*v37)
          {
            unint64_t v49 = v48[1];
            uint8x8_t v50 = (uint8x8_t)vcnt_s8(prime);
            v50.i16[0] = vaddlv_u8(v50);
            if (v50.u32[0] > 1uLL)
            {
              if (v49 >= *(void *)&prime) {
                v49 %= *(void *)&prime;
              }
            }
            else
            {
              v49 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 88) + 8 * v49) = v37;
            unint64_t v54 = (void *)*v48;
            if (*v48)
            {
              do
              {
                unint64_t v55 = v54[1];
                if (v50.u32[0] > 1uLL)
                {
                  if (v55 >= *(void *)&prime) {
                    v55 %= *(void *)&prime;
                  }
                }
                else
                {
                  v55 &= *(void *)&prime - 1;
                }
                if (v55 != v49)
                {
                  uint64_t v56 = *(void *)(a1 + 88);
                  if (!*(void *)(v56 + 8 * v55))
                  {
                    *(void *)(v56 + 8 * v55) = v48;
                    goto LABEL_108;
                  }
                  void *v48 = *v54;
                  void *v54 = **(void **)(*(void *)(a1 + 88) + 8 * v55);
                  **(void **)(*(void *)(a1 + 88) + 8 * v55) = v54;
                  unint64_t v54 = v48;
                }
                unint64_t v55 = v49;
LABEL_108:
                unint64_t v48 = v54;
                unint64_t v54 = (void *)*v54;
                unint64_t v49 = v55;
              }
              while (v54);
            }
          }
          unint64_t v30 = (unint64_t)prime;
          goto LABEL_112;
        }
        std::string v62 = *(void **)(a1 + 88);
        *(void *)(a1 + 88) = 0;
        if (v62) {
          operator delete(v62);
        }
        unint64_t v30 = 0;
        *(void *)(a1 + 96) = 0;
      }
    }
LABEL_112:
    if ((v30 & (v30 - 1)) != 0)
    {
      if (v29 >= v30) {
        unint64_t v2 = v29 % v30;
      }
      else {
        unint64_t v2 = v29;
      }
    }
    else
    {
      unint64_t v2 = (v30 - 1) & v29;
    }
  }
  unint64_t v57 = *(std::string::size_type **)(*(void *)(a1 + 88) + 8 * v2);
  std::string::size_type j = v65.__r_.__value_.__r.__words[0];
  if (v57)
  {
    *(void *)v65.__r_.__value_.__l.__data_ = *v57;
    long long v61 = v5 + 24;
LABEL_125:
    *unint64_t v57 = j;
    goto LABEL_126;
  }
  *(void *)v65.__r_.__value_.__l.__data_ = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = j;
  *(void *)(*(void *)(a1 + 88) + 8 * v2) = v37;
  long long v61 = v5 + 24;
  if (*(void *)j)
  {
    unint64_t v58 = *(void *)(*(void *)j + 8);
    if ((v30 & (v30 - 1)) != 0)
    {
      if (v58 >= v30) {
        v58 %= v30;
      }
    }
    else
    {
      v58 &= v30 - 1;
    }
    unint64_t v57 = (std::string::size_type *)(*(void *)(a1 + 88) + 8 * v58);
    goto LABEL_125;
  }
LABEL_126:
  v65.__r_.__value_.__r.__words[0] = 0;
  ++*(void *)(a1 + 112);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v65);
LABEL_127:
  atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
  long long v59 = *(std::__shared_weak_count **)(j + 48);
  *(void *)(j + 40) = v61;
  *(void *)(j + 48) = v5;
  if (v59) {
    nitro::nitro_function::nitro_function(v59);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v5);
  return v61;
}

void sub_1929F4B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  nitro::nitro_function::nitro_function(v28);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr::function_t::foreach_block(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3 == a1 + 64)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    int v5 = 0;
    do
    {
      uint64_t v8 = *(void *)(v3 + 16);
      uint64_t v6 = *(void *)(a2 + 24);
      if (!v6) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      v5 |= (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, &v8);
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return v5 & 1;
}

uint64_t Espresso::MPSGraphCompilerEngine::context::supports_custom_compute_path_for_blob(uint64_t a1, _DWORD *a2)
{
  return (*a2 < 0xFu) & (0x50Bu >> *a2);
}

void Espresso::MPSGraphCompilerEngine::context::create_compiler_for_network(uint64_t a1, void *a2)
{
  unsigned int v18 = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  uint64_t v3 = operator new(0x100uLL);
  uint64_t v4 = v3;
  v3[1] = 0;
  v3[2] = 0;
  void *v3 = &unk_1EE3876C8;
  int v5 = (char *)(v3 + 3);
  unint64_t v7 = (void *)*a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v3[4] = 0;
  v3[5] = 0;
  *((unsigned char *)v3 + 48) = 0;
  v3[7] = 0;
  v3[8] = 0;
  v3[9] = 0;
  v3[11] = 0;
  v3[10] = v3 + 11;
  v3[12] = 0;
  v3[13] = 0;
  v3[14] = 0;
  v3[15] = 0;
  v3[3] = &unk_1EE357650;
  v3[16] = 0;
  uint64_t v8 = v3 + 16;
  v3[19] = 0;
  v3[22] = 0;
  v3[21] = 0;
  *((unsigned char *)v3 + 144) = 0;
  v3[17] = 0;
  v3[24] = 0;
  v3[20] = v3 + 21;
  v3[23] = v3 + 24;
  v3[28] = 0;
  v3[27] = 0;
  v3[25] = 0;
  v3[26] = v3 + 27;
  v3[30] = 0;
  v3[31] = 0;
  v3[29] = 0;
  if ((***(unsigned int (****)(void))(v7[2] + 8))(*(void *)(v7[2] + 8)) != 50008)
  {
    int8x8_t v9 = (void *)v7[157];
    if (v9)
    {
      if (v9)
      {
        uint64_t v10 = v7[158];
        if (!v10) {
          goto LABEL_13;
        }
        goto LABEL_11;
      }
    }
LABEL_12:
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  int8x8_t v9 = (void *)v7[2];
  if (!v9) {
    goto LABEL_12;
  }
  if (!v9) {
    goto LABEL_12;
  }
  uint64_t v10 = v7[3];
  if (v10) {
LABEL_11:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
LABEL_13:
  uint8x8_t v11 = (std::__shared_weak_count *)v4[17];
  v4[16] = v9;
  v4[17] = v10;
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v12 = (std::__shared_weak_count *)v4[5];
  v4[4] = v7;
  v4[5] = v6;
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  if (!*v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Wrong context");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v13 = *a2 + 528;
  unint64_t v19 = &v18;
  int8x8_t v14 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v13, &v18, (uint64_t)&std::piecewise_construct, &v19);
  *(void *)&long long v15 = v5;
  *((void *)&v15 + 1) = v4;
  size_t v16 = (std::__shared_weak_count *)v14[4];
  *(_OWORD *)(v14 + 3) = v15;
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_1929F4FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v14);
  unsigned int v18 = *(std::__shared_weak_count **)(v10 + 248);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100](v13, 0);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*(char **)(v10 + 216));
  std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(*(void **)(v10 + 192));
  std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::destroy(*(char **)(v10 + 168));

  unint64_t v19 = *(std::__shared_weak_count **)(v10 + 136);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  void *v15 = &unk_1EE35F3A0;
  unint64_t v20 = *v16;
  if (*v16)
  {
    *(void *)(v10 + 112) = v20;
    operator delete(v20);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v12, *(void **)(v10 + 88));
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  *(void *)(v10 + 24) = &unk_1EE32A8C8;
  uint64_t v21 = *(std::__shared_weak_count **)(v10 + 40);
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v10);
  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::compiler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::compiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3876C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::compiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3876C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::MPSGraphCompilerEngine::context::~context(id *this)
{
  Espresso::abstract_context::~abstract_context(this);

  JUMPOUT(0x192FF16B0);
}

void *Espresso::MPSGraphCompilerEngine::context::get_device_model_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "GPU");
}

double Espresso::MPSGraphCompilerEngine::context::begin_batch@<D0>(void *a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0x90uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_1EE387620;
  double result = 0.0;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  v3[64] = 1;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *((_WORD *)v3 + 60) = 256;
  *((void *)v3 + 16) = 0;
  *((void *)v3 + 17) = 0;
  *((void *)v3 + 3) = &unk_1EE3574E8;
  *a1 = v3 + 24;
  a1[1] = v3;
  return result;
}

void Espresso::MPSGraphCompilerEngine::batch::~batch(Espresso::MPSGraphCompilerEngine::batch *this)
{
  Espresso::abstract_batch::~abstract_batch(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::batch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387620;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_48@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::upsample_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::upsample_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::upsample_kernel_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_47@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::transpose_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::transpose_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transpose_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_46@<D0>(uint64_t *a1@<X1>, void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::topk_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::topk_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::topk_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_45@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::tile_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::tile_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::tile_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_44@<D0>(uint64_t *a1@<X1>, const void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::tensor_zero_pad_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_43@<D0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::stack_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_42@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::squeeze_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::squeeze_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::squeeze_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_41@<D0>(uint64_t *a1@<X1>, const void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::split_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::split_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_nd_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_40@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::split_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::split_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_39@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::space_to_depth_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_38@<D0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_37@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::softmax_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::softmax_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_36@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::slice_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::slice_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::slice_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_35@<D0>(uint64_t *a1@<X1>, void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::scatter_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_34@<D0>(uint64_t *a1@<X1>, long long *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_33@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reshape_like_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reshape_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reshape_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reshape_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reduce_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reduce_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reduce_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::pool3d_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::pool3d_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool3d_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::pool_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::pool_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::one_hot_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::one_hot_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::one_hot_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::lrn_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::lrn_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::lrn_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::load_random_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::load_random_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_random_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::l2_norm_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::inner_product_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::inner_product_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::inner_product_uniforms const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_slice_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_slice_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_slice_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_padding_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_padding_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_concat_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_concat_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_concat_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<D0>(uint64_t *a1@<X1>, void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::gather_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<D0>(uint64_t *a1@<X1>, void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::flatten_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::flatten_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::flatten_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::fill_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::fill_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::fill_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::expand_dims_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::elementwise_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::elementwise_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<D0>(uint64_t *a1@<X1>, const std::string *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::einsum_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::einsum_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::einsum_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<D0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::dev_op_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::dev_op_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dev_op_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_and_resize_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::crop_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::crop_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<D0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::copy_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::copy_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::conv3d_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::conv3d_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::conv3d_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::convolution_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::concat_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::concat_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::concat_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<D0>(uint64_t *a1@<X1>, void *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::cast_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::cast_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cast_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batchnorm_params const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batch_matmul_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::activation_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso22MPSGraphCompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void Espresso::MPSGraphCompilerEngine::engine::~engine(Espresso::MPSGraphCompilerEngine::engine *this)
{
  *(void *)this = &unk_1EE332290;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE332290;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

__n128 Espresso::MPSGraphCompilerEngine::engine::create_context@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  uint64_t v4 = operator new(0xA8uLL);
  v4[1] = 0;
  uint64_t v4[2] = 0;
  void *v4 = &unk_1EE387690;
  uint64_t v5 = Espresso::abstract_context::abstract_context((uint64_t)(v4 + 3), a1);
  int8x16_t v4[3] = &unk_1EE357598;
  *((unsigned char *)v4 + 96) = 1;
  *((unsigned char *)v4 + 68) = 0;
  *((unsigned char *)v4 + 80) = 1;
  *((unsigned char *)v4 + 148) = 1;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1929F5ED0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387690;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 Espresso::MPSGraphCompilerEngine::engine::make_abstract_blob_container@<Q0>(uint64_t *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0xD8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE3875B0;
  uint64_t v8 = *a1;
  unint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v6 + 3) = &unk_1EE359E28;
  *((_DWORD *)v6 + 13) = -1;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((void *)v6 + 11) = 0;
  *((void *)v6 + 12) = v8;
  *((void *)v6 + 13) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v6 + 14) = 0;
  *((void *)v6 + 15) = 0;
  *((_DWORD *)v6 + 32) = 0;
  *((_DWORD *)v6 + 34) = 1065353216;
  *(void *)(v6 + 140) = 0xFFFFFFFF00000000;
  *((_DWORD *)v6 + 37) = 1;
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 5) = 0;
  *((_DWORD *)v6 + 12) = 0;
  *(_OWORD *)(v6 + 152) = 0uLL;
  *(_OWORD *)(v6 + 168) = 0uLL;
  *((void *)v6 + 3) = &unk_1EE3573E8;
  *((void *)v6 + 24) = 0;
  *((void *)v6 + 26) = 16;
  *((_DWORD *)v6 + 46) = a2;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3875B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3875B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1929F6318(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::pass_find_shared_weights::run_on_network(Espresso::pass_find_shared_weights *this@<X0>, Espresso::net *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  if (*((void *)a2 + 5) == *((void *)a2 + 4))
  {
    uint64_t v96 = 0;
  }
  else
  {
    uint64_t v96 = 0;
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = operator new(8uLL);
      uint64_t v6 = 0;
      *uint64_t v5 = 0x6400000000;
      v107[0] = &off_1EE37C6F0;
      std::string::size_type v108 = v107;
      int v7 = -1;
      do
      {
        uint64_t v8 = *(unsigned int (****)(void))(*(void *)(*(void *)(*(void *)(*((void *)a2 + 4) + 16 * v4)
                                                                             + 64)
                                                                 + 8)
                                                     + 8);
        if ((**v8)(v8) == *(_DWORD *)((char *)v5 + v6)) {
          int v7 = *(_DWORD *)((char *)v5 + v6);
        }
        v6 += 4;
      }
      while (v6 != 8);
      if (v7 == -1) {
        goto LABEL_81;
      }
      uint64_t v9 = *(void *)(*((void *)a2 + 4) + 16 * v4);
      uint64_t v10 = *(const void **)(v9 + 64);
      if (!v10) {
        goto LABEL_81;
      }
      if (!v93) {
        goto LABEL_81;
      }
      uint8x8_t v11 = *(std::__shared_weak_count **)(v9 + 72);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v90 = v11;
      if (v4)
      {
        uint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = *(void *)(*((void *)a2 + 4) + 16 * v12);
          int8x8_t v14 = *(void **)(v13 + 64);
          if (v14)
          {
            if (v15)
            {
              uint64_t v16 = (uint64_t)v15;
              unint64_t v17 = *(std::__shared_weak_count **)(v13 + 72);
              if (v17)
              {
                atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
                int8x8_t v14 = *(void **)(*(void *)(*((void *)a2 + 4) + 16 * v12) + 64);
              }
              if ((***(unsigned int (****)(void))(v14[1] + 8))(*(void *)(v14[1] + 8)) != v7) {
                goto LABEL_70;
              }
              (*(void (**)(unsigned char *__return_ptr))(*(void *)v93 + 456))(buf);
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v16 + 456))(&v101, v16);
              BOOL v18 = match_blob<std::shared_ptr<Espresso::blob<float,4>>>(*(uint64_t *)buf, v101);
              if (v102) {
                nitro::nitro_function::nitro_function(v102);
              }
              if (*(void *)&buf[8]) {
                nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
              }
              if (!v18) {
                goto LABEL_70;
              }
              (*(void (**)(unsigned char *__return_ptr))(*(void *)v93 + 448))(buf);
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v16 + 448))(&v101, v16);
              BOOL v19 = match_blob<std::shared_ptr<Espresso::blob<float,1>>>(*(uint64_t *)buf, v101);
              if (v102) {
                nitro::nitro_function::nitro_function(v102);
              }
              if (*(void *)&buf[8]) {
                nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
              }
              if (!v19) {
                goto LABEL_70;
              }
              (*(void (**)(unsigned char *__return_ptr))(*(void *)v93 + 552))(buf);
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v16 + 552))(&v101, v16);
              BOOL v20 = (*(void *)buf == 0) == (v101 == 0);
              if (*(void *)buf && v101)
              {
                uint64_t v21 = 0;
                uint64_t v22 = *(int *)(*(void *)buf + 8);
                uint64_t v23 = v22;
                do
                {
                  v23 *= *(int *)(*(void *)buf + 12 + v21);
                  v21 += 4;
                }
                while (v21 != 12);
                uint64_t v24 = 0;
                uint64_t v25 = *(int *)(v101 + 8);
                do
                {
                  v25 *= *(int *)(v101 + 12 + v24);
                  v24 += 4;
                }
                while (v24 != 12);
                if (((v25 ^ v23) & 0x7FFFFFFFFFFFFFFFLL) != 0)
                {
                  BOOL v20 = 0;
                }
                else
                {
                  for (uint64_t i = 0; i != 12; i += 4)
                    v22 *= *(int *)(*(void *)buf + 12 + i);
                  BOOL v20 = memcmp(*(const void **)(*(void *)buf + 24), *(const void **)(v101 + 24), 2 * v22) == 0;
                }
              }
              if (v102) {
                nitro::nitro_function::nitro_function(v102);
              }
              if (*(void *)&buf[8]) {
                nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
              }
              if (!v20) {
                goto LABEL_70;
              }
              if (!v108) {
                goto LABEL_56;
              }
              uint64_t v99 = v93;
              std::string::size_type v100 = v90;
              if (v90) {
                atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v97 = v16;
              long long v98 = v17;
              if (v17) {
                atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (!v108) {
                std::__throw_bad_function_call[abi:ne180100]();
              }
              char v27 = (*(uint64_t (**)(void *, void **, uint64_t *))(*v108 + 48))(v108, &v99, &v97);
              if (v98) {
                nitro::nitro_function::nitro_function(v98);
              }
              if (v100) {
                nitro::nitro_function::nitro_function(v100);
              }
              if (v27)
              {
LABEL_56:
                *(void *)buf = v93;
                *(void *)&buf[8] = v90;
                if (v90) {
                  atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v101 = v16;
                long long v102 = v17;
                if (v17) {
                  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                unint64_t v28 = (Espresso *)check_serialization_blobs((uint64_t)buf, (uint64_t)&v101);
                int v30 = (int)v28;
                if (v17) {
                  nitro::nitro_function::nitro_function(v17);
                }
                if (v90) {
                  nitro::nitro_function::nitro_function(v90);
                }
                if (v30)
                {
                  uint8x8_t v31 = Espresso::espresso_os_log_subsystem(v28, v29);
                  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v32 = *(void *)(*((void *)a2 + 4) + 16 * v4);
                    uint64_t v33 = (void *)(v32 + 16);
                    if (*(char *)(v32 + 39) < 0) {
                      uint64_t v33 = (void *)*v33;
                    }
                    *(_DWORD *)buf = 136315394;
                    *(void *)&buf[4] = v33;
                    *(_WORD *)&buf[12] = 2048;
                    *(void *)&buf[14] = v12;
                    _os_log_impl(&dword_1920CB000, v31, OS_LOG_TYPE_INFO, "pass_find_shared_weights: sharing weights to layer %s from %zu\n", buf, 0x16u);
                  }

                  std::string::operator=((std::string *)(*(void *)(*((void *)a2 + 4) + 16 * v4) + 128), (const std::string *)(*(void *)(*((void *)a2 + 4) + 16 * v12) + 16));
                  int v30 = 1;
                }
              }
              else
              {
LABEL_70:
                int v30 = 6;
              }
              if (v17) {
                nitro::nitro_function::nitro_function(v17);
              }
              if (v30 != 6 && v30) {
                break;
              }
            }
          }
          if (++v12 == v4) {
            goto LABEL_76;
          }
        }
      }
      else
      {
LABEL_76:
        int v30 = 0;
      }
      if (v90) {
        nitro::nitro_function::nitro_function(v90);
      }
      if (v30) {
        uint64_t v34 = 1;
      }
      else {
LABEL_81:
      }
        uint64_t v34 = 0;
      std::__function::__value_func<BOOL ()(std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::generic_convolution_kernel>)>::~__value_func[abi:ne180100](v107);
      uint64_t v35 = 0;
      uint64_t v106 = 0;
      int v36 = -1;
      do
      {
        unint64_t v37 = *(unsigned int (****)(void))(*(void *)(*(void *)(*(void *)(*((void *)a2 + 4) + 16 * v4)
                                                                              + 64)
                                                                  + 8)
                                                      + 8);
        if ((**v37)(v37) == *(_DWORD *)((char *)v5 + v35)) {
          int v36 = *(_DWORD *)((char *)v5 + v35);
        }
        v35 += 4;
      }
      while (v35 != 8);
      if (v36 == -1) {
        goto LABEL_154;
      }
      uint64_t v38 = *(void *)(*((void *)a2 + 4) + 16 * v4);
      float v39 = *(const void **)(v38 + 64);
      if (!v39) {
        goto LABEL_154;
      }
      if (!v94) {
        goto LABEL_154;
      }
      float v40 = *(std::__shared_weak_count **)(v38 + 72);
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v88 = v40;
      uint64_t v91 = v34;
      if (v4)
      {
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        while (1)
        {
          uint64_t v43 = *(void *)(*((void *)a2 + 4) + v41);
          uint64_t v44 = *(void **)(v43 + 64);
          if (v44)
          {
            if (v45)
            {
              uint64_t v46 = (uint64_t)v45;
              uint64_t v47 = *(std::__shared_weak_count **)(v43 + 72);
              if (v47)
              {
                atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v44 = *(void **)(*(void *)(*((void *)a2 + 4) + v41) + 64);
              }
              if ((***(unsigned int (****)(void))(v44[1] + 8))(*(void *)(v44[1] + 8)) != v36) {
                goto LABEL_143;
              }
              (*(void (**)(unsigned char *__return_ptr))(*(void *)v94 + 416))(buf);
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v46 + 416))(&v101, v46);
              BOOL v48 = (*(void *)buf == 0) == (v101 == 0);
              if (*(void *)buf && v101)
              {
                size_t v49 = 4 * *(int *)(*(void *)buf + 8) * (uint64_t)*(int *)(*(void *)buf + 12);
                BOOL v48 = v49 == 4 * *(int *)(v101 + 8) * (uint64_t)*(int *)(v101 + 12)
                   && memcmp(*(const void **)(*(void *)buf + 16), *(const void **)(v101 + 16), v49) == 0;
              }
              if (v102) {
                nitro::nitro_function::nitro_function(v102);
              }
              if (*(void *)&buf[8]) {
                nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
              }
              if (!v48) {
                goto LABEL_143;
              }
              (*(void (**)(unsigned char *__return_ptr))(*(void *)v94 + 408))(buf);
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v46 + 408))(&v101, v46);
              BOOL v50 = match_blob<std::shared_ptr<Espresso::blob<float,1>>>(*(uint64_t *)buf, v101);
              if (v102) {
                nitro::nitro_function::nitro_function(v102);
              }
              if (*(void *)&buf[8]) {
                nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
              }
              if (!v50) {
                goto LABEL_143;
              }
              (*(void (**)(unsigned char *__return_ptr))(*(void *)v94 + 472))(buf);
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v46 + 472))(&v101, v46);
              BOOL v51 = match_blob<std::shared_ptr<Espresso::blob<unsigned short,2>>>(*(uint64_t *)buf, v101);
              if (v102) {
                nitro::nitro_function::nitro_function(v102);
              }
              if (*(void *)&buf[8]) {
                nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
              }
              if (!v51) {
                goto LABEL_143;
              }
              if (!v106) {
                goto LABEL_129;
              }
              uint64_t v99 = v94;
              std::string::size_type v100 = v88;
              if (v88) {
                atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v97 = v46;
              long long v98 = v47;
              if (v47) {
                atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (!v106) {
                std::__throw_bad_function_call[abi:ne180100]();
              }
              char v52 = (*(uint64_t (**)(uint64_t, void **, uint64_t *))(*(void *)v106 + 48))(v106, &v99, &v97);
              if (v98) {
                nitro::nitro_function::nitro_function(v98);
              }
              if (v100) {
                nitro::nitro_function::nitro_function(v100);
              }
              if (v52)
              {
LABEL_129:
                *(void *)buf = v94;
                *(void *)&buf[8] = v88;
                if (v88) {
                  atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v101 = v46;
                long long v102 = v47;
                if (v47) {
                  atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v53 = (Espresso *)check_serialization_blobs((uint64_t)buf, (uint64_t)&v101);
                int v55 = (int)v53;
                if (v47) {
                  nitro::nitro_function::nitro_function(v47);
                }
                if (v88) {
                  nitro::nitro_function::nitro_function(v88);
                }
                if (v55)
                {
                  uint64_t v56 = Espresso::espresso_os_log_subsystem(v53, v54);
                  if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v57 = *(void *)(*((void *)a2 + 4) + 16 * v4);
                    unint64_t v58 = (void *)(v57 + 16);
                    if (*(char *)(v57 + 39) < 0) {
                      unint64_t v58 = (void *)*v58;
                    }
                    *(_DWORD *)buf = 136315394;
                    *(void *)&buf[4] = v58;
                    *(_WORD *)&buf[12] = 2048;
                    *(void *)&buf[14] = v42;
                    _os_log_impl(&dword_1920CB000, v56, OS_LOG_TYPE_INFO, "pass_find_shared_weights: sharing weights to layer %s from %zu\n", buf, 0x16u);
                  }

                  std::string::operator=((std::string *)(*(void *)(*((void *)a2 + 4) + 16 * v4) + 128), (const std::string *)(*(void *)(*((void *)a2 + 4) + v41) + 16));
                  int v55 = 1;
                }
              }
              else
              {
LABEL_143:
                int v55 = 6;
              }
              if (v47) {
                nitro::nitro_function::nitro_function(v47);
              }
              if (v55 != 6 && v55) {
                break;
              }
            }
          }
          ++v42;
          v41 += 16;
          if (v4 == v42) {
            goto LABEL_149;
          }
        }
      }
      else
      {
LABEL_149:
        int v55 = 0;
      }
      if (v88) {
        nitro::nitro_function::nitro_function(v88);
      }
      uint64_t v34 = v91;
      if (v55) {
        uint64_t v59 = 1;
      }
      else {
LABEL_154:
      }
        uint64_t v59 = 0;
      std::__function::__value_func<BOOL ()(std::shared_ptr<Espresso::generic_inner_product_kernel>,std::shared_ptr<Espresso::generic_inner_product_kernel>)>::~__value_func[abi:ne180100](v105);
      uint64_t v60 = 0;
      uint64_t v104 = 0;
      int v61 = -1;
      do
      {
        std::string v62 = *(unsigned int (****)(void))(*(void *)(*(void *)(*(void *)(*((void *)a2 + 4) + 16 * v4)
                                                                              + 64)
                                                                  + 8)
                                                      + 8);
        if ((**v62)(v62) == *(_DWORD *)((char *)v5 + v60)) {
          int v61 = *(_DWORD *)((char *)v5 + v60);
        }
        v60 += 4;
      }
      while (v60 != 8);
      if (v61 == -1) {
        goto LABEL_227;
      }
      uint64_t v63 = *(void *)(*((void *)a2 + 4) + 16 * v4);
      std::string v64 = *(const void **)(v63 + 64);
      if (!v64) {
        goto LABEL_227;
      }
      if (!v95) {
        goto LABEL_227;
      }
      std::string v65 = *(std::__shared_weak_count **)(v63 + 72);
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v89 = v65;
      uint64_t v92 = v34;
      uint64_t v87 = v59;
      if (v4)
      {
        uint64_t v66 = 0;
        uint64_t v67 = 0;
        while (1)
        {
          uint64_t v68 = *(void *)(*((void *)a2 + 4) + v66);
          long long v69 = *(void **)(v68 + 64);
          if (v69)
          {
            if (v70)
            {
              uint64_t v71 = (uint64_t)v70;
              long long v72 = *(std::__shared_weak_count **)(v68 + 72);
              if (v72)
              {
                atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
                long long v69 = *(void **)(*(void *)(*((void *)a2 + 4) + v66) + 64);
              }
              if ((***(unsigned int (****)(void))(v69[1] + 8))(*(void *)(v69[1] + 8)) != v61) {
                goto LABEL_216;
              }
              (*(void (**)(unsigned char *__return_ptr))(*(void *)v95 + 400))(buf);
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v71 + 400))(&v101, v71);
              BOOL v73 = (*(void *)buf == 0) == (v101 == 0);
              if (*(void *)buf && v101)
              {
                size_t v74 = *(int *)(*(void *)buf + 12) * (uint64_t)*(int *)(*(void *)buf + 8);
                BOOL v73 = v74 == *(int *)(v101 + 12) * (uint64_t)*(int *)(v101 + 8)
                   && memcmp(*(const void **)(*(void *)buf + 16), *(const void **)(v101 + 16), v74) == 0;
              }
              if (v102) {
                nitro::nitro_function::nitro_function(v102);
              }
              if (*(void *)&buf[8]) {
                nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
              }
              if (!v73) {
                goto LABEL_216;
              }
              (*(void (**)(unsigned char *__return_ptr))(*(void *)v95 + 392))(buf);
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v71 + 392))(&v101, v71);
              BOOL v75 = match_blob<std::shared_ptr<Espresso::blob<float,4>>>(*(uint64_t *)buf, v101);
              if (v102) {
                nitro::nitro_function::nitro_function(v102);
              }
              if (*(void *)&buf[8]) {
                nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
              }
              if (!v75) {
                goto LABEL_216;
              }
              (*(void (**)(unsigned char *__return_ptr))(*(void *)v95 + 408))(buf);
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v71 + 408))(&v101, v71);
              BOOL v76 = match_blob<std::shared_ptr<Espresso::blob<unsigned short,2>>>(*(uint64_t *)buf, v101);
              if (v102) {
                nitro::nitro_function::nitro_function(v102);
              }
              if (*(void *)&buf[8]) {
                nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
              }
              if (!v76) {
                goto LABEL_216;
              }
              if (!v104) {
                goto LABEL_202;
              }
              uint64_t v99 = v95;
              std::string::size_type v100 = v89;
              if (v89) {
                atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v97 = v71;
              long long v98 = v72;
              if (v72) {
                atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (!v104) {
                std::__throw_bad_function_call[abi:ne180100]();
              }
              char v77 = (*(uint64_t (**)(uint64_t, void **, uint64_t *))(*(void *)v104 + 48))(v104, &v99, &v97);
              if (v98) {
                nitro::nitro_function::nitro_function(v98);
              }
              if (v100) {
                nitro::nitro_function::nitro_function(v100);
              }
              if (v77)
              {
LABEL_202:
                *(void *)buf = v95;
                *(void *)&buf[8] = v89;
                if (v89) {
                  atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v101 = v71;
                long long v102 = v72;
                if (v72) {
                  atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                long long v78 = (Espresso *)check_serialization_blobs((uint64_t)buf, (uint64_t)&v101);
                int v80 = (int)v78;
                if (v72) {
                  nitro::nitro_function::nitro_function(v72);
                }
                if (v89) {
                  nitro::nitro_function::nitro_function(v89);
                }
                if (v80)
                {
                  uint64_t v81 = Espresso::espresso_os_log_subsystem(v78, v79);
                  if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v82 = *(void *)(*((void *)a2 + 4) + 16 * v4);
                    BOOL v83 = (void *)(v82 + 16);
                    if (*(char *)(v82 + 39) < 0) {
                      BOOL v83 = (void *)*v83;
                    }
                    *(_DWORD *)buf = 136315394;
                    *(void *)&buf[4] = v83;
                    *(_WORD *)&buf[12] = 2048;
                    *(void *)&buf[14] = v67;
                    _os_log_impl(&dword_1920CB000, v81, OS_LOG_TYPE_INFO, "pass_find_shared_weights: sharing weights to layer %s from %zu\n", buf, 0x16u);
                  }

                  std::string::operator=((std::string *)(*(void *)(*((void *)a2 + 4) + 16 * v4) + 128), (const std::string *)(*(void *)(*((void *)a2 + 4) + v66) + 16));
                  int v80 = 1;
                }
              }
              else
              {
LABEL_216:
                int v80 = 6;
              }
              if (v72) {
                nitro::nitro_function::nitro_function(v72);
              }
              if (v80 != 6 && v80) {
                break;
              }
            }
          }
          ++v67;
          v66 += 16;
          if (v4 == v67) {
            goto LABEL_222;
          }
        }
      }
      else
      {
LABEL_222:
        int v80 = 0;
      }
      if (v89) {
        nitro::nitro_function::nitro_function(v89);
      }
      uint64_t v34 = v92;
      uint64_t v59 = v87;
      if (v80) {
        uint64_t v84 = 1;
      }
      else {
LABEL_227:
      }
        uint64_t v84 = 0;
      v96 += v34 + v59 + v84;
      std::__function::__value_func<BOOL ()(std::shared_ptr<Espresso::generic_quantized_gather_kernel>,std::shared_ptr<Espresso::generic_quantized_gather_kernel>)>::~__value_func[abi:ne180100](v103);
      operator delete(v5);
      ++v4;
    }
    while (v4 < (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4);
  }
  uint64_t v85 = Espresso::espresso_os_log_subsystem(this, (const char *)a2);
  if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&buf[4] = v96;
    _os_log_impl(&dword_1920CB000, v85, OS_LOG_TYPE_INFO, "pass_find_shared_weights: shared identical weights for %zu layers", buf, 0xCu);
  }

  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
}

void sub_1929F7574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  std::__function::__value_func<BOOL ()(std::shared_ptr<Espresso::generic_inner_product_kernel>,std::shared_ptr<Espresso::generic_inner_product_kernel>)>::~__value_func[abi:ne180100](&a29);
  operator delete(v29);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::generic_convolution_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(std::shared_ptr<Espresso::generic_inner_product_kernel>,std::shared_ptr<Espresso::generic_inner_product_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(std::shared_ptr<Espresso::generic_quantized_gather_kernel>,std::shared_ptr<Espresso::generic_quantized_gather_kernel>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL match_blob<std::shared_ptr<Espresso::blob<float,4>>>(uint64_t a1, uint64_t a2)
{
  BOOL v2 = (a1 == 0) == (a2 == 0);
  if (a1 && a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(int *)(a1 + 8);
    uint64_t v5 = v4;
    do
    {
      v5 *= *(int *)(a1 + 12 + v3);
      v3 += 4;
    }
    while (v3 != 12);
    uint64_t v6 = 0;
    uint64_t v7 = *(int *)(a2 + 8);
    do
    {
      v7 *= *(int *)(a2 + 12 + v6);
      v6 += 4;
    }
    while (v6 != 12);
    if (((v7 ^ v5) & 0x3FFFFFFFFFFFFFFFLL) != 0)
    {
      return 0;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(const void **)(a2 + 24);
      do
      {
        v4 *= *(int *)(a1 + 12 + v8);
        v8 += 4;
      }
      while (v8 != 12);
      return memcmp(*(const void **)(a1 + 24), v9, 4 * v4) == 0;
    }
  }
  return v2;
}

BOOL match_blob<std::shared_ptr<Espresso::blob<unsigned short,2>>>(uint64_t a1, uint64_t a2)
{
  BOOL v2 = (a1 == 0) == (a2 == 0);
  if (a1 && a2)
  {
    size_t v3 = 2 * *(int *)(a1 + 8) * (uint64_t)*(int *)(a1 + 12);
    return v3 == 2 * *(int *)(a2 + 8) * (uint64_t)*(int *)(a2 + 12)
        && memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), v3) == 0;
  }
  return v2;
}

uint64_t check_serialization_blobs(uint64_t a1, uint64_t a2)
{
  long long v21 = 0u;
  long long v22 = 0u;
  int v23 = 1065353216;
  uint64_t v4 = *(void **)(*(void *)a1 + 152);
  uint64_t v5 = *(void *)a1 + 160;
  if (v4 != (void *)v5)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v21, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      uint64_t v6 = (void *)v4[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v4[2];
          BOOL v17 = *v7 == (void)v4;
          uint64_t v4 = v7;
        }
        while (!v17);
      }
      uint64_t v4 = v7;
    }
    while (v7 != (void *)v5);
  }
  uint64_t v8 = *(void **)(*(void *)a2 + 152);
  uint64_t v9 = *(void *)a2 + 160;
  if (v8 != (void *)v9)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v21, (uint64_t)(v8 + 4), (uint64_t)(v8 + 4));
      uint64_t v10 = (void *)v8[1];
      if (v10)
      {
        do
        {
          uint8x8_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint8x8_t v11 = (void *)v8[2];
          BOOL v17 = *v11 == (void)v8;
          uint64_t v8 = v11;
        }
        while (!v17);
      }
      uint64_t v8 = v11;
    }
    while (v11 != (void *)v9);
  }
  for (uint64_t i = (void *)v22; i; uint64_t i = (void *)*i)
  {
    uint64_t v13 = (uint64_t *)std::map<std::string,Espresso::blob_numerical_properties>::at(*(void *)a1 + 152, i + 2);
    int8x8_t v14 = (uint64_t *)std::map<std::string,Espresso::blob_numerical_properties>::at(*(void *)a2 + 152, i + 2);
    uint64_t v15 = *v13;
    uint64_t v16 = *v14;
    if (*v13) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17)
    {
      if ((v15 == 0) != (v16 == 0)) {
        goto LABEL_27;
      }
    }
    else
    {
      size_t v18 = *(int *)(v15 + 8);
      if (v18 != *(_DWORD *)(v16 + 8) || memcmp(*(const void **)(v15 + 16), *(const void **)(v16 + 16), v18))
      {
LABEL_27:
        uint64_t v19 = 0;
        goto LABEL_28;
      }
    }
  }
  uint64_t v19 = 1;
LABEL_28:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v21);
  return v19;
}

void sub_1929F7BD8()
{
}

BOOL match_blob<std::shared_ptr<Espresso::blob<float,1>>>(uint64_t a1, uint64_t a2)
{
  BOOL v2 = (a1 == 0) == (a2 == 0);
  if (a1 && a2)
  {
    size_t v3 = 4 * *(int *)(a1 + 8);
    return v3 == 4 * *(int *)(a2 + 8) && memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), v3) == 0;
  }
  return v2;
}

void *std::__function::__func<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0>,BOOL ()(std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::generic_convolution_kernel>)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0>,BOOL ()(std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::generic_convolution_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso24pass_find_shared_weights14run_on_networkERNS_3netEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0>,BOOL ()(std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::generic_convolution_kernel>)>::operator()(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v4 = *a2;
  size_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v6 = *a3;
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  if (!match_blob<std::shared_ptr<Espresso::blob<float,1>>>(v4[61], v6[61])
    || !match_blob<std::shared_ptr<Espresso::blob<float,1>>>(v4[63], v6[63]))
  {
    goto LABEL_16;
  }
  uint64_t v7 = v4[65];
  uint64_t v8 = v6[65];
  if (v7) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    BOOL v10 = (v7 == 0) == (v8 == 0);
    goto LABEL_17;
  }
  uint64_t v11 = 0;
  size_t v12 = *(int *)(v7 + 8);
  size_t v13 = v12;
  do
  {
    v13 *= *(int *)(v7 + 12 + v11);
    v11 += 4;
  }
  while (v11 != 12);
  uint64_t v14 = 0;
  uint64_t v15 = *(int *)(v8 + 8);
  do
  {
    v15 *= *(int *)(v8 + 12 + v14);
    v14 += 4;
  }
  while (v14 != 12);
  if (v13 == v15)
  {
    uint64_t v16 = 0;
    BOOL v17 = *(const void **)(v7 + 24);
    uint64_t v18 = v7 + 12;
    do
    {
      v12 *= *(int *)(v18 + v16);
      v16 += 4;
    }
    while (v16 != 12);
    BOOL v10 = memcmp(v17, *(const void **)(v8 + 24), v12) == 0;
  }
  else
  {
LABEL_16:
    BOOL v10 = 0;
  }
LABEL_17:
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return v10;
}

void std::__function::__func<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0>,BOOL ()(std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::generic_convolution_kernel>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &off_1EE37C6F0;
}

void *std::__function::__func<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0>,BOOL ()(std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::generic_convolution_kernel>)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &off_1EE37C6F0;
  return result;
}

void std::__function::__func<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_find_shared_weights::run_on_network(Espresso::net &)::$_0>,BOOL ()(std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::generic_convolution_kernel>)>::~__func()
{
}

void Espresso::pass_find_shared_weights::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_find_shared_weights::~pass_find_shared_weights(Espresso::pass_find_shared_weights *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_find_shared_weights>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_find_shared_weights>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388030;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_find_shared_weights>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::abstract_kernel_with_weights_grad_::clear_weights(Espresso::abstract_kernel_with_weights_grad_ *this)
{
}

void Espresso::generic_convolution_kernel::create_weights_fp16_blob(Espresso::generic_convolution_kernel *this@<X0>, void *a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 464))(&v3);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,Espresso::blob<unsigned short,4>::UnitializedBlobType,void>(a2, v3, SHIDWORD(v3), v4, v6 * v5);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
}

void sub_1929F8034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *Espresso::generic_convolution_kernel::dequantized_weights_from_ranges@<X0>(void *this@<X0>, void *a2@<X8>)
{
  if (this[63] && (uint64_t v3 = this, this[65]))
  {
    this = (void *)(*(uint64_t (**)(void *))(*this + 472))(this);
    uint64_t v4 = *((unsigned int *)v3 + 86);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = *a2;
      uint64_t v9 = *(int *)(*a2 + 12) * (uint64_t)*(int *)(*a2 + 8) * *(int *)(*a2 + 16);
      uint64_t v10 = *(void *)(v3[63] + 16);
      uint64_t v11 = (*(_DWORD *)(*a2 + 12) * *(_DWORD *)(*a2 + 8) * *(_DWORD *)(*a2 + 16));
      do
      {
        if ((int)v11 >= 1)
        {
          float v12 = *(float *)(v10 + 4 * v7);
          float v13 = *(float *)(v10 + 4 * (v7 + v4)) - v12;
          uint64_t v14 = (float *)(*(void *)(v8 + 24) + v6);
          this = (void *)(*(void *)(v3[65] + 24) + v5);
          uint64_t v15 = v11;
          do
          {
            unsigned int v16 = *(unsigned __int8 *)this;
            this = (void *)((char *)this + 1);
            *v14++ = v12 + (float)((float)((float)v16 * 0.0039216) * v13);
            --v15;
          }
          while (v15);
        }
        ++v7;
        v6 += 4 * v9;
        v5 += v9;
      }
      while (v7 != v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

void Espresso::generic_convolution_kernel::set_f16_weights(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v16, *(void *)a2 + 8);
  uint64_t v6 = 0;
  uint64_t v7 = v16;
  uint64_t v8 = *(void **)(v16 + 24);
  vImagePixelCount v9 = *(int *)(*(void *)a2 + 8);
  do
  {
    v9 *= *(int *)(*(void *)a2 + 12 + v6);
    v6 += 4;
  }
  while (v6 != 12);
  src.data = *(void **)(*(void *)a2 + 24);
  src.height = 1;
  src.width = v9;
  src.rowBytes = 2 * v9;
  dest.data = v8;
  dest.height = 1;
  dest.width = v9;
  dest.rowBytes = 4 * v9;
  vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  uint64_t v10 = v17;
  uint64_t v14 = v7;
  uint64_t v15 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  float v13 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 424))(a1, &v14, &v12);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1929F8294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_convolution_kernel::get_shuffled_weights_shape(Espresso::generic_convolution_kernel *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((_DWORD *)this + 105);
  if (v4 <= 1) {
    int v4 = 1;
  }
  int v5 = *((_DWORD *)this + 87) / v4;
  int v7 = v5 - 1;
  BOOL v6 = v5 < 1;
  int v8 = v5 + 2;
  if (!v6) {
    int v8 = v7;
  }
  int v9 = (v8 >> 2) + 1;
  int v10 = *((_DWORD *)this + 106);
  if (v10 <= 1) {
    int v10 = 1;
  }
  int v11 = v10 * *((_DWORD *)this + 86);
  int v12 = v11 - 1;
  BOOL v6 = v11 < 1;
  int v13 = v11 + 2;
  if (!v6) {
    int v13 = v12;
  }
  int v14 = (v13 >> 2) + 1;
  uint64_t v15 = operator new(0x18uLL);
  uint64_t v16 = *((void *)this + 44);
  void *v15 = 0x400000004;
  v15[1] = v16;
  *((_DWORD *)v15 + 4) = v9;
  *((_DWORD *)v15 + 5) = v14;
  *(_OWORD *)a2 = *(_OWORD *)v15;
  *(_DWORD *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 20) = 6;

  operator delete(v15);
}

void Espresso::generic_convolution_kernel::get_quantization_lut_shape(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 256;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 20) = 1;
}

_DWORD *Espresso::generic_convolution_kernel::get_biases_shape@<X0>(_DWORD *this@<X0>, uint64_t a2@<X8>)
{
  int v2 = this[106];
  if (v2 <= 1) {
    int v2 = 1;
  }
  int v3 = v2 * this[86];
  if (this[104]) {
    v3 *= 4;
  }
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 12) = 0;
  *(void *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 20) = 1;
  return this;
}

void Espresso::generic_convolution_kernel::create_quantization_ranges_blob(Espresso::generic_convolution_kernel *this@<X0>, void *a2@<X8>)
{
}

void Espresso::generic_convolution_kernel::create_quantization_lut_blob(void *a1@<X8>)
{
}

void Espresso::generic_convolution_kernel::create_quantized_weights_blob(Espresso::generic_convolution_kernel *this@<X0>, void *a2@<X8>)
{
  int v2 = *((_DWORD *)this + 105);
  if (v2 <= 1) {
    int v2 = 1;
  }
  int v3 = *((_DWORD *)this + 87) / v2;
  int v4 = *((_DWORD *)this + 106);
  if (v4 <= 1) {
    int v4 = 1;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 88), *((_DWORD *)this + 89), v3, v4 * *((_DWORD *)this + 86));
}

void Espresso::generic_convolution_kernel::create_shuffled_weights_blob(Espresso::generic_convolution_kernel *this@<X0>, void *a2@<X8>)
{
  int v2 = *((_DWORD *)this + 105);
  if (v2 <= 1) {
    int v2 = 1;
  }
  int v3 = *((_DWORD *)this + 87) / v2;
  int v5 = v3 - 1;
  BOOL v4 = v3 < 1;
  int v6 = v3 + 2;
  if (!v4) {
    int v6 = v5;
  }
  int v7 = (v6 >> 2) + 1;
  int v8 = *((_DWORD *)this + 106);
  if (v8 <= 1) {
    int v8 = 1;
  }
  int v9 = v8 * *((_DWORD *)this + 86);
  int v10 = v9 - 1;
  BOOL v4 = v9 < 1;
  int v11 = v9 + 2;
  if (!v4) {
    int v11 = v10;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,6>,std::allocator<Espresso::blob<float,6>>,int &,int &,int &,int &,int &,int &,void>(a2, 4, 4, *((_DWORD *)this + 88), *((_DWORD *)this + 89), v7, (v11 >> 2) + 1);
}

double Espresso::generic_convolution_kernel::weights_blob_shape@<D0>(Espresso::generic_convolution_kernel *this@<X0>, uint64_t a2@<X8>)
{
  int v2 = *((_DWORD *)this + 114);
  if (v2 <= 1) {
    int v2 = 1;
  }
  int v3 = *((_DWORD *)this + 105);
  if (v3 <= 1) {
    int v3 = 1;
  }
  int v4 = *((_DWORD *)this + 87) / v3;
  int v5 = *((_DWORD *)this + 86) * v2;
  int v6 = *((_DWORD *)this + 106);
  if (v6 <= 1) {
    int v6 = 1;
  }
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)(a2 + 56) = 0;
  *(void *)a2 = *((void *)this + 44);
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v5 * v6;
  double result = NAN;
  *(void *)(a2 + 16) = 0xFFFFFFFF00000001;
  return result;
}

void Espresso::generic_convolution_kernel::set_weights()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "not implemented");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1929F855C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_meta_convolution_kernel::kernel_type_str(Espresso::generic_meta_convolution_kernel *this)
{
  return "meta_convolution";
}

void Espresso::generic_convolution_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)&long long v74 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v39, "convolution");
  int v6 = *(std::string::size_type **)(a3 + 16);
  std::string::size_type v7 = *v6;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[1] - *v6) >> 3);
  if (v8 <= 1)
  {
    if (v40 >= 0) {
      uint64_t v38 = v39;
    }
    else {
      uint64_t v38 = (void **)v39[0];
    }
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,char const*,unsigned long>((const char *)v38, v8);
  }
  int v9 = **(long long ***)(a3 + 8);
  int v10 = **(long long ***)(a3 + 24);
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  unint64_t v68 = 0;
  int v11 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v7);
  if (v11)
  {
    Espresso::blob_grad_contrib_name((uint64_t)__p, v7, a3);
    int v12 = v67;
    if ((unint64_t)v67 >= v68)
    {
      int v14 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v66, (uint64_t)__p);
    }
    else
    {
      if (SBYTE7(v53) < 0)
      {
        std::string::__init_copy_ctor_external(v67, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        long long v13 = *(_OWORD *)__p;
        v67->__r_.__value_.__r.__words[2] = v53;
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      int v14 = v12 + 1;
    }
    uint64_t v67 = v14;
    if (SBYTE7(v53) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v15 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v7 + 24);
  if (v15)
  {
    Espresso::blob_grad_contrib_name((uint64_t)__p, v7 + 24, a3);
    uint64_t v16 = v67;
    if ((unint64_t)v67 >= v68)
    {
      uint64_t v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v66, (uint64_t)__p);
    }
    else
    {
      if (SBYTE7(v53) < 0)
      {
        std::string::__init_copy_ctor_external(v67, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        long long v17 = *(_OWORD *)__p;
        v67->__r_.__value_.__r.__words[2] = v53;
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      uint64_t v18 = v16 + 1;
    }
    uint64_t v67 = v18;
    if (SBYTE7(v53) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v19 = **(void **)(a3 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a3 + 16) + 8) - v19) >> 3) >= 3
    && (std::string::size_type v20 = v19 + 48,
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v19 + 48)))
  {
    Espresso::blob_grad_contrib_name((uint64_t)__p, v20, a3);
    long long v21 = v67;
    if ((unint64_t)v67 >= v68)
    {
      uint64_t v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v66, (uint64_t)__p);
    }
    else
    {
      if (SBYTE7(v53) < 0)
      {
        std::string::__init_copy_ctor_external(v67, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        long long v22 = *(_OWORD *)__p;
        v67->__r_.__value_.__r.__words[2] = v53;
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      }
      uint64_t v24 = v21 + 1;
    }
    uint64_t v67 = v24;
    if (SBYTE7(v53) < 0) {
      operator delete(__p[0]);
    }
    char v23 = 1;
  }
  else
  {
    char v23 = 0;
  }
  char v65 = 0;
  long long v25 = *(_OWORD *)(a1 + 448);
  long long v60 = *(_OWORD *)(a1 + 432);
  *(_OWORD *)int v61 = v25;
  *(void *)&v61[13] = *(void *)(a1 + 461);
  long long v26 = *(_OWORD *)(a1 + 384);
  long long v56 = *(_OWORD *)(a1 + 368);
  long long v57 = v26;
  long long v27 = *(_OWORD *)(a1 + 416);
  long long v58 = *(_OWORD *)(a1 + 400);
  long long v59 = v27;
  long long v28 = *(_OWORD *)(a1 + 320);
  *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 304);
  long long v53 = v28;
  long long v29 = *(_OWORD *)(a1 + 352);
  long long v54 = *(_OWORD *)(a1 + 336);
  long long v55 = v29;
  BOOL v62 = v11 != 0;
  BOOL v63 = v15 != 0;
  char v64 = v23;
  std::operator+<char>();
  int v30 = std::string::append(&v47, "_grad");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  std::string::size_type v49 = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)BOOL v48 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  uint64_t v32 = *(void *)a3;
  if (*((char *)v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v33 = *v9;
    v70.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v33;
  }
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
  }
  else
  {
    long long v34 = *(_OWORD *)v7;
    v71.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v34;
  }
  if (*(char *)(v7 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(v7 + 24), *(void *)(v7 + 32));
  }
  else
  {
    long long v35 = *(_OWORD *)(v7 + 24);
    v72.__r_.__value_.__r.__words[2] = *(void *)(v7 + 40);
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v35;
  }
  if (*((char *)v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v36 = *v10;
    v73.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v36;
  }
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v41 = &v44;
  LOBYTE(v42) = 0;
  uint64_t v44 = (std::string *)operator new(0x60uLL);
  uint64_t v45 = v44;
  uint64_t v46 = v44 + 4;
  uint64_t v45 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v46, (long long *)&v70, &v74, v44);
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v41 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v41, (uint64_t)v66, (uint64_t)v67, 0xAAAAAAAAAAAAAAABLL * (((char *)v67 - v66) >> 3));
  Espresso::sequential_builder::add<Espresso::fused_convolution_grad_params_t>(&v50, a2, (uint64_t)v48, v32, (uint64_t)__p, (uint64_t)v44, (uint64_t)v45, (uint64_t *)&v41);
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  long long v69 = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  long long v69 = (std::string ***)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v73.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v73.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(v48[0]);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  __p[0] = &v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v40 < 0) {
    operator delete(v39[0]);
  }
}

void sub_1929F8A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  *(void *)(v42 - 216) = v41;
  if (a41 < 0) {
    operator delete(__p);
  }
  *(void *)(v42 - 192) = v42 - 224;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 192));
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,char const*,unsigned long>(const char *a1, uint64_t a2)
{
}

std::string *Espresso::blob_grad_contrib_name(uint64_t a1, std::string::size_type a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) >= 0) {
    size_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v6 = *(void *)(a2 + 8);
  }
  std::string::size_type v7 = &v19;
  std::string::basic_string[abi:ne180100]((uint64_t)&v19, v6 + 6);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v7 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v8 = (const void *)a2;
    }
    else {
      unint64_t v8 = *(const void **)a2;
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "/grad@");
  std::to_string(&__p, *(void *)(a3 + 48));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int v11 = std::string::append(&v19, (const std::string::value_type *)p_p, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(void *)(a1 + 16) = *((void *)&v11->__r_.__value_.__l + 2);
  *(_OWORD *)a1 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  long long v13 = *(uint64_t ***)(a3 + 32);
  v19.__r_.__value_.__r.__words[0] = a2;
  int v14 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&v19);
  uint64_t v15 = (char **)(v14 + 7);
  uint64_t v16 = (std::string *)v14[8];
  if (v16 >= (std::string *)v14[9])
  {
    double result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v15, a1);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v15, (long long *)a1);
    double result = v16 + 1;
  }
  v14[8] = (uint64_t *)result;
  return result;
}

void sub_1929F8D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sequential_builder::add<Espresso::fused_convolution_grad_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  std::string v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  uint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  long long v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  long long v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1929F8F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_convolution_kernel::supports_weight_key(uint64_t a1, _DWORD *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 23);
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    BOOL result = 0;
    switch(*((unsigned char *)a2 + 23))
    {
      case 1:
        int v4 = *(unsigned __int8 *)a2;
        if (v4 != 87) {
          return v4 == 98;
        }
        return 1;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        int v10 = 14423;
        return v9 == v10;
      case 4:
        int v9 = *a2;
        int v10 = 947216215;
        return v9 == v10;
      case 5:
        if (*a2 != 828792663 || *((unsigned char *)a2 + 4) != 54) {
          return *a2 == 828792674 && *((unsigned char *)a2 + 4) == 54;
        }
        return 1;
      case 6:
        return *a2 == 1852399447 && *((_WORD *)a2 + 2) == 14452;
      case 9:
        goto LABEL_99;
      case 0xA:
        goto LABEL_81;
      case 0x14:
        if (*(void *)a2 != 0x6F635F3233665F57 || *((void *)a2 + 1) != 0x646573736572706DLL || a2[4] != 909207135) {
          return *(void *)a2 == 0x6F635F3233665F62
        }
              && *((void *)a2 + 1) == 0x646573736572706DLL
              && a2[4] == 909207135;
        return 1;
      default:
        return result;
    }
  }
  uint64_t v5 = *((void *)a2 + 1);
  switch(v5)
  {
    case 1:
      if (**(unsigned char **)a2 != 87) {
        goto LABEL_66;
      }
      return 1;
    case 2:
      int v18 = **(unsigned __int16 **)a2;
      int v19 = 14423;
      goto LABEL_52;
    case 3:
      goto LABEL_66;
    case 4:
      int v18 = **(_DWORD **)a2;
      int v19 = 947216215;
LABEL_52:
      if (v18 == v19) {
        return 1;
      }
      goto LABEL_66;
    case 5:
      if (**(_DWORD **)a2 == 828792663 && *(unsigned char *)(*(void *)a2 + 4) == 54) {
        return 1;
      }
      if ((v2 & 0x80) == 0)
      {
        BOOL result = 0;
        switch(*((unsigned char *)a2 + 23))
        {
          case 1:
            int v4 = *(unsigned __int8 *)a2;
            return v4 == 98;
          case 2:
          case 3:
          case 4:
          case 6:
          case 7:
          case 8:
            return result;
          case 5:
            return *a2 == 828792674 && *((unsigned char *)a2 + 4) == 54;
          case 9:
            goto LABEL_99;
          case 0xA:
            goto LABEL_81;
          default:
            if (v2 != 20) {
              return result;
            }
            return *(void *)a2 == 0x6F635F3233665F62
                && *((void *)a2 + 1) == 0x646573736572706DLL
                && a2[4] == 909207135;
        }
      }
      goto LABEL_66;
    case 6:
      int v6 = *(unsigned __int16 *)(*(void *)a2 + 4);
      BOOL v7 = **(_DWORD **)a2 == 1852399447;
      int v8 = 14452;
      goto LABEL_62;
    default:
      if (v5 != 20) {
        goto LABEL_66;
      }
      int v6 = *(_DWORD *)(*(void *)a2 + 16);
      BOOL v7 = **(void **)a2 == 0x6F635F3233665F57 && *(void *)(*(void *)a2 + 8) == 0x646573736572706DLL;
      int v8 = 909207135;
LABEL_62:
      if (v7 && v6 == v8) {
        return 1;
      }
LABEL_66:
      if (*((void *)a2 + 1) != 1) {
        goto LABEL_69;
      }
      if (**(unsigned char **)a2 == 98) {
        return 1;
      }
      if ((v2 & 0x80) == 0) {
        return 0;
      }
LABEL_69:
      if (*((void *)a2 + 1) != 20) {
        goto LABEL_82;
      }
      if (**(void **)a2 == 0x6F635F3233665F62
        && *(void *)(*(void *)a2 + 8) == 0x646573736572706DLL
        && *(_DWORD *)(*(void *)a2 + 16) == 909207135)
      {
        return 1;
      }
      if ((v2 & 0x80) != 0)
      {
LABEL_82:
        if (*((void *)a2 + 1) == 5)
        {
          if (**(_DWORD **)a2 == 828792674 && *(unsigned char *)(*(void *)a2 + 4) == 54) {
            return 1;
          }
          if ((v2 & 0x80) == 0) {
            return 0;
          }
        }
        if (*((void *)a2 + 1) != 10) {
          goto LABEL_97;
        }
        if (**(void **)a2 == 0x6E61725F38755F71 && *(_WORD *)(*(void *)a2 + 8) == 25959) {
          return 1;
        }
        if ((v2 & 0x80) != 0)
        {
LABEL_97:
          if (*((void *)a2 + 1) != 9) {
            return 0;
          }
          a2 = *(_DWORD **)a2;
        }
        else if (v2 != 9)
        {
          return 0;
        }
LABEL_99:
        int v24 = *((unsigned __int8 *)a2 + 8);
        BOOL v25 = *(void *)a2 == 0x616D6E696D5F3857;
        int v26 = 120;
        return v25 && v24 == v26;
      }
      if (v2 == 5) {
        return *a2 == 828792674 && *((unsigned char *)a2 + 4) == 54;
      }
      if (v2 == 9) {
        goto LABEL_99;
      }
      if (v2 != 10) {
        return 0;
      }
LABEL_81:
      int v24 = *((unsigned __int16 *)a2 + 4);
      BOOL v25 = *(void *)a2 == 0x6E61725F38755F71;
      int v26 = 25959;
      return v25 && v24 == v26;
  }
}

void Espresso::abstract_kernel_with_weights_::__set_weight_raw_blob_for_serialization(uint64_t **a1, uint64_t a2, long long *a3, const void *a4, size_t a5)
{
  Espresso::base_kernel::__set_weight_raw_blob_for_serialization(a1, a2, a3, a4, a5);
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(a1[36], a3))
  {
    int v9 = a3;
    BOOL v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 35, a3, &v9);
    int v8 = (std::__shared_weak_count *)v7[8];
    v7[7] = 0;
    v7[8] = 0;
    if (v8)
    {
      nitro::nitro_function::nitro_function(v8);
    }
  }
}

void Espresso::generic_convolution_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  if (a6)
  {
    uint64_t v11 = *a6;
    if (*a6)
    {
      long long v12 = (std::__shared_weak_count *)a6[1];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      long long v12 = 0;
    }
  }
  else
  {
    long long v12 = 0;
    uint64_t v11 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 464))(&v109, a1);
  int v13 = v109;
  int v14 = HIDWORD(v109);
  uint64_t v116 = v109;
  int v15 = v110;
  int v16 = v111;
  int v117 = v110;
  int v118 = v111;
  int v17 = a3[23];
  if ((v17 & 0x80) == 0)
  {
    switch(a3[23])
    {
      case 1u:
        int v18 = *a3;
        if (v18 != 87) {
          goto LABEL_10;
        }
        goto LABEL_14;
      case 2u:
        int v25 = *(unsigned __int16 *)a3;
        int v26 = 14423;
        goto LABEL_38;
      case 4u:
        int v25 = *(_DWORD *)a3;
        int v26 = 947216215;
LABEL_38:
        if (v25 == v26) {
          goto LABEL_92;
        }
        goto LABEL_234;
      case 5u:
        if (*(_DWORD *)a3 != 828792663 || a3[4] != 54) {
          goto LABEL_44;
        }
        goto LABEL_133;
      case 6u:
        if (*(_DWORD *)a3 != 1852399447 || *((_WORD *)a3 + 2) != 14452) {
          goto LABEL_234;
        }
        goto LABEL_92;
      case 9u:
        goto LABEL_178;
      case 0xAu:
        goto LABEL_118;
      case 0x14u:
        if (*(void *)a3 != 0x6F635F3233665F57
          || *((void *)a3 + 1) != 0x646573736572706DLL
          || *((_DWORD *)a3 + 4) != 909207135)
        {
          goto LABEL_63;
        }
        goto LABEL_144;
      default:
        goto LABEL_234;
    }
  }
  uint64_t v19 = *((void *)a3 + 1);
  switch(v19)
  {
    case 1:
      if (**(unsigned char **)a3 != 87) {
        goto LABEL_87;
      }
LABEL_14:
      v108[0] = v11;
      v108[1] = (uint64_t)v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,4>(&src, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v108, v13, v14, v15, v16, (a4 & 0x3F) == 0);
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      vImagePixelCount height = src.height;
      data = src.data;
      vImagePixelCount v107 = src.height;
      if (src.height) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(src.height + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v21 = (std::__shared_weak_count *)a2[1];
      uint64_t v104 = *a2;
      uint64_t v105 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)a1 + 424))(a1, &data, &v104);
      if (v105) {
        nitro::nitro_function::nitro_function(v105);
      }
      long long v22 = (std::__shared_weak_count *)v107;
      if (!v107) {
        goto LABEL_231;
      }
      goto LABEL_230;
    case 2:
      int v34 = **(unsigned __int16 **)a3;
      int v35 = 14423;
      goto LABEL_74;
    case 3:
      goto LABEL_87;
    case 4:
      int v34 = **(_DWORD **)a3;
      int v35 = 947216215;
LABEL_74:
      if (v34 == v35) {
        goto LABEL_92;
      }
      goto LABEL_87;
    case 5:
      if (**(_DWORD **)a3 == 828792663 && *(unsigned char *)(*(void *)a3 + 4) == 54)
      {
LABEL_133:
        v89[0] = v11;
        v89[1] = (uint64_t)v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,4>(&src, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v89, v13, v14, v15, v16, (a4 & 0x3F) == 0);
        if (v12) {
          nitro::nitro_function::nitro_function(v12);
        }
        vImagePixelCount height = src.height;
        uint64_t v87 = src.data;
        vImagePixelCount v88 = src.height;
        if (src.height) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(src.height + 8), 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)a1 + 544))(a1, &v87, a2);
        long long v22 = (std::__shared_weak_count *)v88;
        if (!v88) {
          goto LABEL_231;
        }
        goto LABEL_230;
      }
      if ((v17 & 0x80) == 0)
      {
        switch(a3[23])
        {
          case 1u:
            int v18 = *a3;
LABEL_10:
            if (v18 != 98) {
              goto LABEL_234;
            }
            goto LABEL_89;
          case 2u:
          case 3u:
          case 4u:
          case 6u:
          case 7u:
          case 8u:
            goto LABEL_234;
          case 5u:
            goto LABEL_44;
          case 9u:
            goto LABEL_178;
          case 0xAu:
            goto LABEL_118;
          default:
            if (v17 != 20) {
              goto LABEL_234;
            }
LABEL_63:
            if (*(void *)a3 != 0x6F635F3233665F62
              || *((void *)a3 + 1) != 0x646573736572706DLL
              || *((_DWORD *)a3 + 4) != 909207135)
            {
              goto LABEL_234;
            }
            goto LABEL_141;
        }
      }
LABEL_87:
      if (*((void *)a3 + 1) == 1)
      {
        if (**(unsigned char **)a3 == 98)
        {
LABEL_89:
          int v38 = *(_DWORD *)(a1 + 344);
          int v39 = *(_DWORD *)(a1 + 424);
          if (v39 < 2)
          {
            if (!*(_DWORD *)(a1 + 416)) {
              goto LABEL_161;
            }
            int v39 = 1;
          }
          else if (!*(_DWORD *)(a1 + 416))
          {
            v38 *= v39;
            goto LABEL_161;
          }
          v38 *= 4 * v39;
LABEL_161:
          v86[0] = v11;
          v86[1] = (uint64_t)v12;
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&src, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v86, v38, (a4 & 0x3F) == 0);
          if (v12) {
            nitro::nitro_function::nitro_function(v12);
          }
          vImagePixelCount height = src.height;
          uint64_t v84 = src.data;
          vImagePixelCount v85 = src.height;
          if (src.height) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(src.height + 8), 1uLL, memory_order_relaxed);
          }
          long long v57 = (std::__shared_weak_count *)a2[1];
          uint64_t v82 = *a2;
          BOOL v83 = v57;
          if (v57) {
            atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)a1 + 416))(a1, &v84, &v82);
          if (v83) {
            nitro::nitro_function::nitro_function(v83);
          }
          long long v22 = (std::__shared_weak_count *)v85;
          if (!v85) {
            goto LABEL_231;
          }
          goto LABEL_230;
        }
        if ((v17 & 0x80) == 0) {
          goto LABEL_234;
        }
      }
      if (*((void *)a3 + 1) != 20) {
        goto LABEL_119;
      }
      if (**(void **)a3 != 0x6F635F3233665F62
        || *(void *)(*(void *)a3 + 8) != 0x646573736572706DLL
        || *(_DWORD *)(*(void *)a3 + 16) != 909207135)
      {
        if ((v17 & 0x80) == 0)
        {
          if (v17 != 5)
          {
            if (v17 != 9)
            {
              if (v17 != 10) {
                goto LABEL_234;
              }
LABEL_118:
              int v43 = *((unsigned __int16 *)a3 + 4);
              BOOL v44 = *(void *)a3 == 0x6E61725F38755F71;
              int v45 = 25959;
LABEL_179:
              if (!v44 || v43 != v45) {
                goto LABEL_234;
              }
              goto LABEL_184;
            }
LABEL_178:
            int v43 = a3[8];
            BOOL v44 = *(void *)a3 == 0x616D6E696D5F3857;
            int v45 = 120;
            goto LABEL_179;
          }
LABEL_44:
          if (*(_DWORD *)a3 != 828792674 || a3[4] != 54) {
            goto LABEL_234;
          }
LABEL_173:
          int v58 = *(_DWORD *)(a1 + 344);
          int v59 = *(_DWORD *)(a1 + 424);
          if (v59 < 2)
          {
            if (!*(_DWORD *)(a1 + 416)) {
              goto LABEL_218;
            }
            int v59 = 1;
          }
          else if (!*(_DWORD *)(a1 + 416))
          {
            v58 *= v59;
            goto LABEL_218;
          }
          v58 *= 4 * v59;
LABEL_218:
          v76[0] = v11;
          v76[1] = (uint64_t)v12;
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v102, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v76, v58, (a4 & 0x3F) == 0);
          if (v12) {
            nitro::nitro_function::nitro_function(v12);
          }
          uint64_t v67 = *(void *)(a1 + 16);
          uint64_t v74 = *(void *)(a1 + 8);
          uint64_t v75 = v67;
          if (v67) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v67 + 8), 1uLL, memory_order_relaxed);
          }
          if ((char)a3[23] < 0) {
            std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)a3, *((void *)a3 + 1));
          }
          else {
            std::string v73 = *(std::string *)a3;
          }
          v72[6] = v102;
          v72[7] = v103;
          if (v103) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v103 + 8), 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::set_parameter_blob<unsigned short,1>();
        }
LABEL_119:
        if (*((void *)a3 + 1) == 5)
        {
          if (**(_DWORD **)a3 == 828792674 && *(unsigned char *)(*(void *)a3 + 4) == 54) {
            goto LABEL_173;
          }
          if ((v17 & 0x80) == 0) {
            goto LABEL_234;
          }
        }
        if (*((void *)a3 + 1) != 10) {
          goto LABEL_176;
        }
        if (**(void **)a3 == 0x6E61725F38755F71 && *(_WORD *)(*(void *)a3 + 8) == 25959)
        {
LABEL_184:
          v72[0] = v11;
          v72[1] = (uint64_t)v12;
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&src, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v72, 2 * *(_DWORD *)(a1 + 344), (a4 & 0x3F) == 0);
          if (v12) {
            nitro::nitro_function::nitro_function(v12);
          }
          vImagePixelCount height = src.height;
          std::string v70 = src.data;
          vImagePixelCount v71 = src.height;
          if (src.height) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(src.height + 8), 1uLL, memory_order_relaxed);
          }
          int v61 = (std::__shared_weak_count *)a2[1];
          uint64_t v68 = *a2;
          long long v69 = v61;
          if (v61) {
            atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)a1 + 592))(a1, &v70, &v68);
          if (v69) {
            nitro::nitro_function::nitro_function(v69);
          }
          long long v22 = (std::__shared_weak_count *)v71;
          if (!v71) {
            goto LABEL_231;
          }
LABEL_230:
          nitro::nitro_function::nitro_function(v22);
LABEL_231:
          if (!height) {
            goto LABEL_234;
          }
          uint64_t v66 = (std::__shared_weak_count *)height;
          goto LABEL_233;
        }
        if ((v17 & 0x80) != 0)
        {
LABEL_176:
          if (*((void *)a3 + 1) != 9) {
            goto LABEL_234;
          }
          a3 = *(unsigned __int8 **)a3;
        }
        else if (v17 != 9)
        {
          goto LABEL_234;
        }
        goto LABEL_178;
      }
LABEL_141:
      int v48 = *(_DWORD *)(a1 + 344);
      int v49 = *(_DWORD *)(a1 + 424);
      if (v49 < 2)
      {
        if (!*(_DWORD *)(a1 + 416)) {
          goto LABEL_199;
        }
        int v49 = 1;
      }
      else if (!*(_DWORD *)(a1 + 416))
      {
        v48 *= v49;
        goto LABEL_199;
      }
      v48 *= 4 * v49;
LABEL_199:
      v81[0] = v11;
      v81[1] = (uint64_t)v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v102, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v81, v48, (a4 & 0x3F) == 0);
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v99, v48, 1, 1, 1);
      uint64_t v62 = v99;
      BOOL v63 = *(void **)(v99 + 16);
      vImagePixelCount v64 = *(int *)(v102 + 8);
      src.data = *(void **)(v102 + 16);
      src.vImagePixelCount height = 1;
      src.width = v64;
      src.rowBytes = 2 * v64;
      dest.data = v63;
      dest.vImagePixelCount height = 1;
      dest.width = v64;
      dest.rowBytes = 4 * v64;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      long long v54 = v100;
      uint64_t v79 = v62;
      int v80 = v100;
      if (v100) {
        atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v65 = (std::__shared_weak_count *)a2[1];
      uint64_t v77 = *a2;
      long long v78 = v65;
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 416))(a1, &v79, &v77);
      if (v78) {
        nitro::nitro_function::nitro_function(v78);
      }
      long long v56 = v80;
      if (v80) {
LABEL_210:
      }
        nitro::nitro_function::nitro_function(v56);
LABEL_211:
      if (v54) {
        nitro::nitro_function::nitro_function(v54);
      }
      uint64_t v66 = (std::__shared_weak_count *)v103;
      if (v103) {
LABEL_233:
      }
        nitro::nitro_function::nitro_function(v66);
LABEL_234:
      if (v112)
      {
        uint64_t v113 = v112;
        operator delete(v112);
      }
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      return;
    case 6:
      if (**(_DWORD **)a3 != 1852399447 || *(_WORD *)(*(void *)a3 + 4) != 14452) {
        goto LABEL_87;
      }
LABEL_92:
      v94[0] = v11;
      v94[1] = (uint64_t)v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,4>(&src, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v94, v13, v14, v15, v16, (a4 & 0x3F) == 0);
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      vImagePixelCount height = src.height;
      uint64_t v92 = src.data;
      int v93 = (std::__shared_weak_count *)src.height;
      if (src.height) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(src.height + 8), 1uLL, memory_order_relaxed);
      }
      char v40 = (std::__shared_weak_count *)a2[1];
      uint64_t v90 = *a2;
      uint64_t v91 = v40;
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)a1 + 560))(a1, &v92, &v90);
      if (v91) {
        nitro::nitro_function::nitro_function(v91);
      }
      if (v93) {
        nitro::nitro_function::nitro_function(v93);
      }
      std::string::operator=((std::string *)(a1 + 536), (const std::string *)a3);
      goto LABEL_231;
    default:
      if (v19 != 20) {
        goto LABEL_87;
      }
      BOOL v23 = **(void **)a3 == 0x6F635F3233665F57 && *(void *)(*(void *)a3 + 8) == 0x646573736572706DLL;
      if (!v23 || *(_DWORD *)(*(void *)a3 + 16) != 909207135) {
        goto LABEL_87;
      }
LABEL_144:
      v101[0] = v11;
      v101[1] = (uint64_t)v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,4>(&v102, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v101, v13, v14, v15, v16, (a4 & 0x3F) == 0);
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v99, (uint64_t)&v116);
      uint64_t v50 = 0;
      uint64_t v51 = v99;
      char v52 = *(void **)(v99 + 24);
      vImagePixelCount v53 = *(int *)(v102 + 8);
      do
      {
        v53 *= *(int *)(v102 + 12 + v50);
        v50 += 4;
      }
      while (v50 != 12);
      src.data = *(void **)(v102 + 24);
      src.vImagePixelCount height = 1;
      src.width = v53;
      src.rowBytes = 2 * v53;
      dest.data = v52;
      dest.vImagePixelCount height = 1;
      dest.width = v53;
      dest.rowBytes = 4 * v53;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      long long v54 = v100;
      uint64_t v97 = v51;
      long long v98 = v100;
      if (v100) {
        atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v55 = (std::__shared_weak_count *)a2[1];
      uint64_t v95 = *a2;
      uint64_t v96 = v55;
      if (v55) {
        atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 424))(a1, &v97, &v95);
      if (v96) {
        nitro::nitro_function::nitro_function(v96);
      }
      long long v56 = v98;
      if (!v98) {
        goto LABEL_211;
      }
      goto LABEL_210;
  }
}

void sub_1929FA304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,std::__shared_weak_count *a61)
{
  if (a27) {
    nitro::nitro_function::nitro_function(a27);
  }
  if (a61) {
    nitro::nitro_function::nitro_function(a61);
  }
  vImagePixelCount v64 = *(void **)(v62 - 176);
  if (v64)
  {
    *(void *)(v62 - 168) = v64;
    operator delete(v64);
  }
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  _Unwind_Resume(a1);
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,4>(void *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, int a8, int a9, int a10, char a11)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *a6;
  int v17 = (std::__shared_weak_count *)a6[1];
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = 0;
  a1[1] = 0;
  if (*(unsigned char *)(a2 + 73))
  {
    if (!v18 || (a11 & 1) != 0)
    {
      if (!v18) {
        goto LABEL_9;
      }
    }
    else if (!*(unsigned char *)(a2 + 123))
    {
      goto LABEL_9;
    }
    long long v22 = operator new(0x60uLL);
    v22[1] = 0;
    void v22[2] = 0;
    *long long v22 = &unk_1EE389D80;
    void v22[3] = &unk_1EE36C130;
    *((_OWORD *)v22 + 4) = 0u;
    *((_OWORD *)v22 + 5) = 0u;
    *((_DWORD *)v22 + 8) = a7;
    *((_DWORD *)v22 + 9) = a8;
    *((_DWORD *)v22 + 10) = a9;
    *((_DWORD *)v22 + 11) = a10;
    v22[6] = a4;
    *((unsigned char *)v22 + 56) = 0;
    *a1 = v22 + 3;
    a1[1] = v22;
    if (!v17)
    {
      v22[8] = v18;
      v22[9] = 0;
      if (!a3) {
        return;
      }
      goto LABEL_19;
    }
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    v22[8] = v18;
    v22[9] = v17;
    goto LABEL_17;
  }
LABEL_9:
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(&v37, a7, a8, a9, a10);
  uint64_t v19 = 0;
  long long v20 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
  *(_OWORD *)a1 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
  uint64_t v21 = *(int *)(v20 + 8);
  do
  {
    v21 *= *(int *)(v20 + 12 + v19);
    v19 += 4;
  }
  while (v19 != 12);
  if (a5 != 2 * v21)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v34, a5);
    int v24 = std::string::insert(&v34, 0, "Unexpected size s=");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    int v26 = std::string::append(&v35, "/blob=");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    uint64_t v28 = *(int *)(v20 + 8);
    do
      v28 *= *(int *)(v20 + 12 + *((void *)&v20 + 1));
    while (*((void *)&v20 + 1) != 8);
    std::to_string(&v33, 2 * v28);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v29 = &v33;
    }
    else {
      long long v29 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v33.__r_.__value_.__l.__size_;
    }
    long long v31 = std::string::append(&v36, (const std::string::value_type *)v29, size);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v37);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  memcpy(*(void **)(v20 + 24), a4, a5);
  if (v17) {
LABEL_17:
  }
    nitro::nitro_function::nitro_function(v17);
  if (!a3) {
    return;
  }
LABEL_19:

  nitro::nitro_function::nitro_function(a3);
}

void sub_1929FA83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v39 - 89) < 0) {
    operator delete(*(void **)(v39 - 112));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v38 & 1) == 0)
    {
LABEL_14:
      if (a10)
      {
        nitro::nitro_function::nitro_function(a10);
        if (!v36)
        {
LABEL_16:
          if (!v35) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
      else if (!v36)
      {
        goto LABEL_16;
      }
      nitro::nitro_function::nitro_function(v36);
      if (!v35) {
LABEL_18:
      }
        _Unwind_Resume(a1);
LABEL_17:
      nitro::nitro_function::nitro_function(v35);
      goto LABEL_18;
    }
  }
  else if (!v38)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v37);
  goto LABEL_14;
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,4>(void *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, int a8, int a9, int a10, char a11)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *a6;
  int v17 = (std::__shared_weak_count *)a6[1];
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = 0;
  a1[1] = 0;
  if (*(unsigned char *)(a2 + 73))
  {
    if (!v18 || (a11 & 1) != 0)
    {
      if (!v18) {
        goto LABEL_9;
      }
    }
    else if (!*(unsigned char *)(a2 + 123))
    {
      goto LABEL_9;
    }
    long long v22 = operator new(0x60uLL);
    v22[1] = 0;
    void v22[2] = 0;
    *long long v22 = &unk_1EE389B18;
    void v22[3] = &unk_1EE36BFD0;
    *((_OWORD *)v22 + 4) = 0u;
    *((_OWORD *)v22 + 5) = 0u;
    *((_DWORD *)v22 + 8) = a7;
    *((_DWORD *)v22 + 9) = a8;
    *((_DWORD *)v22 + 10) = a9;
    *((_DWORD *)v22 + 11) = a10;
    v22[6] = a4;
    *((unsigned char *)v22 + 56) = 0;
    *a1 = v22 + 3;
    a1[1] = v22;
    if (!v17)
    {
      v22[8] = v18;
      v22[9] = 0;
      if (!a3) {
        return;
      }
      goto LABEL_19;
    }
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    v22[8] = v18;
    v22[9] = v17;
    goto LABEL_17;
  }
LABEL_9:
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,void>(&v37, a7, a8, a9, a10);
  uint64_t v19 = 0;
  long long v20 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
  *(_OWORD *)a1 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
  uint64_t v21 = *(int *)(v20 + 8);
  do
  {
    v21 *= *(int *)(v20 + 12 + v19);
    v19 += 4;
  }
  while (v19 != 12);
  if (v21 != a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v34, a5);
    int v24 = std::string::insert(&v34, 0, "Unexpected size s=");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    int v26 = std::string::append(&v35, "/blob=");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    unint64_t v28 = *(int *)(v20 + 8);
    do
      v28 *= *(int *)(v20 + 12 + *((void *)&v20 + 1));
    while (*((void *)&v20 + 1) != 8);
    std::to_string(&v33, v28);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v29 = &v33;
    }
    else {
      long long v29 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v33.__r_.__value_.__l.__size_;
    }
    long long v31 = std::string::append(&v36, (const std::string::value_type *)v29, size);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v37);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  memcpy(*(void **)(v20 + 24), a4, a5);
  if (v17) {
LABEL_17:
  }
    nitro::nitro_function::nitro_function(v17);
  if (!a3) {
    return;
  }
LABEL_19:

  nitro::nitro_function::nitro_function(a3);
}

void sub_1929FAC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v39 - 89) < 0) {
    operator delete(*(void **)(v39 - 112));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v38 & 1) == 0)
    {
LABEL_14:
      if (a10)
      {
        nitro::nitro_function::nitro_function(a10);
        if (!v36)
        {
LABEL_16:
          if (!v35) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
      else if (!v36)
      {
        goto LABEL_16;
      }
      nitro::nitro_function::nitro_function(v36);
      if (!v35) {
LABEL_18:
      }
        _Unwind_Resume(a1);
LABEL_17:
      nitro::nitro_function::nitro_function(v35);
      goto LABEL_18;
    }
  }
  else if (!v38)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v37);
  goto LABEL_14;
}

void Espresso::generic_convolution_kernel::clear_weights(Espresso::generic_convolution_kernel *this)
{
  uint64_t v1 = (char *)this + 160;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 20));
  *((void *)v1 - 1) = v1;
  *(_OWORD *)uint64_t v1 = 0u;
  int v2 = (std::__shared_weak_count *)*((void *)v1 + 46);
  *(_OWORD *)(v1 + 360) = 0u;
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void Espresso::generic_convolution_kernel::share_weights(void *a1, const void **a2)
{
  Espresso::base_kernel::share_weights(a1, a2);
  if (*a2) {
  else
  }
    int v4 = 0;
  uint64_t v6 = v4[59];
  uint64_t v5 = v4[60];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v7 = (std::__shared_weak_count *)a1[60];
  a1[59] = v6;
  a1[60] = v5;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v9 = v4[61];
  uint64_t v8 = v4[62];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  int v10 = (std::__shared_weak_count *)a1[62];
  a1[61] = v9;
  a1[62] = v8;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v12 = v4[63];
  uint64_t v11 = v4[64];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  int v13 = (std::__shared_weak_count *)a1[64];
  a1[63] = v12;
  a1[64] = v11;
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  uint64_t v14 = v4[65];
  uint64_t v15 = v4[66];
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  a1[65] = v14;
  int v16 = (std::__shared_weak_count *)a1[66];
  a1[66] = v15;
  if (v16)
  {
    nitro::nitro_function::nitro_function(v16);
  }
}

uint64_t Espresso::generic_convolution_kernel::input_blob_type(Espresso::generic_convolution_kernel *this, uint64_t a2)
{
  if (a2 == 1) {
    return 1;
  }
  else {
    return 2 * (a2 == 2);
  }
}

uint64_t Espresso::generic_dynamic_dequantize_kernel::get_output_to_input_blob_aliases@<X0>(uint64_t a1@<X8>)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  return std::unordered_map<int,int>::unordered_map(a1, (int *)v3, 1);
}

uint64_t Espresso::generic_dynamic_dequantize_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v5 = a2[1];
    switch(v5)
    {
      case 5:
        int v6 = *(unsigned __int8 *)(*a2 + 4);
        BOOL v7 = *(_DWORD *)*a2 == 1634296401;
        break;
      case 6:
        a2 = (uint64_t *)*a2;
        goto LABEL_18;
      case 9:
        int v6 = *(unsigned __int8 *)(*a2 + 8);
        BOOL v7 = *(void *)*a2 == 0x6D75735F776F7251;
        break;
      default:
        return 0;
    }
    return v7 && v6 == 115;
  }
  int v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 == 5)
  {
    int v3 = *((unsigned __int8 *)a2 + 4);
    BOOL v4 = *(_DWORD *)a2 == 1634296401;
    goto LABEL_12;
  }
  if (v2 == 6)
  {
LABEL_18:
    if (*(_DWORD *)a2 == 1633907537 && *((_WORD *)a2 + 2) == 25964) {
      return 1;
    }
    int v3 = *((unsigned __int16 *)a2 + 2);
    BOOL v4 = *(_DWORD *)a2 == 1935763810;
    int v9 = 29541;
    return v4 && v3 == v9;
  }
  if (v2 != 9) {
    return 0;
  }
  int v3 = *((unsigned __int8 *)a2 + 8);
  BOOL v4 = *a2 == 0x6D75735F776F7251;
LABEL_12:
  int v9 = 115;
  return v4 && v3 == v9;
}

char *Espresso::generic_dynamic_dequantize_kernel::__set_weight_raw_blob(char *result, uint64_t a2, unsigned char *a3, const void *a4, unint64_t a5)
{
  BOOL v7 = result;
  uint64_t v8 = (std::string::size_type *)(result + 312);
  unint64_t v9 = (unint64_t)(int)a5 >> 2;
  if ((char)a3[23] < 0)
  {
    uint64_t v12 = *((void *)a3 + 1);
    if (v12 != 5)
    {
      if (v12 != 6)
      {
        if (v12 != 9) {
          return result;
        }
        if (**(void **)a3 != 0x6D75735F776F7251 || *(unsigned char *)(*(void *)a3 + 8) != 115) {
          return result;
        }
        goto LABEL_19;
      }
      a3 = *(unsigned char **)a3;
LABEL_28:
      if (*(_DWORD *)a3 == 1633907537 && *((_WORD *)a3 + 2) == 25964)
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v135, v9, 1, 1, 1);
        std::string::size_type v22 = v135.__r_.__value_.__r.__words[0];
        BOOL v23 = (std::__shared_weak_count *)v7[40];
        *(_OWORD *)uint64_t v8 = *(_OWORD *)&v135.__r_.__value_.__l.__data_;
        if (v23)
        {
          nitro::nitro_function::nitro_function(v23);
          std::string::size_type v16 = *v8;
        }
        else
        {
          std::string::size_type v16 = v22;
        }
        if (a5 != 4 * *(int *)(v16 + 8))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v128, a5);
          unint64_t v28 = std::string::insert(&v128, 0, "Unexpected size s=");
          long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v129.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          int v30 = std::string::append(&v129, "/blob=");
          long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v130.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v127, 4 * *(int *)(*v8 + 8));
          if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v32 = &v127;
          }
          else {
            long long v32 = (std::string *)v127.__r_.__value_.__r.__words[0];
          }
          if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v127.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v127.__r_.__value_.__l.__size_;
          }
          std::string v34 = std::string::append(&v130, (const std::string::value_type *)v32, size);
          long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v131.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v124, " @ ");
          if ((v126 & 0x80u) == 0) {
            std::string v36 = (const std::string::value_type *)&v124;
          }
          else {
            std::string v36 = v124;
          }
          if ((v126 & 0x80u) == 0) {
            std::string::size_type v37 = v126;
          }
          else {
            std::string::size_type v37 = v125;
          }
          int v38 = std::string::append(&v131, v36, v37);
          long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
          v132.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v39;
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          char v40 = std::string::append(&v132, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
          long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
          v133.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v41;
          v40->__r_.__value_.__l.__size_ = 0;
          v40->__r_.__value_.__r.__words[2] = 0;
          v40->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v121, ":");
          if ((v123 & 0x80u) == 0) {
            uint64_t v42 = (const std::string::value_type *)&v121;
          }
          else {
            uint64_t v42 = v121;
          }
          if ((v123 & 0x80u) == 0) {
            std::string::size_type v43 = v123;
          }
          else {
            std::string::size_type v43 = v122;
          }
          BOOL v44 = std::string::append(&v133, v42, v43);
          long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          v134.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v120, 7082);
          if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v46 = &v120;
          }
          else {
            uint64_t v46 = (std::string *)v120.__r_.__value_.__r.__words[0];
          }
          if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v47 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v47 = v120.__r_.__value_.__l.__size_;
          }
          int v48 = std::string::append(&v134, (const std::string::value_type *)v46, v47);
          long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v135.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &v135);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      else
      {
        if (*(_DWORD *)a3 != 1935763810 || *((_WORD *)a3 + 2) != 29541) {
          return result;
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v135, v9, 1, 1, 1);
        std::string::size_type v20 = v135.__r_.__value_.__r.__words[0];
        uint64_t v21 = (std::__shared_weak_count *)v7[46];
        *((_OWORD *)v8 + 3) = *(_OWORD *)&v135.__r_.__value_.__l.__data_;
        if (v21)
        {
          nitro::nitro_function::nitro_function(v21);
          std::string::size_type v16 = v8[6];
        }
        else
        {
          std::string::size_type v16 = v20;
        }
        if (a5 != 4 * *(int *)(v16 + 8))
        {
          uint64_t v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v128, a5);
          long long v98 = std::string::insert(&v128, 0, "Unexpected size s=");
          long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
          v129.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v99;
          v98->__r_.__value_.__l.__size_ = 0;
          v98->__r_.__value_.__r.__words[2] = 0;
          v98->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v100 = std::string::append(&v129, "/blob=");
          long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
          v130.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v101;
          v100->__r_.__value_.__l.__size_ = 0;
          v100->__r_.__value_.__r.__words[2] = 0;
          v100->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v127, 4 * *(int *)(v8[6] + 8));
          if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v102 = &v127;
          }
          else {
            uint64_t v102 = (std::string *)v127.__r_.__value_.__r.__words[0];
          }
          if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v103 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v103 = v127.__r_.__value_.__l.__size_;
          }
          uint64_t v104 = std::string::append(&v130, (const std::string::value_type *)v102, v103);
          long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
          v131.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v105;
          v104->__r_.__value_.__l.__size_ = 0;
          v104->__r_.__value_.__r.__words[2] = 0;
          v104->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v124, " @ ");
          if ((v126 & 0x80u) == 0) {
            uint64_t v106 = (const std::string::value_type *)&v124;
          }
          else {
            uint64_t v106 = v124;
          }
          if ((v126 & 0x80u) == 0) {
            std::string::size_type v107 = v126;
          }
          else {
            std::string::size_type v107 = v125;
          }
          std::string::size_type v108 = std::string::append(&v131, v106, v107);
          long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
          v132.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v109;
          v108->__r_.__value_.__l.__size_ = 0;
          v108->__r_.__value_.__r.__words[2] = 0;
          v108->__r_.__value_.__r.__words[0] = 0;
          int v110 = std::string::append(&v132, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
          long long v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
          v133.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v111;
          v110->__r_.__value_.__l.__size_ = 0;
          v110->__r_.__value_.__r.__words[2] = 0;
          v110->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v121, ":");
          if ((v123 & 0x80u) == 0) {
            std::string::size_type v112 = (const std::string::value_type *)&v121;
          }
          else {
            std::string::size_type v112 = v121;
          }
          if ((v123 & 0x80u) == 0) {
            std::string::size_type v113 = v123;
          }
          else {
            std::string::size_type v113 = v122;
          }
          long long v114 = std::string::append(&v133, v112, v113);
          long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
          v134.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v115;
          v114->__r_.__value_.__l.__size_ = 0;
          v114->__r_.__value_.__r.__words[2] = 0;
          v114->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v120, 7091);
          if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v116 = &v120;
          }
          else {
            uint64_t v116 = (std::string *)v120.__r_.__value_.__r.__words[0];
          }
          if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v117 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v117 = v120.__r_.__value_.__l.__size_;
          }
          int v118 = std::string::append(&v134, (const std::string::value_type *)v116, v117);
          long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
          v135.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v119;
          v118->__r_.__value_.__l.__size_ = 0;
          v118->__r_.__value_.__r.__words[2] = 0;
          v118->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v97, &v135);
          __cxa_throw(v97, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      goto LABEL_131;
    }
    if (**(_DWORD **)a3 != 1634296401 || *(unsigned char *)(*(void *)a3 + 4) != 115) {
      return result;
    }
LABEL_46:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v135, v9, 1, 1, 1);
    std::string::size_type v25 = v135.__r_.__value_.__r.__words[0];
    int v26 = (std::__shared_weak_count *)v7[42];
    *((_OWORD *)v8 + 1) = *(_OWORD *)&v135.__r_.__value_.__l.__data_;
    if (v26)
    {
      nitro::nitro_function::nitro_function(v26);
      std::string::size_type v16 = v8[2];
    }
    else
    {
      std::string::size_type v16 = v25;
    }
    if (a5 != 4 * *(int *)(v16 + 8))
    {
      uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v128, a5);
      uint64_t v51 = std::string::insert(&v128, 0, "Unexpected size s=");
      long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v129.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      vImagePixelCount v53 = std::string::append(&v129, "/blob=");
      long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v130.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v127, 4 * *(int *)(v8[2] + 8));
      if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v55 = &v127;
      }
      else {
        long long v55 = (std::string *)v127.__r_.__value_.__r.__words[0];
      }
      if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v56 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v56 = v127.__r_.__value_.__l.__size_;
      }
      long long v57 = std::string::append(&v130, (const std::string::value_type *)v55, v56);
      long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v131.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v124, " @ ");
      if ((v126 & 0x80u) == 0) {
        int v59 = (const std::string::value_type *)&v124;
      }
      else {
        int v59 = v124;
      }
      if ((v126 & 0x80u) == 0) {
        std::string::size_type v60 = v126;
      }
      else {
        std::string::size_type v60 = v125;
      }
      int v61 = std::string::append(&v131, v59, v60);
      long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v132.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      BOOL v63 = std::string::append(&v132, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
      long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v133.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v121, ":");
      if ((v123 & 0x80u) == 0) {
        char v65 = (const std::string::value_type *)&v121;
      }
      else {
        char v65 = v121;
      }
      if ((v123 & 0x80u) == 0) {
        std::string::size_type v66 = v123;
      }
      else {
        std::string::size_type v66 = v122;
      }
      uint64_t v67 = std::string::append(&v133, v65, v66);
      long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v134.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v120, 7085);
      if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v69 = &v120;
      }
      else {
        long long v69 = (std::string *)v120.__r_.__value_.__r.__words[0];
      }
      if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v70 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v70 = v120.__r_.__value_.__l.__size_;
      }
      vImagePixelCount v71 = std::string::append(&v134, (const std::string::value_type *)v69, v70);
      long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v135.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v50, &v135);
      __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    goto LABEL_131;
  }
  int v10 = a3[23];
  if (v10 == 5)
  {
    if (*(_DWORD *)a3 != 1634296401 || a3[4] != 115) {
      return result;
    }
    goto LABEL_46;
  }
  if (v10 == 6) {
    goto LABEL_28;
  }
  if (v10 != 9) {
    return result;
  }
  if (*(void *)a3 != 0x6D75735F776F7251 || a3[8] != 115) {
    return result;
  }
LABEL_19:
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v135, v9, 1, 1, 1);
  std::string::size_type v14 = v135.__r_.__value_.__r.__words[0];
  uint64_t v15 = (std::__shared_weak_count *)v7[44];
  *((_OWORD *)v8 + 2) = *(_OWORD *)&v135.__r_.__value_.__l.__data_;
  if (v15)
  {
    nitro::nitro_function::nitro_function(v15);
    std::string::size_type v16 = v8[4];
  }
  else
  {
    std::string::size_type v16 = v14;
  }
  if (a5 != 4 * *(int *)(v16 + 8))
  {
    std::string v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v128, a5);
    uint64_t v74 = std::string::insert(&v128, 0, "Unexpected size s=");
    long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v129.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    BOOL v76 = std::string::append(&v129, "/blob=");
    long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v130.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v127, 4 * *(int *)(v8[4] + 8));
    if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v78 = &v127;
    }
    else {
      long long v78 = (std::string *)v127.__r_.__value_.__r.__words[0];
    }
    if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v79 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v79 = v127.__r_.__value_.__l.__size_;
    }
    int v80 = std::string::append(&v130, (const std::string::value_type *)v78, v79);
    long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v131.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v124, " @ ");
    if ((v126 & 0x80u) == 0) {
      uint64_t v82 = (const std::string::value_type *)&v124;
    }
    else {
      uint64_t v82 = v124;
    }
    if ((v126 & 0x80u) == 0) {
      std::string::size_type v83 = v126;
    }
    else {
      std::string::size_type v83 = v125;
    }
    uint64_t v84 = std::string::append(&v131, v82, v83);
    long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    v132.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    uint64_t v86 = std::string::append(&v132, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
    long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    v133.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v121, ":");
    if ((v123 & 0x80u) == 0) {
      vImagePixelCount v88 = (const std::string::value_type *)&v121;
    }
    else {
      vImagePixelCount v88 = v121;
    }
    if ((v123 & 0x80u) == 0) {
      std::string::size_type v89 = v123;
    }
    else {
      std::string::size_type v89 = v122;
    }
    uint64_t v90 = std::string::append(&v133, v88, v89);
    long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    v134.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0;
    v90->__r_.__value_.__r.__words[2] = 0;
    v90->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v120, 7088);
    if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v92 = &v120;
    }
    else {
      uint64_t v92 = (std::string *)v120.__r_.__value_.__r.__words[0];
    }
    if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v93 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v93 = v120.__r_.__value_.__l.__size_;
    }
    long long v94 = std::string::append(&v134, (const std::string::value_type *)v92, v93);
    long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
    v135.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v95;
    v94->__r_.__value_.__l.__size_ = 0;
    v94->__r_.__value_.__r.__words[2] = 0;
    v94->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v73, &v135);
    __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_131:
  uint64_t v96 = *(void **)(v16 + 16);

  return (char *)memcpy(v96, a4, a5);
}

void sub_1929FBAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (v60) {
    __cxa_free_exception(v59);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::generic_dynamic_dequantize_kernel::top_shapes_for_bottom_shapes@<X0>(long long **a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a2, *a1);
  a2[1] = result;
  return result;
}

void sub_1929FBD30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_load_global_kernel::has_dynamic_top_shape(Espresso::generic_load_global_kernel *this)
{
  return 1;
}

void Espresso::generic_load_global_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, char **a3)
{
  *(void *)&long long v51 = *MEMORY[0x1E4F143B8];
  Espresso::global_grad_name((uint64_t)&__str, (const void **)(a1 + 280));
  if (!*(unsigned char *)(a1 + 304)) {
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("non array mode load global grad");
  }
  uint64_t v6 = *(unsigned int *)(a1 + 332);
  if (v6)
  {
    if (v6 != 7 && v6 != 5) {
      Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("non array op %d", v6);
    }
    memset(&v43, 0, sizeof(v43));
    long long v45 = xmmword_192DC3600;
    uint64_t v46 = 0x100000001;
    char v44 = 1;
    int v47 = 0;
    std::string::operator=(&v43, &__str);
    std::string::basic_string[abi:ne180100]<0>(&v31, "store_global");
    uint64_t v8 = *a3;
    if ((*a3)[23] >= 0) {
      size_t v9 = (*a3)[23];
    }
    else {
      size_t v9 = *((void *)*a3 + 1);
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v9 + 5);
    if (SHIBYTE(v40) < 0) {
      p_p = __p;
    }
    if (v9)
    {
      if (v8[23] >= 0) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = *(char **)v8;
      }
      memmove(p_p, v11, v9);
    }
    strcpy((char *)p_p + v9, "_init");
    memset(v37, 0, sizeof(v37));
    memset(v36, 0, sizeof(v36));
    Espresso::sequential_builder::add<Espresso::store_global_params_t>(&v41, a2, (uint64_t)&v31, (uint64_t)&__p, (uint64_t)&v43, 0, 0, v36);
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    if (SHIBYTE(v40) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    memset(&v31, 0, sizeof(v31));
    long long v33 = xmmword_192DC3600;
    uint64_t v34 = 0x100000001;
    char v32 = 1;
    int v35 = 6;
    std::string::operator=(&v31, &__str);
    uint64_t v12 = *(long long **)a3[1];
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v13 = *v12;
      v50.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v13;
    }
    std::string __p = 0;
    long long v39 = 0;
    char v40 = 0;
    int v26 = &__p;
    char v27 = 0;
    std::string __p = operator new(0x18uLL);
    long long v39 = (std::string *)__p;
    char v40 = (std::string *)((char *)__p + 24);
    long long v39 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v40, (long long *)&v50, &v51, (std::string *)__p);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (*(_DWORD *)(a1 + 332) == 5)
    {
      int v35 = 4;
      uint64_t v14 = *(void *)a3[2];
      uint64_t v15 = v39;
      if (v39 >= v40)
      {
        int v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&__p, v14);
      }
      else
      {
        if (*(char *)(v14 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)v14, *(void *)(v14 + 8));
        }
        else
        {
          long long v16 = *(_OWORD *)v14;
          v39->__r_.__value_.__r.__words[2] = *(void *)(v14 + 16);
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
        }
        int v17 = v15 + 1;
      }
      long long v39 = v17;
    }
    std::string::basic_string[abi:ne180100]<0>(&v50, "store_global");
    uint64_t v18 = *a3;
    if ((*a3)[23] >= 0) {
      size_t v19 = (*a3)[23];
    }
    else {
      size_t v19 = *((void *)*a3 + 1);
    }
    std::string::size_type v20 = &v26;
    std::string::basic_string[abi:ne180100]((uint64_t)&v26, v19 + 8);
    if (v28 < 0) {
      std::string::size_type v20 = v26;
    }
    if (v19)
    {
      if (v18[23] >= 0) {
        uint64_t v21 = v18;
      }
      else {
        uint64_t v21 = *(char **)v18;
      }
      memmove(v20, v21, v19);
    }
    strcpy((char *)v20 + v19, "_scatter");
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, (uint64_t)__p, (uint64_t)v39, 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (unsigned char *)__p) >> 3));
    memset(v22, 0, sizeof(v22));
    Espresso::sequential_builder::add<Espresso::store_global_params_t>(&v29, a2, (uint64_t)&v50, (uint64_t)&v26, (uint64_t)&v31, v23, v24, v22);
    if (v30) {
      nitro::nitro_function::nitro_function(v30);
    }
    long long v49 = (void **)v22;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
    long long v49 = (void **)&v23;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
    if (v28 < 0) {
      operator delete(v26);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1929FC1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  *(void *)(v46 - 96) = &a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v46 - 161) < 0) {
    operator delete(*(void **)(v46 - 184));
  }
  if (*(char *)(v46 - 105) < 0) {
    operator delete(*(void **)(v46 - 128));
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::global_grad_name(uint64_t a1, const void **a2)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v3 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a1, v3 + 5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v5 = (void *)result;
  }
  else {
    uint64_t v5 = *(void **)result;
  }
  if (v3)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v5, v6, v3);
  }
  strcpy((char *)v5 + v3, "_grad");
  return result;
}

void Espresso::generic_phi_virtual_kernel::~generic_phi_virtual_kernel(void **this)
{
  Espresso::generic_phi_virtual_kernel::~generic_phi_virtual_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  *this = &unk_1EE35EE40;
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

BOOL Espresso::generic_instancenorm_1d_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v6 = a2[1];
    if (v6 != 5)
    {
      if (v6 == 6) {
        return *(_DWORD *)*a2 == 1835091831 && *(_WORD *)(*a2 + 4) == 24941;
      }
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else
  {
    int v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 != 5)
    {
      if (v2 == 6)
      {
        int v3 = *((unsigned __int16 *)a2 + 2);
        BOOL v4 = *(_DWORD *)a2 == 1835091831;
        int v5 = 24941;
        return v4 && v3 == v5;
      }
      return 0;
    }
  }
  int v3 = *((unsigned __int8 *)a2 + 4);
  BOOL v4 = *(_DWORD *)a2 == 1952793207;
  int v5 = 97;
  return v4 && v3 == v5;
}

void *Espresso::generic_instancenorm_1d_kernel::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  BOOL v7 = result;
  unint64_t v8 = (unint64_t)(int)a5 >> 2;
  if (*((char *)a3 + 23) < 0)
  {
    uint64_t v11 = a3[1];
    if (v11 != 5)
    {
      if (v11 != 6) {
        return result;
      }
      if (*(_DWORD *)*a3 != 1835091831 || *(_WORD *)(*a3 + 4) != 24941) {
        return result;
      }
      goto LABEL_17;
    }
    a3 = (uint64_t *)*a3;
LABEL_20:
    if (*(_DWORD *)a3 != 1952793207 || *((unsigned char *)a3 + 4) != 97) {
      return result;
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v85, v8, 1, 1, 1);
    std::string::size_type v17 = v85.__r_.__value_.__r.__words[0];
    uint64_t v18 = (std::__shared_weak_count *)*((void *)v7 + 41);
    *((_OWORD *)v7 + 20) = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
    if (v18)
    {
      nitro::nitro_function::nitro_function(v18);
      std::string::size_type v15 = *((void *)v7 + 40);
    }
    else
    {
      std::string::size_type v15 = v17;
    }
    if (a5 != 4 * *(int *)(v15 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v46 = a5;
      int v47 = exception;
      std::to_string(&v78, v46);
      int v48 = std::string::insert(&v78, 0, "Unexpected size s=");
      long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      std::string v50 = std::string::append(&v79, "/blob=");
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v77, 4 * *(int *)(*((void *)v7 + 40) + 8));
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v52 = &v77;
      }
      else {
        long long v52 = (std::string *)v77.__r_.__value_.__r.__words[0];
      }
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v77.__r_.__value_.__l.__size_;
      }
      long long v54 = std::string::append(&v80, (const std::string::value_type *)v52, size);
      long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v74, " @ ");
      if ((v76 & 0x80u) == 0) {
        std::string::size_type v56 = (const std::string::value_type *)&v74;
      }
      else {
        std::string::size_type v56 = v74;
      }
      if ((v76 & 0x80u) == 0) {
        std::string::size_type v57 = v76;
      }
      else {
        std::string::size_type v57 = v75;
      }
      long long v58 = std::string::append(&v81, v56, v57);
      long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      char v60 = std::string::append(&v82, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
      long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v71, ":");
      if ((v73 & 0x80u) == 0) {
        long long v62 = (const std::string::value_type *)&v71;
      }
      else {
        long long v62 = v71;
      }
      if ((v73 & 0x80u) == 0) {
        std::string::size_type v63 = v73;
      }
      else {
        std::string::size_type v63 = v72;
      }
      long long v64 = std::string::append(&v83, v62, v63);
      long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v70, 7749);
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v66 = &v70;
      }
      else {
        std::string::size_type v66 = (std::string *)v70.__r_.__value_.__r.__words[0];
      }
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v67 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v67 = v70.__r_.__value_.__l.__size_;
      }
      long long v68 = std::string::append(&v84, (const std::string::value_type *)v66, v67);
      long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v47, &v85);
      __cxa_throw(v47, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    goto LABEL_56;
  }
  int v9 = *((unsigned __int8 *)a3 + 23);
  if (v9 == 5) {
    goto LABEL_20;
  }
  if (v9 != 6) {
    return result;
  }
  if (*(_DWORD *)a3 != 1835091831 || *((_WORD *)a3 + 2) != 24941) {
    return result;
  }
LABEL_17:
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v85, v8, 1, 1, 1);
  std::string::size_type v13 = v85.__r_.__value_.__r.__words[0];
  uint64_t v14 = (std::__shared_weak_count *)*((void *)v7 + 39);
  *((_OWORD *)v7 + 19) = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
  if (v14)
  {
    nitro::nitro_function::nitro_function(v14);
    std::string::size_type v15 = *((void *)v7 + 38);
  }
  else
  {
    std::string::size_type v15 = v13;
  }
  if (a5 != 4 * *(int *)(v15 + 8))
  {
    size_t v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v20 = a5;
    uint64_t v21 = v19;
    std::to_string(&v78, v20);
    std::string::size_type v22 = std::string::insert(&v78, 0, "Unexpected size s=");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    uint64_t v24 = std::string::append(&v79, "/blob=");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v77, 4 * *(int *)(*((void *)v7 + 38) + 8));
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v26 = &v77;
    }
    else {
      int v26 = (std::string *)v77.__r_.__value_.__r.__words[0];
    }
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v27 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = v77.__r_.__value_.__l.__size_;
    }
    char v28 = std::string::append(&v80, (const std::string::value_type *)v26, v27);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v74, " @ ");
    if ((v76 & 0x80u) == 0) {
      int v30 = (const std::string::value_type *)&v74;
    }
    else {
      int v30 = v74;
    }
    if ((v76 & 0x80u) == 0) {
      std::string::size_type v31 = v76;
    }
    else {
      std::string::size_type v31 = v75;
    }
    char v32 = std::string::append(&v81, v30, v31);
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    uint64_t v34 = std::string::append(&v82, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v71, ":");
    if ((v73 & 0x80u) == 0) {
      std::string v36 = (const std::string::value_type *)&v71;
    }
    else {
      std::string v36 = v71;
    }
    if ((v73 & 0x80u) == 0) {
      std::string::size_type v37 = v73;
    }
    else {
      std::string::size_type v37 = v72;
    }
    int v38 = std::string::append(&v83, v36, v37);
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v70, 7746);
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v40 = &v70;
    }
    else {
      char v40 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v41 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v41 = v70.__r_.__value_.__l.__size_;
    }
    uint64_t v42 = std::string::append(&v84, (const std::string::value_type *)v40, v41);
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v21, &v85);
    __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_56:
  char v44 = *(void **)(v15 + 16);

  return memcpy(v44, a4, a5);
}

void sub_1929FCAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (v60) {
    __cxa_free_exception(v59);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_instancenorm_1d_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, _OWORD **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v28 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  uint64_t v7 = *((void *)*a2 + 4);
  long long v8 = (*a2)[1];
  *(_OWORD *)std::string::size_type v22 = **a2;
  long long v23 = v8;
  uint64_t v24 = v7;
  std::string __p = 0;
  int v26 = 0;
  uint64_t v27 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v6 + 5), *((void *)v6 + 6), (uint64_t)(*((void *)v6 + 6) - *((void *)v6 + 5)) >> 2);
  a3[2] = 0;
  *a3 = 0;
  a3[1] = 0;
  uint64_t v18 = a3;
  char v19 = 0;
  int v9 = (char *)operator new(0x40uLL);
  *a3 = v9;
  a3[1] = v9;
  a3[2] = v9 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)v22, &v28, (uint64_t)v9);
  if (__p)
  {
    int v26 = __p;
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "bnns_fused_slice_offset");
  int v10 = (void *)(a1 + 240);
  uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v10, (unsigned __int8 *)v22);
  uint64_t v12 = v11;
  if (SBYTE7(v23) < 0)
  {
    operator delete(v22[0]);
    if (!v12) {
      return;
    }
  }
  else if (!v11)
  {
    return;
  }
  std::string::size_type v13 = *a2;
  uint64_t v14 = *((void *)*a2 + 4);
  long long v15 = (*a2)[1];
  *(_OWORD *)std::string::size_type v22 = **a2;
  long long v23 = v15;
  uint64_t v24 = v14;
  std::string __p = 0;
  int v26 = 0;
  uint64_t v27 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v13 + 5), *((void *)v13 + 6), (uint64_t)(*((void *)v13 + 6) - *((void *)v13 + 5)) >> 2);
  std::string::basic_string[abi:ne180100]<0>(&v18, "bnns_fused_slice_size");
  uint64_t v21 = &v18;
  LODWORD(v22[0]) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v10, (unsigned __int8 *)&v18, (uint64_t)&std::piecewise_construct, (long long **)&v21)+ 10);
  if (v20 < 0) {
    operator delete(v18);
  }
  unint64_t v16 = a3[1];
  if (v16 >= a3[2])
  {
    uint64_t v17 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, (long long *)v22);
  }
  else
  {
    std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, (long long *)v22);
    uint64_t v17 = v16 + 64;
  }
  a3[1] = v17;
  if (__p)
  {
    int v26 = __p;
    operator delete(__p);
  }
}

void sub_1929FCE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

void sub_1929FCE98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  *(void *)(v21 + 8) = v22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  JUMPOUT(0x1929FCE90);
}

void sub_1929FCEC4()
{
}

void Espresso::generic_builtin_kernel::top_shapes_for_bottom_shapes(void *a1@<X8>)
{
  *((void *)&v11 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  *(void *)&long long v2 = 0x100000001;
  *((void *)&v2 + 1) = 0x100000001;
  long long v4 = v2;
  uint64_t v5 = 0x100000001;
  int v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  int v3 = (char *)operator new(0x40uLL);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 64;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a1 + 2), &v4, &v11, (uint64_t)v3);
  if (__p)
  {
    int v9 = __p;
    operator delete(__p);
  }
}

void sub_1929FCFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  *(void *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_transplant_kernel::create_batchnorm_params(Espresso::generic_transplant_kernel *this@<X0>, void *a2@<X8>)
{
  int v2 = *((_DWORD *)this + 76);
  if (v2 <= 0) {
    int v3 = 4;
  }
  else {
    int v3 = 4 * v2;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a2, v3, 1, 1, 1);
}

void Espresso::generic_transplant_kernel::create_weights_blob(Espresso::generic_transplant_kernel *this@<X0>, void *a2@<X8>)
{
  int v2 = *((_DWORD *)this + 76);
  if (v2 <= 0) {
    int v3 = 4;
  }
  else {
    int v3 = 4 * v2;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a2, v3, 1, 1, 1);
}

void Espresso::generic_transplant_kernel::set_batchnorm_params(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 368);
  *(void *)(a1 + 360) = v3;
  *(void *)(a1 + 368) = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::generic_transplant_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 352);
  *(void *)(a1 + 344) = v3;
  *(void *)(a1 + 352) = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

BOOL Espresso::generic_transplant_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v3 = a2[1];
    if (v3 == 6) {
      return *(_DWORD *)*a2 == 1718184051 && *(_WORD *)(*a2 + 4) == 29556;
    }
    if (v3 != 16) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else
  {
    int v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 == 6) {
      return *(_DWORD *)a2 == 1718184051 && *((_WORD *)a2 + 2) == 29556;
    }
    if (v2 != 16) {
      return 0;
    }
  }
  return *a2 == 0x726F6E6863746162 && a2[1] == 0x736D617261705F6DLL;
}

void Espresso::generic_transplant_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5, void *a6)
{
  if (a6 && *a6)
  {
    int v9 = (std::__shared_weak_count *)a6[1];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v9 = 0;
  }
  uint64_t v10 = (std::string::size_type *)(a1 + 344);
  unint64_t v11 = (unint64_t)(int)a5 >> 2;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
    int v12 = *((unsigned __int8 *)a3 + 23);
    if (v12 != 6)
    {
      if (v12 != 16) {
        goto LABEL_31;
      }
      goto LABEL_13;
    }
    if (*(_DWORD *)a3 != 1718184051 || *((_WORD *)a3 + 2) != 29556) {
LABEL_31:
    }
      Espresso::throw_exception_selector<Espresso::generic_error>("Unrecognized weights in generic transplant kernel.");
LABEL_25:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v83, v11, 1, 1, 1);
    std::string::size_type v19 = v83.__r_.__value_.__r.__words[0];
    char v20 = *(std::__shared_weak_count **)(a1 + 352);
    *(_OWORD *)uint64_t v10 = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
    if (v20)
    {
      nitro::nitro_function::nitro_function(v20);
      std::string::size_type v17 = *v10;
    }
    else
    {
      std::string::size_type v17 = v19;
    }
    if (a5 != 4 * *(int *)(v17 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v76, a5);
      long long v23 = std::string::insert(&v76, 0, "Unexpected size s=");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      long long v25 = std::string::append(&v77, "/blob=");
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v75, 4 * *(int *)(*v10 + 8));
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v27 = &v75;
      }
      else {
        uint64_t v27 = (std::string *)v75.__r_.__value_.__r.__words[0];
      }
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v75.__r_.__value_.__l.__size_;
      }
      long long v29 = std::string::append(&v78, (const std::string::value_type *)v27, size);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v72, " @ ");
      if ((v74 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)&v72;
      }
      else {
        std::string::size_type v31 = v72;
      }
      if ((v74 & 0x80u) == 0) {
        std::string::size_type v32 = v74;
      }
      else {
        std::string::size_type v32 = v73;
      }
      long long v33 = std::string::append(&v79, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      long long v35 = std::string::append(&v80, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v69, ":");
      if ((v71 & 0x80u) == 0) {
        std::string::size_type v37 = (const std::string::value_type *)&v69;
      }
      else {
        std::string::size_type v37 = v69;
      }
      if ((v71 & 0x80u) == 0) {
        std::string::size_type v38 = v71;
      }
      else {
        std::string::size_type v38 = v70;
      }
      long long v39 = std::string::append(&v81, v37, v38);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v68, 7921);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v41 = &v68;
      }
      else {
        std::string::size_type v41 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v42 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v42 = v68.__r_.__value_.__l.__size_;
      }
      long long v43 = std::string::append(&v82, (const std::string::value_type *)v41, v42);
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v83);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    goto LABEL_61;
  }
  uint64_t v13 = a3[1];
  if (v13 == 6)
  {
    if (*(_DWORD *)*a3 != 1718184051 || *(_WORD *)(*a3 + 4) != 29556) {
      goto LABEL_31;
    }
    goto LABEL_25;
  }
  if (v13 != 16) {
    goto LABEL_31;
  }
  a3 = (uint64_t *)*a3;
LABEL_13:
  if (*a3 != 0x726F6E6863746162 || a3[1] != 0x736D617261705F6DLL) {
    goto LABEL_31;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v83, v11, 1, 1, 1);
  std::string::size_type v15 = v83.__r_.__value_.__r.__words[0];
  unint64_t v16 = *(std::__shared_weak_count **)(a1 + 368);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
  if (v16)
  {
    nitro::nitro_function::nitro_function(v16);
    std::string::size_type v17 = *(void *)(a1 + 360);
  }
  else
  {
    std::string::size_type v17 = v15;
  }
  if (a5 != 4 * *(int *)(v17 + 8))
  {
    long long v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v76, a5);
    unint64_t v46 = std::string::insert(&v76, 0, "Unexpected size s=");
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    int v48 = std::string::append(&v77, "/blob=");
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v75, 4 * *(int *)(*(void *)(a1 + 360) + 8));
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v50 = &v75;
    }
    else {
      std::string v50 = (std::string *)v75.__r_.__value_.__r.__words[0];
    }
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v51 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v51 = v75.__r_.__value_.__l.__size_;
    }
    long long v52 = std::string::append(&v78, (const std::string::value_type *)v50, v51);
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v72, " @ ");
    if ((v74 & 0x80u) == 0) {
      long long v54 = (const std::string::value_type *)&v72;
    }
    else {
      long long v54 = v72;
    }
    if ((v74 & 0x80u) == 0) {
      std::string::size_type v55 = v74;
    }
    else {
      std::string::size_type v55 = v73;
    }
    std::string::size_type v56 = std::string::append(&v79, v54, v55);
    long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    long long v58 = std::string::append(&v80, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
    long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v69, ":");
    if ((v71 & 0x80u) == 0) {
      char v60 = (const std::string::value_type *)&v69;
    }
    else {
      char v60 = v69;
    }
    if ((v71 & 0x80u) == 0) {
      std::string::size_type v61 = v71;
    }
    else {
      std::string::size_type v61 = v70;
    }
    long long v62 = std::string::append(&v81, v60, v61);
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v68, 7926);
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v64 = &v68;
    }
    else {
      long long v64 = (std::string *)v68.__r_.__value_.__r.__words[0];
    }
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v65 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v65 = v68.__r_.__value_.__l.__size_;
    }
    std::string::size_type v66 = std::string::append(&v82, (const std::string::value_type *)v64, v65);
    long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v45, &v83);
    __cxa_throw(v45, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_61:
  memcpy(*(void **)(v17 + 16), a4, a5);
  if (v9)
  {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1929FD730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v62 - 73) < 0) {
    operator delete(*(void **)(v62 - 96));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v62 - 105) < 0) {
    operator delete(*(void **)(v62 - 128));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v62 - 137) < 0) {
    operator delete(*(void **)(v62 - 160));
  }
  if (*(char *)(v62 - 169) < 0) {
    operator delete(*(void **)(v62 - 192));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v61 & 1) == 0)
    {
LABEL_28:
      if (v59) {
        nitro::nitro_function::nitro_function(v59);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v61)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v60);
  goto LABEL_28;
}

uint64_t Espresso::generic_transplant_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  long long v4 = *(long long **)a1;
  uint64_t v6 = *(void *)(a1 + 8) - (void)v4;
  if (v6 != 128) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("generic_transplant_kernel: expected 2 bottom blobs, got %d", v6 >> 6);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v7 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a2, v4);
  unint64_t v8 = a2[2];
  int v9 = *(long long **)a1;
  a2[1] = v7;
  uint64_t v10 = v9 + 4;
  if (v7 >= v8)
  {
    uint64_t result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a2, v10);
  }
  else
  {
    std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a2, v10);
    uint64_t result = v7 + 64;
  }
  a2[1] = result;
  return result;
}

void sub_1929FD994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::loopkit_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_loopkit_kernel::kernel_type_str(Espresso::generic_loopkit_kernel *this)
{
  return "loopkit";
}

BOOL Espresso::generic_static_dequantize_kernel::supports_weight_key(uint64_t a1, unsigned __int8 **a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v3 = a2[1];
    if (v3 != (unsigned __int8 *)1)
    {
      if (v3 != (unsigned __int8 *)6) {
        return 0;
      }
      a2 = (unsigned __int8 **)*a2;
      return *(_DWORD *)a2 == 1935763810 && *((_WORD *)a2 + 2) == 29541;
    }
    int v6 = **a2;
  }
  else
  {
    int v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 != 1)
    {
      if (v2 != 6) {
        return 0;
      }
      return *(_DWORD *)a2 == 1935763810 && *((_WORD *)a2 + 2) == 29541;
    }
    int v6 = *(unsigned __int8 *)a2;
  }
  return v6 == 98;
}

void *Espresso::generic_static_dequantize_kernel::__set_weight_raw_blob(void *result, uint64_t a2, unsigned __int8 **a3, const void *a4, size_t a5)
{
  unint64_t v7 = result;
  if (*((char *)a3 + 23) < 0)
  {
    int v9 = a3[1];
    if (v9 != (unsigned __int8 *)1)
    {
      if (v9 != (unsigned __int8 *)6) {
        return result;
      }
      a3 = (unsigned __int8 **)*a3;
LABEL_8:
      if (*(_DWORD *)a3 != 1935763810 || *((_WORD *)a3 + 2) != 29541) {
        return result;
      }
      goto LABEL_16;
    }
    int v11 = **a3;
  }
  else
  {
    int v8 = *((unsigned __int8 *)a3 + 23);
    if (v8 != 1)
    {
      if (v8 != 6) {
        return result;
      }
      goto LABEL_8;
    }
    int v11 = *(unsigned __int8 *)a3;
  }
  if (v11 != 98) {
    return result;
  }
LABEL_16:
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v54, (unint64_t)(int)a5 >> 2, 1, 1, 1);
  std::string::size_type v12 = v54.__r_.__value_.__r.__words[0];
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v7 + 43);
  *((_OWORD *)v7 + 21) = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
  if (v13)
  {
    nitro::nitro_function::nitro_function(v13);
    std::string::size_type v14 = *((void *)v7 + 42);
  }
  else
  {
    std::string::size_type v14 = v12;
  }
  if (a5 != 4 * *(int *)(v14 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v17 = a5;
    uint64_t v18 = exception;
    std::to_string(&v47, v17);
    std::string::size_type v19 = std::string::insert(&v47, 0, "Unexpected size s=");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = std::string::append(&v48, "/blob=");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v46, 4 * *(int *)(*((void *)v7 + 42) + 8));
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v23 = &v46;
    }
    else {
      long long v23 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v46.__r_.__value_.__l.__size_;
    }
    long long v25 = std::string::append(&v49, (const std::string::value_type *)v23, size);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v44, " @ ");
    if ((v45 & 0x80u) == 0) {
      uint64_t v27 = (const std::string::value_type *)v44;
    }
    else {
      uint64_t v27 = (const std::string::value_type *)v44[0];
    }
    if ((v45 & 0x80u) == 0) {
      std::string::size_type v28 = v45;
    }
    else {
      std::string::size_type v28 = v44[1];
    }
    long long v29 = std::string::append(&v50, v27, v28);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v31 = std::string::append(&v51, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v42, ":");
    if ((v43 & 0x80u) == 0) {
      long long v33 = (const std::string::value_type *)v42;
    }
    else {
      long long v33 = (const std::string::value_type *)v42[0];
    }
    if ((v43 & 0x80u) == 0) {
      std::string::size_type v34 = v43;
    }
    else {
      std::string::size_type v34 = v42[1];
    }
    long long v35 = std::string::append(&v52, v33, v34);
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v41, 5535);
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v37 = &v41;
    }
    else {
      std::string::size_type v37 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v38 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v38 = v41.__r_.__value_.__l.__size_;
    }
    long long v39 = std::string::append(&v53, (const std::string::value_type *)v37, v38);
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v18, &v54);
    __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string::size_type v15 = *(void **)(v14 + 16);

  return memcpy(v15, a4, a5);
}

void sub_1929FDD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::linear_quantize_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void *Espresso::generic_linear_quantize_kernel::get_runtime_type_config@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(a4, a2, a3);
  uint64_t v7 = a4[1] - *a4;
  if (v7)
  {
    unint64_t v8 = v7 / 40;
    int v9 = *(_DWORD *)(a1 + 284);
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    uint64_t v10 = (_DWORD *)(a4[3] + 8);
    int v11 = (_DWORD *)(*a4 + 8);
    do
    {
      if (*v11 >= 2u) {
        *int v11 = 0;
      }
      if (v9 == -1)
      {
        if (*v10 != 2 && *v10 != 4) {
          *uint64_t v10 = 4;
        }
      }
      else
      {
        if (v9 != 2 && v9 != 4) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_linear_quantize_kernel: Only int8 and uint8 dst_compute_path supported");
        }
        *uint64_t v10 = v9;
      }
      v10 += 10;
      v11 += 10;
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_1929FDFD0(_Unwind_Exception *a1)
{
  std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::~pair(v1);
  _Unwind_Resume(a1);
}

void **std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::~pair(void **a1)
{
  uint64_t v3 = a1 + 3;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

const char *Espresso::generic_linear_quantize_kernel::kernel_type_str(Espresso::generic_linear_quantize_kernel *this)
{
  return "linear_quantize";
}

BOOL Espresso::generic_linear_quantize_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v3 = a2[1];
    if (v3 == 5) {
      return *(_DWORD *)*a2 == 1818321779 && *(unsigned char *)(*a2 + 4) == 101;
    }
    if (v3 != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
    goto LABEL_8;
  }
  int v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 != 5)
  {
    if (v2 != 10) {
      return 0;
    }
LABEL_8:
    int v4 = *((unsigned __int16 *)a2 + 4);
    BOOL v5 = *a2 == 0x696F705F6F72657ALL;
    int v6 = 29806;
    return v5 && v4 == v6;
  }
  int v4 = *((unsigned __int8 *)a2 + 4);
  BOOL v5 = *(_DWORD *)a2 == 1818321779;
  int v6 = 101;
  return v5 && v4 == v6;
}

void Espresso::generic_linear_quantize_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, _DWORD *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  if (!a6)
  {
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  uint64_t v7 = *a6;
  if (!*a6)
  {
LABEL_6:
    unint64_t v8 = 0;
    goto LABEL_7;
  }
  unint64_t v8 = (std::__shared_weak_count *)a6[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (*((char *)a3 + 23) < 0)
  {
    uint64_t v10 = *((void *)a3 + 1);
    if (v10 != 5)
    {
      if (v10 != 10) {
        goto LABEL_41;
      }
      a3 = *(_DWORD **)a3;
      goto LABEL_14;
    }
    if (**(_DWORD **)a3 != 1818321779 || *(unsigned char *)(*(void *)a3 + 4) != 101) {
LABEL_41:
    }
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_linear_quantize_kernel: Weight key not valid");
LABEL_28:
    v16[0] = v7;
    v16[1] = (uint64_t)v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,4>(&v17, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v16, a5 >> 2, 1, 1, 1, (a4 & 0x3F) == 0);
    std::string::size_type v12 = *(std::__shared_weak_count **)(a1 + 296);
    *(_OWORD *)(a1 + 288) = v17;
    if (!v12) {
      goto LABEL_32;
    }
LABEL_31:
    nitro::nitro_function::nitro_function(v12);
    goto LABEL_32;
  }
  int v9 = *((unsigned __int8 *)a3 + 23);
  if (v9 == 5)
  {
    if (*a3 != 1818321779 || *((unsigned char *)a3 + 4) != 101) {
      goto LABEL_41;
    }
    goto LABEL_28;
  }
  if (v9 != 10) {
    goto LABEL_41;
  }
LABEL_14:
  if (*(void *)a3 != 0x696F705F6F72657ALL || *((_WORD *)a3 + 4) != 29806) {
    goto LABEL_41;
  }
  v15[0] = v7;
  v15[1] = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<int,4>(&v17, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v15, a5 >> 2, (a4 & 0x3F) == 0);
  std::string::size_type v12 = *(std::__shared_weak_count **)(a1 + 312);
  *(_OWORD *)(a1 + 304) = v17;
  if (v12) {
    goto LABEL_31;
  }
LABEL_32:
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_1929FE2B8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    nitro::nitro_function::nitro_function(v1);
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<int,4>(void *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, char a8)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *a6;
  uint64_t v13 = (std::__shared_weak_count *)a6[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = 0;
  a1[1] = 0;
  if (*(unsigned char *)(a2 + 73))
  {
    if (!v14 || (a8 & 1) != 0)
    {
      if (!v14) {
        goto LABEL_9;
      }
    }
    else if (!*(unsigned char *)(a2 + 123))
    {
      goto LABEL_9;
    }
    uint64_t v18 = operator new(0x60uLL);
    v18[1] = 0;
    _OWORD v18[2] = 0;
    *uint64_t v18 = &unk_1EE389BF8;
    v18[3] = &unk_1EE36C050;
    *((_OWORD *)v18 + 4) = 0u;
    *((_OWORD *)v18 + 5) = 0u;
    *((_DWORD *)v18 + 8) = a7;
    *(void *)((char *)v18 + 36) = 0x100000001;
    *((_DWORD *)v18 + 11) = 1;
    v18[6] = a4;
    *((unsigned char *)v18 + 56) = 0;
    *a1 = v18 + 3;
    a1[1] = v18;
    if (!v13)
    {
      v18[8] = v14;
      v18[9] = 0;
      if (!a3) {
        return;
      }
      goto LABEL_19;
    }
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    v18[8] = v14;
    v18[9] = v13;
    goto LABEL_17;
  }
LABEL_9:
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,4>,std::allocator<Espresso::blob<int,4>>,int &,int &,int &,int &,void>(&v33, a7, 1, 1, 1);
  uint64_t v15 = 0;
  long long v16 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
  *(_OWORD *)a1 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
  uint64_t v17 = *(int *)(v16 + 8);
  do
  {
    v17 *= *(int *)(v16 + 12 + v15);
    v15 += 4;
  }
  while (v15 != 12);
  if (a5 != 4 * v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v30, a5);
    long long v20 = std::string::insert(&v30, 0, "Unexpected size s=");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    long long v22 = std::string::append(&v31, "/blob=");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    uint64_t v24 = *(int *)(v16 + 8);
    do
      v24 *= *(int *)(v16 + 12 + *((void *)&v16 + 1));
    while (*((void *)&v16 + 1) != 8);
    std::to_string(&v29, 4 * v24);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v25 = &v29;
    }
    else {
      long long v25 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v29.__r_.__value_.__l.__size_;
    }
    uint64_t v27 = std::string::append(&v32, (const std::string::value_type *)v25, size);
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v33);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  memcpy(*(void **)(v16 + 24), a4, a5);
  if (v13) {
LABEL_17:
  }
    nitro::nitro_function::nitro_function(v13);
  if (!a3) {
    return;
  }
LABEL_19:

  nitro::nitro_function::nitro_function(a3);
}

void sub_1929FE5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v39 - 73) < 0) {
    operator delete(*(void **)(v39 - 96));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v38 & 1) == 0)
    {
LABEL_14:
      if (a10)
      {
        nitro::nitro_function::nitro_function(a10);
        if (!v36)
        {
LABEL_16:
          if (!v35) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
      else if (!v36)
      {
        goto LABEL_16;
      }
      nitro::nitro_function::nitro_function(v36);
      if (!v35) {
LABEL_18:
      }
        _Unwind_Resume(a1);
LABEL_17:
      nitro::nitro_function::nitro_function(v35);
      goto LABEL_18;
    }
  }
  else if (!v38)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v37);
  goto LABEL_14;
}

void Espresso::blob<int,4>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C050;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 24) = 0;
  int v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  BOOL v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<int,4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389BF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<int,4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389BF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *Espresso::generic_linear_quantize_kernel::top_shapes_for_bottom_shapes@<X0>(long long **a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a2, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 6);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::linear_dequantize_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void *Espresso::generic_linear_dequantize_kernel::get_runtime_type_config@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(a4, a2, a3);
  uint64_t v7 = a4[1] - *a4;
  if (v7)
  {
    unint64_t v8 = v7 / 40;
    unsigned int v9 = *(_DWORD *)(a1 + 284);
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    uint64_t v10 = (unsigned int *)(a4[3] + 8);
    int v11 = (_DWORD *)(*a4 + 8);
    do
    {
      if (*v11 != 2 && *v11 != 4) {
        *int v11 = 4;
      }
      if (v9 >= 2)
      {
        if (v9 != -1) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_linear_quantize_kernel: Only fp16 and fp32 dst_compute_path supported");
        }
        if (*v10 >= 2) {
          *uint64_t v10 = 0;
        }
      }
      else
      {
        *uint64_t v10 = v9;
      }
      v10 += 10;
      v11 += 10;
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_1929FE8B0(_Unwind_Exception *a1)
{
  std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::~pair(v1);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_linear_dequantize_kernel::kernel_type_str(Espresso::generic_linear_dequantize_kernel *this)
{
  return "linear_dequantize";
}

BOOL Espresso::generic_linear_dequantize_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v3 = a2[1];
    if (v3 == 5) {
      return *(_DWORD *)*a2 == 1818321779 && *(unsigned char *)(*a2 + 4) == 101;
    }
    if (v3 != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
    goto LABEL_8;
  }
  int v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 != 5)
  {
    if (v2 != 10) {
      return 0;
    }
LABEL_8:
    int v4 = *((unsigned __int16 *)a2 + 4);
    BOOL v5 = *a2 == 0x696F705F6F72657ALL;
    int v6 = 29806;
    return v5 && v4 == v6;
  }
  int v4 = *((unsigned __int8 *)a2 + 4);
  BOOL v5 = *(_DWORD *)a2 == 1818321779;
  int v6 = 101;
  return v5 && v4 == v6;
}

void Espresso::generic_linear_dequantize_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, _DWORD *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  if (!a6)
  {
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  uint64_t v7 = *a6;
  if (!*a6)
  {
LABEL_6:
    unint64_t v8 = 0;
    goto LABEL_7;
  }
  unint64_t v8 = (std::__shared_weak_count *)a6[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (*((char *)a3 + 23) < 0)
  {
    uint64_t v10 = *((void *)a3 + 1);
    if (v10 != 5)
    {
      if (v10 != 10) {
        goto LABEL_41;
      }
      a3 = *(_DWORD **)a3;
      goto LABEL_14;
    }
    if (**(_DWORD **)a3 != 1818321779 || *(unsigned char *)(*(void *)a3 + 4) != 101) {
LABEL_41:
    }
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_linear_quantize_kernel: Weight key not valid");
LABEL_28:
    v16[0] = v7;
    v16[1] = (uint64_t)v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,4>(&v17, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v16, a5 >> 2, 1, 1, 1, (a4 & 0x3F) == 0);
    std::string::size_type v12 = *(std::__shared_weak_count **)(a1 + 296);
    *(_OWORD *)(a1 + 288) = v17;
    if (!v12) {
      goto LABEL_32;
    }
LABEL_31:
    nitro::nitro_function::nitro_function(v12);
    goto LABEL_32;
  }
  int v9 = *((unsigned __int8 *)a3 + 23);
  if (v9 == 5)
  {
    if (*a3 != 1818321779 || *((unsigned char *)a3 + 4) != 101) {
      goto LABEL_41;
    }
    goto LABEL_28;
  }
  if (v9 != 10) {
    goto LABEL_41;
  }
LABEL_14:
  if (*(void *)a3 != 0x696F705F6F72657ALL || *((_WORD *)a3 + 4) != 29806) {
    goto LABEL_41;
  }
  v15[0] = v7;
  v15[1] = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<int,4>(&v17, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v15, a5 >> 2, (a4 & 0x3F) == 0);
  std::string::size_type v12 = *(std::__shared_weak_count **)(a1 + 312);
  *(_OWORD *)(a1 + 304) = v17;
  if (v12) {
    goto LABEL_31;
  }
LABEL_32:
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_1929FEB50(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    nitro::nitro_function::nitro_function(v1);
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void *Espresso::generic_linear_dequantize_kernel::top_shapes_for_bottom_shapes@<X0>(long long **a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a2, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 6);
}

void Espresso::generic_rnn_kernel::__launch_lstm_generic(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, uint64_t a7, void *a8, void *a9, int a10)
{
  uint64_t v14 = (_DWORD *)*a8;
  if (*a8) {
    unsigned int v15 = v14[5];
  }
  else {
    unsigned int v15 = 1;
  }
  unsigned int v16 = *(_DWORD *)(a1 + 312);
  long long v17 = (std::__shared_weak_count *)a8[1];
  std::string::size_type v66 = (_DWORD *)*a8;
  long long v67 = v17;
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = (_DWORD *)*a8;
  }
  if (!v14)
  {
    std::string::basic_string[abi:ne180100]<0>(&v61, "W_embedding_in_write");
    long long v59 = &v61;
    uint64_t v24 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v61, (_OWORD **)&v59);
    std::string::size_type v19 = (std::__shared_weak_count *)*((void *)v24 + 8);
    long long v64 = (int32x2_t *)*((void *)v24 + 7);
    std::string::size_type v65 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v63 < 0) {
      operator delete(v61);
    }
    std::string::basic_string[abi:ne180100]<0>(&v61, "b_embedding_in_write");
    v54[0] = &v61;
    long long v25 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v61, v54);
    long long v26 = (std::__shared_weak_count *)*((void *)v25 + 8);
    long long v59 = (void **)*((void *)v25 + 7);
    int v60 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v63 < 0)
    {
      operator delete(v61);
      if (!a10)
      {
LABEL_33:
        std::string::basic_string[abi:ne180100]<0>(&v61, "W_embedding_in");
        v54[0] = &v61;
        uint64_t v27 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v61, v54);
        long long v28 = (int32x2_t *)*((void *)v27 + 7);
        std::string v29 = (std::__shared_weak_count *)*((void *)v27 + 8);
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v64 = v28;
        std::string::size_type v65 = v29;
        if (v19) {
          nitro::nitro_function::nitro_function(v19);
        }
        if (v63 < 0) {
          operator delete(v61);
        }
        std::string::basic_string[abi:ne180100]<0>(&v61, "b_embedding_in");
        v54[0] = &v61;
        std::string v30 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v61, v54);
        std::string v31 = (void **)*((void *)v30 + 7);
        std::string v32 = (std::__shared_weak_count *)*((void *)v30 + 8);
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v59 = v31;
        int v60 = v32;
        if (v26) {
          nitro::nitro_function::nitro_function(v26);
        }
        if (v63 < 0) {
          operator delete(v61);
        }
        std::string::size_type v19 = v29;
        long long v26 = v32;
      }
    }
    else if (!a10)
    {
      goto LABEL_33;
    }
    std::string::basic_string[abi:ne180100]<0>(v57, "x_p_tmp");
    Espresso::generic_rnn_kernel::cached_temp_blob(a1, v57, 1u, 1u, v16, v15, &v61);
    long long v22 = v62;
    std::string::size_type v66 = v61;
    long long v67 = v62;
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    if (v58 < 0) {
      operator delete(v57[0]);
    }
    *(_DWORD *)(a1 + 732) = 1;
    Espresso::matmul_shorthand::operator()(a1 + 664, a2, &v66, &v64, &v59, a9);
    if (!v26) {
      goto LABEL_53;
    }
    long long v23 = v26;
    goto LABEL_52;
  }
  if (*(int *)(a1 + 324) < 1)
  {
    long long v22 = v17;
    goto LABEL_55;
  }
  std::string::basic_string[abi:ne180100]<0>(&v61, "W_embedding_in");
  long long v59 = &v61;
  uint64_t v18 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v61, (_OWORD **)&v59);
  std::string::size_type v19 = (std::__shared_weak_count *)*((void *)v18 + 8);
  long long v64 = (int32x2_t *)*((void *)v18 + 7);
  std::string::size_type v65 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v63 < 0) {
    operator delete(v61);
  }
  std::string::basic_string[abi:ne180100]<0>(&v61, "b_embedding_in");
  v54[0] = &v61;
  long long v20 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v61, v54);
  long long v21 = (std::__shared_weak_count *)*((void *)v20 + 8);
  long long v59 = (void **)*((void *)v20 + 7);
  int v60 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v63 < 0) {
    operator delete(v61);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "x_p_tmp");
  Espresso::generic_rnn_kernel::cached_temp_blob(a1, __p, 1u, 1u, v16, v15, &v61);
  long long v22 = v62;
  std::string::size_type v66 = v61;
  long long v67 = v62;
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  Espresso::matmul_shorthand::operator()(a1 + 376, a2, &v66, &v64, &v59, a8);
  if (v21)
  {
    long long v23 = v21;
LABEL_52:
    nitro::nitro_function::nitro_function(v23);
  }
LABEL_53:
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
LABEL_55:
  std::string::basic_string[abi:ne180100]<0>(&v61, "W_h");
  long long v59 = &v61;
  std::string v33 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v61, (_OWORD **)&v59);
  std::string::size_type v34 = (std::__shared_weak_count *)*((void *)v33 + 8);
  long long v64 = (int32x2_t *)*((void *)v33 + 7);
  std::string::size_type v65 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v63 < 0) {
    operator delete(v61);
  }
  std::string::basic_string[abi:ne180100]<0>(&v61, "W_x");
  v54[0] = &v61;
  long long v35 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v61, v54);
  long long v36 = (std::__shared_weak_count *)*((void *)v35 + 8);
  long long v59 = (void **)*((void *)v35 + 7);
  int v60 = v36;
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v63 < 0) {
    operator delete(v61);
  }
  std::string::basic_string[abi:ne180100]<0>(&v61, "b");
  std::string v52 = &v61;
  std::string::size_type v37 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v61, (_OWORD **)&v52);
  uint64_t v38 = *((void *)v37 + 8);
  v54[0] = *((_OWORD **)v37 + 7);
  v54[1] = (_OWORD *)v38;
  if (v38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
  }
  if (v63 < 0) {
    operator delete(v61);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "ifog");
  Espresso::generic_rnn_kernel::cached_temp_blob(a1, v50, 1u, 1u, 4 * v16, v15, &v52);
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  Espresso::matmul_shorthand::operator()(a1 + 448, a2, &v52, &v64, &v61, a6);
  *(_DWORD *)(a1 + 584) = 1;
  Espresso::matmul_shorthand::operator()(a1 + 520, a2, &v52, (int32x2_t **)&v59, v54, &v66);
  (*(void (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t, void ***))(*(void *)a1 + 416))(a1, a2, a3, a4, a7, &v52);
  if (*(int *)(a1 + 328) < 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not implemented");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v61, "W_embedding_out");
  v48[0] = &v61;
  uint64_t v39 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v61, v48);
  uint64_t v40 = *((void *)v39 + 8);
  v49[0] = *((int32x2_t **)v39 + 7);
  v49[1] = (int32x2_t *)v40;
  if (v40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
  }
  if (v63 < 0) {
    operator delete(v61);
  }
  std::string::basic_string[abi:ne180100]<0>(&v61, "b_embedding_out");
  std::string v68 = &v61;
  std::string v41 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v61, (_OWORD **)&v68);
  uint64_t v42 = *((void *)v41 + 8);
  v48[0] = *((_OWORD **)v41 + 7);
  v48[1] = (_OWORD *)v42;
  if (v42) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
  }
  if (v63 < 0) {
    operator delete(v61);
  }
  Espresso::matmul_shorthand::operator()(a1 + 592, a2, a5, v49, v48, a3);
  if (v42) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v42);
  }
  if (v40) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v40);
  }
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  if (v38) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38);
  }
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
}

void sub_1929FF28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (*(char *)(v41 - 129) < 0) {
    operator delete(*(void **)(v41 - 152));
  }
  unsigned __int8 v43 = v39;
  if (v38)
  {
    nitro::nitro_function::nitro_function(v38);
    unsigned __int8 v43 = *(std::__shared_weak_count **)(v41 - 120);
  }
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_rnn_kernel::cached_temp_blob(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, unsigned int a6@<W5>, void *a7@<X8>)
{
  int v11 = a2;
  *(void *)&long long v29 = a2;
  uint64_t v14 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 800), a2, (long long **)&v29);
  unsigned int v15 = v14;
  unsigned int v16 = (_DWORD *)v14[7];
  if (v16 && v16[2] == a3 && v16[3] == a4 && v16[4] == a5 && v16[5] == a6)
  {
    uint64_t v17 = v14[8];
    *a7 = v16;
    a7[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    return;
  }
  (*(void (**)(long long *__return_ptr))(**(void **)(*(void *)(a1 + 8) + 8) + 24))(&v29);
  long long v18 = v29;
  long long v29 = 0uLL;
  std::string::size_type v19 = (std::__shared_weak_count *)v15[8];
  *(_OWORD *)(v15 + 7) = v18;
  if (v19)
  {
    nitro::nitro_function::nitro_function(v19);
    if (*((void *)&v29 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v29 + 1));
    }
  }
  int v20 = *((char *)v11 + 23);
  if ((v20 & 0x80000000) == 0)
  {
    if (v20 != 6) {
      goto LABEL_19;
    }
LABEL_16:
    unsigned int v21 = 1634887533;
    unsigned int v22 = bswap32(*(_DWORD *)v11);
    if (v22 == 1634887533 && (unsigned int v22 = bswap32(*((unsigned __int16 *)v11 + 2)) >> 16, v21 = 24952, v22 == 24952))
    {
      int v23 = 0;
    }
    else if (v22 < v21)
    {
      int v23 = -1;
    }
    else
    {
      int v23 = 1;
    }
    BOOL v24 = v23 != 0;
    goto LABEL_24;
  }
  if (v11[1] == 6)
  {
    int v11 = (void *)*v11;
    goto LABEL_16;
  }
LABEL_19:
  BOOL v24 = 1;
LABEL_24:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, BOOL))(*(void *)a1 + 24))(&v34, a1, 1, v24);
  uint64_t v25 = v15[7];
  uint64_t v33 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v31 = 0u;
  *(void *)&long long v29 = __PAIR64__(a4, a3);
  *((void *)&v29 + 1) = __PAIR64__(a6, a5);
  unint64_t v30 = 0xFFFFFFFF00000001;
  uint64_t v27 = v34;
  long long v28 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, long long *, uint64_t *))(*(void *)v25 + 16))(v25, &v29, &v27);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v26 = v15[8];
  *a7 = v15[7];
  a7[1] = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
}

void sub_1929FF744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::matmul_shorthand::operator()(uint64_t a1, uint64_t a2, void *a3, int32x2_t **a4, void *a5, void *a6)
{
  v73[1] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  if (!v12
    || *(void *)(*a3 + 72) != *(void *)(v12 + 8)
    && ((uint64_t v13 = *(std::__shared_weak_count **)(a1 + 56), *(void *)(a1 + 48) = 0, *(void *)(a1 + 56) = 0, !v13)
     || (nitro::nitro_function::nitro_function(v13), !*(void *)(a1 + 48))))
  {
    char v65 = 0;
    __asm { FMOV            V1.2S, #1.0 }
    unint64_t v67 = 0xFFFFFFFF00000000;
    uint64_t v68 = _D1;
    uint64_t v69 = 0;
    int v62 = 0;
    int v64 = 0;
    long long v70 = 0u;
    long long v71 = 0u;
    int32x2_t v58 = vrev64_s32((*a4)[1]);
    uint64_t v60 = 0;
    uint64_t v61 = _D1;
    int v19 = *(_DWORD *)(a1 + 68);
    int v66 = *(_DWORD *)(a1 + 64);
    int v63 = v19;
    BOOL v59 = *a5 != 0;
    Espresso::abstract_engine_factory::shared(&v72);
    uint64_t v20 = v72;
    uint64_t v21 = *a3;
    std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
    unsigned int v22 = *(uint64_t (****)(void))(*(void *)(*a3 + 72) + 8);
    int v54 = (**v22)(v22);
    int v53 = (*(uint64_t (**)(void))(*(void *)*a3 + 32))();
    Espresso::abstract_engine_factory::make_kernel_priv(v20, v21 + 72, (uint64_t)__p, (uint64_t)&v58, &v54);
    int v23 = lpsrc[0];
    if (lpsrc[0]
    {
      BOOL v24 = lpsrc[1];
      if (lpsrc[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)lpsrc[1] + 1, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      BOOL v24 = 0;
    }
    uint64_t v25 = *(std::__shared_weak_count **)(a1 + 56);
    *(void *)(a1 + 48) = v23;
    *(void *)(a1 + 56) = v24;
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
    if (lpsrc[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)lpsrc[1]);
    }
    if (v56 < 0) {
      operator delete(__p[0]);
    }
    if (*((void *)&v72 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v72 + 1));
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(__p, *a4, (std::__shared_weak_count *)a4[1]);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(lpsrc, (void *)*a5, (std::__shared_weak_count *)a5[1]);
    if (!__p[0])
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v72, (*a4)[1].i32[0], (*a4)[1].i32[1], 1, 1);
      uint64_t v26 = (std::__shared_weak_count *)__p[1];
      *(_OWORD *)std::string __p = v72;
      if (v26) {
        nitro::nitro_function::nitro_function(v26);
      }
      (*(void (**)(int32x2_t *, uint64_t, void **))(*(void *)*a4 + 40))(*a4, a2, __p);
      (*(void (**)(void))(**(void **)a2 + 40))();
    }
    if (v59 && !lpsrc[0])
    {
      (*(void (**)(long long *__return_ptr))(*(void *)*a5 + 56))(&v72);
      long long v27 = v72;
      long long v72 = 0uLL;
      long long v28 = (std::__shared_weak_count *)lpsrc[1];
      *(_OWORD *)lpvImage_Buffer src = v27;
      if (v28)
      {
        nitro::nitro_function::nitro_function(v28);
        if (*((void *)&v72 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v72 + 1));
        }
      }
      (*(void (**)(void, uint64_t, void **))(*(void *)*a5 + 40))(*a5, a2, lpsrc);
      (*(void (**)(void))(**(void **)a2 + 40))();
    }
    uint64_t v29 = *(void *)(a1 + 48);
    unint64_t v30 = __p[0];
    long long v31 = (char *)operator new(0x58uLL);
    *((void *)v31 + 1) = 0;
    *((void *)v31 + 2) = 0;
    *(void *)long long v31 = &unk_1EE389958;
    uint64_t v32 = v30[3];
    *((void *)v31 + 3) = &unk_1EE36BED0;
    *(_OWORD *)(v31 + 56) = 0u;
    *(_OWORD *)(v31 + 72) = 0u;
    *((_DWORD *)v31 + 8) = *((_DWORD *)v30 + 2);
    *((_DWORD *)v31 + 9) = *((_DWORD *)v30 + 3);
    *((void *)v31 + 5) = v32;
    v31[48] = 0;
    char v51 = v31 + 24;
    std::string v52 = (std::__shared_weak_count *)v31;
    (*(void (**)(uint64_t, char **))(*(void *)v29 + 400))(v29, &v51);
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    if (v59)
    {
      uint64_t v33 = *(void *)(a1 + 48);
      uint64_t v34 = lpsrc[0];
      long long v35 = (char *)operator new(0x58uLL);
      *((void *)v35 + 1) = 0;
      *((void *)v35 + 2) = 0;
      *(void *)long long v35 = &unk_1EE389920;
      uint64_t v36 = v34[3];
      *((void *)v35 + 3) = &unk_1EE36BEB0;
      *(_OWORD *)(v35 + 56) = 0u;
      *(_OWORD *)(v35 + 72) = 0u;
      *((_DWORD *)v35 + 8) = *((_DWORD *)v34 + 2);
      *((void *)v35 + 5) = v36;
      v35[48] = 0;
      std::string v49 = v35 + 24;
      std::string v50 = (std::__shared_weak_count *)v35;
      (*(void (**)(uint64_t, char **))(*(void *)v33 + 392))(v33, &v49);
      if (v50) {
        nitro::nitro_function::nitro_function(v50);
      }
    }
    uint64_t v37 = a3[1];
    *(void *)&long long v72 = *a3;
    *((void *)&v72 + 1) = v37;
    if (v37) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
    }
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>((uint64_t *)(a1 + 24), (uint64_t *)&v72, v73, 1uLL);
    if (*((void *)&v72 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v72 + 1));
    }
    uint64_t v38 = a6[1];
    *(void *)&long long v72 = *a6;
    *((void *)&v72 + 1) = v38;
    if (v38) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
    }
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>((uint64_t *)a1, (uint64_t *)&v72, v73, 1uLL);
    if (*((void *)&v72 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v72 + 1));
    }
    if (lpsrc[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)lpsrc[1]);
    }
    if (__p[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
    }
    if (!*(void *)(a1 + 48))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Inconsistent state");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  uint64_t v39 = *(void **)(a1 + 24);
  uint64_t v41 = *a3;
  uint64_t v40 = a3[1];
  if (v40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v42 = (std::__shared_weak_count *)v39[1];
  *uint64_t v39 = v41;
  v39[1] = v40;
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  unsigned __int8 v43 = *(void **)a1;
  uint64_t v45 = *a6;
  uint64_t v44 = a6[1];
  if (v44) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v46 = (std::__shared_weak_count *)v43[1];
  void *v43 = v45;
  v43[1] = v44;
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), a2, a1 + 24, a1);
}

void sub_1929FFE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::rnn_params,Espresso::abstract_kernel_with_named_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

void Espresso::generic_rnn_kernel::weight_names_and_shapes(Espresso::generic_rnn_kernel *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  int v4 = *((_DWORD *)this + 78);
  int v5 = *((_DWORD *)this + 76);
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "b");
    std::string v76 = __p;
    uint64_t v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    int v13 = 4 * v4;
    unsigned int v15 = v12 + 6;
    uint64_t v14 = (void *)*((void *)v12 + 12);
    *((_DWORD *)v12 + 14) = 4 * v4;
    *(void *)&long long v16 = 0x100000001;
    *((void *)&v16 + 1) = 0x100000001;
    *(_OWORD *)((char *)v12 + 60) = v16;
    *((_DWORD *)v12 + 19) = -1;
    *((void *)v12 + 10) = 0;
    *((void *)v12 + 11) = 0;
    if (v14)
    {
      *((void *)v12 + 13) = v14;
      operator delete(v14);
      void *v15 = 0;
      v15[1] = 0;
      uint64_t v15[2] = 0;
    }
    void *v15 = 0;
    v15[1] = 0;
    uint64_t v15[2] = 0;
    if (v75 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "W_h");
    std::string v76 = __p;
    uint64_t v17 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    int v19 = v17 + 6;
    long long v18 = (void *)*((void *)v17 + 12);
    *((_DWORD *)v17 + 14) = v4;
    *((_DWORD *)v17 + 15) = v13;
    long long v73 = xmmword_192DC5D50;
    v17[4] = xmmword_192DC5D50;
    *((void *)v17 + 10) = 0;
    *((void *)v17 + 11) = 0;
    if (v18)
    {
      *((void *)v17 + 13) = v18;
      operator delete(v18);
      void *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
    }
    void *v19 = 0;
    v19[1] = 0;
    v19[2] = 0;
    if (v75 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_28;
  }
  if (v5 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "b");
    std::string v76 = __p;
    uint64_t v20 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    int v13 = 3 * v4;
    unsigned int v22 = v20 + 6;
    uint64_t v21 = (void *)*((void *)v20 + 12);
    *((_DWORD *)v20 + 14) = 3 * v4;
    *(void *)&long long v23 = 0x100000001;
    *((void *)&v23 + 1) = 0x100000001;
    *(_OWORD *)((char *)v20 + 60) = v23;
    *((_DWORD *)v20 + 19) = -1;
    *((void *)v20 + 10) = 0;
    *((void *)v20 + 11) = 0;
    if (v21)
    {
      *((void *)v20 + 13) = v21;
      operator delete(v21);
      *unsigned int v22 = 0;
      v22[1] = 0;
      void v22[2] = 0;
    }
    *unsigned int v22 = 0;
    v22[1] = 0;
    void v22[2] = 0;
    if (v75 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "W_h");
    std::string v76 = __p;
    BOOL v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    uint64_t v26 = v24 + 6;
    uint64_t v25 = (void *)*((void *)v24 + 12);
    *((_DWORD *)v24 + 14) = v4;
    *((_DWORD *)v24 + 15) = v13;
    long long v73 = xmmword_192DC5D50;
    v24[4] = xmmword_192DC5D50;
    *((void *)v24 + 10) = 0;
    *((void *)v24 + 11) = 0;
    if (v25)
    {
      *((void *)v24 + 13) = v25;
      operator delete(v25);
      *uint64_t v26 = 0;
      v26[1] = 0;
      uint64_t v26[2] = 0;
    }
    *uint64_t v26 = 0;
    v26[1] = 0;
    uint64_t v26[2] = 0;
    if (v75 < 0) {
      operator delete(__p[0]);
    }
LABEL_28:
    std::string::basic_string[abi:ne180100]<0>(__p, "W_x");
    std::string v76 = __p;
    long long v27 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    uint64_t v29 = v27 + 6;
    long long v28 = (void *)*((void *)v27 + 12);
    *((_DWORD *)v27 + 14) = v4;
    *((_DWORD *)v27 + 15) = v13;
    v27[4] = v73;
    *((void *)v27 + 10) = 0;
    *((void *)v27 + 11) = 0;
    if (v28)
    {
      *((void *)v27 + 13) = v28;
      operator delete(v28);
      void *v29 = 0;
      v29[1] = 0;
      v29[2] = 0;
    }
    void *v29 = 0;
    v29[1] = 0;
    v29[2] = 0;
    goto LABEL_31;
  }
  if (v5 != 1) {
    goto LABEL_33;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "b");
  std::string v76 = __p;
  int v6 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
  unint64_t v8 = v6 + 6;
  uint64_t v7 = (void *)*((void *)v6 + 12);
  *((_DWORD *)v6 + 14) = v4;
  *(void *)&long long v9 = 0x100000001;
  *((void *)&v9 + 1) = 0x100000001;
  *(_OWORD *)((char *)v6 + 60) = v9;
  *((_DWORD *)v6 + 19) = -1;
  *((void *)v6 + 10) = 0;
  *((void *)v6 + 11) = 0;
  if (v7)
  {
    *((void *)v6 + 13) = v7;
    operator delete(v7);
    *unint64_t v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
  }
  *unint64_t v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  if (v75 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "W_h");
  std::string v76 = __p;
  uint64_t v10 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
  *((_DWORD *)v10 + 14) = v4;
  *((_DWORD *)v10 + 15) = v4;
  v10[4] = xmmword_192DC5D50;
  *((void *)v10 + 10) = 0;
  *((void *)v10 + 11) = 0;
  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v10 + 96, 0, 0, 0);
  if (v75 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "W_x");
  std::string v76 = __p;
  int v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
  *((_DWORD *)v11 + 14) = v4;
  *((_DWORD *)v11 + 15) = v4;
  v11[4] = xmmword_192DC5D50;
  *((void *)v11 + 10) = 0;
  *((void *)v11 + 11) = 0;
  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v11 + 96, 0, 0, 0);
LABEL_31:
  if (v75 < 0) {
    operator delete(__p[0]);
  }
LABEL_33:
  int v30 = *((_DWORD *)this + 81);
  if (v30 >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "W_embedding_in");
    std::string v76 = __p;
    long long v31 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    uint64_t v33 = v31 + 6;
    uint64_t v32 = (void *)*((void *)v31 + 12);
    *((_DWORD *)v31 + 14) = v30;
    *((_DWORD *)v31 + 15) = v4;
    v31[4] = xmmword_192DC5D50;
    *((void *)v31 + 10) = 0;
    *((void *)v31 + 11) = 0;
    if (v32)
    {
      *((void *)v31 + 13) = v32;
      operator delete(v32);
      *uint64_t v33 = 0;
      v33[1] = 0;
      v33[2] = 0;
    }
    *uint64_t v33 = 0;
    v33[1] = 0;
    v33[2] = 0;
    if (v75 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "b_embedding_in");
    std::string v76 = __p;
    uint64_t v34 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    uint64_t v36 = v34 + 6;
    long long v35 = (void *)*((void *)v34 + 12);
    *((_DWORD *)v34 + 14) = v4;
    *(void *)&long long v37 = 0x100000001;
    *((void *)&v37 + 1) = 0x100000001;
    *(_OWORD *)((char *)v34 + 60) = v37;
    *((_DWORD *)v34 + 19) = -1;
    *((void *)v34 + 10) = 0;
    *((void *)v34 + 11) = 0;
    if (v35)
    {
      *((void *)v34 + 13) = v35;
      operator delete(v35);
      *uint64_t v36 = 0;
      v36[1] = 0;
      void v36[2] = 0;
    }
    *uint64_t v36 = 0;
    v36[1] = 0;
    void v36[2] = 0;
    if (v75 < 0) {
      operator delete(__p[0]);
    }
  }
  int v38 = *((_DWORD *)this + 82);
  if (v38 >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "W_embedding_out");
    std::string v76 = __p;
    uint64_t v39 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    uint64_t v41 = v39 + 6;
    uint64_t v40 = (void *)*((void *)v39 + 12);
    *((_DWORD *)v39 + 14) = v4;
    *((_DWORD *)v39 + 15) = v38;
    void v39[4] = xmmword_192DC5D50;
    *((void *)v39 + 10) = 0;
    *((void *)v39 + 11) = 0;
    if (v40)
    {
      *((void *)v39 + 13) = v40;
      operator delete(v40);
      void *v41 = 0;
      v41[1] = 0;
      void v41[2] = 0;
    }
    void *v41 = 0;
    v41[1] = 0;
    void v41[2] = 0;
    if (v75 < 0) {
      operator delete(__p[0]);
    }
    int v42 = *((_DWORD *)this + 82);
    std::string::basic_string[abi:ne180100]<0>(__p, "b_embedding_out");
    std::string v76 = __p;
    unsigned __int8 v43 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    uint64_t v45 = v43 + 6;
    uint64_t v44 = (void *)*((void *)v43 + 12);
    *((_DWORD *)v43 + 14) = v42;
    *(void *)&long long v46 = 0x100000001;
    *((void *)&v46 + 1) = 0x100000001;
    *(_OWORD *)((char *)v43 + 60) = v46;
    *((_DWORD *)v43 + 19) = -1;
    *((void *)v43 + 10) = 0;
    *((void *)v43 + 11) = 0;
    if (v44)
    {
      *((void *)v43 + 13) = v44;
      operator delete(v44);
      *uint64_t v45 = 0;
      v45[1] = 0;
      uint64_t v45[2] = 0;
    }
    *uint64_t v45 = 0;
    v45[1] = 0;
    uint64_t v45[2] = 0;
    if (v75 < 0) {
      operator delete(__p[0]);
    }
  }
  if (*((_DWORD *)this + 80))
  {
    int v47 = *((_DWORD *)this + 82);
    std::string::basic_string[abi:ne180100]<0>(__p, "W_embedding_in_write");
    std::string v76 = __p;
    std::string v48 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    std::string v50 = v48 + 6;
    std::string v49 = (void *)*((void *)v48 + 12);
    *((_DWORD *)v48 + 14) = v47;
    *((_DWORD *)v48 + 15) = v4;
    v48[4] = xmmword_192DC5D50;
    *((void *)v48 + 10) = 0;
    *((void *)v48 + 11) = 0;
    if (v49)
    {
      *((void *)v48 + 13) = v49;
      operator delete(v49);
      void *v50 = 0;
      v50[1] = 0;
      v50[2] = 0;
    }
    void *v50 = 0;
    v50[1] = 0;
    v50[2] = 0;
    if (v75 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "b_embedding_in_write");
    std::string v76 = __p;
    char v51 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    int v53 = v51 + 6;
    std::string v52 = (void *)*((void *)v51 + 12);
    *((_DWORD *)v51 + 14) = v4;
    *(void *)&long long v54 = 0x100000001;
    *((void *)&v54 + 1) = 0x100000001;
    *(_OWORD *)((char *)v51 + 60) = v54;
    *((_DWORD *)v51 + 19) = -1;
    *((void *)v51 + 10) = 0;
    *((void *)v51 + 11) = 0;
    if (v52)
    {
      *((void *)v51 + 13) = v52;
      operator delete(v52);
      void *v53 = 0;
      v53[1] = 0;
      v53[2] = 0;
    }
    void *v53 = 0;
    v53[1] = 0;
    v53[2] = 0;
    if (v75 < 0) {
      operator delete(__p[0]);
    }
  }
  int v55 = *((_DWORD *)this + 83);
  if (v55)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "W_embedding_out_tree");
    std::string v76 = __p;
    char v56 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    int32x2_t v58 = v56 + 6;
    long long v57 = (void *)*((void *)v56 + 12);
    *((_DWORD *)v56 + 14) = v4;
    *((_DWORD *)v56 + 15) = v55;
    v56[4] = xmmword_192DC5D50;
    *((void *)v56 + 10) = 0;
    *((void *)v56 + 11) = 0;
    if (v57)
    {
      *((void *)v56 + 13) = v57;
      operator delete(v57);
      void *v58 = 0;
      v58[1] = 0;
      v58[2] = 0;
    }
    void *v58 = 0;
    v58[1] = 0;
    v58[2] = 0;
    if (v75 < 0) {
      operator delete(__p[0]);
    }
    int v59 = *((_DWORD *)this + 83);
    std::string::basic_string[abi:ne180100]<0>(__p, "b_embedding_out_tree");
    std::string v76 = __p;
    uint64_t v60 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    int v62 = v60 + 6;
    uint64_t v61 = (void *)*((void *)v60 + 12);
    *((_DWORD *)v60 + 14) = v59;
    *(void *)&long long v63 = 0x100000001;
    *((void *)&v63 + 1) = 0x100000001;
    *(_OWORD *)((char *)v60 + 60) = v63;
    *((_DWORD *)v60 + 19) = -1;
    *((void *)v60 + 10) = 0;
    *((void *)v60 + 11) = 0;
    if (v61)
    {
      *((void *)v60 + 13) = v61;
      operator delete(v61);
      void *v62 = 0;
      v62[1] = 0;
      v62[2] = 0;
    }
    void *v62 = 0;
    v62[1] = 0;
    v62[2] = 0;
    if (v75 < 0) {
      operator delete(__p[0]);
    }
    int v64 = *((_DWORD *)this + 83);
    std::string::basic_string[abi:ne180100]<0>(__p, "label_embedding_out_tree");
    std::string v76 = __p;
    char v65 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    unint64_t v67 = v65 + 6;
    int v66 = (void *)*((void *)v65 + 12);
    *((_DWORD *)v65 + 14) = v64;
    *(void *)&long long v68 = 0x100000001;
    *((void *)&v68 + 1) = 0x100000001;
    *(_OWORD *)((char *)v65 + 60) = v68;
    *((_DWORD *)v65 + 19) = -1;
    *((void *)v65 + 10) = 0;
    *((void *)v65 + 11) = 0;
    if (v66)
    {
      *((void *)v65 + 13) = v66;
      operator delete(v66);
      void *v67 = 0;
      v67[1] = 0;
      v67[2] = 0;
    }
    void *v67 = 0;
    v67[1] = 0;
    v67[2] = 0;
    if (v75 < 0) {
      operator delete(__p[0]);
    }
    int v69 = *((_DWORD *)this + 83);
    std::string::basic_string[abi:ne180100]<0>(__p, "W_embedding_in_write");
    std::string v76 = __p;
    long long v70 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, __p, (_OWORD **)&v76);
    long long v72 = v70 + 6;
    long long v71 = (void *)*((void *)v70 + 12);
    *((_DWORD *)v70 + 14) = v69;
    *((_DWORD *)v70 + 15) = v4;
    v70[4] = xmmword_192DC5D50;
    *((void *)v70 + 10) = 0;
    *((void *)v70 + 11) = 0;
    if (v71)
    {
      *((void *)v70 + 13) = v71;
      operator delete(v71);
      void *v72 = 0;
      v72[1] = 0;
      v72[2] = 0;
    }
    void *v72 = 0;
    v72[1] = 0;
    v72[2] = 0;
    if (v75 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_192A007C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v16, *(char **)(v16 + 8));
  _Unwind_Resume(a1);
}

const char *Espresso::generic_rnn_kernel::kernel_type_str(Espresso::generic_rnn_kernel *this)
{
  return "rnn";
}

uint64_t Espresso::generic_rnn_kernel::supports_weight_key()
{
  return 1;
}

uint64_t Espresso::generic_rnn_kernel::number_of_top_blobs(Espresso::generic_rnn_kernel *this)
{
  if (*((_DWORD *)this + 80)) {
    unsigned int v1 = 6;
  }
  else {
    unsigned int v1 = 3;
  }
  if (*((_DWORD *)this + 80)) {
    unsigned int v2 = 4;
  }
  else {
    unsigned int v2 = 2;
  }
  if (*((_DWORD *)this + 76)) {
    return v2;
  }
  else {
    return v1;
  }
}

void Espresso::generic_rnn_kernel::top_shapes_for_bottom_shapes(_DWORD *a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *(void *)&long long v68 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  long long v23 = **a2;
  long long v24 = (*a2)[1];
  std::string __p = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  if (a1[80])
  {
    int v6 = a1[86];
    int v7 = a1[82];
    unsigned int v8 = a1[78];
    if (v7 <= 0) {
      int v7 = a1[78];
    }
    if (a1[76])
    {
      *(void *)&long long v31 = 0x100000001;
      DWORD2(v31) = 1;
      HIDWORD(v31) = v6;
      unint64_t v32 = v24 | 0xFFFFFFFF00000000;
      long long v33 = 0u;
      long long v34 = 0u;
      uint64_t v35 = 0;
      uint64_t v36 = 0x100000001;
      unsigned int v37 = v8;
      int v38 = 1;
      unint64_t v39 = v32;
      long long v40 = 0u;
      long long v41 = 0u;
      uint64_t v42 = 0;
      *(void *)&long long v43 = 0x100000001;
      *((void *)&v43 + 1) = v8 | 0x100000000;
      unint64_t v44 = v32;
      uint64_t v47 = 0;
      long long v46 = 0u;
      long long v45 = 0u;
      *(void *)&long long v48 = 0x100000001;
      *((void *)&v48 + 1) = v7 | 0x100000000;
      int v49 = v24;
      int v50 = -1;
      long long v51 = 0u;
      long long v52 = 0u;
      uint64_t v53 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      uint64_t v29 = a3;
      char v30 = 0;
      long long v9 = (char *)operator new(0x100uLL);
      *a3 = v9;
      a3[1] = v9;
      a3[2] = v9 + 256;
      uint64_t v10 = 0;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v31, (long long *)&v54, (uint64_t)v9);
      do
      {
        int v11 = *(void **)((char *)&v52 + v10);
        if (v11)
        {
          *(void *)((char *)&v52 + v10 + 8) = v11;
          operator delete(v11);
        }
        v10 -= 64;
      }
      while (v10 != -256);
    }
    else
    {
      *(void *)&long long v31 = 0x100000001;
      DWORD2(v31) = 1;
      HIDWORD(v31) = v6;
      unint64_t v32 = v24 | 0xFFFFFFFF00000000;
      long long v33 = 0u;
      long long v34 = 0u;
      uint64_t v35 = 0;
      uint64_t v36 = 0x100000001;
      unsigned int v37 = v8;
      int v38 = 1;
      unint64_t v39 = v32;
      long long v40 = 0u;
      long long v41 = 0u;
      uint64_t v42 = 0;
      *(void *)&long long v43 = 0x100000001;
      *((void *)&v43 + 1) = v8 | 0x100000000;
      unint64_t v44 = v32;
      uint64_t v47 = 0;
      long long v46 = 0u;
      long long v45 = 0u;
      *(void *)&long long v48 = 0x100000001;
      *((void *)&v48 + 1) = v7 | 0x100000000;
      int v49 = v24;
      int v50 = -1;
      long long v51 = 0u;
      long long v52 = 0u;
      uint64_t v53 = 0;
      unsigned long long v54 = __PAIR128__(*((unint64_t *)&v43 + 1), 0x100000001);
      int v55 = v24;
      int v56 = -1;
      long long v58 = 0u;
      long long v57 = 0u;
      uint64_t v59 = 0;
      uint64_t v60 = 0x100000001;
      unsigned int v61 = v8;
      int v62 = 1;
      int v63 = v24;
      int v64 = -1;
      long long v65 = 0u;
      long long v66 = 0u;
      uint64_t v67 = 0;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v29 = a3;
      char v30 = 0;
      uint64_t v17 = (char *)operator new(0x180uLL);
      *a3 = v17;
      a3[1] = v17;
      a3[2] = v17 + 384;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v31, &v68, (uint64_t)v17);
      uint64_t v18 = 48;
      do
      {
        int v19 = *(void **)&v28[v18 * 8];
        if (v19)
        {
          (&v29)[v18] = v19;
          operator delete(v19);
        }
        v18 -= 8;
      }
      while (v18 * 8);
    }
  }
  else
  {
    unsigned int v12 = a1[78];
    if ((int)a1[82] <= 0) {
      unsigned int v13 = a1[78];
    }
    else {
      unsigned int v13 = a1[82];
    }
    if (a1[76])
    {
      *(void *)&long long v31 = 0x100000001;
      *((void *)&v31 + 1) = __PAIR64__(HIDWORD(v23), v13);
      unint64_t v32 = 0xFFFFFFFF00000001;
      long long v33 = 0u;
      long long v34 = 0u;
      uint64_t v35 = 0;
      uint64_t v36 = 0x100000001;
      unsigned int v37 = v12;
      int v38 = HIDWORD(v23);
      unint64_t v39 = 0xFFFFFFFF00000001;
      long long v40 = 0u;
      long long v41 = 0u;
      uint64_t v42 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      uint64_t v29 = a3;
      char v30 = 0;
      uint64_t v14 = (char *)operator new(0x80uLL);
      *a3 = v14;
      a3[1] = v14;
      a3[2] = v14 + 128;
      uint64_t v15 = 0;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v31, &v43, (uint64_t)v14);
      do
      {
        uint64_t v16 = *(void **)((char *)&v41 + v15);
        if (v16)
        {
          *(void *)((char *)&v41 + v15 + 8) = v16;
          operator delete(v16);
        }
        v15 -= 64;
      }
      while (v15 != -128);
    }
    else
    {
      *(void *)&long long v31 = 0x100000001;
      *((void *)&v31 + 1) = __PAIR64__(HIDWORD(v23), v13);
      unint64_t v32 = 0xFFFFFFFF00000001;
      long long v33 = 0u;
      long long v34 = 0u;
      uint64_t v35 = 0;
      uint64_t v36 = 0x100000001;
      unsigned int v37 = v12;
      int v38 = HIDWORD(v23);
      unint64_t v39 = 0xFFFFFFFF00000001;
      long long v40 = 0u;
      long long v41 = 0u;
      uint64_t v42 = 0;
      *(void *)&long long v43 = 0x100000001;
      *((void *)&v43 + 1) = __PAIR64__(HIDWORD(v23), v12);
      unint64_t v44 = 0xFFFFFFFF00000001;
      long long v45 = 0u;
      long long v46 = 0u;
      uint64_t v47 = 0;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v29 = a3;
      char v30 = 0;
      uint64_t v20 = (char *)operator new(0xC0uLL);
      *a3 = v20;
      a3[1] = v20;
      a3[2] = v20 + 192;
      uint64_t v21 = 0;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v31, &v48, (uint64_t)v20);
      do
      {
        unsigned int v22 = *(void **)((char *)&v46 + v21);
        if (v22)
        {
          *(void *)((char *)&v46 + v21 + 8) = v22;
          operator delete(v22);
        }
        v21 -= 64;
      }
      while (v21 != -192);
    }
  }
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
}

void sub_192A00D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, char a20)
{
  uint64_t v22 = v21;
  *(void *)(v20 + 8) = v22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a18);
  uint64_t v24 = 0;
  while (1)
  {
    uint64_t v25 = *(void **)(&a20 + v24 + 168);
    if (v25)
    {
      *(void *)(&a20 + v24 + 176) = v25;
      operator delete(v25);
    }
    v24 -= 64;
    if (v24 == -192)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::generic_rnn_kernel::clear_weights(Espresso::generic_rnn_kernel *this)
{
  unsigned int v2 = (void *)*((void *)this + 104);
  uint64_t v3 = (void *)*((void *)this + 103);
  while (v2 != v3)
  {
    v2 -= 6;
    std::allocator<Espresso::generic_rnn_kernel::embedding_cluster>::destroy[abi:ne180100](v2);
  }
  *((void *)this + 104) = v3;
}

void std::allocator<Espresso::generic_rnn_kernel::embedding_cluster>::destroy[abi:ne180100](void *a1)
{
  unsigned int v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::generic_rnn_kernel::__launch(uint64_t a1, void *a2, uint64_t **a3, int ***a4)
{
  uint64_t v254 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v250, "W_h");
  v211.__r_.__value_.__r.__words[0] = (std::string::size_type)&v250;
  std::string::size_type v117 = (uint64_t **)(a1 + 280);
  unsigned int v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 280), &v250, &v211);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v251, *((void **)v8 + 7), *((std::__shared_weak_count **)v8 + 8));
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v250.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v250, "W_x");
  v211.__r_.__value_.__r.__words[0] = (std::string::size_type)&v250;
  long long v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v117, &v250, &v211);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v248, *((void **)v9 + 7), *((std::__shared_weak_count **)v9 + 8));
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v250.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v250, "b");
  v211.__r_.__value_.__r.__words[0] = (std::string::size_type)&v250;
  uint64_t v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v117, &v250, &v211);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v246, *((void **)v10 + 7), *((std::__shared_weak_count **)v10 + 8));
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v250.__r_.__value_.__l.__data_);
  }
  int v11 = (std::__shared_weak_count *)(*a4)[1];
  uint64_t v121 = **a4;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string v120 = v11;
  *(_DWORD *)(a1 + 368) = (*(uint64_t (**)(int *))(*(void *)v121 + 32))(v121);
  unsigned int v12 = *a3;
  unsigned int v13 = (std::__shared_weak_count *)(*a3)[1];
  long long v115 = v13;
  uint64_t v116 = **a3;
  if (!*(_DWORD *)(a1 + 320))
  {
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      unsigned int v12 = *a3;
    }
    uint64_t v62 = v12[2];
    int v63 = (std::__shared_weak_count *)v12[3];
    if (v63)
    {
      atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      unsigned int v12 = *a3;
    }
    uint64_t v64 = v12[4];
    long long v65 = (std::__shared_weak_count *)v12[5];
    if (v65) {
      atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v66 = *a4;
    uint64_t v67 = (*a4)[2];
    long long v68 = (std::__shared_weak_count *)(*a4)[3];
    if (v68)
    {
      atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v66 = *a4;
    }
    int v69 = v66[4];
    long long v70 = (std::__shared_weak_count *)v66[5];
    if (v70) {
      atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v71 = *(_DWORD *)(a1 + 304);
    if (v71)
    {
      if (v71 == 2)
      {
        uint64_t v220 = v62;
        uint64_t v221 = v63;
        if (v63) {
          atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v218 = v116;
        uint64_t v219 = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        id v216 = v67;
        v217 = v68;
        if (v68) {
          atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v214 = v121;
        id v215 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *, int **, int **, void, void))(*(void *)a1 + 400))(a1, &v220, &v218, &v216, &v214, 0, 0);
        if (v215) {
          nitro::nitro_function::nitro_function(v215);
        }
        if (v217) {
          nitro::nitro_function::nitro_function(v217);
        }
        if (v219) {
          nitro::nitro_function::nitro_function(v219);
        }
        long long v72 = v221;
        if (!v221) {
          goto LABEL_324;
        }
      }
      else
      {
        if (v71 != 1) {
          goto LABEL_324;
        }
        uint64_t v244 = v62;
        v245 = v63;
        if (v63) {
          atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v242 = v116;
        v243 = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v240 = v67;
        v241 = v68;
        if (v68) {
          atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v238 = v121;
        v239 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *, int **, int **, void, void))(*(void *)a1 + 392))(a1, &v244, &v242, &v240, &v238, 0, 0);
        if (v239) {
          nitro::nitro_function::nitro_function(v239);
        }
        if (v241) {
          nitro::nitro_function::nitro_function(v241);
        }
        if (v243) {
          nitro::nitro_function::nitro_function(v243);
        }
        long long v72 = v245;
        if (!v245) {
          goto LABEL_324;
        }
      }
    }
    else
    {
      long long v99 = (std::__shared_weak_count *)a2[1];
      uint64_t v236 = *a2;
      v237 = v99;
      if (v99) {
        atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v234 = v62;
      v235 = v63;
      if (v63) {
        atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v232 = v64;
      v233 = v65;
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v230 = v116;
      std::string v231 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v228 = v67;
      long long v229 = v68;
      if (v68) {
        atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v226 = v69;
      long long v227 = v70;
      if (v70) {
        atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string v224 = v121;
      std::string v225 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v223 = 0;
      uint64_t v222 = 0;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, int **, int **, int **, uint64_t *, _DWORD))(*(void *)a1 + 408))(a1, &v236, &v234, &v232, &v230, &v228, &v226, &v224, &v222, 0);
      if (v223) {
        nitro::nitro_function::nitro_function(v223);
      }
      if (v225) {
        nitro::nitro_function::nitro_function(v225);
      }
      if (v227) {
        nitro::nitro_function::nitro_function(v227);
      }
      if (v229) {
        nitro::nitro_function::nitro_function(v229);
      }
      if (v231) {
        nitro::nitro_function::nitro_function(v231);
      }
      if (v233) {
        nitro::nitro_function::nitro_function(v233);
      }
      if (v235) {
        nitro::nitro_function::nitro_function(v235);
      }
      long long v72 = v237;
      if (!v237) {
        goto LABEL_324;
      }
    }
    nitro::nitro_function::nitro_function(v72);
LABEL_324:
    if (v70) {
      nitro::nitro_function::nitro_function(v70);
    }
    if (v68) {
      nitro::nitro_function::nitro_function(v68);
    }
    if (v65) {
      nitro::nitro_function::nitro_function(v65);
    }
    if (v63) {
      nitro::nitro_function::nitro_function(v63);
    }
    goto LABEL_332;
  }
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned int v12 = *a3;
  }
  uint64_t v15 = v12[2];
  uint64_t v14 = (std::__shared_weak_count *)v12[3];
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned int v12 = *a3;
  }
  uint64_t v17 = v12[4];
  uint64_t v16 = (std::__shared_weak_count *)v12[5];
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned int v12 = *a3;
  }
  int v118 = a2;
  uint64_t v18 = (std::__shared_weak_count *)v12[7];
  id v212 = (void *)v12[6];
  int v213 = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned int v12 = *a3;
  }
  uint64_t v20 = v12[8];
  int v19 = (std::__shared_weak_count *)v12[9];
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned int v12 = *a3;
  }
  uint64_t v22 = v12[10];
  uint64_t v21 = (std::__shared_weak_count *)v12[11];
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string v127 = v21;
  int v23 = v121[5];
  int v24 = *(_DWORD *)(a1 + 340);
  if (v23 > v24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v210, v121[5]);
    uint64_t v102 = std::string::insert(&v210, 0, "Unexpected input batch_n ");
    long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
    v253.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v103;
    v102->__r_.__value_.__l.__size_ = 0;
    v102->__r_.__value_.__r.__words[2] = 0;
    v102->__r_.__value_.__r.__words[0] = 0;
    uint64_t v104 = std::string::append(&v253, "/");
    long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
    v211.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v211.__r_.__value_.__l.__data_ = v105;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v209, *(_DWORD *)(a1 + 340));
    if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v106 = &v209;
    }
    else {
      uint64_t v106 = (std::string *)v209.__r_.__value_.__r.__words[0];
    }
    if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v209.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v209.__r_.__value_.__l.__size_;
    }
    std::string::size_type v108 = std::string::append(&v211, (const std::string::value_type *)v106, size);
    long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
    v250.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v109;
    v108->__r_.__value_.__l.__size_ = 0;
    v108->__r_.__value_.__r.__words[2] = 0;
    v108->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v250);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v25 = *(_DWORD *)(a1 + 336);
  if (v25 && v121[4] != 1)
  {
    std::string::size_type v112 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v211, v121[2]);
    std::string::size_type v113 = std::string::insert(&v211, 0, "Unexpected input size w=");
    long long v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
    v250.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v114;
    v113->__r_.__value_.__l.__size_ = 0;
    v113->__r_.__value_.__r.__words[2] = 0;
    v113->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v112, &v250);
    __cxa_throw(v112, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(int *)(a1 + 324) <= 0)
  {
    int v110 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v110, "input_embedding_size must be > 0 in seq2seq mode");
    __cxa_throw(v110, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(_OWORD *)&v210.__r_.__value_.__l.__data_ = 0uLL;
  if (v24) {
    BOOL v26 = *(int *)(a1 + 348) < 0;
  }
  else {
    BOOL v26 = 1;
  }
  int v27 = !v26;
  if (v25 || v27)
  {
    (*(void (**)(int *, void *, std::string *))(*(void *)v121 + 40))(v121, a2, &v210);
    (*(void (**)(void))(*(void *)*a2 + 40))();
    int v23 = v121[5];
    int v24 = *(_DWORD *)(a1 + 340);
  }
  if (v23 >= v24) {
    int v23 = v24;
  }
  if (v23 < 1)
  {
    long long v57 = v14;
    uint64_t v58 = v15;
    uint64_t v35 = v17;
    uint64_t v59 = v19;
    uint64_t v60 = v20;
    int v56 = v127;
    uint64_t v37 = v22;
    goto LABEL_190;
  }
  long long v28 = v19;
  uint64_t v29 = 0;
  char v30 = v127;
  long long v31 = v28;
  unint64_t v32 = v16;
  long long v33 = v14;
  uint64_t v34 = v15;
  while (1)
  {
    uint64_t v35 = v34;
    uint64_t v36 = v32;
    std::string v128 = v30;
    uint64_t v130 = v17;
    std::string::size_type v122 = v33;
    std::string::size_type v124 = v31;
    uint64_t v37 = v20;
    int v38 = v30;
    uint64_t v20 = v22;
    std::string::size_type v125 = v32;
    if (v24 >= 2)
    {
      int v39 = *(_DWORD *)(a1 + 348);
      if ((v39 & 0x80000000) == 0)
      {
        long long v40 = v33;
        if (!v29)
        {
          (*(void (**)(void))(*(void *)*v118 + 40))();
          int v39 = *(_DWORD *)(a1 + 348);
        }
        if (v39 == (int)*(float *)(*(void *)(v210.__r_.__value_.__r.__words[0] + 24) + 4 * v29)) {
          break;
        }
      }
    }
    if (v29)
    {
      long long v119 = 0;
      long long v41 = 0;
      uint64_t v42 = v38;
      uint64_t v43 = v20;
      unint64_t v44 = v36;
      uint64_t v45 = v130;
      goto LABEL_80;
    }
    std::string::basic_string[abi:ne180100]<0>(&v250, "h0");
    v211.__r_.__value_.__r.__words[0] = (std::string::size_type)&v250;
    long long v46 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v117, &v250, &v211);
    uint64_t v45 = *((void *)v46 + 7);
    unint64_t v44 = (std::__shared_weak_count *)*((void *)v46 + 8);
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v250.__r_.__value_.__l.__data_);
      if (v45) {
        goto LABEL_63;
      }
    }
    else if (v45)
    {
      goto LABEL_63;
    }
    uint64_t v45 = v130;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v130 + 56))(&v250, v130);
    uint64_t v47 = 0;
    uint64_t v48 = *(int *)(v250.__r_.__value_.__r.__words[0] + 8);
    do
    {
      v48 *= *(int *)(v250.__r_.__value_.__r.__words[0] + 12 + v47);
      v47 += 4;
    }
    while (v47 != 12);
    if (v48) {
      bzero(*(void **)(v250.__r_.__value_.__r.__words[0] + 24), 4 * v48);
    }
    (*(void (**)(uint64_t, void *, std::string *))(*(void *)v130 + 48))(v130, v118, &v250);
    if (v125) {
      atomic_fetch_add_explicit(&v125->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v44) {
      nitro::nitro_function::nitro_function(v44);
    }
    if (v250.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v250.__r_.__value_.__l.__size_);
    }
    unint64_t v44 = v125;
LABEL_63:
    std::string::basic_string[abi:ne180100]<0>(&v250, "c0");
    v211.__r_.__value_.__r.__words[0] = (std::string::size_type)&v250;
    int v49 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v117, &v250, &v211);
    uint64_t v43 = *((void *)v49 + 7);
    uint64_t v42 = (std::__shared_weak_count *)*((void *)v49 + 8);
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v250.__r_.__value_.__l.__data_);
      if (v43)
      {
LABEL_67:
        long long v119 = v44;
        long long v41 = v42;
        goto LABEL_80;
      }
    }
    else if (v43)
    {
      goto LABEL_67;
    }
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v20 + 56))(&v250, v20);
    uint64_t v50 = 0;
    uint64_t v51 = *(int *)(v250.__r_.__value_.__r.__words[0] + 8);
    long long v41 = v128;
    do
    {
      v51 *= *(int *)(v250.__r_.__value_.__r.__words[0] + 12 + v50);
      v50 += 4;
    }
    while (v50 != 12);
    if (v51) {
      bzero(*(void **)(v250.__r_.__value_.__r.__words[0] + 24), 4 * v51);
    }
    (*(void (**)(uint64_t, void *, std::string *))(*(void *)v20 + 48))(v20, v118, &v250);
    if (v128) {
      atomic_fetch_add_explicit(&v128->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    if (v250.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v250.__r_.__value_.__l.__size_);
    }
    uint64_t v42 = v128;
    uint64_t v43 = v20;
    long long v119 = v44;
LABEL_80:
    if (v120)
    {
      atomic_fetch_add_explicit(&v120->__shared_owners_, 1uLL, memory_order_relaxed);
      if (*(_DWORD *)(a1 + 336))
      {
        nitro::nitro_function::nitro_function(v120);
LABEL_373:
        std::string::size_type v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v100, "Not impl");
        __cxa_throw(v100, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else if (*(_DWORD *)(a1 + 336))
    {
      goto LABEL_373;
    }
    int v52 = *(_DWORD *)(a1 + 304);
    if (v52)
    {
      if (v52 == 2)
      {
        uint64_t v183 = v35;
        uint64_t v16 = v122;
        std::string::size_type v184 = v122;
        uint64_t v53 = v120;
        if (v122) {
          atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v181 = v212;
        int v182 = v213;
        if (v213) {
          atomic_fetch_add_explicit(&v213->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v179 = v45;
        uint64_t v180 = v44;
        if (v44) {
          atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v177 = v121;
        int v178 = v120;
        if (v120) {
          atomic_fetch_add_explicit(&v120->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void **, uint64_t *, int **, void, void))(*(void *)a1 + 400))(a1, &v183, &v181, &v179, &v177, 0, 0);
        if (v178) {
          nitro::nitro_function::nitro_function(v178);
        }
        if (v180) {
          nitro::nitro_function::nitro_function(v180);
        }
        if (v182) {
          nitro::nitro_function::nitro_function(v182);
        }
        unsigned long long v54 = v184;
        if (!v184) {
          goto LABEL_119;
        }
      }
      else
      {
        uint64_t v53 = v120;
        uint64_t v16 = v122;
        if (v52 != 1) {
          goto LABEL_119;
        }
        uint64_t v207 = v35;
        int v208 = v122;
        if (v122) {
          atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v205 = v212;
        int v206 = v213;
        if (v213) {
          atomic_fetch_add_explicit(&v213->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v203 = v45;
        int v204 = v44;
        if (v44) {
          atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v201 = v121;
        int v202 = v120;
        if (v120) {
          atomic_fetch_add_explicit(&v120->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void **, uint64_t *, int **, void, void))(*(void *)a1 + 392))(a1, &v207, &v205, &v203, &v201, 0, 0);
        if (v202) {
          nitro::nitro_function::nitro_function(v202);
        }
        if (v204) {
          nitro::nitro_function::nitro_function(v204);
        }
        if (v206) {
          nitro::nitro_function::nitro_function(v206);
        }
        unsigned long long v54 = v208;
        if (!v208) {
          goto LABEL_119;
        }
      }
    }
    else
    {
      unsigned int v61 = (std::__shared_weak_count *)v118[1];
      uint64_t v199 = *v118;
      v200 = v61;
      if (v61) {
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v197 = v35;
      v198 = v122;
      if (v122) {
        atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v195 = v37;
      long long v196 = v124;
      if (v124) {
        atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v193 = v212;
      uint64_t v194 = v213;
      if (v213) {
        atomic_fetch_add_explicit(&v213->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v191 = v45;
      long long v192 = v44;
      if (v44) {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v189 = v43;
      long long v190 = v42;
      if (v42) {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v53 = v120;
      v187 = v121;
      v188 = v120;
      uint64_t v16 = v122;
      if (v120) {
        atomic_fetch_add_explicit(&v120->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v186 = 0;
      uint64_t v185 = 0;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, void **, uint64_t *, uint64_t *, int **, uint64_t *, _DWORD))(*(void *)a1 + 408))(a1, &v199, &v197, &v195, &v193, &v191, &v189, &v187, &v185, 0);
      if (v186) {
        nitro::nitro_function::nitro_function(v186);
      }
      if (v188) {
        nitro::nitro_function::nitro_function(v188);
      }
      if (v190) {
        nitro::nitro_function::nitro_function(v190);
      }
      if (v192) {
        nitro::nitro_function::nitro_function(v192);
      }
      if (v194) {
        nitro::nitro_function::nitro_function(v194);
      }
      if (v196) {
        nitro::nitro_function::nitro_function(v196);
      }
      if (v198) {
        nitro::nitro_function::nitro_function(v198);
      }
      unsigned long long v54 = v200;
      if (!v200) {
        goto LABEL_119;
      }
    }
    nitro::nitro_function::nitro_function(v54);
LABEL_119:
    if (v53) {
      nitro::nitro_function::nitro_function(v53);
    }
    if (v41) {
      nitro::nitro_function::nitro_function(v41);
    }
    if (v119) {
      nitro::nitro_function::nitro_function(v119);
    }
    ++v29;
    int v55 = v121[5];
    int v24 = *(_DWORD *)(a1 + 340);
    if (v55 >= v24) {
      int v55 = *(_DWORD *)(a1 + 340);
    }
    BOOL v26 = v29 < v55;
    uint64_t v22 = v37;
    int v56 = v124;
    char v30 = v124;
    uint64_t v17 = v35;
    unint64_t v32 = v16;
    long long v57 = v125;
    long long v31 = v128;
    uint64_t v34 = v130;
    uint64_t v58 = v130;
    uint64_t v59 = v128;
    long long v33 = v125;
    uint64_t v60 = v20;
    if (!v26) {
      goto LABEL_190;
    }
  }
  long long v57 = v40;
  uint64_t v58 = v35;
  int v56 = v38;
  uint64_t v16 = v36;
  uint64_t v35 = v17;
  uint64_t v59 = v124;
  uint64_t v60 = v37;
  uint64_t v37 = v22;
LABEL_190:
  std::string v131 = v59;
  unsigned __int8 v123 = v57;
  long long v73 = v56;
  std::string::basic_string[abi:ne180100]<0>(__p, "max");
  unsigned __int8 v74 = v73;
  Espresso::generic_rnn_kernel::cached_temp_blob(a1, __p, 1u, 1u, 1u, 1u, &v209);
  if (v176 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v171, "argmax");
  Espresso::generic_rnn_kernel::cached_temp_blob(a1, v171, 1u, 1u, 1u, 1u, &v173);
  if (v172 < 0) {
    operator delete(v171[0]);
  }
  uint64_t v75 = v173;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v173 + 56))(&v250, v173);
  **(float **)(v250.__r_.__value_.__r.__words[0] + 24) = (float)*(int *)(a1 + 356);
  (*(void (**)(uint64_t, void *, std::string *))(*(void *)v75 + 48))(v75, v118, &v250);
  (*(void (**)(std::string *__return_ptr))(*(void *)v116 + 56))(&v211);
  uint64_t v76 = 0;
  uint64_t v77 = *(int *)(v211.__r_.__value_.__r.__words[0] + 8);
  do
  {
    v77 *= *(int *)(v211.__r_.__value_.__r.__words[0] + 12 + v76);
    v76 += 4;
  }
  while (v76 != 12);
  if (v77) {
    bzero(*(void **)(v211.__r_.__value_.__r.__words[0] + 24), 4 * v77);
  }
  uint64_t v126 = v75;
  (*(void (**)(uint64_t, void *, std::string *))(*(void *)v116 + 48))(v116, v118, &v211);
  std::string v78 = v123;
  if (v211.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v211.__r_.__value_.__l.__size_);
  }
  if (v250.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v250.__r_.__value_.__l.__size_);
  }
  if (*(int *)(a1 + 360) > 0)
  {
    memset(&v250, 0, sizeof(v250));
    memset(&v253, 0, sizeof(v253));
    std::vector<std::vector<std::pair<int,float>>>::vector[abi:ne180100](&v211, (uint64_t **)&v253, 1uLL);
    if (v253.__r_.__value_.__r.__words[0])
    {
      v253.__r_.__value_.__l.__size_ = v253.__r_.__value_.__r.__words[0];
      operator delete(v253.__r_.__value_.__l.__data_);
    }
    long long v111 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v111, "Not implemented");
    __cxa_throw(v111, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string v79 = v16;
  if (*(int *)(a1 + 344) < 1)
  {
    std::string::size_type v93 = v123;
    long long v94 = v79;
    long long v95 = v131;
    uint64_t v92 = v73;
    goto LABEL_291;
  }
  int v80 = 0;
  std::string v81 = v131;
  while (2)
  {
    std::string v82 = v78;
    uint64_t v83 = v58;
    std::string v78 = v79;
    uint64_t v58 = v35;
    std::string v129 = v74;
    std::string v132 = v81;
    uint64_t v84 = v60;
    uint64_t v85 = *(unsigned int *)(a1 + 356);
    uint64_t v60 = v37;
    if (v80 || (v85 & 0x80000000) != 0)
    {
      if (*(int *)(a1 + 332) <= 0) {
        Espresso::reduce_shorthand::operator()((uint64_t *)(a1 + 736), (uint64_t)v118, 6, &v212, (uint64_t)&v209, &v173, 0.000001);
      }
      uint64_t v86 = (std::__shared_weak_count *)v118[1];
      uint64_t v169 = *v118;
      int v170 = v86;
      if (v86) {
        atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v167 = v116;
      id v168 = v115;
      if (v115) {
        atomic_fetch_add_explicit(&v115->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v87 = *(_DWORD *)(a1 + 356);
      uint64_t v165 = v126;
      int v166 = v174;
      if (v174) {
        atomic_fetch_add_explicit(&v174->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t *, void, uint64_t *))(*(void *)a1 + 432))(a1, &v169, &v167, (v80 + (~v87 >> 31)), &v165);
      if (v166) {
        nitro::nitro_function::nitro_function(v166);
      }
      if (v168) {
        nitro::nitro_function::nitro_function(v168);
      }
      if (v170) {
        nitro::nitro_function::nitro_function(v170);
      }
    }
    int v88 = *(_DWORD *)(a1 + 352);
    if (v88 < 0 || (*(int *)(a1 + 344) >= 2 ? (BOOL v89 = v85 == v88) : (BOOL v89 = 0), !v89))
    {
      int v90 = *(_DWORD *)(a1 + 304);
      if (v90)
      {
        if (v90 != 2)
        {
          if (v90 != 1) {
            goto LABEL_257;
          }
          uint64_t v163 = v83;
          int v164 = v82;
          if (v82) {
            atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v161 = v212;
          int v162 = v213;
          if (v213) {
            atomic_fetch_add_explicit(&v213->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v159 = v58;
          uint64_t v160 = v78;
          if (v78) {
            atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v157 = 0;
          uint64_t v158 = 0;
          (*(void (**)(uint64_t, uint64_t *, void **, uint64_t *, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 392))(a1, &v163, &v161, &v159, &v157, v85, 1);
          if (v158) {
            nitro::nitro_function::nitro_function(v158);
          }
          if (v160) {
            nitro::nitro_function::nitro_function(v160);
          }
          if (v162) {
            nitro::nitro_function::nitro_function(v162);
          }
          long long v91 = v164;
          if (!v164) {
            goto LABEL_257;
          }
LABEL_256:
          nitro::nitro_function::nitro_function(v91);
          goto LABEL_257;
        }
        uint64_t v139 = v83;
        id v140 = v82;
        if (v82) {
          atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v137 = v212;
        uint64_t v138 = v213;
        if (v213) {
          atomic_fetch_add_explicit(&v213->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v135 = v58;
        uint64_t v136 = v78;
        if (v78) {
          atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v133 = 0;
        std::string v134 = 0;
        (*(void (**)(uint64_t, uint64_t *, void **, uint64_t *, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 400))(a1, &v139, &v137, &v135, &v133, v85, 1);
        if (v134) {
          nitro::nitro_function::nitro_function(v134);
        }
        if (v136) {
          nitro::nitro_function::nitro_function(v136);
        }
        if (v138) {
          nitro::nitro_function::nitro_function(v138);
        }
        long long v91 = v140;
        if (v140) {
          goto LABEL_256;
        }
      }
      else
      {
        uint64_t v96 = (std::__shared_weak_count *)v118[1];
        uint64_t v155 = *v118;
        id v156 = v96;
        if (v96) {
          atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v153 = v83;
        unint64_t v154 = v82;
        if (v82) {
          atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v151 = v84;
        uint64_t v152 = v132;
        if (v132) {
          atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v149 = v212;
        uint64_t v150 = v213;
        if (v213) {
          atomic_fetch_add_explicit(&v213->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v147 = v58;
        int v148 = v78;
        if (v78) {
          atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v145 = v37;
        int v146 = v129;
        if (v129) {
          atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v143 = 0;
        int v144 = 0;
        uint64_t v141 = v126;
        uint64_t v142 = v174;
        if (v174) {
          atomic_fetch_add_explicit(&v174->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, void **, uint64_t *, uint64_t *, uint64_t *, uint64_t *, int))(*(void *)a1 + 408))(a1, &v155, &v153, &v151, &v149, &v147, &v145, &v143, &v141, 1);
        if (v142) {
          nitro::nitro_function::nitro_function(v142);
        }
        if (v144) {
          nitro::nitro_function::nitro_function(v144);
        }
        if (v146) {
          nitro::nitro_function::nitro_function(v146);
        }
        if (v148) {
          nitro::nitro_function::nitro_function(v148);
        }
        if (v150) {
          nitro::nitro_function::nitro_function(v150);
        }
        if (v152) {
          nitro::nitro_function::nitro_function(v152);
        }
        if (v154) {
          nitro::nitro_function::nitro_function(v154);
        }
        long long v91 = v156;
        if (v156) {
          goto LABEL_256;
        }
      }
LABEL_257:
      ++v80;
      uint64_t v37 = v84;
      std::string v81 = v129;
      uint64_t v92 = v132;
      unsigned __int8 v74 = v132;
      uint64_t v35 = v83;
      std::string v79 = v82;
      std::string::size_type v93 = v78;
      long long v94 = v82;
      long long v95 = v129;
      if (v80 >= *(_DWORD *)(a1 + 344)) {
        goto LABEL_291;
      }
      continue;
    }
    break;
  }
  std::string::size_type v93 = v82;
  long long v94 = v78;
  uint64_t v92 = v129;
  long long v95 = v132;
LABEL_291:
  uint64_t v97 = v92;
  long long v98 = v94;
  if (v174) {
    nitro::nitro_function::nitro_function(v174);
  }
  unsigned int v13 = v115;
  if (v209.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v209.__r_.__value_.__l.__size_);
  }
  if (v210.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v210.__r_.__value_.__l.__size_);
  }
  if (v97) {
    nitro::nitro_function::nitro_function(v97);
  }
  if (v95) {
    nitro::nitro_function::nitro_function(v95);
  }
  if (v213) {
    nitro::nitro_function::nitro_function(v213);
  }
  if (v98) {
    nitro::nitro_function::nitro_function(v98);
  }
  if (v93) {
    nitro::nitro_function::nitro_function(v93);
  }
  int v11 = v120;
LABEL_332:
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v247) {
    nitro::nitro_function::nitro_function(v247);
  }
  if (v249) {
    nitro::nitro_function::nitro_function(v249);
  }
  if (v252) {
    nitro::nitro_function::nitro_function(v252);
  }
}

void sub_192A026B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, std::__shared_weak_count *a19, std::__shared_weak_count *a20,std::__shared_weak_count *a21)
{
  if (*(char *)(v23 - 169) < 0) {
    operator delete(*(void **)(v23 - 192));
  }
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  if (*(char *)(v23 - 121) < 0) {
    operator delete(*(void **)(v23 - 144));
  }
  if (SLOBYTE(STACK[0x30F]) < 0)
  {
    operator delete((void *)STACK[0x2F8]);
    if ((v22 & 1) == 0)
    {
LABEL_14:
      if (a21) {
        nitro::nitro_function::nitro_function(a21);
      }
      if (a19) {
        nitro::nitro_function::nitro_function(a19);
      }
      if (STACK[0x338]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x338]);
      }
      if (a20) {
        nitro::nitro_function::nitro_function(a20);
      }
      if (a18) {
        nitro::nitro_function::nitro_function(a18);
      }
      if (a11) {
        nitro::nitro_function::nitro_function(a11);
      }
      if (a16) {
        nitro::nitro_function::nitro_function(a16);
      }
      int v25 = *(std::__shared_weak_count **)(v23 - 216);
      if (v25) {
        nitro::nitro_function::nitro_function(v25);
      }
      BOOL v26 = *(std::__shared_weak_count **)(v23 - 200);
      if (v26) {
        nitro::nitro_function::nitro_function(v26);
      }
      int v27 = *(std::__shared_weak_count **)(v23 - 152);
      if (v27) {
        nitro::nitro_function::nitro_function(v27);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v21);
  goto LABEL_14;
}

uint64_t Espresso::reduce_shorthand::operator()(uint64_t *a1, uint64_t a2, int a3, void **a4, uint64_t a5, uint64_t *a6, float a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a1[6];
  if (!v14
    || *((void *)*a4 + 9) != *(void *)(v14 + 8)
    && ((uint64_t v15 = (std::__shared_weak_count *)a1[7], a1[6] = 0, a1[7] = 0, !v15)
     || (nitro::nitro_function::nitro_function(v15), !a1[6])))
  {
    uint64_t v49 = 0x100000007;
    uint64_t v51 = 0;
    uint64_t v50 = 0;
    unint64_t v52 = 0xFFFFFFFF00000000;
    char v53 = 0;
    v48[0] = a3;
    *(float *)&v48[1] = a7;
    Espresso::abstract_engine_factory::shared(&v44);
    uint64_t v16 = v44;
    uint64_t v17 = *a4;
    std::string::basic_string[abi:ne180100]<0>(&__p, "reduce");
    uint64_t v18 = *(uint64_t (****)(void))(*((void *)*a4 + 9) + 8);
    int v43 = (**v18)(v18);
    (*(void (**)(void))(*(void *)*a4 + 32))();
    Espresso::abstract_engine_factory::make_kernel_priv(v16, (uint64_t)v17 + 72, (uint64_t)&__p, (uint64_t)v48, &v43);
    int v19 = lpsrc;
    if (lpsrc
    {
      uint64_t v20 = v47;
      if (v47) {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v20 = 0;
    }
    uint64_t v21 = (std::__shared_weak_count *)a1[7];
    a1[6] = (uint64_t)v19;
    a1[7] = (uint64_t)v20;
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    if (v47) {
      nitro::nitro_function::nitro_function(v47);
    }
    if (SHIBYTE(v56[0]) < 0) {
      operator delete(__p);
    }
    if (v45) {
      nitro::nitro_function::nitro_function(v45);
    }
    int v22 = *(std::__shared_weak_count **)(a5 + 8);
    std::string __p = *(void **)a5;
    int v55 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(a1 + 3, (uint64_t *)&__p, v56, 1uLL);
    if (v55) {
      nitro::nitro_function::nitro_function(v55);
    }
    uint64_t v23 = (std::__shared_weak_count *)a4[1];
    std::string __p = *a4;
    int v55 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(a1, (uint64_t *)&__p, v56, 1uLL);
    if (v55) {
      nitro::nitro_function::nitro_function(v55);
    }
    uint64_t v24 = *a6;
    if (*a6)
    {
      int v25 = *(std::__shared_weak_count **)(a5 + 8);
      std::string __p = *(void **)a5;
      int v55 = v25;
      if (v25)
      {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v24 = *a6;
      }
      uint64_t v26 = a6[1];
      v56[0] = v24;
      v56[1] = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> const*,std::shared_ptr<Espresso::abstract_blob_container> const*>(a1 + 3, (uint64_t *)&__p, &v57, 2uLL);
      for (uint64_t i = 24; i != -8; i -= 16)
      {
        long long v28 = *(std::__shared_weak_count **)((char *)&__p + i);
        if (v28) {
          nitro::nitro_function::nitro_function(v28);
        }
      }
    }
    if (!a1[6])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Inconsistent state");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  uint64_t v29 = (void *)a1[3];
  long long v31 = *(void **)a5;
  uint64_t v30 = *(void *)(a5 + 8);
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v32 = (std::__shared_weak_count *)v29[1];
  void *v29 = v31;
  v29[1] = v30;
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  uint64_t v33 = *a6;
  if (*a6)
  {
    uint64_t v34 = a1[3];
    uint64_t v35 = a6[1];
    if (v35) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v36 = *(std::__shared_weak_count **)(v34 + 24);
    *(void *)(v34 + 16) = v33;
    *(void *)(v34 + 24) = v35;
    if (v36) {
      nitro::nitro_function::nitro_function(v36);
    }
  }
  uint64_t v37 = (void *)*a1;
  int v39 = *a4;
  int v38 = (atomic_ullong *)a4[1];
  if (v38) {
    atomic_fetch_add_explicit(v38 + 1, 1uLL, memory_order_relaxed);
  }
  long long v40 = (std::__shared_weak_count *)v37[1];
  void *v37 = v39;
  v37[1] = v38;
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(void *)a1[6] + 16))(a1[6], a2, a1 + 3, a1);
}

void sub_192A0318C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  __cxa_free_exception(v25);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<std::pair<int,float>>>::vector[abi:ne180100](void *a1, uint64_t **a2, unint64_t a3)
{
  a1[2] = 0;
  int v4 = a1 + 2;
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = 3 * a3;
    int v7 = operator new(24 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    uint64_t v17 = v7;
    uint64_t v18 = v7;
    unsigned int v8 = &a2[v6];
    v15[0] = v4;
    v15[1] = &v17;
    uint64_t v15[2] = &v18;
    long long v9 = v7;
    char v16 = 0;
    do
    {
      *long long v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      uint64_t v10 = *a2;
      int v11 = a2[1];
      if (v11 != *a2)
      {
        std::vector<std::pair<int,float>>::__vallocate[abi:ne180100](v9, v11 - *a2);
        unsigned int v12 = (void *)v9[1];
        do
        {
          uint64_t v13 = *v10++;
          *v12++ = v13;
        }
        while (v10 != v11);
        v9[1] = v12;
        long long v9 = v18;
      }
      a2 += 3;
      v9 += 3;
      uint64_t v18 = v9;
    }
    while (a2 != v8);
    char v16 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
    a1[1] = v9;
  }
  return a1;
}

void sub_192A0332C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void Espresso::generic_inner_product_kernel::set_f16_biases(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(&v15, (int *)(*(void *)a2 + 8));
  uint64_t v6 = v15;
  int v7 = *(void **)(v15 + 16);
  vImagePixelCount v8 = *(int *)(*(void *)a2 + 8);
  src.data = *(void **)(*(void *)a2 + 16);
  src.vImagePixelCount height = 1;
  src.width = v8;
  src.rowBytes = 2 * v8;
  dest.data = v7;
  dest.vImagePixelCount height = 1;
  dest.width = v8;
  dest.rowBytes = 4 * v8;
  vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  long long v9 = v16;
  uint64_t v13 = v6;
  uint64_t v14 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)a3[1];
  uint64_t v11 = *a3;
  unsigned int v12 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 448))(a1, &v13, &v11);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_192A03480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_inner_product_kernel::set_f16_weights(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(&v15, (int *)(*(void *)a2 + 8));
  uint64_t v6 = v15;
  int v7 = *(void **)(v15 + 16);
  vImagePixelCount v8 = *(int *)(*(void *)a2 + 12) * (uint64_t)*(int *)(*(void *)a2 + 8);
  src.data = *(void **)(*(void *)a2 + 16);
  src.vImagePixelCount height = 1;
  src.width = v8;
  src.rowBytes = 2 * v8;
  dest.data = v7;
  dest.vImagePixelCount height = 1;
  dest.width = v8;
  dest.rowBytes = 4 * v8;
  vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  long long v9 = v16;
  uint64_t v13 = v6;
  uint64_t v14 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)a3[1];
  uint64_t v11 = *a3;
  unsigned int v12 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 456))(a1, &v13, &v11);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_192A035D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_inner_product_kernel::create_biases_blob(Espresso::generic_inner_product_kernel *this@<X0>, void *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 76) << (*((_DWORD *)this + 83) != 0), 1, 1, 1);
}

void Espresso::generic_inner_product_kernel::create_weights_blob(Espresso::generic_inner_product_kernel *this@<X0>, void *a2@<X8>)
{
}

void Espresso::generic_inner_product_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)&long long v71 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v38, "inner_product");
  uint64_t v6 = *(std::string::size_type **)(a3 + 16);
  std::string::size_type v7 = *v6;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[1] - *v6) >> 3);
  if (v8 <= 1)
  {
    if (v39 >= 0) {
      uint64_t v37 = v38;
    }
    else {
      uint64_t v37 = (void **)v38[0];
    }
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,char const*,unsigned long>((const char *)v37, v8);
  }
  long long v9 = **(long long ***)(a3 + 8);
  uint64_t v10 = **(long long ***)(a3 + 24);
  int v63 = 0;
  uint64_t v64 = 0;
  unint64_t v65 = 0;
  uint64_t v11 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v7);
  if (v11)
  {
    Espresso::blob_grad_contrib_name((uint64_t)__p, v7, a3);
    unsigned int v12 = v64;
    if ((unint64_t)v64 >= v65)
    {
      uint64_t v14 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v63, (uint64_t)__p);
    }
    else
    {
      if (SBYTE7(v52) < 0)
      {
        std::string::__init_copy_ctor_external(v64, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        long long v13 = *(_OWORD *)__p;
        v64->__r_.__value_.__r.__words[2] = v52;
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      uint64_t v14 = v12 + 1;
    }
    uint64_t v64 = v14;
    if (SBYTE7(v52) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v15 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v7 + 24);
  if (v15)
  {
    Espresso::blob_grad_contrib_name((uint64_t)__p, v7 + 24, a3);
    char v16 = v64;
    if ((unint64_t)v64 >= v65)
    {
      uint64_t v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v63, (uint64_t)__p);
    }
    else
    {
      if (SBYTE7(v52) < 0)
      {
        std::string::__init_copy_ctor_external(v64, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        long long v17 = *(_OWORD *)__p;
        v64->__r_.__value_.__r.__words[2] = v52;
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      uint64_t v18 = v16 + 1;
    }
    uint64_t v64 = v18;
    if (SBYTE7(v52) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v19 = **(void **)(a3 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a3 + 16) + 8) - v19) >> 3) >= 3
    && (std::string::size_type v20 = v19 + 48,
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v19 + 48)))
  {
    Espresso::blob_grad_contrib_name((uint64_t)__p, v20, a3);
    uint64_t v21 = v64;
    if ((unint64_t)v64 >= v65)
    {
      uint64_t v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v63, (uint64_t)__p);
    }
    else
    {
      if (SBYTE7(v52) < 0)
      {
        std::string::__init_copy_ctor_external(v64, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        long long v22 = *(_OWORD *)__p;
        v64->__r_.__value_.__r.__words[2] = v52;
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      }
      uint64_t v24 = v21 + 1;
    }
    uint64_t v64 = v24;
    if (SBYTE7(v52) < 0) {
      operator delete(__p[0]);
    }
    char v23 = 1;
  }
  else
  {
    char v23 = 0;
  }
  long long v25 = *(_OWORD *)(a1 + 416);
  long long v57 = *(_OWORD *)(a1 + 400);
  long long v58 = v25;
  int v59 = *(_DWORD *)(a1 + 432);
  long long v26 = *(_OWORD *)(a1 + 352);
  long long v53 = *(_OWORD *)(a1 + 336);
  long long v54 = v26;
  long long v27 = *(_OWORD *)(a1 + 384);
  long long v55 = *(_OWORD *)(a1 + 368);
  long long v56 = v27;
  long long v28 = *(_OWORD *)(a1 + 320);
  *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 304);
  long long v52 = v28;
  BOOL v60 = v11 != 0;
  BOOL v61 = v15 != 0;
  char v62 = v23;
  std::operator+<char>();
  uint64_t v29 = std::string::append(&v46, "_grad");
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  std::string::size_type v48 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v47 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  uint64_t v31 = *(void *)a3;
  if (*((char *)v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v32 = *v9;
    v67.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v32;
  }
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
  }
  else
  {
    long long v33 = *(_OWORD *)v7;
    v68.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v33;
  }
  if (*(char *)(v7 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)(v7 + 24), *(void *)(v7 + 32));
  }
  else
  {
    long long v34 = *(_OWORD *)(v7 + 24);
    v69.__r_.__value_.__r.__words[2] = *(void *)(v7 + 40);
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v34;
  }
  if (*((char *)v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v35 = *v10;
    v70.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v35;
  }
  int v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  long long v40 = &v43;
  LOBYTE(v41) = 0;
  int v43 = (std::string *)operator new(0x60uLL);
  uint64_t v44 = v43;
  uint64_t v45 = v43 + 4;
  uint64_t v44 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v45, (long long *)&v67, &v71, v43);
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  long long v40 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v40, (uint64_t)v63, (uint64_t)v64, 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - v63) >> 3));
  Espresso::sequential_builder::add<Espresso::fused_inner_product_grad_params_t>(&v49, a2, (uint64_t)v47, v31, (uint64_t)__p, (uint64_t)v43, (uint64_t)v44, (uint64_t *)&v40);
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
  long long v66 = &v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  long long v66 = (std::string ***)&v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v70.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v70.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(v47[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  __p[0] = &v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v39 < 0) {
    operator delete(v38[0]);
  }
}

void sub_192A03B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  *(void *)(v42 - 216) = v41;
  if (a41 < 0) {
    operator delete(__p);
  }
  *(void *)(v42 - 192) = v42 - 224;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 192));
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::fused_inner_product_grad_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  uint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  long long v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  long long v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192A03E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_inner_product_kernel::supports_weight_key(uint64_t a1, unsigned __int8 **a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v3 = a2[1];
    if (v3 != (unsigned __int8 *)1)
    {
      if (v3 != (unsigned __int8 *)5) {
        return 0;
      }
      a2 = (unsigned __int8 **)*a2;
      goto LABEL_8;
    }
    int v7 = **a2;
    return v7 == 87 || v7 == 98;
  }
  int v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 == 1)
  {
    int v7 = *(unsigned __int8 *)a2;
    return v7 == 87 || v7 == 98;
  }
  if (v2 != 5) {
    return 0;
  }
LABEL_8:
  if (*(_DWORD *)a2 == 828792663 && *((unsigned char *)a2 + 4) == 54) {
    return 1;
  }
  return *(_DWORD *)a2 == 828792674 && *((unsigned char *)a2 + 4) == 54;
}

void Espresso::generic_inner_product_kernel::clear_weights(Espresso::generic_inner_product_kernel *this)
{
  int v2 = (char *)this + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)this + 35) = v2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 63);
  *((void *)this + 62) = 0;
  *((void *)this + 63) = 0;
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

uint64_t Espresso::generic_inner_product_kernel::input_blob_type(Espresso::generic_inner_product_kernel *this, uint64_t a2)
{
  if (a2 == 1) {
    return 1;
  }
  else {
    return 2 * (a2 == 2);
  }
}

uint64_t Espresso::generic_load_constant_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v5 = a2[1];
    if (v5 == 13) {
      return *(void *)*a2 == 0x746E6174736E6F63 && *(void *)(*a2 + 5) == 0x626F6C625F746E61;
    }
    if (v5 != 16)
    {
      if (v5 == 18) {
        return *(void *)*a2 == 0x746E6174736E6F63
      }
            && *(void *)(*a2 + 8) == 0x70665F626F6C625FLL
            && *(_WORD *)(*a2 + 16) == 13873;
      return 0;
    }
    a2 = (uint64_t *)*a2;
    goto LABEL_26;
  }
  int v2 = *((unsigned __int8 *)a2 + 23);
  if (v2 != 13)
  {
    if (v2 != 16)
    {
      if (v2 == 18) {
        return *a2 == 0x746E6174736E6F63 && a2[1] == 0x70665F626F6C625FLL && *((_WORD *)a2 + 8) == 13873;
      }
      return 0;
    }
LABEL_26:
    if (*a2 == 0x746E6174736E6F63 && a2[1] == 0x38755F626F6C625FLL) {
      return 1;
    }
    uint64_t v8 = a2[1];
    BOOL v9 = *a2 == 0x746E6174736E6F63;
    uint64_t v10 = 0x38735F626F6C625FLL;
    return v9 && v8 == v10;
  }
  uint64_t v8 = *(uint64_t *)((char *)a2 + 5);
  BOOL v9 = *a2 == 0x746E6174736E6F63;
  uint64_t v10 = 0x626F6C625F746E61;
  return v9 && v8 == v10;
}

uint64_t Espresso::blob_cpu::blob_cpu(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = Espresso::abstract_blob_container::abstract_blob_container(a1, a2);
  *(void *)uint64_t v5 = &unk_1EE3718A0;
  *(void *)(v5 + 248) = 0;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_DWORD *)(v5 + 240) = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 200);
    *(void *)(a1 + 192) = v6;
    *(void *)(a1 + 200) = v7;
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
  }
  else
  {
    *(void *)(a1 + 192) = v6;
    *(void *)(a1 + 200) = 0;
  }
  *(_DWORD *)(a1 + 240) = 2;
  return a1;
}

void Espresso::generic_load_constant_kernel::share_weights(void *a1, const void **a2)
{
  Espresso::base_kernel::share_weights(a1, a2);
  if (!*a2
  {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("not a load_constant kernel");
  }
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v6, v4 + 43);
  Espresso::generic_load_constant_kernel::set_constant_blob(a1, (uint64_t)&v6);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5)
  {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_192A04348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_activation_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)&long long v95 = *MEMORY[0x1E4F143B8];
  if (**(void **)(a3 + 16) == *(void *)(*(void *)(a3 + 16) + 8)) {
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("No input given to activation layer.");
  }
  if (**(void **)(a3 + 24) == *(void *)(*(void *)(a3 + 24) + 8)) {
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Activation layer does not produce any outputs.");
  }
  std::string::basic_string[abi:ne180100]<0>(&v77, "activation");
  uint64_t v6 = (_DWORD *)(a1 + 304);
  if (*(_DWORD *)(a1 + 304) == 17)
  {
    uint64_t v7 = *(uint64_t **)(a3 + 16);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    if ((v79 & 0x80u) == 0) {
      size_t v10 = v79;
    }
    else {
      size_t v10 = v78;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v10 + 16);
    uint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v10)
    {
      if ((v79 & 0x80u) == 0) {
        uint64_t v13 = &v77;
      }
      else {
        uint64_t v13 = v77;
      }
      memmove(p_p, v13, v10);
    }
    strcpy((char *)p_p + v10, "_fused_lstm_ifog");
    Espresso::check_num_arguments(v11, 3uLL, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v14 = *(uint64_t **)(a3 + 24);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    if ((v79 & 0x80u) == 0) {
      size_t v17 = v79;
    }
    else {
      size_t v17 = v78;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v17 + 16);
    uint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &__p;
    }
    else {
      uint64_t v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v17)
    {
      if ((v79 & 0x80u) == 0) {
        uint64_t v20 = &v77;
      }
      else {
        uint64_t v20 = v77;
      }
      memmove(v19, v20, v17);
    }
    strcpy((char *)v19 + v17, "_fused_lstm_ifog");
    Espresso::check_num_arguments(v18, 2uLL, (uint64_t)&__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::size_type v21 = **(void **)(a3 + 16);
    long long v22 = **(long long ***)(a3 + 24);
    char v23 = **(long long ***)(a3 + 8);
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v21)&& std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v21 + 24)&& std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v21 + 48))
    {
      Espresso::blob_grad_contrib_name((uint64_t)&v76, v21, a3);
      Espresso::blob_grad_contrib_name((uint64_t)&v94, v21 + 24, a3);
      Espresso::blob_grad_contrib_name((uint64_t)&v75, v21 + 48, a3);
      std::string::basic_string[abi:ne180100]<0>(v71, "activation_grad");
      uint64_t v24 = *(void *)a3;
      if (*((char *)v23 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v23, *((void *)v23 + 1));
      }
      else
      {
        long long v25 = *v23;
        __p.__r_.__value_.__r.__words[2] = *((void *)v23 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
      }
      if (*((char *)v23 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v87, *((const std::string::value_type **)v23 + 3), *((void *)v23 + 4));
      }
      else
      {
        long long v35 = *(long long *)((char *)v23 + 24);
        v87.__r_.__value_.__r.__words[2] = *((void *)v23 + 5);
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v35;
      }
      if (*((char *)v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v22, *((void *)v22 + 1));
      }
      else
      {
        long long v36 = *v22;
        v88.__r_.__value_.__r.__words[2] = *((void *)v22 + 2);
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v36;
      }
      if (*((char *)v22 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v89, *((const std::string::value_type **)v22 + 3), *((void *)v22 + 4));
      }
      else
      {
        long long v37 = *(long long *)((char *)v22 + 24);
        v89.__r_.__value_.__r.__words[2] = *((void *)v22 + 5);
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v37;
      }
      if (*(char *)(v21 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v90, *(const std::string::value_type **)v21, *(void *)(v21 + 8));
      }
      else
      {
        long long v38 = *(_OWORD *)v21;
        v90.__r_.__value_.__r.__words[2] = *(void *)(v21 + 16);
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v38;
      }
      if (*(char *)(v21 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v91, *(const std::string::value_type **)(v21 + 24), *(void *)(v21 + 32));
      }
      else
      {
        long long v39 = *(_OWORD *)(v21 + 24);
        v91.__r_.__value_.__r.__words[2] = *(void *)(v21 + 40);
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v39;
      }
      if (*(char *)(v21 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)(v21 + 48), *(void *)(v21 + 56));
      }
      else
      {
        long long v40 = *(_OWORD *)(v21 + 48);
        v92.__r_.__value_.__r.__words[2] = *(void *)(v21 + 64);
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v40;
      }
      std::string v68 = 0;
      std::string v69 = 0;
      std::string v70 = 0;
      v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
      v82.__r_.__value_.__s.__data_[8] = 0;
      std::string v68 = (std::string *)operator new(0xA8uLL);
      std::string v69 = v68;
      std::string v70 = v68 + 7;
      std::string v69 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v70, (long long *)&__p, (long long *)&v93, v68);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v82, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
      }
      else {
        std::string v82 = v76;
      }
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v83, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
      }
      else {
        std::string v83 = v94;
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v84, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
      }
      else {
        std::string v84 = v75;
      }
      unint64_t v65 = 0;
      long long v66 = 0;
      std::string v67 = 0;
      int v80 = &v65;
      char v81 = 0;
      unint64_t v65 = (std::string *)operator new(0x48uLL);
      long long v66 = v65;
      std::string v67 = v65 + 3;
      long long v66 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v67, (long long *)&v82, (long long *)&v85, v65);
      Espresso::sequential_builder::add<Espresso::activation_params>(&v73, a2, (uint64_t)v71, v24, (uint64_t)v6, (uint64_t)v68, (uint64_t)v69, (uint64_t *)&v65);
      if (v74) {
        nitro::nitro_function::nitro_function(v74);
      }
      int v80 = &v65;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
      for (uint64_t i = 0; i != -9; i -= 3)
      {
        if (SHIBYTE(v84.__r_.__value_.__r.__words[i + 2]) < 0) {
          operator delete(*(void **)((char *)&v84.__r_.__value_.__l.__data_ + i * 8));
        }
      }
      v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
      for (uint64_t j = 0; j != -21; j -= 3)
      {
        if (SHIBYTE(v92.__r_.__value_.__r.__words[j + 2]) < 0) {
          operator delete(*(void **)((char *)&v92.__r_.__value_.__l.__data_ + j * 8));
        }
      }
      if (v72 < 0) {
        operator delete(v71[0]);
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      {
        int v43 = (void *)v76.__r_.__value_.__r.__words[0];
LABEL_126:
        operator delete(v43);
      }
    }
  }
  else if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), **(void **)(a3 + 16)))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v82, **(void **)(a3 + 16), a3);
    if (*v6 != 14 && *v6)
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, "activation_grad");
      uint64_t v29 = *(void *)a3;
      long long v30 = **(long long ***)(a3 + 8);
      if (*((char *)v30 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v30, *((void *)v30 + 1));
      }
      else
      {
        long long v31 = *v30;
        __p.__r_.__value_.__r.__words[2] = *((void *)v30 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
      }
      uint64_t v44 = **(long long ***)(a3 + 16);
      if (*((char *)v44 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)v44, *((void *)v44 + 1));
      }
      else
      {
        long long v45 = *v44;
        v87.__r_.__value_.__r.__words[2] = *((void *)v44 + 2);
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v45;
      }
      std::string v46 = **(long long ***)(a3 + 24);
      if (*((char *)v46 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v46, *((void *)v46 + 1));
      }
      else
      {
        long long v47 = *v46;
        v88.__r_.__value_.__r.__words[2] = *((void *)v46 + 2);
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v47;
      }
      long long v52 = 0;
      long long v53 = 0;
      long long v54 = 0;
      v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
      v94.__r_.__value_.__s.__data_[8] = 0;
      long long v52 = (std::string *)operator new(0x48uLL);
      long long v53 = v52;
      long long v54 = v52 + 3;
      long long v53 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v54, (long long *)&__p, (long long *)&v89, v52);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v94, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
      }
      else {
        std::string v94 = v82;
      }
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
      v75.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v49 = (std::string *)operator new(0x18uLL);
      uint64_t v50 = v49;
      uint64_t v51 = v49 + 1;
      uint64_t v50 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v51, (long long *)&v94, &v95, v49);
      Espresso::sequential_builder::add<Espresso::activation_params>(&v55, a2, (uint64_t)&v76, v29, (uint64_t)v6, (uint64_t)v52, (uint64_t)v53, (uint64_t *)&v49);
      if (v56) {
        nitro::nitro_function::nitro_function(v56);
      }
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
      for (uint64_t k = 0; k != -9; k -= 3)
      {
        if (SHIBYTE(v88.__r_.__value_.__r.__words[k + 2]) < 0) {
          operator delete(*(void **)((char *)&v88.__r_.__value_.__l.__data_ + k * 8));
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, "activation_grad");
      uint64_t v26 = *(void *)a3;
      long long v27 = **(long long ***)(a3 + 8);
      if (*((char *)v27 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v27, *((void *)v27 + 1));
      }
      else
      {
        long long v28 = *v27;
        __p.__r_.__value_.__r.__words[2] = *((void *)v27 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
      }
      long long v32 = **(long long ***)(a3 + 16);
      if (*((char *)v32 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)v32, *((void *)v32 + 1));
      }
      else
      {
        long long v33 = *v32;
        v87.__r_.__value_.__r.__words[2] = *((void *)v32 + 2);
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v33;
      }
      BOOL v60 = 0;
      BOOL v61 = 0;
      char v62 = 0;
      v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
      v94.__r_.__value_.__s.__data_[8] = 0;
      BOOL v60 = (std::string *)operator new(0x30uLL);
      BOOL v61 = v60;
      char v62 = v60 + 2;
      BOOL v61 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v62, (long long *)&__p, (long long *)&v88, v60);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v94, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
      }
      else {
        std::string v94 = v82;
      }
      long long v57 = 0;
      long long v58 = 0;
      int v59 = 0;
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      v75.__r_.__value_.__s.__data_[8] = 0;
      long long v57 = (std::string *)operator new(0x18uLL);
      long long v58 = v57;
      int v59 = v57 + 1;
      long long v58 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v59, (long long *)&v94, &v95, v57);
      Espresso::sequential_builder::add<Espresso::activation_params>(&v63, a2, (uint64_t)&v76, v26, (uint64_t)v6, (uint64_t)v60, (uint64_t)v61, (uint64_t *)&v57);
      if (v64) {
        nitro::nitro_function::nitro_function(v64);
      }
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
      for (uint64_t m = 0; m != -6; m -= 3)
      {
        if (SHIBYTE(v87.__r_.__value_.__r.__words[m + 2]) < 0) {
          operator delete(*(void **)((char *)&__p + m * 8 + 24));
        }
      }
    }
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    {
      int v43 = (void *)v82.__r_.__value_.__r.__words[0];
      goto LABEL_126;
    }
  }
  if ((char)v79 < 0) {
    operator delete(v77);
  }
}

void sub_192A04D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v68 - 112) = &a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v68 - 112));
  uint64_t v70 = 0;
  while (1)
  {
    if (*((char *)&a68 + v70 + 71) < 0) {
      operator delete(*(void **)((char *)&a68 + v70 + 48));
    }
    v70 -= 24;
    if (v70 == -72)
    {
      if (a46 < 0) {
        operator delete(__p);
      }
      if (a60 < 0) {
        operator delete(a55);
      }
      if (a52 < 0) {
        operator delete(a47);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t Espresso::check_num_arguments(uint64_t result, unint64_t a2, uint64_t a3, int a4)
{
  if (result != a2)
  {
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v4 = a3;
    }
    else {
      uint64_t v4 = *(void *)a3;
    }
    if (a4) {
      uint64_t v5 = "input";
    }
    else {
      uint64_t v5 = "output";
    }
    if (a2 <= 1) {
      uint64_t v6 = "";
    }
    else {
      uint64_t v6 = "s";
    }
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,char const*,char const*,char const*>("%s should have exactly %d %s%s", v4, (uint64_t)v5, (uint64_t)v6);
  }
  return result;
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,char const*,char const*,char const*>(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

BOOL Espresso::generic_activation_kernel::supports_weight_key(uint64_t a1, void *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v6 = a2[1];
    if (v6 == 12) {
      return *(void *)*a2 == 0x705F736D61726170 && *(_DWORD *)(*a2 + 8) == 1970038130;
    }
    if (v6 != 14)
    {
      if (v6 == 15) {
        return *(void *)*a2 == 0x73756C7074666F73 && *(void *)(*a2 + 7) == 0x736168706C615F73;
      }
      return 0;
    }
    a2 = (void *)*a2;
  }
  else
  {
    int v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 == 12) {
      return *a2 == 0x705F736D61726170 && *((_DWORD *)a2 + 2) == 1970038130;
    }
    if (v2 != 14)
    {
      if (v2 == 15)
      {
        uint64_t v3 = *(void *)((char *)a2 + 7);
        BOOL v4 = *a2 == 0x73756C7074666F73;
        uint64_t v5 = 0x68706C615F73;
        goto LABEL_21;
      }
      return 0;
    }
  }
  uint64_t v3 = *(void *)((char *)a2 + 6);
  BOOL v4 = *a2 == 0x73756C7074666F73;
  uint64_t v5 = 0x7465625F7375;
LABEL_21:
  uint64_t v9 = v5 & 0xFFFFFFFFFFFFLL | 0x7361000000000000;
  return v4 && v3 == v9;
}

char *Espresso::generic_activation_kernel::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  uint64_t v8 = (std::string::size_type *)(result + 344);
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
    int v9 = *((unsigned __int8 *)a3 + 23);
    if (v9 != 12)
    {
      if (v9 != 14)
      {
        if (v9 != 15) {
          return result;
        }
        if (*a3 != 0x73756C7074666F73 || *(uint64_t *)((char *)a3 + 7) != 0x736168706C615F73) {
          return result;
        }
        goto LABEL_19;
      }
      goto LABEL_28;
    }
    if (*a3 != 0x705F736D61726170 || *((_DWORD *)a3 + 2) != 1970038130) {
      return result;
    }
LABEL_40:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v108, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v21 = v108.__r_.__value_.__r.__words[0];
    long long v22 = (std::__shared_weak_count *)v7[44];
    *(_OWORD *)uint64_t v8 = *(_OWORD *)&v108.__r_.__value_.__l.__data_;
    if (v22)
    {
      nitro::nitro_function::nitro_function(v22);
      std::string::size_type v15 = *v8;
    }
    else
    {
      std::string::size_type v15 = v21;
    }
    if (a5 != 4 * *(int *)(v15 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v101, a5);
      long long v47 = std::string::insert(&v101, 0, "Unexpected size s=");
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      uint64_t v49 = std::string::append(&v102, "/blob=");
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v103.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v100, 4 * *(int *)(*v8 + 8));
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v51 = &v100;
      }
      else {
        uint64_t v51 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v100.__r_.__value_.__l.__size_;
      }
      long long v53 = std::string::append(&v103, (const std::string::value_type *)v51, size);
      long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v97, " @ ");
      if ((v99 & 0x80u) == 0) {
        uint64_t v55 = (const std::string::value_type *)&v97;
      }
      else {
        uint64_t v55 = v97;
      }
      if ((v99 & 0x80u) == 0) {
        std::string::size_type v56 = v99;
      }
      else {
        std::string::size_type v56 = v98;
      }
      long long v57 = std::string::append(&v104, v55, v56);
      long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      int v59 = std::string::append(&v105, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
      long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v106.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v94, ":");
      if ((v96 & 0x80u) == 0) {
        BOOL v61 = (const std::string::value_type *)&v94;
      }
      else {
        BOOL v61 = v94;
      }
      if ((v96 & 0x80u) == 0) {
        std::string::size_type v62 = v96;
      }
      else {
        std::string::size_type v62 = v95;
      }
      uint64_t v63 = std::string::append(&v106, v61, v62);
      long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v93, 1401);
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v65 = &v93;
      }
      else {
        unint64_t v65 = (std::string *)v93.__r_.__value_.__r.__words[0];
      }
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v66 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v66 = v93.__r_.__value_.__l.__size_;
      }
      std::string v67 = std::string::append(&v107, (const std::string::value_type *)v65, v66);
      long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v108.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v108);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    goto LABEL_98;
  }
  uint64_t v11 = a3[1];
  if (v11 == 12)
  {
    if (*(void *)*a3 != 0x705F736D61726170 || *(_DWORD *)(*a3 + 8) != 1970038130) {
      return result;
    }
    goto LABEL_40;
  }
  if (v11 == 14)
  {
    a3 = (uint64_t *)*a3;
LABEL_28:
    if (*a3 == 0x73756C7074666F73 && *(uint64_t *)((char *)a3 + 6) == 0x73617465625F7375)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v108, (unint64_t)(int)a5 >> 2, 1, 1, 1);
      std::string::size_type v18 = v108.__r_.__value_.__r.__words[0];
      uint64_t v19 = (std::__shared_weak_count *)v7[48];
      *((_OWORD *)v8 + 2) = *(_OWORD *)&v108.__r_.__value_.__l.__data_;
      if (v19)
      {
        nitro::nitro_function::nitro_function(v19);
        std::string::size_type v15 = v8[4];
      }
      else
      {
        std::string::size_type v15 = v18;
      }
      if (a5 != 4 * *(int *)(v15 + 8))
      {
        char v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v101, a5);
        uint64_t v24 = std::string::insert(&v101, 0, "Unexpected size s=");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v102.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        uint64_t v26 = std::string::append(&v102, "/blob=");
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v103.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v100, 4 * *(int *)(v8[4] + 8));
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v28 = &v100;
        }
        else {
          long long v28 = (std::string *)v100.__r_.__value_.__r.__words[0];
        }
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v29 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v29 = v100.__r_.__value_.__l.__size_;
        }
        long long v30 = std::string::append(&v103, (const std::string::value_type *)v28, v29);
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v104.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v97, " @ ");
        if ((v99 & 0x80u) == 0) {
          long long v32 = (const std::string::value_type *)&v97;
        }
        else {
          long long v32 = v97;
        }
        if ((v99 & 0x80u) == 0) {
          std::string::size_type v33 = v99;
        }
        else {
          std::string::size_type v33 = v98;
        }
        long long v34 = std::string::append(&v104, v32, v33);
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v105.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        long long v36 = std::string::append(&v105, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v106.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v94, ":");
        if ((v96 & 0x80u) == 0) {
          long long v38 = (const std::string::value_type *)&v94;
        }
        else {
          long long v38 = v94;
        }
        if ((v96 & 0x80u) == 0) {
          std::string::size_type v39 = v96;
        }
        else {
          std::string::size_type v39 = v95;
        }
        long long v40 = std::string::append(&v106, v38, v39);
        long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v107.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v93, 1411);
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v42 = &v93;
        }
        else {
          uint64_t v42 = (std::string *)v93.__r_.__value_.__r.__words[0];
        }
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v43 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v43 = v93.__r_.__value_.__l.__size_;
        }
        uint64_t v44 = std::string::append(&v107, (const std::string::value_type *)v42, v43);
        long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v108.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v23, &v108);
        __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      goto LABEL_98;
    }
    return result;
  }
  if (v11 == 15 && *(void *)*a3 == 0x73756C7074666F73 && *(void *)(*a3 + 7) == 0x736168706C615F73)
  {
LABEL_19:
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v108, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v13 = v108.__r_.__value_.__r.__words[0];
    uint64_t v14 = (std::__shared_weak_count *)v7[46];
    *((_OWORD *)v8 + 1) = *(_OWORD *)&v108.__r_.__value_.__l.__data_;
    if (v14)
    {
      nitro::nitro_function::nitro_function(v14);
      std::string::size_type v15 = v8[2];
    }
    else
    {
      std::string::size_type v15 = v13;
    }
    if (a5 != 4 * *(int *)(v15 + 8))
    {
      uint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v101, a5);
      long long v71 = std::string::insert(&v101, 0, "Unexpected size s=");
      long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      uint64_t v73 = std::string::append(&v102, "/blob=");
      long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v103.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v100, 4 * *(int *)(v8[2] + 8));
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v75 = &v100;
      }
      else {
        std::string v75 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v76 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v76 = v100.__r_.__value_.__l.__size_;
      }
      uint64_t v77 = std::string::append(&v103, (const std::string::value_type *)v75, v76);
      long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v97, " @ ");
      if ((v99 & 0x80u) == 0) {
        unsigned __int8 v79 = (const std::string::value_type *)&v97;
      }
      else {
        unsigned __int8 v79 = v97;
      }
      if ((v99 & 0x80u) == 0) {
        std::string::size_type v80 = v99;
      }
      else {
        std::string::size_type v80 = v98;
      }
      char v81 = std::string::append(&v104, v79, v80);
      long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      std::string v83 = std::string::append(&v105, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
      long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
      v106.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v84;
      v83->__r_.__value_.__l.__size_ = 0;
      v83->__r_.__value_.__r.__words[2] = 0;
      v83->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v94, ":");
      if ((v96 & 0x80u) == 0) {
        uint64_t v85 = (const std::string::value_type *)&v94;
      }
      else {
        uint64_t v85 = v94;
      }
      if ((v96 & 0x80u) == 0) {
        std::string::size_type v86 = v96;
      }
      else {
        std::string::size_type v86 = v95;
      }
      std::string v87 = std::string::append(&v106, v85, v86);
      long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v107.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v93, 1406);
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v89 = &v93;
      }
      else {
        std::string v89 = (std::string *)v93.__r_.__value_.__r.__words[0];
      }
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v90 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v90 = v93.__r_.__value_.__l.__size_;
      }
      std::string v91 = std::string::append(&v107, (const std::string::value_type *)v89, v90);
      long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      v108.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v92;
      v91->__r_.__value_.__l.__size_ = 0;
      v91->__r_.__value_.__r.__words[2] = 0;
      v91->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v70, &v108);
      __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
LABEL_98:
    std::string v69 = *(void **)(v15 + 16);
    return (char *)memcpy(v69, a4, a5);
  }
  return result;
}

void sub_192A05B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (v60) {
    __cxa_free_exception(v59);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_lambda_kernel::top_shapes(Espresso::generic_lambda_kernel *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *((void *)this + 41);
  BOOL v4 = *(void **)(v3 + 256);
  uint64_t v5 = (void *)(v3 + 264);
  if (v4 != (void *)(v3 + 264))
  {
    do
    {
      if (*((char *)v4 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v32, (const std::string::value_type *)v4[4], v4[5]);
      }
      else {
        std::string v32 = *(std::string *)(v4 + 4);
      }
      char v33 = *((unsigned char *)v4 + 56);
      uint64_t v7 = *((void *)this + 41) + 136;
      v34[0] = (long long *)&v32;
      uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)&v32, v34);
      Espresso::abstract_blob_container::shape((char *)&v27, *((void *)v8 + 5));
      unint64_t v9 = *(void *)(a2 + 8);
      unint64_t v10 = *(void *)(a2 + 16);
      if (v9 >= v10)
      {
        uint64_t v13 = (uint64_t)(v9 - *(void *)a2) >> 6;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 58) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v10 - *(void *)a2;
        if (v15 >> 5 > v14) {
          unint64_t v14 = v15 >> 5;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        v34[4] = (long long *)(a2 + 16);
        size_t v17 = (long long *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v16);
        std::string::size_type v18 = &v17[4 * v13];
        v34[0] = v17;
        v34[1] = v18;
        v34[3] = &v17[4 * v19];
        long long v20 = v28;
        uint64_t v21 = v29;
        *std::string::size_type v18 = v27;
        v18[1] = v20;
        *((void *)v18 + 4) = v21;
        *((void *)v18 + 5) = 0;
        *((void *)v18 + 6) = 0;
        *((void *)v18 + 7) = 0;
        *(long long *)((char *)v18 + 40) = *(_OWORD *)__p;
        *((void *)v18 + 7) = v31;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v31 = 0;
        v34[2] = v18 + 4;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)a2, v34);
        uint64_t v22 = *(void *)(a2 + 8);
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v34);
        char v23 = __p[0];
        *(void *)(a2 + 8) = v22;
        if (v23)
        {
          __p[1] = v23;
          operator delete(v23);
        }
      }
      else
      {
        long long v11 = v28;
        uint64_t v12 = v29;
        *(_OWORD *)unint64_t v9 = v27;
        *(_OWORD *)(v9 + 16) = v11;
        *(void *)(v9 + 32) = v12;
        *(void *)(v9 + 40) = 0;
        *(void *)(v9 + 48) = 0;
        *(void *)(v9 + 56) = 0;
        *(_OWORD *)(v9 + 40) = *(_OWORD *)__p;
        *(void *)(v9 + 56) = v31;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v31 = 0;
        *(void *)(a2 + 8) = v9 + 64;
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      uint64_t v24 = (void *)v4[1];
      if (v24)
      {
        do
        {
          long long v25 = v24;
          uint64_t v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          long long v25 = (void *)v4[2];
          BOOL v26 = *v25 == (void)v4;
          BOOL v4 = v25;
        }
        while (!v26);
      }
      BOOL v4 = v25;
    }
    while (v25 != v5);
  }
}

void sub_192A05F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void Espresso::generic_lambda_kernel::bottom_shapes(Espresso::generic_lambda_kernel *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *((void *)this + 41);
  BOOL v4 = *(void **)(v3 + 232);
  uint64_t v5 = (void *)(v3 + 240);
  if (v4 != (void *)(v3 + 240))
  {
    do
    {
      if (*((char *)v4 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v32, (const std::string::value_type *)v4[4], v4[5]);
      }
      else {
        std::string v32 = *(std::string *)(v4 + 4);
      }
      char v33 = *((unsigned char *)v4 + 56);
      uint64_t v7 = *((void *)this + 41) + 136;
      v34[0] = (long long *)&v32;
      uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)&v32, v34);
      Espresso::abstract_blob_container::shape((char *)&v27, *((void *)v8 + 5));
      unint64_t v9 = *(void *)(a2 + 8);
      unint64_t v10 = *(void *)(a2 + 16);
      if (v9 >= v10)
      {
        uint64_t v13 = (uint64_t)(v9 - *(void *)a2) >> 6;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 58) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v10 - *(void *)a2;
        if (v15 >> 5 > v14) {
          unint64_t v14 = v15 >> 5;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        v34[4] = (long long *)(a2 + 16);
        size_t v17 = (long long *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v16);
        std::string::size_type v18 = &v17[4 * v13];
        v34[0] = v17;
        v34[1] = v18;
        v34[3] = &v17[4 * v19];
        long long v20 = v28;
        uint64_t v21 = v29;
        *std::string::size_type v18 = v27;
        v18[1] = v20;
        *((void *)v18 + 4) = v21;
        *((void *)v18 + 5) = 0;
        *((void *)v18 + 6) = 0;
        *((void *)v18 + 7) = 0;
        *(long long *)((char *)v18 + 40) = *(_OWORD *)__p;
        *((void *)v18 + 7) = v31;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v31 = 0;
        v34[2] = v18 + 4;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)a2, v34);
        uint64_t v22 = *(void *)(a2 + 8);
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v34);
        char v23 = __p[0];
        *(void *)(a2 + 8) = v22;
        if (v23)
        {
          __p[1] = v23;
          operator delete(v23);
        }
      }
      else
      {
        long long v11 = v28;
        uint64_t v12 = v29;
        *(_OWORD *)unint64_t v9 = v27;
        *(_OWORD *)(v9 + 16) = v11;
        *(void *)(v9 + 32) = v12;
        *(void *)(v9 + 40) = 0;
        *(void *)(v9 + 48) = 0;
        *(void *)(v9 + 56) = 0;
        *(_OWORD *)(v9 + 40) = *(_OWORD *)__p;
        *(void *)(v9 + 56) = v31;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v31 = 0;
        *(void *)(a2 + 8) = v9 + 64;
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      uint64_t v24 = (void *)v4[1];
      if (v24)
      {
        do
        {
          long long v25 = v24;
          uint64_t v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          long long v25 = (void *)v4[2];
          BOOL v26 = *v25 == (void)v4;
          BOOL v4 = v25;
        }
        while (!v26);
      }
      BOOL v4 = v25;
    }
    while (v25 != v5);
  }
}

void sub_192A06188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::lambda_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_lambda_kernel::kernel_type_str(Espresso::generic_lambda_kernel *this)
{
  return "lambda";
}

uint64_t Espresso::generic_lambda_kernel::number_of_top_blobs(Espresso::generic_lambda_kernel *this)
{
  return 1;
}

void Espresso::generic_lambda_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 336))(&v3);
  std::vector<Espresso::layer_shape>::__vdeallocate(a2);
  *(_OWORD *)a2 = v3;
  a2[2] = v4;
  uint64_t v4 = 0;
  long long v3 = 0uLL;
  uint64_t v5 = (void **)&v3;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void sub_192A06284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void Espresso::generic_lambda_kernel::__launch(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t *__return_ptr))(***(void ***)a4 + 56))(&v15);
  (*(void (**)(uint64_t *__return_ptr))(***(void ***)a3 + 56))(&v13);
  uint64_t v7 = *(void *)(a1 + 328);
  std::string::basic_string[abi:ne180100]<0>(__p, "data");
  size_t v17 = __p;
  uint64_t v8 = (void **)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)__p, (long long **)&v17);
  (*(void (**)(void *, void *, uint64_t *))(*v8[5] + 48))(v8[5], a2, &v15);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  Espresso::net::__forward(*(void *)(a1 + 328), a2, 0, 0xFFFFFFFFLL);
  uint64_t v9 = *(void *)(a1 + 328);
  std::string::basic_string[abi:ne180100]<0>(__p, "final");
  size_t v17 = __p;
  unint64_t v10 = (void **)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9 + 136, (unsigned __int8 *)__p, (long long **)&v17);
  (*(void (**)(void *, void *, uint64_t *))(*v10[5] + 40))(v10[5], a2, &v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192A06438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_lambda_kernel::~generic_lambda_kernel(Espresso::generic_lambda_kernel *this)
{
  Espresso::generic_lambda_kernel::~generic_lambda_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE354BD8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  *(void *)this = &unk_1EE355758;
  if (*((char *)this + 327) < 0) {
    operator delete(*((void **)this + 38));
  }
  if (*((char *)this + 303) < 0) {
    operator delete(*((void **)this + 35));
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::abstract_kernel_with_weights_::clear_weights(Espresso::abstract_kernel_with_weights_ *this)
{
  int v2 = (char *)this + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)this + 35) = v2;
}

void Espresso::abstract_kernel_with_named_weights_::clear_weights(Espresso::abstract_kernel_with_named_weights_ *this)
{
  int v2 = (char *)this + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)this + 35) = v2;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::no_op_kernel_parameters,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::no_op_kernel::kernel_type_str(Espresso::no_op_kernel *this)
{
  return "no_op";
}

void Espresso::no_op_kernel::~no_op_kernel(Espresso::no_op_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

float Espresso::generic_lrn_kernel::estimated_compute_resources(uint64_t a1, long long **a2, int a3)
{
  return (double)*(int *)*a2
       * (double)*((int *)*a2 + 1)
       * (double)*((int *)*a2 + 2)
       * (double)*((int *)*a2 + 3)
       * (double)*(int *)(a1 + 288)
       * 3.0
       * 0.000000001;
}

void Espresso::generic_pool_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *((void *)&v30 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)(a3 + 16);
  if (*v4 == v4[1]) {
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("No input given to pooling layer.");
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), *v4))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v23, **(void **)(a3 + 16), a3);
    std::string::basic_string[abi:ne180100]<0>(__p, "pool_grad");
    uint64_t v7 = *(void *)a3;
    uint64_t v8 = **(long long ***)(a3 + 8);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v9 = *v8;
      v28.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v9;
    }
    unint64_t v10 = **(long long ***)(a3 + 16);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v11 = *v10;
      v29.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
    }
    unint64_t v16 = 0;
    size_t v17 = 0;
    std::string::size_type v18 = 0;
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
    v26.__r_.__value_.__s.__data_[8] = 0;
    unint64_t v16 = (std::string *)operator new(0x30uLL);
    size_t v17 = v16;
    std::string::size_type v18 = v16 + 2;
    size_t v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (long long *)&v28, &v30, v16);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v26, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    }
    else {
      std::string v26 = v23;
    }
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v24 = &v13;
    char v25 = 0;
    uint64_t v13 = (std::string *)operator new(0x18uLL);
    unint64_t v14 = v13;
    uint64_t v15 = v13 + 1;
    unint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (long long *)&v26, (long long *)&v27, v13);
    Espresso::sequential_builder::add<Espresso::pool_params>(&v21, a2, (uint64_t)__p, v7, a1 + 304, (uint64_t)v16, (uint64_t)v17, (uint64_t *)&v13);
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    uint64_t v24 = &v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
    for (uint64_t i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v29.__r_.__value_.__r.__words[i + 2]) < 0) {
        operator delete(*(void **)((char *)&v28 + i * 8 + 24));
      }
    }
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
}

void sub_192A0692C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,char *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  a31 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  uint64_t v38 = 0;
  uint64_t v39 = v36 - 112;
  while (1)
  {
    if (*(char *)(v39 + v38 + 47) < 0) {
      operator delete(*(void **)(v39 + v38 + 24));
    }
    v38 -= 24;
    if (v38 == -48)
    {
      if (a20 < 0) {
        operator delete(__p);
      }
      if (a28 < 0) {
        operator delete(a23);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t Espresso::generic_pool_kernel::supports_weight_key()
{
  return 0;
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int &,int &,int &,int &,char const*>(int a1, int a2, int a3, int a4, int a5, const char *a6)
{
}

void Espresso::generic_softmax_kernel::build_grads_for_inputs(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  *(void *)&long long v48 = *MEMORY[0x1E4F143B8];
  long long v3 = *(uint64_t **)(a3 + 16);
  std::string::size_type v4 = *v3;
  if (v3[1] == *v3) {
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("at least one input needed for softmax");
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), *v3))
  {
    uint64_t v8 = *(long long ***)(a3 + 8);
    long long v9 = *v8;
    uint64_t v10 = (char *)v8[1] - (char *)*v8;
    if (v10 != 24) {
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("softmax loss gradient: invalid number of output grad: %zu != 1", 0xAAAAAAAAAAAAAAABLL * (v10 >> 3));
    }
    if (a1[304])
    {
      long long v11 = *(uint64_t **)(a3 + 16);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1] - *v11;
      if (v13 != 48) {
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("softmax loss gradient: invalid number of inputs: %zu != 2", 0xAAAAAAAAAAAAAAABLL * (v13 >> 3));
      }
      unint64_t v14 = **(long long ***)(a3 + 24);
      if (*((char *)v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)v14, *((void *)v14 + 1));
      }
      else
      {
        long long v15 = *v14;
        v45.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v15;
      }
      if (*(char *)(v12 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(v12 + 24), *(void *)(v12 + 32));
      }
      else
      {
        long long v22 = *(_OWORD *)(v12 + 24);
        v46.__r_.__value_.__r.__words[2] = *(void *)(v12 + 40);
        *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v22;
      }
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v23 = *v9;
        v47.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      }
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      long long v40 = 0;
      std::string __p = &v38;
      char v34 = 0;
      uint64_t v38 = (std::string *)operator new(0x48uLL);
      uint64_t v39 = v38;
      long long v40 = v38 + 3;
      uint64_t v24 = 0;
      uint64_t v39 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v40, (long long *)&v45, &v48, v38);
      do
      {
        if (SHIBYTE(v47.__r_.__value_.__r.__words[v24 + 2]) < 0) {
          operator delete(*(void **)((char *)&v47.__r_.__value_.__l.__data_ + v24 * 8));
        }
        v24 -= 3;
      }
      while (v24 != -9);
      Espresso::blob_grad_contrib_name((uint64_t)&v45, v4, a3);
      std::string::basic_string[abi:ne180100]<0>(&__p, "softmax_loss_grad");
      uint64_t v25 = *(void *)a3;
      uint64_t v26 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 320))(a1);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v30, (uint64_t)v38, (uint64_t)v39, 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)v38) >> 3));
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v43, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
      }
      else {
        std::string v43 = v45;
      }
      uint64_t v27 = 0;
      std::string v28 = 0;
      std::string v29 = 0;
      long long v41 = &v27;
      char v42 = 0;
      uint64_t v27 = (std::string *)operator new(0x18uLL);
      std::string v28 = v27;
      std::string v29 = v27 + 1;
      std::string v28 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v29, (long long *)&v43, (long long *)&v44, v27);
      Espresso::sequential_builder::add<Espresso::softmax_params>(&v36, a2, (uint64_t)&__p, v25, v26, v30, v31, (uint64_t *)&v27);
      if (v37) {
        nitro::nitro_function::nitro_function(v37);
      }
      long long v41 = &v27;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      if (v35 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
    }
    else
    {
      if (a1[306]) {
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("softmax gradient with is_log_softmax");
      }
      if (a1[307])
      {
        unint64_t v16 = Espresso::sequential_builder::blob_shape((Espresso::sequential_builder *)a2, **(void **)(a3 + 16));
        int v17 = *((_DWORD *)v16 + 5);
        if (*((_DWORD *)v16 + 4) == 1) {
          int v18 = 4;
        }
        else {
          int v18 = 5;
        }
        if (v17 == -1) {
          int v17 = v18;
        }
        int v19 = v17 - 1;
        char v20 = a2;
        uint64_t v21 = (uint64_t *)a3;
      }
      else
      {
        char v20 = a2;
        uint64_t v21 = (uint64_t *)a3;
        int v19 = -1;
      }
      Espresso::build_softmax_grad(v20, v21, v19);
    }
  }
}

void sub_192A06ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  a28 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 121) < 0) {
    operator delete(*(void **)(v33 - 144));
  }
  std::string __p = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void Espresso::build_softmax_grad(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (const void **)*a2;
  uint64_t v7 = *(long long **)a2[1];
  uint64_t v8 = *(long long **)a2[3];
  std::string::size_type v9 = *(void *)a2[2];
  v72[2] = 897988541;
  char v73 = 0;
  int v75 = 0;
  int v74 = 0;
  v72[0] = 1;
  v72[1] = 1065353216;
  if (*((char *)v6 + 23) >= 0) {
    size_t v10 = *((unsigned __int8 *)v6 + 23);
  }
  else {
    size_t v10 = (size_t)v6[1];
  }
  long long v11 = &v71;
  std::string::basic_string[abi:ne180100]((uint64_t)&v71, v10 + 4);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v11 = (std::string *)v71.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    if (*((char *)v6 + 23) >= 0) {
      uint64_t v12 = v6;
    }
    else {
      uint64_t v12 = *v6;
    }
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "/mul");
  std::string::basic_string[abi:ne180100]<0>(&v82, "elementwise");
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)v7, *((void *)v7 + 1));
  }
  else
  {
    long long v13 = *v7;
    v87.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v13;
  }
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v88, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v14 = *v8;
    *(void *)std::string v89 = *((void *)v8 + 2);
    long long v88 = v14;
  }
  std::string::size_type v66 = 0;
  std::string v67 = 0;
  long long v68 = 0;
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
  v80.__r_.__value_.__s.__data_[8] = 0;
  std::string::size_type v66 = (std::string *)operator new(0x30uLL);
  std::string v67 = v66;
  long long v68 = v66 + 2;
  std::string v67 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v68, (long long *)&v87, (long long *)&v89[8], v66);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v80, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
  }
  else {
    std::string v80 = v71;
  }
  uint64_t v63 = 0;
  long long v64 = 0;
  unint64_t v65 = 0;
  uint64_t v57 = (uint64_t)&v63;
  LOBYTE(v58) = 0;
  uint64_t v63 = (std::string *)operator new(0x18uLL);
  long long v64 = v63;
  unint64_t v65 = v63 + 1;
  long long v64 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v65, (long long *)&v80, (long long *)&v81, v63);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v69, a1, (uint64_t)&v82, (uint64_t)&v71, (uint64_t)v72, (uint64_t)v66, (uint64_t)v67, (uint64_t *)&v63);
  if (v70) {
    nitro::nitro_function::nitro_function(v70);
  }
  uint64_t v57 = (uint64_t)&v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    if ((char)v89[i + 7] < 0) {
      operator delete(*(void **)((char *)&v87 + i + 24));
    }
  }
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  uint64_t v57 = 0x358637BD00000000;
  uint64_t v58 = 0x100000007;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  unint64_t v61 = 0xFFFFFFFF00000000;
  if (a3 < 0)
  {
    char v16 = 0;
    LODWORD(v58) = 4;
  }
  else
  {
    HIDWORD(v61) = a3;
    char v16 = 1;
  }
  char v62 = v16;
  int v17 = (char *)*a2;
  if (*(char *)(*a2 + 23) >= 0) {
    size_t v18 = *(unsigned __int8 *)(*a2 + 23);
  }
  else {
    size_t v18 = *(void *)(*a2 + 8);
  }
  int v19 = &v56;
  std::string::basic_string[abi:ne180100]((uint64_t)&v56, v18 + 7);
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v19 = (std::string *)v56.__r_.__value_.__r.__words[0];
  }
  if (v18)
  {
    if (v17[23] >= 0) {
      char v20 = v17;
    }
    else {
      char v20 = *(char **)v17;
    }
    memmove(v19, v20, v18);
  }
  strcpy((char *)v19 + v18, "/reduce");
  std::string::basic_string[abi:ne180100]<0>(&v87, "reduce");
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v82, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
  }
  else {
    std::string v82 = v71;
  }
  uint64_t v51 = 0;
  long long v52 = 0;
  long long v53 = 0;
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  v80.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v51 = (std::string *)operator new(0x18uLL);
  long long v52 = v51;
  long long v53 = v51 + 1;
  long long v52 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v53, (long long *)&v82, &v83, v51);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v80, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  }
  else {
    std::string v80 = v56;
  }
  long long v48 = 0;
  uint64_t v49 = 0;
  long long v50 = 0;
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  v47.__r_.__value_.__s.__data_[8] = 0;
  long long v48 = (std::string *)operator new(0x18uLL);
  uint64_t v49 = v48;
  long long v50 = v48 + 1;
  uint64_t v49 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v50, (long long *)&v80, (long long *)&v81, v48);
  Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v54, a1, (uint64_t)&v87, (uint64_t)&v56, (uint64_t)&v57, (uint64_t)v51, (uint64_t)v52, (uint64_t *)&v48);
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  Espresso::blob_grad_contrib_name((uint64_t)&v47, v9, (uint64_t)a2);
  v87.__r_.__value_.__r.__words[2] = 897988541;
  LOBYTE(v88) = 0;
  *(void *)&v89[4] = 0;
  v87.__r_.__value_.__r.__words[0] = 33;
  v87.__r_.__value_.__l.__size_ = 1065353216;
  uint64_t v21 = (char *)*a2;
  if (*(char *)(*a2 + 23) >= 0) {
    size_t v22 = *(unsigned __int8 *)(*a2 + 23);
  }
  else {
    size_t v22 = *(void *)(*a2 + 8);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v22 + 4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v22)
  {
    if (v21[23] >= 0) {
      uint64_t v24 = v21;
    }
    else {
      uint64_t v24 = *(char **)v21;
    }
    memmove(p_p, v24, v22);
  }
  strcpy((char *)p_p + v22, "/sub");
  std::string::basic_string[abi:ne180100]<0>(&v80, "elementwise");
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)v7, *((void *)v7 + 1));
  }
  else
  {
    long long v25 = *v7;
    v82.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v25;
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v83, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v83 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
    *(void *)long long v84 = *((void *)&v56.__r_.__value_.__l + 2);
  }
  long long v41 = 0;
  char v42 = 0;
  std::string v43 = 0;
  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  v85.__r_.__value_.__s.__data_[8] = 0;
  long long v41 = (std::string *)operator new(0x30uLL);
  char v42 = v41;
  std::string v43 = v41 + 2;
  char v42 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v43, (long long *)&v82, (long long *)&v84[8], v41);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v85, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v85 = __p;
  }
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  long long v40 = 0;
  v78.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  v78.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v38 = (std::string *)operator new(0x18uLL);
  uint64_t v39 = v38;
  long long v40 = v38 + 1;
  uint64_t v39 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v40, (long long *)&v85, (long long *)&v86, v38);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v44, a1, (uint64_t)&v80, (uint64_t)&__p, (uint64_t)&v87, (uint64_t)v41, (uint64_t)v42, (uint64_t *)&v38);
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  v78.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
  for (uint64_t j = 0; j != -48; j -= 24)
  {
    if ((char)v84[j + 7] < 0) {
      operator delete(*(void **)((char *)&v82 + j + 24));
    }
  }
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  v82.__r_.__value_.__r.__words[2] = 897988541;
  LOBYTE(v83) = 0;
  *(void *)&v84[4] = 0;
  v82.__r_.__value_.__r.__words[0] = 1;
  v82.__r_.__value_.__l.__size_ = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&v85, "elementwise");
  uint64_t v27 = *a2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v80, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v80 = __p;
  }
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v28 = *v8;
    v81.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v28;
  }
  uint64_t v33 = 0;
  char v34 = 0;
  char v35 = 0;
  v78.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  v78.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v33 = (std::string *)operator new(0x30uLL);
  char v34 = v33;
  char v35 = v33 + 2;
  char v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v35, (long long *)&v80, (long long *)&v82, v33);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v78, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
  }
  else {
    std::string v78 = v47;
  }
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  std::string::size_type v76 = &v30;
  char v77 = 0;
  uint64_t v30 = (std::string *)operator new(0x18uLL);
  uint64_t v31 = v30;
  uint64_t v32 = v30 + 1;
  uint64_t v31 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v32, (long long *)&v78, (long long *)&v79, v30);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v36, a1, (uint64_t)&v85, v27, (uint64_t)&v82, (uint64_t)v33, (uint64_t)v34, (uint64_t *)&v30);
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  std::string::size_type v76 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  v78.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  for (uint64_t k = 0; k != -6; k -= 3)
  {
    if (SHIBYTE(v81.__r_.__value_.__r.__words[k + 2]) < 0) {
      operator delete(*(void **)((char *)&v80 + k * 8 + 24));
    }
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
}

void sub_192A07950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a72 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  uint64_t v74 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x200] + v74 + 47) < 0) {
      operator delete(*(void **)((char *)&STACK[0x200] + v74 + 24));
    }
    v74 -= 24;
    if (v74 == -48)
    {
      if (*(char *)(v72 - 169) < 0) {
        operator delete(*(void **)(v72 - 192));
      }
      if (a31 < 0) {
        operator delete(__p);
      }
      if (a37 < 0) {
        operator delete(a32);
      }
      if (a51 < 0) {
        operator delete(a46);
      }
      if (a71 < 0) {
        operator delete(a66);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_192A07C74()
{
}

float Espresso::generic_softmax_kernel::estimated_compute_resources(uint64_t a1, long long **a2, int a3)
{
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 64))(&v29);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  float v7 = 0.0;
  if (*a2 != v6)
  {
    uint64_t v8 = a3 - 1;
    do
    {
      long long v9 = *v5;
      long long v10 = v5[1];
      uint64_t v25 = *((void *)v5 + 4);
      long long v23 = v9;
      long long v24 = v10;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      std::string __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
      uint64_t v11 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v23);
      if (v8 > 0xC) {
        uint64_t v12 = 4;
      }
      else {
        uint64_t v12 = qword_192DF6AD8[v8];
      }
      if (__p)
      {
        uint64_t v27 = __p;
        operator delete(__p);
      }
      float v7 = v7 + (float)((float)(unint64_t)(v12 * v11) * 0.00000095367);
      v5 += 4;
    }
    while (v5 != v6);
  }
  long long v13 = v29;
  long long v14 = v30;
  float v15 = 0.0;
  if (v29 != v30)
  {
    uint64_t v16 = a3 - 1;
    float v17 = 0.0;
    do
    {
      long long v18 = *v13;
      long long v19 = v13[1];
      uint64_t v25 = *((void *)v13 + 4);
      long long v23 = v18;
      long long v24 = v19;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      std::string __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v13 + 5), *((void *)v13 + 6), (uint64_t)(*((void *)v13 + 6) - *((void *)v13 + 5)) >> 2);
      uint64_t v20 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v23);
      if (v16 > 0xC) {
        uint64_t v21 = 4;
      }
      else {
        uint64_t v21 = qword_192DF6AD8[v16];
      }
      if (__p)
      {
        uint64_t v27 = __p;
        operator delete(__p);
      }
      float v17 = v17 + (float)((float)(unint64_t)(v21 * v20) * 0.00000095367);
      v13 += 4;
    }
    while (v13 != v14);
    float v15 = (double)(4 * v20) * 0.000000001;
  }
  *(void *)&long long v23 = &v29;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  return v15;
}

void sub_192A07E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  a9 = (void **)&a18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::generic_concat_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, char **a3)
{
  *(void *)&long long v38 = *MEMORY[0x1E4F143B8];
  long long v33 = xmmword_192DCA6B0;
  uint64_t v34 = 0x100000000;
  long long v3 = (unsigned __int8 **)a3[2];
  std::string::size_type v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 != v5)
  {
    unsigned int v8 = 0;
    do
    {
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3[5], (uint64_t)v4))
      {
        uint64_t v9 = a2[10] + 136;
        v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
        *(void *)((char *)&v33 + 4) = __PAIR64__(*(_DWORD *)(*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, v4, (long long **)&v32)+ 5)+ 16)+ v8, v8);
        Espresso::blob_grad_contrib_name((uint64_t)&v32, (std::string::size_type)v4, (uint64_t)a3);
        std::string::basic_string[abi:ne180100]<0>(v28, "slice");
        long long v10 = *a3;
        if ((*a3)[23] >= 0) {
          size_t v11 = (*a3)[23];
        }
        else {
          size_t v11 = *((void *)*a3 + 1);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v25, v11 + 1);
        if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v12 = &v25;
        }
        else {
          uint64_t v12 = (std::string *)v25.__r_.__value_.__r.__words[0];
        }
        if (v11)
        {
          if (v10[23] >= 0) {
            long long v13 = v10;
          }
          else {
            long long v13 = *(char **)v10;
          }
          memmove(v12, v13, v11);
        }
        *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 58;
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v14 = &v32;
        }
        else {
          long long v14 = (std::string *)v32.__r_.__value_.__r.__words[0];
        }
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v32.__r_.__value_.__l.__size_;
        }
        uint64_t v16 = std::string::append(&v25, (const std::string::value_type *)v14, size);
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        std::string::size_type v27 = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        long long v18 = (uint64_t *)a3[1];
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v22 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, *v18, v18[1], 0xAAAAAAAAAAAAAAABLL * ((v18[1] - *v18) >> 3));
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v37, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
        }
        else {
          std::string v37 = v32;
        }
        long long v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        char v35 = &v19;
        char v36 = 0;
        long long v19 = (std::string *)operator new(0x18uLL);
        uint64_t v20 = v19;
        uint64_t v21 = v19 + 1;
        uint64_t v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v21, (long long *)&v37, &v38, v19);
        Espresso::sequential_builder::add<Espresso::slice_params_t>(&v30, a2, (uint64_t)v28, (uint64_t)__p, (uint64_t)&v33, v22, v23, (uint64_t *)&v19);
        if (v31) {
          nitro::nitro_function::nitro_function(v31);
        }
        char v35 = &v19;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
        v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
        if (SHIBYTE(v27) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
        if (v29 < 0) {
          operator delete(v28[0]);
        }
        unsigned int v8 = DWORD2(v33);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v32.__r_.__value_.__l.__data_);
        }
      }
      v4 += 24;
    }
    while (v4 != v5);
  }
}

void sub_192A08194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  *(void *)(v42 - 128) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 128));
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(a1);
}

float Espresso::generic_upsample_kernel::estimated_compute_resources(uint64_t a1, long long **a2, int a3)
{
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 64))(&v33);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 320))(a1);
  float v7 = *a2;
  unsigned int v8 = a2[1];
  float v9 = 0.0;
  float v10 = 0.0;
  if (*a2 != v8)
  {
    int v11 = *(_DWORD *)(v6 + 8);
    int v26 = *(_DWORD *)(v6 + 4);
    uint64_t v12 = a3 - 1;
    do
    {
      long long v13 = *v7;
      long long v14 = v7[1];
      uint64_t v29 = *((void *)v7 + 4);
      long long v27 = v13;
      long long v28 = v14;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      std::string __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v7 + 5), *((void *)v7 + 6), (uint64_t)(*((void *)v7 + 6) - *((void *)v7 + 5)) >> 2);
      uint64_t v15 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v27);
      if (v12 > 0xC) {
        uint64_t v16 = 4;
      }
      else {
        uint64_t v16 = qword_192DF6AD8[v12];
      }
      if (__p)
      {
        uint64_t v31 = __p;
        operator delete(__p);
      }
      float v9 = v9 + (float)((float)(unint64_t)(v16 * v15) * 0.00000095367);
      v7 += 4;
    }
    while (v7 != v8);
    float v10 = (double)(v15 * v11 * (uint64_t)v26) * 0.000000001;
  }
  long long v17 = v33;
  long long v18 = v34;
  if (v33 != v34)
  {
    uint64_t v19 = a3 - 1;
    float v20 = 0.0;
    do
    {
      long long v21 = *v17;
      long long v22 = v17[1];
      uint64_t v29 = *((void *)v17 + 4);
      long long v27 = v21;
      long long v28 = v22;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      std::string __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v17 + 5), *((void *)v17 + 6), (uint64_t)(*((void *)v17 + 6) - *((void *)v17 + 5)) >> 2);
      uint64_t v23 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v27);
      if (v19 > 0xC) {
        uint64_t v24 = 4;
      }
      else {
        uint64_t v24 = qword_192DF6AD8[v19];
      }
      if (__p)
      {
        uint64_t v31 = __p;
        operator delete(__p);
      }
      float v20 = v20 + (float)((float)(unint64_t)(v24 * v23) * 0.00000095367);
      v17 += 4;
    }
    while (v17 != v18);
  }
  *(void *)&long long v27 = &v33;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  return v10;
}

void sub_192A084B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  a11 = (void **)&a20;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void Espresso::generic_upsample_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v33 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = *((void *)*a2 + 4);
  long long v7 = (*a2)[1];
  long long v20 = **a2;
  long long v21 = v7;
  uint64_t v22 = v6;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v23, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  *((void *)&v14 + 1) = *((void *)&v20 + 1);
  long long v15 = v21;
  uint64_t v16 = v22;
  std::string __p = 0;
  long long v18 = 0;
  uint64_t v19 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v23, (uint64_t)v24, (v24 - (unsigned char *)v23) >> 2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 320))(a1);
  if (*(unsigned char *)(v8 + 24))
  {
    if (*(_DWORD *)(v8 + 20))
    {
      long long v13 = "generic_upsample_kernel: fractional scaling factor cannot be used in legacy mode";
    }
    else
    {
      *(int32x2_t *)&long long v14 = vcvt_s32_f32(vrndm_f32(vmul_f32(*(float32x2_t *)(v8 + 28), vcvt_f32_s32(*(int32x2_t *)&v20))));
      int v10 = DWORD1(v14);
      if (v14) {
        BOOL v11 = DWORD1(v14) == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11)
      {
        long long v13 = "generic_upsample_kernel: fractional scaling factor is too small, output shape is 0";
      }
      else
      {
        if (*(unsigned char *)(v8 + 36)) {
          goto LABEL_12;
        }
        if (*(_DWORD *)(v8 + 16))
        {
          long long v13 = "generic_upsample_kernel: recompute_fractional_scale_factors == false not supported with align_corners";
        }
        else
        {
          if (*(_DWORD *)(v8 + 12) <= 1u) {
            goto LABEL_12;
          }
          long long v13 = "generic_upsample_kernel: recompute_fractional_scale_factors == false only supported with nearest and linear mode.";
        }
      }
    }
LABEL_27:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v13);
  }
  int32x2_t v9 = vmul_s32(*(int32x2_t *)&v20, *(int32x2_t *)(v8 + 4));
  *(int32x2_t *)&long long v14 = v9;
  if ((*(unsigned char *)(v8 + 36) & 1) == 0)
  {
    long long v13 = "generic_upsample_kernel: Found recompute_fractional_scale_factors == false without use_fractional_scale_factors";
    goto LABEL_27;
  }
  int v10 = v9.i32[1];
LABEL_12:
  if (DWORD1(v15) == 1 && v10 >= 2) {
    DWORD1(v15) = 2;
  }
  v28[0] = v14;
  v28[1] = v15;
  uint64_t v29 = v16;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v30, __p, (uint64_t)v18, (v18 - (unsigned char *)__p) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v26 = a3;
  char v27 = 0;
  uint64_t v12 = (char *)operator new(0x40uLL);
  *a3 = v12;
  a3[1] = v12;
  a3[2] = v12 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v28, &v33, (uint64_t)v12);
  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }
  if (__p)
  {
    long long v18 = __p;
    operator delete(__p);
  }
  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }
}

void sub_192A08740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void **a25)
{
  *(void *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a25);
  uint64_t v29 = *(void **)(v27 - 72);
  if (v29)
  {
    *(void *)(v27 - 64) = v29;
    operator delete(v29);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_elementwise_kernel::build_grads_for_inputs(uint64_t a1, Espresso::sequential_builder *a2, uint64_t a3)
{
  *(void *)&long long v225 = *MEMORY[0x1E4F143B8];
  long long v3 = *(uint64_t **)(a3 + 16);
  uint64_t v4 = *v3;
  if (*v3 == v3[1] || (v6 = *(uint64_t **)(a3 + 8), uint64_t v7 = *v6, *v6 == v6[1])) {
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("No input given to elementwise layer.");
  }
  int v10 = (int *)(a1 + 280);
  uint64_t v11 = *(unsigned int *)(a1 + 280);
  if ((int)v11 > 101)
  {
    if ((v11 - 114) >= 2)
    {
      if (v11 == 102)
      {
        std::string::basic_string[abi:ne180100]<0>(v194, "elementwise div");
        Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 16) + 8) - **(void **)(a3 + 16)) >> 3), 2uLL, (uint64_t)v194, 1);
        Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 3), 1uLL, (uint64_t)v194, 0);
        uint64_t v28 = **(void **)(a3 + 16) + 24;
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), **(void **)(a3 + 16)))
        {
          v207[0] = &unk_1EE37C8A8;
          v207[1] = v7;
          v207[2] = v28;
          v207[3] = v207;
          Espresso::maybe_broadcasted_elementwise_grad(a2, a3, 0, (uint64_t)v207);
          std::__function::__value_func<void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__value_func[abi:ne180100](v207);
        }
        if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v28))goto LABEL_100; {
        int v206 = 0;
        }
        uint64_t v29 = operator new(0x20uLL);
        void *v29 = &unk_1EE37C900;
        v29[1] = v7;
        v29[2] = a3;
        v29[3] = v28;
        int v206 = v29;
        Espresso::maybe_broadcasted_elementwise_grad(a2, a3, 1uLL, (uint64_t)v205);
        uint64_t v30 = v205;
LABEL_47:
        std::__function::__value_func<void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__value_func[abi:ne180100](v30);
LABEL_100:
        if ((v194[23] & 0x80000000) == 0) {
          return;
        }
        long long v53 = *(void **)v194;
        goto LABEL_341;
      }
      if (v11 != 119) {
        goto LABEL_61;
      }
    }
    goto LABEL_12;
  }
  if (v11 > 0x21) {
    goto LABEL_48;
  }
  if (((1 << v11) & 0xF00380C) != 0)
  {
LABEL_12:
    std::to_string((std::string *)v194, v11);
    long long v15 = std::string::insert((std::string *)v194, 0, "elementwise op ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    std::string::size_type v198 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((v194[23] & 0x80000000) != 0) {
      operator delete(*(void **)v194);
    }
    Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 16) + 8) - **(void **)(a3 + 16)) >> 3), 1uLL, (uint64_t)__p, 1);
    Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 3), 1uLL, (uint64_t)__p, 0);
    if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), **(void **)(a3 + 16)))goto LABEL_339; {
    std::string::size_type v17 = **(void **)(a3 + 16);
    }
    long long v18 = **(long long ***)(a3 + 24);
    Espresso::blob_grad_contrib_name((uint64_t)&__s, v17, a3);
    *(void *)uint64_t v194 = 0;
    *(void *)&v194[8] = 1065353216;
    *(void *)&v194[16] = 897988541;
    v194[24] = 0;
    *(void *)&v195[12] = 0;
    int v19 = *v10;
    if (*v10 <= 23)
    {
      switch(v19)
      {
        case 2:
          std::string::basic_string[abi:ne180100]<0>(&v221, "copy");
          uint64_t v25 = *(void *)a3;
          LODWORD(v217.__r_.__value_.__l.__data_) = 0;
          if (*(char *)(v7 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v216, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
          }
          else
          {
            long long v26 = *(_OWORD *)v7;
            *(void *)&v216[16] = *(void *)(v7 + 16);
            *(_OWORD *)id v216 = v26;
          }
          std::string::size_type v117 = 0;
          int v118 = 0;
          long long v119 = 0;
          v224.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
          v224.__r_.__value_.__s.__data_[8] = 0;
          std::string::size_type v117 = (std::string *)operator new(0x18uLL);
          int v118 = v117;
          long long v119 = v117 + 1;
          int v118 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v119, (long long *)v216, (long long *)&v216[24], v117);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v224, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            std::string v224 = __s;
          }
          long long v114 = 0;
          long long v115 = 0;
          uint64_t v116 = 0;
          v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
          v219.__r_.__value_.__s.__data_[8] = 0;
          long long v114 = (std::string *)operator new(0x18uLL);
          long long v115 = v114;
          uint64_t v116 = v114 + 1;
          long long v115 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v116, (long long *)&v224, &v225, v114);
          Espresso::sequential_builder::add<Espresso::copy_params_t>(&v120, (uint64_t *)a2, (uint64_t)&v221, v25, (uint64_t)&v217, (uint64_t)v117, (uint64_t)v118, (uint64_t *)&v114);
          if (v121) {
            nitro::nitro_function::nitro_function(v121);
          }
          v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
          if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v224.__r_.__value_.__l.__data_);
          }
          std::string v81 = &v117;
          goto LABEL_206;
        case 3:
          long long v56 = *((_OWORD *)v10 + 1);
          *(_OWORD *)uint64_t v194 = *(_OWORD *)v10;
          *(_OWORD *)&v194[16] = v56;
          *(_OWORD *)uint64_t v195 = *((_OWORD *)v10 + 2);
          *(_DWORD *)&v195[16] = v10[12];
          *(_DWORD *)&v194[12] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v221, "elementwise");
          uint64_t v57 = *(void *)a3;
          if (*(char *)(v7 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v216, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
          }
          else
          {
            long long v58 = *(_OWORD *)v7;
            *(void *)&v216[16] = *(void *)(v7 + 16);
            *(_OWORD *)id v216 = v58;
          }
          std::string::size_type v125 = 0;
          uint64_t v126 = 0;
          std::string v127 = 0;
          v224.__r_.__value_.__r.__words[0] = (std::string::size_type)&v125;
          v224.__r_.__value_.__s.__data_[8] = 0;
          std::string::size_type v125 = (std::string *)operator new(0x18uLL);
          uint64_t v126 = v125;
          std::string v127 = v125 + 1;
          uint64_t v126 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v127, (long long *)v216, (long long *)&v216[24], v125);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v224, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            std::string v224 = __s;
          }
          std::string::size_type v122 = 0;
          unsigned __int8 v123 = 0;
          std::string::size_type v124 = 0;
          v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
          v219.__r_.__value_.__s.__data_[8] = 0;
          std::string::size_type v122 = (std::string *)operator new(0x18uLL);
          unsigned __int8 v123 = v122;
          std::string::size_type v124 = v122 + 1;
          unsigned __int8 v123 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v124, (long long *)&v224, &v225, v122);
          Espresso::sequential_builder::add<Espresso::elementwise_params>(&v128, (uint64_t *)a2, (uint64_t)&v221, v57, (uint64_t)v194, (uint64_t)v125, (uint64_t)v126, (uint64_t *)&v122);
          if (v129) {
            nitro::nitro_function::nitro_function(v129);
          }
          v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
          if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v224.__r_.__value_.__l.__data_);
          }
          std::string v81 = &v125;
LABEL_206:
          v224.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v224);
          if ((v216[23] & 0x80000000) != 0) {
            operator delete(*(void **)v216);
          }
          if ((SHIBYTE(v221.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_337;
          }
          std::string v80 = (void *)v221.__r_.__value_.__r.__words[0];
          break;
        case 11:
          if (*(char *)(v17 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v17, *(void *)(v17 + 8));
          }
          else
          {
            long long v59 = *(_OWORD *)v17;
            v104.__r_.__value_.__r.__words[2] = *(void *)(v17 + 16);
            *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v59;
          }
          Espresso::build_grads_for_pow_input((uint64_t)&v104, v7, (uint64_t)&__s, (uint64_t *)a2, (uint64_t *)a3, 0.5);
          if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_337;
          }
          std::string v80 = (void *)v104.__r_.__value_.__r.__words[0];
          break;
        case 12:
          if (*(char *)(v17 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)v17, *(void *)(v17 + 8));
          }
          else
          {
            long long v55 = *(_OWORD *)v17;
            v103.__r_.__value_.__r.__words[2] = *(void *)(v17 + 16);
            *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v55;
          }
          Espresso::build_grads_for_pow_input((uint64_t)&v103, v7, (uint64_t)&__s, (uint64_t *)a2, (uint64_t *)a3, -0.5);
          if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_337;
          }
          std::string v80 = (void *)v103.__r_.__value_.__r.__words[0];
          break;
        case 13:
          if (*(char *)(v17 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v17, *(void *)(v17 + 8));
          }
          else
          {
            long long v54 = *(_OWORD *)v17;
            v113.__r_.__value_.__r.__words[2] = *(void *)(v17 + 16);
            *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v54;
          }
          Espresso::build_grads_for_pow_input((uint64_t)&v113, v7, (uint64_t)&__s, (uint64_t *)a2, (uint64_t *)a3, *(float *)(a1 + 288));
          if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_337;
          }
          std::string v80 = (void *)v113.__r_.__value_.__r.__words[0];
          break;
        default:
          goto LABEL_337;
      }
      goto LABEL_336;
    }
    if (v19 <= 113)
    {
      switch(v19)
      {
        case 24:
          uint64_t v20 = *(void *)a3;
          if (*(char *)(*(void *)a3 + 23) >= 0) {
            size_t v21 = *(unsigned __int8 *)(*(void *)a3 + 23);
          }
          else {
            size_t v21 = *(void *)(*(void *)a3 + 8);
          }
          uint64_t v22 = &v224;
          std::string::basic_string[abi:ne180100]((uint64_t)&v224, v21 + 5);
          if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v22 = (std::string *)v224.__r_.__value_.__r.__words[0];
          }
          if (v21)
          {
            if (*(char *)(v20 + 23) >= 0) {
              uint64_t v23 = (const void *)v20;
            }
            else {
              uint64_t v23 = *(const void **)v20;
            }
            memmove(v22, v23, v21);
          }
          strcpy((char *)v22 + v21, ":sign");
          v221.__r_.__value_.__r.__words[2] = 897988541;
          LOBYTE(v222) = 0;
          *(void *)&v223[4] = 0;
          v221.__r_.__value_.__r.__words[0] = 38;
          v221.__r_.__value_.__l.__size_ = 1065353216;
          std::string::basic_string[abi:ne180100]<0>(v216, "elementwise");
          if (*(char *)(v17 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)v17, *(void *)(v17 + 8));
          }
          else
          {
            long long v24 = *(_OWORD *)v17;
            v219.__r_.__value_.__r.__words[2] = *(void *)(v17 + 16);
            *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v24;
          }
          uint64_t v174 = 0;
          uint64_t v173 = 0;
          int v175 = 0;
          v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v173;
          v217.__r_.__value_.__s.__data_[8] = 0;
          uint64_t v173 = (std::string *)operator new(0x18uLL);
          uint64_t v174 = v173;
          int v175 = v173 + 1;
          uint64_t v174 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v175, (long long *)&v219, (long long *)&v220, v173);
          if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v217, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
          }
          else {
            std::string v217 = v224;
          }
          int v171 = 0;
          int v170 = 0;
          char v172 = 0;
          uint64_t v199 = &v170;
          char v200 = 0;
          int v170 = (std::string *)operator new(0x18uLL);
          int v171 = v170;
          char v172 = v170 + 1;
          int v171 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v172, (long long *)&v217, (long long *)&v218, v170);
          Espresso::sequential_builder::add<Espresso::elementwise_params>(&v176, (uint64_t *)a2, (uint64_t)v216, (uint64_t)&v224, (uint64_t)&v221, (uint64_t)v173, (uint64_t)v174, (uint64_t *)&v170);
          if (v177) {
            nitro::nitro_function::nitro_function(v177);
          }
          uint64_t v199 = &v170;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v199);
          if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v217.__r_.__value_.__l.__data_);
          }
          v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v173;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
          if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v219.__r_.__value_.__l.__data_);
          }
          if ((v216[23] & 0x80000000) != 0) {
            operator delete(*(void **)v216);
          }
          *(_DWORD *)uint64_t v194 = 1;
          std::string::basic_string[abi:ne180100]<0>(&v219, "elementwise");
          uint64_t v86 = *(void *)a3;
          if (*(char *)(v7 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v216, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
          }
          else
          {
            long long v87 = *(_OWORD *)v7;
            *(void *)&v216[16] = *(void *)(v7 + 16);
            *(_OWORD *)id v216 = v87;
          }
          if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external((std::string *)&v216[24], v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
          }
          else {
            *(std::string *)&v216[24] = v224;
          }
          int v166 = 0;
          uint64_t v165 = 0;
          uint64_t v167 = 0;
          v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          v217.__r_.__value_.__s.__data_[8] = 0;
          uint64_t v165 = (std::string *)operator new(0x30uLL);
          int v166 = v165;
          uint64_t v167 = v165 + 2;
          int v166 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v167, (long long *)v216, (long long *)&v217, v165);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v217, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            std::string v217 = __s;
          }
          uint64_t v163 = 0;
          int v162 = 0;
          int v164 = 0;
          uint64_t v199 = &v162;
          char v200 = 0;
          int v162 = (std::string *)operator new(0x18uLL);
          uint64_t v163 = v162;
          int v164 = v162 + 1;
          uint64_t v163 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v164, (long long *)&v217, (long long *)&v218, v162);
          Espresso::sequential_builder::add<Espresso::elementwise_params>(&v168, (uint64_t *)a2, (uint64_t)&v219, v86, (uint64_t)v194, (uint64_t)v165, (uint64_t)v166, (uint64_t *)&v162);
          if (v169) {
            nitro::nitro_function::nitro_function(v169);
          }
          uint64_t v199 = &v162;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v199);
          if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v217.__r_.__value_.__l.__data_);
          }
          v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
          for (uint64_t i = 0; i != -48; i -= 24)
          {
            if ((char)v216[i + 47] < 0) {
              operator delete(*(void **)&v216[i + 24]);
            }
          }
          goto LABEL_332;
        case 25:
          goto LABEL_36;
        case 26:
          *(_DWORD *)uint64_t v194 = 102;
          std::string::basic_string[abi:ne180100]<0>(v216, "elementwise");
          uint64_t v60 = *(void *)a3;
          if (*(char *)(v7 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v221, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
          }
          else
          {
            long long v61 = *(_OWORD *)v7;
            v221.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
            *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v61;
          }
          if (*(char *)(v17 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v222, *(const std::string::value_type **)v17, *(void *)(v17 + 8));
          }
          else
          {
            long long v82 = *(_OWORD *)v17;
            *(void *)long long v223 = *(void *)(v17 + 16);
            long long v222 = v82;
          }
          long long v190 = 0;
          uint64_t v189 = 0;
          uint64_t v191 = 0;
          v224.__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
          v224.__r_.__value_.__s.__data_[8] = 0;
          uint64_t v189 = (std::string *)operator new(0x30uLL);
          long long v190 = v189;
          uint64_t v191 = v189 + 2;
          long long v190 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v191, (long long *)&v221, (long long *)&v223[8], v189);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v224, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            std::string v224 = __s;
          }
          v187 = 0;
          long long v186 = 0;
          v188 = 0;
          v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
          v219.__r_.__value_.__s.__data_[8] = 0;
          long long v186 = (std::string *)operator new(0x18uLL);
          v187 = v186;
          v188 = v186 + 1;
          v187 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v188, (long long *)&v224, &v225, v186);
          Espresso::sequential_builder::add<Espresso::elementwise_params>(&v192, (uint64_t *)a2, (uint64_t)v216, v60, (uint64_t)v194, (uint64_t)v189, (uint64_t)v190, (uint64_t *)&v186);
          if (v193) {
            nitro::nitro_function::nitro_function(v193);
          }
          v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
          if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v224.__r_.__value_.__l.__data_);
          }
          v224.__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v224);
          for (uint64_t j = 0; j != -48; j -= 24)
          {
            if ((char)v223[j + 7] < 0) {
              operator delete(*(void **)((char *)&v221 + j + 24));
            }
          }
          goto LABEL_250;
        case 27:
          *(_DWORD *)uint64_t v194 = 1;
          std::string::basic_string[abi:ne180100]<0>(v216, "elementwise");
          uint64_t v62 = *(void *)a3;
          if (*(char *)(v7 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v221, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
          }
          else
          {
            long long v63 = *(_OWORD *)v7;
            v221.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
            *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v63;
          }
          if (*((char *)v18 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v222, *(const std::string::value_type **)v18, *((void *)v18 + 1));
          }
          else
          {
            long long v83 = *v18;
            *(void *)long long v223 = *((void *)v18 + 2);
            long long v222 = v83;
          }
          int v182 = 0;
          long long v181 = 0;
          uint64_t v183 = 0;
          v224.__r_.__value_.__r.__words[0] = (std::string::size_type)&v181;
          v224.__r_.__value_.__s.__data_[8] = 0;
          long long v181 = (std::string *)operator new(0x30uLL);
          int v182 = v181;
          uint64_t v183 = v181 + 2;
          int v182 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v183, (long long *)&v221, (long long *)&v223[8], v181);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v224, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          }
          else {
            std::string v224 = __s;
          }
          uint64_t v179 = 0;
          int v178 = 0;
          uint64_t v180 = 0;
          v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v178;
          v219.__r_.__value_.__s.__data_[8] = 0;
          int v178 = (std::string *)operator new(0x18uLL);
          uint64_t v179 = v178;
          uint64_t v180 = v178 + 1;
          uint64_t v179 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v180, (long long *)&v224, &v225, v178);
          Espresso::sequential_builder::add<Espresso::elementwise_params>(&v184, (uint64_t *)a2, (uint64_t)v216, v62, (uint64_t)v194, (uint64_t)v181, (uint64_t)v182, (uint64_t *)&v178);
          if (v185) {
            nitro::nitro_function::nitro_function(v185);
          }
          v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v178;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
          if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v224.__r_.__value_.__l.__data_);
          }
          v224.__r_.__value_.__r.__words[0] = (std::string::size_type)&v181;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v224);
          for (uint64_t k = 0; k != -48; k -= 24)
          {
            if ((char)v223[k + 7] < 0) {
              operator delete(*(void **)((char *)&v221 + k + 24));
            }
          }
LABEL_250:
          if ((v216[23] & 0x80000000) == 0) {
            goto LABEL_337;
          }
          std::string v80 = *(void **)v216;
          break;
        default:
          goto LABEL_337;
      }
      goto LABEL_336;
    }
    switch(v19)
    {
      case 'r':
        uint64_t v66 = *(void *)a3;
        if (*(char *)(*(void *)a3 + 23) >= 0) {
          size_t v67 = *(unsigned __int8 *)(*(void *)a3 + 23);
        }
        else {
          size_t v67 = *(void *)(*(void *)a3 + 8);
        }
        long long v68 = &v224;
        std::string::basic_string[abi:ne180100]((uint64_t)&v224, v67 + 4);
        if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v68 = (std::string *)v224.__r_.__value_.__r.__words[0];
        }
        if (v67)
        {
          if (*(char *)(v66 + 23) >= 0) {
            uint64_t v69 = (const void *)v66;
          }
          else {
            uint64_t v69 = *(const void **)v66;
          }
          memmove(v68, v69, v67);
        }
        strcpy((char *)v68 + v67, ":sin");
        v221.__r_.__value_.__r.__words[2] = 897988541;
        LOBYTE(v222) = 0;
        *(void *)&v223[4] = 0;
        v221.__r_.__value_.__r.__words[0] = 115;
        v221.__r_.__value_.__l.__size_ = 1065353216;
        std::string::basic_string[abi:ne180100]<0>(v216, "elementwise");
        if (*(char *)(v17 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)v17, *(void *)(v17 + 8));
        }
        else
        {
          long long v70 = *(_OWORD *)v17;
          v219.__r_.__value_.__r.__words[2] = *(void *)(v17 + 16);
          *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v70;
        }
        uint64_t v141 = 0;
        uint64_t v142 = 0;
        uint64_t v143 = 0;
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
        v217.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v141 = (std::string *)operator new(0x18uLL);
        uint64_t v142 = v141;
        uint64_t v143 = v141 + 1;
        uint64_t v142 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v143, (long long *)&v219, (long long *)&v220, v141);
        if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v217, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
        }
        else {
          std::string v217 = v224;
        }
        uint64_t v138 = 0;
        uint64_t v139 = 0;
        id v140 = 0;
        uint64_t v199 = &v138;
        char v200 = 0;
        uint64_t v138 = (std::string *)operator new(0x18uLL);
        uint64_t v139 = v138;
        id v140 = v138 + 1;
        uint64_t v139 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v140, (long long *)&v217, (long long *)&v218, v138);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v144, (uint64_t *)a2, (uint64_t)v216, (uint64_t)&v224, (uint64_t)&v221, (uint64_t)v141, (uint64_t)v142, (uint64_t *)&v138);
        if (v145) {
          nitro::nitro_function::nitro_function(v145);
        }
        uint64_t v199 = &v138;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v199);
        if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v217.__r_.__value_.__l.__data_);
        }
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
        if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v219.__r_.__value_.__l.__data_);
        }
        if ((v216[23] & 0x80000000) != 0) {
          operator delete(*(void **)v216);
        }
        *(_DWORD *)uint64_t v194 = 1;
        *(_DWORD *)&v194[8] = -1082130432;
        std::string::basic_string[abi:ne180100]<0>(&v219, "elementwise");
        uint64_t v88 = *(void *)a3;
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v216, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
        }
        else
        {
          long long v89 = *(_OWORD *)v7;
          *(void *)&v216[16] = *(void *)(v7 + 16);
          *(_OWORD *)id v216 = v89;
        }
        if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external((std::string *)&v216[24], v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)&v216[24] = v224;
        }
        uint64_t v133 = 0;
        std::string v134 = 0;
        uint64_t v135 = 0;
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133;
        v217.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v133 = (std::string *)operator new(0x30uLL);
        std::string v134 = v133;
        uint64_t v135 = v133 + 2;
        std::string v134 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v135, (long long *)v216, (long long *)&v217, v133);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v217, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v217 = __s;
        }
        uint64_t v130 = 0;
        std::string v131 = 0;
        std::string v132 = 0;
        uint64_t v199 = &v130;
        char v200 = 0;
        uint64_t v130 = (std::string *)operator new(0x18uLL);
        std::string v131 = v130;
        std::string v132 = v130 + 1;
        std::string v131 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v132, (long long *)&v217, (long long *)&v218, v130);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v136, (uint64_t *)a2, (uint64_t)&v219, v88, (uint64_t)v194, (uint64_t)v133, (uint64_t)v134, (uint64_t *)&v130);
        if (v137) {
          nitro::nitro_function::nitro_function(v137);
        }
        uint64_t v199 = &v130;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v199);
        if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v217.__r_.__value_.__l.__data_);
        }
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
        for (uint64_t m = 0; m != -48; m -= 24)
        {
          if ((char)v216[m + 47] < 0) {
            operator delete(*(void **)&v216[m + 24]);
          }
        }
        break;
      case 's':
        uint64_t v71 = *(void *)a3;
        if (*(char *)(*(void *)a3 + 23) >= 0) {
          size_t v72 = *(unsigned __int8 *)(*(void *)a3 + 23);
        }
        else {
          size_t v72 = *(void *)(*(void *)a3 + 8);
        }
        char v73 = &v224;
        std::string::basic_string[abi:ne180100]((uint64_t)&v224, v72 + 4);
        if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          char v73 = (std::string *)v224.__r_.__value_.__r.__words[0];
        }
        if (v72)
        {
          if (*(char *)(v71 + 23) >= 0) {
            uint64_t v74 = (const void *)v71;
          }
          else {
            uint64_t v74 = *(const void **)v71;
          }
          memmove(v73, v74, v72);
        }
        strcpy((char *)v73 + v72, ":cos");
        v221.__r_.__value_.__r.__words[2] = 897988541;
        LOBYTE(v222) = 0;
        *(void *)&v223[4] = 0;
        v221.__r_.__value_.__r.__words[0] = 114;
        v221.__r_.__value_.__l.__size_ = 1065353216;
        std::string::basic_string[abi:ne180100]<0>(v216, "elementwise");
        if (*(char *)(v17 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)v17, *(void *)(v17 + 8));
        }
        else
        {
          long long v75 = *(_OWORD *)v17;
          v219.__r_.__value_.__r.__words[2] = *(void *)(v17 + 16);
          *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v75;
        }
        uint64_t v158 = 0;
        uint64_t v157 = 0;
        uint64_t v159 = 0;
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v157;
        v217.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v157 = (std::string *)operator new(0x18uLL);
        uint64_t v158 = v157;
        uint64_t v159 = v157 + 1;
        uint64_t v158 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v159, (long long *)&v219, (long long *)&v220, v157);
        if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v217, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
        }
        else {
          std::string v217 = v224;
        }
        uint64_t v155 = 0;
        unint64_t v154 = 0;
        id v156 = 0;
        uint64_t v199 = &v154;
        char v200 = 0;
        unint64_t v154 = (std::string *)operator new(0x18uLL);
        uint64_t v155 = v154;
        id v156 = v154 + 1;
        uint64_t v155 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v156, (long long *)&v217, (long long *)&v218, v154);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v160, (uint64_t *)a2, (uint64_t)v216, (uint64_t)&v224, (uint64_t)&v221, (uint64_t)v157, (uint64_t)v158, (uint64_t *)&v154);
        if (v161) {
          nitro::nitro_function::nitro_function(v161);
        }
        uint64_t v199 = &v154;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v199);
        if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v217.__r_.__value_.__l.__data_);
        }
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v157;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
        if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v219.__r_.__value_.__l.__data_);
        }
        if ((v216[23] & 0x80000000) != 0) {
          operator delete(*(void **)v216);
        }
        *(_DWORD *)uint64_t v194 = 1;
        std::string::basic_string[abi:ne180100]<0>(&v219, "elementwise");
        uint64_t v90 = *(void *)a3;
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v216, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
        }
        else
        {
          long long v91 = *(_OWORD *)v7;
          *(void *)&v216[16] = *(void *)(v7 + 16);
          *(_OWORD *)id v216 = v91;
        }
        if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external((std::string *)&v216[24], v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)&v216[24] = v224;
        }
        uint64_t v149 = 0;
        uint64_t v150 = 0;
        uint64_t v151 = 0;
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v149;
        v217.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v149 = (std::string *)operator new(0x30uLL);
        uint64_t v150 = v149;
        uint64_t v151 = v149 + 2;
        uint64_t v150 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v151, (long long *)v216, (long long *)&v217, v149);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v217, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v217 = __s;
        }
        int v146 = 0;
        uint64_t v147 = 0;
        int v148 = 0;
        uint64_t v199 = &v146;
        char v200 = 0;
        int v146 = (std::string *)operator new(0x18uLL);
        uint64_t v147 = v146;
        int v148 = v146 + 1;
        uint64_t v147 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v148, (long long *)&v217, (long long *)&v218, v146);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v152, (uint64_t *)a2, (uint64_t)&v219, v90, (uint64_t)v194, (uint64_t)v149, (uint64_t)v150, (uint64_t *)&v146);
        if (v153) {
          nitro::nitro_function::nitro_function(v153);
        }
        uint64_t v199 = &v146;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v199);
        if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v217.__r_.__value_.__l.__data_);
        }
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v149;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
        for (uint64_t n = 0; n != -48; n -= 24)
        {
          if ((char)v216[n + 47] < 0) {
            operator delete(*(void **)&v216[n + 24]);
          }
        }
        break;
      case 'w':
LABEL_36:
        memset(&v216[12], 0, 24);
        *(_DWORD *)id v216 = 14;
        *(_DWORD *)&v216[4] = *(_DWORD *)(a1 + 288);
        if (v19 == 25) {
          int v27 = 2139095039;
        }
        else {
          int v27 = *(_DWORD *)(a1 + 292);
        }
        *(_DWORD *)&v216[8] = v27;
        std::string::basic_string[abi:ne180100]<0>(&v224, "activation_grad");
        uint64_t v64 = *(void *)a3;
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v221, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
        }
        else
        {
          long long v65 = *(_OWORD *)v7;
          v221.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
          *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v65;
        }
        if (*(char *)(v17 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v222, *(const std::string::value_type **)v17, *(void *)(v17 + 8));
        }
        else
        {
          long long v76 = *(_OWORD *)v17;
          *(void *)long long v223 = *(void *)(v17 + 16);
          long long v222 = v76;
        }
        std::string v108 = 0;
        long long v109 = 0;
        int v110 = 0;
        v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
        v219.__r_.__value_.__s.__data_[8] = 0;
        std::string v108 = (std::string *)operator new(0x30uLL);
        long long v109 = v108;
        int v110 = v108 + 2;
        long long v109 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v110, (long long *)&v221, (long long *)&v223[8], v108);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v219, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v219 = __s;
        }
        std::string v105 = 0;
        std::string v106 = 0;
        std::string v107 = 0;
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
        v217.__r_.__value_.__s.__data_[8] = 0;
        std::string v105 = (std::string *)operator new(0x18uLL);
        std::string v106 = v105;
        std::string v107 = v105 + 1;
        std::string v106 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v107, (long long *)&v219, (long long *)&v220, v105);
        Espresso::sequential_builder::add<Espresso::activation_params>(&v111, (uint64_t *)a2, (uint64_t)&v224, v64, (uint64_t)v216, (uint64_t)v108, (uint64_t)v109, (uint64_t *)&v105);
        if (v112) {
          nitro::nitro_function::nitro_function(v112);
        }
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
        if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v219.__r_.__value_.__l.__data_);
        }
        v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
        for (iuint64_t i = 0; ii != -48; ii -= 24)
        {
          if ((char)v223[ii + 7] < 0) {
            operator delete(*(void **)((char *)&v221 + ii + 24));
          }
        }
        goto LABEL_334;
      default:
        goto LABEL_337;
    }
LABEL_332:
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v219.__r_.__value_.__l.__data_);
    }
LABEL_334:
    if ((SHIBYTE(v224.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_337;
    }
    std::string v80 = (void *)v224.__r_.__value_.__r.__words[0];
LABEL_336:
    operator delete(v80);
LABEL_337:
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
LABEL_339:
    if ((SHIBYTE(v198) & 0x80000000) == 0) {
      return;
    }
    long long v53 = __p[0];
    goto LABEL_341;
  }
  if (((1 << v11) & 0xC00000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v194, "elementwise min/max");
    Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 16) + 8) - **(void **)(a3 + 16)) >> 3), 2uLL, (uint64_t)v194, 1);
    Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 3), 1uLL, (uint64_t)v194, 0);
    uint64_t v12 = *(long long ***)(a3 + 16);
    long long v13 = *v12;
    if (*((char *)*v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v221, *(const std::string::value_type **)v13, *((void *)v13 + 1));
      uint64_t v12 = *(long long ***)(a3 + 16);
    }
    else
    {
      long long v14 = *v13;
      v221.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
      *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v14;
    }
    long long v48 = *v12;
    if (*((char *)v48 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v216, *((const std::string::value_type **)v48 + 3), *((void *)v48 + 4));
    }
    else
    {
      *(_OWORD *)id v216 = *(long long *)((char *)v48 + 24);
      *(void *)&v216[16] = *((void *)v48 + 5);
    }
    if (fabsf(*(float *)(a1 + 288) + -1.0) > 0.000001 || fabsf(*(float *)(a1 + 292)) > 0.000001) {
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("grad of elementwise min/max with alpha != 1 or beta != 0");
    }
    if (*v10 == 22)
    {
      std::string::size_type v49 = v221.__r_.__value_.__r.__words[2];
      long long v50 = *(_OWORD *)&v221.__r_.__value_.__l.__data_;
      std::string v221 = *(std::string *)v216;
      *(_OWORD *)id v216 = v50;
      *(void *)&v216[16] = v49;
    }
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), (uint64_t)&v221))
    {
      std::string v211 = 0;
      uint64_t v51 = operator new(0x20uLL);
      *uint64_t v51 = &unk_1EE37C7F8;
      v51[1] = &v221;
      v51[2] = v216;
      v51[3] = v7;
      std::string v211 = v51;
      Espresso::maybe_broadcasted_elementwise_grad(a2, a3, 0, (uint64_t)v210);
      std::__function::__value_func<void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__value_func[abi:ne180100](v210);
    }
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), (uint64_t)v216))
    {
      std::string v209 = 0;
      long long v52 = operator new(0x20uLL);
      void *v52 = &unk_1EE37C850;
      v52[1] = &v221;
      v52[2] = v216;
      v52[3] = v7;
      std::string v209 = v52;
      Espresso::maybe_broadcasted_elementwise_grad(a2, a3, 1uLL, (uint64_t)v208);
      std::__function::__value_func<void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__value_func[abi:ne180100](v208);
    }
    if ((v216[23] & 0x80000000) != 0) {
      operator delete(*(void **)v216);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    goto LABEL_100;
  }
  if (v11 == 33)
  {
    std::string::basic_string[abi:ne180100]<0>(v194, "elementwise subtract");
    Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 16) + 8) - **(void **)(a3 + 16)) >> 3), 2uLL, (uint64_t)v194, 1);
    Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 3), 1uLL, (uint64_t)v194, 0);
    uint64_t v31 = **(void **)(a3 + 16);
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v31))
    {
      v204[0] = &unk_1EE37C958;
      v204[1] = v7;
      v204[3] = v204;
      Espresso::maybe_broadcasted_elementwise_grad(a2, a3, 0, (uint64_t)v204);
      std::__function::__value_func<void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__value_func[abi:ne180100](v204);
    }
    if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v31 + 24))goto LABEL_100; {
    v203[0] = &unk_1EE37C9B0;
    }
    v203[1] = v7;
    v203[3] = v203;
    Espresso::maybe_broadcasted_elementwise_grad(a2, a3, 1uLL, (uint64_t)v203);
    uint64_t v30 = v203;
    goto LABEL_47;
  }
LABEL_48:
  if (v11 != 101)
  {
LABEL_61:
    unint64_t v38 = 0;
    while (1)
    {
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v4 + 24 * v38))
      {
        uint64_t v39 = *v10;
        if (v39)
        {
          if (v39 != 1) {
            Espresso::throw_exception_selector<Espresso::generic_error,int &>("Backward not supported for elementwise operation %d", v39);
          }
          long long v40 = a2;
          memset(v194, 0, 24);
          uint64_t v41 = **(void **)(a3 + 16);
          if (*(void *)(*(void *)(a3 + 16) + 8) != v41)
          {
            uint64_t v42 = 0;
            std::string v43 = 0;
            unint64_t v44 = 0;
            do
            {
              if (v38 == v44)
              {
                uint64_t v45 = v7;
                if ((unint64_t)v43 < *(void *)&v194[16])
                {
                  if ((*(char *)(v7 + 23) & 0x80000000) == 0)
                  {
                    long long v46 = *(_OWORD *)v7;
                    std::string::size_type v47 = *(void *)(v7 + 16);
                    goto LABEL_74;
                  }
                  std::string::__init_copy_ctor_external(v43, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
LABEL_78:
                  ++v43;
                  goto LABEL_79;
                }
              }
              else
              {
                uint64_t v45 = v41 + v42;
                if ((unint64_t)v43 < *(void *)&v194[16])
                {
                  if (*(char *)(v45 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(v43, *(const std::string::value_type **)(v41 + v42), *(void *)(v41 + v42 + 8));
                  }
                  else
                  {
                    long long v46 = *(_OWORD *)v45;
                    std::string::size_type v47 = *(void *)(v45 + 16);
LABEL_74:
                    v43->__r_.__value_.__r.__words[2] = v47;
                    *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v46;
                  }
                  goto LABEL_78;
                }
              }
              std::string v43 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v194, v45);
LABEL_79:
              *(void *)&v194[8] = v43;
              ++v44;
              uint64_t v41 = **(void **)(a3 + 16);
              v42 += 24;
            }
            while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a3 + 16) + 8) - v41) >> 3) > v44);
          }
          v202[0] = &unk_1EE37CA08;
          v202[1] = a1;
          v202[2] = v194;
          v202[3] = v202;
          a2 = v40;
          Espresso::maybe_broadcasted_elementwise_grad(v40, a3, v38, (uint64_t)v202);
          std::__function::__value_func<void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__value_func[abi:ne180100](v202);
          v221.__r_.__value_.__r.__words[0] = (std::string::size_type)v194;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
        }
        else
        {
          v201[0] = &unk_1EE37CA60;
          v201[1] = v7;
          v201[3] = v201;
          Espresso::maybe_broadcasted_elementwise_grad(a2, a3, v38, (uint64_t)v201);
          std::__function::__value_func<void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__value_func[abi:ne180100](v201);
        }
      }
      ++v38;
      uint64_t v4 = **(void **)(a3 + 16);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(a3 + 16) + 8) - v4) >> 3) <= v38) {
        return;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v221, "elementwise if");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 16) + 8) - **(void **)(a3 + 16)) >> 3), 3uLL, (uint64_t)&v221, 1);
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 3), 1uLL, (uint64_t)&v221, 0);
  uint64_t v32 = **(long long ***)(a3 + 16);
  *(void *)&v194[20] = 0xFFFFFFFF00000001;
  v195[0] = 0;
  *(_DWORD *)&v194[28] = 0;
  memset(v194, 0, 20);
  std::operator+<char>();
  std::string::basic_string[abi:ne180100]<0>(__p, "fill");
  uint64_t v33 = *(void *)a3;
  if (*(char *)(*(void *)a3 + 23) >= 0) {
    size_t v34 = *(unsigned __int8 *)(*(void *)a3 + 23);
  }
  else {
    size_t v34 = *(void *)(*(void *)a3 + 8);
  }
  p_s = &__s;
  std::string::basic_string[abi:ne180100]((uint64_t)&__s, v34 + 10);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  if (v34)
  {
    if (*(char *)(v33 + 23) >= 0) {
      char v36 = (const void *)v33;
    }
    else {
      char v36 = *(const void **)v33;
    }
    memmove(p_s, v36, v34);
  }
  strcpy((char *)p_s + v34, ":container");
  if (*((char *)v32 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v224, *(const std::string::value_type **)v32, *((void *)v32 + 1));
  }
  else
  {
    long long v37 = *v32;
    v224.__r_.__value_.__r.__words[2] = *((void *)v32 + 2);
    *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v37;
  }
  std::string::size_type v98 = 0;
  unsigned __int8 v99 = 0;
  std::string v100 = 0;
  v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98;
  v219.__r_.__value_.__s.__data_[8] = 0;
  std::string::size_type v98 = (std::string *)operator new(0x18uLL);
  unsigned __int8 v99 = v98;
  std::string v100 = v98 + 1;
  unsigned __int8 v99 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v100, (long long *)&v224, &v225, v98);
  if ((v216[23] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)v216, *(std::string::size_type *)&v216[8]);
  }
  else {
    std::string v219 = *(std::string *)v216;
  }
  std::string::size_type v95 = 0;
  unsigned __int8 v96 = 0;
  uint64_t v97 = 0;
  v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v95;
  v217.__r_.__value_.__s.__data_[8] = 0;
  std::string::size_type v95 = (std::string *)operator new(0x18uLL);
  unsigned __int8 v96 = v95;
  uint64_t v97 = v95 + 1;
  unsigned __int8 v96 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v97, (long long *)&v219, (long long *)&v220, v95);
  Espresso::sequential_builder::add<Espresso::fill_params_t>(&v101, (uint64_t *)a2, (uint64_t)__p, (uint64_t)&__s, (uint64_t)v194, (uint64_t)v98, (uint64_t)v99, (uint64_t *)&v95);
  if (v102) {
    nitro::nitro_function::nitro_function(v102);
  }
  v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v219.__r_.__value_.__l.__data_);
  }
  v219.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v219);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v224.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v198) < 0) {
    operator delete(__p[0]);
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), (uint64_t)v32 + 24))
  {
    id v215 = 0;
    std::string v78 = operator new(0x20uLL);
    void *v78 = &unk_1EE37C748;
    v78[1] = v32;
    v78[2] = v7;
    v78[3] = v216;
    id v215 = v78;
    Espresso::maybe_broadcasted_elementwise_grad(a2, a3, 1uLL, (uint64_t)v214);
    std::__function::__value_func<void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__value_func[abi:ne180100](v214);
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), (uint64_t)(v32 + 3)))
  {
    int v213 = 0;
    uint64_t v79 = operator new(0x20uLL);
    *uint64_t v79 = &unk_1EE37C7A0;
    v79[1] = v32;
    v79[2] = v216;
    v79[3] = v7;
    int v213 = v79;
    Espresso::maybe_broadcasted_elementwise_grad(a2, a3, 2uLL, (uint64_t)v212);
    std::__function::__value_func<void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__value_func[abi:ne180100](v212);
  }
  if ((v216[23] & 0x80000000) != 0) {
    operator delete(*(void **)v216);
  }
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
  {
    long long v53 = (void *)v221.__r_.__value_.__r.__words[0];
LABEL_341:
    operator delete(v53);
  }
}

void sub_192A0A920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x570] = (unint64_t)&a72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x570]);
  uint64_t v74 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x540] + v74 + 47) < 0) {
      operator delete(*(void **)((char *)&STACK[0x540] + v74 + 24));
    }
    v74 -= 24;
    if (v74 == -48)
    {
      if (*(char *)(v72 - 217) < 0) {
        operator delete(*(void **)(v72 - 240));
      }
      if (*(char *)(v72 - 121) < 0) {
        operator delete(*(void **)(v72 - 144));
      }
      if (SLOBYTE(STACK[0x3AF]) < 0) {
        operator delete((void *)STACK[0x398]);
      }
      if (SLOBYTE(STACK[0x3C7]) < 0) {
        operator delete((void *)STACK[0x3B0]);
      }
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::build_grads_for_pow_input(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, float a6)
{
  *(void *)&long long v49 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v41 = *(std::string *)a1;
  }
  if (fabsf(a6 + -2.0) > 0.000001)
  {
    uint64_t v36 = 0x358637BD00000000;
    int v37 = 0;
    char v38 = 0;
    int v39 = 0;
    int v40 = 0;
    uint64_t v34 = 13;
    float v35 = a6 + -1.0;
    uint64_t v12 = (char *)*a5;
    if (*(char *)(*a5 + 23) >= 0) {
      size_t v13 = *(unsigned __int8 *)(*a5 + 23);
    }
    else {
      size_t v13 = *(void *)(*a5 + 8);
    }
    long long v14 = &v44;
    std::string::basic_string[abi:ne180100]((uint64_t)&v44, v13 + 4);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v14 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    if (v13)
    {
      if (v12[23] >= 0) {
        long long v15 = v12;
      }
      else {
        long long v15 = *(char **)v12;
      }
      memmove(v14, v15, v13);
    }
    strcpy((char *)v14 + v13, "/pow");
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    std::string v41 = v44;
    std::string::basic_string[abi:ne180100]<0>(&v44, "elementwise");
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string v48 = *(std::string *)a1;
    }
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    v46.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v29 = (std::string *)operator new(0x18uLL);
    uint64_t v30 = v29;
    uint64_t v31 = v29 + 1;
    uint64_t v30 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v31, (long long *)&v48, &v49, v29);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v46, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
    }
    else {
      std::string v46 = v41;
    }
    long long v26 = 0;
    int v27 = 0;
    uint64_t v28 = 0;
    uint64_t v42 = &v26;
    char v43 = 0;
    long long v26 = (std::string *)operator new(0x18uLL);
    int v27 = v26;
    uint64_t v28 = v26 + 1;
    int v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v28, (long long *)&v46, (long long *)&v47, v26);
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v32, a4, (uint64_t)&v44, (uint64_t)&v41, (uint64_t)&v34, (uint64_t)v29, (uint64_t)v30, (uint64_t *)&v26);
    if (v33) {
      nitro::nitro_function::nitro_function(v33);
    }
    uint64_t v42 = &v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v36 = 0x358637BD00000000;
  int v37 = 0;
  char v38 = 0;
  int v39 = 0;
  int v40 = 0;
  uint64_t v34 = 1;
  float v35 = a6;
  std::string::basic_string[abi:ne180100]<0>(&v48, "elementwise");
  uint64_t v16 = *a5;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v44 = *(std::string *)a2;
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v45, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
  }
  else {
    std::string v45 = v41;
  }
  size_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  v46.__r_.__value_.__s.__data_[8] = 0;
  size_t v21 = (std::string *)operator new(0x30uLL);
  uint64_t v22 = v21;
  uint64_t v23 = v21 + 2;
  uint64_t v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v23, (long long *)&v44, (long long *)&v46, v21);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v46 = *(std::string *)a3;
  }
  long long v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v42 = &v18;
  char v43 = 0;
  long long v18 = (std::string *)operator new(0x18uLL);
  int v19 = v18;
  uint64_t v20 = v18 + 1;
  int v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20, (long long *)&v46, (long long *)&v47, v18);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v24, a4, (uint64_t)&v48, v16, (uint64_t)&v34, (uint64_t)v21, (uint64_t)v22, (uint64_t *)&v18);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  uint64_t v42 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v45.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v44 + i * 8 + 24));
    }
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
}

void sub_192A0B724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40)
{
  *(void *)(v40 - 176) = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 176));
  if (*(char *)(v40 - 121) < 0) {
    operator delete(*(void **)(v40 - 144));
  }
  if (*(char *)(v40 - 201) < 0) {
    operator delete(*(void **)(v40 - 224));
  }
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::maybe_broadcasted_elementwise_grad(Espresso::sequential_builder *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  *(void *)&long long v147 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = **(void **)(a2 + 16) + 24 * a3;
  Espresso::blob_grad_contrib_name((uint64_t)&v129, v8, a2);
  int32x2_t v9 = Espresso::sequential_builder::blob_shape(a1, **(void **)(a2 + 24));
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v127, (const Espresso::layer_shape *)v9, 0);
  int v10 = Espresso::sequential_builder::blob_shape(a1, v8);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v125, (const Espresso::layer_shape *)v10, 0);
  unint64_t v11 = (int)v126;
  std::string::size_type v12 = (int)v128;
  long long v122 = 0u;
  long long v123 = 0u;
  int v124 = 1065353216;
  uint64_t v100 = a4;
  uint64_t v101 = a2;
  uint64_t v99 = v8;
  if (v128 == v126)
  {
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v126)
    {
      std::string::size_type v13 = 0;
      do
      {
        if (v125[v13] != v127[v13])
        {
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v122, (unint64_t *)&__p, &__p);
          std::string::size_type v13 = __p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__r.__words[0] = ++v13;
      }
      while (v13 < v12);
    }
    long long v14 = (uint64_t *)a1;
  }
  else
  {
    if (v126 >= v128) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("elementwise op with input rank > output rank");
    }
    long long v14 = (uint64_t *)a1;
    unint64_t v15 = 0;
    uint64_t v16 = (int)v128 - 1;
    if ((unint64_t)(int)v128 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = (int)v128;
    }
    uint64_t v18 = 4 * (int)v126 - 4;
    do
    {
      v135.__r_.__value_.__r.__words[0] = v16;
      int v19 = v127[v16];
      if (v19 >= 2)
      {
        if (v15 >= v11 || (int v20 = *(_DWORD *)((char *)v125 + v18), v20 == 1))
        {
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v122, (unint64_t *)&v135, &v135);
        }
        else if (v20 != v19)
        {
          Espresso::layer_nd_shape::repr(&__p, (uint64_t)v125);
          int v95 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v96 = __p.__r_.__value_.__r.__words[0];
          Espresso::layer_nd_shape::repr((std::string *)v110, (uint64_t)v127);
          if (v95 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)v96;
          }
          if (v110[23] >= 0) {
            std::string::size_type v98 = v110;
          }
          else {
            std::string::size_type v98 = *(unsigned char **)v110;
          }
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("cannot broadcast shape %s with %s", (uint64_t)p_p, (uint64_t)v98);
        }
      }
      ++v15;
      v18 -= 4;
      --v16;
    }
    while (v17 != v15);
  }
  uint64_t v21 = *((void *)&v123 + 1);
  std::to_string(&v121, a3);
  uint64_t v22 = a2;
  if (v11 >= v12 && !v21)
  {
    uint64_t v23 = *(char **)a2;
    if (*(char *)(*(void *)v101 + 23) >= 0) {
      size_t v24 = *(unsigned __int8 *)(*(void *)v101 + 23);
    }
    else {
      size_t v24 = *(void *)(*(void *)v101 + 8);
    }
    uint64_t v25 = v110;
    std::string::basic_string[abi:ne180100]((uint64_t)v110, v24 + 1);
    if (v110[23] < 0) {
      uint64_t v25 = *(unsigned char **)v110;
    }
    if (v24)
    {
      if (v23[23] >= 0) {
        long long v26 = v23;
      }
      else {
        long long v26 = *(char **)v23;
      }
      memmove(v25, v26, v24);
    }
    *(_WORD *)&v25[v24] = 58;
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v27 = &v121;
    }
    else {
      int v27 = (std::string *)v121.__r_.__value_.__r.__words[0];
    }
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v121.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v121.__r_.__value_.__l.__size_;
    }
    uint64_t v29 = std::string::append((std::string *)v110, (const std::string::value_type *)v27, size);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    uint64_t v31 = *(void *)(v100 + 24);
    if (!v31) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t *, std::string *, std::string *))(*(void *)v31 + 48))(v31, v14, &v129, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v110[23] & 0x80000000) != 0)
    {
      uint64_t v32 = *(void **)v110;
LABEL_192:
      operator delete(v32);
      goto LABEL_193;
    }
    goto LABEL_193;
  }
  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v33 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v33 = v129.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v120, v33 + 8);
  if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v34 = &v120;
  }
  else {
    uint64_t v34 = (std::string *)v120.__r_.__value_.__r.__words[0];
  }
  if (v33)
  {
    if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v35 = &v129;
    }
    else {
      float v35 = (std::string *)v129.__r_.__value_.__r.__words[0];
    }
    memmove(v34, v35, v33);
  }
  strcpy((char *)v34 + v33, ":bcasted");
  uint64_t v36 = *(char **)a2;
  if (*(char *)(*(void *)v101 + 23) >= 0) {
    size_t v37 = *(unsigned __int8 *)(*(void *)v101 + 23);
  }
  else {
    size_t v37 = *(void *)(*(void *)v101 + 8);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v37 + 9);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v38 = &__p;
  }
  else {
    char v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v37)
  {
    if (v36[23] >= 0) {
      int v39 = v36;
    }
    else {
      int v39 = *(char **)v36;
    }
    memmove(v38, v39, v37);
  }
  strcpy((char *)v38 + v37, ":bcasted_");
  if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v40 = &v121;
  }
  else {
    uint64_t v40 = (std::string *)v121.__r_.__value_.__r.__words[0];
  }
  if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v41 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v41 = v121.__r_.__value_.__l.__size_;
  }
  uint64_t v42 = std::string::append(&__p, (const std::string::value_type *)v40, v41);
  char v43 = v14;
  long long v44 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  std::string::size_type v119 = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v118 = v44;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v45 = *(void *)(v100 + 24);
  if (!v45) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *, std::string *, void **))(*(void *)v45 + 48))(v45, v14, &v120, v118);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v117, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  }
  else {
    std::string v117 = v120;
  }
  if (v21)
  {
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__str, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
    }
    else {
      std::string __str = v129;
    }
    if (v11 < v12)
    {
      if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v46 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v46 = v129.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v46 + 8);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v47 = &__p;
      }
      else {
        uint64_t v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v46)
      {
        if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v48 = &v129;
        }
        else {
          std::string v48 = (std::string *)v129.__r_.__value_.__r.__words[0];
        }
        memmove(v47, v48, v46);
      }
      strcpy((char *)v47 + v46, ":reduced");
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string __str = __p;
      std::string::operator=(&v117, &__str);
    }
    long long v49 = *(char **)v101;
    if (*(char *)(*(void *)v101 + 23) >= 0) {
      size_t v50 = *(unsigned __int8 *)(*(void *)v101 + 23);
    }
    else {
      size_t v50 = *(void *)(*(void *)v101 + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v113, v50 + 8);
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v51 = &v113;
    }
    else {
      uint64_t v51 = (std::string *)v113.__r_.__value_.__r.__words[0];
    }
    if (v50)
    {
      if (v49[23] >= 0) {
        long long v52 = v49;
      }
      else {
        long long v52 = *(char **)v49;
      }
      memmove(v51, v52, v50);
    }
    strcpy((char *)v51 + v50, ":reduce_");
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v53 = &v121;
    }
    else {
      long long v53 = (std::string *)v121.__r_.__value_.__r.__words[0];
    }
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v54 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v54 = v121.__r_.__value_.__l.__size_;
    }
    long long v55 = std::string::append(&v113, (const std::string::value_type *)v53, v54);
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    int64_t v115 = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long v114 = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    if (!*((void *)&v123 + 1)) {
      goto LABEL_139;
    }
    uint64_t v57 = (void *)v123;
    if ((void)v123)
    {
      unsigned int v58 = 0;
      long long v59 = (uint64_t *)v123;
      do
      {
        v58 += 1 << (v12 + ~*((_DWORD *)v59 + 4));
        long long v59 = (uint64_t *)*v59;
      }
      while (v59);
      BOOL v60 = v58 > 0x1F;
      unsigned int v61 = (1 << v58) & 0x8001019E;
      if (v60 || v61 == 0)
      {
        unint64_t v76 = 0;
        memset(v110, 0, 24);
        memset(&v135, 0, sizeof(v135));
        do
        {
          uint64_t v77 = v57[2];
          if (v76) {
            std::string v78 = &v135;
          }
          else {
            std::string v78 = &v120;
          }
          std::string::operator=((std::string *)v110, v78);
          if (v76 == *((void *)&v123 + 1) - 1)
          {
            std::string::operator=(&v135, &__str);
          }
          else
          {
            if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v79 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v79 = v120.__r_.__value_.__l.__size_;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&__p, v79 + 8);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string v80 = &__p;
            }
            else {
              std::string v80 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if (v79)
            {
              if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string v81 = &v120;
              }
              else {
                std::string v81 = (std::string *)v120.__r_.__value_.__r.__words[0];
              }
              memmove(v80, v81, v79);
            }
            strcpy((char *)v80 + v79, ":reduce_");
            std::to_string(&v146, v76);
            long long v82 = v43;
            if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v83 = &v146;
            }
            else {
              long long v83 = (std::string *)v146.__r_.__value_.__r.__words[0];
            }
            if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v84 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v84 = v146.__r_.__value_.__l.__size_;
            }
            std::string v85 = std::string::append(&__p, (const std::string::value_type *)v83, v84);
            std::string::size_type v86 = v85->__r_.__value_.__r.__words[0];
            v145.__r_.__value_.__r.__words[0] = v85->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v85->__r_.__value_.__r.__words[1] + 7);
            char v87 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
            v85->__r_.__value_.__l.__size_ = 0;
            v85->__r_.__value_.__r.__words[2] = 0;
            v85->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v135.__r_.__value_.__l.__data_);
            }
            v135.__r_.__value_.__r.__words[0] = v86;
            v135.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v135.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&v135.__r_.__value_.__s + 23) = v87;
            if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v146.__r_.__value_.__l.__data_);
            }
            char v43 = v82;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          if (v115 >= 0) {
            size_t v88 = HIBYTE(v115);
          }
          else {
            size_t v88 = (size_t)v114[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v88 + 8);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v89 = &__p;
          }
          else {
            long long v89 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (v88)
          {
            if (v115 >= 0) {
              uint64_t v90 = v114;
            }
            else {
              uint64_t v90 = (void **)v114[0];
            }
            memmove(v89, v90, v88);
          }
          strcpy((char *)v89 + v88, ":reduce_");
          std::to_string(&v145, v76);
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v91 = &v145;
          }
          else {
            long long v91 = (std::string *)v145.__r_.__value_.__r.__words[0];
          }
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v92 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v92 = v145.__r_.__value_.__l.__size_;
          }
          std::string v93 = std::string::append(&__p, (const std::string::value_type *)v91, v92);
          long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
          v146.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v94;
          v93->__r_.__value_.__l.__size_ = 0;
          v93->__r_.__value_.__r.__words[2] = 0;
          v93->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v145.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          __p.__r_.__value_.__r.__words[0] = 0x358637BD00000000;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0x100000007uLL;
          v139.__r_.__value_.__r.__words[0] = 0;
          LODWORD(v139.__r_.__value_.__r.__words[1]) = 0;
          v139.__r_.__value_.__s.__data_[16] = 1;
          HIDWORD(v139.__r_.__value_.__r.__words[1]) = v77;
          std::string::basic_string[abi:ne180100]<0>(&v145, "reduce");
          if ((v110[23] & 0x80000000) != 0) {
            std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)v110, *(std::string::size_type *)&v110[8]);
          }
          else {
            std::string v142 = *(std::string *)v110;
          }
          memset(&v144, 0, sizeof(v144));
          v140.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
          v140.__r_.__value_.__s.__data_[8] = 0;
          v144.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v144.__r_.__value_.__l.__size_ = v144.__r_.__value_.__r.__words[0];
          v144.__r_.__value_.__r.__words[2] = v144.__r_.__value_.__r.__words[0] + 24;
          v144.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v144.__r_.__value_.__r.__words[2], (long long *)&v142, (long long *)&v143, (std::string *)v144.__r_.__value_.__l.__data_);
          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v140, v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_);
          }
          else {
            std::string v140 = v135;
          }
          uint64_t v130 = 0;
          std::string v131 = 0;
          p_data = 0;
          uint64_t v136 = &v130;
          char v137 = 0;
          uint64_t v130 = (std::string *)operator new(0x18uLL);
          std::string v131 = v130;
          p_data = (void **)&v130[1].__r_.__value_.__l.__data_;
          std::string v131 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v140, (long long *)&v141, v130);
          Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v133, v43, (uint64_t)&v145, (uint64_t)&v146, (uint64_t)&__p, (uint64_t)v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_, (uint64_t *)&v130);
          uint64_t v22 = v101;
          if (v134) {
            nitro::nitro_function::nitro_function(v134);
          }
          uint64_t v136 = &v130;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v140.__r_.__value_.__l.__data_);
          }
          v140.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
          if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v142.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v145.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v146.__r_.__value_.__l.__data_);
          }
          uint64_t v57 = (void *)*v57;
          ++v76;
        }
        while (v57);
        if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_137;
        }
        uint64_t v64 = (void *)v135.__r_.__value_.__r.__words[0];
      }
      else
      {
        int v63 = 0;
        HIDWORD(__p.__r_.__value_.__r.__words[1]) = 1;
        v139.__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[2] = 0;
        v139.__r_.__value_.__l.__size_ = 0xFFFFFFFF00000000;
        v139.__r_.__value_.__s.__data_[16] = 0;
        __p.__r_.__value_.__r.__words[0] = 0x358637BD00000000;
        do
        {
          v63 += 1 << (v12 + ~*((_DWORD *)v57 + 4));
          uint64_t v57 = (void *)*v57;
        }
        while (v57);
        LODWORD(__p.__r_.__value_.__r.__words[1]) = v63;
        std::string::basic_string[abi:ne180100]<0>(v110, "reduce");
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v146, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
        }
        else {
          std::string v146 = v120;
        }
        memset(&v135, 0, sizeof(v135));
        v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&v135;
        v145.__r_.__value_.__s.__data_[8] = 0;
        v135.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v135.__r_.__value_.__l.__size_ = v135.__r_.__value_.__r.__words[0];
        v135.__r_.__value_.__r.__words[2] = v135.__r_.__value_.__r.__words[0] + 24;
        v135.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v135.__r_.__value_.__r.__words[2], (long long *)&v146, &v147, (std::string *)v135.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v144, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else {
          std::string v144 = __str;
        }
        memset(&v145, 0, sizeof(v145));
        v142.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
        v142.__r_.__value_.__s.__data_[8] = 0;
        v145.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v145.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
        v145.__r_.__value_.__r.__words[2] = v145.__r_.__value_.__r.__words[0] + 24;
        v145.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v145.__r_.__value_.__r.__words[2], (long long *)&v144, (long long *)&v145, (std::string *)v145.__r_.__value_.__l.__data_);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>((uint64_t *)&v142, v43, (uint64_t)v110, (uint64_t)v114, (uint64_t)&__p, (uint64_t)v135.__r_.__value_.__l.__data_, v135.__r_.__value_.__l.__size_, (uint64_t *)&v145);
        if (v142.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v142.__r_.__value_.__l.__size_);
        }
        uint64_t v130 = &v145;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
        if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v144.__r_.__value_.__l.__data_);
        }
        v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v135;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
        if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_137;
        }
        uint64_t v64 = (void *)v146.__r_.__value_.__r.__words[0];
      }
      operator delete(v64);
    }
    else
    {
      memset(v110, 0, 24);
    }
LABEL_137:
    if ((v110[23] & 0x80000000) != 0) {
      operator delete(*(void **)v110);
    }
LABEL_139:
    if (SHIBYTE(v115) < 0) {
      operator delete(v114[0]);
    }
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v113.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  if (v11 < v12)
  {
    long long v65 = v43;
    *(_OWORD *)int v110 = 0uLL;
    *(_OWORD *)&v110[16] = xmmword_192DCA380;
    int v112 = 1;
    __int16 v111 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v135, "reshape");
    uint64_t v66 = *(char **)v22;
    if (*(char *)(*(void *)v22 + 23) >= 0) {
      size_t v67 = *(unsigned __int8 *)(*(void *)v22 + 23);
    }
    else {
      size_t v67 = *(void *)(*(void *)v22 + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v145, v67 + 9);
    if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v68 = &v145;
    }
    else {
      long long v68 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if (v67)
    {
      if (v66[23] >= 0) {
        uint64_t v69 = v66;
      }
      else {
        uint64_t v69 = *(char **)v66;
      }
      memmove(v68, v69, v67);
    }
    strcpy((char *)v68 + v67, ":squeeze_");
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v70 = &v121;
    }
    else {
      long long v70 = (std::string *)v121.__r_.__value_.__r.__words[0];
    }
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v71 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v71 = v121.__r_.__value_.__l.__size_;
    }
    uint64_t v72 = std::string::append(&v145, (const std::string::value_type *)v70, v71);
    long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v117;
    }
    if (*(char *)(v99 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)v99, *(void *)(v99 + 8));
    }
    else
    {
      long long v74 = *(_OWORD *)v99;
      v139.__r_.__value_.__r.__words[2] = *(void *)(v99 + 16);
      *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v74;
    }
    std::string v105 = 0;
    std::string v106 = 0;
    std::string v107 = 0;
    v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
    v144.__r_.__value_.__s.__data_[8] = 0;
    std::string v105 = (std::string *)operator new(0x30uLL);
    std::string v106 = v105;
    std::string v107 = v105 + 2;
    std::string v106 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v107, (long long *)&__p, (long long *)&v140, v105);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v144, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
    }
    else {
      std::string v144 = v129;
    }
    std::string v102 = 0;
    std::string v103 = 0;
    std::string v104 = 0;
    v142.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
    v142.__r_.__value_.__s.__data_[8] = 0;
    std::string v102 = (std::string *)operator new(0x18uLL);
    std::string v103 = v102;
    std::string v104 = v102 + 1;
    std::string v103 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v104, (long long *)&v144, (long long *)&v145, v102);
    Espresso::sequential_builder::add<Espresso::reshape_params>(&v108, v65, (uint64_t)&v135, (uint64_t)&v146, (uint64_t)v110, (uint64_t)v105, (uint64_t)v106, (uint64_t *)&v102);
    if (v109) {
      nitro::nitro_function::nitro_function(v109);
    }
    v142.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v144.__r_.__value_.__l.__data_);
    }
    v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
    for (uint64_t i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v139.__r_.__value_.__r.__words[i + 2]) < 0) {
        operator delete(*(void **)((char *)&__p + i * 8 + 24));
      }
    }
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v146.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v145.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v135.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v117.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v119) < 0) {
    operator delete(v118[0]);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v32 = (void *)v120.__r_.__value_.__r.__words[0];
    goto LABEL_192;
  }
LABEL_193:
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v121.__r_.__value_.__l.__data_);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v122);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
}

void sub_192A0C8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  *(void *)(v77 - 192) = &STACK[0x208];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v77 - 192));
  if (*(char *)(v77 - 121) < 0) {
    operator delete(*(void **)(v77 - 144));
  }
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a75);
  if (a77 < 0) {
    operator delete(a76);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_9"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v25 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "copy");
  int v16 = 0;
  uint64_t v8 = *(long long **)(a1 + 8);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v24.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v9;
  }
  std::string::size_type v13 = 0;
  long long v14 = 0;
  unint64_t v15 = 0;
  int v10 = (std::string *)&v13;
  LOBYTE(v11) = 0;
  std::string::size_type v13 = (std::string *)operator new(0x18uLL);
  long long v14 = v13;
  unint64_t v15 = v13 + 1;
  long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (long long *)&v24, &v25, v13);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v22 = *(std::string *)a3;
  }
  int v10 = 0;
  unint64_t v11 = 0;
  std::string::size_type v12 = 0;
  int v19 = &v10;
  LOBYTE(v20) = 0;
  int v10 = (std::string *)operator new(0x18uLL);
  unint64_t v11 = v10;
  std::string::size_type v12 = v10 + 1;
  unint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v12, (long long *)&v22, (long long *)&v23, v10);
  Espresso::sequential_builder::add<Espresso::copy_params_t>((uint64_t *)&v19, a2, (uint64_t)__p, a4, (uint64_t)&v16, (uint64_t)v13, (uint64_t)v14, (uint64_t *)&v10);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  uint64_t v21 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
}

void sub_192A0CF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  a26 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v31 - 57) < 0) {
    operator delete(*(void **)(v31 - 80));
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37CA60;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE37CA60;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_9>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_8"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v25 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 8);
  long long v9 = *(_OWORD *)(v8 + 296);
  v19[0] = *(_OWORD *)(v8 + 280);
  v19[1] = v9;
  v19[2] = *(_OWORD *)(v8 + 312);
  int v20 = *(_DWORD *)(v8 + 328);
  HIDWORD(v19[0]) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  int v10 = *(uint64_t **)(a1 + 16);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *v10, v10[1], 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 3));
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v24 = *(std::string *)a3;
  }
  unint64_t v11 = 0;
  std::string::size_type v12 = 0;
  std::string::size_type v13 = 0;
  uint64_t v21 = &v11;
  LOBYTE(v22) = 0;
  unint64_t v11 = (std::string *)operator new(0x18uLL);
  std::string::size_type v12 = v11;
  std::string::size_type v13 = v11 + 1;
  std::string::size_type v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v13, (long long *)&v24, &v25, v11);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v21, a2, (uint64_t)__p, a4, (uint64_t)v19, v14, v15, (uint64_t *)&v11);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v23 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
}

void sub_192A0D2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  *(void *)(v21 - 64) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 64));
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37CA08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE37CA08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_8>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v28 = *MEMORY[0x1E4F143B8];
  _OWORD v18[2] = 897988541;
  char v19 = 0;
  int v20 = 0;
  int v21 = 0;
  v18[0] = 1;
  v18[1] = 3212836864;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  uint64_t v8 = *(long long **)(a1 + 8);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v27.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  }
  std::string::size_type v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v10 = (std::string *)&v13;
  LOBYTE(v11) = 0;
  std::string::size_type v13 = (std::string *)operator new(0x18uLL);
  uint64_t v14 = v13;
  uint64_t v15 = v13 + 1;
  uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (long long *)&v27, &v28, v13);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v25 = *(std::string *)a3;
  }
  int v10 = 0;
  unint64_t v11 = 0;
  std::string::size_type v12 = 0;
  std::string v22 = &v10;
  LOBYTE(v23) = 0;
  int v10 = (std::string *)operator new(0x18uLL);
  unint64_t v11 = v10;
  std::string::size_type v12 = v10 + 1;
  unint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v12, (long long *)&v25, (long long *)&v26, v10);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v22, a2, (uint64_t)__p, a4, (uint64_t)v18, (uint64_t)v13, (uint64_t)v14, (uint64_t *)&v10);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  std::string v24 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

void sub_192A0D61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  *(void *)(v29 - 128) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 128));
  if (*(char *)(v29 - 73) < 0) {
    operator delete(*(void **)(v29 - 96));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37C9B0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37C9B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_7>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v25 = *MEMORY[0x1E4F143B8];
  int v18 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "copy");
  uint64_t v8 = *(long long **)(a1 + 8);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v24.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v9;
  }
  std::string::size_type v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v10 = (std::string *)&v13;
  LOBYTE(v11) = 0;
  std::string::size_type v13 = (std::string *)operator new(0x18uLL);
  uint64_t v14 = v13;
  uint64_t v15 = v13 + 1;
  uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (long long *)&v24, &v25, v13);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v22 = *(std::string *)a3;
  }
  int v10 = 0;
  unint64_t v11 = 0;
  std::string::size_type v12 = 0;
  char v19 = &v10;
  LOBYTE(v20) = 0;
  int v10 = (std::string *)operator new(0x18uLL);
  unint64_t v11 = v10;
  std::string::size_type v12 = v10 + 1;
  unint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v12, (long long *)&v22, (long long *)&v23, v10);
  Espresso::sequential_builder::add<Espresso::copy_params_t>((uint64_t *)&v19, a2, (uint64_t)__p, a4, (uint64_t)&v18, (uint64_t)v13, (uint64_t)v14, (uint64_t *)&v10);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  int v21 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

void sub_192A0D97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  a26 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (*(char *)(v31 - 57) < 0) {
    operator delete(*(void **)(v31 - 80));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37C958;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37C958;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_6>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v51 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a3 + 23) >= 0) {
    size_t v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v8 = *(void *)(a3 + 8);
  }
  long long v9 = &v39;
  std::string::basic_string[abi:ne180100]((uint64_t)&v39, v8 + 4);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v9 = (std::string *)v39.__r_.__value_.__r.__words[0];
  }
  if (v8)
  {
    if (*(char *)(a3 + 23) >= 0) {
      int v10 = (const std::string::value_type *)a3;
    }
    else {
      int v10 = *(const std::string::value_type **)a3;
    }
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "/mul");
  v35[2] = 897988541;
  char v36 = 0;
  int v37 = 0;
  int v38 = 0;
  v35[0] = 1;
  v35[1] = 3212836864;
  std::string::basic_string[abi:ne180100]<0>(&v45, "elementwise");
  if (*(char *)(a4 + 23) >= 0) {
    size_t v11 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v11 = *(void *)(a4 + 8);
  }
  std::string::size_type v12 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v11 + 4);
  if (v32 < 0) {
    std::string::size_type v12 = (void **)__p[0];
  }
  if (v11)
  {
    if (*(char *)(a4 + 23) >= 0) {
      std::string::size_type v13 = (const void *)a4;
    }
    else {
      std::string::size_type v13 = *(const void **)a4;
    }
    memmove(v12, v13, v11);
  }
  strcpy((char *)v12 + v11, "/mul");
  uint64_t v14 = (long long *)a1[1];
  if (*((char *)v14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)v14, *((void *)v14 + 1));
  }
  else
  {
    long long v15 = *v14;
    v47.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v15;
  }
  uint64_t v16 = **(long long ***)(a1[2] + 24);
  if (*((char *)v16 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v48, *(const std::string::value_type **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v17 = *v16;
    *(void *)long long v49 = *((void *)v16 + 2);
    long long v48 = v17;
  }
  long long v28 = 0;
  uint64_t v29 = 0;
  long long v30 = 0;
  long long v25 = (std::string *)&v28;
  LOBYTE(v26) = 0;
  long long v28 = (std::string *)operator new(0x30uLL);
  uint64_t v29 = v28;
  long long v30 = v28 + 2;
  uint64_t v29 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v30, (long long *)&v47, (long long *)&v49[8], v28);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v50, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  }
  else {
    std::string v50 = v39;
  }
  long long v25 = 0;
  uint64_t v26 = 0;
  std::string v27 = 0;
  std::string v22 = (std::string *)&v25;
  LOBYTE(v23) = 0;
  long long v25 = (std::string *)operator new(0x18uLL);
  uint64_t v26 = v25;
  std::string v27 = v25 + 1;
  uint64_t v26 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v27, (long long *)&v50, &v51, v25);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v33, a2, (uint64_t)&v45, (uint64_t)__p, (uint64_t)v35, (uint64_t)v28, (uint64_t)v29, (uint64_t *)&v25);
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  std::string v22 = (std::string *)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    if ((char)v49[i + 7] < 0) {
      operator delete(*(void **)((char *)&v47 + i + 24));
    }
  }
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  v47.__r_.__value_.__r.__words[2] = 897988541;
  LOBYTE(v48) = 0;
  *(void *)&v49[4] = 0;
  v47.__r_.__value_.__r.__words[0] = 102;
  v47.__r_.__value_.__l.__size_ = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v45, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  }
  else {
    std::string v45 = v39;
  }
  char v19 = (long long *)a1[3];
  if (*((char *)v19 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v19, *((void *)v19 + 1));
  }
  else
  {
    long long v20 = *v19;
    v46.__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v20;
  }
  memset(&v50, 0, sizeof(v50));
  std::string v22 = &v50;
  LOBYTE(v23) = 0;
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  v50.__r_.__value_.__l.__size_ = v50.__r_.__value_.__r.__words[0];
  v50.__r_.__value_.__r.__words[2] = v50.__r_.__value_.__r.__words[0] + 48;
  v50.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v50.__r_.__value_.__r.__words[2], (long long *)&v45, (long long *)&v47, (std::string *)v50.__r_.__value_.__l.__data_);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v43 = *(std::string *)a3;
  }
  std::string v22 = 0;
  uint64_t v23 = 0;
  p_data = 0;
  uint64_t v40 = (void ***)&v22;
  LOBYTE(v41) = 0;
  std::string v22 = (std::string *)operator new(0x18uLL);
  uint64_t v23 = v22;
  p_data = (void **)&v22[1].__r_.__value_.__l.__data_;
  uint64_t v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v43, (long long *)&v44, v22);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v40, a2, (uint64_t)__p, a4, (uint64_t)&v47, (uint64_t)v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_, (uint64_t *)&v22);
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  uint64_t v42 = (void ***)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  for (uint64_t j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v46.__r_.__value_.__r.__words[j + 2]) < 0) {
      operator delete(*(void **)((char *)&v45 + j * 8 + 24));
    }
  }
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
}

void sub_192A0E028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  a43 = (void *)(v48 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  uint64_t v50 = 0;
  uint64_t v51 = v48 - 224;
  while (1)
  {
    if (*(char *)(v51 + v50 + 47) < 0) {
      operator delete(*(void **)(v51 + v50 + 24));
    }
    v50 -= 24;
    if (v50 == -48)
    {
      if (a24 < 0) {
        operator delete(__p);
      }
      if (a39 < 0) {
        operator delete(a34);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_192A0E1E0()
{
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37C900;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE37C900;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_5>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *((void *)&v32 + 1) = *MEMORY[0x1E4F143B8];
  v21[2] = 897988541;
  char v22 = 0;
  int v23 = 0;
  int v24 = 0;
  v21[0] = 102;
  v21[1] = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  size_t v8 = *(long long **)(a1 + 8);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v30.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
  }
  int v10 = *(long long **)(a1 + 16);
  if (*((char *)v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v31.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v11;
  }
  uint64_t v16 = 0;
  long long v17 = 0;
  int v18 = 0;
  std::string::size_type v13 = (std::string *)&v16;
  LOBYTE(v14) = 0;
  uint64_t v16 = (std::string *)operator new(0x30uLL);
  long long v17 = v16;
  int v18 = v16 + 2;
  long long v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (long long *)&v30, &v32, v16);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v28 = *(std::string *)a3;
  }
  std::string::size_type v13 = 0;
  uint64_t v14 = 0;
  long long v15 = 0;
  long long v25 = &v13;
  LOBYTE(v26) = 0;
  std::string::size_type v13 = (std::string *)operator new(0x18uLL);
  uint64_t v14 = v13;
  long long v15 = v13 + 1;
  uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (long long *)&v28, (long long *)&v29, v13);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v25, a2, (uint64_t)__p, a4, (uint64_t)v21, (uint64_t)v16, (uint64_t)v17, (uint64_t *)&v13);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  std::string v27 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v31.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v30 + i * 8 + 24));
    }
  }
  if (v20 < 0) {
    operator delete(__p[0]);
  }
}

void sub_192A0E538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  a32 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  uint64_t v39 = 0;
  uint64_t v40 = v37 - 128;
  while (1)
  {
    if (*(char *)(v40 + v39 + 47) < 0) {
      operator delete(*(void **)(v40 + v39 + 24));
    }
    v39 -= 24;
    if (v39 == -48)
    {
      if (a21 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37C8A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE37C8A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_4>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(void *a1, uint64_t *a2, uint64_t a3, const void **a4)
{
  *(void *)&long long v55 = *MEMORY[0x1E4F143B8];
  if (*((char *)a4 + 23) >= 0) {
    size_t v8 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v8 = (size_t)a4[1];
  }
  long long v9 = &v43;
  std::string::basic_string[abi:ne180100]((uint64_t)&v43, v8 + 5);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v9 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if (v8)
  {
    if (*((char *)a4 + 23) >= 0) {
      int v10 = a4;
    }
    else {
      int v10 = *a4;
    }
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, ":less");
  v39[2] = 897988541;
  char v40 = 0;
  int v41 = 0;
  int v42 = 0;
  v39[0] = 103;
  v39[1] = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&v49, "elementwise");
  long long v11 = (long long *)a1[1];
  if (*((char *)v11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)v11, *((void *)v11 + 1));
  }
  else
  {
    long long v12 = *v11;
    v51.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v12;
  }
  std::string::size_type v13 = (long long *)a1[2];
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v52, *(const std::string::value_type **)v13, *((void *)v13 + 1));
  }
  else
  {
    long long v14 = *v13;
    *(void *)long long v53 = *((void *)v13 + 2);
    long long v52 = v14;
  }
  uint64_t v34 = 0;
  float v35 = 0;
  char v36 = 0;
  std::string v31 = (std::string *)&v34;
  LOBYTE(v32) = 0;
  uint64_t v34 = (std::string *)operator new(0x30uLL);
  float v35 = v34;
  char v36 = v34 + 2;
  float v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36, (long long *)&v51, (long long *)&v53[8], v34);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v54, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  }
  else {
    std::string v54 = v43;
  }
  std::string v31 = 0;
  long long v32 = 0;
  uint64_t v33 = 0;
  std::string __p = &v31;
  char v29 = 0;
  std::string v31 = (std::string *)operator new(0x18uLL);
  long long v32 = v31;
  uint64_t v33 = v31 + 1;
  long long v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v33, (long long *)&v54, &v55, v31);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v37, a2, (uint64_t)&v49, (uint64_t)&v43, (uint64_t)v39, (uint64_t)v34, (uint64_t)v35, (uint64_t *)&v31);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  std::string __p = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    if ((char)v53[i + 7] < 0) {
      operator delete(*(void **)((char *)&v51 + i + 24));
    }
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  v51.__r_.__value_.__r.__words[2] = 897988541;
  LOBYTE(v52) = 0;
  *(void *)&v53[4] = 0;
  v51.__r_.__value_.__r.__words[0] = 1;
  v51.__r_.__value_.__l.__size_ = 1065353216;
  if (*((char *)a4 + 23) >= 0) {
    size_t v16 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v16 = (size_t)a4[1];
  }
  long long v17 = &v54;
  std::string::basic_string[abi:ne180100]((uint64_t)&v54, v16 + 2);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v17 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if (v16)
  {
    if (*((char *)a4 + 23) >= 0) {
      int v18 = a4;
    }
    else {
      int v18 = *a4;
    }
    memmove(v17, v18, v16);
  }
  strcpy((char *)v17 + v16, ":b");
  std::string::basic_string[abi:ne180100]<0>(&__p, "elementwise");
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v49, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  }
  else {
    std::string v49 = v43;
  }
  char v19 = (long long *)a1[3];
  if (*((char *)v19 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v19, *((void *)v19 + 1));
  }
  else
  {
    long long v20 = *v19;
    v50.__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v20;
  }
  long long v25 = 0;
  uint64_t v26 = 0;
  std::string v27 = 0;
  char v22 = (std::string *)&v25;
  LOBYTE(v23) = 0;
  long long v25 = (std::string *)operator new(0x30uLL);
  uint64_t v26 = v25;
  std::string v27 = v25 + 2;
  uint64_t v26 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v27, (long long *)&v49, (long long *)&v51, v25);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v47 = *(std::string *)a3;
  }
  char v22 = 0;
  int v23 = 0;
  int v24 = 0;
  uint64_t v44 = &v22;
  LOBYTE(v45) = 0;
  char v22 = (std::string *)operator new(0x18uLL);
  int v23 = v22;
  int v24 = v22 + 1;
  int v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v24, (long long *)&v47, (long long *)&v48, v22);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v44, a2, (uint64_t)&__p, (uint64_t)&v54, (uint64_t)&v51, (uint64_t)v25, (uint64_t)v26, (uint64_t *)&v22);
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  std::string v46 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  for (uint64_t j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v50.__r_.__value_.__r.__words[j + 2]) < 0) {
      operator delete(*(void **)((char *)&v49 + j * 8 + 24));
    }
  }
  if (v30 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
}

void sub_192A0EC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,char *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  a45 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  uint64_t v52 = 0;
  uint64_t v53 = v50 - 224;
  while (1)
  {
    if (*(char *)(v53 + v52 + 47) < 0) {
      operator delete(*(void **)(v53 + v52 + 24));
    }
    v52 -= 24;
    if (v52 == -48)
    {
      if (a20 < 0) {
        operator delete(__p);
      }
      if (*(char *)(v50 - 89) < 0) {
        operator delete(*(void **)(v50 - 112));
      }
      if (a41 < 0) {
        operator delete(a36);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_192A0EDC8()
{
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37C850;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE37C850;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_3>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(void *a1, uint64_t *a2, uint64_t a3, const void **a4)
{
  *(void *)&long long v55 = *MEMORY[0x1E4F143B8];
  if (*((char *)a4 + 23) >= 0) {
    size_t v8 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v8 = (size_t)a4[1];
  }
  long long v9 = &v43;
  std::string::basic_string[abi:ne180100]((uint64_t)&v43, v8 + 8);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v9 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if (v8)
  {
    if (*((char *)a4 + 23) >= 0) {
      int v10 = a4;
    }
    else {
      int v10 = *a4;
    }
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, ":greater");
  v39[2] = 897988541;
  char v40 = 0;
  int v41 = 0;
  int v42 = 0;
  v39[0] = 105;
  v39[1] = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&v49, "elementwise");
  long long v11 = (long long *)a1[1];
  if (*((char *)v11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)v11, *((void *)v11 + 1));
  }
  else
  {
    long long v12 = *v11;
    v51.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v12;
  }
  std::string::size_type v13 = (long long *)a1[2];
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v52, *(const std::string::value_type **)v13, *((void *)v13 + 1));
  }
  else
  {
    long long v14 = *v13;
    *(void *)uint64_t v53 = *((void *)v13 + 2);
    long long v52 = v14;
  }
  uint64_t v34 = 0;
  float v35 = 0;
  char v36 = 0;
  std::string v31 = (std::string *)&v34;
  LOBYTE(v32) = 0;
  uint64_t v34 = (std::string *)operator new(0x30uLL);
  float v35 = v34;
  char v36 = v34 + 2;
  float v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36, (long long *)&v51, (long long *)&v53[8], v34);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v54, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  }
  else {
    std::string v54 = v43;
  }
  std::string v31 = 0;
  long long v32 = 0;
  uint64_t v33 = 0;
  std::string __p = &v31;
  char v29 = 0;
  std::string v31 = (std::string *)operator new(0x18uLL);
  long long v32 = v31;
  uint64_t v33 = v31 + 1;
  long long v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v33, (long long *)&v54, &v55, v31);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v37, a2, (uint64_t)&v49, (uint64_t)&v43, (uint64_t)v39, (uint64_t)v34, (uint64_t)v35, (uint64_t *)&v31);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  std::string __p = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    if ((char)v53[i + 7] < 0) {
      operator delete(*(void **)((char *)&v51 + i + 24));
    }
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  v51.__r_.__value_.__r.__words[2] = 897988541;
  LOBYTE(v52) = 0;
  *(void *)&v53[4] = 0;
  v51.__r_.__value_.__r.__words[0] = 1;
  v51.__r_.__value_.__l.__size_ = 1065353216;
  if (*((char *)a4 + 23) >= 0) {
    size_t v16 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v16 = (size_t)a4[1];
  }
  long long v17 = &v54;
  std::string::basic_string[abi:ne180100]((uint64_t)&v54, v16 + 2);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v17 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if (v16)
  {
    if (*((char *)a4 + 23) >= 0) {
      int v18 = a4;
    }
    else {
      int v18 = *a4;
    }
    memmove(v17, v18, v16);
  }
  strcpy((char *)v17 + v16, ":a");
  std::string::basic_string[abi:ne180100]<0>(&__p, "elementwise");
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v49, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  }
  else {
    std::string v49 = v43;
  }
  char v19 = (long long *)a1[3];
  if (*((char *)v19 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v19, *((void *)v19 + 1));
  }
  else
  {
    long long v20 = *v19;
    v50.__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v20;
  }
  long long v25 = 0;
  uint64_t v26 = 0;
  std::string v27 = 0;
  char v22 = (std::string *)&v25;
  LOBYTE(v23) = 0;
  long long v25 = (std::string *)operator new(0x30uLL);
  uint64_t v26 = v25;
  std::string v27 = v25 + 2;
  uint64_t v26 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v27, (long long *)&v49, (long long *)&v51, v25);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v47 = *(std::string *)a3;
  }
  char v22 = 0;
  int v23 = 0;
  int v24 = 0;
  uint64_t v44 = &v22;
  LOBYTE(v45) = 0;
  char v22 = (std::string *)operator new(0x18uLL);
  int v23 = v22;
  int v24 = v22 + 1;
  int v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v24, (long long *)&v47, (long long *)&v48, v22);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v44, a2, (uint64_t)&__p, (uint64_t)&v54, (uint64_t)&v51, (uint64_t)v25, (uint64_t)v26, (uint64_t *)&v22);
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  std::string v46 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  for (uint64_t j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v50.__r_.__value_.__r.__words[j + 2]) < 0) {
      operator delete(*(void **)((char *)&v49 + j * 8 + 24));
    }
  }
  if (v30 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
}

void sub_192A0F3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,char *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  a45 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  uint64_t v52 = 0;
  uint64_t v53 = v50 - 224;
  while (1)
  {
    if (*(char *)(v53 + v52 + 47) < 0) {
      operator delete(*(void **)(v53 + v52 + 24));
    }
    v52 -= 24;
    if (v52 == -48)
    {
      if (a20 < 0) {
        operator delete(__p);
      }
      if (*(char *)(v50 - 89) < 0) {
        operator delete(*(void **)(v50 - 112));
      }
      if (a41 < 0) {
        operator delete(a36);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_192A0F5A4()
{
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37C7F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE37C7F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_2>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v35 = *MEMORY[0x1E4F143B8];
  uint64_t v23[2] = 897988541;
  int v25 = 0;
  int v26 = 0;
  v23[0] = 101;
  v23[1] = 1065353216;
  char v24 = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  size_t v8 = (long long *)a1[1];
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v32.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v9;
  }
  int v10 = (long long *)a1[2];
  if (*((char *)v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v33.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v11;
  }
  long long v12 = (long long *)a1[3];
  if (*((char *)v12 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v12, *((void *)v12 + 1));
  }
  else
  {
    long long v13 = *v12;
    v34.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v13;
  }
  int v18 = 0;
  char v19 = 0;
  long long v20 = 0;
  long long v15 = (std::string *)&v18;
  LOBYTE(v16) = 0;
  int v18 = (std::string *)operator new(0x48uLL);
  char v19 = v18;
  long long v20 = v18 + 3;
  char v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20, (long long *)&v32, &v35, v18);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v30 = *(std::string *)a3;
  }
  long long v15 = 0;
  size_t v16 = 0;
  long long v17 = 0;
  std::string v27 = &v15;
  LOBYTE(v28) = 0;
  long long v15 = (std::string *)operator new(0x18uLL);
  size_t v16 = v15;
  long long v17 = v15 + 1;
  size_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v17, (long long *)&v30, (long long *)&v31, v15);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v27, a2, (uint64_t)__p, a4, (uint64_t)v23, (uint64_t)v18, (uint64_t)v19, (uint64_t *)&v15);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  char v29 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v34.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v34.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
}

void sub_192A0F938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  a32 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  uint64_t v39 = 0;
  uint64_t v40 = v37 - 144;
  while (1)
  {
    if (*(char *)(v40 + v39 + 71) < 0) {
      operator delete(*(void **)(v40 + v39 + 48));
    }
    v39 -= 24;
    if (v39 == -72)
    {
      if (a21 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37C7A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE37C7A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_1>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
}

void *std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso26generic_elementwise_kernel22build_grads_for_inputsERNS_18sequential_builderERNS_18build_grads_paramsEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::operator()(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v35 = *MEMORY[0x1E4F143B8];
  uint64_t v23[2] = 897988541;
  int v25 = 0;
  int v26 = 0;
  v23[0] = 101;
  v23[1] = 1065353216;
  char v24 = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  size_t v8 = (long long *)a1[1];
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v32.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v9;
  }
  int v10 = (long long *)a1[2];
  if (*((char *)v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v33.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v11;
  }
  long long v12 = (long long *)a1[3];
  if (*((char *)v12 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v12, *((void *)v12 + 1));
  }
  else
  {
    long long v13 = *v12;
    v34.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v13;
  }
  int v18 = 0;
  char v19 = 0;
  long long v20 = 0;
  long long v15 = (std::string *)&v18;
  LOBYTE(v16) = 0;
  int v18 = (std::string *)operator new(0x48uLL);
  char v19 = v18;
  long long v20 = v18 + 3;
  char v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20, (long long *)&v32, &v35, v18);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v30 = *(std::string *)a3;
  }
  long long v15 = 0;
  size_t v16 = 0;
  long long v17 = 0;
  std::string v27 = &v15;
  LOBYTE(v28) = 0;
  long long v15 = (std::string *)operator new(0x18uLL);
  size_t v16 = v15;
  long long v17 = v15 + 1;
  size_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v17, (long long *)&v30, (long long *)&v31, v15);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v27, a2, (uint64_t)__p, a4, (uint64_t)v23, (uint64_t)v18, (uint64_t)v19, (uint64_t *)&v15);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  char v29 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v34.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v34.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
}

void sub_192A0FDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  a32 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  uint64_t v39 = 0;
  uint64_t v40 = v37 - 144;
  while (1)
  {
    if (*(char *)(v40 + v39 + 71) < 0) {
      operator delete(*(void **)(v40 + v39 + 48));
    }
    v39 -= 24;
    if (v39 == -72)
    {
      if (a21 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37C748;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE37C748;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0,std::allocator<Espresso::generic_elementwise_kernel::build_grads_for_inputs(Espresso::sequential_builder &,Espresso::build_grads_params &)::$_0>,void ()(Espresso::sequential_builder &,std::string const&,std::string const&)>::~__func()
{
}

void Espresso::generic_elementwise_kernel::backpropable(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  unsigned int v4 = *(_DWORD *)(a1 + 280) - 100;
  if (v4 > 0x11) {
    goto LABEL_10;
  }
  if (((1 << v4) & 0x20CF1) != 0)
  {
    uint64_t v5 = (Espresso::check_backpropable_result_t *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
    Espresso::check_backpropable_result_t::not_backpropable_on_all_inputs(v5, a3);
    return;
  }
  if (*(_DWORD *)(a1 + 280) == 101)
  {
    __int16 v6 = 256;
    char v7 = 1;
    std::vector<BOOL>::vector(__p, &v6, 3);
    std::vector<BOOL>::vector(a3, (uint64_t)__p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  else
  {
LABEL_10:
    Espresso::base_kernel::backpropable(a2, a3);
  }
}

void sub_192A10018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::vector(void *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a3);
    std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(a1, a2, &a2[a3], a3);
  }
  return a1;
}

void Espresso::shape_error_wrapper(void *a1, unint64_t a2)
{
  uint64_t v26[2] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "generic_elementwise_kernel: cannot broadcast:\n");
  unint64_t v4 = (uint64_t)(a1[1] - *a1) >> 6;
  if (v4 >= a2) {
    unint64_t v4 = a2;
  }
  if (v4)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      if ((v25 & 0x80u) == 0) {
        size_t v8 = v25;
      }
      else {
        size_t v8 = *(void *)v24;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v21, v8 + 1);
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v9 = &v21;
      }
      else {
        long long v9 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      if (v8)
      {
        if ((v25 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        memmove(v9, p_p, v8);
      }
      *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 9;
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v19, (const Espresso::layer_shape *)(*a1 + v6), 0);
      Espresso::layer_nd_shape::repr(&v20, (uint64_t)v19);
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v11 = &v20;
      }
      else {
        long long v11 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v20.__r_.__value_.__l.__size_;
      }
      long long v13 = std::string::append(&v21, (const std::string::value_type *)v11, size);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      long long v15 = std::string::append(&v22, "\n");
      size_t v16 = (void *)v15->__r_.__value_.__r.__words[0];
      v26[0] = v15->__r_.__value_.__l.__size_;
      *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if ((char)v25 < 0) {
        operator delete(__p);
      }
      std::string __p = v16;
      *(void *)char v24 = v26[0];
      *(void *)&v24[7] = *(void *)((char *)v26 + 7);
      unsigned __int8 v25 = v17;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      ++v7;
      unint64_t v18 = (uint64_t)(a1[1] - *a1) >> 6;
      if (v18 >= a2) {
        unint64_t v18 = a2;
      }
      v6 += 64;
    }
    while (v7 < v18);
  }
  if ((v25 & 0x80u) == 0) {
    uint64_t v5 = (const char *)&__p;
  }
  else {
    uint64_t v5 = (const char *)__p;
  }
  Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v5);
}

void sub_192A10290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_split_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)&long long v30 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v25, "split");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 16) + 8) - **(void **)(a3 + 16)) >> 3), 1uLL, (uint64_t)v25, 1);
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 3), *(int *)(a1 + 280), (uint64_t)v25, 0);
  uint64_t v6 = **(long long ***)(a3 + 16);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)v6, *((void *)v6 + 1));
  }
  else
  {
    long long v7 = *v6;
    v24.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), (uint64_t)&v24))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v23, (std::string::size_type)&v24, a3);
    __int16 v21 = 0;
    v20[0] = 0;
    v20[8] = 0;
    char v22 = *(unsigned char *)(a1 + 288);
    std::string::basic_string[abi:ne180100]<0>(__p, "concat");
    uint64_t v9 = *(void *)a3;
    size_t v8 = *(uint64_t **)(a3 + 8);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *v8, v8[1], 0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3));
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v29, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    }
    else {
      std::string v29 = v23;
    }
    int v10 = 0;
    long long v11 = 0;
    long long v12 = 0;
    std::string v27 = &v10;
    char v28 = 0;
    int v10 = (std::string *)operator new(0x18uLL);
    long long v11 = v10;
    long long v12 = v10 + 1;
    long long v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v12, (long long *)&v29, &v30, v10);
    Espresso::sequential_builder::add<Espresso::concat_params>(&v18, a2, (uint64_t)__p, v9, (uint64_t)v20, v13, v14, (uint64_t *)&v10);
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    std::string v27 = &v10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
}

void sub_192A10584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  *(void *)(v36 - 80) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 80));
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  if (*(char *)(v36 - 97) < 0) {
    operator delete(*(void **)(v36 - 120));
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_split_kernel::top_shapes_for_bottom_shapes(_DWORD *a1@<X0>, _OWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  *((void *)&v55 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = *((void *)*a2 + 4);
  long long v7 = (*a2)[1];
  *(_OWORD *)uint64_t v37 = **a2;
  *(_OWORD *)&v37[16] = v7;
  uint64_t v38 = v6;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v39, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v35, (const Espresso::layer_shape *)v37, 0);
  if (*(_DWORD *)((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 320))(a1) + 16))
  {
    int v8 = a1[73];
    if (v8 <= 0)
    {
      int v9 = *(_DWORD *)&v37[8];
      if (*(int *)&v37[8] >= 1) {
        int v9 = *(_DWORD *)&v37[8] - 1;
      }
      int v8 = (v9 >> 1) + 1;
    }
    *(_OWORD *)&v30[16] = *(_OWORD *)&v37[16];
    uint64_t v31 = v38;
    std::string v32 = 0;
    std::string v33 = 0;
    uint64_t v34 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v32, v39, (uint64_t)v40, (v40 - (unsigned char *)v39) >> 2);
    *(void *)long long v30 = *(void *)v37;
    *(_DWORD *)&v30[8] = v8;
    *(void *)&v30[12] = *(void *)&v37[12];
    *(_OWORD *)&v25[16] = *(_OWORD *)&v37[16];
    uint64_t v26 = v38;
    std::string __p = 0;
    char v28 = 0;
    uint64_t v29 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v39, (uint64_t)v40, (v40 - (unsigned char *)v39) >> 2);
    *(void *)unsigned __int8 v25 = *(void *)v37;
    *(_DWORD *)&v25[8] = *(_DWORD *)&v37[8] - v8;
    *(void *)&v25[12] = *(void *)&v37[12];
    long long v44 = *(_OWORD *)v30;
    long long v45 = *(_OWORD *)&v30[16];
    uint64_t v46 = v31;
    std::string v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v47, v32, (uint64_t)v33, (v33 - (unsigned char *)v32) >> 2);
    long long v50 = *(_OWORD *)v25;
    long long v51 = *(_OWORD *)&v25[16];
    uint64_t v52 = v26;
    uint64_t v53 = 0;
    v54[0] = 0;
    v54[1] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v53, __p, (uint64_t)v28, (v28 - (unsigned char *)__p) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    int v42 = a3;
    char v43 = 0;
    int v10 = operator new(0x80uLL);
    *a3 = (uint64_t)v10;
    a3[1] = (uint64_t)v10;
    a3[2] = (uint64_t)v10 + 128;
    uint64_t v11 = 0;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v44, &v55, (uint64_t)v10);
    do
    {
      long long v12 = (void *)v54[v11 - 1];
      if (v12)
      {
        v54[v11] = v12;
        operator delete(v12);
      }
      v11 -= 8;
    }
    while (v11 != -16);
    if (__p)
    {
      char v28 = __p;
      operator delete(__p);
    }
    if (v32)
    {
      std::string v33 = v32;
      operator delete(v32);
    }
  }
  else
  {
    int v13 = 0;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v14 = "generic_split_kernel: Number of top blobs in split kernel does not evenly divide n axis";
    while (v13 < (*(int (**)(_DWORD *))(*(void *)a1 + 72))(a1))
    {
      long long v44 = *(_OWORD *)v37;
      long long v45 = *(_OWORD *)&v37[16];
      uint64_t v46 = v38;
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      std::string v47 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v47, v39, (uint64_t)v40, (v40 - (unsigned char *)v39) >> 2);
      if (a1[71] == 3)
      {
        int v15 = *(_DWORD *)&v37[12];
        if (v15 % (*(int (**)(_DWORD *))(*(void *)a1 + 72))(a1)) {
          goto LABEL_35;
        }
        int v16 = *(_DWORD *)&v37[12];
        HIDWORD(v44) = (v16 - 1) / (*(int (**)(_DWORD *))(*(void *)a1 + 72))(a1) + 1;
      }
      else
      {
        char v17 = *(int (**)(_DWORD *))(*(void *)a1 + 72);
        if (v36 > 3)
        {
          int v20 = *(_DWORD *)&v37[8];
          if (v20 % v17(a1))
          {
            uint64_t v14 = "generic_split_kernel: Number of top blobs in split kernel does not evenly divide channels axis.";
LABEL_35:
            Espresso::throw_exception_selector<Espresso::invalid_state_error>(v14);
          }
          int v21 = *(_DWORD *)&v37[8];
          DWORD2(v44) = (v21 - 1) / (*(int (**)(_DWORD *))(*(void *)a1 + 72))(a1) + 1;
        }
        else
        {
          int v18 = *(_DWORD *)v37;
          if (v18 % v17(a1))
          {
            int v24 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 72))(a1);
            Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int &,int &,int &,int &,int &>(v24, *(int *)v37, *(int *)&v37[4], *(int *)&v37[8], *(int *)&v37[12]);
          }
          int v19 = *(_DWORD *)v37;
          LODWORD(v44) = (v19 - 1) / (*(int (**)(_DWORD *))(*(void *)a1 + 72))(a1) + 1;
        }
      }
      unint64_t v22 = a3[1];
      if (v22 >= a3[2])
      {
        uint64_t v23 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, &v44);
      }
      else
      {
        std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, &v44);
        uint64_t v23 = v22 + 64;
      }
      a3[1] = v23;
      if (v47)
      {
        uint64_t v48 = v47;
        operator delete(v47);
      }
      ++v13;
    }
  }
  if (v39)
  {
    uint64_t v40 = v39;
    operator delete(v39);
  }
}

void sub_192A10B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void **a37)
{
  *(void *)(v37 + 8) = v38;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a37);
  uint64_t v41 = 0;
  uint64_t v42 = v39 - 208;
  while (1)
  {
    char v43 = *(void **)(v42 + v41 + 104);
    if (v43)
    {
      *(void *)(v42 + v41 + 112) = v43;
      operator delete(v43);
    }
    v41 -= 64;
    if (v41 == -128)
    {
      if (__p) {
        operator delete(__p);
      }
      if (a22) {
        operator delete(a22);
      }
      if (a34) {
        operator delete(a34);
      }
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int &,int &,int &,int &,int &>(int a1, int a2, int a3, int a4, int a5)
{
}

void Espresso::generic_general_padding_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, int **a3@<X8>)
{
  *((void *)&v21 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = *((void *)*a2 + 4);
  long long v7 = (*a2)[1];
  v16[0] = **a2;
  v16[1] = v7;
  uint64_t v17 = v6;
  std::string __p = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v8 = (int *)operator new(0x40uLL);
  *a3 = v8;
  a3[1] = v8;
  a3[2] = v8 + 16;
  a3[1] = (int *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v16, &v21, (uint64_t)v8);
  if (__p)
  {
    int v19 = __p;
    operator delete(__p);
  }
  int v9 = *(_DWORD *)(a1 + 308);
  if (v9 < 1 || (int v10 = *(_DWORD *)(a1 + 312), v10 < 1))
  {
    int v12 = *(_DWORD *)(a1 + 324);
    if (v12 <= 0)
    {
      uint64_t v14 = *a3;
    }
    else
    {
      int v13 = *(_DWORD *)(a1 + 328);
      uint64_t v14 = *a3;
      if (v13 >= 1)
      {
        *uint64_t v14 = v12;
        v14[1] = v13;
      }
    }
    int v15 = v14[1];
    *v14 += *(__int16 *)(a1 + 290) + *(__int16 *)(a1 + 288);
    v14[1] = *(__int16 *)(a1 + 294) + *(__int16 *)(a1 + 292) + v15;
  }
  else
  {
    uint64_t v11 = *a3;
    *uint64_t v11 = v9;
    v11[1] = v10;
  }
}

void sub_192A10DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  *(void *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

int32x2_t Espresso::generic_crop_kernel::top_shapes_for_bottom_shapes@<D0>(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t a3@<X8>)
{
  *((void *)&v16 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = *((void *)*a2 + 4);
  long long v7 = (*a2)[1];
  v11[0] = **a2;
  v11[1] = v7;
  uint64_t v12 = v6;
  std::string __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  int v8 = (char *)operator new(0x40uLL);
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = v8 + 64;
  *(void *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, v11, &v16, (uint64_t)v8);
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
  v9.i32[0] = *(_DWORD *)(a1 + 280);
  v9.i32[1] = *(_DWORD *)(a1 + 292);
  int32x2_t result = vmax_s32(vsub_s32(**(int32x2_t **)a3, vadd_s32(*(int32x2_t *)(a1 + 284), v9)), 0);
  **(int32x2_t **)a3 = result;
  return result;
}

void sub_192A10F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  *(void *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *Espresso::generic_deconvolution_kernel::dequantized_weights_from_ranges@<X0>(void *this@<X0>, void *a2@<X8>)
{
  if (this[63] && (uint64_t v3 = this, this[65]))
  {
    this = (void *)(*(uint64_t (**)(void *))(*this + 472))(this);
    uint64_t v4 = *((unsigned int *)v3 + 86);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = *a2;
      uint64_t v9 = *(int *)(*a2 + 12) * (uint64_t)*(int *)(*a2 + 8) * *(int *)(*a2 + 16);
      uint64_t v10 = *(void *)(v3[63] + 16);
      uint64_t v11 = (*(_DWORD *)(*a2 + 12) * *(_DWORD *)(*a2 + 8) * *(_DWORD *)(*a2 + 16));
      do
      {
        if ((int)v11 >= 1)
        {
          float v12 = *(float *)(v10 + 4 * v7);
          float v13 = *(float *)(v10 + 4 * (v7 + v4)) - v12;
          uint64_t v14 = (float *)(*(void *)(v8 + 24) + v6);
          this = (void *)(*(void *)(v3[65] + 24) + v5);
          uint64_t v15 = v11;
          do
          {
            unsigned int v16 = *(unsigned __int8 *)this;
            this = (void *)((char *)this + 1);
            *v14++ = v12 + (float)((float)((float)v16 * 0.0039216) * v13);
            --v15;
          }
          while (v15);
        }
        ++v7;
        v6 += 4 * v9;
        v5 += v9;
      }
      while (v7 != v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

void Espresso::generic_deconvolution_kernel::get_shuffled_weights_shape(Espresso::generic_deconvolution_kernel *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((_DWORD *)this + 106);
  if (v4 <= 1) {
    int v4 = 1;
  }
  int v5 = v4 * *((_DWORD *)this + 86);
  int v7 = v5 - 1;
  BOOL v6 = v5 < 1;
  int v8 = v5 + 2;
  if (!v6) {
    int v8 = v7;
  }
  int v9 = (v8 >> 2) + 1;
  int v10 = *((_DWORD *)this + 105);
  if (v10 <= 1) {
    int v10 = 1;
  }
  int v11 = v9 / v10;
  int v12 = *((_DWORD *)this + 87);
  int v13 = v12 - 1;
  BOOL v6 = v12 < 1;
  int v14 = v12 + 2;
  if (!v6) {
    int v14 = v13;
  }
  int v15 = (v14 >> 2) + 1;
  unsigned int v16 = operator new(0x18uLL);
  uint64_t v17 = *((void *)this + 44);
  *unsigned int v16 = 0x400000004;
  v16[1] = v17;
  *((_DWORD *)v16 + 4) = v11;
  *((_DWORD *)v16 + 5) = v15;
  *(_OWORD *)a2 = *(_OWORD *)v16;
  *(_DWORD *)(a2 + 16) = v11;
  *(_DWORD *)(a2 + 20) = 6;

  operator delete(v16);
}

void Espresso::generic_deconvolution_kernel::create_shuffled_weights_blob(Espresso::generic_deconvolution_kernel *this@<X0>, void *a2@<X8>)
{
  int v2 = *((_DWORD *)this + 106);
  if (v2 <= 1) {
    int v2 = 1;
  }
  int v3 = v2 * *((_DWORD *)this + 86);
  int v5 = v3 - 1;
  BOOL v4 = v3 < 1;
  int v6 = v3 + 2;
  if (!v4) {
    int v6 = v5;
  }
  int v7 = (v6 >> 2) + 1;
  int v8 = *((_DWORD *)this + 105);
  if (v8 <= 1) {
    int v8 = 1;
  }
  int v9 = v7 / v8;
  int v10 = *((_DWORD *)this + 87);
  int v11 = v10 - 1;
  BOOL v4 = v10 < 1;
  int v12 = v10 + 2;
  if (!v4) {
    int v12 = v11;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,6>,std::allocator<Espresso::blob<float,6>>,int &,int &,int &,int &,int &,int &,void>(a2, 4, 4, *((_DWORD *)this + 88), *((_DWORD *)this + 89), v9, (v12 >> 2) + 1);
}

void Espresso::generic_deconvolution_kernel::create_weights_blob(Espresso::generic_deconvolution_kernel *this@<X0>, void *a2@<X8>)
{
  int v2 = *((_DWORD *)this + 106);
  if (v2 <= 1) {
    int v2 = 1;
  }
  int v3 = v2 * *((_DWORD *)this + 86);
  int v4 = *((_DWORD *)this + 105);
  if (v4 <= 1) {
    int v4 = 1;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 88), *((_DWORD *)this + 89), v3 / v4, *((_DWORD *)this + 87));
}

double Espresso::generic_deconvolution_kernel::weights_blob_shape@<D0>(Espresso::generic_deconvolution_kernel *this@<X0>, uint64_t a2@<X8>)
{
  int v2 = *((_DWORD *)this + 106);
  if (v2 <= 1) {
    int v2 = 1;
  }
  int v3 = v2 * *((_DWORD *)this + 86);
  int v4 = *((_DWORD *)this + 105);
  if (v4 <= 1) {
    int v4 = 1;
  }
  int v5 = v3 / v4;
  int v6 = *((_DWORD *)this + 87);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)(a2 + 56) = 0;
  *(void *)a2 = *((void *)this + 44);
  *(_DWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 12) = v6;
  double result = NAN;
  *(void *)(a2 + 16) = 0xFFFFFFFF00000001;
  return result;
}

uint64_t Espresso::generic_deconvolution_kernel::input_blob_type(Espresso::generic_deconvolution_kernel *this, uint64_t a2)
{
  if (a2 == 1) {
    return 1;
  }
  else {
    return 2 * (a2 == 2);
  }
}

void Espresso::generic_convolution_grad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X1>, void *a2@<X8>)
{
  *((void *)&v12 + 1) = *MEMORY[0x1E4F143B8];
  int v3 = *(void **)a1;
  long long v4 = *(_OWORD *)(*(void *)a1 + 144);
  v7[0] = *(_OWORD *)(*(void *)a1 + 128);
  v7[1] = v4;
  int v5 = (const void *)v3[21];
  uint64_t v8 = v3[20];
  std::string __p = 0;
  int v10 = 0;
  uint64_t v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v5, v3[22], (uint64_t)(v3[22] - (void)v5) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_192A11314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = v18;
  *(void *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_convolution_grad_kernel::clear_weights(Espresso::generic_convolution_grad_kernel *this)
{
  unsigned int v1 = (uint64_t *)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)this + 35);

  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100](v1);
}

BOOL Espresso::generic_convolution_grad_kernel::input_blob_type(Espresso::generic_convolution_grad_kernel *this, uint64_t a2)
{
  return a2 == 1;
}

void Espresso::generic_convolution_weights_grad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, void *a2@<X8>)
{
  *((void *)&v11 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int8x16_t v4 = vextq_s8(*(int8x16_t *)(a1 + 344), (int8x16_t)vrev64q_s32(*(int32x4_t *)(a1 + 344)), 8uLL);
  unint64_t v5 = 0xFFFFFFFF00000001;
  int v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  int v3 = (char *)operator new(0x40uLL);
  *a2 = v3;
  a2[1] = v3;
  a2[2] = v3 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), (long long *)v4.i8, &v11, (uint64_t)v3);
  if (__p)
  {
    int v9 = __p;
    operator delete(__p);
  }
}

void sub_192A1147C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  *(void *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_convolution_weights_grad_kernel::input_blob_type(Espresso::generic_convolution_weights_grad_kernel *this, uint64_t a2)
{
  return a2 == 2;
}

double Espresso::generic_pool_grad_kernel::on_resized(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 336))
  {
    double result = *(double *)(*(void *)(*(void *)a3 + 16) + 8);
    *(double *)(a1 + 284) = result;
  }
  return result;
}

void Espresso::generic_pool_grad_kernel::top_shapes_for_bottom_shapes(uint64_t *a1@<X1>, void *a2@<X8>)
{
  *((void *)&v12 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  if (a1[1] - *a1 != 128) {
    Espresso::throw_exception_selector<Espresso::generic_error>("generic_pool_grad_kernel: need the input blob of corresponding pool kernel as the second input to compute the top shape");
  }
  long long v4 = *(_OWORD *)(v3 + 80);
  v7[0] = *(_OWORD *)(v3 + 64);
  v7[1] = v4;
  unint64_t v5 = *(const void **)(v3 + 104);
  uint64_t v8 = *(void *)(v3 + 96);
  std::string __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v5, *(void *)(v3 + 112), (uint64_t)(*(void *)(v3 + 112) - (void)v5) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
}

void sub_192A115D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = v18;
  *(void *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_activation_grad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v35 + 1) = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 280) == 17)
  {
    unint64_t v5 = *a2;
    long long v6 = (*a2)[17];
    long long v21 = (*a2)[16];
    long long v22 = v6;
    uint64_t v7 = (const void *)*((void *)v5 + 37);
    uint64_t v23 = *((void *)v5 + 36);
    std::string __p = 0;
    unsigned __int8 v25 = 0;
    uint64_t v26 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v7, *((void *)v5 + 38), (uint64_t)(*((void *)v5 + 38) - (void)v7) >> 2);
    uint64_t v8 = *a2;
    long long v9 = (*a2)[17];
    v27[0] = (*a2)[16];
    v27[1] = v9;
    uint64_t v10 = (const void *)*((void *)v8 + 37);
    uint64_t v28 = *((void *)v8 + 36);
    memset(v29, 0, sizeof(v29));
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v29, v10, *((void *)v8 + 38), (uint64_t)(*((void *)v8 + 38) - (void)v10) >> 2);
    uint64_t v11 = *a2;
    uint64_t v12 = *((void *)*a2 + 4);
    long long v13 = (*a2)[1];
    long long v30 = **a2;
    long long v31 = v13;
    v34[0] = 0;
    v34[1] = 0;
    uint64_t v32 = v12;
    uint64_t v33 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v33, *((const void **)v11 + 5), *((void *)v11 + 6), (uint64_t)(*((void *)v11 + 6) - *((void *)v11 + 5)) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    int v14 = (char *)operator new(0xC0uLL);
    *a3 = v14;
    a3[1] = v14;
    a3[2] = v14 + 192;
    uint64_t v15 = 0;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v21, &v35, (uint64_t)v14);
    do
    {
      unsigned int v16 = (void *)v34[v15 - 1];
      if (v16)
      {
        v34[v15] = v16;
        operator delete(v16);
      }
      v15 -= 8;
    }
    while (v15 != -24);
  }
  else
  {
    uint64_t v17 = *a2;
    uint64_t v18 = *((void *)*a2 + 4);
    long long v19 = (*a2)[1];
    long long v21 = **a2;
    long long v22 = v19;
    uint64_t v23 = v18;
    std::string __p = 0;
    unsigned __int8 v25 = 0;
    uint64_t v26 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v17 + 5), *((void *)v17 + 6), (uint64_t)(*((void *)v17 + 6) - *((void *)v17 + 5)) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v20 = (char *)operator new(0x40uLL);
    *a3 = v20;
    a3[1] = v20;
    a3[2] = v20 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v21, v27, (uint64_t)v20);
    if (__p)
    {
      unsigned __int8 v25 = __p;
      operator delete(__p);
    }
  }
}

void sub_192A1181C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = v18;
  *(void *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_bias_kernel::supports_weight_key()
{
  return 0;
}

void Espresso::generic_bias_grad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)&long long v19 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 308))
  {
    *(_DWORD *)uint64_t v7 = *(_DWORD *)(a1 + 304);
    uint64_t v8 = 0;
    *(void *)&v7[4] = 0;
    int v9 = 1;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v7, 0, (uint64_t)&v12);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v10 = a2;
    char v11 = 0;
    uint64_t v3 = (char *)operator new(0x40uLL);
    *a2 = v3;
    a2[1] = v3;
    a2[2] = v3 + 64;
    uint64_t v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), (long long *)&v12, &v19, (uint64_t)v3);
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 304);
    long long v16 = 0u;
    *(_OWORD *)std::string __p = 0u;
    uint64_t v18 = 0;
    uint64_t v12 = 0x100000001;
    int v13 = v5;
    uint64_t v14 = 0x100000001;
    int v15 = -1;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    *(void *)uint64_t v7 = a2;
    v7[8] = 0;
    long long v6 = (char *)operator new(0x40uLL);
    *a2 = v6;
    a2[1] = v6;
    a2[2] = v6 + 64;
    uint64_t v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), (long long *)&v12, &v19, (uint64_t)v6);
  }
  a2[1] = v4;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_192A11A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v22 = v21;
  *(void *)(v20 + 8) = v22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_batchnorm_kernel::get_batchnorm_params_shape@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 4 * *(_DWORD *)(this + 304);
  *(void *)(a2 + 12) = 0;
  *(void *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 20) = 1;
  return this;
}

void Espresso::generic_batchnorm_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)&long long v59 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1 + 304;
  long long v6 = *(std::string::size_type **)(a3 + 16);
  std::string::size_type v7 = *v6;
  std::string::size_type v8 = v6[1] - *v6;
  if (*(_DWORD *)(a1 + 308))
  {
    if (v8 != 72) {
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("in order to take gradient of a training mode batchnorm layer, 3 inputs (x, gamma, beta) are needed");
    }
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v7)|| std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v7 + 24)|| std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v7 + 48))
    {
      int v9 = **(long long ***)(a3 + 8);
      Espresso::blob_grad_contrib_name((uint64_t)&v45, v7, a3);
      Espresso::blob_grad_contrib_name((uint64_t)&v58, v7 + 24, a3);
      Espresso::blob_grad_contrib_name((uint64_t)&v44, v7 + 48, a3);
      uint64_t v10 = **(void **)(a3 + 24);
      std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm_grad");
      uint64_t v11 = *(void *)a3;
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v12 = *v9;
        v52.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v12;
      }
      if (*(char *)(v10 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(v10 + 24), *(void *)(v10 + 32));
      }
      else
      {
        long long v16 = *(_OWORD *)(v10 + 24);
        v53.__r_.__value_.__r.__words[2] = *(void *)(v10 + 40);
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v16;
      }
      if (*(char *)(v10 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(v10 + 48), *(void *)(v10 + 56));
      }
      else
      {
        long long v17 = *(_OWORD *)(v10 + 48);
        v54.__r_.__value_.__r.__words[2] = *(void *)(v10 + 64);
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v17;
      }
      if (*(char *)(v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
      }
      else
      {
        long long v18 = *(_OWORD *)v7;
        v55.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
        *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v18;
      }
      if (*(char *)(v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(v7 + 24), *(void *)(v7 + 32));
      }
      else
      {
        long long v19 = *(_OWORD *)(v7 + 24);
        v56.__r_.__value_.__r.__words[2] = *(void *)(v7 + 40);
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v19;
      }
      if (*(char *)(v7 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(v7 + 48), *(void *)(v7 + 56));
      }
      else
      {
        long long v20 = *(_OWORD *)(v7 + 48);
        v57.__r_.__value_.__r.__words[2] = *(void *)(v7 + 64);
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v20;
      }
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
      v48.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v37 = (std::string *)operator new(0x90uLL);
      uint64_t v38 = v37;
      uint64_t v39 = v37 + 6;
      uint64_t v38 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v39, (long long *)&v52, (long long *)&v58, v37);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v48, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
      }
      else {
        std::string v48 = v45;
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v49, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
      }
      else {
        std::string v49 = v58;
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v50, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
      }
      else {
        std::string v50 = v44;
      }
      uint64_t v34 = 0;
      long long v35 = 0;
      unsigned int v36 = 0;
      uint64_t v46 = &v34;
      char v47 = 0;
      uint64_t v34 = (std::string *)operator new(0x48uLL);
      long long v35 = v34;
      unsigned int v36 = v34 + 3;
      long long v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36, (long long *)&v48, (long long *)&v51, v34);
      Espresso::sequential_builder::add<Espresso::batchnorm_params>(&v42, a2, (uint64_t)__p, v11, v5, (uint64_t)v37, (uint64_t)v38, (uint64_t *)&v34);
      if (v43) {
        nitro::nitro_function::nitro_function(v43);
      }
      uint64_t v46 = &v34;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
      for (uint64_t i = 0; i != -9; i -= 3)
      {
        if (SHIBYTE(v50.__r_.__value_.__r.__words[i + 2]) < 0) {
          operator delete(*(void **)((char *)&v50.__r_.__value_.__l.__data_ + i * 8));
        }
      }
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
      for (uint64_t j = 0; j != -18; j -= 3)
      {
        if (SHIBYTE(v57.__r_.__value_.__r.__words[j + 2]) < 0) {
          operator delete(*(void **)((char *)&v57.__r_.__value_.__l.__data_ + j * 8));
        }
      }
      if (v41 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v23 = (void *)v45.__r_.__value_.__r.__words[0];
LABEL_75:
        operator delete(v23);
      }
    }
  }
  else
  {
    if (v8 != 48) {
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("in order to take gradient of a inference mode batchnorm layer, 2 inputs (x, batchnorm_corf) are needed");
    }
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v7 + 24))
    {
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("It's invalid to take gradient wrt batchnorm coefficient of inference mode batchnorm");
    }
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v7))
    {
      int v13 = **(long long ***)(a3 + 8);
      Espresso::blob_grad_contrib_name((uint64_t)&v48, v7, a3);
      std::string::basic_string[abi:ne180100]<0>(&v45, "batchnorm_grad");
      uint64_t v14 = *(void *)a3;
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)v13, *((void *)v13 + 1));
      }
      else
      {
        long long v15 = *v13;
        v52.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v15;
      }
      if (*(char *)(v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(v7 + 24), *(void *)(v7 + 32));
      }
      else
      {
        long long v24 = *(_OWORD *)(v7 + 24);
        v53.__r_.__value_.__r.__words[2] = *(void *)(v7 + 40);
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v24;
      }
      uint64_t v29 = 0;
      long long v30 = 0;
      long long v31 = 0;
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
      v58.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v29 = (std::string *)operator new(0x30uLL);
      long long v30 = v29;
      long long v31 = v29 + 2;
      long long v30 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v31, (long long *)&v52, (long long *)&v54, v29);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v58, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
      }
      else {
        std::string v58 = v48;
      }
      uint64_t v26 = 0;
      std::string v27 = 0;
      uint64_t v28 = 0;
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
      v44.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v26 = (std::string *)operator new(0x18uLL);
      std::string v27 = v26;
      uint64_t v28 = v26 + 1;
      std::string v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v28, (long long *)&v58, &v59, v26);
      Espresso::sequential_builder::add<Espresso::batchnorm_params>(&v32, a2, (uint64_t)&v45, v14, v5, (uint64_t)v29, (uint64_t)v30, (uint64_t *)&v26);
      if (v33) {
        nitro::nitro_function::nitro_function(v33);
      }
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
      for (uint64_t k = 0; k != -6; k -= 3)
      {
        if (SHIBYTE(v53.__r_.__value_.__r.__words[k + 2]) < 0) {
          operator delete(*(void **)((char *)&v52 + k * 8 + 24));
        }
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v23 = (void *)v48.__r_.__value_.__r.__words[0];
        goto LABEL_75;
      }
    }
  }
}

BOOL Espresso::generic_batchnorm_kernel::supports_weight_key(uint64_t a1, void *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v3 = a2[1];
    if (v3 != 16)
    {
      if (v3 != 20) {
        return 0;
      }
      a2 = (void *)*a2;
      return *a2 == 0x726F6E6863746162 && a2[1] == 0x736D617261705F6DLL && *((_DWORD *)a2 + 4) == 909207135;
    }
    return *(void *)*a2 == 0x726F6E6863746162 && *(void *)(*a2 + 8) == 0x736D617261705F6DLL;
  }
  else
  {
    int v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 != 16)
    {
      if (v2 != 20) {
        return 0;
      }
      return *a2 == 0x726F6E6863746162 && a2[1] == 0x736D617261705F6DLL && *((_DWORD *)a2 + 4) == 909207135;
    }
    return *a2 == 0x726F6E6863746162 && a2[1] == 0x736D617261705F6DLL;
  }
}

void Espresso::generic_batchnorm_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  if (!a6)
  {
    uint64_t v8 = 0;
    goto LABEL_6;
  }
  uint64_t v8 = *a6;
  if (!*a6)
  {
LABEL_6:
    int v9 = 0;
    goto LABEL_7;
  }
  int v9 = (std::__shared_weak_count *)a6[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t v11 = *(void *)(a3 + 8);
    if (v11 != 16)
    {
      if (v11 != 20) {
        goto LABEL_56;
      }
      uint64_t v10 = *(const std::string::value_type **)a3;
LABEL_14:
      uint64_t v12 = *(void *)v10;
      uint64_t v13 = *((void *)v10 + 1);
      int v14 = *((_DWORD *)v10 + 4);
      if (v12 == 0x726F6E6863746162 && v13 == 0x736D617261705F6DLL && v14 == 909207135)
      {
        v24[0] = v8;
        v24[1] = (uint64_t)v9;
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v25, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v24, 4 * *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
        if (v9) {
          nitro::nitro_function::nitro_function(v9);
        }
        uint64_t v17 = *(void *)(a1 + 16);
        uint64_t v22 = *(void *)(a1 + 8);
        uint64_t v23 = v17;
        if (v17) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        }
        if (*(char *)(a3 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
        }
        else {
          std::string v21 = *(std::string *)a3;
        }
        if (v26) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
        }
        Espresso::base_kernel::set_parameter_blob<unsigned short,1>();
      }
      goto LABEL_56;
    }
    if (**(void **)a3 != 0x726F6E6863746162 || *(void *)(*(void *)a3 + 8) != 0x736D617261705F6DLL) {
      goto LABEL_56;
    }
  }
  else
  {
    if (*(unsigned char *)(a3 + 23) != 16)
    {
      uint64_t v10 = (const std::string::value_type *)a3;
      if (*(unsigned char *)(a3 + 23) != 20) {
        goto LABEL_56;
      }
      goto LABEL_14;
    }
    if (*(void *)a3 != 0x726F6E6863746162 || *(void *)(a3 + 8) != 0x736D617261705F6DLL) {
      goto LABEL_56;
    }
  }
  v29[0] = v8;
  v29[1] = (uint64_t)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&src, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v29, 4 * *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  vImagePixelCount height = (std::__shared_weak_count *)src.height;
  data = src.data;
  uint64_t v28 = (std::__shared_weak_count *)src.height;
  if (src.height) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(src.height + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 392))(a1, &data);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (height) {
    nitro::nitro_function::nitro_function(height);
  }
LABEL_56:
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_192A127B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29)
{
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  if (a27) {
    nitro::nitro_function::nitro_function(a27);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::generic_batchnorm_kernel::input_blob_type(Espresso::generic_batchnorm_kernel *this, unint64_t a2)
{
  if (a2 >= 2 && !*((_DWORD *)this + 77)) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("inference mode batchnorm has at most 2 inputs");
  }
  if (a2 == 1) {
    return 1;
  }
  else {
    return 2 * (a2 == 2);
  }
}

void Espresso::generic_batchnorm_grad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v35 + 1) = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 308) && !*(_DWORD *)(a1 + 312))
  {
    int v9 = *a2;
    uint64_t v10 = *((void *)*a2 + 4);
    long long v11 = (*a2)[1];
    long long v21 = **a2;
    long long v22 = v11;
    uint64_t v23 = v10;
    std::string __p = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v9 + 5), *((void *)v9 + 6), (uint64_t)(*((void *)v9 + 6) - *((void *)v9 + 5)) >> 2);
    uint64_t v12 = *a2;
    uint64_t v13 = *((void *)*a2 + 12);
    long long v14 = (*a2)[5];
    v27[0] = (*a2)[4];
    v27[1] = v14;
    uint64_t v28 = v13;
    memset(v29, 0, sizeof(v29));
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v29, *((const void **)v12 + 13), *((void *)v12 + 14), (uint64_t)(*((void *)v12 + 14) - *((void *)v12 + 13)) >> 2);
    long long v15 = *a2;
    uint64_t v16 = *((void *)*a2 + 12);
    long long v17 = (*a2)[5];
    long long v30 = (*a2)[4];
    long long v31 = v17;
    v34[0] = 0;
    v34[1] = 0;
    uint64_t v32 = v16;
    uint64_t v33 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v33, *((const void **)v15 + 13), *((void *)v15 + 14), (uint64_t)(*((void *)v15 + 14) - *((void *)v15 + 13)) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    long long v18 = (char *)operator new(0xC0uLL);
    *a3 = v18;
    a3[1] = v18;
    a3[2] = v18 + 192;
    uint64_t v19 = 0;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v21, &v35, (uint64_t)v18);
    do
    {
      long long v20 = (void *)v34[v19 - 1];
      if (v20)
      {
        v34[v19] = v20;
        operator delete(v20);
      }
      v19 -= 8;
    }
    while (v19 != -24);
  }
  else
  {
    uint64_t v5 = *a2;
    uint64_t v6 = *((void *)*a2 + 4);
    long long v7 = (*a2)[1];
    long long v21 = **a2;
    long long v22 = v7;
    uint64_t v23 = v6;
    std::string __p = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v8 = (char *)operator new(0x40uLL);
    *a3 = v8;
    a3[1] = v8;
    a3[2] = v8 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v21, v27, (uint64_t)v8);
    if (__p)
    {
      uint64_t v25 = __p;
      operator delete(__p);
    }
  }
}

void sub_192A12AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v35 = v34;
  *(void *)(v33 + 8) = v35;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  uint64_t v37 = 0;
  while (1)
  {
    uint64_t v38 = *(void **)((char *)&a32 + v37);
    if (v38)
    {
      *(uint64_t *)((char *)&a33 + v37) = (uint64_t)v38;
      operator delete(v38);
    }
    v37 -= 64;
    if (v37 == -192) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t Espresso::generic_batchnorm_grad_kernel::input_blob_type(Espresso::generic_batchnorm_grad_kernel *this, uint64_t a2)
{
  unsigned int v2 = 2 * (a2 == 5);
  if (a2 == 4) {
    unsigned int v2 = 1;
  }
  if (*((_DWORD *)this + 77)) {
    return v2;
  }
  else {
    return a2 == 1;
  }
}

void Espresso::generic_l2_normalize_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v331 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v290, "l2 normalize");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((a3[2][1] - *a3[2]) >> 3), 1uLL, (uint64_t)v290, 1);
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((a3[3][1] - *a3[3]) >> 3), 1uLL, (uint64_t)v290, 0);
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3[5], *a3[2]))
  {
    uint64_t v6 = (long long *)*a3[1];
    std::string::size_type v7 = *a3[2];
    Espresso::blob_grad_contrib_name((uint64_t)&__sz, v7, (uint64_t)a3);
    uint64_t v8 = a1 + 280;
    switch(*(_DWORD *)(a1 + 284))
    {
      case 0:
        std::string::basic_string[abi:ne180100]<0>(&v294, "copy");
        uint64_t v9 = (uint64_t)*a3;
        LODWORD(v306.__r_.__value_.__l.__data_) = 0;
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v326, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        }
        else
        {
          long long v10 = *v6;
          v326.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
          *(_OWORD *)&v326.__r_.__value_.__l.__data_ = v10;
        }
        v285 = 0;
        v284 = 0;
        v286 = 0;
        v321.__r_.__value_.__r.__words[0] = (std::string::size_type)&v284;
        v321.__r_.__value_.__s.__data_[8] = 0;
        v284 = (std::string *)operator new(0x18uLL);
        v285 = v284;
        v286 = v284 + 1;
        v285 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v286, (long long *)&v326, (long long *)v327, v284);
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v321, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
        }
        else {
          std::string v321 = __sz;
        }
        v282 = 0;
        v281 = 0;
        v283 = 0;
        v314.__r_.__value_.__r.__words[0] = (std::string::size_type)&v281;
        v314.__r_.__value_.__s.__data_[8] = 0;
        v281 = (std::string *)operator new(0x18uLL);
        v282 = v281;
        v283 = v281 + 1;
        v282 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v283, (long long *)&v321, (long long *)v322, v281);
        Espresso::sequential_builder::add<Espresso::copy_params_t>(&v287, a2, (uint64_t)&v294, v9, (uint64_t)&v306, (uint64_t)v284, (uint64_t)v285, (uint64_t *)&v281);
        if (v288) {
          nitro::nitro_function::nitro_function(v288);
        }
        v314.__r_.__value_.__r.__words[0] = (std::string::size_type)&v281;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v314);
        if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v321.__r_.__value_.__l.__data_);
        }
        std::string v27 = &v284;
        goto LABEL_54;
      case 1:
        std::string::basic_string[abi:ne180100]<0>(__p, "_submean");
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)*a3[1], (const void **)__p, (uint64_t)&v270);
        uint64_t v268 = 0x2358637BDLL;
        int v269 = *(_DWORD *)(a1 + 288);
        std::string::basic_string[abi:ne180100]<0>(&v294, "l2_normalize");
        long long v15 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0) {
          size_t v16 = *((unsigned __int8 *)*a3 + 23);
        }
        else {
          size_t v16 = (*a3)[1];
        }
        long long v17 = &v321;
        std::string::basic_string[abi:ne180100]((uint64_t)&v321, v16 + 1);
        if ((v321.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v17 = (std::string *)v321.__r_.__value_.__r.__words[0];
        }
        if (v16)
        {
          if (v15[23] >= 0) {
            long long v18 = v15;
          }
          else {
            long long v18 = *(char **)v15;
          }
          memmove(v17, v18, v16);
        }
        *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 58;
        if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v19 = &v270;
        }
        else {
          uint64_t v19 = (std::string *)v270.__r_.__value_.__r.__words[0];
        }
        if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v270.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v270.__r_.__value_.__l.__size_;
        }
        long long v21 = std::string::append(&v321, (const std::string::value_type *)v19, size);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v326.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v326.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v314, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        }
        else
        {
          long long v23 = *v6;
          v314.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
          *(_OWORD *)&v314.__r_.__value_.__l.__data_ = v23;
        }
        v264 = 0;
        v263 = 0;
        v265 = 0;
        v306.__r_.__value_.__r.__words[0] = (std::string::size_type)&v263;
        v306.__r_.__value_.__s.__data_[8] = 0;
        v263 = (std::string *)operator new(0x18uLL);
        v264 = v263;
        v265 = v263 + 1;
        v264 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v265, (long long *)&v314, (long long *)v315, v263);
        if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v306, v270.__r_.__value_.__l.__data_, v270.__r_.__value_.__l.__size_);
        }
        else {
          std::string v306 = v270;
        }
        v261 = 0;
        v260 = 0;
        v262 = 0;
        v302.__r_.__value_.__r.__words[0] = (std::string::size_type)&v260;
        v302.__r_.__value_.__s.__data_[8] = 0;
        v260 = (std::string *)operator new(0x18uLL);
        v261 = v260;
        v262 = v260 + 1;
        v261 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v262, (long long *)&v306, (long long *)v307, v260);
        Espresso::sequential_builder::add<Espresso::l2_norm_params>(&v266, a2, (uint64_t)&v294, (uint64_t)&v326, (uint64_t)&v268, (uint64_t)v263, (uint64_t)v264, (uint64_t *)&v260);
        if (v267) {
          nitro::nitro_function::nitro_function(v267);
        }
        v302.__r_.__value_.__r.__words[0] = (std::string::size_type)&v260;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v302);
        if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v306.__r_.__value_.__l.__data_);
        }
        v306.__r_.__value_.__r.__words[0] = (std::string::size_type)&v263;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v306);
        if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v314.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v326.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v321.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v294.__r_.__value_.__l.__data_);
        }
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v7, (const void **)__p, (uint64_t)&__s);
        std::string::basic_string[abi:ne180100]<0>(&v294, "l2_normalize");
        long long v30 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0) {
          size_t v31 = *((unsigned __int8 *)*a3 + 23);
        }
        else {
          size_t v31 = (*a3)[1];
        }
        uint64_t v32 = &v321;
        std::string::basic_string[abi:ne180100]((uint64_t)&v321, v31 + 1);
        if ((v321.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v32 = (std::string *)v321.__r_.__value_.__r.__words[0];
        }
        if (v31)
        {
          if (v30[23] >= 0) {
            uint64_t v33 = v30;
          }
          else {
            uint64_t v33 = *(char **)v30;
          }
          memmove(v32, v33, v31);
        }
        *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v31) = 58;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_s = &__s;
        }
        else {
          p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        }
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v35 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v35 = __s.__r_.__value_.__l.__size_;
        }
        unsigned int v36 = std::string::append(&v321, (const std::string::value_type *)p_s, v35);
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v326.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v326.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v314, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
        }
        else
        {
          long long v38 = *(_OWORD *)v7;
          v314.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
          *(_OWORD *)&v314.__r_.__value_.__l.__data_ = v38;
        }
        v255 = 0;
        uint64_t v254 = 0;
        v256 = 0;
        v306.__r_.__value_.__r.__words[0] = (std::string::size_type)&v254;
        v306.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v254 = (std::string *)operator new(0x18uLL);
        v255 = v254;
        v256 = v254 + 1;
        v255 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v256, (long long *)&v314, (long long *)v315, v254);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v306, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v306 = __s;
        }
        v252 = 0;
        uint64_t v251 = 0;
        std::string v253 = 0;
        v302.__r_.__value_.__r.__words[0] = (std::string::size_type)&v251;
        v302.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v251 = (std::string *)operator new(0x18uLL);
        v252 = v251;
        std::string v253 = v251 + 1;
        v252 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v253, (long long *)&v306, (long long *)v307, v251);
        Espresso::sequential_builder::add<Espresso::l2_norm_params>(&v257, a2, (uint64_t)&v294, (uint64_t)&v326, (uint64_t)&v268, (uint64_t)v254, (uint64_t)v255, (uint64_t *)&v251);
        if (v258) {
          nitro::nitro_function::nitro_function(v258);
        }
        v302.__r_.__value_.__r.__words[0] = (std::string::size_type)&v251;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v302);
        if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v306.__r_.__value_.__l.__data_);
        }
        v306.__r_.__value_.__r.__words[0] = (std::string::size_type)&v254;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v306);
        if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v314.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v326.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v321.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v294.__r_.__value_.__l.__data_);
        }
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v39 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v39 = __s.__r_.__value_.__l.__size_;
        }
        uint64_t v40 = &v250;
        std::string::basic_string[abi:ne180100]((uint64_t)&v250, v39 + 7);
        if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v40 = (std::string *)v250.__r_.__value_.__r.__words[0];
        }
        if (v39)
        {
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v41 = &__s;
          }
          else {
            char v41 = (std::string *)__s.__r_.__value_.__r.__words[0];
          }
          memmove(v40, v41, v39);
        }
        strcpy((char *)v40 + v39, "_square");
        v294.__r_.__value_.__r.__words[0] = 13;
        v294.__r_.__value_.__l.__size_ = 0x40000000;
        v294.__r_.__value_.__r.__words[2] = 897988541;
        v295[0] = 0;
        memset(&v295[4], 0, 24);
        std::string::basic_string[abi:ne180100]<0>(&v326, "elementwise");
        uint64_t v42 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0) {
          size_t v43 = *((unsigned __int8 *)*a3 + 23);
        }
        else {
          size_t v43 = (*a3)[1];
        }
        std::string v44 = &v314;
        std::string::basic_string[abi:ne180100]((uint64_t)&v314, v43 + 1);
        if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string v44 = (std::string *)v314.__r_.__value_.__r.__words[0];
        }
        if (v43)
        {
          if (v42[23] >= 0) {
            std::string v45 = v42;
          }
          else {
            std::string v45 = *(char **)v42;
          }
          memmove(v44, v45, v43);
        }
        *(_WORD *)((char *)&v44->__r_.__value_.__l.__data_ + v43) = 58;
        if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v46 = &v250;
        }
        else {
          uint64_t v46 = (std::string *)v250.__r_.__value_.__r.__words[0];
        }
        if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v47 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v47 = v250.__r_.__value_.__l.__size_;
        }
        std::string v48 = std::string::append(&v314, (const std::string::value_type *)v46, v47);
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v321.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v306, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v306 = __s;
        }
        uint64_t v246 = 0;
        v245 = 0;
        v247 = 0;
        v302.__r_.__value_.__r.__words[0] = (std::string::size_type)&v245;
        v302.__r_.__value_.__s.__data_[8] = 0;
        v245 = (std::string *)operator new(0x18uLL);
        uint64_t v246 = v245;
        v247 = v245 + 1;
        uint64_t v246 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v247, (long long *)&v306, (long long *)v307, v245);
        if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v302, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
        }
        else {
          std::string v302 = v250;
        }
        v243 = 0;
        uint64_t v242 = 0;
        uint64_t v244 = 0;
        v300.__r_.__value_.__r.__words[0] = (std::string::size_type)&v242;
        v300.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v242 = (std::string *)operator new(0x18uLL);
        v243 = v242;
        uint64_t v244 = v242 + 1;
        v243 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v244, (long long *)&v302, (long long *)v303, v242);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v248, a2, (uint64_t)&v326, (uint64_t)&v321, (uint64_t)&v294, (uint64_t)v245, (uint64_t)v246, (uint64_t *)&v242);
        if (v249) {
          nitro::nitro_function::nitro_function(v249);
        }
        v300.__r_.__value_.__r.__words[0] = (std::string::size_type)&v242;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v300);
        if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v302.__r_.__value_.__l.__data_);
        }
        v302.__r_.__value_.__r.__words[0] = (std::string::size_type)&v245;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v302);
        if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v306.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v321.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v314.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v326.__r_.__value_.__l.__data_);
        }
        int v50 = *(_DWORD *)(a1 + 288);
        if (v50 <= 2)
        {
          int v51 = 0;
          if ((v50 & 0x80000000) == 0)
          {
            int v52 = v50 + 1;
            int v53 = 1;
            do
            {
              v51 += v53;
              v53 *= 2;
              --v52;
            }
            while (v52);
          }
        }
        else
        {
          int v51 = 31;
        }
        uint64_t v235 = 0x358637BD00000001;
        int v236 = v51;
        int v237 = 1;
        uint64_t v239 = 0;
        uint64_t v238 = 0;
        unint64_t v240 = 0xFFFFFFFF00000000;
        char v241 = 0;
        if (*(char *)(v7 + 23) >= 0) {
          size_t v54 = *(unsigned __int8 *)(v7 + 23);
        }
        else {
          size_t v54 = *(void *)(v7 + 8);
        }
        std::string v55 = &v234;
        std::string::basic_string[abi:ne180100]((uint64_t)&v234, v54 + 5);
        if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string v55 = (std::string *)v234.__r_.__value_.__r.__words[0];
        }
        if (v54)
        {
          if (*(char *)(v7 + 23) >= 0) {
            std::string v56 = (const std::string::value_type *)v7;
          }
          else {
            std::string v56 = *(const std::string::value_type **)v7;
          }
          memmove(v55, v56, v54);
        }
        strcpy((char *)v55 + v54, "_var_");
        std::string::basic_string[abi:ne180100]<0>(&v326, "reduce");
        std::string v57 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0) {
          size_t v58 = *((unsigned __int8 *)*a3 + 23);
        }
        else {
          size_t v58 = (*a3)[1];
        }
        long long v59 = &v314;
        std::string::basic_string[abi:ne180100]((uint64_t)&v314, v58 + 1);
        if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v59 = (std::string *)v314.__r_.__value_.__r.__words[0];
        }
        if (v58)
        {
          if (v57[23] >= 0) {
            BOOL v60 = v57;
          }
          else {
            BOOL v60 = *(char **)v57;
          }
          memmove(v59, v60, v58);
        }
        *(_WORD *)((char *)&v59->__r_.__value_.__l.__data_ + v58) = 58;
        if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned int v61 = &v234;
        }
        else {
          unsigned int v61 = (std::string *)v234.__r_.__value_.__r.__words[0];
        }
        if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v62 = HIBYTE(v234.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v62 = v234.__r_.__value_.__l.__size_;
        }
        int v63 = std::string::append(&v314, (const std::string::value_type *)v61, v62);
        long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
        v321.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v64;
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v306, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
        }
        else {
          std::string v306 = v250;
        }
        uint64_t v230 = 0;
        long long v229 = 0;
        std::string v231 = 0;
        v302.__r_.__value_.__r.__words[0] = (std::string::size_type)&v229;
        v302.__r_.__value_.__s.__data_[8] = 0;
        long long v229 = (std::string *)operator new(0x18uLL);
        uint64_t v230 = v229;
        std::string v231 = v229 + 1;
        uint64_t v230 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v231, (long long *)&v306, (long long *)v307, v229);
        if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v302, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
        }
        else {
          std::string v302 = v234;
        }
        long long v227 = 0;
        long long v226 = 0;
        long long v228 = 0;
        v300.__r_.__value_.__r.__words[0] = (std::string::size_type)&v226;
        v300.__r_.__value_.__s.__data_[8] = 0;
        long long v226 = (std::string *)operator new(0x18uLL);
        long long v227 = v226;
        long long v228 = v226 + 1;
        long long v227 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v228, (long long *)&v302, (long long *)v303, v226);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v232, a2, (uint64_t)&v326, (uint64_t)&v321, (uint64_t)&v235, (uint64_t)v229, (uint64_t)v230, (uint64_t *)&v226);
        if (v233) {
          nitro::nitro_function::nitro_function(v233);
        }
        v300.__r_.__value_.__r.__words[0] = (std::string::size_type)&v226;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v300);
        if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v302.__r_.__value_.__l.__data_);
        }
        v302.__r_.__value_.__r.__words[0] = (std::string::size_type)&v229;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v302);
        if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v306.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v321.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v314.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v326.__r_.__value_.__l.__data_);
        }
        if (*(char *)(v7 + 23) >= 0) {
          size_t v65 = *(unsigned __int8 *)(v7 + 23);
        }
        else {
          size_t v65 = *(void *)(v7 + 8);
        }
        uint64_t v66 = &v225;
        std::string::basic_string[abi:ne180100]((uint64_t)&v225, v65 + 4);
        if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v66 = (std::string *)v225.__r_.__value_.__r.__words[0];
        }
        if (v65)
        {
          if (*(char *)(v7 + 23) >= 0) {
            size_t v67 = (const std::string::value_type *)v7;
          }
          else {
            size_t v67 = *(const std::string::value_type **)v7;
          }
          memmove(v66, v67, v65);
        }
        strcpy((char *)v66 + v65, "_var");
        v326.__r_.__value_.__r.__words[0] = 0;
        v326.__r_.__value_.__l.__size_ = 869711765;
        v326.__r_.__value_.__r.__words[2] = 897988541;
        v327[0] = 0;
        uint64_t v328 = 0;
        uint64_t v330 = 0;
        uint64_t v329 = 0;
        std::string::basic_string[abi:ne180100]<0>(&v321, "elementwise");
        long long v68 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0) {
          size_t v69 = *((unsigned __int8 *)*a3 + 23);
        }
        else {
          size_t v69 = (*a3)[1];
        }
        long long v70 = &v306;
        std::string::basic_string[abi:ne180100]((uint64_t)&v306, v69 + 1);
        if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v70 = (std::string *)v306.__r_.__value_.__r.__words[0];
        }
        if (v69)
        {
          if (v68[23] >= 0) {
            std::string::size_type v71 = v68;
          }
          else {
            std::string::size_type v71 = *(char **)v68;
          }
          memmove(v70, v71, v69);
        }
        *(_WORD *)((char *)&v70->__r_.__value_.__l.__data_ + v69) = 58;
        if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v72 = &v225;
        }
        else {
          uint64_t v72 = (std::string *)v225.__r_.__value_.__r.__words[0];
        }
        if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v73 = HIBYTE(v225.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v73 = v225.__r_.__value_.__l.__size_;
        }
        long long v74 = std::string::append(&v306, (const std::string::value_type *)v72, v73);
        long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
        v314.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v314.__r_.__value_.__l.__data_ = v75;
        v74->__r_.__value_.__l.__size_ = 0;
        v74->__r_.__value_.__r.__words[2] = 0;
        v74->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v302, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
        }
        else {
          std::string v302 = v234;
        }
        std::string v221 = 0;
        uint64_t v220 = 0;
        long long v222 = 0;
        v300.__r_.__value_.__r.__words[0] = (std::string::size_type)&v220;
        v300.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v220 = (std::string *)operator new(0x18uLL);
        std::string v221 = v220;
        long long v222 = v220 + 1;
        std::string v221 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v222, (long long *)&v302, (long long *)v303, v220);
        if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v300, v225.__r_.__value_.__l.__data_, v225.__r_.__value_.__l.__size_);
        }
        else {
          std::string v300 = v225;
        }
        uint64_t v218 = 0;
        std::string v217 = 0;
        std::string v219 = 0;
        v216.__r_.__value_.__r.__words[0] = (std::string::size_type)&v217;
        v216.__r_.__value_.__s.__data_[8] = 0;
        std::string v217 = (std::string *)operator new(0x18uLL);
        uint64_t v218 = v217;
        std::string v219 = v217 + 1;
        uint64_t v218 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v219, (long long *)&v300, (long long *)&v301, v217);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v223, a2, (uint64_t)&v321, (uint64_t)&v314, (uint64_t)&v326, (uint64_t)v220, (uint64_t)v221, (uint64_t *)&v217);
        if (v224) {
          nitro::nitro_function::nitro_function(v224);
        }
        v216.__r_.__value_.__r.__words[0] = (std::string::size_type)&v217;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v216);
        if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v300.__r_.__value_.__l.__data_);
        }
        v300.__r_.__value_.__r.__words[0] = (std::string::size_type)&v220;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v300);
        if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v302.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v314.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v306.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v321.__r_.__value_.__l.__data_);
        }
        if (*(char *)(v7 + 23) >= 0) {
          size_t v76 = *(unsigned __int8 *)(v7 + 23);
        }
        else {
          size_t v76 = *(void *)(v7 + 8);
        }
        uint64_t v77 = &v216;
        std::string::basic_string[abi:ne180100]((uint64_t)&v216, v76 + 4);
        if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v77 = (std::string *)v216.__r_.__value_.__r.__words[0];
        }
        if (v76)
        {
          if (*(char *)(v7 + 23) >= 0) {
            std::string v78 = (const std::string::value_type *)v7;
          }
          else {
            std::string v78 = *(const std::string::value_type **)v7;
          }
          memmove(v77, v78, v76);
        }
        strcpy((char *)v77 + v76, "_std");
        v321.__r_.__value_.__r.__words[0] = 11;
        v321.__r_.__value_.__l.__size_ = 1065353216;
        v321.__r_.__value_.__r.__words[2] = 897988541;
        v322[0] = 0;
        uint64_t v323 = 0;
        uint64_t v325 = 0;
        uint64_t v324 = 0;
        std::string::basic_string[abi:ne180100]<0>(&v314, "elementwise");
        size_t v79 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0) {
          size_t v80 = *((unsigned __int8 *)*a3 + 23);
        }
        else {
          size_t v80 = (*a3)[1];
        }
        std::string v81 = &v302;
        std::string::basic_string[abi:ne180100]((uint64_t)&v302, v80 + 1);
        if ((v302.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string v81 = (std::string *)v302.__r_.__value_.__r.__words[0];
        }
        if (v80)
        {
          if (v79[23] >= 0) {
            long long v82 = v79;
          }
          else {
            long long v82 = *(char **)v79;
          }
          memmove(v81, v82, v80);
        }
        *(_WORD *)((char *)&v81->__r_.__value_.__l.__data_ + v80) = 58;
        if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v83 = &v216;
        }
        else {
          long long v83 = (std::string *)v216.__r_.__value_.__r.__words[0];
        }
        if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v84 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v84 = v216.__r_.__value_.__l.__size_;
        }
        std::string v85 = std::string::append(&v302, (const std::string::value_type *)v83, v84);
        long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
        v306.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v306.__r_.__value_.__l.__data_ = v86;
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v300, v225.__r_.__value_.__l.__data_, v225.__r_.__value_.__l.__size_);
        }
        else {
          std::string v300 = v225;
        }
        id v212 = 0;
        std::string v211 = 0;
        int v213 = 0;
        v319.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
        v319.__r_.__value_.__s.__data_[8] = 0;
        std::string v211 = (std::string *)operator new(0x18uLL);
        id v212 = v211;
        int v213 = v211 + 1;
        id v212 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v213, (long long *)&v300, (long long *)&v301, v211);
        if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v319, v216.__r_.__value_.__l.__data_, v216.__r_.__value_.__l.__size_);
        }
        else {
          std::string v319 = v216;
        }
        std::string v209 = 0;
        int v208 = 0;
        std::string v210 = 0;
        v205.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208;
        v205.__r_.__value_.__s.__data_[8] = 0;
        int v208 = (std::string *)operator new(0x18uLL);
        std::string v209 = v208;
        std::string v210 = v208 + 1;
        std::string v209 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v210, (long long *)&v319, (long long *)&v320, v208);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v214, a2, (uint64_t)&v314, (uint64_t)&v306, (uint64_t)&v321, (uint64_t)v211, (uint64_t)v212, (uint64_t *)&v208);
        if (v215) {
          nitro::nitro_function::nitro_function(v215);
        }
        v205.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
        if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v319.__r_.__value_.__l.__data_);
        }
        v319.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v319);
        if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v300.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v306.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v302.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v314.__r_.__value_.__l.__data_);
        }
        if (*((char *)v6 + 23) >= 0) {
          size_t v87 = *((unsigned __int8 *)v6 + 23);
        }
        else {
          size_t v87 = *((void *)v6 + 1);
        }
        size_t v88 = &v319;
        std::string::basic_string[abi:ne180100]((uint64_t)&v319, v87 + 9);
        if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          size_t v88 = (std::string *)v319.__r_.__value_.__r.__words[0];
        }
        if (v87)
        {
          if (*((char *)v6 + 23) >= 0) {
            long long v89 = (const std::string::value_type *)v6;
          }
          else {
            long long v89 = *(const std::string::value_type **)v6;
          }
          memmove(v88, v89, v87);
        }
        strcpy((char *)v88 + v87, "_by_x_sub");
        v314.__r_.__value_.__r.__words[0] = 1;
        v314.__r_.__value_.__l.__size_ = 1065353216;
        v314.__r_.__value_.__r.__words[2] = 897988541;
        v315[0] = 1;
        uint64_t v316 = 0;
        uint64_t v318 = 0;
        uint64_t v317 = 0;
        std::string::basic_string[abi:ne180100]<0>(&v302, "elementwise");
        uint64_t v90 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0) {
          size_t v91 = *((unsigned __int8 *)*a3 + 23);
        }
        else {
          size_t v91 = (*a3)[1];
        }
        std::string::size_type v92 = &v205;
        std::string::basic_string[abi:ne180100]((uint64_t)&v205, v91 + 1);
        if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v92 = (std::string *)v205.__r_.__value_.__r.__words[0];
        }
        if (v91)
        {
          if (v90[23] >= 0) {
            std::string v93 = v90;
          }
          else {
            std::string v93 = *(char **)v90;
          }
          memmove(v92, v93, v91);
        }
        *(_WORD *)((char *)&v92->__r_.__value_.__l.__data_ + v91) = 58;
        if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v94 = &v319;
        }
        else {
          long long v94 = (std::string *)v319.__r_.__value_.__r.__words[0];
        }
        if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v95 = HIBYTE(v319.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v95 = v319.__r_.__value_.__l.__size_;
        }
        std::string::size_type v96 = std::string::append(&v205, (const std::string::value_type *)v94, v95);
        long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
        v300.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v300.__r_.__value_.__l.__data_ = v97;
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v306, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        }
        else
        {
          long long v98 = *v6;
          v306.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
          *(_OWORD *)&v306.__r_.__value_.__l.__data_ = v98;
        }
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external((std::string *)v307, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)v307 = __s;
        }
        int v202 = 0;
        uint64_t v203 = 0;
        int v204 = 0;
        v312.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
        v312.__r_.__value_.__s.__data_[8] = 0;
        int v202 = (std::string *)operator new(0x30uLL);
        uint64_t v203 = v202;
        int v204 = v202 + 2;
        uint64_t v203 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v204, (long long *)&v306, (long long *)&v307[24], v202);
        if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v312, v319.__r_.__value_.__l.__data_, v319.__r_.__value_.__l.__size_);
        }
        else {
          std::string v312 = v319;
        }
        uint64_t v199 = 0;
        char v200 = 0;
        v201 = 0;
        v310.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199;
        v310.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v199 = (std::string *)operator new(0x18uLL);
        char v200 = v199;
        v201 = v199 + 1;
        char v200 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v201, (long long *)&v312, (long long *)&v313, v199);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v206, a2, (uint64_t)&v302, (uint64_t)&v300, (uint64_t)&v314, (uint64_t)v202, (uint64_t)v203, (uint64_t *)&v199);
        if (v207) {
          nitro::nitro_function::nitro_function(v207);
        }
        v310.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v310);
        if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v312.__r_.__value_.__l.__data_);
        }
        v312.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v312);
        for (uint64_t i = 0; i != -48; i -= 24)
        {
          if ((char)v307[i + 23] < 0) {
            operator delete(*(void **)((char *)&v306 + i + 24));
          }
        }
        if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v300.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v205.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v302.__r_.__value_.__l.__data_);
        }
        if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v100 = HIBYTE(v319.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v100 = v319.__r_.__value_.__l.__size_;
        }
        uint64_t v101 = &v205;
        std::string::basic_string[abi:ne180100]((uint64_t)&v205, v100 + 5);
        if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v101 = (std::string *)v205.__r_.__value_.__r.__words[0];
        }
        if (v100)
        {
          if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v102 = &v319;
          }
          else {
            std::string v102 = (std::string *)v319.__r_.__value_.__r.__words[0];
          }
          memmove(v101, v102, v100);
        }
        strcpy((char *)v101 + v100, "_mean");
        std::string::basic_string[abi:ne180100]<0>(&v306, "reduce");
        std::string v103 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0) {
          size_t v104 = *((unsigned __int8 *)*a3 + 23);
        }
        else {
          size_t v104 = (*a3)[1];
        }
        std::string v105 = &v300;
        std::string::basic_string[abi:ne180100]((uint64_t)&v300, v104 + 1);
        if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string v105 = (std::string *)v300.__r_.__value_.__r.__words[0];
        }
        if (v104)
        {
          if (v103[23] >= 0) {
            std::string v106 = v103;
          }
          else {
            std::string v106 = *(char **)v103;
          }
          memmove(v105, v106, v104);
        }
        *(_WORD *)((char *)&v105->__r_.__value_.__l.__data_ + v104) = 58;
        if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v107 = &v205;
        }
        else {
          std::string v107 = (std::string *)v205.__r_.__value_.__r.__words[0];
        }
        if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v108 = HIBYTE(v205.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v108 = v205.__r_.__value_.__l.__size_;
        }
        long long v109 = std::string::append(&v300, (const std::string::value_type *)v107, v108);
        long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
        v302.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v302.__r_.__value_.__l.__data_ = v110;
        v109->__r_.__value_.__l.__size_ = 0;
        v109->__r_.__value_.__r.__words[2] = 0;
        v109->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v312, v319.__r_.__value_.__l.__data_, v319.__r_.__value_.__l.__size_);
        }
        else {
          std::string v312 = v319;
        }
        uint64_t v194 = 0;
        uint64_t v195 = 0;
        long long v196 = 0;
        v310.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194;
        v310.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v194 = (std::string *)operator new(0x18uLL);
        uint64_t v195 = v194;
        long long v196 = v194 + 1;
        uint64_t v195 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v196, (long long *)&v312, (long long *)&v313, v194);
        if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v310, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
        }
        else {
          std::string v310 = v205;
        }
        uint64_t v191 = 0;
        uint64_t v192 = 0;
        uint64_t v193 = 0;
        v308.__r_.__value_.__r.__words[0] = (std::string::size_type)&v191;
        v308.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v191 = (std::string *)operator new(0x18uLL);
        uint64_t v192 = v191;
        uint64_t v193 = v191 + 1;
        uint64_t v192 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v193, (long long *)&v310, (long long *)&v311, v191);
        Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v197, a2, (uint64_t)&v306, (uint64_t)&v302, (uint64_t)&v235, (uint64_t)v194, (uint64_t)v195, (uint64_t *)&v191);
        if (v198) {
          nitro::nitro_function::nitro_function(v198);
        }
        v308.__r_.__value_.__r.__words[0] = (std::string::size_type)&v191;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v308);
        if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v310.__r_.__value_.__l.__data_);
        }
        v310.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v310);
        if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v312.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v302.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v300.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v306.__r_.__value_.__l.__data_);
        }
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v111 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v111 = __s.__r_.__value_.__l.__size_;
        }
        int v112 = &v312;
        std::string::basic_string[abi:ne180100]((uint64_t)&v312, v111 + 4);
        if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v112 = (std::string *)v312.__r_.__value_.__r.__words[0];
        }
        if (v111)
        {
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v113 = &__s;
          }
          else {
            std::string v113 = (std::string *)__s.__r_.__value_.__r.__words[0];
          }
          memmove(v112, v113, v111);
        }
        strcpy((char *)v112 + v111, "_mul");
        std::string::basic_string[abi:ne180100]<0>(&v302, "elementwise");
        long long v114 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0) {
          size_t v115 = *((unsigned __int8 *)*a3 + 23);
        }
        else {
          size_t v115 = (*a3)[1];
        }
        uint64_t v116 = &v310;
        std::string::basic_string[abi:ne180100]((uint64_t)&v310, v115 + 1);
        if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v116 = (std::string *)v310.__r_.__value_.__r.__words[0];
        }
        if (v115)
        {
          if (v114[23] >= 0) {
            std::string v117 = v114;
          }
          else {
            std::string v117 = *(char **)v114;
          }
          memmove(v116, v117, v115);
        }
        *(_WORD *)((char *)&v116->__r_.__value_.__l.__data_ + v115) = 58;
        if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v118 = &v312;
        }
        else {
          int v118 = (std::string *)v312.__r_.__value_.__r.__words[0];
        }
        if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v119 = HIBYTE(v312.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v119 = v312.__r_.__value_.__l.__size_;
        }
        std::string v120 = std::string::append(&v310, (const std::string::value_type *)v118, v119);
        long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
        v300.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v300.__r_.__value_.__l.__data_ = v121;
        v120->__r_.__value_.__l.__size_ = 0;
        v120->__r_.__value_.__r.__words[2] = 0;
        v120->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v306, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v306 = __s;
        }
        if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external((std::string *)v307, v205.__r_.__value_.__l.__data_, v205.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)v307 = v205;
        }
        long long v186 = 0;
        v187 = 0;
        v188 = 0;
        v308.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
        v308.__r_.__value_.__s.__data_[8] = 0;
        long long v186 = (std::string *)operator new(0x30uLL);
        v187 = v186;
        v188 = v186 + 2;
        v187 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v188, (long long *)&v306, (long long *)&v307[24], v186);
        if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v308, v312.__r_.__value_.__l.__data_, v312.__r_.__value_.__l.__size_);
        }
        else {
          std::string v308 = v312;
        }
        uint64_t v183 = 0;
        uint64_t v184 = 0;
        uint64_t v185 = 0;
        v180.__r_.__value_.__r.__words[0] = (std::string::size_type)&v183;
        v180.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v183 = (std::string *)operator new(0x18uLL);
        uint64_t v184 = v183;
        uint64_t v185 = v183 + 1;
        uint64_t v184 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v185, (long long *)&v308, (long long *)&v309, v183);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v189, a2, (uint64_t)&v302, (uint64_t)&v300, (uint64_t)&v314, (uint64_t)v186, (uint64_t)v187, (uint64_t *)&v183);
        if (v190) {
          nitro::nitro_function::nitro_function(v190);
        }
        v180.__r_.__value_.__r.__words[0] = (std::string::size_type)&v183;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v180);
        if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v308.__r_.__value_.__l.__data_);
        }
        v308.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v308);
        for (uint64_t j = 0; j != -48; j -= 24)
        {
          if ((char)v307[j + 23] < 0) {
            operator delete(*(void **)((char *)&v306 + j + 24));
          }
        }
        if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v300.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v310.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v302.__r_.__value_.__l.__data_);
        }
        if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v123 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v123 = __sz.__r_.__value_.__l.__size_;
        }
        int v124 = &v310;
        std::string::basic_string[abi:ne180100]((uint64_t)&v310, v123 + 4);
        if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v124 = (std::string *)v310.__r_.__value_.__r.__words[0];
        }
        if (v123)
        {
          if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_sz = &__sz;
          }
          else {
            p_sz = (std::string *)__sz.__r_.__value_.__r.__words[0];
          }
          memmove(v124, p_sz, v123);
        }
        strcpy((char *)v124 + v123, "_rhs");
        v306.__r_.__value_.__r.__words[0] = 102;
        v306.__r_.__value_.__l.__size_ = 1065353216;
        v306.__r_.__value_.__r.__words[2] = 897988541;
        v307[0] = 0;
        memset(&v307[4], 0, 24);
        std::string::basic_string[abi:ne180100]<0>(&v300, "elementwise");
        unsigned int v126 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0) {
          size_t v127 = *((unsigned __int8 *)*a3 + 23);
        }
        else {
          size_t v127 = (*a3)[1];
        }
        unsigned int v128 = &v180;
        std::string::basic_string[abi:ne180100]((uint64_t)&v180, v127 + 1);
        if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unsigned int v128 = (std::string *)v180.__r_.__value_.__r.__words[0];
        }
        if (v127)
        {
          if (v126[23] >= 0) {
            std::string v129 = v126;
          }
          else {
            std::string v129 = *(char **)v126;
          }
          memmove(v128, v129, v127);
        }
        *(_WORD *)((char *)&v128->__r_.__value_.__l.__data_ + v127) = 58;
        if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v130 = &v310;
        }
        else {
          uint64_t v130 = (std::string *)v310.__r_.__value_.__r.__words[0];
        }
        if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v131 = HIBYTE(v310.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v131 = v310.__r_.__value_.__l.__size_;
        }
        std::string v132 = std::string::append(&v180, (const std::string::value_type *)v130, v131);
        long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
        v308.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v308.__r_.__value_.__l.__data_ = v133;
        v132->__r_.__value_.__l.__size_ = 0;
        v132->__r_.__value_.__r.__words[2] = 0;
        v132->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v302, v312.__r_.__value_.__l.__data_, v312.__r_.__value_.__l.__size_);
        }
        else {
          std::string v302 = v312;
        }
        if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external((std::string *)v303, v225.__r_.__value_.__l.__data_, v225.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)v303 = v225;
        }
        uint64_t v177 = 0;
        int v178 = 0;
        uint64_t v179 = 0;
        v304.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
        v304.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v177 = (std::string *)operator new(0x30uLL);
        int v178 = v177;
        uint64_t v179 = v177 + 2;
        int v178 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v179, (long long *)&v302, (long long *)&v303[24], v177);
        if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v304, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
        }
        else {
          std::string v304 = v310;
        }
        uint64_t v174 = 0;
        int v175 = 0;
        uint64_t v176 = 0;
        v171.__r_.__value_.__r.__words[0] = (std::string::size_type)&v174;
        v171.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v174 = (std::string *)operator new(0x18uLL);
        int v175 = v174;
        uint64_t v176 = v174 + 1;
        int v175 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v176, (long long *)&v304, (long long *)&v305, v174);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v181, a2, (uint64_t)&v300, (uint64_t)&v308, (uint64_t)&v306, (uint64_t)v177, (uint64_t)v178, (uint64_t *)&v174);
        if (v182) {
          nitro::nitro_function::nitro_function(v182);
        }
        v171.__r_.__value_.__r.__words[0] = (std::string::size_type)&v174;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v171);
        if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v304.__r_.__value_.__l.__data_);
        }
        v304.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v304);
        for (uint64_t k = 0; k != -48; k -= 24)
        {
          if ((char)v303[k + 23] < 0) {
            operator delete(*(void **)((char *)&v302 + k + 24));
          }
        }
        if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v308.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v180.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v300.__r_.__value_.__l.__data_);
        }
        if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v135 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v135 = __sz.__r_.__value_.__l.__size_;
        }
        uint64_t v136 = &v308;
        std::string::basic_string[abi:ne180100]((uint64_t)&v308, v135 + 8);
        if ((v308.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v136 = (std::string *)v308.__r_.__value_.__r.__words[0];
        }
        if (v135)
        {
          if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v137 = &__sz;
          }
          else {
            char v137 = (std::string *)__sz.__r_.__value_.__r.__words[0];
          }
          memmove(v136, v137, v135);
        }
        strcpy((char *)v136 + v135, "_unscale");
        v302.__r_.__value_.__r.__words[0] = 33;
        v302.__r_.__value_.__l.__size_ = 1065353216;
        v302.__r_.__value_.__r.__words[2] = 897988541;
        v303[0] = 0;
        memset(&v303[4], 0, 24);
        std::string::basic_string[abi:ne180100]<0>(&v180, "elementwise");
        uint64_t v138 = (char *)*a3;
        if (*((char *)*a3 + 23) >= 0) {
          size_t v139 = *((unsigned __int8 *)*a3 + 23);
        }
        else {
          size_t v139 = (*a3)[1];
        }
        std::string v140 = &v171;
        std::string::basic_string[abi:ne180100]((uint64_t)&v171, v139 + 1);
        if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string v140 = (std::string *)v171.__r_.__value_.__r.__words[0];
        }
        if (v139)
        {
          if (v138[23] >= 0) {
            uint64_t v141 = v138;
          }
          else {
            uint64_t v141 = *(char **)v138;
          }
          memmove(v140, v141, v139);
        }
        *(_WORD *)((char *)&v140->__r_.__value_.__l.__data_ + v139) = 58;
        if ((v308.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v142 = &v308;
        }
        else {
          std::string v142 = (std::string *)v308.__r_.__value_.__r.__words[0];
        }
        if ((v308.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v143 = HIBYTE(v308.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v143 = v308.__r_.__value_.__l.__size_;
        }
        std::string v144 = std::string::append(&v171, (const std::string::value_type *)v142, v143);
        long long v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
        v304.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v304.__r_.__value_.__l.__data_ = v145;
        v144->__r_.__value_.__l.__size_ = 0;
        v144->__r_.__value_.__r.__words[2] = 0;
        v144->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v300, v270.__r_.__value_.__l.__data_, v270.__r_.__value_.__l.__size_);
        }
        else {
          std::string v300 = v270;
        }
        if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v301, v310.__r_.__value_.__l.__data_, v310.__r_.__value_.__l.__size_);
        }
        else {
          std::string v301 = v310;
        }
        uint64_t v168 = 0;
        uint64_t v169 = 0;
        int v170 = 0;
        v298.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
        v298.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v168 = (std::string *)operator new(0x30uLL);
        uint64_t v169 = v168;
        int v170 = v168 + 2;
        uint64_t v169 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v170, (long long *)&v300, (long long *)&v302, v168);
        if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v298, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
        }
        else {
          std::string v298 = v308;
        }
        uint64_t v165 = 0;
        int v166 = 0;
        uint64_t v167 = 0;
        v292 = &v165;
        char v293 = 0;
        uint64_t v165 = (std::string *)operator new(0x18uLL);
        int v166 = v165;
        uint64_t v167 = v165 + 1;
        int v166 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v167, (long long *)&v298, (long long *)&v299, v165);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v172, a2, (uint64_t)&v180, (uint64_t)&v304, (uint64_t)&v302, (uint64_t)v168, (uint64_t)v169, (uint64_t *)&v165);
        if (v173) {
          nitro::nitro_function::nitro_function(v173);
        }
        v292 = &v165;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v292);
        if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v298.__r_.__value_.__l.__data_);
        }
        v298.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
        for (uint64_t m = 0; m != -6; m -= 3)
        {
          if (SHIBYTE(v301.__r_.__value_.__r.__words[m + 2]) < 0) {
            operator delete(*(void **)((char *)&v300 + m * 8 + 24));
          }
        }
        if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v304.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v171.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v180.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v180, "elementwise");
        uint64_t v147 = (uint64_t)*a3;
        if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v300, v308.__r_.__value_.__l.__data_, v308.__r_.__value_.__l.__size_);
        }
        else {
          std::string v300 = v308;
        }
        if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v301, v216.__r_.__value_.__l.__data_, v216.__r_.__value_.__l.__size_);
        }
        else {
          std::string v301 = v216;
        }
        uint64_t v160 = 0;
        int v161 = 0;
        int v162 = 0;
        v304.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
        v304.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v160 = (std::string *)operator new(0x30uLL);
        int v161 = v160;
        int v162 = v160 + 2;
        int v161 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v162, (long long *)&v300, (long long *)&v302, v160);
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v304, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
        }
        else {
          std::string v304 = __sz;
        }
        uint64_t v157 = 0;
        uint64_t v158 = 0;
        uint64_t v159 = 0;
        v171.__r_.__value_.__r.__words[0] = (std::string::size_type)&v157;
        v171.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v157 = (std::string *)operator new(0x18uLL);
        uint64_t v158 = v157;
        uint64_t v159 = v157 + 1;
        uint64_t v158 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v159, (long long *)&v304, (long long *)&v305, v157);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v163, a2, (uint64_t)&v180, v147, (uint64_t)&v306, (uint64_t)v160, (uint64_t)v161, (uint64_t *)&v157);
        if (v164) {
          nitro::nitro_function::nitro_function(v164);
        }
        v171.__r_.__value_.__r.__words[0] = (std::string::size_type)&v157;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v171);
        if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v304.__r_.__value_.__l.__data_);
        }
        v304.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v304);
        for (uint64_t n = 0; n != -6; n -= 3)
        {
          if (SHIBYTE(v301.__r_.__value_.__r.__words[n + 2]) < 0) {
            operator delete(*(void **)((char *)&v300 + n * 8 + 24));
          }
        }
        if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v180.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v308.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v310.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v312.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v205.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v319.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v216.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v225.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v234.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v250.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v270.__r_.__value_.__l.__data_);
        }
        if ((v272 & 0x80000000) == 0) {
          goto LABEL_584;
        }
        uint64_t v28 = __p[0];
        break;
      case 2:
        std::string::basic_string[abi:ne180100]<0>(&v294, "l2_normalize");
        uint64_t v11 = (uint64_t)*a3;
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v326, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        }
        else
        {
          long long v12 = *v6;
          v326.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
          *(_OWORD *)&v326.__r_.__value_.__l.__data_ = v12;
        }
        v277 = 0;
        v276 = 0;
        v278 = 0;
        v321.__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
        v321.__r_.__value_.__s.__data_[8] = 0;
        v276 = (std::string *)operator new(0x18uLL);
        v277 = v276;
        v278 = v276 + 1;
        v277 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v278, (long long *)&v326, (long long *)v327, v276);
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v321, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
        }
        else {
          std::string v321 = __sz;
        }
        v274 = 0;
        v273 = 0;
        v275 = 0;
        v314.__r_.__value_.__r.__words[0] = (std::string::size_type)&v273;
        v314.__r_.__value_.__s.__data_[8] = 0;
        v273 = (std::string *)operator new(0x18uLL);
        v274 = v273;
        v275 = v273 + 1;
        v274 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v275, (long long *)&v321, (long long *)v322, v273);
        Espresso::sequential_builder::add<Espresso::l2_norm_params>(&v279, a2, (uint64_t)&v294, v11, v8, (uint64_t)v276, (uint64_t)v277, (uint64_t *)&v273);
        if (v280) {
          nitro::nitro_function::nitro_function(v280);
        }
        v314.__r_.__value_.__r.__words[0] = (std::string::size_type)&v273;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v314);
        if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v321.__r_.__value_.__l.__data_);
        }
        std::string v27 = &v276;
LABEL_54:
        v321.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
        if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v326.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v294.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_584;
        }
        uint64_t v28 = (void *)v294.__r_.__value_.__r.__words[0];
        break;
      case 3:
        std::string::basic_string[abi:ne180100]<0>(&v326, "l2_normalize_grad");
        uint64_t v13 = (uint64_t)*a3;
        if (*((char *)v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v294, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        }
        else
        {
          long long v14 = *v6;
          v294.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
          *(_OWORD *)&v294.__r_.__value_.__l.__data_ = v14;
        }
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v295, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
        }
        else
        {
          long long v24 = *(_OWORD *)v7;
          *(void *)&v295[16] = *(void *)(v7 + 16);
          *(_OWORD *)v295 = v24;
        }
        uint64_t v25 = (long long *)*a3[3];
        if (*((char *)v25 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v295[24], *(const std::string::value_type **)v25, *((void *)v25 + 1));
        }
        else
        {
          long long v26 = *v25;
          v296[0] = *((void *)v25 + 2);
          *(_OWORD *)&v295[24] = v26;
        }
        uint64_t v152 = 0;
        uint64_t v153 = 0;
        unint64_t v154 = 0;
        v321.__r_.__value_.__r.__words[0] = (std::string::size_type)&v152;
        v321.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v152 = (std::string *)operator new(0x48uLL);
        uint64_t v153 = v152;
        unint64_t v154 = v152 + 3;
        uint64_t v153 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v154, (long long *)&v294, (long long *)&v297, v152);
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v321, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
        }
        else {
          std::string v321 = __sz;
        }
        uint64_t v149 = 0;
        uint64_t v150 = 0;
        uint64_t v151 = 0;
        v314.__r_.__value_.__r.__words[0] = (std::string::size_type)&v149;
        v314.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v149 = (std::string *)operator new(0x18uLL);
        uint64_t v150 = v149;
        uint64_t v151 = v149 + 1;
        uint64_t v150 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v151, (long long *)&v321, (long long *)v322, v149);
        Espresso::sequential_builder::add<Espresso::l2_norm_params>(&v155, a2, (uint64_t)&v326, v13, v8, (uint64_t)v152, (uint64_t)v153, (uint64_t *)&v149);
        if (v156) {
          nitro::nitro_function::nitro_function(v156);
        }
        v314.__r_.__value_.__r.__words[0] = (std::string::size_type)&v149;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v314);
        if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v321.__r_.__value_.__l.__data_);
        }
        v321.__r_.__value_.__r.__words[0] = (std::string::size_type)&v152;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
        for (iuint64_t i = 0; ii != -9; ii -= 3)
        {
          if (SHIBYTE(v296[ii]) < 0) {
            operator delete(*(void **)&v295[ii * 8 + 24]);
          }
        }
        if ((SHIBYTE(v326.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_584;
        }
        uint64_t v28 = (void *)v326.__r_.__value_.__r.__words[0];
        break;
      default:
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("l2_normalize grad with mode %d", *(unsigned int *)(a1 + 284));
    }
    operator delete(v28);
LABEL_584:
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__sz.__r_.__value_.__l.__data_);
    }
  }
  if (v291 < 0) {
    operator delete(v290[0]);
  }
}

void sub_192A15428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x610] = (unint64_t)&a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x610]);
  uint64_t v74 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x5A0] + v74 + 47) < 0) {
      operator delete(*(void **)((char *)&STACK[0x5A0] + v74 + 24));
    }
    v74 -= 24;
    if (v74 == -48)
    {
      if (a47 < 0) {
        operator delete(__p);
      }
      if (SLOBYTE(STACK[0x687]) < 0) {
        operator delete((void *)STACK[0x670]);
      }
      if (SLOBYTE(STACK[0x6A7]) < 0) {
        operator delete((void *)STACK[0x690]);
      }
      if (SLOBYTE(STACK[0x6C7]) < 0) {
        operator delete((void *)STACK[0x6B0]);
      }
      if (a73 < 0) {
        operator delete(a72);
      }
      if (SLOBYTE(STACK[0x727]) < 0) {
        operator delete((void *)STACK[0x710]);
      }
      if (SLOBYTE(STACK[0x25F]) < 0) {
        operator delete((void *)STACK[0x248]);
      }
      if (SLOBYTE(STACK[0x2B7]) < 0) {
        operator delete((void *)STACK[0x2A0]);
      }
      if (SLOBYTE(STACK[0x30F]) < 0) {
        operator delete((void *)STACK[0x2F8]);
      }
      if (SLOBYTE(STACK[0x397]) < 0) {
        operator delete((void *)STACK[0x380]);
      }
      if (SLOBYTE(STACK[0x3EF]) < 0) {
        operator delete((void *)STACK[0x3D8]);
      }
      if (SLOBYTE(STACK[0x457]) < 0) {
        operator delete((void *)STACK[0x440]);
      }
      if (SLOBYTE(STACK[0x46F]) < 0) {
        operator delete((void *)STACK[0x458]);
      }
      if (SLOBYTE(STACK[0x507]) < 0) {
        operator delete((void *)STACK[0x4F0]);
      }
      if (SLOBYTE(STACK[0x51F]) < 0) {
        operator delete((void *)STACK[0x508]);
      }
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::generic_l2_normalize_grad_kernel::top_shapes_for_bottom_shapes(long long **a1@<X1>, void *a2@<X8>)
{
  *((void *)&v12 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v4 = *((void *)*a1 + 4);
  long long v5 = (*a1)[1];
  v7[0] = **a1;
  v7[1] = v5;
  uint64_t v8 = v4;
  std::string __p = 0;
  long long v10 = 0;
  uint64_t v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v3 + 5), *((void *)v3 + 6), (uint64_t)(*((void *)v3 + 6) - *((void *)v3 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_192A161B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = v18;
  *(void *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_inner_product_grad_kernel::input_blob_type(Espresso::generic_inner_product_grad_kernel *this, uint64_t a2)
{
  return a2 == 1;
}

void Espresso::generic_inner_product_weights_grad_kernel::top_shapes_for_bottom_shapes(int32x2_t *a1@<X0>, void *a2@<X8>)
{
  *(void *)&long long v16 = *MEMORY[0x1E4F143B8];
  if (a1[43].i8[0])
  {
    uint64_t v6 = (void *)a1[38];
    uint64_t v7 = 0;
    uint64_t v8 = 0x200000000;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v6, 0, (uint64_t)&v11);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v9 = a2;
    char v10 = 0;
    uint64_t v3 = (char *)operator new(0x40uLL);
    *a2 = v3;
    a2[1] = v3;
    a2[2] = v3 + 64;
    uint64_t v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), (long long *)&v11, &v16, (uint64_t)v3);
  }
  else
  {
    uint64_t v15 = 0;
    long long v13 = 0u;
    *(_OWORD *)std::string __p = 0u;
    int32x2_t v11 = vrev64_s32(a1[38]);
    long long v12 = xmmword_192DC5D50;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    uint64_t v6 = a2;
    LOBYTE(v7) = 0;
    long long v5 = (char *)operator new(0x40uLL);
    *a2 = v5;
    a2[1] = v5;
    a2[2] = v5 + 64;
    uint64_t v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), (long long *)&v11, &v16, (uint64_t)v5);
  }
  a2[1] = v4;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_192A16344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v22 = v21;
  *(void *)(v20 + 8) = v22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_inner_product_weights_grad_kernel::input_blob_type(Espresso::generic_inner_product_weights_grad_kernel *this, uint64_t a2)
{
  return a2 == 2;
}

const char *Espresso::generic_dropout_kernel::kernel_type_str(Espresso::generic_dropout_kernel *this)
{
  return "dropout";
}

void Espresso::generic_dropout_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *((void *)&v34 + 1) = *MEMORY[0x1E4F143B8];
  std::string::size_type v6 = **(void **)(a3 + 16);
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v6))
  {
    if (!*(_DWORD *)(a1 + 292)) {
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("do_scale must be true to backprop dropout op");
    }
    Espresso::blob_grad_contrib_name((uint64_t)&v27, v6, a3);
    uint64_t v7 = **(long long ***)(a3 + 8);
    uint64_t v8 = **(void **)(a3 + 24);
    uint64_t v23[2] = 897988541;
    char v24 = 0;
    int v25 = 0;
    int v26 = 0;
    v23[0] = 1;
    v23[1] = 1065353216;
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
    uint64_t v9 = *(void *)a3;
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v10 = *v7;
      v32.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v10;
    }
    if (*(char *)(v8 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v8 + 24), *(void *)(v8 + 32));
    }
    else
    {
      long long v11 = *(_OWORD *)(v8 + 24);
      v33.__r_.__value_.__r.__words[2] = *(void *)(v8 + 40);
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v11;
    }
    long long v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
    v30.__r_.__value_.__s.__data_[8] = 0;
    long long v16 = (std::string *)operator new(0x30uLL);
    uint64_t v17 = v16;
    uint64_t v18 = v16 + 2;
    uint64_t v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (long long *)&v32, &v34, v16);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v30, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    }
    else {
      std::string v30 = v27;
    }
    long long v13 = 0;
    long long v14 = 0;
    uint64_t v15 = 0;
    uint64_t v28 = &v13;
    char v29 = 0;
    long long v13 = (std::string *)operator new(0x18uLL);
    long long v14 = v13;
    uint64_t v15 = v13 + 1;
    long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (long long *)&v30, (long long *)&v31, v13);
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v21, a2, (uint64_t)__p, v9, (uint64_t)v23, (uint64_t)v16, (uint64_t)v17, (uint64_t *)&v13);
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    uint64_t v28 = &v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    for (uint64_t i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v33.__r_.__value_.__r.__words[i + 2]) < 0) {
        operator delete(*(void **)((char *)&v32 + i * 8 + 24));
      }
    }
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
}

void Espresso::generic_dropout_kernel::backpropable(void *a1@<X1>, void *a2@<X8>)
{
  std::vector<BOOL>::vector(__p, 1uLL);
  *(void *)__p[0] |= 1uLL;
  if (a1[1] - *a1 == 48)
  {
    char v4 = 0;
    std::vector<BOOL>::push_back((uint64_t *)__p, &v4);
  }
  std::vector<BOOL>::vector(a2, (uint64_t)__p);
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_192A167D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::generic_dropout_kernel::number_of_top_blobs(Espresso::generic_dropout_kernel *this)
{
  return 2;
}

void Espresso::generic_dropout_kernel::top_shapes_for_bottom_shapes(long long **a1@<X1>, void *a2@<X8>)
{
  *((void *)&v21 + 1) = *MEMORY[0x1E4F143B8];
  char v4 = *a1;
  uint64_t v5 = *((void *)*a1 + 4);
  long long v6 = (*a1)[1];
  v13[0] = **a1;
  v13[1] = v6;
  uint64_t v14 = v5;
  memset(v15, 0, sizeof(v15));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v15, *((const void **)v4 + 5), *((void *)v4 + 6), (uint64_t)(*((void *)v4 + 6) - *((void *)v4 + 5)) >> 2);
  uint64_t v7 = *a1;
  uint64_t v8 = *((void *)*a1 + 4);
  long long v9 = (*a1)[1];
  long long v16 = **a1;
  long long v17 = v9;
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v18 = v8;
  uint64_t v19 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v19, *((const void **)v7 + 5), *((void *)v7 + 6), (uint64_t)(*((void *)v7 + 6) - *((void *)v7 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  long long v10 = (char *)operator new(0x80uLL);
  *a2 = v10;
  a2[1] = v10;
  a2[2] = v10 + 128;
  uint64_t v11 = 0;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v13, &v21, (uint64_t)v10);
  do
  {
    long long v12 = (void *)v20[v11 - 1];
    if (v12)
    {
      v20[v11] = v12;
      operator delete(v12);
    }
    v11 -= 8;
  }
  while (v11 != -16);
}

void sub_192A1691C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v27 = v26;
  *(void *)(v25 + 8) = v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  uint64_t v29 = 0;
  while (1)
  {
    std::string v30 = *(void **)((char *)&a24 + v29);
    if (v30)
    {
      *(uint64_t *)((char *)&a25 + v29) = (uint64_t)v30;
      operator delete(v30);
    }
    v29 -= 64;
    if (v29 == -128) {
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::generic_load_constant_kernel_impl::~generic_load_constant_kernel_impl(Espresso::generic_load_constant_kernel_impl *this)
{
  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::abstract_kernel_with_weights<Espresso::load_constant_params>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
}

void Espresso::generic_context_transfer_kernel_impl::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  uint64_t v4 = a4[1];
  if (v4 - *a4 != a3[1] - *a3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid configuration");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v4 != v5)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    char v50 = 0;
    char v11 = 0;
    while (1)
    {
      uint64_t v12 = *a3;
      uint64_t v13 = *(void *)(*a3 + v9);
      long long v14 = *(_OWORD *)(v5 + v9);
      long long v61 = v14;
      if (*((void *)&v14 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v59 = 0;
      BOOL v60 = 0;
      char v15 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t *))(*(void *)v13 + 144))(v13, a2, &v61, &v59);
      if (v60) {
        nitro::nitro_function::nitro_function(v60);
      }
      if (*((void *)&v61 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v61 + 1));
      }
      if (v15) {
        goto LABEL_62;
      }
      uint64_t v16 = *(void *)(v5 + v9);
      long long v17 = *(_OWORD *)(v12 + v9);
      long long v58 = v17;
      if (*((void *)&v17 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v56 = 0;
      std::string v57 = 0;
      char v18 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t *))(*(void *)v16 + 152))(v16, a2, &v58, &v56);
      if (v57) {
        nitro::nitro_function::nitro_function(v57);
      }
      if (*((void *)&v58 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v58 + 1));
      }
      if (v18) {
        goto LABEL_62;
      }
      uint64_t v19 = *(uint64_t (****)(void))(*(void *)(*(void *)(v12 + v9) + 72) + 8);
      int v20 = (**v19)(v19);
      long long v21 = (Espresso *)(***(uint64_t (****)(void))(*(void *)(*(void *)(v5 + v9) + 72) + 8))();
      if (v20 == 100 || v20 == 0) {
        break;
      }
      if (v21 == 100 || v21 == 0)
      {
        uint64_t v27 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], v10);
        if (v27)
        {
          std::string::size_type v28 = v27[20];
          std::string::size_type v29 = v27[21];
          buf.__r_.__value_.__r.__words[0] = v28;
          buf.__r_.__value_.__l.__size_ = v29;
          if (v29) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
          }
          if (v28 && !*(unsigned char *)(a1 + 344))
          {
LABEL_59:
            (*(void (**)(void, uint64_t, std::string *))(**(void **)(v12 + v9) + 48))(*(void *)(v12 + v9), a2, &buf);
LABEL_60:
            if (buf.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
            }
            goto LABEL_62;
          }
        }
        else
        {
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
        }
        (*(void (**)(std::string *__return_ptr))(**(void **)(v5 + v9) + 192))(&v54);
        long long v35 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = 0uLL;
        std::string::size_type size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v35;
        if (size)
        {
          nitro::nitro_function::nitro_function(size);
          if (v54.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v54.__r_.__value_.__l.__size_);
          }
        }
        (*(void (**)(void, uint64_t, std::string *))(**(void **)(v5 + v9) + 40))(*(void *)(v5 + v9), a2, &buf);
        goto LABEL_59;
      }
      if (*(void *)(a1 + 328))
      {
        long long v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        int v39 = (***(uint64_t (****)(void))(*(void *)(a1 + 312) + 8))();
        std::to_string(&v52, v39);
        uint64_t v40 = std::string::insert(&v52, 0, "Invalid configuration dst=");
        long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v53.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        uint64_t v42 = std::string::append(&v53, " src=");
        long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        int v44 = (***(uint64_t (****)(void))(*(void *)(a1 + 328) + 8))();
        std::to_string(&v51, v44);
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v45 = &v51;
        }
        else {
          std::string v45 = (std::string *)v51.__r_.__value_.__r.__words[0];
        }
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v46 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v46 = v51.__r_.__value_.__l.__size_;
        }
        std::string::size_type v47 = std::string::append(&v54, (const std::string::value_type *)v45, v46);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v38, &buf);
        __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      long long v34 = Espresso::espresso_os_log_subsystem(v21, v22);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl(&dword_1920CB000, v34, OS_LOG_TYPE_ERROR, "Blob copy not implemented", (uint8_t *)&buf, 2u);
      }

LABEL_62:
      ++v10;
      uint64_t v5 = *a4;
      v9 += 16;
      if (v10 >= (a4[1] - *a4) >> 4) {
        goto LABEL_66;
      }
    }
    char v24 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], v10);
    if (v24)
    {
      std::string::size_type v25 = v24[21];
      buf.__r_.__value_.__r.__words[0] = v24[20];
      buf.__r_.__value_.__l.__size_ = v25;
      if (v25) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      }
      if (v11) {
        goto LABEL_43;
      }
    }
    else
    {
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
      if (v11) {
        goto LABEL_43;
      }
    }
    std::string v30 = *(unsigned int (****)(void))(*(void *)(*(void *)(v5 + v9) + 72) + 8);
    if ((**v30)(v30) != 10006)
    {
      uint64_t v31 = *(unsigned int (****)(void))(*(void *)(*(void *)(v5 + v9) + 72) + 8);
      if ((**v31)(v31) != 10007)
      {
        char v11 = 0;
LABEL_44:
        if (buf.__r_.__value_.__r.__words[0])
        {
          (*(void (**)(void, uint64_t, std::string *))(**(void **)(v5 + v9) + 40))(*(void *)(v5 + v9), a2, &buf);
          char v50 = 1;
        }
        else
        {
          (*(void (**)(std::string *__return_ptr))(**(void **)(v12 + v9) + 56))(&v54);
          long long v32 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
          *(_OWORD *)&v54.__r_.__value_.__l.__data_ = 0uLL;
          std::string v33 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v32;
          if (v33)
          {
            nitro::nitro_function::nitro_function(v33);
            if (v54.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v54.__r_.__value_.__l.__size_);
            }
          }
          (*(void (**)(void, uint64_t, std::string *))(**(void **)(v5 + v9) + 40))(*(void *)(v5 + v9), a2, &buf);
          (*(void (**)(void))(**(void **)a2 + 40))();
          (*(void (**)(void, uint64_t, std::string *))(**(void **)(v12 + v9) + 48))(*(void *)(v12 + v9), a2, &buf);
        }
        goto LABEL_60;
      }
    }
    (*(void (**)(void))(**(void **)a2 + 24))();
LABEL_43:
    char v11 = 1;
    goto LABEL_44;
  }
  char v11 = 0;
  char v50 = 0;
LABEL_66:
  if ((*(unsigned char *)(a1 + 346) != 0) | v50 & 1)
  {
    if ((v11 & 1) == 0) {
      (*(void (**)(void))(**(void **)a2 + 40))();
    }
  }
}

void sub_192A17170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v46 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
  }
  else if (!v46)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v45);
  goto LABEL_14;
}

void Espresso::generic_context_transfer_kernel_impl::~generic_context_transfer_kernel_impl(Espresso::generic_context_transfer_kernel_impl *this)
{
  Espresso::generic_context_transfer_kernel::~generic_context_transfer_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::generic_reshape_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
  Espresso::build_grads_for_reshape_kernels(a2, a3, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_192A17314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::build_grads_for_reshape_kernels(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *((void *)&v32 + 1) = *MEMORY[0x1E4F143B8];
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a2 + 24) + 8) - **(void **)(a2 + 24)) >> 3), 1uLL, a3, 0);
  uint64_t v5 = **(void **)(a2 + 16);
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a2 + 40), v5))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v25, **(void **)(a2 + 16), a2);
    v21[0] = 0;
    v21[1] = 0;
    long long v22 = xmmword_192DCA380;
    int v24 = 1;
    __int16 v23 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = **(long long ***)(a2 + 8);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v8 = *v7;
      v30.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v8;
    }
    if (*(char *)(v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v5, *(void *)(v5 + 8));
    }
    else
    {
      long long v9 = *(_OWORD *)v5;
      v31.__r_.__value_.__r.__words[2] = *(void *)(v5 + 16);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v9;
    }
    long long v14 = 0;
    char v15 = 0;
    uint64_t v16 = 0;
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
    v28.__r_.__value_.__s.__data_[8] = 0;
    long long v14 = (std::string *)operator new(0x30uLL);
    char v15 = v14;
    uint64_t v16 = v14 + 2;
    char v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v16, (long long *)&v30, &v32, v14);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v28, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
    }
    else {
      std::string v28 = v25;
    }
    char v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v26 = &v11;
    char v27 = 0;
    char v11 = (std::string *)operator new(0x18uLL);
    uint64_t v12 = v11;
    uint64_t v13 = v11 + 1;
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v13, (long long *)&v28, (long long *)&v29, v11);
    Espresso::sequential_builder::add<Espresso::reshape_params>(&v19, a1, (uint64_t)__p, v6, (uint64_t)v21, (uint64_t)v14, (uint64_t)v15, (uint64_t *)&v11);
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
    uint64_t v26 = &v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
    for (uint64_t i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v31.__r_.__value_.__r.__words[i + 2]) < 0) {
        operator delete(*(void **)((char *)&v30 + i * 8 + 24));
      }
    }
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
}

void sub_192A175D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35)
{
  *(void *)(v35 - 144) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 144));
  uint64_t v37 = 0;
  uint64_t v38 = v35 - 112;
  while (1)
  {
    if (*(char *)(v38 + v37 + 47) < 0) {
      operator delete(*(void **)(v38 + v37 + 24));
    }
    v37 -= 24;
    if (v37 == -48)
    {
      if (a21 < 0) {
        operator delete(__p);
      }
      if (a34 < 0) {
        operator delete(a29);
      }
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int &>(int a1, int a2)
{
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int &,int &,int &,int &,int &,int &,int &,int &,int &>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::reshape_like_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_reshape_like_kernel::kernel_type_str(Espresso::generic_reshape_like_kernel *this)
{
  return "reshape_like";
}

uint64_t Espresso::generic_reshape_like_kernel::has_dynamic_top_shape(Espresso::generic_reshape_like_kernel *this)
{
  return 0;
}

void Espresso::generic_reshape_like_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, Espresso::layer_shape **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v53 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if ((unint64_t)(v5 - *a2 - 385) <= 0xFFFFFFFFFFFFFEFELL) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_reshape_like_kernel: Must have between 2 and 6 inputs.");
  }
  uint64_t v7 = (Espresso::layer_shape *)((char *)v4 + 64);
  int v44 = 0;
  std::string v45 = 0;
  uint64_t v46 = 0;
  uint64_t v8 = v5 - (Espresso::layer_shape *)((char *)v4 + 64);
  if (!v8)
  {
    uint64_t v12 = 0;
    memset(&v43, 0, sizeof(v43));
LABEL_31:
    LODWORD(v24) = 0;
    __int16 v23 = *a2;
    long long v47 = 0uLL;
    LODWORD(v48) = 0;
    goto LABEL_32;
  }
  std::vector<Espresso::layer_nd_shape>::__vallocate[abi:ne180100](&v44, v8 >> 6);
  unint64_t v10 = v45;
  do
  {
    uint64_t v11 = Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v10, v7, 0);
    uint64_t v7 = (const Espresso::layer_shape *)((char *)v7 + 64);
    unint64_t v10 = (Espresso::layer_nd_shape *)(v11 + 24);
  }
  while (v7 != v5);
  std::string v45 = v10;
  uint64_t v12 = v44;
  memset(&v43, 0, sizeof(v43));
  if (v10 == v44) {
    goto LABEL_31;
  }
  uint64_t v13 = (unsigned int *)(a1 + 280);
  if ((unint64_t)((v10 - v44) / 24) <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = (v10 - v44) / 24;
  }
  char v15 = (unsigned char *)(a1 + 320);
  uint64_t v16 = "generic_reshape_like_kernel: begins[i] should be less than ends[i]";
  uint64_t v17 = (uint64_t)v44;
  do
  {
    Espresso::layer_nd_shape::shape_vector((std::vector<int> *)__p, v17);
    uint64_t v18 = (int)*v13;
    if ((v18 & 0x80000000) != 0) {
      unint64_t v19 = v18 + (((char *)__p[1] - (char *)__p[0]) >> 2);
    }
    else {
      unint64_t v19 = *v13;
    }
    if (*v15)
    {
      unint64_t v20 = ((char *)__p[1] - (char *)__p[0]) >> 2;
    }
    else
    {
      uint64_t v21 = (int)v13[5];
      if ((v21 & 0x80000000) != 0) {
        unint64_t v20 = v21 + (((char *)__p[1] - (char *)__p[0]) >> 2);
      }
      else {
        unint64_t v20 = v13[5];
      }
    }
    if (v20 <= v19) {
      goto LABEL_43;
    }
    if (v20 > *(int *)(v17 + 20))
    {
      uint64_t v16 = "generic_reshape_like_kernel: ends[i] should be less than rank inputs[i + 1]";
LABEL_43:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v16);
    }
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v43, v43.__end_, (char *)__p[0] + 4 * v19, (char *)__p[0] + 4 * v20, v20 - v19);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v17 += 24;
    ++v15;
    ++v13;
    --v14;
  }
  while (v14);
  begiuint64_t n = v43.__begin_;
  __int16 v23 = *a2;
  long long v47 = 0uLL;
  *(void *)&long long v48 = 0;
  unint64_t v24 = v43.__end_ - v43.__begin_;
  if (v43.__end_ != v43.__begin_)
  {
    if (v24 <= 1) {
      int64_t v25 = 1;
    }
    else {
      int64_t v25 = v43.__end_ - v43.__begin_;
    }
    uint64_t v26 = &v47;
    do
    {
      int v27 = *begin++;
      *(_DWORD *)uint64_t v26 = v27;
      uint64_t v26 = (long long *)((char *)v26 + 4);
      --v25;
    }
    while (v25);
  }
LABEL_32:
  DWORD1(v48) = v24;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v47, 0, (uint64_t)__p);
  uint64_t v28 = Espresso::layer_shape::total_dim(v23);
  if (v28 != Espresso::layer_shape::total_dim((Espresso::layer_shape *)__p))
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v35, v23, 0);
    Espresso::layer_nd_shape::repr((std::string *)&v47, (uint64_t)&v35);
    if ((SBYTE7(v48) & 0x80u) == 0) {
      std::string v30 = &v47;
    }
    else {
      std::string v30 = (long long *)v47;
    }
    uint64_t v37 = v30;
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v32, (const Espresso::layer_shape *)__p, 0);
    Espresso::layer_nd_shape::repr(&v33, (uint64_t)v32);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v31 = &v33;
    }
    else {
      std::string v31 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    long long v34 = v31;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*>("reshape_like input and output have different sizes: %s -> %s", &v37, &v34);
  }
  long long v47 = *(_OWORD *)__p;
  long long v48 = v39;
  uint64_t v49 = v40;
  char v50 = 0;
  std::string v51 = 0;
  uint64_t v52 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v50, v41, (uint64_t)v42, (v42 - (unsigned char *)v41) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v35 = a3;
  char v36 = 0;
  uint64_t v29 = (char *)operator new(0x40uLL);
  *a3 = v29;
  a3[1] = v29;
  a3[2] = v29 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v47, &v53, (uint64_t)v29);
  if (v50)
  {
    std::string v51 = v50;
    operator delete(v50);
  }
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
  if (v43.__begin_)
  {
    v43.__end_ = v43.__begin_;
    operator delete(v43.__begin_);
  }
  if (v12) {
    operator delete(v12);
  }
}

void sub_192A17AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  if (a29) {
    operator delete(a29);
  }
  if (a32) {
    operator delete(a32);
  }
  if (v35) {
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(std::vector<int> *a1, int *__dst, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = (int *)__src;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  value = a1->__end_cap_.__value_;
  std::vector<int>::pointer end = a1->__end_;
  if (a5 > value - end)
  {
    begiuint64_t n = a1->__begin_;
    unint64_t v13 = a5 + end - a1->__begin_;
    if (v13 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = __dst - begin;
    uint64_t v15 = (char *)value - (char *)begin;
    if (v15 >> 1 > v13) {
      unint64_t v13 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v13;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v16) {
      unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    int v27 = (int *)(v16 + 4 * v14);
    __v.__first_ = (std::__split_buffer<int>::pointer)v16;
    __v.__begin_ = v27;
    __v.__end_cap_.__value_ = (int *)(v16 + 4 * v17);
    uint64_t v28 = 4 * a5;
    uint64_t v29 = &v27[a5];
    do
    {
      int v30 = *v6++;
      *v27++ = v30;
      v28 -= 4;
    }
    while (v28);
    __v.__end_ = v29;
    std::vector<int>::__swap_out_circular_buffer(a1, &__v, __dst);
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
    return;
  }
  uint64_t v18 = (char *)end - (char *)__dst;
  uint64_t v19 = end - __dst;
  if (v19 >= a5)
  {
    unint64_t v20 = &__src[4 * a5];
    std::vector<int>::pointer v22 = a1->__end_;
LABEL_17:
    __int16 v23 = (char *)&__dst[a5];
    std::vector<int>::pointer v24 = &v22[-a5];
    int64_t v25 = v22;
    if (v24 < end)
    {
      int64_t v25 = v22;
      do
      {
        int v26 = *v24++;
        *v25++ = v26;
      }
      while (v24 < end);
    }
    a1->__end_ = v25;
    if (v22 != (std::vector<int>::pointer)v23) {
      memmove(&v22[-(((char *)v22 - v23) >> 2)], __dst, (char *)v22 - v23);
    }
    if (v20 != (char *)v6)
    {
      memmove(__dst, v6, v20 - (char *)v6);
    }
    return;
  }
  unint64_t v20 = &__src[4 * v19];
  int64_t v21 = a4 - v20;
  if (a4 != v20) {
    memmove(a1->__end_, &__src[4 * v19], a4 - v20);
  }
  std::vector<int>::pointer v22 = (std::vector<int>::pointer)((char *)end + v21);
  a1->__end_ = (std::vector<int>::pointer)((char *)end + v21);
  if (v18 >= 1) {
    goto LABEL_17;
  }
}

char *std::vector<Espresso::layer_nd_shape>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v3 = 3 * a2;
  double result = (char *)operator new(24 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

void Espresso::generic_tile_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *((void *)&v20 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  if (a2[1] - *a2 == 128)
  {
    uint64_t v19 = 0;
    *(_OWORD *)uint64_t v18 = 0u;
    *(_OWORD *)&v17[8] = 0u;
    v5.i64[0] = 0x100000001;
    v5.i64[1] = 0x100000001;
    int32x4_t v16 = v5;
    *(void *)uint64_t v17 = 0xFFFFFFFF00000001;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *(void *)&v11[0] = a3;
    BYTE8(v11[0]) = 0;
    uint64_t v6 = (char *)operator new(0x40uLL);
    *a3 = v6;
    a3[1] = v6;
    a3[2] = v6 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)v16.i8, &v20, (uint64_t)v6);
  }
  else
  {
    long long v8 = *(_OWORD *)(v4 + 16);
    uint64_t v9 = *(void *)(v4 + 32);
    int32x4_t v16 = *(int32x4_t *)v4;
    *(_OWORD *)uint64_t v17 = v8;
    *(void *)&v17[16] = v9;
    v18[0] = 0;
    v18[1] = 0;
    uint64_t v19 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v18, *(const void **)(v4 + 40), *(void *)(v4 + 48), (uint64_t)(*(void *)(v4 + 48) - *(void *)(v4 + 40)) >> 2);
    int32x4_t v16 = vmulq_s32(v16, *(int32x4_t *)(a1 + 280));
    *(_DWORD *)v17 *= *(_DWORD *)(a1 + 296);
    v11[0] = (__int128)v16;
    v11[1] = *(_OWORD *)v17;
    uint64_t v12 = *(void *)&v17[16];
    std::string __p = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v18[0], (uint64_t)v18[1], ((char *)v18[1] - (char *)v18[0]) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    unint64_t v10 = (char *)operator new(0x40uLL);
    *a3 = v10;
    a3[1] = v10;
    a3[2] = v10 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v11, (long long *)v16.i8, (uint64_t)v10);
    if (__p)
    {
      uint64_t v14 = __p;
      operator delete(__p);
    }
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
}

void sub_192A17F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  *(void *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_flatten_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)&long long v73 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v62, "flatten");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3[2] + 8) - *(void *)a3[2]) >> 3), 1uLL, (uint64_t)v62, 1);
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3[3] + 8) - *(void *)a3[3]) >> 3), 1uLL, (uint64_t)v62, 0);
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)a3[5], *(void *)a3[2]))
  {
    uint64_t v6 = (uint64_t **)(a2[10] + 184);
    *(void *)char v50 = *(void *)a3[2];
    uint64_t v7 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, *(void **)v50, (long long **)v50);
    long long v8 = *(_OWORD *)(v7 + 72);
    long long v56 = *(_OWORD *)(v7 + 56);
    long long v57 = v8;
    uint64_t v9 = (const void *)*((void *)v7 + 12);
    uint64_t v58 = *((void *)v7 + 11);
    uint64_t v59 = 0;
    BOOL v60 = 0;
    uint64_t v61 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v59, v9, *((void *)v7 + 13), (uint64_t)(*((void *)v7 + 13) - (void)v9) >> 2);
    Espresso::blob_grad_contrib_name((uint64_t)&v55, *(void *)a3[2], (uint64_t)a3);
    int v10 = *(_DWORD *)(a1 + 280);
    if (v10 == 1)
    {
      uint64_t v14 = *(const void ***)a3[1];
      if (*((char *)v14 + 23) >= 0) {
        size_t v15 = *((unsigned __int8 *)v14 + 23);
      }
      else {
        size_t v15 = (size_t)v14[1];
      }
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v15 + 9);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v15)
      {
        if (*((char *)v14 + 23) >= 0) {
          uint64_t v17 = v14;
        }
        else {
          uint64_t v17 = *v14;
        }
        memmove(p_p, v17, v15);
      }
      strcpy((char *)p_p + v15, "_reshaped");
      __int16 v53 = 1;
      int v54 = 1;
      int v52 = 0;
      *(_DWORD *)char v50 = DWORD2(v56);
      *(void *)&v50[4] = v56;
      long long v51 = xmmword_192DCA6C0;
      std::string::basic_string[abi:ne180100]<0>(&v72, "reshape");
      uint64_t v18 = (char *)*a3;
      if (*(char *)(*a3 + 23) >= 0) {
        size_t v19 = *(unsigned __int8 *)(*a3 + 23);
      }
      else {
        size_t v19 = *(void *)(*a3 + 8);
      }
      long long v20 = &v70;
      std::string::basic_string[abi:ne180100]((uint64_t)&v70, v19 + 8);
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v20 = (std::string *)v70.__r_.__value_.__r.__words[0];
      }
      if (v19)
      {
        if (v18[23] >= 0) {
          int64_t v21 = v18;
        }
        else {
          int64_t v21 = *(char **)v18;
        }
        memmove(v20, v21, v19);
      }
      strcpy((char *)v20 + v19, "_reshape");
      std::vector<int>::pointer v22 = *(long long **)a3[1];
      if (*((char *)v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v22, *((void *)v22 + 1));
      }
      else
      {
        long long v23 = *v22;
        v68.__r_.__value_.__r.__words[2] = *((void *)v22 + 2);
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v23;
      }
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
      v66.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v36 = (std::string *)operator new(0x18uLL);
      uint64_t v37 = v36;
      uint64_t v38 = v36 + 1;
      uint64_t v37 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v38, (long long *)&v68, (long long *)&v69, v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v66, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v66 = __p;
      }
      std::string v33 = 0;
      long long v34 = 0;
      uint64_t v35 = 0;
      long long v64 = &v33;
      char v65 = 0;
      std::string v33 = (std::string *)operator new(0x18uLL);
      long long v34 = v33;
      uint64_t v35 = v33 + 1;
      long long v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v35, (long long *)&v66, (long long *)&v67, v33);
      Espresso::sequential_builder::add<Espresso::reshape_params>(&v39, a2, (uint64_t)&v72, (uint64_t)&v70, (uint64_t)v50, (uint64_t)v36, (uint64_t)v37, (uint64_t *)&v33);
      if (v40) {
        nitro::nitro_function::nitro_function(v40);
      }
      long long v64 = &v33;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v72.__r_.__value_.__l.__data_);
      }
      LODWORD(v66.__r_.__value_.__r.__words[2]) = 4;
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = xmmword_192DCA530;
      std::string::basic_string[abi:ne180100]<0>(&v72, "transpose");
      uint64_t v24 = *a3;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v70, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v70 = __p;
      }
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      int v30 = 0;
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
      v68.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v28 = (std::string *)operator new(0x18uLL);
      uint64_t v29 = v28;
      int v30 = v28 + 1;
      uint64_t v29 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v30, (long long *)&v70, (long long *)&v71, v28);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v68, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
      }
      else {
        std::string v68 = v55;
      }
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      int v27 = 0;
      long long v64 = &v25;
      char v65 = 0;
      uint64_t v25 = (std::string *)operator new(0x18uLL);
      uint64_t v26 = v25;
      int v27 = v25 + 1;
      uint64_t v26 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v27, (long long *)&v68, (long long *)&v69, v25);
      Espresso::sequential_builder::add<Espresso::transpose_params_t>(&v31, a2, (uint64_t)&v72, v24, (uint64_t)&v66, (uint64_t)v28, (uint64_t)v29, (uint64_t *)&v25);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
      long long v64 = &v25;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (v10) {
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unsupported flatten param");
      }
      __int16 v53 = 1;
      int v54 = 1;
      *(void *)char v50 = v56;
      int v52 = 0;
      *(_DWORD *)&v50[8] = DWORD2(v56);
      long long v51 = xmmword_192DCA6C0;
      std::string::basic_string[abi:ne180100]<0>(&__p, "reshape");
      uint64_t v11 = *a3;
      uint64_t v12 = *(long long **)a3[1];
      if (*((char *)v12 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v12, *((void *)v12 + 1));
      }
      else
      {
        long long v13 = *v12;
        v72.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
        *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v13;
      }
      int v44 = 0;
      std::string v45 = 0;
      uint64_t v46 = 0;
      v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
      v70.__r_.__value_.__s.__data_[8] = 0;
      int v44 = (std::string *)operator new(0x18uLL);
      std::string v45 = v44;
      uint64_t v46 = v44 + 1;
      std::string v45 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v46, (long long *)&v72, &v73, v44);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v70, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
      }
      else {
        std::string v70 = v55;
      }
      long long v41 = 0;
      uint64_t v42 = 0;
      std::vector<int> v43 = 0;
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
      v68.__r_.__value_.__s.__data_[8] = 0;
      long long v41 = (std::string *)operator new(0x18uLL);
      uint64_t v42 = v41;
      std::vector<int> v43 = v41 + 1;
      uint64_t v42 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v43, (long long *)&v70, (long long *)&v71, v41);
      Espresso::sequential_builder::add<Espresso::reshape_params>(&v48, a2, (uint64_t)&__p, v11, (uint64_t)v50, (uint64_t)v44, (uint64_t)v45, (uint64_t *)&v41);
      if (v49) {
        nitro::nitro_function::nitro_function(v49);
      }
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    }
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (v59)
    {
      BOOL v60 = v59;
      operator delete(v59);
    }
  }
  if (v63 < 0) {
    operator delete(v62[0]);
  }
}

void sub_192A18774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57)
{
  *(void *)(v57 - 160) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 160));
  if (*(char *)(v57 - 105) < 0) {
    operator delete(*(void **)(v57 - 128));
  }
  if (*(char *)(v57 - 73) < 0) {
    operator delete(*(void **)(v57 - 96));
  }
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  if (*(char *)(v57 - 209) < 0) {
    operator delete(*(void **)(v57 - 232));
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_flatten_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *(void *)&long long v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  if (a2[1] - v4 != 64)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid argument");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(_DWORD *)(a1 + 280) == 2)
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v29, (const Espresso::layer_shape *)v4, 0);
    int v7 = *(_DWORD *)(a1 + 284);
    uint64_t v8 = v7;
    if (v7 < (signed int)-v31 || v7 > (int)v31) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Invalid rank and axis pair %d %zu", v7, v31);
    }
    int v10 = v31 & (v7 >> 31);
    unsigned int v11 = v10 + v7;
    int v12 = 1;
    if (v10 + (int)v8 >= 1)
    {
      long long v13 = (int *)&v29;
      uint64_t v14 = (v10 + v8);
      do
      {
        int v15 = *v13++;
        v12 *= v15;
        --v14;
      }
      while (v14);
    }
    if (v31 <= v11)
    {
      int v17 = 1;
    }
    else
    {
      int32x4_t v16 = (int *)&v29 + v8 + v10;
      int v17 = 1;
      do
      {
        int v18 = *v16++;
        v17 *= v18;
        ++v11;
      }
      while (v31 > v11);
    }
    v26[0] = v12;
    v26[1] = v17;
    uint64_t v27 = 0;
    uint64_t v28 = 0x200000000;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v26, 0, (uint64_t)&v34);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    long long v32 = a3;
    char v33 = 0;
    uint64_t v24 = (char *)operator new(0x40uLL);
    *a3 = v24;
    a3[1] = v24;
    a3[2] = v24 + 64;
    uint64_t v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)&v34, &v41, (uint64_t)v24);
  }
  else
  {
    int v19 = *(_DWORD *)(v4 + 4) * *(_DWORD *)v4 * *(_DWORD *)(v4 + 8);
    int v20 = *(_DWORD *)(v4 + 20);
    uint64_t v21 = *(void *)(v4 + 12);
    uint64_t v34 = 0x100000001;
    int v35 = v19;
    uint64_t v36 = v21;
    int v37 = v20;
    long long v38 = 0u;
    *(_OWORD *)std::string __p = 0u;
    uint64_t v40 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t v29 = a3;
    char v30 = 0;
    std::vector<int>::pointer v22 = (char *)operator new(0x40uLL);
    *a3 = v22;
    a3[1] = v22;
    a3[2] = v22 + 64;
    uint64_t v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)&v34, &v41, (uint64_t)v22);
  }
  a3[1] = v23;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_192A18B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v26 = v25;
  *(void *)(v24 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a16);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_reduce_kernel::build_grads_for_inputs(uint64_t a1, Espresso::sequential_builder *a2, uint64_t a3)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v82, "reduce");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 16) + 8) - **(void **)(a3 + 16)) >> 3), 1uLL, (uint64_t)v82, 1);
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 3), 1uLL, (uint64_t)v82, 0);
  uint64_t v6 = **(void **)(a3 + 8);
  std::string::size_type v7 = **(void **)(a3 + 16);
  Espresso::blob_grad_contrib_name((uint64_t)&__sz, v7, a3);
  uint64_t v8 = Espresso::sequential_builder::blob_shape(a2, v6);
  long long v9 = *((_OWORD *)v8 + 1);
  uint64_t v10 = *((void *)v8 + 4);
  long long v75 = *(_OWORD *)v8;
  long long v76 = v9;
  uint64_t v77 = v10;
  std::string v78 = 0;
  uint64_t v80 = 0;
  size_t v79 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v78, *((const void **)v8 + 5), *((void *)v8 + 6), (uint64_t)(*((void *)v8 + 6) - *((void *)v8 + 5)) >> 2);
  unsigned int v11 = Espresso::sequential_builder::blob_shape(a2, v7);
  long long v12 = *((_OWORD *)v11 + 1);
  uint64_t v13 = *((void *)v11 + 4);
  long long v69 = *(_OWORD *)v11;
  long long v70 = v12;
  uint64_t v71 = v13;
  std::string v72 = 0;
  long long v73 = 0;
  uint64_t v74 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v72, *((const void **)v11 + 5), *((void *)v11 + 6), (uint64_t)(*((void *)v11 + 6) - *((void *)v11 + 5)) >> 2);
  if (*(_DWORD *)(a1 + 280) > 1u) {
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("reduce_grad with mode other than REDUCE_MODE_SUM and REDUCE_MODE_AVG is not implemented");
  }
  v65[0] = -1;
  v65[1] = -1;
  v65[2] = 0xFFFFFFFF00000001;
  char v66 = 0;
  int v67 = 0;
  char v68 = 0;
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v90, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v14 = *(_OWORD *)v6;
    v90.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v14;
  }
  std::string::size_type v62 = 0;
  char v63 = 0;
  long long v64 = 0;
  v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
  v88.__r_.__value_.__s.__data_[8] = 0;
  std::string::size_type v62 = (std::string *)operator new(0x18uLL);
  char v63 = (char *)v62;
  long long v64 = (char *)&v62[1];
  int v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v64, (long long *)&v90, &v91, v62);
  char v63 = (char *)v15;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v90.__r_.__value_.__l.__data_);
    int v15 = (std::string *)v63;
  }
  char v68 = 0;
  char v66 = 1;
  if (v15 >= (std::string *)v64)
  {
    int v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v62, v7);
  }
  else
  {
    if (*(char *)(v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
    }
    else
    {
      long long v16 = *(_OWORD *)v7;
      v15->__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    }
    int v17 = v15 + 1;
  }
  char v63 = (char *)v17;
  if (*(_DWORD *)(a1 + 280))
  {
    if (*(char *)(v6 + 23) >= 0) {
      size_t v18 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      size_t v18 = *(void *)(v6 + 8);
    }
    int v19 = &v53;
    std::string::basic_string[abi:ne180100]((uint64_t)&v53, v18 + 12);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v19 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if (v18)
    {
      if (*(char *)(v6 + 23) >= 0) {
        int v20 = (const std::string::value_type *)v6;
      }
      else {
        int v20 = *(const std::string::value_type **)v6;
      }
      memmove(v19, v20, v18);
    }
    strcpy((char *)v19 + v18, "/broadcasted");
    std::string::basic_string[abi:ne180100]<0>(&v90, "broadcast");
    uint64_t v21 = *(void *)a3;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v48 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v48, (uint64_t)v62, (uint64_t)v63, 0xAAAAAAAAAAAAAAABLL * ((v63 - (char *)v62) >> 3));
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v88, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
    }
    else {
      std::string v88 = v53;
    }
    std::string v45 = 0;
    uint64_t v46 = 0;
    long long v47 = 0;
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
    v44.__r_.__value_.__s.__data_[8] = 0;
    std::string v45 = (std::string *)operator new(0x18uLL);
    uint64_t v46 = v45;
    long long v47 = v45 + 1;
    uint64_t v46 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v47, (long long *)&v88, (long long *)&v89, v45);
    Espresso::sequential_builder::add<Espresso::broadcast_params_t>(&v51, (uint64_t *)a2, (uint64_t)&v90, v21, (uint64_t)v65, v48, v49, (uint64_t *)&v45);
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
    v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
    Espresso::get_blob_count((uint64_t)&v44, (uint64_t *)a2, v7);
    Espresso::get_blob_count((uint64_t)&v43, (uint64_t *)a2, **(void **)(a3 + 24));
    v90.__r_.__value_.__r.__words[2] = 897988541;
    LOBYTE(v91) = 0;
    uint64_t v92 = 0;
    v90.__r_.__value_.__r.__words[0] = 102;
    v90.__r_.__value_.__l.__size_ = 1065353216;
    uint64_t v23 = *(char **)a3;
    if (*(char *)(*(void *)a3 + 23) >= 0) {
      size_t v24 = *(unsigned __int8 *)(*(void *)a3 + 23);
    }
    else {
      size_t v24 = *(void *)(*(void *)a3 + 8);
    }
    uint64_t v25 = &v42;
    std::string::basic_string[abi:ne180100]((uint64_t)&v42, v24 + 6);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v25 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    if (v24)
    {
      if (v23[23] >= 0) {
        uint64_t v26 = v23;
      }
      else {
        uint64_t v26 = *(char **)v23;
      }
      memmove(v25, v26, v24);
    }
    strcpy((char *)v25 + v24, "/ratio");
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v88, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
    }
    else {
      std::string v88 = v43;
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v89, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
    }
    else {
      std::string v89 = v44;
    }
    int v35 = 0;
    uint64_t v36 = 0;
    int v37 = 0;
    v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    v86.__r_.__value_.__s.__data_[8] = 0;
    int v35 = (std::string *)operator new(0x30uLL);
    uint64_t v36 = v35;
    int v37 = v35 + 2;
    uint64_t v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v37, (long long *)&v88, (long long *)&v90, v35);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v86, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
    }
    else {
      std::string v86 = v42;
    }
    long long v32 = 0;
    char v33 = 0;
    uint64_t v34 = 0;
    std::string::size_type v84 = &v32;
    char v85 = 0;
    long long v32 = (std::string *)operator new(0x18uLL);
    char v33 = v32;
    uint64_t v34 = v32 + 1;
    char v33 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v34, (long long *)&v86, (long long *)&v87, v32);
    Espresso::sequential_builder::add<Espresso::elementwise_params>(&v40, (uint64_t *)a2, (uint64_t)__p, (uint64_t)&v42, (uint64_t)&v90, (uint64_t)v35, (uint64_t)v36, (uint64_t *)&v32);
    if (v41) {
      nitro::nitro_function::nitro_function(v41);
    }
    std::string::size_type v84 = &v32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
    for (uint64_t i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v89.__r_.__value_.__r.__words[i + 2]) < 0) {
        operator delete(*(void **)((char *)&v88 + i * 8 + 24));
      }
    }
    if (v39 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v29, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
    }
    else {
      std::string v29 = __sz;
    }
    Espresso::sequential_builder::elementwise_op(1u, (uint64_t *)a2, (uint64_t)&v53, (uint64_t)&v42, (uint64_t)&v29, (uint64_t)&v30);
    if (v31 < 0) {
      operator delete(v30);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v28 = (void *)v53.__r_.__value_.__r.__words[0];
LABEL_86:
      operator delete(v28);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v90, "broadcast");
    uint64_t v22 = *(void *)a3;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v57 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v57, (uint64_t)v62, (uint64_t)v63, 0xAAAAAAAAAAAAAAABLL * ((v63 - (char *)v62) >> 3));
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v88, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
    }
    else {
      std::string v88 = __sz;
    }
    int v54 = 0;
    std::string v55 = 0;
    long long v56 = 0;
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    v53.__r_.__value_.__s.__data_[8] = 0;
    int v54 = (std::string *)operator new(0x18uLL);
    std::string v55 = v54;
    long long v56 = v54 + 1;
    std::string v55 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v56, (long long *)&v88, (long long *)&v89, v54);
    Espresso::sequential_builder::add<Espresso::broadcast_params_t>(&v60, (uint64_t *)a2, (uint64_t)&v90, v22, (uint64_t)v65, v57, v58, (uint64_t *)&v54);
    if (v61) {
      nitro::nitro_function::nitro_function(v61);
    }
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
    v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v28 = (void *)v90.__r_.__value_.__r.__words[0];
      goto LABEL_86;
    }
  }
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
  if (v72)
  {
    long long v73 = v72;
    operator delete(v72);
  }
  if (v78)
  {
    size_t v79 = v78;
    operator delete(v78);
  }
  if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__sz.__r_.__value_.__l.__data_);
  }
  if (v83 < 0) {
    operator delete(v82[0]);
  }
}

void sub_192A194C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v69 - 176) = &a50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 176));
  if (*(char *)(v69 - 105) < 0) {
    operator delete(*(void **)(v69 - 128));
  }
  *(void *)(v69 - 128) = &a55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v69 - 128));
  if (__p)
  {
    a69 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v71 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v71;
    operator delete(v71);
  }
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (*(char *)(v69 - 225) < 0) {
    operator delete(*(void **)(v69 - 248));
  }
  _Unwind_Resume(a1);
}

void sub_192A19780()
{
}

void sub_192A19788()
{
}

void sub_192A19790()
{
}

void Espresso::sequential_builder::add<Espresso::broadcast_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  int v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  uint64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  uint64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192A19978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::get_blob_count(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)&long long v42 = *MEMORY[0x1E4F143B8];
  uint64_t v34 = 0x1FFFFFFFFLL;
  if (*(char *)(a3 + 23) >= 0) {
    size_t v6 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v6 = *(void *)(a3 + 8);
  }
  std::string::size_type v7 = &v33;
  std::string::basic_string[abi:ne180100]((uint64_t)&v33, v6 + 6);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v7 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v8 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v8 = *(const std::string::value_type **)a3;
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "/shape");
  std::string::basic_string[abi:ne180100]<0>(__p, "get_shape");
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v41 = *(std::string *)a3;
  }
  uint64_t v28 = 0;
  std::string v29 = 0;
  char v30 = 0;
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  v39.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v28 = (std::string *)operator new(0x18uLL);
  std::string v29 = v28;
  char v30 = v28 + 1;
  std::string v29 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v30, (long long *)&v41, &v42, v28);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v39, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else {
    std::string v39 = v33;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  v37.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v25 = (std::string *)operator new(0x18uLL);
  uint64_t v26 = v25;
  uint64_t v27 = v25 + 1;
  uint64_t v26 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v27, (long long *)&v39, (long long *)&v40, v25);
  Espresso::sequential_builder::add<Espresso::get_shape_params_t>(&v31, a2, (uint64_t)__p, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)v28, (uint64_t)v29, (uint64_t *)&v25);
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  unint64_t v23 = 0xFFFFFFFF00000000;
  char v24 = 0;
  __p[0] = (void *)0x358637BD00000002;
  __p[1] = (void *)0x10000001FLL;
  if (*(char *)(a3 + 23) >= 0) {
    size_t v9 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v9 = *(void *)(a3 + 8);
  }
  std::string::basic_string[abi:ne180100](a1, v9 + 6);
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v10 = (std::string::value_type *)a1;
  }
  else {
    uint64_t v10 = *(std::string::value_type **)a1;
  }
  if (v9)
  {
    if (*(char *)(a3 + 23) >= 0) {
      unsigned int v11 = (const void *)a3;
    }
    else {
      unsigned int v11 = *(const void **)a3;
    }
    memmove(v10, v11, v9);
  }
  strcpy(&v10[v9], "/count");
  std::string::basic_string[abi:ne180100]<0>(&v41, "reduce");
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v39, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else {
    std::string v39 = v33;
  }
  int v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  v37.__r_.__value_.__s.__data_[8] = 0;
  int v15 = (std::string *)operator new(0x18uLL);
  uint64_t v16 = v15;
  uint64_t v17 = v15 + 1;
  uint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v17, (long long *)&v39, (long long *)&v40, v15);
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v37 = *(std::string *)a1;
  }
  long long v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v35 = &v12;
  char v36 = 0;
  long long v12 = (std::string *)operator new(0x18uLL);
  uint64_t v13 = v12;
  uint64_t v14 = v12 + 1;
  uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, (long long *)&v37, (long long *)&v38, v12);
  Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v18, a2, (uint64_t)&v41, a1, (uint64_t)__p, (uint64_t)v15, (uint64_t)v16, (uint64_t *)&v12);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  int v35 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_192A19E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  *(void *)(v40 - 144) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 144));
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  if (*(char *)(v40 - 57) < 0) {
    operator delete(*(void **)(v40 - 80));
  }
  if (*(char *)(v39 + 23) < 0) {
    operator delete(*(void **)v39);
  }
  if (a39 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_192A19FBC()
{
}

void Espresso::sequential_builder::add<Espresso::get_shape_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  int v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  uint64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  uint64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192A1A1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::generic_transpose_kernel::build_grads_for_inputs(int *a1, uint64_t *a2, uint64_t a3)
{
  *(void *)&long long v31 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(long long ***)(a3 + 16);
  uint64_t v4 = *v3;
  if (*v3 == v3[1] || **(void **)(a3 + 24) == *(void *)(*(void *)(a3 + 24) + 8)) {
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("No input given to transpose layer.");
  }
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v8 = *v4;
    v27.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v8;
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), (uint64_t)&v27))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v26, (std::string::size_type)&v27, a3);
    std::vector<int>::vector(&v25, 5uLL);
    begiuint64_t n = v25.__begin_;
    v25.__begin_[a1[70]] = 0;
    begin[a1[71]] = 1;
    begin[a1[72]] = 2;
    begin[a1[73]] = 3;
    begin[a1[74]] = 4;
    int v10 = begin[4];
    long long v23 = *(_OWORD *)begin;
    int v24 = v10;
    std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
    uint64_t v12 = *(void *)a3;
    unsigned int v11 = *(uint64_t **)(a3 + 8);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v16 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *v11, v11[1], 0xAAAAAAAAAAAAAAABLL * ((v11[1] - *v11) >> 3));
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v30, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
    }
    else {
      std::string v30 = v26;
    }
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v15 = 0;
    uint64_t v28 = &v13;
    char v29 = 0;
    uint64_t v13 = (std::string *)operator new(0x18uLL);
    uint64_t v14 = v13;
    int v15 = v13 + 1;
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (long long *)&v30, &v31, v13);
    Espresso::sequential_builder::add<Espresso::transpose_params_t>(&v21, a2, (uint64_t)__p, v12, (uint64_t)&v23, v16, v17, (uint64_t *)&v13);
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    uint64_t v28 = &v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v25.__begin_)
    {
      v25.__end_ = v25.__begin_;
      operator delete(v25.__begin_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_192A1A4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  *(void *)(v36 - 80) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 80));
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (*(char *)(v36 - 105) < 0) {
    operator delete(*(void **)(v36 - 128));
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::prediction_smoothing_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_prediction_smoothing_kernel::kernel_type_str(Espresso::generic_prediction_smoothing_kernel *this)
{
  return "prediction_smoothing";
}

void Espresso::generic_space_to_depth_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, _OWORD **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v35 + 1) = *MEMORY[0x1E4F143B8];
  int32x4_t v5 = *a2;
  uint64_t v6 = *((void *)*a2 + 4);
  long long v7 = (*a2)[1];
  *(_OWORD *)unint64_t __val = **a2;
  long long v25 = v7;
  uint64_t v26 = v6;
  std::string v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v27, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  signed int v8 = *(_DWORD *)(a1 + 280);
  if (v8 <= 0)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v15 = a1;
    uint64_t v16 = exception;
    std::to_string(&v23, *(_DWORD *)(v15 + 280));
    uint64_t v17 = std::string::insert(&v23, 0, "Invalid block_size ");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    *(void *)&v30[16] = *((void *)&v17->__r_.__value_.__l + 2);
    *(_OWORD *)std::string v30 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v16, (const std::string *)v30);
    __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v9 = v8 * v8;
  if (*(_DWORD *)(a1 + 284))
  {
    int v10 = __val[2] / v9;
    if (__val[2] != __val[2] / v9 * v9)
    {
      int v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v23, __val[2]);
      char v20 = std::string::insert(&v23, 0, "Shape error b.k=");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      *(void *)&v30[16] = *((void *)&v20->__r_.__value_.__l + 2);
      *(_OWORD *)std::string v30 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v19, (const std::string *)v30);
      __cxa_throw(v19, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    *(int32x2_t *)unint64_t __val = vmul_s32(*(int32x2_t *)__val, vdup_n_s32(v8));
    __val[2] /= v9;
    if (v10 <= 0)
    {
LABEL_15:
      uint64_t v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v22, "Zero shape error");
      __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    int v11 = __val[0] / v8;
    int v12 = __val[1] / v8;
    __val[0] = v11;
    __val[1] = v12;
    __val[2] *= v9;
    if (v11 <= 0 || v12 <= 0) {
      goto LABEL_15;
    }
  }
  *(_OWORD *)std::string v30 = *(_OWORD *)__val;
  *(_OWORD *)&v30[16] = v25;
  uint64_t v31 = v26;
  std::string __p = 0;
  std::string v33 = 0;
  uint64_t v34 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v27, (uint64_t)v28, (v28 - (unsigned char *)v27) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v23.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v13 = (char *)operator new(0x40uLL);
  *a3 = v13;
  a3[1] = v13;
  a3[2] = v13 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)v30, &v35, (uint64_t)v13);
  if (__p)
  {
    std::string v33 = __p;
    operator delete(__p);
  }
  if (v27)
  {
    uint64_t v28 = v27;
    operator delete(v27);
  }
}

void sub_192A1A8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v34 & 1) == 0)
    {
LABEL_8:
      if (a21) {
        operator delete(a21);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

void Espresso::generic_space_to_batch_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v40 + 1) = *MEMORY[0x1E4F143B8];
  int32x4_t v5 = *a2;
  uint64_t v6 = *((void *)*a2 + 4);
  long long v7 = (*a2)[1];
  long long v29 = **a2;
  long long v30 = v7;
  uint64_t v31 = v6;
  std::string __p = 0;
  std::string v33 = 0;
  uint64_t v34 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  uint64_t v8 = 0;
  uint64_t v9 = a1 + 280;
  int v10 = 1;
  do
  {
    int v11 = *(_DWORD *)(v9 + 4 * v8);
    if (!v11) {
      break;
    }
    if (v11 < 0)
    {
      uint64_t v14 = v8;
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v26, v14);
      uint64_t v16 = std::string::insert(&v26, 0, "Invalid block_shape[");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      long long v18 = std::string::append(&v27, "] ");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v25, *(_DWORD *)(v9 + 4 * v14));
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v20 = &v25;
      }
      else {
        char v20 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v25.__r_.__value_.__l.__size_;
      }
      uint64_t v22 = std::string::append(&v28, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      *(void *)&v35[16] = *((void *)&v22->__r_.__value_.__l + 2);
      *(_OWORD *)long long v35 = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)v35);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    v10 *= v11;
    ++v8;
  }
  while (v8 != 3);
  if (*(unsigned char *)(a1 + 316))
  {
    *(int32x2_t *)&long long v29 = vrev64_s32(vmla_s32(vneg_s32(vadd_s32(*(int32x2_t *)(a1 + 292), *(int32x2_t *)(a1 + 304))), *(int32x2_t *)(a1 + 280), (int32x2_t)__PAIR64__(v29, DWORD1(v29))));
    SHIDWORD(v29) /= v10;
  }
  else
  {
    int v12 = (*(_DWORD *)(a1 + 292) + DWORD1(v29) + *(_DWORD *)(a1 + 304)) / *(_DWORD *)(a1 + 280);
    LODWORD(v29) = (*(_DWORD *)(a1 + 296) + (int)v29 + *(_DWORD *)(a1 + 308)) / *(_DWORD *)(a1 + 284);
    DWORD1(v29) = v12;
    HIDWORD(v29) *= v10;
    if ((int)v29 <= 0 || v12 <= 0)
    {
      int v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v24, "Zero shape error");
      __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  *(_OWORD *)long long v35 = v29;
  *(_OWORD *)&v35[16] = v30;
  uint64_t v36 = v31;
  std::string v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v37, __p, (uint64_t)v33, (v33 - (unsigned char *)__p) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v28.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v13 = (char *)operator new(0x40uLL);
  *a3 = v13;
  a3[1] = v13;
  a3[2] = v13 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)v35, &v40, (uint64_t)v13);
  if (v37)
  {
    uint64_t v38 = v37;
    operator delete(v37);
  }
  if (__p)
  {
    std::string v33 = __p;
    operator delete(__p);
  }
}

void sub_192A1ACF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  __cxa_free_exception(v41);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_slice_kernel::build_grads_for_inputs(uint64_t a1, Espresso::sequential_builder *a2, uint64_t a3)
{
  *(void *)&long long v62 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v53, "slice");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 3), 1uLL, (uint64_t)v53, 0);
  uint64_t v6 = **(void ***)(a3 + 16);
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), (uint64_t)v6))goto LABEL_79; {
  Espresso::blob_grad_contrib_name((uint64_t)&v52, (std::string::size_type)v6, a3);
  }
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v52.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = &v51;
  std::string::basic_string[abi:ne180100]((uint64_t)&v51, size + 10);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v8 = (std::string *)v51.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v52;
    }
    else {
      uint64_t v9 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    memmove(v8, v9, size);
  }
  strcpy((char *)v8 + size, "@container");
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v48, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  }
  else {
    std::string v48 = v51;
  }
  Espresso::sequential_builder::constant_like(a2, v6, (uint64_t)&v48, (uint64_t)&__p, 0.0);
  if (v50 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  uint64_t v46 = *(void *)(a1 + 296);
  long long v45 = *(_OWORD *)(a1 + 280);
  int v47 = 0;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 16) + 8) - **(void **)(a3 + 16)) >> 3);
  if (v10 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "slice_update");
    uint64_t v17 = *(void *)a3;
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v18 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v18 = v52.__r_.__value_.__l.__size_;
    }
    long long v19 = &v57;
    std::string::basic_string[abi:ne180100]((uint64_t)&v57, v18 + 10);
    if (v58 < 0) {
      long long v19 = (long long *)v57;
    }
    if (v18)
    {
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v20 = &v52;
      }
      else {
        char v20 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      memmove(v19, v20, v18);
    }
    strcpy((char *)v19 + v18, "@container");
    long long v21 = **(long long ***)(a3 + 8);
    if (*((char *)v21 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)v21, *((void *)v21 + 1));
    }
    else
    {
      long long v22 = *v21;
      v59.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v22;
    }
    uint64_t v23 = **(void **)(a3 + 16);
    if (*(char *)(v23 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(v23 + 24), *(void *)(v23 + 32));
    }
    else
    {
      long long v24 = *(_OWORD *)(v23 + 24);
      v60.__r_.__value_.__r.__words[2] = *(void *)(v23 + 40);
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v24;
    }
    long long v30 = 0;
    uint64_t v31 = 0;
    long long v32 = 0;
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
    v61.__r_.__value_.__s.__data_[8] = 0;
    long long v30 = (std::string *)operator new(0x48uLL);
    uint64_t v31 = v30;
    long long v32 = v30 + 3;
    uint64_t v31 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v32, &v57, (long long *)&v61, v30);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v61, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
    }
    else {
      std::string v61 = v52;
    }
    std::string v27 = 0;
    std::string v28 = 0;
    long long v29 = 0;
    std::string v55 = &v27;
    char v56 = 0;
    std::string v27 = (std::string *)operator new(0x18uLL);
    std::string v28 = v27;
    long long v29 = v27 + 1;
    std::string v28 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v29, (long long *)&v61, &v62, v27);
    Espresso::sequential_builder::add<Espresso::slice_update_params_t>(&v33, (uint64_t *)a2, (uint64_t)v41, v17, (uint64_t)&v45, (uint64_t)v30, (uint64_t)v31, (uint64_t *)&v27);
    if (v34) {
      nitro::nitro_function::nitro_function(v34);
    }
    std::string v55 = &v27;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    for (uint64_t i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v60.__r_.__value_.__r.__words[i + 2]) < 0) {
        operator delete(*(void **)((char *)&v60.__r_.__value_.__l.__data_ + i * 8));
      }
    }
    goto LABEL_73;
  }
  if (v10 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "slice_update");
    uint64_t v11 = *(void *)a3;
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v12 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v12 = v52.__r_.__value_.__l.__size_;
    }
    uint64_t v13 = &v57;
    std::string::basic_string[abi:ne180100]((uint64_t)&v57, v12 + 10);
    if (v58 < 0) {
      uint64_t v13 = (long long *)v57;
    }
    if (v12)
    {
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v52;
      }
      else {
        uint64_t v14 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      memmove(v13, v14, v12);
    }
    strcpy((char *)v13 + v12, "@container");
    uint64_t v15 = **(long long ***)(a3 + 8);
    if (*((char *)v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)v15, *((void *)v15 + 1));
    }
    else
    {
      long long v16 = *v15;
      v59.__r_.__value_.__r.__words[2] = *((void *)v15 + 2);
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v16;
    }
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    long long v40 = 0;
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
    v61.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v38 = (std::string *)operator new(0x30uLL);
    uint64_t v39 = v38;
    long long v40 = v38 + 2;
    uint64_t v39 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v40, &v57, (long long *)&v60, v38);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v61, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
    }
    else {
      std::string v61 = v52;
    }
    long long v35 = 0;
    uint64_t v36 = 0;
    std::string v37 = 0;
    std::string v55 = &v35;
    char v56 = 0;
    long long v35 = (std::string *)operator new(0x18uLL);
    uint64_t v36 = v35;
    std::string v37 = v35 + 1;
    uint64_t v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v37, (long long *)&v61, &v62, v35);
    Espresso::sequential_builder::add<Espresso::slice_update_params_t>(&v43, (uint64_t *)a2, (uint64_t)v41, v11, (uint64_t)&v45, (uint64_t)v38, (uint64_t)v39, (uint64_t *)&v35);
    if (v44) {
      nitro::nitro_function::nitro_function(v44);
    }
    std::string v55 = &v35;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    for (uint64_t j = 0; j != -6; j -= 3)
    {
      if (SHIBYTE(v59.__r_.__value_.__r.__words[j + 2]) < 0) {
        operator delete(*(void **)((char *)&v59.__r_.__value_.__l.__data_ + j * 8));
      }
    }
LABEL_73:
    if (v42 < 0) {
      operator delete(v41[0]);
    }
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
LABEL_79:
  if (v54 < 0) {
    operator delete(v53[0]);
  }
}

void sub_192A1B474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  *(void *)(v50 - 96) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 96));
  uint64_t v52 = 0;
  uint64_t v53 = v50 - 168;
  while (1)
  {
    if (*(char *)(v53 + v52 + 71) < 0) {
      operator delete(*(void **)(v53 + v52 + 48));
    }
    v52 -= 24;
    if (v52 == -72)
    {
      if (a29 < 0) {
        operator delete(__p);
      }
      if (a50 < 0) {
        operator delete(a45);
      }
      if (*(char *)(v50 - 209) < 0) {
        operator delete(*(void **)(v50 - 232));
      }
      if (*(char *)(v50 - 185) < 0) {
        operator delete(*(void **)(v50 - 208));
      }
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::sequential_builder::add<Espresso::slice_update_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  long long v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  uint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  std::string v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  std::string v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192A1B844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::generic_broadcast_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *((void *)&v32 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = (a2[1] - *a2) >> 6;
  if (v6 != 1)
  {
    if (v6 == 2 && !*(unsigned char *)(a1 + 312))
    {
      long long v19 = *(_OWORD *)(v5 + 80);
      long long v28 = *(_OWORD *)(v5 + 64);
      *(_OWORD *)long long v29 = v19;
      uint64_t v20 = *(const void **)(v5 + 104);
      *(void *)&v29[16] = *(void *)(v5 + 96);
      v30[0] = 0;
      v30[1] = 0;
      uint64_t v31 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v30, v20, *(void *)(v5 + 112), (uint64_t)(*(void *)(v5 + 112) - (void)v20) >> 2);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(void *)&v23[0] = a3;
      BYTE8(v23[0]) = 0;
      uint64_t v21 = (char *)operator new(0x40uLL);
      *a3 = v21;
      a3[1] = v21;
      a3[2] = v21 + 64;
      uint64_t v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v28, &v32, (uint64_t)v21);
    }
    else
    {
      uint64_t v31 = 0;
      *(_OWORD *)long long v30 = 0u;
      *(_OWORD *)&v29[8] = 0u;
      *(void *)&long long v7 = 0x100000001;
      *((void *)&v7 + 1) = 0x100000001;
      long long v28 = v7;
      *(void *)long long v29 = 0xFFFFFFFF00000001;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      *(void *)&v23[0] = a3;
      BYTE8(v23[0]) = 0;
      uint64_t v8 = (char *)operator new(0x40uLL);
      *a3 = v8;
      a3[1] = v8;
      a3[2] = v8 + 64;
      uint64_t v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v28, &v32, (uint64_t)v8);
    }
    a3[1] = v9;
    goto LABEL_30;
  }
  long long v10 = *(_OWORD *)(v5 + 16);
  uint64_t v11 = *(void *)(v5 + 32);
  long long v28 = *(_OWORD *)v5;
  *(_OWORD *)long long v29 = v10;
  *(void *)&v29[16] = v11;
  v30[0] = 0;
  v30[1] = 0;
  uint64_t v31 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v30, *(const void **)(v5 + 40), *(void *)(v5 + 48), (uint64_t)(*(void *)(v5 + 48) - *(void *)(v5 + 40)) >> 2);
  int v12 = *(_DWORD *)(a1 + 280);
  if (v12 >= 1)
  {
    uint64_t v13 = v28;
    if (v28 != 1 && v12 != v28)
    {
      long long v22 = "Bcast shape error 1 != w: %d";
      goto LABEL_39;
    }
    LODWORD(v28) = *(_DWORD *)(a1 + 280);
  }
  int v14 = *(_DWORD *)(a1 + 284);
  if (v14 >= 1)
  {
    uint64_t v13 = DWORD1(v28);
    if (DWORD1(v28) != 1 && v14 != DWORD1(v28))
    {
      long long v22 = "Bcast shape error 1 != h: %d";
      goto LABEL_39;
    }
    DWORD1(v28) = *(_DWORD *)(a1 + 284);
  }
  int v15 = *(_DWORD *)(a1 + 288);
  if (v15 >= 1)
  {
    uint64_t v13 = DWORD2(v28);
    if (DWORD2(v28) != 1 && v15 != DWORD2(v28))
    {
      long long v22 = "Bcast shape error 1 != k: %d";
      goto LABEL_39;
    }
    DWORD2(v28) = *(_DWORD *)(a1 + 288);
  }
  int v16 = *(_DWORD *)(a1 + 292);
  if (v16 >= 1)
  {
    uint64_t v13 = HIDWORD(v28);
    if (HIDWORD(v28) != 1 && v16 != HIDWORD(v28))
    {
      long long v22 = "Bcast shape error 1 != n: %d";
      goto LABEL_39;
    }
    HIDWORD(v28) = *(_DWORD *)(a1 + 292);
  }
  int v17 = *(_DWORD *)(a1 + 296);
  if (v17 >= 1)
  {
    uint64_t v13 = *(unsigned int *)v29;
    if (*(_DWORD *)v29 == 1 || v17 == *(_DWORD *)v29)
    {
      *(_DWORD *)long long v29 = *(_DWORD *)(a1 + 296);
      goto LABEL_26;
    }
    long long v22 = "Bcast shape error 1 != seq: %d";
LABEL_39:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &>(v22, v13);
  }
LABEL_26:
  if (*(int *)(a1 + 300) >= 1) {
    *(_DWORD *)&v29[4] = *(_DWORD *)(a1 + 300);
  }
  v23[0] = v28;
  v23[1] = *(_OWORD *)v29;
  uint64_t v24 = *(void *)&v29[16];
  std::string __p = 0;
  std::string v26 = 0;
  uint64_t v27 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v30[0], (uint64_t)v30[1], ((char *)v30[1] - (char *)v30[0]) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v18 = (char *)operator new(0x40uLL);
  *a3 = v18;
  a3[1] = v18;
  a3[2] = v18 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v23, &v28, (uint64_t)v18);
  if (__p)
  {
    std::string v26 = __p;
    operator delete(__p);
  }
LABEL_30:
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
}

void sub_192A1BC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v27 = v26;
  *(void *)(v25 + 8) = v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a11);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &>(char *a1, uint64_t a2)
{
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::compute_stats_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_compute_stats_kernel::kernel_type_str(Espresso::generic_compute_stats_kernel *this)
{
  return "compute_stats";
}

void Espresso::generic_compute_stats_kernel::top_shapes_for_bottom_shapes(long long **a1@<X1>, void *a2@<X8>)
{
  *((void *)&v18 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  long long v5 = **a1;
  long long v6 = (*a1)[1];
  uint64_t v7 = *((void *)*a1 + 4);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v8, *((const void **)v3 + 5), *((void *)v3 + 6), (uint64_t)(*((void *)v3 + 6) - *((void *)v3 + 5)) >> 2);
  *(void *)&long long v5 = 0x100000005;
  v13[0] = v5;
  v13[1] = v6;
  uint64_t v14 = v7;
  std::string __p = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v8, (uint64_t)v9, (v9 - (unsigned char *)v8) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v11 = a2;
  char v12 = 0;
  uint64_t v4 = (char *)operator new(0x40uLL);
  *a2 = v4;
  a2[1] = v4;
  a2[2] = v4 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v13, &v18, (uint64_t)v4);
  if (__p)
  {
    int v16 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    uint64_t v9 = v8;
    operator delete(v8);
  }
}

void sub_192A1BDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v27 = v26;
  *(void *)(v25 + 8) = v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_patch_extractor_kernel::get_coordinates_for_dense_mode(Espresso::generic_patch_extractor_kernel *this@<X0>, const Espresso::layer_shape *a2@<X1>, uint64_t *a3@<X8>, int8x16_t a4@<Q3>)
{
  int v5 = *((_DWORD *)this + 76);
  if (v5 <= 0)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "generic_patch_extractor_kernel: invalid dense_stride_x");
    goto LABEL_39;
  }
  int v7 = *((_DWORD *)this + 77);
  if (v7 < 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "generic_patch_extractor_kernel: invalid dense_stride_y");
LABEL_39:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v9 = *((_DWORD *)a2 + 4) * *((_DWORD *)a2 + 3);
  if (v9 < 1)
  {
    unsigned int v11 = 0;
  }
  else
  {
    int v10 = 0;
    unsigned int v11 = 0;
    int v12 = *((_DWORD *)this + 74);
    int v13 = *(_DWORD *)a2;
    int v14 = *((_DWORD *)a2 + 1);
    v15.i64[0] = 0x100000001;
    v15.i64[1] = 0x100000001;
    do
    {
      if (v12 < v13)
      {
        int v16 = *((_DWORD *)this + 75);
        int v17 = v7 + v16;
        if (v14 <= v7 + v16) {
          int v18 = v7 + v16;
        }
        else {
          int v18 = v14;
        }
        if (v17 >= v14) {
          int v19 = 1;
        }
        else {
          int v19 = 2;
        }
        unsigned int v20 = v18 - (v17 < v14) - v17;
        int v21 = *((_DWORD *)this + 74);
        do
        {
          if (v16 < v14)
          {
            unsigned int v22 = 0;
            unsigned int v23 = v19 + v20 / v7;
            int32x4_t v24 = (int32x4_t)v11;
            do
            {
              int8x16_t v25 = (int8x16_t)v24;
              unsigned int v26 = v22;
              int32x4_t v24 = vaddq_s32(v24, v15);
              v22 += 4;
            }
            while (((v23 + 3) & 0xFFFFFFFC) != v22);
            a4.i32[0] = v23 - 1;
            a4 = (int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v26), (int8x16_t)xmmword_192DAF430), (uint32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.i8, 0));
            unsigned int v11 = vaddvq_s32((int32x4_t)vbslq_s8(a4, v25, (int8x16_t)v24));
          }
          v21 += v5;
        }
        while (v21 < v13);
      }
      ++v10;
    }
    while (v10 != v9);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(a3, 1, 1, 5, v11);
  int v27 = *((_DWORD *)this + 71);
  int v28 = *((_DWORD *)this + 72);
  if (*((_DWORD *)this + 70) == 2)
  {
    if (*((int *)this + 78) > 0) {
      int v27 = *((_DWORD *)this + 78);
    }
    if (*((int *)this + 79) > 0) {
      int v28 = *((_DWORD *)this + 79);
    }
  }
  int v29 = *((_DWORD *)a2 + 4) * *((_DWORD *)a2 + 3);
  if (v29 >= 1)
  {
    int v30 = 0;
    int v31 = 0;
    int v32 = *((_DWORD *)this + 74);
    int v33 = *(_DWORD *)a2;
    int v34 = *((_DWORD *)a2 + 1);
    uint64_t v35 = *a3;
    do
    {
      if (v32 < v33)
      {
        int v36 = *((_DWORD *)this + 75);
        int v37 = *((_DWORD *)this + 76);
        int v38 = v32;
        do
        {
          if (v36 < v34)
          {
            uint64_t v39 = *(void *)(v35 + 24);
            int v40 = *((_DWORD *)this + 77);
            int v41 = v31;
            int v42 = 4 * v31 + 4;
            int v43 = v36;
            do
            {
              *(float *)(v39 + 4 * (v42 - 3)) = (float)v38;
              *(float *)(v39 + 4 * (v42 - 2)) = (float)v43;
              *(float *)(v39 + 4 * (v42 - 1)) = (float)(v38 + v27);
              *(float *)(v39 + 4 * v42) = (float)(v28 + v43);
              ++v41;
              v42 += 4;
              v43 += v40;
            }
            while (v43 < v34);
            int v31 = v41;
          }
          v38 += v37;
        }
        while (v38 < v33);
      }
      ++v30;
    }
    while (v30 != v29);
  }
}

void sub_192A1C0BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::patch_extractor_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_patch_extractor_kernel::kernel_type_str(Espresso::generic_patch_extractor_kernel *this)
{
  return "patch_extractor";
}

void Espresso::generic_patch_extractor_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *((void *)&v26 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  unint64_t v7 = a2[1] - v5;
  if (!v7)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "generic_patch_extractor_kernel: requires at least one input");
    goto LABEL_21;
  }
  int v9 = *(_DWORD *)(a1 + 280);
  if (v9)
  {
    if (v7 > 0x7F)
    {
      int v10 = *(_DWORD *)(v5 + 76);
      if (*(unsigned char *)(v5 + 72)) {
        v10 *= *(_DWORD *)(v5 + 12);
      }
      goto LABEL_9;
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "generic_patch_extractor_kernel: sparse mode requires two inputs");
LABEL_21:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 328))(&v22, a1);
  int v10 = *(_DWORD *)(v22.__r_.__value_.__r.__words[0] + 20);
  if (v22.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v22.__r_.__value_.__l.__size_);
  }
  uint64_t v5 = *a2;
  int v9 = *(_DWORD *)(a1 + 280);
LABEL_9:
  unsigned int v11 = *(_DWORD *)(v5 + 8);
  unsigned int v12 = (v9 & 0xFFFFFFFE) == 6;
  int v13 = *(_DWORD *)(a1 + 292);
  if (v13 != 3)
  {
    if (v13 != 2)
    {
      int v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v21, *(_DWORD *)(a1 + 292));
      int v19 = std::string::insert(&v21, 0, "generic_patch_extractor_kernel: invalid axis=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v18, &v22);
      __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    v11 *= v10;
    int v10 = 1;
  }
  int8x8_t v14 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v12), 0x1FuLL)), (int8x8_t)0x100000001, *(int8x8_t *)(a1 + 284));
  int v15 = *(_DWORD *)(v5 + 20);
  if (v15 == -1)
  {
    if (*(_DWORD *)(v5 + 16) == 1) {
      int v15 = 4;
    }
    else {
      int v15 = 5;
    }
  }
  v22.__r_.__value_.__l.__data_ = (std::string::pointer)v14;
  v22.__r_.__value_.__l.__size_ = __PAIR64__(v10, v11);
  LODWORD(v22.__r_.__value_.__r.__words[2]) = 1;
  HIDWORD(v22.__r_.__value_.__r.__words[2]) = v15;
  long long v23 = 0u;
  *(_OWORD *)std::string __p = 0u;
  uint64_t v25 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v21.__r_.__value_.__s.__data_[8] = 0;
  int v16 = (char *)operator new(0x40uLL);
  *a3 = v16;
  a3[1] = v16;
  a3[2] = v16 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)&v22, &v26, (uint64_t)v16);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_192A1C374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v26 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

BOOL Espresso::generic_crop_and_resize_kernel::has_dynamic_top_shape(Espresso::generic_crop_and_resize_kernel *this)
{
  if (*((_DWORD *)this + 70) != 2) {
    return 0;
  }
  if (*((_DWORD *)this + 72)) {
    return *((_DWORD *)this + 71) == 0;
  }
  return 1;
}

void Espresso::generic_crop_and_resize_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *((void *)&v32 + 1) = *MEMORY[0x1E4F143B8];
  long long v6 = (void *)*a2;
  if (!*(_DWORD *)(a1 + 280) && a2[1] - (void)v6 == 64) {
    *(_DWORD *)(a1 + 280) = 1;
  }
  long long v18 = *(_OWORD *)v6;
  long long v19 = *((_OWORD *)v6 + 1);
  uint64_t v20 = v6[4];
  std::string v21 = 0;
  std::string v22 = 0;
  uint64_t v23 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v21, (const void *)v6[5], v6[6], (uint64_t)(v6[6] - v6[5]) >> 2);
  switch(*(_DWORD *)(a1 + 280))
  {
    case 0:
      *(void *)&long long v18 = *(void *)(a1 + 284);
      unint64_t v7 = (void *)*a2;
      long long v8 = *(_OWORD *)(*a2 + 80);
      long long v26 = *(_OWORD *)(*a2 + 64);
      long long v27 = v8;
      int v9 = (const void *)v7[13];
      uint64_t v28 = v7[12];
      std::string __p = 0;
      int v30 = 0;
      uint64_t v31 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v9, v7[14], (uint64_t)(v7[14] - (void)v9) >> 2);
      if (v27 != 1 && HIDWORD(v26) != 1) {
        Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,unsigned long const&>("generic_crop_and_resize_kernel: One of RoI input's batch dimension or seq dimension must be 1. Instead they are %d %d.", HIDWORD(v26), v27);
      }
      uint64_t v10 = DWORD1(v26);
      if (DWORD1(v26) != 1)
      {
        int v17 = "generic_crop_and_resize_kernel: RoI input's height dimension must be 1. Instead it is %d.";
        goto LABEL_36;
      }
      uint64_t v10 = v26;
      if (v26 != 1)
      {
        int v17 = "generic_crop_and_resize_kernel: RoI input's width dimension must be 1. Instead it is %d.";
        goto LABEL_36;
      }
      uint64_t v10 = DWORD2(v26);
      if ((DWORD2(v26) - 6) <= 0xFFFFFFFD)
      {
        int v17 = "generic_crop_and_resize_kernel: RoI input's channel dimension must be either 4 or 5. Instead it is %d.";
LABEL_36:
        Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &>(v17, v10);
      }
      LODWORD(v19) = v27;
      if (DWORD2(v26) == 5) {
        HIDWORD(v18) = 1;
      }
LABEL_21:
      if (__p)
      {
        int v30 = __p;
        operator delete(__p);
      }
LABEL_24:
      if (*(unsigned char *)(a1 + 312)) {
        SDWORD2(v18) /= (int)v18 * DWORD1(v18) / *(_DWORD *)(a1 + 316) / *(_DWORD *)(a1 + 316);
      }
      long long v26 = v18;
      long long v27 = v19;
      uint64_t v28 = v20;
      std::string __p = 0;
      int v30 = 0;
      uint64_t v31 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v21, (uint64_t)v22, (v22 - (unsigned char *)v21) >> 2);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      int32x4_t v24 = a3;
      char v25 = 0;
      int v16 = (char *)operator new(0x40uLL);
      *a3 = v16;
      a3[1] = v16;
      a3[2] = v16 + 64;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v26, &v32, (uint64_t)v16);
      if (__p)
      {
        int v30 = __p;
        operator delete(__p);
      }
      if (v21)
      {
        std::string v22 = v21;
        operator delete(v21);
      }
      return;
    case 1:
      *(void *)&long long v18 = *(void *)(a1 + 284);
      goto LABEL_24;
    case 2:
      int v11 = *(_DWORD *)(a1 + 288);
      if (v11 != -1)
      {
        if (v11 <= 1) {
          int v11 = 1;
        }
        DWORD1(v18) = v11;
      }
      int v12 = *(_DWORD *)(a1 + 284);
      if (v12 != -1)
      {
        if (v12 <= 1) {
          int v12 = 1;
        }
        LODWORD(v18) = v12;
      }
      goto LABEL_24;
    case 3:
      int v13 = (void *)*a2;
      long long v14 = *(_OWORD *)(*a2 + 80);
      long long v26 = *(_OWORD *)(*a2 + 64);
      long long v27 = v14;
      int v15 = (const void *)v13[13];
      uint64_t v28 = v13[12];
      std::string __p = 0;
      int v30 = 0;
      uint64_t v31 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v15, v13[14], (uint64_t)(v13[14] - (void)v15) >> 2);
      *(void *)&long long v18 = *(void *)(a1 + 284);
      DWORD2(v18) = *(_DWORD *)(*a2 + 8);
      HIDWORD(v18) = DWORD1(v26);
      LODWORD(v19) = 1;
      goto LABEL_21;
    default:
      Espresso::throw_exception_selector<Espresso::generic_error>("generic_crop_and_resize_kernel: mode not valid");
  }
}

void sub_192A1C768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::generic_dynamic_quantize_kernel::number_of_top_blobs(Espresso::generic_dynamic_quantize_kernel *this)
{
  if (*((_DWORD *)this + 71)) {
    return 2;
  }
  else {
    return 4;
  }
}

void Espresso::generic_dynamic_quantize_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 6);
  if (*(_DWORD *)(a1 + 284))
  {
    uint64_t v18 = 0;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)&v16[8] = 0u;
    *(void *)&long long v6 = 0x100000001;
    *((void *)&v6 + 1) = 0x100000001;
    long long v15 = v6;
    *(void *)int v16 = 0x100000001;
    unint64_t v7 = a3[1];
    if (v7 >= a3[2])
    {
      uint64_t v8 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, &v15);
    }
    else
    {
      std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, &v15);
      uint64_t v8 = v7 + 64;
    }
    a3[1] = v8;
  }
  else
  {
    int v9 = *a2;
    uint64_t v10 = *((void *)*a2 + 4);
    long long v11 = (*a2)[1];
    long long v15 = **a2;
    *(_OWORD *)int v16 = v11;
    *(void *)&v16[16] = v10;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v18 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, *((const void **)v9 + 5), *((void *)v9 + 6), (uint64_t)(*((void *)v9 + 6) - *((void *)v9 + 5)) >> 2);
    int v12 = *((_DWORD *)*a2 + 5);
    if (v12 == -1 || v12 >= 4) {
      DWORD2(v15) = 1;
    }
    else {
      LODWORD(v15) = 1;
    }
    unint64_t v13 = a3[1];
    int v14 = 3;
    do
    {
      if (v13 >= a3[2])
      {
        unint64_t v13 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, &v15);
      }
      else
      {
        std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, &v15);
        v13 += 64;
      }
      a3[1] = v13;
      --v14;
    }
    while (v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_192A1C960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

void Espresso::generic_quantized_gather_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, void *a3@<X8>)
{
  *(void *)&long long v28 = *MEMORY[0x1E4F143B8];
  memset(&v21, 0, sizeof(v21));
  uint64_t v5 = *(unsigned int *)(a1 + 308);
  uint64_t v6 = *(unsigned int *)(a1 + 304);
  unint64_t v7 = operator new(0x10uLL);
  *unint64_t v7 = v5;
  v7[1] = v6;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__x, *a2, 0);
  Espresso::layer_nd_shape::shape_vector(&v20, (uint64_t)&__x);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__x, *a2, 0);
  if (v25 == -1)
  {
    *(_DWORD *)uint64_t v18 = 1;
    *(void *)&v18[12] = 0;
    *(void *)&v18[4] = 0;
    int v19 = 1;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v18, 0, (uint64_t)&__x);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    std::string v22 = a3;
    char v23 = 0;
    uint64_t v8 = (char *)operator new(0x40uLL);
    *a3 = v8;
    a3[1] = v8;
    a3[2] = v8 + 64;
    uint64_t v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &__x, &v28, (uint64_t)v8);
  }
  else
  {
    LODWORD(__x) = 0;
    std::vector<int>::resize(&v21, v25 + 1, (std::vector<int>::const_reference)&__x);
    begiuint64_t n = v20.__begin_;
    if (v20.__end_ == v20.__begin_)
    {
      std::vector<int>::pointer end = v20.__begin_;
    }
    else
    {
      memmove(v21.__begin_, v20.__begin_, (char *)v20.__end_ - (char *)v20.__begin_);
      begiuint64_t n = v20.__begin_;
      std::vector<int>::pointer end = v20.__end_;
    }
    std::vector<int>::pointer v12 = v21.__begin_;
    *(std::vector<int>::pointer)((char *)v21.__begin_ + (char *)end - (char *)begin) = v7[1];
    memset(v18, 0, sizeof(v18));
    uint64_t v13 = (char *)v21.__end_ - (char *)v12;
    if (v21.__end_ != v12)
    {
      uint64_t v14 = v13 >> 2;
      if ((unint64_t)(v13 >> 2) <= 1) {
        uint64_t v14 = 1;
      }
      long long v15 = (int *)v18;
      do
      {
        int v16 = *v12++;
        *v15++ = v16;
        --v14;
      }
      while (v14);
    }
    int v19 = (unint64_t)v13 >> 2;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v18, 0, (uint64_t)&__x);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    std::string v22 = a3;
    char v23 = 0;
    int v17 = (char *)operator new(0x40uLL);
    *a3 = v17;
    a3[1] = v17;
    a3[2] = v17 + 64;
    uint64_t v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &__x, &v28, (uint64_t)v17);
  }
  a3[1] = v9;
  if (__p)
  {
    long long v27 = __p;
    operator delete(__p);
  }
  if (v20.__begin_)
  {
    v20.__end_ = v20.__begin_;
    operator delete(v20.__begin_);
  }
  operator delete(v7);
  if (v21.__begin_)
  {
    v21.__end_ = v21.__begin_;
    operator delete(v21.__begin_);
  }
}

void sub_192A1CBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v29 = v28;
  *(void *)(v27 + 8) = v29;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a18);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  operator delete(v26);
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_spatial_transformer_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *(void *)&long long v15 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 300) >= 2u) {
    Espresso::throw_exception_selector<Espresso::generic_error>("generic_spatial_transformer_kernel: padding_mode must be CONSTANT or CLAMP.");
  }
  uint64_t v4 = *a2;
  if ((unint64_t)(a2[1] - *a2) <= 0x7F) {
    Espresso::throw_exception_selector<Espresso::generic_error>("generic_spatial_transformer_kernel: requires two inputs");
  }
  int v5 = *(_DWORD *)(v4 + 76);
  if (*(unsigned char *)(v4 + 72)) {
    v5 *= *(_DWORD *)(v4 + 12);
  }
  uint64_t v6 = *(void *)(a1 + 284);
  unsigned int v7 = *(_DWORD *)(v4 + 8);
  int v8 = *(_DWORD *)(a1 + 292);
  if (v8 != 3)
  {
    if (v8 != 2) {
      Espresso::throw_exception_selector<Espresso::generic_error,int>(v8);
    }
    v7 *= v5;
    int v5 = 1;
  }
  *(void *)&long long v10 = v6;
  *((void *)&v10 + 1) = __PAIR64__(v5, v7);
  unint64_t v11 = 0xFFFFFFFF00000001;
  long long v12 = 0u;
  *(_OWORD *)std::string __p = 0u;
  uint64_t v14 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v9 = (char *)operator new(0x40uLL);
  *a3 = v9;
  a3[1] = v9;
  a3[2] = v9 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v10, &v15, (uint64_t)v9);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_192A1CDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  *(void *)(v18 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::generic_error,int>(int a1)
{
  Espresso::throw_exception_with_format<Espresso::generic_error>("generic_spatial_transformer_kernel: invalid axis=%d", a1);
}

void Espresso::generic_gather_kernel::top_shapes_for_bottom_shapes(_DWORD *a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v23 + 1) = *MEMORY[0x1E4F143B8];
  memset(v16, 0, 24);
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v16, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 6);
  uint64_t v6 = *a2;
  uint64_t v7 = *((void *)*a2 + 4);
  long long v8 = (*a2)[1];
  long long v10 = **a2;
  long long v11 = v8;
  uint64_t v12 = v7;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v13, *((const void **)v6 + 5), *((void *)v6 + 6), (uint64_t)(*((void *)v6 + 6) - *((void *)v6 + 5)) >> 2);
  if (a1[70] != -1) {
    LODWORD(v10) = 1;
  }
  if (a1[71] != -1) {
    DWORD1(v10) = 1;
  }
  if (a1[72] != -1) {
    DWORD2(v10) = 1;
  }
  if (a1[73] != -1) {
    HIDWORD(v10) = 1;
  }
  if (a1[74] != -1) {
    LODWORD(v11) = 1;
  }
  v18[0] = v10;
  v18[1] = v11;
  uint64_t v19 = v12;
  std::string __p = 0;
  std::vector<int> v21 = 0;
  uint64_t v22 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v13, (uint64_t)v14, (v14 - (unsigned char *)v13) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v16[3] = a3;
  char v17 = 0;
  uint64_t v9 = (char *)operator new(0x40uLL);
  *a3 = v9;
  a3[1] = v9;
  a3[2] = v9 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v18, &v23, (uint64_t)v9);
  if (__p)
  {
    std::vector<int> v21 = __p;
    operator delete(__p);
  }
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
  *(void *)&long long v10 = v16;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
}

void sub_192A1CFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v31 = v30;
  *(void *)(v29 + 8) = v31;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a21);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14)
  {
    a15 = (uint64_t)a14;
    operator delete(a14);
  }
  a9 = &a18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void Espresso::generic_general_concat_kernel::build_grads_for_inputs(uint64_t a1, Espresso::sequential_builder *a2, uint64_t a3)
{
  *(void *)&long long v43 = *MEMORY[0x1E4F143B8];
  long long v38 = xmmword_192DBFE30;
  int v39 = 1;
  uint64_t v6 = Espresso::sequential_builder::blob_shape(a2, **(void **)(a3 + 8));
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v36, (const Espresso::layer_shape *)v6, 0);
  uint64_t v7 = SHIDWORD(v36.__r_.__value_.__r.__words[2]);
  if (*(unsigned char *)(a1 + 284)) {
    int v8 = HIDWORD(v36.__r_.__value_.__r.__words[2]) + ~*(_DWORD *)(a1 + 280);
  }
  else {
    int v8 = *(_DWORD *)(a1 + 280);
  }
  int v37 = v8;
  uint64_t v9 = *(std::string::size_type **)(a3 + 16);
  std::string::size_type v10 = *v9;
  std::string::size_type v11 = v9[1];
  if (*v9 != v11)
  {
    unsigned int v12 = 0;
    do
    {
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v10))
      {
        uint64_t v13 = Espresso::sequential_builder::blob_shape(a2, v10);
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v36, (const Espresso::layer_shape *)v13, 0);
        *(void *)&long long v38 = __PAIR64__(*((_DWORD *)&v36.__r_.__value_.__l.__data_ + v7 + ~v37) + v12, v12);
        Espresso::blob_grad_contrib_name((uint64_t)&v36, v10, a3);
        std::string::basic_string[abi:ne180100]<0>(v32, "slice");
        uint64_t v14 = *(char **)a3;
        if (*(char *)(*(void *)a3 + 23) >= 0) {
          size_t v15 = *(unsigned __int8 *)(*(void *)a3 + 23);
        }
        else {
          size_t v15 = *(void *)(*(void *)a3 + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v29, v15 + 1);
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v16 = &v29;
        }
        else {
          int v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
        }
        if (v15)
        {
          if (v14[23] >= 0) {
            char v17 = v14;
          }
          else {
            char v17 = *(char **)v14;
          }
          memmove(v16, v17, v15);
        }
        *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + v15) = 58;
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &v36;
        }
        else {
          uint64_t v18 = (std::string *)v36.__r_.__value_.__r.__words[0];
        }
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v36.__r_.__value_.__l.__size_;
        }
        std::vector<int> v20 = std::string::append(&v29, (const std::string::value_type *)v18, size);
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        std::string::size_type v31 = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        uint64_t v22 = *(uint64_t **)(a3 + 8);
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v26 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v26, *v22, v22[1], 0xAAAAAAAAAAAAAAABLL * ((v22[1] - *v22) >> 3));
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v42, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
        }
        else {
          std::string v42 = v36;
        }
        long long v23 = 0;
        int32x4_t v24 = 0;
        int v25 = 0;
        int v40 = &v23;
        char v41 = 0;
        long long v23 = (std::string *)operator new(0x18uLL);
        int32x4_t v24 = v23;
        int v25 = v23 + 1;
        int32x4_t v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v25, (long long *)&v42, &v43, v23);
        Espresso::sequential_builder::add<Espresso::slice_params_t>(&v34, (uint64_t *)a2, (uint64_t)v32, (uint64_t)__p, (uint64_t)&v37, v26, v27, (uint64_t *)&v23);
        if (v35) {
          nitro::nitro_function::nitro_function(v35);
        }
        int v40 = &v23;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v42.__r_.__value_.__l.__data_);
        }
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
        if (SHIBYTE(v31) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
        if (v33 < 0) {
          operator delete(v32[0]);
        }
        unsigned int v12 = DWORD1(v38);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
      }
      v10 += 24;
    }
    while (v10 != v11);
  }
}

void sub_192A1D37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  *(void *)(v41 - 128) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 128));
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_store_global_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)&long long v31 = *MEMORY[0x1E4F143B8];
  Espresso::global_grad_name((uint64_t)&__str, (const void **)(a1 + 280));
  if (!*(unsigned char *)(a1 + 304)) {
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("non array mode load global grad");
  }
  uint64_t v6 = *(unsigned int *)(a1 + 332);
  if (v6 != 4) {
    Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("non array op %d", v6);
  }
  memset(&v20, 0, sizeof(v20));
  long long v22 = xmmword_192DCA4C0;
  unint64_t v23 = 0xFFFFFFFF00000001;
  char v21 = 1;
  int v24 = 5;
  std::string::operator=(&v20, &__str);
  Espresso::blob_grad_contrib_name((uint64_t)&v19, **(void **)(a3 + 16), a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "load_global");
  uint64_t v7 = *(void *)a3;
  uint64_t v8 = **(void **)(a3 + 16);
  if (*(char *)(v8 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v8 + 24), *(void *)(v8 + 32));
  }
  else {
    std::string v30 = *(std::string *)(v8 + 24);
  }
  unsigned int v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  v28.__r_.__value_.__s.__data_[8] = 0;
  unsigned int v12 = (std::string *)operator new(0x18uLL);
  uint64_t v13 = v12;
  uint64_t v14 = v12 + 1;
  uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, (long long *)&v30, &v31, v12);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v28, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else {
    std::string v28 = v19;
  }
  uint64_t v9 = 0;
  std::string::size_type v10 = 0;
  std::string::size_type v11 = 0;
  uint64_t v26 = &v9;
  char v27 = 0;
  uint64_t v9 = (std::string *)operator new(0x18uLL);
  std::string::size_type v10 = v9;
  std::string::size_type v11 = v9 + 1;
  std::string::size_type v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11, (long long *)&v28, (long long *)&v29, v9);
  Espresso::sequential_builder::add<Espresso::load_global_params_t>(&v17, a2, (uint64_t)__p, v7, (uint64_t)&v20, (uint64_t)v12, (uint64_t)v13, (uint64_t *)&v9);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  uint64_t v26 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_192A1D70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  *(void *)(v34 - 112) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 112));
  if (*(char *)(v34 - 57) < 0) {
    operator delete(*(void **)(v34 - 80));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (*(char *)(v34 - 129) < 0) {
    operator delete(*(void **)(v34 - 152));
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::load_global_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  std::string v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  size_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  int v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  int v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192A1D9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void *Espresso::generic_copy_kernel::get_runtime_type_config@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  return std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(a2, a1, a1);
}

void Espresso::generic_copy_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)&long long v28 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v21, "copy");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 16) + 8) - **(void **)(a3 + 16)) >> 3), 1uLL, (uint64_t)v21, 1);
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 24) + 8) - **(void **)(a3 + 24)) >> 3), 1uLL, (uint64_t)v21, 0);
  uint64_t v6 = **(long long ***)(a3 + 8);
  std::string::size_type v7 = **(void **)(a3 + 16);
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v7))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v20, v7, a3);
    std::string::basic_string[abi:ne180100]<0>(__p, "copy");
    uint64_t v8 = *(void *)a3;
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v6, *((void *)v6 + 1));
    }
    else
    {
      long long v9 = *v6;
      v27.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
    }
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    size_t v15 = 0;
    v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    v25.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v13 = (std::string *)operator new(0x18uLL);
    uint64_t v14 = v13;
    size_t v15 = v13 + 1;
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (long long *)&v27, &v28, v13);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v25, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
    }
    else {
      std::string v25 = v20;
    }
    std::string::size_type v10 = 0;
    std::string::size_type v11 = 0;
    unsigned int v12 = 0;
    unint64_t v23 = &v10;
    char v24 = 0;
    std::string::size_type v10 = (std::string *)operator new(0x18uLL);
    std::string::size_type v11 = v10;
    unsigned int v12 = v10 + 1;
    std::string::size_type v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v12, (long long *)&v25, (long long *)&v26, v10);
    Espresso::sequential_builder::add<Espresso::copy_params_t>(&v18, a2, (uint64_t)__p, v8, a1 + 280, (uint64_t)v13, (uint64_t)v14, (uint64_t *)&v10);
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    unint64_t v23 = &v10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
}

void sub_192A1DD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36)
{
  *(void *)(v36 - 128) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 128));
  if (*(char *)(v36 - 73) < 0) {
    operator delete(*(void **)(v36 - 96));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_copy_kernel::backpropable(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (*(_DWORD *)(a1 + 280) == 1) {
    Espresso::check_backpropable_result_t::not_backpropable_on_all_inputs((Espresso::check_backpropable_result_t *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3)), a3);
  }
  else {
    Espresso::base_kernel::backpropable(a2, a3);
  }
}

uint64_t Espresso::generic_scatter_kernel::get_output_to_input_blob_aliases@<X0>(uint64_t a1@<X8>)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  return std::unordered_map<int,int>::unordered_map(a1, (int *)v3, 1);
}

void Espresso::generic_scatter_kernel::build_grads_for_inputs(unsigned char *a1, uint64_t *a2, char **a3)
{
  *(void *)&long long v104 = *MEMORY[0x1E4F143B8];
  if (!a1[301]) {
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("scatter::build_grads_for_inputs with simple_scatter == false is not implemented");
  }
  if (a1[302]) {
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("scatter::build_grads_for_inputs with nd_mode == true is not implemented");
  }
  uint64_t v6 = a3[2];
  uint64_t v8 = *(void *)v6;
  uint64_t v7 = *((void *)v6 + 1);
  std::string::basic_string[abi:ne180100]<0>(&v97, "scatter");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3), 3uLL, (uint64_t)&v97, 1);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  std::string::size_type v9 = *(void *)a3[2];
  std::string::size_type v10 = *(long long **)a3[1];
  std::string::size_type v11 = (long long *)(v9 + 24);
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3[5], v9))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v90, v9, (uint64_t)a3);
    if (a1[300])
    {
      std::string::basic_string[abi:ne180100]<0>(&v97, "copy");
      unsigned int v12 = *a3;
      if ((*a3)[23] >= 0) {
        size_t v13 = (*a3)[23];
      }
      else {
        size_t v13 = *((void *)*a3 + 1);
      }
      uint64_t v14 = &v89;
      std::string::basic_string[abi:ne180100]((uint64_t)&v89, v13 + 1);
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v14 = (std::string *)v89.__r_.__value_.__r.__words[0];
      }
      if (v13)
      {
        if (v12[23] >= 0) {
          size_t v15 = v12;
        }
        else {
          size_t v15 = *(char **)v12;
        }
        memmove(v14, v15, v13);
      }
      *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 64;
      int v16 = *(char *)(v9 + 23);
      if (v16 >= 0) {
        char v17 = (const std::string::value_type *)v9;
      }
      else {
        char v17 = *(const std::string::value_type **)v9;
      }
      if (v16 >= 0) {
        std::string::size_type v18 = *(unsigned __int8 *)(v9 + 23);
      }
      else {
        std::string::size_type v18 = *(void *)(v9 + 8);
      }
      std::string v19 = std::string::append(&v89, v17, v18);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = *((void *)&v19->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      LODWORD(v66.__r_.__value_.__l.__data_) = 0;
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v21 = *v10;
        v103.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v21;
      }
      std::string::size_type v84 = 0;
      char v85 = 0;
      std::string v86 = 0;
      v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
      v101.__r_.__value_.__s.__data_[8] = 0;
      std::string::size_type v84 = (std::string *)operator new(0x18uLL);
      char v85 = v84;
      std::string v86 = v84 + 1;
      char v85 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v86, (long long *)&v103, &v104, v84);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v101, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
      }
      else {
        std::string v101 = v90;
      }
      std::string v81 = 0;
      long long v82 = 0;
      char v83 = 0;
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
      v67.__r_.__value_.__s.__data_[8] = 0;
      std::string v81 = (std::string *)operator new(0x18uLL);
      long long v82 = v81;
      char v83 = v81 + 1;
      long long v82 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v83, (long long *)&v101, (long long *)&v102, v81);
      Espresso::sequential_builder::add<Espresso::copy_params_t>(&v87, a2, (uint64_t)&v97, (uint64_t)__p, (uint64_t)&v66, (uint64_t)v84, (uint64_t)v85, (uint64_t *)&v81);
      if (v88) {
        nitro::nitro_function::nitro_function(v88);
      }
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v101.__r_.__value_.__l.__data_);
      }
      v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v103.__r_.__value_.__l.__data_);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_100;
      }
      char v22 = (void *)v97.__r_.__value_.__r.__words[0];
    }
    else
    {
      *(void *)&__p[20] = 0xFFFFFFFF00000001;
      int v79 = 0;
      memset(__p, 0, 20);
      char v80 = 0;
      std::operator+<char>();
      std::string::basic_string[abi:ne180100]<0>(&v97, "fill");
      if (*(char *)(v9 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)(v9 + 48), *(void *)(v9 + 56));
      }
      else {
        std::string v103 = *(std::string *)(v9 + 48);
      }
      long long v73 = 0;
      uint64_t v74 = 0;
      long long v75 = 0;
      v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
      v101.__r_.__value_.__s.__data_[8] = 0;
      long long v73 = (std::string *)operator new(0x18uLL);
      uint64_t v74 = v73;
      long long v75 = v73 + 1;
      uint64_t v74 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v75, (long long *)&v103, &v104, v73);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v101, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
      }
      else {
        std::string v101 = v89;
      }
      long long v70 = 0;
      uint64_t v71 = 0;
      std::string v72 = 0;
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
      v67.__r_.__value_.__s.__data_[8] = 0;
      long long v70 = (std::string *)operator new(0x18uLL);
      uint64_t v71 = v70;
      std::string v72 = v70 + 1;
      uint64_t v71 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v72, (long long *)&v101, (long long *)&v102, v70);
      Espresso::sequential_builder::add<Espresso::fill_params_t>(&v76, a2, (uint64_t)&v97, (uint64_t)&v89, (uint64_t)__p, (uint64_t)v73, (uint64_t)v74, (uint64_t *)&v70);
      if (v77) {
        nitro::nitro_function::nitro_function(v77);
      }
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v101.__r_.__value_.__l.__data_);
      }
      v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v103.__r_.__value_.__l.__data_);
      }
      unint64_t v23 = (std::string *)(a1 + 280);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      std::string v103 = *v23;
      std::string::basic_string[abi:ne180100]<0>(&v101, "scatter");
      char v24 = *a3;
      if ((*a3)[23] >= 0) {
        size_t v25 = (*a3)[23];
      }
      else {
        size_t v25 = *((void *)*a3 + 1);
      }
      uint64_t v26 = &v66;
      std::string::basic_string[abi:ne180100]((uint64_t)&v66, v25 + 1);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v26 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      if (v25)
      {
        if (v24[23] >= 0) {
          std::string v27 = v24;
        }
        else {
          std::string v27 = *(char **)v24;
        }
        memmove(v26, v27, v25);
      }
      *(_WORD *)((char *)&v26->__r_.__value_.__l.__data_ + v25) = 64;
      int v28 = *(char *)(v9 + 23);
      if (v28 >= 0) {
        uint64_t v29 = (const std::string::value_type *)v9;
      }
      else {
        uint64_t v29 = *(const std::string::value_type **)v9;
      }
      if (v28 >= 0) {
        std::string::size_type v30 = *(unsigned __int8 *)(v9 + 23);
      }
      else {
        std::string::size_type v30 = *(void *)(v9 + 8);
      }
      long long v31 = std::string::append(&v66, v29, v30);
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v33 = *v10;
        v97.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v33;
      }
      if (*(char *)(v9 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)(v9 + 24), *(void *)(v9 + 32));
      }
      else
      {
        long long v34 = *v11;
        v98.__r_.__value_.__r.__words[2] = *(void *)(v9 + 40);
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v34;
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v99, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
      }
      else {
        std::string v99 = v89;
      }
      char v63 = 0;
      long long v64 = 0;
      char v65 = 0;
      v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
      v95.__r_.__value_.__s.__data_[8] = 0;
      char v63 = (std::string *)operator new(0x48uLL);
      long long v64 = v63;
      char v65 = v63 + 3;
      long long v64 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v65, (long long *)&v97, (long long *)&v100, v63);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v95, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
      }
      else {
        std::string v95 = v90;
      }
      std::string v60 = 0;
      std::string v61 = 0;
      long long v62 = 0;
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
      v57.__r_.__value_.__s.__data_[8] = 0;
      std::string v60 = (std::string *)operator new(0x18uLL);
      std::string v61 = v60;
      long long v62 = v60 + 1;
      std::string v61 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v62, (long long *)&v95, (long long *)&v96, v60);
      Espresso::sequential_builder::add<Espresso::scatter_params_t>(&v68, a2, (uint64_t)&v101, (uint64_t)&v67, (uint64_t)&v103, (uint64_t)v63, (uint64_t)v64, (uint64_t *)&v60);
      if (v69) {
        nitro::nitro_function::nitro_function(v69);
      }
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
      for (uint64_t i = 0; i != -9; i -= 3)
      {
        if (SHIBYTE(v99.__r_.__value_.__r.__words[i + 2]) < 0) {
          operator delete(*(void **)((char *)&v99.__r_.__value_.__l.__data_ + i * 8));
        }
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v101.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_100;
      }
      char v22 = (void *)v89.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
LABEL_100:
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3[5], v9 + 48))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v67, v9 + 48, (uint64_t)a3);
    *(void *)&long long v36 = 0x100000001;
    *((void *)&v36 + 1) = 0x100000001;
    *(_OWORD *)std::string __p = v36;
    *(void *)&__p[16] = 4294967294;
    __p[24] = 1;
    std::string::basic_string[abi:ne180100]<0>(&v66, "array_gather");
    int v37 = *a3;
    if ((*a3)[23] >= 0) {
      size_t v38 = (*a3)[23];
    }
    else {
      size_t v38 = *((void *)*a3 + 1);
    }
    int v39 = &v57;
    std::string::basic_string[abi:ne180100]((uint64_t)&v57, v38 + 1);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v39 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    if (v38)
    {
      if (v37[23] >= 0) {
        int v40 = v37;
      }
      else {
        int v40 = *(char **)v37;
      }
      memmove(v39, v40, v38);
    }
    *(_WORD *)((char *)&v39->__r_.__value_.__l.__data_ + v38) = 64;
    int v41 = *(char *)(v9 + 71);
    if (v41 >= 0) {
      std::string v42 = (const std::string::value_type *)(v9 + 48);
    }
    else {
      std::string v42 = *(const std::string::value_type **)(v9 + 48);
    }
    if (v41 >= 0) {
      std::string::size_type v43 = *(unsigned __int8 *)(v9 + 71);
    }
    else {
      std::string::size_type v43 = *(void *)(v9 + 56);
    }
    std::string v44 = std::string::append(&v57, v42, v43);
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v95.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v46 = *v10;
      v97.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
      *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v46;
    }
    if (*(char *)(v9 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)(v9 + 24), *(void *)(v9 + 32));
    }
    else
    {
      long long v47 = *v11;
      v98.__r_.__value_.__r.__words[2] = *(void *)(v9 + 40);
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v47;
    }
    char v54 = 0;
    std::string v55 = 0;
    char v56 = 0;
    v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    v90.__r_.__value_.__s.__data_[8] = 0;
    char v54 = (std::string *)operator new(0x30uLL);
    std::string v55 = v54;
    char v56 = v54 + 2;
    std::string v55 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v56, (long long *)&v97, (long long *)&v99, v54);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v93, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
    }
    else {
      std::string v93 = v67;
    }
    std::string v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
    v90.__r_.__value_.__s.__data_[8] = 0;
    std::string v51 = (std::string *)operator new(0x18uLL);
    uint64_t v52 = v51;
    uint64_t v53 = v51 + 1;
    uint64_t v52 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v53, (long long *)&v93, (long long *)&v94, v51);
    memset(&v103, 0, sizeof(v103));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v103, (uint64_t)v54, (uint64_t)v55, 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v54) >> 3));
    memset(&v101, 0, sizeof(v101));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v101, (uint64_t)v51, (uint64_t)v52, 0xAAAAAAAAAAAAAAABLL * (((char *)v52 - (char *)v51) >> 3));
    uint64_t v48 = a2[12];
    LODWORD(v90.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
    Espresso::abstract_engine_factory::make_kernel_priv(v48, (uint64_t)(a2 + 14), (uint64_t)&v66, (uint64_t)__p, (int *)&v90);
    uint64_t v49 = v59;
    v91[0] = v58;
    v91[1] = v59;
    if (v59) {
      atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    memset(&v90, 0, sizeof(v90));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v90, (uint64_t)v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103.__r_.__value_.__l.__size_ - v103.__r_.__value_.__r.__words[0]) >> 3));
    memset(&v89, 0, sizeof(v89));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v89, (uint64_t)v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101.__r_.__value_.__l.__size_ - v101.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v91, (uint64_t)&v66, (uint64_t)&v95, (uint64_t)(a2 + 7), (std::string **)&v90, (std::string **)&v89);
    uint64_t v92 = &v89;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
    uint64_t v92 = &v90;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
    if (v49) {
      nitro::nitro_function::nitro_function(v49);
    }
    if (*a2) {
      Espresso::sequential_builder::add_shape_from_kernel(a2, v58, (long long **)&v103, (uint64_t *)&v101);
    }
    v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v101;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
    v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
    if (v59) {
      nitro::nitro_function::nitro_function(v59);
    }
    v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v93.__r_.__value_.__l.__data_);
    }
    v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
    for (uint64_t j = 0; j != -6; j -= 3)
    {
      if (SHIBYTE(v98.__r_.__value_.__r.__words[j + 2]) < 0) {
        operator delete(*(void **)((char *)&v97 + j * 8 + 24));
      }
    }
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v95.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
  }
}

void sub_192A1EA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  a73 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a73);
  uint64_t v75 = 0;
  uint64_t v76 = v73 - 240;
  while (1)
  {
    if (*(char *)(v76 + v75 + 71) < 0) {
      operator delete(*(void **)(v76 + v75 + 48));
    }
    v75 -= 24;
    if (v75 == -72)
    {
      if (a37 < 0) {
        operator delete(__p);
      }
      if (a31 < 0) {
        operator delete(a26);
      }
      if (*(char *)(v73 - 137) < 0) {
        operator delete(*(void **)(v73 - 160));
      }
      if (a67 < 0) {
        operator delete(a62);
      }
      if (a72 < 0) {
        operator delete(a68);
      }
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::generic_scatter_kernel::backpropable(void *a1@<X8>)
{
  __int16 v2 = 1;
  char v3 = 1;
  std::vector<BOOL>::vector(__p, &v2, 3);
  std::vector<BOOL>::vector(a1, (uint64_t)__p);
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_192A1EF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_scatter_kernel::top_shapes_for_bottom_shapes(long long **a1@<X1>, void *a2@<X8>)
{
  *((void *)&v12 + 1) = *MEMORY[0x1E4F143B8];
  char v3 = *a1;
  uint64_t v4 = *((void *)*a1 + 4);
  long long v5 = (*a1)[1];
  v7[0] = **a1;
  v7[1] = v5;
  uint64_t v8 = v4;
  std::string __p = 0;
  std::string::size_type v10 = 0;
  uint64_t v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v3 + 5), *((void *)v3 + 6), (uint64_t)(*((void *)v3 + 6) - *((void *)v3 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    std::string::size_type v10 = __p;
    operator delete(__p);
  }
}

void sub_192A1F008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = v18;
  *(void *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_load_random_kernel::backpropable(void *a1@<X1>, void *a2@<X8>)
{
}

void *Espresso::generic_load_random_kernel::top_shapes_for_bottom_shapes@<X0>(void *result@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  long long v5 = *a2;
  uint64_t v6 = a2[1];
  if (v5 == v6)
  {
    int v7 = *((_DWORD *)result + 78);
    long long v14 = *(_OWORD *)(result + 37);
    if (*((int *)result + 80) <= 0) {
      int v8 = -1;
    }
    else {
      int v8 = *((_DWORD *)result + 80);
    }
    unint64_t v9 = *((int *)result + 79);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v9)
    {
      std::vector<Espresso::layer_shape>::__vallocate[abi:ne180100](a3, v9);
      uint64_t v10 = a3[1];
      uint64_t v11 = v10 + (v9 << 6);
      unint64_t v12 = v9 << 6;
      size_t v13 = (void *)(v10 + 40);
      do
      {
        *(_OWORD *)(v13 - 5) = v14;
        *((_DWORD *)v13 - 6) = v7;
        *((_DWORD *)v13 - 5) = v8;
        *((_OWORD *)v13 - 1) = 0uLL;
        v13[1] = 0;
        long long v13[2] = 0;
        *size_t v13 = 0;
        double result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v13, 0, 0, 0);
        v13 += 8;
        v12 -= 64;
      }
      while (v12);
      a3[1] = v11;
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a3, v5, v6, ((char *)v6 - (char *)v5) >> 6);
  }
  return result;
}

void sub_192A1F194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Espresso::generic_range_kernel::top_shapes_for_bottom_shapes(float *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *(void *)&long long v13 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = 1;
  if (a2[1] == *a2) {
    unsigned int v4 = vcvtps_s32_f32((float)(a1[70] - a1[71]) / a1[72]);
  }
  unsigned int v7 = v4;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  long long v8 = v5;
  int v9 = 1;
  long long v10 = 0u;
  *(_OWORD *)std::string __p = 0u;
  uint64_t v12 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)&v7, &v13, (uint64_t)v6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_192A1F2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  *(void *)(v18 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_matrix_band_part_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *((void *)&v22 + 1) = *MEMORY[0x1E4F143B8];
  long long v5 = *(const Espresso::layer_shape **)a2;
  if (*(void *)(a2 + 8) - (void)v5 != 64) {
    Espresso::throw_exception_selector<Espresso::generic_error>("matrix_band_part takes exactly one input blob.");
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v13, v5, 0);
  if (v14 <= 1) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Rank of the input must be atleast 2 for matrix_band_part");
  }
  long long v8 = *(const Espresso::layer_shape **)a2;
  BOOL v9 = v14 >= 4 && *(_DWORD *)(a1 + 288) == 0;
  if (v9 && (*(_DWORD *)v8 != 1 || *((_DWORD *)v8 + 1) != 1)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Only 2d matrices are supported by matrix_band_part");
  }
  long long v10 = *((_OWORD *)v8 + 1);
  uint64_t v11 = *((void *)v8 + 4);
  v17[0] = *(_OWORD *)v8;
  v17[1] = v10;
  uint64_t v18 = v11;
  std::string __p = 0;
  long long v20 = 0;
  uint64_t v21 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v8 + 5), *((void *)v8 + 6), (uint64_t)(*((void *)v8 + 6) - *((void *)v8 + 5)) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  size_t v15 = a3;
  char v16 = 0;
  uint64_t v12 = (char *)operator new(0x40uLL);
  *a3 = v12;
  a3[1] = v12;
  a3[2] = v12 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v17, &v22, (uint64_t)v12);
  if (__p)
  {
    long long v20 = __p;
    operator delete(__p);
  }
}

void sub_192A1F458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  *(void *)(v21 + 8) = v22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a13);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_batch_matmul_kernel::build_grads_for_inputs(unsigned char *a1, uint64_t *a2, char **a3)
{
  *((void *)&v101[0] + 1) = *MEMORY[0x1E4F143B8];
  std::string::size_type v6 = *(void *)a3[2];
  unsigned int v7 = (_OWORD *)(v6 + 24);
  long long v8 = *(long long **)a3[1];
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3[5], v6))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v94, v6, (uint64_t)a3);
    char v91 = a1[280];
    char v92 = 0;
    char v9 = a1[282];
    char v93 = v9 ^ 1;
    if (a1[281])
    {
      char v92 = v9;
      char v93 = 1;
      std::string::basic_string[abi:ne180100]<0>(v87, "batch_matmul");
      long long v10 = *a3;
      if ((*a3)[23] >= 0) {
        size_t v11 = (*a3)[23];
      }
      else {
        size_t v11 = *((void *)*a3 + 1);
      }
      uint64_t v12 = &v84;
      std::string::basic_string[abi:ne180100]((uint64_t)&v84, v11 + 1);
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v12 = (std::string *)v84.__r_.__value_.__r.__words[0];
      }
      if (v11)
      {
        if (v10[23] >= 0) {
          long long v13 = v10;
        }
        else {
          long long v13 = *(char **)v10;
        }
        memmove(v12, v13, v11);
      }
      *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 58;
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v14 = &v94;
      }
      else {
        unsigned int v14 = (std::string *)v94.__r_.__value_.__r.__words[0];
      }
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v94.__r_.__value_.__l.__size_;
      }
      char v16 = std::string::append(&v84, (const std::string::value_type *)v14, size);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      std::string::size_type v86 = v16->__r_.__value_.__r.__words[2];
      long long __p = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)(v6 + 24), *(void *)(v6 + 32));
      }
      else
      {
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = *v7;
        v99.__r_.__value_.__r.__words[2] = *(void *)(v6 + 40);
      }
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v27 = *v8;
        v100.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v27;
      }
      std::string v81 = 0;
      long long v82 = 0;
      char v83 = 0;
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
      v97.__r_.__value_.__s.__data_[8] = 0;
      std::string v81 = (std::string *)operator new(0x30uLL);
      long long v82 = v81;
      char v83 = v81 + 2;
      long long v82 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v83, (long long *)&v99, v101, v81);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v97, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
      }
      else {
        std::string v97 = v94;
      }
      std::string v78 = 0;
      int v79 = 0;
      char v80 = 0;
      std::string v95 = &v78;
      char v96 = 0;
      std::string v78 = (std::string *)operator new(0x18uLL);
      int v79 = v78;
      char v80 = v78 + 1;
      int v79 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v80, (long long *)&v97, (long long *)&v98, v78);
      Espresso::sequential_builder::add<Espresso::batch_matmul_params_t>(&v89, a2, (uint64_t)v87, (uint64_t)&__p, (uint64_t)&v91, (uint64_t)v81, (uint64_t)v82, (uint64_t *)&v78);
      if (v90) {
        nitro::nitro_function::nitro_function(v90);
      }
      std::string v95 = &v78;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
      for (uint64_t i = 0; i != -6; i -= 3)
      {
        if (SHIBYTE(v100.__r_.__value_.__r.__words[i + 2]) < 0) {
          operator delete(*(void **)((char *)&v99 + i * 8 + 24));
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v87, "batch_matmul");
      uint64_t v18 = *a3;
      if ((*a3)[23] >= 0) {
        size_t v19 = (*a3)[23];
      }
      else {
        size_t v19 = *((void *)*a3 + 1);
      }
      long long v20 = &v84;
      std::string::basic_string[abi:ne180100]((uint64_t)&v84, v19 + 1);
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v20 = (std::string *)v84.__r_.__value_.__r.__words[0];
      }
      if (v19)
      {
        if (v18[23] >= 0) {
          uint64_t v21 = v18;
        }
        else {
          uint64_t v21 = *(char **)v18;
        }
        memmove(v20, v21, v19);
      }
      *(_WORD *)((char *)&v20->__r_.__value_.__l.__data_ + v19) = 58;
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v22 = &v94;
      }
      else {
        uint64_t v22 = (std::string *)v94.__r_.__value_.__r.__words[0];
      }
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v23 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v23 = v94.__r_.__value_.__l.__size_;
      }
      char v24 = std::string::append(&v84, (const std::string::value_type *)v22, v23);
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      std::string::size_type v86 = v24->__r_.__value_.__r.__words[2];
      long long __p = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v26 = *v8;
        v99.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v26;
      }
      if (*(char *)(v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)(v6 + 24), *(void *)(v6 + 32));
      }
      else
      {
        long long v29 = *v7;
        v100.__r_.__value_.__r.__words[2] = *(void *)(v6 + 40);
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v29;
      }
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
      v97.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v73 = (std::string *)operator new(0x30uLL);
      uint64_t v74 = v73;
      uint64_t v75 = v73 + 2;
      uint64_t v74 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v75, (long long *)&v99, v101, v73);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v97, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
      }
      else {
        std::string v97 = v94;
      }
      long long v70 = 0;
      uint64_t v71 = 0;
      std::string v72 = 0;
      std::string v95 = &v70;
      char v96 = 0;
      long long v70 = (std::string *)operator new(0x18uLL);
      uint64_t v71 = v70;
      std::string v72 = v70 + 1;
      uint64_t v71 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v72, (long long *)&v97, (long long *)&v98, v70);
      Espresso::sequential_builder::add<Espresso::batch_matmul_params_t>(&v76, a2, (uint64_t)v87, (uint64_t)&__p, (uint64_t)&v91, (uint64_t)v73, (uint64_t)v74, (uint64_t *)&v70);
      if (v77) {
        nitro::nitro_function::nitro_function(v77);
      }
      std::string v95 = &v70;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
      for (uint64_t j = 0; j != -6; j -= 3)
      {
        if (SHIBYTE(v100.__r_.__value_.__r.__words[j + 2]) < 0) {
          operator delete(*(void **)((char *)&v99 + j * 8 + 24));
        }
      }
    }
    if (SHIBYTE(v86) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
    if (v88 < 0) {
      operator delete(v87[0]);
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3[5], (uint64_t)v7))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v94, (std::string::size_type)v7, (uint64_t)a3);
    char v91 = a1[280];
    char v31 = a1[281];
    char v92 = v31 ^ 1;
    char v93 = 0;
    if (a1[282])
    {
      char v92 = 1;
      char v93 = v31;
      std::string::basic_string[abi:ne180100]<0>(v87, "batch_matmul");
      long long v32 = *a3;
      if ((*a3)[23] >= 0) {
        size_t v33 = (*a3)[23];
      }
      else {
        size_t v33 = *((void *)*a3 + 1);
      }
      long long v34 = &v84;
      std::string::basic_string[abi:ne180100]((uint64_t)&v84, v33 + 1);
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v34 = (std::string *)v84.__r_.__value_.__r.__words[0];
      }
      if (v33)
      {
        if (v32[23] >= 0) {
          uint64_t v35 = v32;
        }
        else {
          uint64_t v35 = *(char **)v32;
        }
        memmove(v34, v35, v33);
      }
      *(_WORD *)((char *)&v34->__r_.__value_.__l.__data_ + v33) = 58;
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v36 = &v94;
      }
      else {
        long long v36 = (std::string *)v94.__r_.__value_.__r.__words[0];
      }
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v37 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v37 = v94.__r_.__value_.__l.__size_;
      }
      size_t v38 = std::string::append(&v84, (const std::string::value_type *)v36, v37);
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      std::string::size_type v86 = v38->__r_.__value_.__r.__words[2];
      long long __p = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v40 = *v8;
        v99.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v40;
      }
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
      }
      else
      {
        long long v50 = *(_OWORD *)v6;
        v100.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v50;
      }
      char v65 = 0;
      std::string v66 = 0;
      std::string v67 = 0;
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
      v97.__r_.__value_.__s.__data_[8] = 0;
      char v65 = (std::string *)operator new(0x30uLL);
      std::string v66 = v65;
      std::string v67 = v65 + 2;
      std::string v66 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v67, (long long *)&v99, v101, v65);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v97, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
      }
      else {
        std::string v97 = v94;
      }
      long long v62 = 0;
      char v63 = 0;
      long long v64 = 0;
      std::string v95 = &v62;
      char v96 = 0;
      long long v62 = (std::string *)operator new(0x18uLL);
      char v63 = v62;
      long long v64 = v62 + 1;
      char v63 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v64, (long long *)&v97, (long long *)&v98, v62);
      Espresso::sequential_builder::add<Espresso::batch_matmul_params_t>(&v68, a2, (uint64_t)v87, (uint64_t)&__p, (uint64_t)&v91, (uint64_t)v65, (uint64_t)v66, (uint64_t *)&v62);
      if (v69) {
        nitro::nitro_function::nitro_function(v69);
      }
      std::string v95 = &v62;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
      for (uint64_t k = 0; k != -6; k -= 3)
      {
        if (SHIBYTE(v100.__r_.__value_.__r.__words[k + 2]) < 0) {
          operator delete(*(void **)((char *)&v99 + k * 8 + 24));
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v87, "batch_matmul");
      int v41 = *a3;
      if ((*a3)[23] >= 0) {
        size_t v42 = (*a3)[23];
      }
      else {
        size_t v42 = *((void *)*a3 + 1);
      }
      std::string::size_type v43 = &v84;
      std::string::basic_string[abi:ne180100]((uint64_t)&v84, v42 + 1);
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v43 = (std::string *)v84.__r_.__value_.__r.__words[0];
      }
      if (v42)
      {
        if (v41[23] >= 0) {
          std::string v44 = v41;
        }
        else {
          std::string v44 = *(char **)v41;
        }
        memmove(v43, v44, v42);
      }
      *(_WORD *)((char *)&v43->__r_.__value_.__l.__data_ + v42) = 58;
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v45 = &v94;
      }
      else {
        long long v45 = (std::string *)v94.__r_.__value_.__r.__words[0];
      }
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v46 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v46 = v94.__r_.__value_.__l.__size_;
      }
      long long v47 = std::string::append(&v84, (const std::string::value_type *)v45, v46);
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      std::string::size_type v86 = v47->__r_.__value_.__r.__words[2];
      long long __p = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
      }
      else
      {
        long long v49 = *(_OWORD *)v6;
        v99.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v49;
      }
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v52 = *v8;
        v100.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v52;
      }
      std::string v57 = 0;
      uint64_t v58 = 0;
      std::string v59 = 0;
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      v97.__r_.__value_.__s.__data_[8] = 0;
      std::string v57 = (std::string *)operator new(0x30uLL);
      uint64_t v58 = v57;
      std::string v59 = v57 + 2;
      uint64_t v58 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v59, (long long *)&v99, v101, v57);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v97, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
      }
      else {
        std::string v97 = v94;
      }
      char v54 = 0;
      std::string v55 = 0;
      char v56 = 0;
      std::string v95 = &v54;
      char v96 = 0;
      char v54 = (std::string *)operator new(0x18uLL);
      std::string v55 = v54;
      char v56 = v54 + 1;
      std::string v55 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v56, (long long *)&v97, (long long *)&v98, v54);
      Espresso::sequential_builder::add<Espresso::batch_matmul_params_t>(&v60, a2, (uint64_t)v87, (uint64_t)&__p, (uint64_t)&v91, (uint64_t)v57, (uint64_t)v58, (uint64_t *)&v54);
      if (v61) {
        nitro::nitro_function::nitro_function(v61);
      }
      std::string v95 = &v54;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
      for (uint64_t m = 0; m != -6; m -= 3)
      {
        if (SHIBYTE(v100.__r_.__value_.__r.__words[m + 2]) < 0) {
          operator delete(*(void **)((char *)&v99 + m * 8 + 24));
        }
      }
    }
    if (SHIBYTE(v86) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
    if (v88 < 0) {
      operator delete(v87[0]);
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
  }
}

void sub_192A1FF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  *(void *)(v57 - 192) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 192));
  uint64_t v59 = 0;
  uint64_t v60 = v57 - 160;
  while (1)
  {
    if (*(char *)(v60 + v59 + 47) < 0) {
      operator delete(*(void **)(v60 + v59 + 24));
    }
    v59 -= 24;
    if (v59 == -48)
    {
      if (a51 < 0) {
        operator delete(__p);
      }
      if (a45 < 0) {
        operator delete(a40);
      }
      if (a57 < 0) {
        operator delete(a52);
      }
      if (*(char *)(v57 - 209) < 0) {
        operator delete(*(void **)(v57 - 232));
      }
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::sequential_builder::add<Espresso::batch_matmul_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  size_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  size_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  long long v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  long long v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192A20418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::generic_fill_kernel::backpropable(void *a1@<X1>, void *a2@<X8>)
{
}

void Espresso::generic_fill_kernel::blob_options(char a1@<W1>, void *a2@<X8>)
{
  if (a1)
  {
    unsigned int v4 = operator new(0x70uLL);
    v4[1] = 0;
    uint64_t v4[2] = 0;
    void *v4 = &unk_1EE388F48;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    int8x16_t v4[3] = &unk_1EE3661F8;
    *((_DWORD *)v4 + 12) = 1065353216;
    v4[7] = 0x1FFFFFFFFLL;
    v4[12] = 0;
    v4[13] = 0;
    v4[8] = 0;
    v4[9] = 0;
    *((unsigned char *)v4 + 88) = 0;
    v4[10] = 0;
    *a2 = v4 + 3;
    a2[1] = v4;
    *((unsigned char *)v4 + 32) = 1;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void Espresso::generic_tensor_zero_pad_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)&long long v44 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v37, "tensor_zero_pad");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 16) + 8) - **(void **)(a3 + 16)) >> 3), 1uLL, (uint64_t)v37, 1);
  std::string::size_type v6 = **(long long ***)(a3 + 16);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v6, *((void *)v6 + 1));
  }
  else
  {
    long long v7 = *v6;
    v36.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v7;
  }
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), (uint64_t)&v36))goto LABEL_28; {
  if (*(unsigned char *)(a1 + 544))
  }
  {
    size_t v15 = "backprop tensor_zero_pad when pad_to_given_size_mode is true";
    goto LABEL_35;
  }
  if (!*(unsigned char *)(a1 + 280))
  {
    size_t v15 = "backprop tensor_zero_pad when nd_mode is false";
LABEL_35:
    Espresso::throw_exception_selector<Espresso::not_implemented_error>(v15);
  }
  uint64_t v8 = 0;
  v27[0] = 0;
  v27[1] = 0;
  int v28 = 0;
  int v30 = 1;
  long long v29 = xmmword_192E06E0C;
  int v32 = 1;
  long long v31 = xmmword_192E06E0C;
  long long v33 = 0u;
  long long v34 = 0u;
  unint64_t v35 = 0xFFFFFFFF00000000;
  char v9 = (int *)(a1 + 292);
  for (uint64_t i = 65; i != 70; ++i)
  {
    int v11 = *v9;
    *(_DWORD *)((char *)v27 + v8) = *(v9 - 1);
    if (v11) {
      *(_DWORD *)((char *)&v29 + v8) = -v11;
    }
    else {
      *((unsigned char *)v27 + i) = 1;
    }
    v9 += 2;
    v8 += 4;
  }
  Espresso::blob_grad_contrib_name((uint64_t)&v26, (std::string::size_type)&v36, a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice");
  uint64_t v12 = *(void *)a3;
  uint64_t v13 = **(long long ***)(a3 + 8);
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)v13, *((void *)v13 + 1));
  }
  else
  {
    long long v14 = *v13;
    v43.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v14;
  }
  size_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  v41.__r_.__value_.__s.__data_[8] = 0;
  size_t v19 = (std::string *)operator new(0x18uLL);
  uint64_t v20 = v19;
  uint64_t v21 = v19 + 1;
  uint64_t v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v21, (long long *)&v43, &v44, v19);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v41, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  }
  else {
    std::string v41 = v26;
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  long long v39 = &v16;
  char v40 = 0;
  uint64_t v16 = (std::string *)operator new(0x18uLL);
  uint64_t v17 = v16;
  uint64_t v18 = v16 + 1;
  uint64_t v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (long long *)&v41, (long long *)&v42, v16);
  Espresso::sequential_builder::add<Espresso::general_slice_params_t>(&v24, a2, (uint64_t)__p, v12, (uint64_t)v27, (uint64_t)v19, (uint64_t)v20, (uint64_t *)&v16);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  long long v39 = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
LABEL_28:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
}

void sub_192A208CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  *(void *)(v29 - 112) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 112));
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v29 - 153) < 0) {
    operator delete(*(void **)(v29 - 176));
  }
  if (*(char *)(v29 - 129) < 0) {
    operator delete(*(void **)(v29 - 152));
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_tensor_zero_pad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *((void *)&v47 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  if ((unint64_t)(a2[1] - v4) >= 0x41)
  {
    long long v6 = *(_OWORD *)(v4 + 16);
    uint64_t v7 = *(void *)(v4 + 32);
    v42[0] = *(_OWORD *)v4;
    v42[1] = v6;
    uint64_t v43 = v7;
    long long __p = 0;
    long long v45 = 0;
    uint64_t v46 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v4 + 40), *(void *)(v4 + 48), (uint64_t)(*(void *)(v4 + 48) - *(void *)(v4 + 40)) >> 2);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v37 = a3;
    char v38 = 0;
    uint64_t v8 = (char *)operator new(0x40uLL);
    *(void *)a3 = v8;
    *(void *)(a3 + 8) = v8;
    *(void *)(a3 + 16) = v8 + 64;
    uint64_t v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, v42, &v47, (uint64_t)v8);
LABEL_33:
    *(void *)(a3 + 8) = v9;
    int v30 = __p;
    if (!__p) {
      return;
    }
    long long v45 = __p;
    goto LABEL_35;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v37, (const Espresso::layer_shape *)v4, 0);
  if (!v39)
  {
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v37, 0, (uint64_t)v42);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    v36.__begin_ = (std::vector<int>::pointer)a3;
    LOBYTE(v36.__end_) = 0;
    long long v31 = (char *)operator new(0x40uLL);
    *(void *)a3 = v31;
    *(void *)(a3 + 8) = v31;
    *(void *)(a3 + 16) = v31 + 64;
    uint64_t v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, v42, &v47, (uint64_t)v31);
    goto LABEL_33;
  }
  Espresso::layer_nd_shape::shape_vector(&v36, (uint64_t)&v37);
  begiuint64_t n = v36.__begin_;
  std::vector<int>::pointer end = v36.__end_;
  std::vector<int>::size_type v13 = v36.__end_ - v36.__begin_;
  std::vector<int>::vector(&v35, v13);
  if (end != begin)
  {
    int v14 = *(unsigned __int8 *)(a1 + 544);
    std::vector<int>::pointer v15 = v36.__begin_;
    std::vector<int>::pointer v16 = v35.__begin_;
    if (v13 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v13;
    }
    uint64_t v18 = (int *)(a1 + 292);
    do
    {
      int v19 = *(v18 - 1);
      int v20 = *v18;
      int v21 = v19 & ~(v19 >> 31);
      unsigned int v22 = v20 & ~(v20 >> 31);
      if (v14)
      {
        if (v19 >= 1 && v20 >= 1) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("constant_pad_kernel: values in pads cannot be both positive when 'pad_to_given_size_mode' flag is set.");
        }
        if (v21 <= v22) {
          int v21 = v20 & ~(v20 >> 31);
        }
        if (v21 <= *v15) {
          int v21 = *v15;
        }
      }
      else
      {
        v21 += v22 + *v15;
      }
      v18 += 2;
      *v16++ = v21;
      ++v15;
      --v17;
    }
    while (v17);
  }
  v32[0] = 0;
  v32[1] = 0;
  int v33 = 0;
  std::vector<int>::pointer v24 = v35.__begin_;
  int64_t v25 = (char *)v35.__end_ - (char *)v35.__begin_;
  if (v35.__end_ != v35.__begin_)
  {
    uint64_t v26 = v25 >> 2;
    if ((unint64_t)(v25 >> 2) <= 1) {
      uint64_t v26 = 1;
    }
    long long v27 = v32;
    do
    {
      int v28 = *v24++;
      *v27++ = v28;
      --v26;
    }
    while (v26);
  }
  int v34 = (unint64_t)v25 >> 2;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v32, 0, (uint64_t)v42);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v40 = a3;
  char v41 = 0;
  uint64_t v29 = (char *)operator new(0x40uLL);
  *(void *)a3 = v29;
  *(void *)(a3 + 8) = v29;
  *(void *)(a3 + 16) = v29 + 64;
  *(void *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, v42, &v47, (uint64_t)v29);
  if (__p)
  {
    long long v45 = __p;
    operator delete(__p);
  }
  if (v35.__begin_)
  {
    v35.__end_ = v35.__begin_;
    operator delete(v35.__begin_);
  }
  int v30 = v36.__begin_;
  if (v36.__begin_)
  {
    v36.__end_ = v36.__begin_;
LABEL_35:
    operator delete(v30);
  }
}

void sub_192A20C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v31 = v30;
  *(void *)(v29 + 8) = v31;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_squeeze_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "squeeze");
  Espresso::build_grads_for_reshape_kernels(a2, a3, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_192A20DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = *(_DWORD *)(a4 - 4);
  int v7 = *(_DWORD *)(a2 - 4);
  int v8 = *(_DWORD *)(a6 - 4);
  if (v6 >= v7)
  {
    if (v8 < v6)
    {
      *(_DWORD *)(a4 - 4) = v8;
      *(_DWORD *)(a6 - 4) = v6;
      int v9 = *(_DWORD *)(a4 - 4);
      int v10 = *(_DWORD *)(a2 - 4);
      if (v9 < v10)
      {
        *(_DWORD *)(a2 - 4) = v9;
        *(_DWORD *)(a4 - 4) = v10;
      }
    }
  }
  else
  {
    if (v8 >= v6)
    {
      *(_DWORD *)(a2 - 4) = v6;
      *(_DWORD *)(a4 - 4) = v7;
      int v11 = *(_DWORD *)(a6 - 4);
      if (v11 >= v7) {
        return;
      }
      *(_DWORD *)(a4 - 4) = v11;
    }
    else
    {
      *(_DWORD *)(a2 - 4) = v8;
    }
    *(_DWORD *)(a6 - 4) = v7;
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(a1, a2, a3, a4, a5, a6);
  int v12 = *(_DWORD *)(a8 - 4);
  int v13 = *(_DWORD *)(a6 - 4);
  if (v12 < v13)
  {
    *(_DWORD *)(a6 - 4) = v12;
    *(_DWORD *)(a8 - 4) = v13;
    int v14 = *(_DWORD *)(a6 - 4);
    int v15 = *(_DWORD *)(a4 - 4);
    if (v14 < v15)
    {
      *(_DWORD *)(a4 - 4) = v14;
      *(_DWORD *)(a6 - 4) = v15;
      int v16 = *(_DWORD *)(a4 - 4);
      int v17 = *(_DWORD *)(a2 - 4);
      if (v16 < v17)
      {
        *(_DWORD *)(a2 - 4) = v16;
        *(_DWORD *)(a4 - 4) = v17;
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(a1, a2, a3, a4, a5, a6, a7, a8);
  int v14 = *(_DWORD *)(a10 - 4);
  int v15 = *(_DWORD *)(a8 - 4);
  if (v14 < v15)
  {
    *(_DWORD *)(a8 - 4) = v14;
    *(_DWORD *)(a10 - 4) = v15;
    int v16 = *(_DWORD *)(a8 - 4);
    int v17 = *(_DWORD *)(a6 - 4);
    if (v16 < v17)
    {
      *(_DWORD *)(a6 - 4) = v16;
      *(_DWORD *)(a8 - 4) = v17;
      int v18 = *(_DWORD *)(a6 - 4);
      int v19 = *(_DWORD *)(a4 - 4);
      if (v18 < v19)
      {
        *(_DWORD *)(a4 - 4) = v18;
        *(_DWORD *)(a6 - 4) = v19;
        int v20 = *(_DWORD *)(a4 - 4);
        int v21 = *(_DWORD *)(a2 - 4);
        if (v20 < v21)
        {
          *(_DWORD *)(a2 - 4) = v20;
          *(_DWORD *)(a4 - 4) = v21;
        }
      }
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  char v6 = 1;
  switch((a2 - (uint64_t)a4) >> 2)
  {
    case 0:
    case 1:
      return v6 & 1;
    case 2:
      int v7 = *(_DWORD *)(a2 - 4);
      if (*a4 < v7)
      {
        *(_DWORD *)(a2 - 4) = *a4;
        *a4 = v7;
      }
      goto LABEL_18;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(a1, a2, a2 - 4, a2 - 4, a3, (uint64_t)(a4 + 1));
      goto LABEL_18;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8, a3, (uint64_t)(a4 + 1));
      goto LABEL_18;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8, a2 - 12, a2 - 12, a3, (uint64_t)(a4 + 1));
LABEL_18:
      char v6 = 1;
      return v6 & 1;
    default:
      uint64_t v8 = a2 - 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(a1, a2, a2 - 4, a2 - 4, a2 - 8, a2 - 8);
      int v10 = (_DWORD *)(a2 - 12);
      if ((_DWORD *)(a2 - 12) == a4) {
        goto LABEL_14;
      }
      int v11 = 0;
      uint64_t v9 = a2 - 12;
      break;
  }
  while (1)
  {
    int v13 = *(_DWORD *)(v9 - 4);
    v9 -= 4;
    int v12 = v13;
    if (v13 < *(_DWORD *)(v8 - 4))
    {
      int v14 = v10;
      while (1)
      {
        *(v14 - 1) = *v14;
        if (v14 + 1 == (_DWORD *)a2) {
          break;
        }
        int v15 = v14 + 1;
        int v16 = v14[1];
        ++v14;
        if (v12 >= v16) {
          goto LABEL_12;
        }
      }
      int v15 = (_DWORD *)a2;
LABEL_12:
      *(v15 - 1) = v12;
      if (++v11 == 8) {
        break;
      }
    }
    uint64_t v8 = (uint64_t)v10;
    int v10 = (_DWORD *)v9;
    if ((_DWORD *)v9 == a4)
    {
LABEL_14:
      char v17 = 1;
      goto LABEL_20;
    }
  }
  char v17 = 0;
  LOBYTE(v9) = v9 == (void)a4;
LABEL_20:
  char v6 = v17 | v9;
  return v6 & 1;
}

void Espresso::generic_expand_dims_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "expand_dims");
  Espresso::build_grads_for_reshape_kernels(a2, a3, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_192A21190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_array_gather_kernel::build_grads_for_inputs(uint64_t a1, Espresso::net **a2, uint64_t *a3)
{
  *(void *)&long long v71 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 304)) {
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("array_gather::build_grads_for_inputs with simple_gather == false is not implemented");
  }
  if (*(_DWORD *)(a1 + 300)) {
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("array_gather::build_grads_for_inputs with axis != 0 is not implemented");
  }
  long long v5 = *(long long **)a3[1];
  std::string::size_type v6 = *(void *)a3[2];
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)a3[5], v6))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v61, v6, (uint64_t)a3);
    int v7 = (char *)*a3;
    if (*(char *)(*a3 + 23) >= 0) {
      size_t v8 = *(unsigned __int8 *)(*a3 + 23);
    }
    else {
      size_t v8 = *(void *)(*a3 + 8);
    }
    uint64_t v9 = v59;
    std::string::basic_string[abi:ne180100]((uint64_t)v59, v8 + 5);
    if (v60 < 0) {
      uint64_t v9 = (void **)v59[0];
    }
    if (v8)
    {
      if (v7[23] >= 0) {
        int v10 = v7;
      }
      else {
        int v10 = *(char **)v7;
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, ":init");
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v61.__r_.__value_.__l.__size_;
    }
    int v12 = &v58;
    std::string::basic_string[abi:ne180100]((uint64_t)&v58, size + 5);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v12 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v13 = &v61;
      }
      else {
        int v13 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      memmove(v12, v13, size);
    }
    strcpy((char *)v12 + size, ":init");
    int v14 = Espresso::sequential_builder::blob_shape((Espresso::sequential_builder *)a2, v6);
    long long v15 = *(_OWORD *)v14;
    uint64_t v16 = *((void *)v14 + 4);
    long long v53 = *((_OWORD *)v14 + 1);
    long long v52 = v15;
    uint64_t v54 = v16;
    std::string v55 = 0;
    char v56 = 0;
    uint64_t v57 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v55, *((const void **)v14 + 5), *((void *)v14 + 6), (uint64_t)(*((void *)v14 + 6) - *((void *)v14 + 5)) >> 2);
    long long v48 = 0uLL;
    unint64_t v49 = 0xFFFFFFFF00000001;
    char v51 = 1;
    int v50 = 0;
    int v47 = 0;
    long long v45 = 0;
    uint64_t v46 = 0;
    long long v44 = 0;
    char v17 = (char *)v6;
    if (*(char *)(v6 + 23) < 0) {
      char v17 = *(char **)v6;
    }
    if (Espresso::net::is_blob_dynamic(a2[10], v17))
    {
      char v51 = 0;
      long long v45 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v44, v6);
    }
    else
    {
      long long v48 = v52;
      int v18 = DWORD1(v53);
      if (v53 == 1) {
        int v19 = 4;
      }
      else {
        int v19 = 5;
      }
      if (DWORD1(v53) == -1) {
        int v18 = v19;
      }
      unint64_t v49 = __PAIR64__(v18, v53);
    }
    std::string::basic_string[abi:ne180100]<0>(&v66, "fill");
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v39, (uint64_t)v44, (uint64_t)v45, 0xAAAAAAAAAAAAAAABLL * (((char *)v45 - v44) >> 3));
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v70, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
    }
    else {
      std::string v70 = v58;
    }
    std::vector<int> v36 = 0;
    uint64_t v37 = 0;
    char v38 = 0;
    char v32 = 0;
    std::vector<int> v36 = (std::string *)operator new(0x18uLL);
    uint64_t v37 = v36;
    char v38 = v36 + 1;
    uint64_t v37 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v38, (long long *)&v70, &v71, v36);
    Espresso::sequential_builder::add<Espresso::fill_params_t>(&v42, (uint64_t *)a2, (uint64_t)&v66, (uint64_t)v59, (uint64_t)&v47, v39, v40, (uint64_t *)&v36);
    long long __p = &v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    *(void *)&long long v20 = 0x100000001;
    *((void *)&v20 + 1) = 0x100000001;
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v20;
    LODWORD(v70.__r_.__value_.__r.__words[2]) = -2;
    v70.__r_.__value_.__s.__data_[22] = 0;
    WORD2(v70.__r_.__value_.__r.__words[2]) = 257;
    std::string::basic_string[abi:ne180100]<0>(&__p, "scatter");
    uint64_t v21 = *a3;
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v66, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
    }
    else {
      std::string v66 = v58;
    }
    if (*(char *)(v6 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(v6 + 24), *(void *)(v6 + 32));
    }
    else
    {
      long long v22 = *(_OWORD *)(v6 + 24);
      v67.__r_.__value_.__r.__words[2] = *(void *)(v6 + 40);
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v22;
    }
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v5, *((void *)v5 + 1));
    }
    else
    {
      long long v23 = *v5;
      v68.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v23;
    }
    int v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
    v64.__r_.__value_.__s.__data_[8] = 0;
    int v28 = (std::string *)operator new(0x48uLL);
    uint64_t v29 = v28;
    uint64_t v30 = v28 + 3;
    uint64_t v29 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v30, (long long *)&v66, (long long *)&v69, v28);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v64, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
    }
    else {
      std::string v64 = v61;
    }
    int64_t v25 = 0;
    uint64_t v26 = 0;
    long long v27 = 0;
    long long v62 = &v25;
    char v63 = 0;
    int64_t v25 = (std::string *)operator new(0x18uLL);
    uint64_t v26 = v25;
    long long v27 = v25 + 1;
    uint64_t v26 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v27, (long long *)&v64, (long long *)&v65, v25);
    Espresso::sequential_builder::add<Espresso::scatter_params_t>(&v34, (uint64_t *)a2, (uint64_t)&__p, v21, (uint64_t)&v70, (uint64_t)v28, (uint64_t)v29, (uint64_t *)&v25);
    if (v35) {
      nitro::nitro_function::nitro_function(v35);
    }
    long long v62 = &v25;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
    for (uint64_t i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v68.__r_.__value_.__r.__words[i + 2]) < 0) {
        operator delete(*(void **)((char *)&v68.__r_.__value_.__l.__data_ + i * 8));
      }
    }
    if (v33 < 0) {
      operator delete(__p);
    }
    if (v43) {
      nitro::nitro_function::nitro_function(v43);
    }
    v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
    if (v55)
    {
      char v56 = v55;
      operator delete(v55);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (v60 < 0) {
      operator delete(v59[0]);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
  }
}

void sub_192A217E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  *(void *)(v63 - 192) = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v63 - 192));
  if (__p)
  {
    a43 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_array_gather_kernel::backpropable(void *a1@<X8>)
{
  __int16 v2 = 1;
  std::vector<BOOL>::vector(__p, &v2, 2);
  std::vector<BOOL>::vector(a1, (uint64_t)__p);
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_192A21A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_array_gather_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t a3@<X8>)
{
  *((void *)&v79 + 1) = *MEMORY[0x1E4F143B8];
  memset(v73, 0, sizeof(v73));
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v73, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 6);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v72, (const Espresso::layer_shape *)*a2, 0);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v69, (const Espresso::layer_shape *)(*a2 + 4), 0);
  if (*(unsigned char *)(a1 + 304))
  {
    int v6 = *(_DWORD *)(a1 + 300);
    if (v6 < 0) {
      *(_DWORD *)(a1 + 300) = HIDWORD(v72.__end_cap_.__value_) + v6;
    }
    if (v71) {
      int v7 = *(&v69 + (int)v71 - 1);
    }
    else {
      int v7 = 1;
    }
    memset(v74, 0, 24);
    std::vector<int>::reserve((std::vector<int> *)v74, SHIDWORD(v72.__end_cap_.__value_) + (uint64_t)v7 - 1);
    if (*(_DWORD *)(a1 + 300))
    {
      unint64_t v12 = 0;
      int v13 = *(_DWORD **)&v74[8];
      do
      {
        if ((unint64_t)v13 >= *(void *)&v74[16])
        {
          long long v15 = *(_DWORD **)v74;
          uint64_t v16 = ((uint64_t)v13 - *(void *)v74) >> 2;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v18 = *(void *)&v74[16] - *(void *)v74;
          if ((uint64_t)(*(void *)&v74[16] - *(void *)v74) >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v19);
            int v13 = *(_DWORD **)&v74[8];
            long long v15 = *(_DWORD **)v74;
          }
          else
          {
            uint64_t v20 = 0;
          }
          uint64_t v21 = (_DWORD *)(v19 + 4 * v16);
          _DWORD *v21 = *((_DWORD *)&v72.__begin_ + v12);
          int v14 = v21 + 1;
          while (v13 != v15)
          {
            int v22 = *--v13;
            *--uint64_t v21 = v22;
          }
          *(void *)uint64_t v74 = v21;
          *(void *)&v74[8] = v14;
          *(void *)&v74[16] = v19 + 4 * v20;
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *int v13 = *((_DWORD *)&v72.__begin_ + v12);
          int v14 = v13 + 1;
        }
        *(void *)&v74[8] = v14;
        ++v12;
        int v13 = v14;
      }
      while (v12 < *(int *)(a1 + 300));
    }
    if (v71)
    {
      unint64_t v23 = 0;
      std::vector<int>::pointer v24 = *(_DWORD **)&v74[8];
      do
      {
        if ((unint64_t)v24 >= *(void *)&v74[16])
        {
          uint64_t v26 = *(_DWORD **)v74;
          uint64_t v27 = ((uint64_t)v24 - *(void *)v74) >> 2;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v29 = *(void *)&v74[16] - *(void *)v74;
          if ((uint64_t)(*(void *)&v74[16] - *(void *)v74) >> 1 > v28) {
            unint64_t v28 = v29 >> 1;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30)
          {
            unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v30);
            std::vector<int>::pointer v24 = *(_DWORD **)&v74[8];
            uint64_t v26 = *(_DWORD **)v74;
          }
          else
          {
            uint64_t v31 = 0;
          }
          char v32 = (_DWORD *)(v30 + 4 * v27);
          *char v32 = *(&v69 + v23);
          int64_t v25 = v32 + 1;
          while (v24 != v26)
          {
            int v33 = *--v24;
            *--char v32 = v33;
          }
          *(void *)uint64_t v74 = v32;
          *(void *)&v74[8] = v25;
          *(void *)&v74[16] = v30 + 4 * v31;
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          _DWORD *v24 = *(&v69 + v23);
          int64_t v25 = v24 + 1;
        }
        *(void *)&v74[8] = v25;
        ++v23;
        std::vector<int>::pointer v24 = v25;
      }
      while (v23 < (int)v71);
    }
    else
    {
      uint64_t v34 = *(_DWORD **)&v74[8];
      if (*(void *)&v74[8] >= *(void *)&v74[16])
      {
        uint64_t v37 = *(_DWORD **)v74;
        uint64_t v38 = (uint64_t)(*(void *)&v74[8] - *(void *)v74) >> 2;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = *(void *)&v74[16] - *(void *)v74;
        if ((uint64_t)(*(void *)&v74[16] - *(void *)v74) >> 1 > v39) {
          unint64_t v39 = v40 >> 1;
        }
        BOOL v41 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v41) {
          unint64_t v42 = v39;
        }
        if (v42)
        {
          unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v42);
          uint64_t v34 = *(_DWORD **)&v74[8];
          uint64_t v37 = *(_DWORD **)v74;
        }
        else
        {
          uint64_t v43 = 0;
        }
        long long v44 = (_DWORD *)(v42 + 4 * v38);
        unint64_t v45 = v42 + 4 * v43;
        _DWORD *v44 = 1;
        int64_t v25 = v44 + 1;
        while (v34 != v37)
        {
          int v46 = *--v34;
          *--long long v44 = v46;
        }
        *(void *)uint64_t v74 = v44;
        *(void *)&v74[8] = v25;
        *(void *)&v74[16] = v45;
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        **(_DWORD **)&v74[8] = 1;
        int64_t v25 = v34 + 1;
      }
      *(void *)&v74[8] = v25;
    }
    unint64_t v47 = *(int *)(a1 + 300) + 1;
    if (v47 >= HIDWORD(v72.__end_cap_.__value_))
    {
      long long v48 = v25;
    }
    else
    {
      do
      {
        if ((unint64_t)v25 >= *(void *)&v74[16])
        {
          unint64_t v49 = *(_DWORD **)v74;
          uint64_t v50 = ((uint64_t)v25 - *(void *)v74) >> 2;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 62) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v52 = *(void *)&v74[16] - *(void *)v74;
          if ((uint64_t)(*(void *)&v74[16] - *(void *)v74) >> 1 > v51) {
            unint64_t v51 = v52 >> 1;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v51;
          }
          if (v53)
          {
            unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v53);
            int64_t v25 = *(_DWORD **)&v74[8];
            unint64_t v49 = *(_DWORD **)v74;
          }
          else
          {
            uint64_t v54 = 0;
          }
          std::string v55 = (_DWORD *)(v53 + 4 * v50);
          *std::string v55 = *((_DWORD *)&v72.__begin_ + v47);
          long long v48 = v55 + 1;
          while (v25 != v49)
          {
            int v56 = *--v25;
            *--std::string v55 = v56;
          }
          *(void *)uint64_t v74 = v55;
          *(void *)&v74[8] = v48;
          *(void *)&v74[16] = v53 + 4 * v54;
          if (v49) {
            operator delete(v49);
          }
        }
        else
        {
          *int64_t v25 = *((_DWORD *)&v72.__begin_ + v47);
          long long v48 = v25 + 1;
        }
        *(void *)&v74[8] = v48;
        ++v47;
        int64_t v25 = v48;
      }
      while (v47 < SHIDWORD(v72.__end_cap_.__value_));
    }
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v57 = *(void **)v74;
    uint64_t v58 = (uint64_t)v48 - *(void *)v74;
    if (v48 == *(_DWORD **)v74)
    {
      HIDWORD(__dst.__end_cap_.__value_) = (unint64_t)v58 >> 2;
    }
    else
    {
      unint64_t v59 = (unint64_t)v58 >> 2;
      if ((unint64_t)(v58 >> 2) <= 1) {
        uint64_t v60 = 1;
      }
      else {
        uint64_t v60 = v58 >> 2;
      }
      memcpy(&__dst, *(const void **)v74, 4 * v60);
      HIDWORD(__dst.__end_cap_.__value_) = v59;
    }
    std::vector<int> v72 = __dst;
    *(void *)&v74[8] = v57;
    std::string v61 = v57;
    goto LABEL_129;
  }
  size_t v8 = *a2;
  uint64_t v9 = *((void *)*a2 + 4);
  long long v10 = (*a2)[1];
  *(_OWORD *)uint64_t v74 = **a2;
  *(_OWORD *)&v74[16] = v10;
  uint64_t v75 = v9;
  long long __p = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v8 + 5), *((void *)v8 + 6), (uint64_t)(*((void *)v8 + 6) - *((void *)v8 + 5)) >> 2);
  if (*(_DWORD *)(a1 + 280) != -1) {
    *(_DWORD *)uint64_t v74 = 1;
  }
  if (*(_DWORD *)(a1 + 284) != -1) {
    *(_DWORD *)&v74[4] = 1;
  }
  if (*(_DWORD *)(a1 + 288) != -1) {
    *(_DWORD *)&v74[8] = 1;
  }
  if (*(_DWORD *)(a1 + 292) != -1) {
    *(_DWORD *)&v74[12] = 1;
  }
  if (*(_DWORD *)(a1 + 296) != -1) {
    *(_DWORD *)&v74[16] = 1;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__dst, (const Espresso::layer_shape *)v74, 0);
  std::vector<int> v72 = __dst;
  if (HIDWORD(__dst.__end_cap_.__value_) != 5)
  {
    Espresso::layer_nd_shape::shape_vector(&__dst, (uint64_t)&v72);
    v35.__i_ = __dst.__begin_;
    int v36 = v71;
    if (v71 > 3)
    {
      if (v71 == 5)
      {
LABEL_83:
        int v36 = v70 * v69;
        goto LABEL_121;
      }
      if (v71 == 4)
      {
LABEL_81:
        int v36 = v69;
        goto LABEL_121;
      }
      int v36 = 0;
    }
    else if (v71 && v71 != 1)
    {
      if (v71 != 2) {
        goto LABEL_83;
      }
      goto LABEL_81;
    }
LABEL_121:
    LODWORD(__x.__begin_) = v36;
    std::vector<int>::insert(&__dst, v35, (std::vector<int>::value_type *)&__x);
    memset(&__x, 0, sizeof(__x));
    begiuint64_t n = __dst.__begin_;
    int64_t v63 = (char *)__dst.__end_ - (char *)__dst.__begin_;
    if (__dst.__end_ == __dst.__begin_)
    {
      HIDWORD(__x.__end_cap_.__value_) = (unint64_t)v63 >> 2;
      std::vector<int> v72 = __x;
      if (!__dst.__end_) {
        goto LABEL_127;
      }
    }
    else
    {
      uint64_t v64 = v63 >> 2;
      unint64_t v65 = (unint64_t)v63 >> 2;
      if ((unint64_t)(v63 >> 2) <= 1) {
        uint64_t v64 = 1;
      }
      memcpy(&__x, __dst.__begin_, 4 * v64);
      HIDWORD(__x.__end_cap_.__value_) = v65;
      std::vector<int> v72 = __x;
    }
    __dst.__end_ = begin;
    operator delete(begin);
    goto LABEL_127;
  }
  int v11 = v71;
  if (v71 > 3)
  {
    if (v71 == 5)
    {
LABEL_82:
      int v11 = v70 * v69;
      goto LABEL_119;
    }
    if (v71 != 4)
    {
      int v11 = 0;
      goto LABEL_119;
    }
  }
  else
  {
    if (!v71 || v71 == 1) {
      goto LABEL_119;
    }
    if (v71 != 2) {
      goto LABEL_82;
    }
  }
  int v11 = v69;
LABEL_119:
  LODWORD(v72.__begin_) = v11;
LABEL_127:
  std::string v61 = __p;
  if (!__p) {
    goto LABEL_130;
  }
  uint64_t v77 = __p;
LABEL_129:
  operator delete(v61);
LABEL_130:
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v72, 0, (uint64_t)v74);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  __dst.__begin_ = (std::vector<int>::pointer)a3;
  LOBYTE(__dst.__end_) = 0;
  std::string v66 = (char *)operator new(0x40uLL);
  *(void *)a3 = v66;
  *(void *)(a3 + 8) = v66;
  *(void *)(a3 + 16) = v66 + 64;
  *(void *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, (long long *)v74, &v79, (uint64_t)v66);
  if (__p)
  {
    uint64_t v77 = __p;
    operator delete(__p);
  }
  *(void *)uint64_t v74 = v73;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v74);
}

void sub_192A22174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }
  a25 = &a22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  _Unwind_Resume(a1);
}

void Espresso::generic_multinomial_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, void *a3@<X8>)
{
  *(void *)&long long v18 = *MEMORY[0x1E4F143B8];
  long long v5 = *a2;
  if (v5 == a2[1]) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_multinomial_kernel: one input blob required");
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v11, v5, 0);
  int v7 = *(_DWORD *)(a1 + 280);
  int v8 = v12;
  if (v12 > 3)
  {
    v12 -= 2;
    uint64_t v9 = (v8 - 1);
  }
  else
  {
    if (v12 <= 0) {
      ++v12;
    }
    uint64_t v9 = v8 - 1;
  }
  v11[v9] = v7;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v11, 0, (uint64_t)v15);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v13 = a3;
  char v14 = 0;
  long long v10 = (char *)operator new(0x40uLL);
  *a3 = v10;
  a3[1] = v10;
  a3[2] = v10 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v15, &v18, (uint64_t)v10);
  if (__p)
  {
    unint64_t v17 = __p;
    operator delete(__p);
  }
}

void sub_192A22354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v22 = v21;
  *(void *)(v20 + 8) = v22;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a12);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_gumbel_max_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, void *a3@<X8>)
{
  *(void *)&long long v34 = *MEMORY[0x1E4F143B8];
  long long v5 = *a2;
  if (v5 == a2[1]) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_gumbel_max_kernel: atleast one input blob required");
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v26, v5, 0);
  int v7 = *(unsigned __int8 *)(a1 + 289);
  if (*(unsigned char *)(a1 + 289)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = HIDWORD(v27) > 3;
  }
  if (v8)
  {
    if (SHIDWORD(v27) == 5)
    {
      uint64_t v9 = (DWORD1(v26) * v26);
      uint64_t v10 = (HIDWORD(v26) * v27 * DWORD2(v26));
    }
    else if (SHIDWORD(v27) == 4)
    {
      uint64_t v9 = v26;
      uint64_t v10 = (DWORD2(v26) * HIDWORD(v26) * DWORD1(v26));
    }
    else
    {
      uint64_t v9 = 0;
LABEL_23:
      uint64_t v10 = 0;
    }
  }
  else
  {
    switch(HIDWORD(v27))
    {
      case 1:
        uint64_t v9 = 1;
        if (!HIDWORD(v27)) {
          goto LABEL_23;
        }
        break;
      case 2:
        uint64_t v9 = v26;
        if (!HIDWORD(v27)) {
          goto LABEL_23;
        }
        break;
      case 3:
        uint64_t v9 = (DWORD1(v26) * v26);
        if (!HIDWORD(v27)) {
          goto LABEL_23;
        }
        break;
      case 4:
        uint64_t v9 = (DWORD1(v26) * v26 * DWORD2(v26));
        if (!HIDWORD(v27)) {
          goto LABEL_23;
        }
        break;
      case 5:
        uint64_t v9 = (DWORD1(v26) * v26 * DWORD2(v26) * HIDWORD(v26));
        if (!HIDWORD(v27)) {
          goto LABEL_23;
        }
        break;
      default:
        uint64_t v9 = 0;
        if (!HIDWORD(v27)) {
          goto LABEL_23;
        }
        break;
    }
    uint64_t v10 = *((unsigned int *)&v26 + SHIDWORD(v27) - 1);
  }
  int v12 = a2;
  int v11 = (int *)*a2;
  if ((unint64_t)(v12[1] - (const Espresso::layer_shape *)v11) <= 0x40)
  {
    int v19 = *(_DWORD *)(a1 + 280);
  }
  else
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v30, (const Espresso::layer_shape *)(v11 + 16), 0);
    if (v31 <= 2) {
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,int const&,int const&,int const&,int const&,int &,int &,int &>(v11[16], v11[17], v11[18], v11[19], v11[20], v9, *(_DWORD *)(a1 + 280), v10);
    }
    uint64_t v13 = (int)v30;
    unint64_t v14 = v31 - 2;
    if (v14 < 2)
    {
      unint64_t v14 = 1;
      uint64_t v18 = 2;
    }
    else
    {
      long long v15 = (int *)&v30 + 1;
      uint64_t v16 = v31 - 3;
      do
      {
        uint64_t v17 = *v15++;
        v13 *= v17;
        --v16;
      }
      while (v16);
      uint64_t v18 = (v31 - 1);
    }
    int v19 = *((_DWORD *)&v30 + v14);
    uint64_t v20 = *((int *)&v30 + v18);
    if (v13 != (int)v9) {
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>("generic_gumbel_max_kernel: random uniform input (%d, %d, %d) doesn't match logits (%d, %d) batch size", v13, v19, v20, v9, v10);
    }
    int v21 = *(_DWORD *)(a1 + 280);
    if (v19 != v21) {
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,unsigned long &,int &>(v13, v19, *((_DWORD *)&v30 + v18), v19, v21);
    }
    if (v20 != v10) {
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>("generic_gumbel_max_kernel: random uniform input (%d, %d, %d) doesn't match logits (%d, %d) class size", v13, v19, v20, v9, v10);
    }
    int v7 = *(unsigned __int8 *)(a1 + 289);
  }
  uint64_t v25 = v27;
  long long v24 = v26;
  if (v7 || SHIDWORD(v27) <= 3)
  {
    if (SHIDWORD(v27) <= 0) {
      HIDWORD(v25) = HIDWORD(v27) + 1;
    }
    uint64_t v22 = HIDWORD(v27) - 1;
  }
  else
  {
    HIDWORD(v25) = HIDWORD(v27) - 2;
    uint64_t v22 = (HIDWORD(v27) - 1);
  }
  *((_DWORD *)&v24 + v22) = v19;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v24, 0, (uint64_t)&v30);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v28 = a3;
  char v29 = 0;
  unint64_t v23 = (char *)operator new(0x40uLL);
  *a3 = v23;
  a3[1] = v23;
  a3[2] = v23 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v30, &v34, (uint64_t)v23);
  if (__p)
  {
    int v33 = __p;
    operator delete(__p);
  }
}

void sub_192A226F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  *(void *)(v24 + 8) = v25;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a16);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,int const&,int const&,int const&,int const&,int &,int &,int &>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,int &,int &>(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,unsigned long &,unsigned long &,unsigned long &,int &>(int a1, int a2, int a3, int a4, int a5)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>("generic_gumbel_max_kernel: random uniform input (%d, %d, %d) doesn't have required samples i.e. %d != %d", a1, a2, a3, a4, a5);
}

void Espresso::generic_general_slice_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)&long long v69 = *MEMORY[0x1E4F143B8];
  int v6 = *(long long **)a3[2];
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)v6, *((void *)v6 + 1));
  }
  else
  {
    long long v7 = *v6;
    v61.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v7;
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)a3[5], (uint64_t)&v61))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v60, (std::string::size_type)&v61, (uint64_t)a3);
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    unint64_t v57 = 0xFFFFFFFF00000001;
    int v58 = 0;
    int v54 = 0;
    char v59 = 0;
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v60.__r_.__value_.__l.__size_;
    }
    uint64_t v9 = &v53;
    std::string::basic_string[abi:ne180100]((uint64_t)&v53, size + 10);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v10 = &v60;
      }
      else {
        uint64_t v10 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      memmove(v9, v10, size);
    }
    strcpy((char *)v9 + size, ":container");
    std::string::basic_string[abi:ne180100]<0>(__p, "fill");
    int v11 = (char *)*a3;
    if (*(char *)(*a3 + 23) >= 0) {
      size_t v12 = *(unsigned __int8 *)(*a3 + 23);
    }
    else {
      size_t v12 = *(void *)(*a3 + 8);
    }
    uint64_t v13 = &v64;
    std::string::basic_string[abi:ne180100]((uint64_t)&v64, v12 + 10);
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v13 = (std::string *)v64.__r_.__value_.__r.__words[0];
    }
    if (v12)
    {
      if (v11[23] >= 0) {
        unint64_t v14 = v11;
      }
      else {
        unint64_t v14 = *(char **)v11;
      }
      memmove(v13, v14, v12);
    }
    strcpy((char *)v13 + v12, ":container");
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v68, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
    }
    else {
      std::string v68 = v61;
    }
    long long v48 = 0;
    unint64_t v49 = 0;
    uint64_t v50 = 0;
    v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
    v66.__r_.__value_.__s.__data_[8] = 0;
    long long v48 = (std::string *)operator new(0x18uLL);
    unint64_t v49 = v48;
    uint64_t v50 = v48 + 1;
    unint64_t v49 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v50, (long long *)&v68, &v69, v48);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v66, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
    }
    else {
      std::string v66 = v53;
    }
    unint64_t v45 = 0;
    int v46 = 0;
    unint64_t v47 = 0;
    long long v62 = &v45;
    char v63 = 0;
    unint64_t v45 = (std::string *)operator new(0x18uLL);
    int v46 = v45;
    unint64_t v47 = v45 + 1;
    int v46 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v47, (long long *)&v66, (long long *)&v67, v45);
    Espresso::sequential_builder::add<Espresso::fill_params_t>(&v51, a2, (uint64_t)__p, (uint64_t)&v64, (uint64_t)&v54, (uint64_t)v48, (uint64_t)v49, (uint64_t *)&v45);
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    long long v62 = &v45;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v38) < 0) {
      operator delete(__p[0]);
    }
    long long v15 = *(_OWORD *)(a1 + 360);
    long long v41 = *(_OWORD *)(a1 + 344);
    long long v42 = v15;
    int v16 = *(_DWORD *)(a1 + 376);
    long long v17 = *(_OWORD *)(a1 + 296);
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 280);
    long long v38 = v17;
    long long v18 = *(_OWORD *)(a1 + 328);
    long long v39 = *(_OWORD *)(a1 + 312);
    long long v40 = v18;
    int v43 = v16;
    int v44 = 1;
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v64, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
    }
    else {
      std::string v64 = v53;
    }
    int v19 = *(long long **)a3[1];
    if (*((char *)v19 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)v19, *((void *)v19 + 1));
    }
    else
    {
      long long v20 = *v19;
      v65.__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v20;
    }
    memset(&v68, 0, sizeof(v68));
    v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
    v66.__r_.__value_.__s.__data_[8] = 0;
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    v68.__r_.__value_.__l.__size_ = v68.__r_.__value_.__r.__words[0];
    v68.__r_.__value_.__r.__words[2] = v68.__r_.__value_.__r.__words[0] + 48;
    uint64_t v21 = 0;
    v68.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v68.__r_.__value_.__r.__words[2], (long long *)&v64, (long long *)&v66, (std::string *)v68.__r_.__value_.__l.__data_);
    do
    {
      if (SHIBYTE(v65.__r_.__value_.__r.__words[v21 + 2]) < 0) {
        operator delete(*(void **)((char *)&v64 + v21 * 8 + 24));
      }
      v21 -= 3;
    }
    while (v21 != -6);
    uint64_t v22 = *(void *)a3[2];
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a3[2] + 8) - v22) >> 3) >= 2)
    {
      uint64_t v23 = 0;
      uint64_t v24 = (std::string *)v68.__r_.__value_.__l.__size_;
      unint64_t v25 = 1;
      do
      {
        long long v26 = (const std::string::value_type **)(v22 + v23 + 24);
        if ((unint64_t)v24 >= v68.__r_.__value_.__r.__words[2])
        {
          uint64_t v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v68.__r_.__value_.__l.__data_, (uint64_t)v26);
        }
        else
        {
          if (*(char *)(v22 + v23 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(v24, *v26, *(void *)(v22 + v23 + 32));
          }
          else
          {
            long long v27 = *(_OWORD *)v26;
            v24->__r_.__value_.__r.__words[2] = *(void *)(v22 + v23 + 40);
            *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v27;
          }
          ++v24;
        }
        v68.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
        ++v25;
        uint64_t v22 = *(void *)a3[2];
        v23 += 24;
      }
      while (v25 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a3[2] + 8) - v22) >> 3));
    }
    std::string::basic_string[abi:ne180100]<0>(&v64, "general_slice_update");
    uint64_t v28 = *a3;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v32 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, (uint64_t)v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v66, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
    }
    else {
      std::string v66 = v60;
    }
    char v29 = 0;
    long long v30 = 0;
    signed int v31 = 0;
    long long v62 = &v29;
    char v63 = 0;
    char v29 = (std::string *)operator new(0x18uLL);
    long long v30 = v29;
    signed int v31 = v29 + 1;
    long long v30 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v31, (long long *)&v66, (long long *)&v67, v29);
    Espresso::sequential_builder::add<Espresso::general_slice_update_params_t>(&v35, a2, (uint64_t)&v64, v28, (uint64_t)__p, v32, v33, (uint64_t *)&v29);
    if (v36) {
      nitro::nitro_function::nitro_function(v36);
    }
    long long v62 = &v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
}

void sub_192A22E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  *(void *)(v57 - 144) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 144));
  if (*(char *)(v57 - 169) < 0) {
    operator delete(*(void **)(v57 - 192));
  }
  *(void *)(v57 - 192) = v57 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 192));
  if (a46 < 0) {
    operator delete(__p);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (*(char *)(v57 - 217) < 0) {
    operator delete(*(void **)(v57 - 240));
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::general_slice_update_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  long long v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  unint64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  unint64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192A231D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::generic_general_slice_kernel::backpropable(void *a1@<X1>, void *a2@<X8>)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unsigned __int8 v4 = 0;
  std::vector<BOOL>::vector(__p, v3, &v4);
  *(void *)__p[0] |= 1uLL;
  std::vector<BOOL>::vector(a2, (uint64_t)__p);
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_192A232D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_split_nd_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)&long long v29 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v24, "split_nd");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 16) + 8) - **(void **)(a3 + 16)) >> 3), 1uLL, (uint64_t)v24, 1);
  int v6 = **(long long ***)(a3 + 16);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v6, *((void *)v6 + 1));
  }
  else
  {
    long long v7 = *v6;
    v23.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v7;
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), (uint64_t)&v23))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v22, (std::string::size_type)&v23, a3);
    __int16 v21 = 1;
    int v20 = *(_DWORD *)(a1 + 280);
    std::string::basic_string[abi:ne180100]<0>(__p, "general_concat");
    uint64_t v9 = *(void *)a3;
    BOOL v8 = *(uint64_t **)(a3 + 8);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *v8, v8[1], 0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3));
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v28, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    }
    else {
      std::string v28 = v22;
    }
    uint64_t v10 = 0;
    int v11 = 0;
    size_t v12 = 0;
    long long v26 = &v10;
    char v27 = 0;
    uint64_t v10 = (std::string *)operator new(0x18uLL);
    int v11 = v10;
    size_t v12 = v10 + 1;
    int v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v12, (long long *)&v28, &v29, v10);
    Espresso::sequential_builder::add<Espresso::general_concat_params_t>(&v18, a2, (uint64_t)__p, v9, (uint64_t)&v20, v13, v14, (uint64_t *)&v10);
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    long long v26 = &v10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
}

void sub_192A23550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  *(void *)(v36 - 80) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 80));
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (*(char *)(v36 - 97) < 0) {
    operator delete(*(void **)(v36 - 120));
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_split_nd_kernel::top_shapes_for_bottom_shapes(_DWORD *a1@<X0>, const Espresso::layer_shape **a2@<X1>, void *a3@<X8>)
{
  unsigned __int8 v4 = *a2;
  if (a2[1] == v4) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_split_nd_kernel: atleast one bottom blob required");
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v70, v4, 0);
  Espresso::layer_nd_shape::shape_vector(&v69, (uint64_t)v70);
  memset(&v68, 0, sizeof(v68));
  if ((int)a1[72] < 1 || (int)a1[73] < 1)
  {
    int v8 = (v71 & ((int)a1[70] >> 31)) + a1[70];
    if (v8 < 0 || v8 >= v71) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_split_nd_kernel: Invalid value of the argument 'axis'.");
    }
    uint64_t i = a1[71];
    int v9 = v69.__begin_[v8];
    std::vector<int>::resize(&v68, (int)i);
    if ((int)i >= 1)
    {
      uint64_t v10 = 0;
      int v11 = v9 / (int)i;
      begiuint64_t n = v68.__begin_;
      uint64_t v13 = v9 % (int)i;
      int64x2_t v14 = (int64x2_t)xmmword_192DBFE30;
      uint64x2_t v15 = (uint64x2_t)vdupq_n_s64(i - 1);
      int64x2_t v16 = vdupq_n_s64(2uLL);
      do
      {
        int32x2_t v17 = vmovn_s64((int64x2_t)vcgeq_u64(v15, (uint64x2_t)v14));
        if (v17.i8[0])
        {
          if (v10 >= v13) {
            int v18 = v9 / (int)i;
          }
          else {
            int v18 = v11 + 1;
          }
          begin[v10] = v18;
        }
        if (v17.i8[4])
        {
          if (v10 + 1 >= v13) {
            int v19 = v9 / (int)i;
          }
          else {
            int v19 = v11 + 1;
          }
          begin[v10 + 1] = v19;
        }
        v10 += 2;
        int64x2_t v14 = vaddq_s64(v14, v16);
      }
      while (((i + 1) & 0x1FFFFFFFELL) != v10);
    }
  }
  else
  {
    for (uint64_t i = 0; i != 128; ++i)
    {
      if ((int)a1[i + 72] < 1) {
        break;
      }
    }
    uint64_t v20 = i;
    std::vector<int>::resize(&v68, i);
    if (i)
    {
      std::vector<int>::pointer v21 = v68.__begin_;
      std::string v22 = a1 + 72;
      do
      {
        int v23 = *v22++;
        *v21++ = v23;
        --v20;
      }
      while (v20);
    }
  }
  std::vector<int>::vector((std::vector<int> *)v61, v71);
  unint64_t v24 = (int)i;
  std::string v65 = 0;
  std::string v66 = 0;
  uint64_t v67 = 0;
  int v58 = &v65;
  LOBYTE(v59) = 0;
  if (i)
  {
    if ((i & 0x80000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    char v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((int)i);
    std::string v65 = v25;
    std::string v66 = v25;
    uint64_t v67 = &v25[24 * v26];
    char v27 = &v25[24 * v24];
    uint64_t v28 = 24 * v24;
    do
    {
      *(void *)char v25 = 0;
      *((void *)v25 + 1) = 0;
      *((void *)v25 + 2) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v25, *(const void **)&v61[0], *((uint64_t *)&v61[0] + 1), (uint64_t)(*((void *)&v61[0] + 1) - *(void *)&v61[0]) >> 2);
      v25 += 24;
      v28 -= 24;
    }
    while (v28);
    std::string v66 = v27;
  }
  if (*(void *)&v61[0])
  {
    *((void *)&v61[0] + 1) = *(void *)&v61[0];
    operator delete(*(void **)&v61[0]);
  }
  std::vector<Espresso::layer_shape>::vector(a3, v24);
  std::vector<int>::pointer v29 = v68.__begin_;
  unint64_t v30 = (unint64_t)((char *)v68.__end_ - (char *)v68.__begin_) >> 2;
  signed int v31 = v65;
  if (v30 != -1431655765 * ((unint64_t)(v66 - v65) >> 3)) {
    goto LABEL_65;
  }
  int v32 = a1[70];
  std::vector<int>::pointer v33 = v69.__begin_;
  unint64_t v34 = (unint64_t)((char *)v69.__end_ - (char *)v69.__begin_) >> 2;
  if ((int)v30 < 1)
  {
    int v45 = v34 & (v32 >> 31);
    long long v38 = "Invalid value of the argument 'axis'.";
    uint64_t v40 = (v45 + v32);
    if (v45 + v32 >= 0 && (int)v40 < (int)v34)
    {
      int v43 = 0;
      goto LABEL_49;
    }
LABEL_66:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v38);
  }
  uint64_t v35 = 0;
  uint64_t v36 = ((unint64_t)((char *)v68.__end_ - (char *)v68.__begin_) >> 2);
  uint64_t v37 = 8 * (2 * v36 + v30);
  long long v38 = "Mismatch between ranks of input and output tensors.";
  do
  {
    if ((int)(v69.__end_ - v69.__begin_) != (uint64_t)(*(void *)&v65[v35 + 8] - *(void *)&v65[v35]) >> 2) {
      goto LABEL_66;
    }
    v35 += 24;
  }
  while (v37 != v35);
  int v39 = v34 & (v32 >> 31);
  long long v38 = "Invalid value of the argument 'axis'.";
  uint64_t v40 = (v39 + v32);
  if (v39 + v32 < 0 || (int)v40 >= (int)v34) {
    goto LABEL_66;
  }
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  int v43 = 0;
  uint64_t v44 = 4 * v36;
  do
  {
    if (&v31[v41] != (char *)&v69)
    {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v31[v41], (char *)v69.__begin_, (uint64_t)v69.__end_, v69.__end_ - v69.__begin_);
      std::vector<int>::pointer v29 = v68.__begin_;
      signed int v31 = v65;
    }
    *(_DWORD *)(*(void *)&v31[v41] + 4 * v40) = v29[v42 / 4];
    v43 += v29[v42 / 4];
    v42 += 4;
    v41 += 24;
  }
  while (v44 != v42);
  std::vector<int>::pointer v33 = v69.__begin_;
LABEL_49:
  if (v43 != v33[v40])
  {
LABEL_65:
    long long v38 = "Split layer: Invalid number or size of splits.";
    goto LABEL_66;
  }
  if ((int)v24 >= 1)
  {
    uint64_t v46 = 0;
    do
    {
      unint64_t v47 = &v65[24 * v46];
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      int v58 = 0;
      long long v48 = *(int **)v47;
      uint64_t v49 = *((void *)v47 + 1) - *(void *)v47;
      if (v49)
      {
        uint64_t v50 = v49 >> 2;
        if ((unint64_t)(v49 >> 2) <= 1) {
          uint64_t v50 = 1;
        }
        uint64_t v51 = &v58;
        do
        {
          int v52 = *v48++;
          *v51++ = v52;
          --v50;
        }
        while (v50);
      }
      HIDWORD(v60) = (unint64_t)v49 >> 2;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v58, 0, (uint64_t)v61);
      uint64_t v53 = *a3 + (v46 << 6);
      long long v54 = v61[0];
      long long v55 = v61[1];
      *(void *)(v53 + 32) = v62;
      *(_OWORD *)uint64_t v53 = v54;
      *(_OWORD *)(v53 + 16) = v55;
      uint64_t v57 = (void *)(v53 + 40);
      uint64_t v56 = *(void **)(v53 + 40);
      if (v56)
      {
        *(void *)(v53 + 48) = v56;
        operator delete(v56);
        *uint64_t v57 = 0;
        *(void *)(v53 + 48) = 0;
        *(void *)(v53 + 56) = 0;
      }
      *(_OWORD *)uint64_t v57 = v63;
      *(void *)(v53 + 56) = v64;
      ++v46;
    }
    while (v46 != v24);
  }
  *(void *)&v61[0] = &v65;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v61);
  if (v68.__begin_)
  {
    v68.__end_ = v68.__begin_;
    operator delete(v68.__begin_);
  }
  if (v69.__begin_)
  {
    v69.__end_ = v69.__begin_;
    operator delete(v69.__begin_);
  }
}

void sub_192A23A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  a13 = &a21;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  char v27 = *(void **)(v25 - 128);
  if (v27)
  {
    *(void *)(v25 - 120) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_softmax_nd_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
}

void Espresso::generic_sliding_windows_kernel::top_shapes_for_bottom_shapes(int *a1@<X0>, const Espresso::layer_shape **a2@<X1>, void *a3@<X8>)
{
  *(void *)&long long v41 = *MEMORY[0x1E4F143B8];
  long long v5 = *a2;
  if (a2[1] == v5) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_sliding_windows_kernel: atleast one bottom blob required");
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v35, v5, 0);
  Espresso::layer_nd_shape::shape_vector(&__p, (uint64_t)v35);
  int v8 = *((_DWORD *)*a2 + 5);
  if (v8 == -1)
  {
    if (*((_DWORD *)*a2 + 4) == 1) {
      int v8 = 4;
    }
    else {
      int v8 = 5;
    }
  }
  std::vector<int>::vector(&v33, v8 + 1);
  begiuint64_t n = __p.__begin_;
  unint64_t v10 = (unint64_t)((char *)__p.__end_ - (char *)__p.__begin_) >> 2;
  std::vector<int>::pointer v11 = v33.__begin_;
  std::vector<int>::pointer end = v33.__end_;
  unint64_t v13 = (char *)v33.__end_ - (char *)v33.__begin_;
  unint64_t v14 = v33.__end_ - v33.__begin_;
  if (v14 - 1 != (int)v10)
  {
    int32x2_t v17 = "Sliding Windows Layer: Mismatch between ranks of input and output tensors.";
    goto LABEL_38;
  }
  int v15 = a1[71];
  if (v15 < 1)
  {
    int32x2_t v17 = "Sliding Windows Layer: Window size can't be less than 1";
    goto LABEL_38;
  }
  int v16 = a1[72];
  if (v16 < 1)
  {
    int32x2_t v17 = "Sliding Windows Layer: Step can't be less than 1";
    goto LABEL_38;
  }
  int32x2_t v17 = "Sliding Windows Layer: Invalid value of the argument 'axis'.";
  unint64_t v18 = (v10 & (a1[70] >> 31)) + a1[70];
  if ((v18 & 0x80000000) != 0 || (int)v18 >= (int)v10) {
LABEL_38:
  }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v17);
  int v19 = __p.__begin_[v18];
  BOOL v20 = __OFSUB__(v19, v15);
  int v21 = v19 - v15;
  if (v21 < 0 != v20)
  {
    int32x2_t v17 = "Sliding Windows Layer: Window Size can't be larger than the dimension length.";
    goto LABEL_38;
  }
  int v22 = v21 / v16;
  if (v22 < 0)
  {
    int32x2_t v17 = "Sliding Windows Layer: Invalid values in arguments (axis, window_size, step)";
    goto LABEL_38;
  }
  v33.__begin_[v18] = v22 + 1;
  unint64_t v23 = (v18 + 1);
  v11[v23] = v15;
  if (end == v11)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    int v31 = 0;
    goto LABEL_25;
  }
  unint64_t v24 = 0;
  if (v14 <= 1) {
    unint64_t v14 = 1;
  }
  do
  {
    unint64_t v25 = v24;
    if (v24 >= v18)
    {
      if (v24 <= v23) {
        goto LABEL_20;
      }
      unint64_t v25 = v24 - 1;
    }
    v11[v24] = begin[v25];
LABEL_20:
    ++v24;
  }
  while (v14 != v24);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v26 = &v29;
  int v31 = 0;
  do
  {
    int v27 = *v11++;
    *(_DWORD *)uint64_t v26 = v27;
    uint64_t v26 = (uint64_t *)((char *)v26 + 4);
    --v14;
  }
  while (v14);
LABEL_25:
  int v32 = v13 >> 2;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v29, 0, (uint64_t)v38);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v36 = a3;
  char v37 = 0;
  uint64_t v28 = (char *)operator new(0x40uLL);
  *a3 = v28;
  a3[1] = v28;
  a3[2] = v28 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v38, &v41, (uint64_t)v28);
  if (v39)
  {
    uint64_t v40 = v39;
    operator delete(v39);
  }
  if (v33.__begin_)
  {
    v33.__end_ = v33.__begin_;
    operator delete(v33.__begin_);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_192A23DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  *(void *)(v22 + 8) = v23;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a22);
  uint64_t v26 = *(void **)(v24 - 64);
  if (v26)
  {
    *(void *)(v24 - 56) = v26;
    operator delete(v26);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_reverse_seq_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *((void *)&v34 + 1) = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v26, "reverse_seq");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 16) + 8) - **(void **)(a3 + 16)) >> 3), 2uLL, (uint64_t)v26, 1);
  int v6 = **(long long ***)(a3 + 16);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v6, *((void *)v6 + 1));
  }
  else
  {
    long long v7 = *v6;
    v25.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v7;
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), (uint64_t)&v25))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v24, (std::string::size_type)&v25, a3);
    std::string::basic_string[abi:ne180100]<0>(__p, "reverse_seq");
    uint64_t v8 = *(void *)a3;
    int v9 = **(long long ***)(a3 + 8);
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v32.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v10;
    }
    uint64_t v11 = **(void **)(a3 + 16);
    if (*(char *)(v11 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v11 + 24), *(void *)(v11 + 32));
    }
    else
    {
      long long v12 = *(_OWORD *)(v11 + 24);
      v33.__r_.__value_.__r.__words[2] = *(void *)(v11 + 40);
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v12;
    }
    int32x2_t v17 = 0;
    unint64_t v18 = 0;
    int v19 = 0;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
    v30.__r_.__value_.__s.__data_[8] = 0;
    int32x2_t v17 = (std::string *)operator new(0x30uLL);
    unint64_t v18 = v17;
    int v19 = v17 + 2;
    unint64_t v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v19, (long long *)&v32, &v34, v17);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v30, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
    }
    else {
      std::string v30 = v24;
    }
    unint64_t v14 = 0;
    int v15 = 0;
    int v16 = 0;
    uint64_t v28 = &v14;
    char v29 = 0;
    unint64_t v14 = (std::string *)operator new(0x18uLL);
    int v15 = v14;
    int v16 = v14 + 1;
    int v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v16, (long long *)&v30, (long long *)&v31, v14);
    Espresso::sequential_builder::add<Espresso::reverse_seq_params_t>(&v22, a2, (uint64_t)__p, v8, a1 + 280, (uint64_t)v17, (uint64_t)v18, (uint64_t *)&v14);
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    uint64_t v28 = &v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    for (uint64_t i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v33.__r_.__value_.__r.__words[i + 2]) < 0) {
        operator delete(*(void **)((char *)&v32 + i * 8 + 24));
      }
    }
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
}

void sub_192A24124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41)
{
  *(void *)(v41 - 144) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 144));
  uint64_t v43 = 0;
  uint64_t v44 = v41 - 112;
  while (1)
  {
    if (*(char *)(v44 + v43 + 47) < 0) {
      operator delete(*(void **)(v44 + v43 + 24));
    }
    v43 -= 24;
    if (v43 == -48)
    {
      if (a20 < 0) {
        operator delete(__p);
      }
      if (a28 < 0) {
        operator delete(a23);
      }
      if (a34 < 0) {
        operator delete(a29);
      }
      if (a40 < 0) {
        operator delete(a35);
      }
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::sequential_builder::add<Espresso::reverse_seq_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  int v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  std::string v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  std::string v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192A2441C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::generic_reverse_seq_kernel::top_shapes_for_bottom_shapes(uint64_t *a1@<X1>, void *a2@<X8>)
{
  *((void *)&v12 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  if ((unint64_t)(a1[1] - *a1) <= 0x7F) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_reverse_seq_kernel: atleast two bottom blobs required");
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 32);
  v7[0] = *(_OWORD *)v3;
  v7[1] = v4;
  uint64_t v8 = v5;
  std::vector<int> __p = 0;
  long long v10 = 0;
  uint64_t v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v3 + 40), *(void *)(v3 + 48), (uint64_t)(*(void *)(v3 + 48) - *(void *)(v3 + 40)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_192A24594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = v18;
  *(void *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_cross_entropy_kernel::top_shapes_for_bottom_shapes(void *a1@<X8>)
{
  *((void *)&v9 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  *(_OWORD *)std::vector<int> __p = 0u;
  long long v6 = 0u;
  *(void *)&long long v2 = 0x100000001;
  *((void *)&v2 + 1) = 0x100000001;
  long long v4 = v2;
  unint64_t v5 = 0xFFFFFFFF00000001;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v3 = (char *)operator new(0x40uLL);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 64;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a1 + 2), &v4, &v9, (uint64_t)v3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_192A246AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  *(void *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_non_maximum_suppression_kernel::backpropable(void *a1@<X1>, void *a2@<X8>)
{
}

uint64_t Espresso::generic_sgd_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(_DWORD *)(result + 288))
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      long long v9 = (long long *)(*a2 + v6);
      if (v7 >= a3[2])
      {
        double result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v9);
        unint64_t v7 = result;
      }
      else
      {
        double result = (uint64_t)std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v9);
        v7 += 64;
      }
      a3[1] = v7;
      ++v8;
      unint64_t v10 = *(int *)(v5 + 288);
      v6 += 64;
    }
    while (v8 < v10);
    if (*(unsigned char *)(v5 + 280) && v10)
    {
      unint64_t v11 = 0;
      uint64_t v12 = v10 << 7;
      do
      {
        uint64_t v13 = (long long *)(*a2 + v12);
        if (v7 >= a3[2])
        {
          double result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v13);
          unint64_t v7 = result;
        }
        else
        {
          double result = (uint64_t)std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v13);
          v7 += 64;
        }
        a3[1] = v7;
        ++v11;
        v12 += 64;
      }
      while (v11 < *(int *)(v5 + 288));
    }
  }
  return result;
}

void sub_192A2480C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_adam_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(_DWORD *)(result + 292))
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      long long v9 = (long long *)(*a2 + v6);
      if (v7 >= a3[2])
      {
        double result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v9);
        unint64_t v7 = result;
      }
      else
      {
        double result = (uint64_t)std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v9);
        v7 += 64;
      }
      a3[1] = v7;
      ++v8;
      unint64_t v10 = *(int *)(v5 + 292);
      v6 += 64;
    }
    while (v8 < v10);
    if (v10)
    {
      for (unint64_t i = 0; i < v10; ++i)
      {
        uint64_t v12 = (long long *)(*a2 + ((i + 2 * (int)v10) << 6));
        if (v7 >= a3[2])
        {
          double result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v12);
          unint64_t v7 = result;
        }
        else
        {
          double result = (uint64_t)std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v12);
          v7 += 64;
        }
        a3[1] = v7;
        unint64_t v10 = *(int *)(v5 + 292);
      }
      if (v10)
      {
        for (unint64_t j = 0; j < v10; ++j)
        {
          uint64_t v14 = (long long *)(*a2 + ((j + 3 * (int)v10) << 6));
          if (v7 >= a3[2])
          {
            double result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v14);
            unint64_t v7 = result;
          }
          else
          {
            double result = (uint64_t)std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v14);
            v7 += 64;
          }
          a3[1] = v7;
          unint64_t v10 = *(int *)(v5 + 292);
        }
      }
    }
  }
  return result;
}

void sub_192A2497C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Espresso::generic_scatter_nd_kernel::top_shapes_for_bottom_shapes(uint64_t *a1@<X1>, void *a2@<X8>)
{
  *((void *)&v12 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  if (a1[1] - *a1 != 192) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("scatter_nd_kernel: three inputs required");
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 32);
  v7[0] = *(_OWORD *)v3;
  v7[1] = v4;
  uint64_t v8 = v5;
  std::vector<int> __p = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v3 + 40), *(void *)(v3 + 48), (uint64_t)(*(void *)(v3 + 48) - *(void *)(v3 + 40)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    unint64_t v10 = __p;
    operator delete(__p);
  }
}

void sub_192A24A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = v18;
  *(void *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_gather_nd_kernel::backpropable(void *a1@<X8>)
{
  __int16 v2 = 1;
  std::vector<BOOL>::vector(__p, &v2, 2);
  std::vector<BOOL>::vector(a1, (uint64_t)__p);
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_192A24B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_nonzero_kernel::backpropable(void *a1@<X8>)
{
}

void Espresso::generic_nonzero_kernel::top_shapes_for_bottom_shapes(void *a1@<X8>)
{
  *((void *)&v11 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  *(void *)&long long v2 = 0x100000001;
  *((void *)&v2 + 1) = 0x100000001;
  long long v4 = v2;
  uint64_t v5 = 0x200000001;
  long long v9 = 0;
  uint64_t v10 = 0;
  std::vector<int> __p = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v3 = (char *)operator new(0x40uLL);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 64;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a1 + 2), &v4, &v11, (uint64_t)v3);
  if (__p)
  {
    long long v9 = __p;
    operator delete(__p);
  }
}

void sub_192A24C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  *(void *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_one_hot_kernel::backpropable(void *a1@<X1>, void *a2@<X8>)
{
}

void Espresso::generic_one_hot_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *(void *)&long long v66 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  int v7 = *(_DWORD *)(v6 + 20);
  if (v7 == -1)
  {
    if (*(_DWORD *)(v6 + 16) == 1) {
      int v7 = 4;
    }
    else {
      int v7 = 5;
    }
  }
  int v8 = *(_DWORD *)(a1 + 292);
  if (a2[1] - v6 != 64 && *(int *)(a1 + 280) < 1)
  {
    long long v39 = *(_OWORD *)(v6 + 16);
    uint64_t v40 = *(void *)(v6 + 32);
    v61[0] = *(_OWORD *)v6;
    v61[1] = v39;
    uint64_t v62 = v40;
    long long v63 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v63, *(const void **)(v6 + 40), *(void *)(v6 + 48), (uint64_t)(*(void *)(v6 + 48) - *(void *)(v6 + 40)) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    std::vector<int> __p = a3;
    LOBYTE(v57) = 0;
    uint64_t v41 = (char *)operator new(0x40uLL);
    *a3 = v41;
    a3[1] = v41;
    a3[2] = v41 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v61, &v66, (uint64_t)v41);
    unint64_t v42 = v63;
    if (!v63) {
      return;
    }
    uint64_t v64 = v63;
    goto LABEL_74;
  }
  std::vector<int> __p = 0;
  uint64_t v57 = 0;
  unint64_t v58 = 0;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v55, (const Espresso::layer_shape *)v6, 0);
  uint64_t v9 = ((v7 + 1) & (v8 >> 31)) + v8;
  if (v7 <= 0)
  {
    uint64_t v22 = v57;
  }
  else
  {
    uint64_t v10 = 0;
    long long v11 = v57;
    do
    {
      unint64_t v12 = v58;
      if (v10 == v9)
      {
        if ((unint64_t)v11 >= v58)
        {
          uint64_t v14 = __p;
          uint64_t v15 = ((char *)v11 - (unsigned char *)__p) >> 2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62) {
            goto LABEL_76;
          }
          uint64_t v17 = v58 - (void)__p;
          if ((uint64_t)(v58 - (void)__p) >> 1 > v16) {
            unint64_t v16 = v17 >> 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v18);
            uint64_t v14 = __p;
            long long v11 = v57;
          }
          else
          {
            uint64_t v19 = 0;
          }
          uint64_t v20 = (_DWORD *)(v18 + 4 * v15);
          *uint64_t v20 = *(_DWORD *)(a1 + 280);
          uint64_t v13 = v20 + 1;
          while (v11 != v14)
          {
            int v21 = *--v11;
            *--uint64_t v20 = v21;
          }
          unint64_t v12 = v18 + 4 * v19;
          std::vector<int> __p = v20;
          uint64_t v57 = v13;
          unint64_t v58 = v12;
          if (v14)
          {
            operator delete(v14);
            unint64_t v12 = v58;
          }
        }
        else
        {
          *long long v11 = *(_DWORD *)(a1 + 280);
          uint64_t v13 = v11 + 1;
        }
        uint64_t v57 = v13;
        long long v11 = v13;
      }
      if ((unint64_t)v11 >= v12)
      {
        uint64_t v23 = __p;
        uint64_t v24 = ((char *)v11 - (unsigned char *)__p) >> 2;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 62) {
LABEL_76:
        }
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        uint64_t v26 = v12 - (void)__p;
        if (v26 >> 1 > v25) {
          unint64_t v25 = v26 >> 1;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v27);
          uint64_t v23 = __p;
          long long v11 = v57;
        }
        else
        {
          uint64_t v28 = 0;
        }
        char v29 = (_DWORD *)(v27 + 4 * v24);
        _DWORD *v29 = v55[v10];
        uint64_t v22 = v29 + 1;
        while (v11 != v23)
        {
          int v30 = *--v11;
          *--char v29 = v30;
        }
        std::vector<int> __p = v29;
        uint64_t v57 = v22;
        unint64_t v58 = v27 + 4 * v28;
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *long long v11 = v55[v10];
        uint64_t v22 = v11 + 1;
      }
      uint64_t v57 = v22;
      ++v10;
      long long v11 = v22;
    }
    while (v10 != v7);
  }
  if (v9 == v7)
  {
    if ((unint64_t)v22 >= v58)
    {
      std::string v32 = __p;
      uint64_t v33 = ((char *)v22 - (unsigned char *)__p) >> 2;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v35 = v58 - (void)__p;
      if ((uint64_t)(v58 - (void)__p) >> 1 > v34) {
        unint64_t v34 = v35 >> 1;
      }
      BOOL v36 = (unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v36) {
        unint64_t v37 = v34;
      }
      if (v37)
      {
        unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v37);
        std::string v32 = __p;
        uint64_t v22 = v57;
      }
      else
      {
        uint64_t v38 = 0;
      }
      uint64_t v43 = (_DWORD *)(v37 + 4 * v33);
      unint64_t v44 = v37 + 4 * v38;
      _DWORD *v43 = *(_DWORD *)(a1 + 280);
      uint64_t v31 = v43 + 1;
      while (v22 != v32)
      {
        int v45 = *--v22;
        *--uint64_t v43 = v45;
      }
      std::vector<int> __p = v43;
      uint64_t v57 = v31;
      unint64_t v58 = v44;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *uint64_t v22 = *(_DWORD *)(a1 + 280);
      uint64_t v31 = v22 + 1;
    }
    uint64_t v57 = v31;
    uint64_t v22 = v31;
  }
  v52[0] = 0;
  v52[1] = 0;
  int v53 = 0;
  uint64_t v46 = (int *)__p;
  uint64_t v47 = (char *)v22 - (unsigned char *)__p;
  if (v22 != __p)
  {
    uint64_t v48 = v47 >> 2;
    if ((unint64_t)(v47 >> 2) <= 1) {
      uint64_t v48 = 1;
    }
    uint64_t v49 = v52;
    do
    {
      int v50 = *v46++;
      *v49++ = v50;
      --v48;
    }
    while (v48);
  }
  int v54 = (unint64_t)v47 >> 2;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v52, 0, (uint64_t)v61);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v59 = a3;
  char v60 = 0;
  uint64_t v51 = (char *)operator new(0x40uLL);
  *a3 = v51;
  a3[1] = v51;
  a3[2] = v51 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v61, &v66, (uint64_t)v51);
  if (v63)
  {
    uint64_t v64 = v63;
    operator delete(v63);
  }
  unint64_t v42 = __p;
  if (__p)
  {
    uint64_t v57 = __p;
LABEL_74:
    operator delete(v42);
  }
}

void sub_192A250F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v29 = v28;
  *(void *)(v27 + 8) = v29;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_cumsum_kernel::top_shapes_for_bottom_shapes(long long **a1@<X1>, void *a2@<X8>)
{
  *((void *)&v12 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v4 = *((void *)*a1 + 4);
  long long v5 = (*a1)[1];
  v7[0] = **a1;
  v7[1] = v5;
  uint64_t v8 = v4;
  std::vector<int> __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v3 + 5), *((void *)v3 + 6), (uint64_t)(*((void *)v3 + 6) - *((void *)v3 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
}

void sub_192A2525C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = v18;
  *(void *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_dev_op_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  long long v2 = *(int **)(result + 320);
  uint64_t v3 = *(int **)(result + 328);
  if (v2 != v3)
  {
    unint64_t v5 = 0;
    do
    {
      int v6 = *v2;
      int v7 = v2[5];
      int32x4_t v8 = *(int32x4_t *)(v2 + 1);
      uint64_t v15 = 0;
      long long v13 = 0u;
      long long v14 = 0u;
      int8x16_t v9 = (int8x16_t)vrev64q_s32(v8);
      int8x16_t v10 = vextq_s8(v9, v9, 8uLL);
      int v11 = v6;
      int v12 = v7;
      if (v5 >= a2[2])
      {
        double result = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a2, (long long *)v10.i8);
        unint64_t v5 = result;
      }
      else
      {
        double result = (uint64_t)std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a2, (long long *)v10.i8);
        v5 += 64;
      }
      a2[1] = v5;
      v2 += 6;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_192A25360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void Espresso::generic_sparse_inner_product_kernel::get_coo_weights(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_sparse_inner_product_kernel::build_grads_for_inputs(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  *(void *)&long long v48 = *MEMORY[0x1E4F143B8];
  int v6 = **(long long ***)(a3 + 8);
  std::string::size_type v7 = **(void **)(a3 + 16);
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), v7))return; {
  Espresso::blob_grad_contrib_name((uint64_t)&v30, v7, a3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sparse_inner_product");
  uint64_t v8 = *(void *)a3;
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)v6, *((void *)v6 + 1));
  }
  else
  {
    long long v9 = *v6;
    v47.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v9;
  }
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  uint64_t v40 = &v23;
  LOBYTE(v41) = 0;
  uint64_t v23 = (std::string *)operator new(0x18uLL);
  uint64_t v24 = v23;
  unint64_t v25 = v23 + 1;
  uint64_t v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v25, (long long *)&v47, &v48, v23);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v45, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    std::string v45 = v30;
  }
  uint64_t v20 = 0;
  int v21 = 0;
  uint64_t v22 = 0;
  uint64_t v40 = &v20;
  LOBYTE(v41) = 0;
  uint64_t v20 = (std::string *)operator new(0x18uLL);
  int v21 = v20;
  uint64_t v22 = v20 + 1;
  int v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v22, (long long *)&v45, (long long *)&v46, v20);
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  unint64_t v34 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v34, (uint64_t)v23, (uint64_t)v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v31, (uint64_t)v20, (uint64_t)v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
  uint64_t v10 = a2[12];
  LODWORD(v40) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, (uint64_t)(a2 + 14), (uint64_t)__p, (uint64_t)(a1 + 76), (int *)&v40);
  int v11 = v29;
  v43[0] = lpsrc;
  v43[1] = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v40, (uint64_t)v34, (uint64_t)v35, 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - v34) >> 3));
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v37, v31, v32, 0xAAAAAAAAAAAAAAABLL * ((v32 - v31) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v43, (uint64_t)__p, v8, (uint64_t)(a2 + 7), (std::string **)&v40, &v37);
  unint64_t v44 = (void ***)&v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  unint64_t v44 = (void ***)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (long long **)&v34, &v31);
  }
  uint64_t v40 = (std::string **)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  uint64_t v40 = (std::string **)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (!lpsrc)
  {
    int v12 = 0;
    goto LABEL_19;
  }
  if (!v12)
  {
LABEL_19:
    long long v13 = 0;
LABEL_20:
    if (v29) {
      nitro::nitro_function::nitro_function(v29);
    }
    goto LABEL_22;
  }
  long long v13 = v29;
  if (v29)
  {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_20;
  }
LABEL_22:
  uint64_t v40 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  uint64_t v40 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(std::string **__return_ptr, _DWORD *))(*(void *)a1 + 400))(&v37, a1);
  v12[77] = a1[76];
  v12[76] = a1[77];
  uint64_t v14 = a1[78];
  if (v14)
  {
    uint64_t v15 = 0;
    std::string::size_type v16 = v37->__r_.__value_.__r.__words[2];
    uint64_t v17 = 4 * v14;
    std::string::size_type v18 = v16 + 4 * v14;
    do
    {
      int v19 = *(_DWORD *)(v16 + v15);
      *(_DWORD *)(v16 + v15) = *(_DWORD *)(v18 + v15);
      *(_DWORD *)(v18 + v15) = v19;
      v15 += 4;
    }
    while (v17 != v15);
  }
  unint64_t v34 = 0;
  uint64_t v35 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v40, "coo");
  (*(void (**)(_DWORD *, char **, std::string ***, std::string::size_type, uint64_t, void))(*(void *)v12 + 168))(v12, &v34, &v40, v37->__r_.__value_.__r.__words[2], 4 * SLODWORD(v37->__r_.__value_.__r.__words[1]), 0);
  if (SHIBYTE(v42) < 0) {
    operator delete(v40);
  }
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

void sub_192A2588C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  *(void *)(v37 - 128) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 128));
  if (*(char *)(v37 - 73) < 0) {
    operator delete(*(void **)(v37 - 96));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_sparse_inner_product_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v20 + 1) = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *a2;
  long long v7 = **a2;
  long long v8 = (*a2)[1];
  uint64_t v9 = *((void *)*a2 + 4);
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v10, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  DWORD1(v7) = *(_DWORD *)(a1 + 304);
  v15[0] = v7;
  v15[1] = v8;
  uint64_t v16 = v9;
  std::vector<int> __p = 0;
  std::string::size_type v18 = 0;
  uint64_t v19 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v10, (uint64_t)v11, (v11 - (unsigned char *)v10) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v13 = a3;
  char v14 = 0;
  int v6 = (char *)operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v15, &v20, (uint64_t)v6);
  if (__p)
  {
    std::string::size_type v18 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    int v11 = v10;
    operator delete(v10);
  }
}

void sub_192A25B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  *(void *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_rnn_arch_kernel::weight_names_and_shapes(void *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

uint64_t Espresso::generic_rnn_arch_kernel::number_of_top_blobs(Espresso::generic_rnn_arch_kernel *this)
{
  if (*((_DWORD *)this + 76)) {
    return 2;
  }
  else {
    return 3;
  }
}

void Espresso::generic_rnn_arch_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v89 + 1) = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *a2;
  uint64_t v6 = *((void *)*a2 + 4);
  long long v7 = (*a2)[1];
  long long v45 = **a2;
  long long v46 = v7;
  uint64_t v47 = v6;
  long long v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v48, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  int v8 = *(_DWORD *)(a1 + 440);
  if (v8 == 1)
  {
    long long v37 = v45;
    long long v39 = v46;
    uint64_t v41 = v47;
    std::vector<int> __p = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v48, (uint64_t)v49, (v49 - (unsigned char *)v48) >> 2);
    int v14 = *(_DWORD *)(a1 + 380);
    if (*(unsigned char *)(a1 + 456))
    {
      int v15 = DWORD1(v45);
      LODWORD(v37) = *(_DWORD *)(a1 + 380);
      if (!*(_DWORD *)(a1 + 448)) {
        DWORD2(v37) = 1;
      }
      int v16 = *(_DWORD *)(a1 + 452);
      if (v16 == 1)
      {
        LODWORD(v37) = 2 * v14;
        int v17 = 2;
        int v16 = 1;
        int v18 = 1;
      }
      else
      {
        int v18 = 1;
        int v17 = 2;
      }
      int v19 = 1;
    }
    else
    {
      int v18 = HIDWORD(v45);
      int v17 = DWORD1(v46);
      DWORD2(v37) = *(_DWORD *)(a1 + 380);
      DWORD1(v39) = 5;
      if (!*(_DWORD *)(a1 + 448)) {
        LODWORD(v39) = 1;
      }
      int v16 = *(_DWORD *)(a1 + 452);
      if (v16 == 1)
      {
        DWORD2(v37) = 2 * v14;
        int v16 = 1;
        int v19 = *(_DWORD *)(a1 + 380);
        int v15 = 1;
      }
      else
      {
        int v15 = 1;
        int v19 = *(_DWORD *)(a1 + 380);
      }
      int v14 = 1;
    }
    if (*(_DWORD *)(a1 + 304))
    {
      long long v53 = v37;
      long long v54 = v39;
      uint64_t v55 = v41;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v56, __p, (uint64_t)v43, (v43 - (unsigned char *)__p) >> 2);
      int v59 = v14;
      int v60 = v15;
      int v61 = v19;
      int v62 = v18;
      int v63 = 1;
      int v64 = v17;
      long long v65 = 0u;
      long long v66 = 0u;
      uint64_t v67 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      uint64_t v51 = a3;
      char v52 = 0;
      uint64_t v26 = (char *)operator new(0x80uLL);
      *a3 = v26;
      a3[1] = v26;
      a3[2] = v26 + 128;
      uint64_t v27 = 0;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v53, &v68, (uint64_t)v26);
      do
      {
        uint64_t v28 = *(void **)((char *)&v66 + v27);
        if (v28)
        {
          *(void *)((char *)&v66 + v27 + 8) = v28;
          operator delete(v28);
        }
        v27 -= 64;
      }
      while (v27 != -128);
    }
    else if (v16 == 1)
    {
      long long v53 = v37;
      long long v54 = v39;
      uint64_t v55 = v41;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v56, __p, (uint64_t)v43, (v43 - (unsigned char *)__p) >> 2);
      int v59 = v14;
      int v60 = v15;
      int v61 = v19;
      int v62 = v18;
      int v63 = 1;
      int v64 = v17;
      long long v65 = 0u;
      long long v66 = 0u;
      uint64_t v67 = 0;
      *(void *)&long long v68 = __PAIR64__(v15, v14);
      *((void *)&v68 + 1) = __PAIR64__(v18, v19);
      int v69 = 1;
      int v70 = v17;
      long long v71 = 0u;
      long long v72 = 0u;
      uint64_t v73 = 0;
      *(void *)&long long v74 = __PAIR64__(v15, v14);
      *((void *)&v74 + 1) = __PAIR64__(v18, v19);
      int v75 = 1;
      int v76 = v17;
      long long v77 = 0u;
      long long v78 = 0u;
      uint64_t v79 = 0;
      int v80 = v14;
      int v81 = v15;
      int v82 = v19;
      int v83 = v18;
      int v84 = 1;
      int v85 = v17;
      long long v86 = 0u;
      long long v87 = 0u;
      uint64_t v88 = 0;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v51 = a3;
      char v52 = 0;
      uint64_t v29 = (char *)operator new(0x140uLL);
      *a3 = v29;
      a3[1] = v29;
      a3[2] = v29 + 320;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v53, &v89, (uint64_t)v29);
      uint64_t v30 = 40;
      do
      {
        uint64_t v31 = *(void **)((char *)&v50 + v30 * 8);
        if (v31)
        {
          (&v51)[v30] = v31;
          operator delete(v31);
        }
        v30 -= 8;
      }
      while (v30 * 8);
    }
    else
    {
      long long v53 = v37;
      long long v54 = v39;
      uint64_t v55 = v41;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v56, __p, (uint64_t)v43, (v43 - (unsigned char *)__p) >> 2);
      int v59 = v14;
      int v60 = v15;
      int v61 = v19;
      int v62 = v18;
      int v63 = 1;
      int v64 = v17;
      long long v65 = 0u;
      long long v66 = 0u;
      uint64_t v67 = 0;
      *(void *)&long long v68 = __PAIR64__(v15, v14);
      *((void *)&v68 + 1) = __PAIR64__(v18, v19);
      int v69 = 1;
      int v70 = v17;
      long long v71 = 0u;
      long long v72 = 0u;
      uint64_t v73 = 0;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v51 = a3;
      char v52 = 0;
      uint64_t v32 = (char *)operator new(0xC0uLL);
      *a3 = v32;
      a3[1] = v32;
      a3[2] = v32 + 192;
      uint64_t v33 = 0;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v53, &v74, (uint64_t)v32);
      do
      {
        unint64_t v34 = *(void **)((char *)&v72 + v33);
        if (v34)
        {
          *(void *)((char *)&v72 + v33 + 8) = v34;
          operator delete(v34);
        }
        v33 -= 64;
      }
      while (v33 != -192);
    }
  }
  else
  {
    if (v8)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid enum");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v36 = v45;
    long long v38 = v46;
    uint64_t v40 = v47;
    std::vector<int> __p = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v48, (uint64_t)v49, (v49 - (unsigned char *)v48) >> 2);
    int v9 = *(_DWORD *)(a1 + 380);
    if (*(unsigned char *)(a1 + 456))
    {
      int v10 = DWORD1(v45);
      LODWORD(v36) = *(_DWORD *)(a1 + 380);
      int v11 = 1;
      int v12 = 2;
      int v13 = 1;
    }
    else
    {
      DWORD2(v36) = *(_DWORD *)(a1 + 380);
      int v10 = 1;
      int v12 = 5;
      int v11 = HIDWORD(v45);
      int v13 = DWORD2(v36);
      int v9 = 1;
    }
    DWORD1(v38) = v12;
    if (*(_DWORD *)(a1 + 304))
    {
      long long v53 = v36;
      long long v54 = v38;
      uint64_t v55 = v40;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v56, __p, (uint64_t)v43, (v43 - (unsigned char *)__p) >> 2);
      int v59 = v9;
      int v60 = v10;
      int v61 = v13;
      int v62 = v11;
      int v63 = 1;
      int v64 = v12;
      long long v65 = 0u;
      long long v66 = 0u;
      uint64_t v67 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      uint64_t v51 = a3;
      char v52 = 0;
      long long v20 = (char *)operator new(0x80uLL);
      *a3 = v20;
      a3[1] = v20;
      a3[2] = v20 + 128;
      uint64_t v21 = 0;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v53, &v68, (uint64_t)v20);
      do
      {
        uint64_t v22 = *(void **)((char *)&v66 + v21);
        if (v22)
        {
          *(void *)((char *)&v66 + v21 + 8) = v22;
          operator delete(v22);
        }
        v21 -= 64;
      }
      while (v21 != -128);
    }
    else
    {
      long long v53 = v36;
      long long v54 = v38;
      uint64_t v55 = v40;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v56, __p, (uint64_t)v43, (v43 - (unsigned char *)__p) >> 2);
      int v59 = v9;
      int v60 = v10;
      int v61 = v13;
      int v62 = v11;
      int v63 = 1;
      int v64 = v12;
      long long v65 = 0u;
      long long v66 = 0u;
      uint64_t v67 = 0;
      *(void *)&long long v68 = __PAIR64__(v10, v9);
      *((void *)&v68 + 1) = __PAIR64__(v11, v13);
      int v69 = 1;
      int v70 = v12;
      long long v71 = 0u;
      long long v72 = 0u;
      uint64_t v73 = 0;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v51 = a3;
      char v52 = 0;
      uint64_t v23 = (char *)operator new(0xC0uLL);
      *a3 = v23;
      a3[1] = v23;
      a3[2] = v23 + 192;
      uint64_t v24 = 0;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v53, &v74, (uint64_t)v23);
      do
      {
        uint64_t v25 = *(void **)((char *)&v72 + v24);
        if (v25)
        {
          *(void *)((char *)&v72 + v24 + 8) = v25;
          operator delete(v25);
        }
        v24 -= 64;
      }
      while (v24 != -192);
    }
  }
  if (__p)
  {
    uint64_t v43 = __p;
    operator delete(__p);
  }
  if (v48)
  {
    uint64_t v49 = v48;
    operator delete(v48);
  }
}

void sub_192A26284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,char a27)
{
  uint64_t v29 = v28;
  *(void *)(v27 + 8) = v29;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a25);
  uint64_t v31 = 0;
  while (1)
  {
    uint64_t v32 = *(void **)(&a27 + v31 + 168);
    if (v32)
    {
      *(void *)(&a27 + v31 + 176) = v32;
      operator delete(v32);
    }
    v31 -= 64;
    if (v31 == -192)
    {
      if (__p) {
        operator delete(__p);
      }
      if (a22) {
        operator delete(a22);
      }
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::abstract_kernel_with_named_weights<Espresso::rnn_arch_params>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::sequence_reverse_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_sequence_reverse_kernel::kernel_type_str(Espresso::generic_sequence_reverse_kernel *this)
{
  return "sequence_reverse";
}

void Espresso::generic_sequence_reverse_kernel::build_grads_for_inputs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)&long long v27 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v22, "generic_sequence_reverse_kernel");
  Espresso::check_num_arguments(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a3 + 16) + 8) - **(void **)(a3 + 16)) >> 3), 1uLL, (uint64_t)v22, 1);
  uint64_t v6 = **(long long ***)(a3 + 16);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)v6, *((void *)v6 + 1));
  }
  else
  {
    long long v7 = *v6;
    v21.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v7;
  }
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a3 + 40), (uint64_t)&v21))
  {
    Espresso::blob_grad_contrib_name((uint64_t)&v20, (std::string::size_type)&v21, a3);
    std::string::basic_string[abi:ne180100]<0>(__p, "sequence_reverse");
    uint64_t v9 = *(void *)a3;
    int v8 = *(uint64_t **)(a3 + 8);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, *v8, v8[1], 0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3));
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v26, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
    }
    else {
      std::string v26 = v20;
    }
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    uint64_t v24 = &v10;
    char v25 = 0;
    int v10 = (std::string *)operator new(0x18uLL);
    int v11 = v10;
    int v12 = v10 + 1;
    int v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v12, (long long *)&v26, &v27, v10);
    Espresso::sequential_builder::add<Espresso::sequence_reverse_params>(&v18, a2, (uint64_t)__p, v9, a1 + 280, v13, v14, (uint64_t *)&v10);
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    uint64_t v24 = &v10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
}

void sub_192A266E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  *(void *)(v34 - 80) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 80));
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (*(char *)(v34 - 97) < 0) {
    operator delete(*(void **)(v34 - 120));
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::sequence_reverse_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  uint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  char v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  char v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192A26984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void *Espresso::generic_sequence_reverse_kernel::top_shapes_for_bottom_shapes@<X0>(long long **a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if ((char *)v3 - (char *)v2 != 64)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unsupported number of inputs");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;

  return std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a2, v2, v3, 1uLL);
}

void sub_192A26A90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::sequence_concat_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_sequence_concat_kernel::kernel_type_str(Espresso::generic_sequence_concat_kernel *this)
{
  return "sequence_concat";
}

void Espresso::generic_sequence_concat_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, int **a3@<X8>)
{
  *((void *)&v104 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  uint64_t v7 = *(void *)(*a2 + 32);
  long long v8 = *(_OWORD *)(*a2 + 16);
  *(_OWORD *)std::string v99 = *(_OWORD *)*a2;
  *(_OWORD *)&v99[16] = v8;
  uint64_t v100 = v7;
  std::vector<int> __p = 0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v6 + 40), *(void *)(v6 + 48), (uint64_t)(*(void *)(v6 + 48) - *(void *)(v6 + 40)) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v98.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v98.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v9 = (int *)operator new(0x40uLL);
  *a3 = v9;
  a3[1] = v9;
  a3[2] = v9 + 16;
  a3[1] = (int *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)v99, &v104, (uint64_t)v9);
  if (__p)
  {
    uint64_t v102 = __p;
    operator delete(__p);
  }
  int v10 = (_OWORD *)*a2;
  uint64_t v11 = a2[1] - *a2;
  if (*(_DWORD *)(a1 + 280))
  {
    if ((unint64_t)v11 >= 0x41)
    {
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *a3;
      int v14 = **a3;
      if (v12 <= 2) {
        unint64_t v12 = 2;
      }
      uint64_t v15 = (int *)(v10 + 5);
      for (uint64_t i = 1; i != v12; ++i)
      {
        if (*(v15 - 4) != v14)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v96, *(_DWORD *)(*a2 + (i << 6)));
          uint64_t v51 = std::string::insert(&v96, 0, "Mismatching size w:");
          long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v97.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          long long v53 = std::string::append(&v97, "/");
          long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          v98.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v95, **a3);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v55 = &v95;
          }
          else {
            uint64_t v55 = (std::string *)v95.__r_.__value_.__r.__words[0];
          }
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v95.__r_.__value_.__l.__size_;
          }
          uint64_t v57 = std::string::append(&v98, (const std::string::value_type *)v55, size);
          long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          *(void *)&v99[16] = *((void *)&v57->__r_.__value_.__l + 2);
          *(_OWORD *)std::string v99 = v58;
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)v99);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if (*(v15 - 3) != v13[1])
        {
          uint64_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v96, *(_DWORD *)(*a2 + (i << 6) + 4));
          uint64_t v42 = std::string::insert(&v96, 0, "Mismatching size h:");
          long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
          v97.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v43;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          uint64_t v44 = std::string::append(&v97, "/");
          long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          v98.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v95, (*a3)[1]);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v46 = &v95;
          }
          else {
            long long v46 = (std::string *)v95.__r_.__value_.__r.__words[0];
          }
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v47 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v47 = v95.__r_.__value_.__l.__size_;
          }
          long long v48 = std::string::append(&v98, (const std::string::value_type *)v46, v47);
          long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          *(void *)&v99[16] = *((void *)&v48->__r_.__value_.__l + 2);
          *(_OWORD *)std::string v99 = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v41, (const std::string *)v99);
          __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if (*(v15 - 2) != v13[2])
        {
          uint64_t v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v96, *(_DWORD *)(*a2 + (i << 6) + 8));
          uint64_t v33 = std::string::insert(&v96, 0, "Mismatching size n:");
          long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
          v97.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v34;
          v33->__r_.__value_.__l.__size_ = 0;
          v33->__r_.__value_.__r.__words[2] = 0;
          v33->__r_.__value_.__r.__words[0] = 0;
          uint64_t v35 = std::string::append(&v97, "/");
          long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
          v98.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v36;
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v95, (*a3)[2]);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v37 = &v95;
          }
          else {
            long long v37 = (std::string *)v95.__r_.__value_.__r.__words[0];
          }
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v38 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v38 = v95.__r_.__value_.__l.__size_;
          }
          long long v39 = std::string::append(&v98, (const std::string::value_type *)v37, v38);
          long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          *(void *)&v99[16] = *((void *)&v39->__r_.__value_.__l + 2);
          *(_OWORD *)std::string v99 = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v32, (const std::string *)v99);
          __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if (*(v15 - 1) != v13[3])
        {
          char v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v96, *(_DWORD *)(*a2 + (i << 6) + 12));
          uint64_t v24 = std::string::insert(&v96, 0, "Mismatching size n:");
          long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v97.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          std::string v26 = std::string::append(&v97, "/");
          long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v98.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v95, (*a3)[3]);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v28 = &v95;
          }
          else {
            uint64_t v28 = (std::string *)v95.__r_.__value_.__r.__words[0];
          }
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v29 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v29 = v95.__r_.__value_.__l.__size_;
          }
          uint64_t v30 = std::string::append(&v98, (const std::string::value_type *)v28, v29);
          long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          *(void *)&v99[16] = *((void *)&v30->__r_.__value_.__l + 2);
          *(_OWORD *)std::string v99 = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v23, (const std::string *)v99);
          __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        int v17 = *v15;
        v15 += 16;
        v13[4] += v17;
      }
    }
  }
  else if ((unint64_t)v11 >= 0x41)
  {
    unint64_t v18 = v11 >> 6;
    int v19 = *a3;
    int v20 = **a3;
    if (v18 <= 2) {
      unint64_t v18 = 2;
    }
    uint64_t v21 = v10 + 5;
    for (uint64_t j = 1; j != v18; ++j)
    {
      if (*(v21 - 4) != v20)
      {
        long long v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v96, *(_DWORD *)(*a2 + (j << 6)));
        long long v87 = std::string::insert(&v96, 0, "Mismatching size w:");
        long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v88;
        v87->__r_.__value_.__l.__size_ = 0;
        v87->__r_.__value_.__r.__words[2] = 0;
        v87->__r_.__value_.__r.__words[0] = 0;
        long long v89 = std::string::append(&v97, "/");
        long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v90;
        v89->__r_.__value_.__l.__size_ = 0;
        v89->__r_.__value_.__r.__words[2] = 0;
        v89->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v95, **a3);
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v91 = &v95;
        }
        else {
          char v91 = (std::string *)v95.__r_.__value_.__r.__words[0];
        }
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v92 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v92 = v95.__r_.__value_.__l.__size_;
        }
        char v93 = std::string::append(&v98, (const std::string::value_type *)v91, v92);
        long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
        *(void *)&v99[16] = *((void *)&v93->__r_.__value_.__l + 2);
        *(_OWORD *)std::string v99 = v94;
        v93->__r_.__value_.__l.__size_ = 0;
        v93->__r_.__value_.__r.__words[2] = 0;
        v93->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v86, (const std::string *)v99);
        __cxa_throw(v86, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (*(v21 - 3) != v19[1])
      {
        long long v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v96, *(_DWORD *)(*a2 + (j << 6) + 4));
        long long v78 = std::string::insert(&v96, 0, "Mismatching size h:");
        long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v79;
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        int v80 = std::string::append(&v97, "/");
        long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v81;
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v95, (*a3)[1]);
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v82 = &v95;
        }
        else {
          int v82 = (std::string *)v95.__r_.__value_.__r.__words[0];
        }
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v83 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v83 = v95.__r_.__value_.__l.__size_;
        }
        int v84 = std::string::append(&v98, (const std::string::value_type *)v82, v83);
        long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
        *(void *)&v99[16] = *((void *)&v84->__r_.__value_.__l + 2);
        *(_OWORD *)std::string v99 = v85;
        v84->__r_.__value_.__l.__size_ = 0;
        v84->__r_.__value_.__r.__words[2] = 0;
        v84->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v77, (const std::string *)v99);
        __cxa_throw(v77, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (*(v21 - 1) != v19[3])
      {
        long long v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v96, *(_DWORD *)(*a2 + (j << 6) + 12));
        int v69 = std::string::insert(&v96, 0, "Mismatching size n:");
        long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v70;
        v69->__r_.__value_.__l.__size_ = 0;
        v69->__r_.__value_.__r.__words[2] = 0;
        v69->__r_.__value_.__r.__words[0] = 0;
        long long v71 = std::string::append(&v97, "/");
        long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v95, (*a3)[3]);
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v73 = &v95;
        }
        else {
          uint64_t v73 = (std::string *)v95.__r_.__value_.__r.__words[0];
        }
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v74 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v74 = v95.__r_.__value_.__l.__size_;
        }
        int v75 = std::string::append(&v98, (const std::string::value_type *)v73, v74);
        long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        *(void *)&v99[16] = *((void *)&v75->__r_.__value_.__l + 2);
        *(_OWORD *)std::string v99 = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v68, (const std::string *)v99);
        __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (*v21 != v19[4])
      {
        int v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v96, *(_DWORD *)(*a2 + (j << 6) + 16));
        int v60 = std::string::insert(&v96, 0, "Mismatching size seq:");
        long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        int v62 = std::string::append(&v97, "/");
        long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v63;
        v62->__r_.__value_.__l.__size_ = 0;
        v62->__r_.__value_.__r.__words[2] = 0;
        v62->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v95, (*a3)[4]);
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v64 = &v95;
        }
        else {
          int v64 = (std::string *)v95.__r_.__value_.__r.__words[0];
        }
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v65 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v65 = v95.__r_.__value_.__l.__size_;
        }
        long long v66 = std::string::append(&v98, (const std::string::value_type *)v64, v65);
        long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        *(void *)&v99[16] = *((void *)&v66->__r_.__value_.__l + 2);
        *(_OWORD *)std::string v99 = v67;
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v59, (const std::string *)v99);
        __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      v19[2] += *(v21 - 2);
      v21 += 16;
    }
  }
}

void sub_192A2747C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v45) {
    __cxa_free_exception(v44);
  }
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::sequence_repeat_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_sequence_repeat_kernel::kernel_type_str(Espresso::generic_sequence_repeat_kernel *this)
{
  return "sequence_repeat";
}

void *Espresso::generic_sequence_repeat_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if ((char *)v5 - (char *)v4 != 64)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unsupported number of inputs");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  double result = std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a3, v4, v5, 1uLL);
  *(_DWORD *)(*a3 + 16) *= *(_DWORD *)(a1 + 280);
  return result;
}

void sub_192A276C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::generic_grid_sampling_kernel::top_shapes_for_bottom_shapes(long long **a1@<X1>, void *a2@<X8>)
{
  *((void *)&v12 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v4 = *((void *)*a1 + 4);
  long long v5 = (*a1)[1];
  v7[0] = **a1;
  v7[1] = v5;
  uint64_t v8 = v4;
  std::vector<int> __p = 0;
  int v10 = 0;
  uint64_t v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v3 + 5), *((void *)v3 + 6), (uint64_t)(*((void *)v3 + 6) - *((void *)v3 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_192A277B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = v18;
  *(void *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::resample_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_resample_kernel::kernel_type_str(Espresso::generic_resample_kernel *this)
{
  return "resample";
}

void Espresso::generic_resample_kernel::top_shapes_for_bottom_shapes(long long **a1@<X1>, void *a2@<X8>)
{
  *((void *)&v39 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v5 = *((void *)*a1 + 4);
  long long v6 = (*a1)[1];
  long long v26 = **a1;
  long long v27 = v6;
  uint64_t v28 = v5;
  std::string::size_type v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v29, *((const void **)v4 + 5), *((void *)v4 + 6), (uint64_t)(*((void *)v4 + 6) - *((void *)v4 + 5)) >> 2);
  uint64_t v7 = *a1;
  long long v8 = (*a1)[5];
  long long v20 = (*a1)[4];
  long long v21 = v8;
  uint64_t v9 = (const void *)*((void *)v7 + 13);
  uint64_t v22 = *((void *)v7 + 12);
  char v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v23, v9, *((void *)v7 + 14), (uint64_t)(*((void *)v7 + 14) - (void)v9) >> 2);
  if (DWORD1(v27) != 4 && (void)v27 != 0xFFFFFFFF00000001)
  {
    uint64_t v13 = "resample_kernel: 1st input must be rank 4";
    goto LABEL_24;
  }
  if (DWORD1(v21) != 4 && (void)v21 != 0xFFFFFFFF00000001)
  {
    uint64_t v13 = "resample_kernel: 2nd input must be rank 4";
    goto LABEL_24;
  }
  unsigned int v10 = v20;
  unsigned int v11 = DWORD2(v20);
  if (v20 != 2 && DWORD2(v20) != 2)
  {
    uint64_t v13 = "resample_kernel: either width or channel dimemsion of 2nd input must be 2";
LABEL_24:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v13);
  }
  if (v20 == 2)
  {
    unsigned int v10 = DWORD1(v20);
  }
  else if (DWORD2(v20) == 2)
  {
    unsigned int v11 = DWORD1(v20);
  }
  else
  {
    unsigned int v10 = 0;
    unsigned int v11 = 0;
  }
  *((void *)&v14 + 1) = *((void *)&v26 + 1);
  long long v15 = v27;
  uint64_t v16 = v28;
  std::vector<int> __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v29, (uint64_t)v30, (v30 - (unsigned char *)v29) >> 2);
  *(void *)&long long v14 = __PAIR64__(v11, v10);
  v34[0] = v14;
  v34[1] = v15;
  uint64_t v35 = v16;
  long long v36 = 0;
  long long v37 = 0;
  uint64_t v38 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v36, __p, (uint64_t)v18, (v18 - (unsigned char *)__p) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v32 = a2;
  char v33 = 0;
  long long v12 = (char *)operator new(0x40uLL);
  *a2 = v12;
  a2[1] = v12;
  a2[2] = v12 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v34, &v39, (uint64_t)v12);
  if (v36)
  {
    long long v37 = v36;
    operator delete(v36);
  }
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }
  if (v29)
  {
    uint64_t v30 = v29;
    operator delete(v29);
  }
}

void sub_192A27A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v34 = v32;
  *(void *)(v31 + 8) = v34;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 128));
  long long v36 = *(void **)(v33 - 72);
  if (v36)
  {
    *(void *)(v33 - 64) = v36;
    operator delete(v36);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a30) {
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_local_correlation_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v20 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  long long v7 = **a2;
  long long v8 = (*a2)[1];
  uint64_t v9 = *((void *)*a2 + 4);
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v10, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  DWORD2(v7) = ((2 * *(_DWORD *)(a1 + 284)) | 1) * ((2 * *(_DWORD *)(a1 + 280)) | 1);
  v15[0] = v7;
  v15[1] = v8;
  uint64_t v16 = v9;
  std::vector<int> __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v10, (uint64_t)v11, (v11 - (unsigned char *)v10) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v13 = a3;
  char v14 = 0;
  long long v6 = (char *)operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v6;
  a3[2] = v6 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v15, &v20, (uint64_t)v6);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    unsigned int v11 = v10;
    operator delete(v10);
  }
}

void sub_192A27C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  *(void *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_bahdanau_attention_kernel::top_shapes_for_bottom_shapes(const Espresso::layer_shape **a1@<X1>, void *a2@<X8>)
{
  *((void *)&v40 + 1) = *MEMORY[0x1E4F143B8];
  if (a1[1] - *a1 != 192) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_bahdanau_attention_kernel: Needs 3 bottom blobs");
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v28, (const Espresso::layer_shape *)((char *)*a1 + 64), 1);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v26, *a1, 1);
  unsigned int v4 = v29;
  if (v29 != v27)
  {
    if (v27 > v29) {
      unsigned int v4 = v27;
    }
    unint64_t v5 = (int)v4;
    Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)v28, (int)v4);
    Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)v26, v5);
  }
  uint64_t v22 = v26[0];
  int v23 = v28[2];
  uint64_t v24 = 0;
  int v25 = 3;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v22, 1, (uint64_t)&v17);
  v14[0] = v28[0];
  v14[1] = HIDWORD(v26[0]);
  uint64_t v14[2] = 1;
  uint64_t v15 = 0;
  int v16 = 3;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v14, 1, (uint64_t)&v9);
  DWORD1(v10) = v27;
  DWORD1(v18) = v27;
  v32[0] = v17;
  v32[1] = v18;
  uint64_t v33 = v19;
  memset(v34, 0, sizeof(v34));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v34, v20, (uint64_t)v21, (v21 - (unsigned char *)v20) >> 2);
  long long v35 = v9;
  long long v36 = v10;
  uint64_t v37 = v11;
  uint64_t v38 = 0;
  v39[0] = 0;
  v39[1] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v38, __p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v30 = a2;
  char v31 = 0;
  long long v6 = (char *)operator new(0x80uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 128;
  uint64_t v7 = 0;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v32, &v40, (uint64_t)v6);
  do
  {
    long long v8 = (void *)v39[v7 - 1];
    if (v8)
    {
      v39[v7] = v8;
      operator delete(v8);
    }
    v7 -= 8;
  }
  while (v7 != -16);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    long long v21 = v20;
    operator delete(v20);
  }
}

void sub_192A27E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v29 = v27;
  *(void *)(v26 + 8) = v29;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 192));
  uint64_t v31 = 0;
  uint64_t v32 = v28 - 176;
  while (1)
  {
    uint64_t v33 = *(void **)(v32 + v31 + 104);
    if (v33)
    {
      *(void *)(v32 + v31 + 112) = v33;
      operator delete(v33);
    }
    v31 -= 64;
    if (v31 == -128)
    {
      if (__p) {
        operator delete(__p);
      }
      if (a25) {
        operator delete(a25);
      }
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::generic_self_attention_kernel::top_shapes_for_bottom_shapes(long long **a1@<X1>, void *a2@<X8>)
{
  *((void *)&v45 + 1) = *MEMORY[0x1E4F143B8];
  if ((unint64_t)((char *)a1[1] - (char *)*a1) <= 0xBF) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_self_attention_kernel: Needs at least 3 bottom blobs");
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v24, (const Espresso::layer_shape *)(*a1 + 4), 1);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v22, (const Espresso::layer_shape *)*a1, 1);
  *(void *)uint64_t v28 = v22;
  *(_DWORD *)&unsigned char v28[8] = v25;
  *(void *)&v28[12] = 0;
  *(_DWORD *)&v28[20] = 3;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v28, 1, (uint64_t)&v17);
  DWORD1(v18) = v23;
  if ((char *)a1[1] - (char *)*a1 == 192)
  {
    *(_OWORD *)uint64_t v28 = v17;
    *(_OWORD *)&v28[16] = v18;
    uint64_t v29 = v19;
    std::vector<int> __p = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v20, (uint64_t)v21, (v21 - (unsigned char *)v20) >> 2);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v26 = a2;
    char v27 = 0;
    unsigned int v4 = (char *)operator new(0x40uLL);
    *a2 = v4;
    a2[1] = v4;
    a2[2] = v4 + 64;
    a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), (long long *)v28, v33, (uint64_t)v4);
    if (__p)
    {
      uint64_t v31 = __p;
      operator delete(__p);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v28 = v17;
    *(_OWORD *)&v28[16] = v18;
    uint64_t v29 = v19;
    std::vector<int> __p = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v20, (uint64_t)v21, (v21 - (unsigned char *)v20) >> 2);
    unint64_t v5 = (const Espresso::layer_shape *)*a1;
    uint64_t v6 = *((void *)*a1 + 4);
    long long v7 = (*a1)[1];
    v33[0] = **a1;
    v33[1] = v7;
    uint64_t v34 = v6;
    memset(v35, 0, sizeof(v35));
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v35, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
    long long v8 = (const Espresso::layer_shape *)*a1;
    uint64_t v9 = *((void *)*a1 + 12);
    long long v10 = (*a1)[5];
    long long v36 = (*a1)[4];
    long long v37 = v10;
    uint64_t v38 = v9;
    memset(v39, 0, sizeof(v39));
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v39, *((const void **)v8 + 13), *((void *)v8 + 14), (uint64_t)(*((void *)v8 + 14) - *((void *)v8 + 13)) >> 2);
    uint64_t v11 = (const Espresso::layer_shape *)*a1;
    uint64_t v12 = *((void *)*a1 + 20);
    long long v13 = (*a1)[9];
    long long v40 = (*a1)[8];
    long long v41 = v13;
    v44[0] = 0;
    v44[1] = 0;
    uint64_t v42 = v12;
    uint64_t v43 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v43, *((const void **)v11 + 21), *((void *)v11 + 22), (uint64_t)(*((void *)v11 + 22) - *((void *)v11 + 21)) >> 2);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v26 = a2;
    char v27 = 0;
    char v14 = (char *)operator new(0x100uLL);
    *a2 = v14;
    a2[1] = v14;
    a2[2] = v14 + 256;
    uint64_t v15 = 0;
    a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), (long long *)v28, &v45, (uint64_t)v14);
    do
    {
      int v16 = (void *)v44[v15 - 1];
      if (v16)
      {
        v44[v15] = v16;
        operator delete(v16);
      }
      v15 -= 8;
    }
    while (v15 != -32);
  }
  if (v20)
  {
    long long v21 = v20;
    operator delete(v20);
  }
}

void sub_192A281EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v57 = v56;
  *(void *)(v55 + 8) = v57;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a23);
  uint64_t v59 = 0;
  while (1)
  {
    int v60 = *(void **)((char *)&a54 + v59);
    if (v60)
    {
      *(uint64_t *)((char *)&a55 + v59) = (uint64_t)v60;
      operator delete(v60);
    }
    v59 -= 64;
    if (v59 == -256)
    {
      if (__p) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::generic_conv3d_kernel::create_weights_blob(Espresso::generic_conv3d_kernel *this@<X0>, void *a2@<X8>)
{
  int v2 = *((_DWORD *)this + 96);
  if (v2 <= 1) {
    int v2 = 1;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int &,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 80), *((_DWORD *)this + 81), *((_DWORD *)this + 82), *((_DWORD *)this + 79) / v2, *((_DWORD *)this + 78));
}

double Espresso::generic_conv3d_kernel::weights_blob_shape@<D0>(Espresso::generic_conv3d_kernel *this@<X0>, uint64_t a2@<X8>)
{
  int v2 = *((_DWORD *)this + 82);
  int v3 = *((_DWORD *)this + 79);
  int v4 = *((_DWORD *)this + 96);
  if (v4 <= 1) {
    int v4 = 1;
  }
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  double result = *((double *)this + 40);
  int v6 = *((_DWORD *)this + 78);
  *(void *)(a2 + 56) = 0;
  *(double *)a2 = result;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = v3 / v4;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = -1;
  return result;
}

void Espresso::generic_conv3d_kernel::create_biases_blob(Espresso::generic_conv3d_kernel *this@<X0>, void *a2@<X8>)
{
}

uint64_t Espresso::generic_conv3d_kernel::get_biases_shape@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *(_DWORD *)(this + 312);
  *(void *)(a2 + 12) = 0;
  *(void *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 20) = 1;
  return this;
}

void Espresso::generic_conv3d_kernel::get_weights(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_conv3d_kernel::get_biases(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

BOOL Espresso::generic_conv3d_kernel::supports_weight_key(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = (char)a2[23];
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 == 1)
    {
      int v3 = *a2;
      return v3 == 87 || v3 == 98;
    }
    return 0;
  }
  if (*((void *)a2 + 1) != 1) {
    return 0;
  }
  int v3 = **(unsigned __int8 **)a2;
  return v3 == 87 || v3 == 98;
}

void Espresso::generic_conv3d_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, const std::string::value_type **a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  if (!a6)
  {
    uint64_t v10 = 0;
    goto LABEL_6;
  }
  uint64_t v10 = *a6;
  if (!*a6)
  {
LABEL_6:
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  uint64_t v11 = (std::__shared_weak_count *)a6[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 448))(&v45, a1);
  int v12 = v45;
  int v13 = HIDWORD(v45);
  int v14 = v46;
  int v15 = v47;
  int v16 = v48;
  if (*((char *)a3 + 23) < 0)
  {
    long long v20 = (unsigned __int8 *)a3[1];
    if (v20 != (unsigned __int8 *)1)
    {
      if (v20 != (unsigned __int8 *)5) {
        goto LABEL_72;
      }
      if (*(_DWORD *)*a3 != 828792663 || (*a3)[4] != 54)
      {
        uint64_t v19 = *a3;
LABEL_23:
        if (*(_DWORD *)v19 == 828792674 && v19[4] == 54)
        {
          v32[0] = v10;
          v32[1] = (uint64_t)v11;
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v40, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v32, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
          if (v11) {
            nitro::nitro_function::nitro_function(v11);
          }
          uint64_t v23 = *(void *)(a1 + 16);
          uint64_t v30 = *(void *)(a1 + 8);
          uint64_t v31 = v23;
          if (v23) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
          }
          if (*((char *)a3 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v29, *a3, (std::string::size_type)a3[1]);
          }
          else {
            std::string v29 = *(std::string *)a3;
          }
          if (v41) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::set_parameter_blob<unsigned short,1>();
        }
        goto LABEL_72;
      }
LABEL_49:
      v39[0] = v10;
      v39[1] = (uint64_t)v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<unsigned short,5>(&v40, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v39, v12, v13, v14, v15, v16, (a4 & 0x3F) == 0);
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      uint64_t v28 = *(void *)(a1 + 16);
      uint64_t v37 = *(void *)(a1 + 8);
      uint64_t v38 = v28;
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
      if (*((char *)a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v36, *a3, (std::string::size_type)a3[1]);
      }
      else {
        std::string v36 = *(std::string *)a3;
      }
      v35[6] = v40;
      v35[7] = v41;
      if (v41) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::set_parameter_blob<unsigned short,5>();
    }
    int v25 = *(unsigned __int8 *)*a3;
    if (v25 == 87)
    {
LABEL_57:
      v44[0] = v10;
      v44[1] = (uint64_t)v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<float,5>(&src, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v44, v12, v13, v14, v15, v16, (a4 & 0x3F) == 0);
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      vImagePixelCount height = (std::__shared_weak_count *)src.height;
      data = src.data;
      vImagePixelCount v43 = src.height;
      if (src.height) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(src.height + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void **))(*(void *)a1 + 400))(a1, &data);
      char v27 = (std::__shared_weak_count *)v43;
      if (!v43) {
        goto LABEL_70;
      }
      goto LABEL_69;
    }
    if (v25 != 98) {
      goto LABEL_72;
    }
  }
  else
  {
    int v17 = *((unsigned __int8 *)a3 + 23);
    if (v17 != 1)
    {
      if (v17 != 5) {
        goto LABEL_72;
      }
      BOOL v18 = *(_DWORD *)a3 == 828792663 && *((unsigned char *)a3 + 4) == 54;
      uint64_t v19 = (const std::string::value_type *)a3;
      if (!v18) {
        goto LABEL_23;
      }
      goto LABEL_49;
    }
    int v24 = *(unsigned __int8 *)a3;
    if (v24 != 98)
    {
      if (v24 != 87) {
        goto LABEL_72;
      }
      goto LABEL_57;
    }
  }
  v35[0] = v10;
  v35[1] = (uint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&src, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v35, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  vImagePixelCount height = (std::__shared_weak_count *)src.height;
  uint64_t v33 = src.data;
  vImagePixelCount v34 = src.height;
  if (src.height) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(src.height + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 392))(a1, &v33);
  char v27 = (std::__shared_weak_count *)v34;
  if (!v34) {
    goto LABEL_70;
  }
LABEL_69:
  nitro::nitro_function::nitro_function(v27);
LABEL_70:
  if (height) {
    nitro::nitro_function::nitro_function(height);
  }
LABEL_72:
  if (v49)
  {
    uint64_t v50 = v49;
    operator delete(v49);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_192A289D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  int v47 = *(std::__shared_weak_count **)(v45 - 232);
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  int v48 = *(void **)(v45 - 152);
  if (v48)
  {
    *(void *)(v45 - 144) = v48;
    operator delete(v48);
  }
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<float,5>(void *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, int a8, int a9, int a10, int a11, char a12)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *a6;
  BOOL v18 = (std::__shared_weak_count *)a6[1];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = 0;
  a1[1] = 0;
  if (*(unsigned char *)(a2 + 73))
  {
    if (!v17 || (a12 & 1) != 0)
    {
      if (!v17) {
        goto LABEL_9;
      }
    }
    else if (!*(unsigned char *)(a2 + 123))
    {
      goto LABEL_9;
    }
    uint64_t v22 = (char *)operator new(0x68uLL);
    *((void *)v22 + 1) = 0;
    *((void *)v22 + 2) = 0;
    *(void *)uint64_t v22 = &unk_1EE389A00;
    *((void *)v22 + 3) = &unk_1EE36BF30;
    *(_OWORD *)(v22 + 72) = 0u;
    *(_OWORD *)(v22 + 88) = 0u;
    *((_DWORD *)v22 + 8) = a7;
    *((_DWORD *)v22 + 9) = a8;
    *((_DWORD *)v22 + 10) = a9;
    *((_DWORD *)v22 + 11) = a10;
    *((_DWORD *)v22 + 12) = a11;
    *((void *)v22 + 7) = a4;
    v22[64] = 0;
    uint64_t v23 = a7;
    uint64_t v24 = 36;
    *a1 = v22 + 24;
    a1[1] = v22;
    do
    {
      v23 *= *(int *)&v22[v24];
      v24 += 4;
    }
    while (v24 != 52);
    if (a5 != 4 * v23)
    {
      int v47 = v22;
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v50, a5);
      uint64_t v37 = std::string::insert(&v50, 0, "Unexpected size s=");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      long long v39 = std::string::append(&v51, "/blob=");
      uint64_t v40 = 0;
      long long v41 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v41;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      uint64_t v42 = *((int *)v47 + 8);
      do
      {
        v42 *= *(int *)&v47[v40 + 36];
        v40 += 4;
      }
      while (v40 != 16);
      std::to_string(&v49, 4 * v42);
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        vImagePixelCount v43 = &v49;
      }
      else {
        vImagePixelCount v43 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v49.__r_.__value_.__l.__size_;
      }
      uint64_t v45 = std::string::append(&v52, (const std::string::value_type *)v43, size);
      long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v53);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (!v18)
    {
      *((void *)v22 + 9) = v17;
      *((void *)v22 + 10) = 0;
      goto LABEL_22;
    }
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    int v25 = (std::__shared_weak_count *)*((void *)v22 + 10);
    *((void *)v22 + 9) = v17;
    *((void *)v22 + 10) = v18;
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
LABEL_21:
    nitro::nitro_function::nitro_function(v18);
    goto LABEL_22;
  }
LABEL_9:
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int &,int &,int &,int &,int &,void>(&v53, a7, a8, a9, a10, a11);
  uint64_t v19 = 0;
  long long v20 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
  *(_OWORD *)a1 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
  uint64_t v21 = *(int *)(v20 + 8);
  do
  {
    v21 *= *(int *)(v20 + 12 + v19);
    v19 += 4;
  }
  while (v19 != 16);
  if (a5 != 4 * v21)
  {
    uint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v50, a5);
    char v27 = std::string::insert(&v50, 0, "Unexpected size s=");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::string v29 = std::string::append(&v51, "/blob=");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    uint64_t v31 = *(int *)(v20 + 8);
    do
      v31 *= *(int *)(v20 + 12 + *((void *)&v20 + 1));
    while (*((void *)&v20 + 1) != 12);
    std::to_string(&v49, 4 * v31);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v32 = &v49;
    }
    else {
      uint64_t v32 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v33 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v33 = v49.__r_.__value_.__l.__size_;
    }
    vImagePixelCount v34 = std::string::append(&v52, (const std::string::value_type *)v32, v33);
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v26, &v53);
    __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  memcpy(*(void **)(v20 + 32), a4, a5);
  if (v18) {
    goto LABEL_21;
  }
LABEL_22:
  if (a3)
  {
    nitro::nitro_function::nitro_function(a3);
  }
}

void sub_192A28F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v38 - 89) < 0) {
    operator delete(*(void **)(v38 - 112));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v37 & 1) == 0)
    {
LABEL_14:
      nitro::nitro_function::nitro_function(a9);
      if (v35) {
        nitro::nitro_function::nitro_function(v35);
      }
      if (a10) {
        nitro::nitro_function::nitro_function(a10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v36);
  goto LABEL_14;
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<unsigned short,5>(void *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, int a8, int a9, int a10, int a11, char a12)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *a6;
  uint64_t v17 = (std::__shared_weak_count *)a6[1];
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string v53 = v17;
  *a1 = 0;
  a1[1] = 0;
  if (*(unsigned char *)(a2 + 73))
  {
    if (!v18 || (a12 & 1) != 0)
    {
      if (!v18) {
        goto LABEL_9;
      }
    }
    else if (!*(unsigned char *)(a2 + 123))
    {
      goto LABEL_9;
    }
    uint64_t v26 = (char *)operator new(0x68uLL);
    char v27 = v26;
    *((void *)v26 + 1) = 0;
    *((void *)v26 + 2) = 0;
    *(void *)uint64_t v26 = &unk_1EE389DB8;
    *((void *)v26 + 3) = &unk_1EE36C150;
    *(_OWORD *)(v26 + 72) = 0u;
    *(_OWORD *)(v26 + 88) = 0u;
    *((_DWORD *)v26 + 8) = a7;
    *((_DWORD *)v26 + 9) = a8;
    *((_DWORD *)v26 + 10) = a9;
    *((_DWORD *)v26 + 11) = a10;
    *((_DWORD *)v26 + 12) = a11;
    *((void *)v26 + 7) = a4;
    v26[64] = 0;
    uint64_t v28 = a7;
    uint64_t v29 = 36;
    *a1 = v26 + 24;
    a1[1] = v26;
    do
    {
      v28 *= *(int *)&v26[v29];
      v29 += 4;
    }
    while (v29 != 52);
    if (a5 != 2 * v28)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v56, a5);
      vImagePixelCount v43 = std::string::insert(&v56, 0, "Unexpected size s=");
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      uint64_t v45 = std::string::append(&v57, "/blob=");
      uint64_t v46 = 0;
      long long v47 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v47;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      uint64_t v48 = *((int *)v27 + 8);
      do
      {
        v48 *= *(int *)&v27[v46 + 36];
        v46 += 4;
      }
      while (v46 != 16);
      std::to_string(&v55, 2 * v48);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v49 = &v55;
      }
      else {
        std::string v49 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v55.__r_.__value_.__l.__size_;
      }
      std::string v51 = std::string::append(&v58, (const std::string::value_type *)v49, size);
      long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v59);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v25 = v53;
    if (!v53)
    {
      *((void *)v26 + 9) = v18;
      *((void *)v26 + 10) = 0;
      uint64_t v24 = a3;
      if (!a3) {
        return;
      }
      goto LABEL_23;
    }
    atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v30 = (std::__shared_weak_count *)*((void *)v26 + 10);
    *((void *)v27 + 9) = v18;
    *((void *)v27 + 10) = v53;
    uint64_t v24 = a3;
    if (v30) {
      nitro::nitro_function::nitro_function(v30);
    }
    goto LABEL_21;
  }
LABEL_9:
  uint64_t v19 = (char *)operator new(0x68uLL);
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = 0;
  *(void *)uint64_t v19 = &unk_1EE389DB8;
  *((void *)v19 + 3) = &unk_1EE36C150;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *((_DWORD *)v19 + 8) = a7;
  *((_DWORD *)v19 + 9) = a8;
  *((_DWORD *)v19 + 10) = a9;
  *((_DWORD *)v19 + 11) = a10;
  *((_DWORD *)v19 + 12) = a11;
  long long v20 = (Espresso *)(2 * a7 * (uint64_t)a8 * a9 * a10 * a11);
  uint64_t v21 = Espresso::kern_alloc_uninitialized(v20);
  bzero(v21, (size_t)v20);
  *((void *)v19 + 7) = v21;
  v19[64] = 1;
  *a1 = v19 + 24;
  a1[1] = v19;
  uint64_t v22 = 36;
  uint64_t v23 = *((int *)v19 + 8);
  do
  {
    v23 *= *(int *)&v19[v22];
    v22 += 4;
  }
  while (v22 != 52);
  uint64_t v24 = a3;
  if (a5 != 2 * v23)
  {
    uint64_t v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v56, a5);
    uint64_t v32 = std::string::insert(&v56, 0, "Unexpected size s=");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    vImagePixelCount v34 = std::string::append(&v57, "/blob=");
    uint64_t v35 = 0;
    long long v36 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v36;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    uint64_t v37 = *((int *)v19 + 8);
    do
    {
      v37 *= *(int *)&v19[v35 + 36];
      v35 += 4;
    }
    while (v35 != 16);
    std::to_string(&v55, 2 * v37);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v38 = &v55;
    }
    else {
      uint64_t v38 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v39 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v39 = v55.__r_.__value_.__l.__size_;
    }
    uint64_t v40 = std::string::append(&v58, (const std::string::value_type *)v38, v39);
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v31, &v59);
    __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  memcpy(v21, a4, a5);
  int v25 = v53;
  if (v53) {
LABEL_21:
  }
    nitro::nitro_function::nitro_function(v25);
  if (!v24) {
    return;
  }
LABEL_23:

  nitro::nitro_function::nitro_function(v24);
}

void sub_192A29594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v38 - 89) < 0) {
    operator delete(*(void **)(v38 - 112));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (v37) {
    __cxa_free_exception(v36);
  }
  nitro::nitro_function::nitro_function(v35);
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int const*&,void>(void *a1, uint64_t a2)
{
  int v4 = (char *)operator new(0x68uLL);
  unint64_t v5 = v4;
  uint64_t v6 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)int v4 = &unk_1EE389A00;
  long long v7 = v4 + 24;
  *((void *)v4 + 3) = &unk_1EE36BF30;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  uint64_t v8 = 1;
  do
  {
    uint64_t v9 = *(int *)(a2 + v6);
    *(_DWORD *)&v4[v6 + 32] = v9;
    v8 *= v9;
    v6 += 4;
  }
  while (v6 != 20);
  size_t v10 = 4 * v8;
  uint64_t v11 = Espresso::kern_alloc_uninitialized((Espresso *)(4 * v8));
  bzero(v11, v10);
  *((void *)v5 + 7) = v11;
  v5[64] = 1;
  *a1 = v7;
  a1[1] = v5;
}

void sub_192A297F8(_Unwind_Exception *a1)
{
  int v3 = (std::__shared_weak_count *)v1[4].__vftable;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

float Espresso::generic_conv3d_kernel::estimated_compute_resources(uint64_t a1, long long **a2, int a3)
{
  float v5 = Espresso::base_kernel::estimated_compute_resources(a1, a2, a3);
  int v6 = *((_DWORD *)*a2 + 3);
  int v7 = *((_DWORD *)*a2 + 4);
  (*(void (**)(void *__return_ptr, uint64_t, long long **, float))(*(void *)a1 + 64))(v16, a1, a2, v5);
  int v9 = *(_DWORD *)v16[0];
  int v8 = *(_DWORD *)(v16[0] + 4);
  int v10 = *(_DWORD *)(v16[0] + 8);
  uint64_t v11 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 384))(a1);
  int v12 = v11[20];
  if (v12 <= 1) {
    int v12 = 1;
  }
  if (v7 <= 1) {
    int v13 = 1;
  }
  else {
    int v13 = v7;
  }
  float v14 = ((double)(v13 * v6) * (double)v11[2] * (double)v9 * (double)v8 * (double)v10
       + (double)v11[2]
       * (double)(v11[3] / v12)
       * (double)v11[4]
       * (double)v11[5]
       * (double)v11[6]
       * (double)(v13 * v6)
       * (double)v9
       * (double)v8
       * (double)v10
       * 2.0)
      * 0.000000001;
  uint64_t v17 = (void **)v16;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v17);
  return v14;
}

void sub_192A299FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Espresso::generic_conv3d_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v37 + 1) = *MEMORY[0x1E4F143B8];
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v28, *a2, 0);
  *(_OWORD *)char v27 = v28;
  *(void *)&v27[16] = v29;
  if (HIDWORD(v29) != 5) {
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Input tensor rank to conv3d must be 5");
  }
  int v6 = HIDWORD(v28);
  int v5 = v29;
  int v7 = DWORD2(v28);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 384))(a1);
  long long v9 = *(_OWORD *)(v8 + 80);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)(v8 + 64);
  long long v25 = v9;
  int v26 = *(_DWORD *)(v8 + 96);
  long long v10 = *(_OWORD *)(v8 + 16);
  long long v21 = *(_OWORD *)v8;
  long long v22 = v10;
  long long v11 = *(_OWORD *)(v8 + 48);
  v23[0] = *(_OWORD *)(v8 + 32);
  v23[1] = v11;
  int v12 = SHIWORD(v24[1]);
  if (SHIWORD(v24[1]) <= 1) {
    int v12 = 1;
  }
  int v13 = SLOWORD(v24[2]);
  if (SLOWORD(v24[2]) <= 1) {
    int v13 = 1;
  }
  int v14 = SHIWORD(v24[2]);
  if (SHIWORD(v24[2]) <= 1) {
    int v14 = 1;
  }
  *(void *)&v27[12] = __ROR8__(Espresso::padding_params_t::get_output_size((Espresso::padding_params_t *)((char *)v23 + 12), v5, v6, v7, SLOWORD(v24[0]), SHIWORD(v24[0]), SLOWORD(v24[1]), ((int)v22 - 1) * v12 + 1, (DWORD1(v22) - 1) * v13 + 1, (DWORD2(v22) - 1) * v14 + 1), 32);
  *(_DWORD *)&v27[4] = DWORD2(v21);
  *(_DWORD *)&v27[8] = v15;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v27, 0, (uint64_t)v17);
  v32[0] = v17[0];
  v32[1] = v17[1];
  uint64_t v33 = v18;
  vImagePixelCount v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v34, __p, (uint64_t)v20, (v20 - (unsigned char *)__p) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v30 = a3;
  char v31 = 0;
  int v16 = (char *)operator new(0x40uLL);
  *a3 = v16;
  a3[1] = v16;
  a3[2] = v16 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v32, &v37, (uint64_t)v16);
  if (v34)
  {
    uint64_t v35 = v34;
    operator delete(v34);
  }
  if (__p)
  {
    long long v20 = __p;
    operator delete(__p);
  }
}

void sub_192A29C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  *(void *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 160));
  long long v21 = *(void **)(v19 - 104);
  if (v21)
  {
    *(void *)(v19 - 96) = v21;
    operator delete(v21);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t Espresso::padding_params_t::get_output_size(Espresso::padding_params_t *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  switch(*(_WORD *)this)
  {
    case 0xFFFF:
    case 0:
      a2 = (a2 - a8 + *((__int16 *)this + 4) + *((__int16 *)this + 5)) / a5 + 1;
      a3 = (a3 - a9 + *((__int16 *)this + 6) + *((__int16 *)this + 7)) / a6 + 1;
      break;
    case 1:
    case 4:
      a2 = (a2 - 1) / a5 + 1;
      a3 = (a3 - 1) / a6 + 1;
      break;
    case 2:
      a2 = (a2 - a8) / a5 + 1;
      a3 = (a3 - a9) / a6 + 1;
      break;
    case 3:
      if (a8 >= 0) {
        int v10 = a8;
      }
      else {
        int v10 = a8 + 1;
      }
      signed int v11 = v10 & 0xFFFFFFFE;
      signed int v12 = (a9 + (a9 < 0)) & 0xFFFFFFFE;
      if (v12 <= v11) {
        signed int v12 = v11;
      }
      signed int v13 = (a10 + (a10 < 0)) & 0xFFFFFFFE;
      if (v13 <= v12) {
        signed int v13 = v12;
      }
      if (a5 <= 1) {
        int v14 = 1;
      }
      else {
        int v14 = a5;
      }
      if (a6 <= 1) {
        int v15 = 1;
      }
      else {
        int v15 = a6;
      }
      if (a5 < 0) {
        int v14 = 1;
      }
      int v16 = ~v13;
      int v17 = (v16 + a2) / v14;
      if (a5 >= 0) {
        a2 = v17 + 1;
      }
      else {
        a2 = ~v17;
      }
      if (a6 < 0) {
        int v18 = 1;
      }
      else {
        int v18 = v15;
      }
      int v19 = (v16 + a3) / v18;
      if (a6 >= 0) {
        a3 = v19 + 1;
      }
      else {
        a3 = ~v19;
      }
      break;
    default:
      return a2 & ~(a2 >> 31) | ((unint64_t)(a3 & ~(a3 >> 31)) << 32);
  }
  return a2 & ~(a2 >> 31) | ((unint64_t)(a3 & ~(a3 >> 31)) << 32);
}

void Espresso::abstract_kernel_with_weights<Espresso::conv3d_params_t>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
}

uint64_t Espresso::generic_conv3d_kernel::input_blob_type(Espresso::generic_conv3d_kernel *this, uint64_t a2)
{
  if (a2 == 1) {
    return 1;
  }
  else {
    return 2 * (a2 == 2);
  }
}

double Espresso::generic_pool3d_kernel::on_resized(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (*(_DWORD *)(a1 + 336))
  {
    uint64_t v3 = **a3;
    double result = *(double *)(v3 + 8);
    *(double *)(a1 + 284) = result;
    *(_DWORD *)(a1 + 292) = *(_DWORD *)(v3 + 16);
  }
  return result;
}

void Espresso::generic_pool3d_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v40 + 1) = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  uint64_t v6 = *((void *)*a2 + 4);
  long long v7 = (*a2)[1];
  long long v26 = **a2;
  long long v27 = v7;
  uint64_t v28 = v6;
  uint64_t v29 = 0;
  long long v30 = 0;
  uint64_t v31 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v29, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  long long v20 = v26;
  long long v21 = v27;
  uint64_t v22 = v28;
  std::vector<int> __p = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v29, (uint64_t)v30, (v30 - (unsigned char *)v29) >> 2);
  int v8 = v26;
  int v9 = DWORD1(v26);
  int v10 = DWORD2(v26);
  signed int v11 = (long long *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 320))(a1);
  *(_OWORD *)((char *)v19 + 12) = *(long long *)((char *)v11 + 44);
  long long v17 = *v11;
  long long v18 = v11[1];
  v19[0] = v11[2];
  if (DWORD2(v19[1]))
  {
    *(void *)&long long v20 = 0x100000001;
    DWORD2(v20) = 1;
    if (WORD2(v19[0]) == 2
      || (signed int v12 = "Invalid configuration : Global 3d pooling with non-zero padding.", !*(void *)((char *)v19 + 14))
      && __PAIR32__(WORD3(v19[1]), 0) == (unsigned __int16)(WORD6(v19[0]) | WORD2(v19[0])))
    {
      long long v34 = v20;
      long long v35 = v21;
      uint64_t v36 = v22;
      long long v37 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v37, __p, (uint64_t)v24, (v24 - (unsigned char *)__p) >> 2);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v32 = a3;
      char v33 = 0;
      signed int v13 = (char *)operator new(0x40uLL);
      *a3 = v13;
      a3[1] = v13;
      a3[2] = v13 + 64;
      uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v34, &v40, (uint64_t)v13);
      goto LABEL_8;
    }
LABEL_16:
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>(v12);
  }
  if (LODWORD(v19[0]))
  {
    signed int v12 = "Unsupported top shape style.";
    goto LABEL_16;
  }
  *(void *)&long long v20 = Espresso::padding_params_t::get_output_size((Espresso::padding_params_t *)((char *)v19 + 4), v8, v9, v10, v18, SDWORD1(v18), SDWORD2(v18), SDWORD1(v17), SDWORD2(v17), SHIDWORD(v17));
  DWORD2(v20) = v15;
  long long v34 = v20;
  long long v35 = v21;
  uint64_t v36 = v22;
  long long v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v37, __p, (uint64_t)v24, (v24 - (unsigned char *)__p) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v32 = a3;
  char v33 = 0;
  int v16 = (char *)operator new(0x40uLL);
  *a3 = v16;
  a3[1] = v16;
  a3[2] = v16 + 64;
  uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v34, &v40, (uint64_t)v16);
LABEL_8:
  a3[1] = v14;
  if (v37)
  {
    uint64_t v38 = v37;
    operator delete(v37);
  }
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }
  if (v29)
  {
    long long v30 = v29;
    operator delete(v29);
  }
}

void sub_192A2A168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  *(void *)(v33 + 8) = v34;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 144));
  long long v37 = *(void **)(v35 - 88);
  if (v37)
  {
    *(void *)(v35 - 80) = v37;
    operator delete(v37);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_hierarchical_inner_product_kernel::kernel_type_str(Espresso::generic_hierarchical_inner_product_kernel *this)
{
  return "hierarchical_inner_product";
}

void Espresso::generic_hierarchical_inner_product_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long **a3@<X8>)
{
  Espresso::inner_product_top_shape(a3, a1 + 280, *a2);
  if (*(_DWORD *)(a1 + 332) == 100002)
  {
    int v5 = (int)*(float *)(a1 + 336);
    uint64_t v6 = *a3;
    long long v7 = a3[1];
    int v8 = *((_DWORD *)*a3 + 5);
    BOOL v9 = v8 > 3 || v8 == -1;
    uint64_t v10 = 8;
    if (!v9) {
      uint64_t v10 = 0;
    }
    *(_DWORD *)((char *)v6 + v10) = v5;
    if (v7 >= a3[2])
    {
      uint64_t v11 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)a3, v6);
    }
    else
    {
      std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v6);
      uint64_t v11 = (uint64_t)(v7 + 4);
    }
    a3[1] = (long long *)v11;
  }
}

void sub_192A2A29C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Espresso::generic_argsort_kernel::backpropable(void *a1@<X8>)
{
}

void Espresso::generic_slice_update_kernel::top_shapes_for_bottom_shapes(long long **a1@<X1>, void *a2@<X8>)
{
  *((void *)&v12 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v4 = *((void *)*a1 + 4);
  long long v5 = (*a1)[1];
  v7[0] = **a1;
  v7[1] = v5;
  uint64_t v8 = v4;
  std::vector<int> __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v3 + 5), *((void *)v3 + 6), (uint64_t)(*((void *)v3 + 6) - *((void *)v3 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
}

void sub_192A2A3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = v18;
  *(void *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_fused_convolution_grad_kernel::should_unpack(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int (****)(void))(*(void *)(*(void *)(a2 + 48) + 16) + 8);
  return (**v2)(v2) != 80000;
}

void Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::generic_fused_convolution_grad_kernel *this, Espresso::unpack_options *a2)
{
  *(void *)&long long v79 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v29, "convolution");
  int v4 = *((_DWORD *)this + 80);
  v66[0] = &unk_1EE37CC18;
  v66[1] = this;
  long long v67 = v66;
  long long v5 = (std::__shared_weak_count *)*((void *)this + 2);
  v53[0] = *((void *)this + 1);
  v53[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v52[0] = 0;
  v52[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v54, v53, 0, v52);
  uint64_t v6 = (unsigned __int8 *)this + 280;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  if (*((unsigned char *)this + 450))
  {
    LODWORD(vstd::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)this + 35) = v4;
    BYTE4(vstd::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)this + 35) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v70, "bias_grad");
    std::string::basic_string[abi:ne180100]<0>(v46, "bias");
    if (!v67) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void **__return_ptr))(*v67 + 48))(__p);
    long long v7 = (long long *)*((void *)a2 + 3);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v8 = *v7;
      v78.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v8;
    }
    vImagePixelCount v43 = 0;
    long long v44 = 0;
    uint64_t v45 = 0;
    long long v40 = (std::string *)&v43;
    LOBYTE(v41) = 0;
    vImagePixelCount v43 = (std::string *)operator new(0x18uLL);
    long long v44 = v43;
    uint64_t v45 = v43 + 1;
    long long v44 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v45, (long long *)&v78, &v79, v43);
    uint64_t v10 = *(void *)a2
        + 24
        * (int)Espresso::fused_weighted_grad_output_idx<Espresso::fused_convolution_grad_params_t>((unsigned __int8 *)this + 280, 2, v9);
    if (*(char *)(v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)v10, *(void *)(v10 + 8));
    }
    else
    {
      long long v11 = *(_OWORD *)v10;
      v76.__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v11;
    }
    long long v40 = 0;
    long long v41 = 0;
    uint64_t v42 = 0;
    v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    v74.__r_.__value_.__s.__data_[8] = 0;
    long long v40 = (std::string *)operator new(0x18uLL);
    long long v41 = v40;
    uint64_t v42 = v40 + 1;
    long long v41 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v42, (long long *)&v76, (long long *)&v77, v40);
    Espresso::sequential_builder::add<Espresso::bias_params>(&v50, &v54, (uint64_t)&v70, (uint64_t)__p, (uint64_t)&v35, (uint64_t)v43, (uint64_t)v44, (uint64_t *)&v40);
    if (v51) {
      nitro::nitro_function::nitro_function(v51);
    }
    v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (v49 < 0) {
      operator delete(__p[0]);
    }
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
  }
  if (*((unsigned char *)this + 449))
  {
    if ((v31 & 0x80u) == 0) {
      size_t v12 = v31;
    }
    else {
      size_t v12 = v30;
    }
    signed int v13 = &v70;
    std::string::basic_string[abi:ne180100]((uint64_t)&v70, v12 + 13);
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      signed int v13 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    if (v12)
    {
      if ((v31 & 0x80u) == 0) {
        uint64_t v14 = &v29;
      }
      else {
        uint64_t v14 = v29;
      }
      memmove(v13, v14, v12);
    }
    strcpy((char *)v13 + v12, "_weights_grad");
    std::string::basic_string[abi:ne180100]<0>(v46, "weights");
    if (!v67) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void **__return_ptr))(*v67 + 48))(__p);
    memset(&v78, 0, sizeof(v78));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v78, *((void *)a2 + 3), *((void *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
    uint64_t v16 = *(void *)a2
        + 24
        * (int)Espresso::fused_weighted_grad_output_idx<Espresso::fused_convolution_grad_params_t>((unsigned __int8 *)this + 280, 1, v15);
    if (*(char *)(v16 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)v16, *(void *)(v16 + 8));
    }
    else
    {
      long long v17 = *(_OWORD *)v16;
      v74.__r_.__value_.__r.__words[2] = *(void *)(v16 + 16);
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v17;
    }
    memset(&v76, 0, sizeof(v76));
    uint64_t v35 = &v76;
    LOBYTE(v36) = 0;
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v76.__r_.__value_.__l.__size_ = v76.__r_.__value_.__r.__words[0];
    v76.__r_.__value_.__r.__words[2] = v76.__r_.__value_.__r.__words[0] + 24;
    v76.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v76.__r_.__value_.__r.__words[2], (long long *)&v74, (long long *)&v75, (std::string *)v76.__r_.__value_.__l.__data_);
    Espresso::sequential_builder::add<Espresso::convolution_uniforms>(&v38, &v54, (uint64_t)&v70, (uint64_t)__p, (uint64_t)this + 280, (uint64_t)v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_, (uint64_t *)&v76);
    if (v39) {
      nitro::nitro_function::nitro_function(v39);
    }
    uint64_t v35 = &v76;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
    v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
    if (v49 < 0) {
      operator delete(__p[0]);
    }
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
  }
  if (*((unsigned char *)this + 448))
  {
    if ((v31 & 0x80u) == 0) {
      size_t v18 = v31;
    }
    else {
      size_t v18 = v30;
    }
    uint64_t v19 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v18 + 5);
    if (v49 < 0) {
      uint64_t v19 = (void **)__p[0];
    }
    if (v18)
    {
      if ((v31 & 0x80u) == 0) {
        long long v20 = &v29;
      }
      else {
        long long v20 = v29;
      }
      memmove(v19, v20, v18);
    }
    strcpy((char *)v19 + v18, "_grad");
    std::string::basic_string[abi:ne180100]<0>(&v74, "data");
    if (!v67) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void **__return_ptr))(*v67 + 48))(v46);
    long long v21 = (long long *)*((void *)a2 + 3);
    if (*((char *)v21 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)v21, *((void *)v21 + 1));
      long long v21 = (long long *)*((void *)a2 + 3);
    }
    else
    {
      long long v22 = *v21;
      v70.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v22;
    }
    if (*((char *)v21 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v71, *((const std::string::value_type **)v21 + 6), *((void *)v21 + 7));
      long long v21 = (long long *)*((void *)a2 + 3);
    }
    else
    {
      std::string v71 = *(std::string *)((unsigned char *)v21 + 2);
    }
    if (*((char *)v21 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *((const std::string::value_type **)v21 + 3), *((void *)v21 + 4));
      long long v21 = (long long *)*((void *)a2 + 3);
    }
    else
    {
      long long v23 = *(long long *)((char *)v21 + 24);
      v72.__r_.__value_.__r.__words[2] = *((void *)v21 + 5);
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v23;
    }
    if (*((char *)v21 + 95) < 0)
    {
      std::string::__init_copy_ctor_external(&v73, *((const std::string::value_type **)v21 + 9), *((void *)v21 + 10));
    }
    else
    {
      long long v24 = *(long long *)((char *)v21 + 72);
      v73.__r_.__value_.__r.__words[2] = *((void *)v21 + 11);
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v24;
    }
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    p_data = 0;
    uint64_t v32 = (std::string *)&v35;
    LOBYTE(v33) = 0;
    uint64_t v35 = (std::string *)operator new(0x60uLL);
    uint64_t v36 = v35;
    p_data = (void **)&v35[4].__r_.__value_.__l.__data_;
    uint64_t v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v70, (long long *)&v74, v35);
    uint64_t v26 = *(void *)a2
        + 24 * (int)Espresso::fused_weighted_grad_output_idx<Espresso::fused_convolution_grad_params_t>(v6, 0, v25);
    if (*(char *)(v26 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v26, *(void *)(v26 + 8));
    }
    else
    {
      long long v27 = *(_OWORD *)v26;
      v68.__r_.__value_.__r.__words[2] = *(void *)(v26 + 16);
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v27;
    }
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    long long v63 = &v32;
    LOBYTE(v64) = 0;
    uint64_t v32 = (std::string *)operator new(0x18uLL);
    uint64_t v33 = v32;
    uint64_t v34 = v32 + 1;
    uint64_t v33 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v34, (long long *)&v68, (long long *)&v69, v32);
    Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&v63, &v54, (uint64_t)__p, (uint64_t)v46, (uint64_t)v6, (uint64_t)v35, (uint64_t)v36, (uint64_t *)&v32);
    if (v64) {
      nitro::nitro_function::nitro_function(v64);
    }
    std::string::size_type v65 = &v32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    for (uint64_t i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v73.__r_.__value_.__r.__words[i + 2]) < 0) {
        operator delete(*(void **)((char *)&v73.__r_.__value_.__l.__data_ + i * 8));
      }
    }
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
    if (v49 < 0) {
      operator delete(__p[0]);
    }
  }
  insert_network_layers(*((Espresso::net **)a2 + 6), v58, *((void *)a2 + 8));
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v62);
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  if (v60) {
    nitro::nitro_function::nitro_function(v60);
  }
  if (v59) {
    nitro::nitro_function::nitro_function(v59);
  }
  if (v57 < 0) {
    operator delete(v56[5]);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v56, v56[1]);
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  std::__function::__value_func<std::string ()(Espresso::unpack_options &,std::string const&)>::~__value_func[abi:ne180100](v66);
  if ((char)v31 < 0) {
    operator delete(v29);
  }
}

void sub_192A2ACEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v72 - 137) < 0) {
    operator delete(*(void **)(v72 - 160));
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&a48);
  std::__function::__value_func<std::string ()(Espresso::unpack_options &,std::string const&)>::~__value_func[abi:ne180100](&a72);
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::fused_weighted_grad_output_idx<Espresso::fused_convolution_grad_params_t>@<X0>(unsigned __int8 *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 2:
      if (!a1[170]) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("has_bias_grad is false");
      }
      return a1[169] + a1[168];
    case 1:
      if (!a1[169]) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("has_weights_grad is false");
      }
      return a1[168];
    case 0:
      if (!a1[168]) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("has_data_grad is false");
      }
      return 0;
  }
  return a3;
}

void *std::__function::__value_func<std::string ()(Espresso::unpack_options &,std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso37generic_fused_convolution_grad_kernel6unpackERNS_14unpack_optionsEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 296))();
}

uint64_t std::__function::__func<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37CC18;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1EE37CC18;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_convolution_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::~__func()
{
}

void Espresso::generic_fused_convolution_grad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v6 = *(_DWORD *)(a1 + 320);
  int v7 = *(unsigned __int8 *)(a1 + 451);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (*(unsigned char *)(a1 + 448))
  {
    unint64_t v8 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, (long long *)(*(void *)a2 + 64));
    a3[1] = v8;
  }
  else
  {
    unint64_t v8 = 0;
  }
  if (*(unsigned char *)(a1 + 449))
  {
    uint64_t v9 = (long long *)(*(void *)a2 + 128);
    if (v8 >= a3[2])
    {
      unint64_t v8 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v9);
    }
    else
    {
      std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v9);
      v8 += 64;
    }
    a3[1] = v8;
  }
  if (*(unsigned char *)(a1 + 450))
  {
    if (v7)
    {
      int v34 = v6;
      uint64_t v36 = 0;
      uint64_t v35 = 0;
      int v37 = 1;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v34, 0, (uint64_t)&v38);
      unint64_t v10 = a3[2];
      unint64_t v11 = a3[1];
      if (v11 >= v10)
      {
        uint64_t v16 = (uint64_t)(v11 - *a3) >> 6;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 58) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v10 - *a3;
        if (v18 >> 5 > v17) {
          unint64_t v17 = v18 >> 5;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        uint64_t v46 = a3 + 2;
        long long v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v19);
        long long v21 = &v20[64 * v16];
        *(void *)&long long v43 = v20;
        *((void *)&v43 + 1) = v21;
        uint64_t v45 = &v20[64 * v22];
        long long v23 = v39;
        long long v24 = v40;
        *(_OWORD *)long long v21 = v38;
        *((_OWORD *)v21 + 1) = v23;
        *((void *)v21 + 4) = v24;
        *((void *)v21 + 5) = 0;
        *((void *)v21 + 6) = 0;
        *((void *)v21 + 7) = 0;
        *(_OWORD *)(v21 + 40) = *(_OWORD *)__p;
        *((void *)v21 + 7) = v42;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v42 = 0;
        long long v44 = v21 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v43);
        uint64_t v25 = a3[1];
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v43);
        uint64_t v26 = __p[0];
        a3[1] = v25;
        if (v26)
        {
          __p[1] = v26;
          operator delete(v26);
        }
      }
      else
      {
        long long v12 = v39;
        signed int v13 = v40;
        *(_OWORD *)unint64_t v11 = v38;
        *(_OWORD *)(v11 + 16) = v12;
        *(void *)(v11 + 32) = v13;
        *(void *)(v11 + 40) = 0;
        *(void *)(v11 + 48) = 0;
        *(void *)(v11 + 56) = 0;
        *(_OWORD *)(v11 + 40) = *(_OWORD *)__p;
        *(void *)(v11 + 56) = v42;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v42 = 0;
        a3[1] = v11 + 64;
      }
    }
    else
    {
      long long v43 = 0uLL;
      unint64_t v14 = a3[2];
      if (v8 >= v14)
      {
        uint64_t v27 = (uint64_t)(v8 - *a3) >> 6;
        if ((unint64_t)(v27 + 1) >> 58) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = v14 - *a3;
        uint64_t v29 = v28 >> 5;
        if (v28 >> 5 <= (unint64_t)(v27 + 1)) {
          uint64_t v29 = v27 + 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v30 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        long long v40 = a3 + 2;
        unsigned __int8 v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v30);
        uint64_t v32 = &v31[64 * v27];
        *(void *)&long long v38 = v31;
        *((void *)&v38 + 1) = v32;
        *((void *)&v39 + 1) = &v31[64 * v33];
        *(void *)uint64_t v32 = 0x100000001;
        *((_DWORD *)v32 + 2) = v6;
        *(void *)(v32 + 12) = 0x100000001;
        *((_DWORD *)v32 + 5) = -1;
        *(_OWORD *)(v32 + 24) = 0u;
        *(_OWORD *)(v32 + 40) = 0u;
        *((void *)v32 + 7) = 0;
        *(void *)&long long v39 = v32 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v38);
        unint64_t v15 = a3[1];
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v38);
      }
      else
      {
        *(void *)unint64_t v8 = 0x100000001;
        *(_DWORD *)(v8 + 8) = v6;
        *(void *)(v8 + 12) = 0x100000001;
        *(_DWORD *)(v8 + 20) = -1;
        *(_OWORD *)(v8 + 24) = v43;
        unint64_t v15 = v8 + 64;
        *(void *)(v8 + 48) = 0;
        *(void *)(v8 + 56) = 0;
        *(void *)(v8 + 40) = 0;
        a3[1] = v8 + 64;
      }
      a3[1] = v15;
    }
  }
}

void sub_192A2B450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
}

BOOL Espresso::generic_fused_inner_product_grad_kernel::should_unpack(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int (****)(void))(*(void *)(*(void *)(a2 + 48) + 16) + 8);
  return (**v2)(v2) != 80000;
}

void Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::generic_fused_inner_product_grad_kernel *this, Espresso::unpack_options *a2)
{
  *(void *)&long long v80 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v30, "inner_product");
  int v4 = (unsigned __int8 *)this + 280;
  int v5 = *((_DWORD *)this + 70);
  char v6 = *((unsigned char *)this + 320);
  v67[0] = &unk_1EE37CC70;
  v67[1] = this;
  std::string v68 = v67;
  int v7 = (std::__shared_weak_count *)*((void *)this + 2);
  v54[0] = *((void *)this + 1);
  v54[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v53[0] = 0;
  v53[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v55, v54, 0, v53);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (*((unsigned char *)this + 414))
  {
    LODWORD(v36) = v5;
    BYTE4(v36) = v6;
    std::string::basic_string[abi:ne180100]<0>(&v71, "bias_grad");
    std::string::basic_string[abi:ne180100]<0>(v47, "bias");
    if (!v68) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void **__return_ptr))(*v68 + 48))(__p);
    unint64_t v8 = (long long *)*((void *)a2 + 3);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v9 = *v8;
      v79.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v9;
    }
    long long v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    long long v41 = (std::string *)&v44;
    LOBYTE(v42) = 0;
    long long v44 = (std::string *)operator new(0x18uLL);
    uint64_t v45 = v44;
    uint64_t v46 = v44 + 1;
    uint64_t v45 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v46, (long long *)&v79, &v80, v44);
    uint64_t v11 = *(void *)a2
        + 24
        * (int)Espresso::fused_weighted_grad_output_idx<Espresso::fused_inner_product_grad_params_t>((unsigned __int8 *)this + 280, 2, v10);
    if (*(char *)(v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
    }
    else
    {
      long long v12 = *(_OWORD *)v11;
      v77.__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v12;
    }
    long long v41 = 0;
    uint64_t v42 = 0;
    long long v43 = 0;
    v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
    v75.__r_.__value_.__s.__data_[8] = 0;
    long long v41 = (std::string *)operator new(0x18uLL);
    uint64_t v42 = v41;
    long long v43 = v41 + 1;
    uint64_t v42 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v43, (long long *)&v77, (long long *)&v78, v41);
    Espresso::sequential_builder::add<Espresso::bias_params>(&v51, &v55, (uint64_t)&v71, (uint64_t)__p, (uint64_t)&v36, (uint64_t)v44, (uint64_t)v45, (uint64_t *)&v41);
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if (v50 < 0) {
      operator delete(__p[0]);
    }
    if (v48 < 0) {
      operator delete(v47[0]);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
  }
  if (*((unsigned char *)this + 413))
  {
    if ((v32 & 0x80u) == 0) {
      size_t v13 = v32;
    }
    else {
      size_t v13 = v31;
    }
    unint64_t v14 = &v71;
    std::string::basic_string[abi:ne180100]((uint64_t)&v71, v13 + 13);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v14 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if (v13)
    {
      if ((v32 & 0x80u) == 0) {
        unint64_t v15 = &v30;
      }
      else {
        unint64_t v15 = v30;
      }
      memmove(v14, v15, v13);
    }
    strcpy((char *)v14 + v13, "_weights_grad");
    std::string::basic_string[abi:ne180100]<0>(v47, "weights");
    if (!v68) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void **__return_ptr))(*v68 + 48))(__p);
    memset(&v79, 0, sizeof(v79));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v79, *((void *)a2 + 3), *((void *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
    uint64_t v17 = *(void *)a2
        + 24
        * (int)Espresso::fused_weighted_grad_output_idx<Espresso::fused_inner_product_grad_params_t>((unsigned __int8 *)this + 280, 1, v16);
    if (*(char *)(v17 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)v17, *(void *)(v17 + 8));
    }
    else
    {
      long long v18 = *(_OWORD *)v17;
      v75.__r_.__value_.__r.__words[2] = *(void *)(v17 + 16);
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v18;
    }
    memset(&v77, 0, sizeof(v77));
    uint64_t v36 = &v77;
    LOBYTE(v37) = 0;
    v77.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v77.__r_.__value_.__l.__size_ = v77.__r_.__value_.__r.__words[0];
    v77.__r_.__value_.__r.__words[2] = v77.__r_.__value_.__r.__words[0] + 24;
    v77.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v77.__r_.__value_.__r.__words[2], (long long *)&v75, (long long *)&v76, (std::string *)v77.__r_.__value_.__l.__data_);
    Espresso::sequential_builder::add<Espresso::inner_product_uniforms>(&v39, &v55, (uint64_t)&v71, (uint64_t)__p, (uint64_t)this + 280, (uint64_t)v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_, (uint64_t *)&v77);
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
    uint64_t v36 = &v77;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
    if (v50 < 0) {
      operator delete(__p[0]);
    }
    if (v48 < 0) {
      operator delete(v47[0]);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
  }
  if (*((unsigned char *)this + 412))
  {
    if ((v32 & 0x80u) == 0) {
      size_t v19 = v32;
    }
    else {
      size_t v19 = v31;
    }
    long long v20 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v19 + 5);
    if (v50 < 0) {
      long long v20 = (void **)__p[0];
    }
    if (v19)
    {
      if ((v32 & 0x80u) == 0) {
        long long v21 = &v30;
      }
      else {
        long long v21 = v30;
      }
      memmove(v20, v21, v19);
    }
    strcpy((char *)v20 + v19, "_grad");
    std::string::basic_string[abi:ne180100]<0>(&v75, "data");
    if (!v68) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void **__return_ptr))(*v68 + 48))(v47);
    uint64_t v22 = (long long *)*((void *)a2 + 3);
    if (*((char *)v22 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)v22, *((void *)v22 + 1));
      uint64_t v22 = (long long *)*((void *)a2 + 3);
    }
    else
    {
      long long v23 = *v22;
      v71.__r_.__value_.__r.__words[2] = *((void *)v22 + 2);
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v23;
    }
    if (*((char *)v22 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *((const std::string::value_type **)v22 + 6), *((void *)v22 + 7));
      uint64_t v22 = (long long *)*((void *)a2 + 3);
    }
    else
    {
      std::string v72 = *(std::string *)((unsigned char *)v22 + 2);
    }
    if (*((char *)v22 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v73, *((const std::string::value_type **)v22 + 3), *((void *)v22 + 4));
      uint64_t v22 = (long long *)*((void *)a2 + 3);
    }
    else
    {
      long long v24 = *(long long *)((char *)v22 + 24);
      v73.__r_.__value_.__r.__words[2] = *((void *)v22 + 5);
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v24;
    }
    if (*((char *)v22 + 95) < 0)
    {
      std::string::__init_copy_ctor_external(&v74, *((const std::string::value_type **)v22 + 9), *((void *)v22 + 10));
    }
    else
    {
      long long v25 = *(long long *)((char *)v22 + 72);
      v74.__r_.__value_.__r.__words[2] = *((void *)v22 + 11);
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v25;
    }
    uint64_t v36 = 0;
    int v37 = 0;
    p_data = 0;
    uint64_t v33 = (std::string *)&v36;
    LOBYTE(v34) = 0;
    uint64_t v36 = (std::string *)operator new(0x60uLL);
    int v37 = v36;
    p_data = (void **)&v36[4].__r_.__value_.__l.__data_;
    int v37 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v71, (long long *)&v75, v36);
    uint64_t v27 = *(void *)a2
        + 24 * (int)Espresso::fused_weighted_grad_output_idx<Espresso::fused_inner_product_grad_params_t>(v4, 0, v26);
    if (*(char *)(v27 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)v27, *(void *)(v27 + 8));
    }
    else
    {
      long long v28 = *(_OWORD *)v27;
      v69.__r_.__value_.__r.__words[2] = *(void *)(v27 + 16);
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v28;
    }
    uint64_t v33 = 0;
    int v34 = 0;
    uint64_t v35 = 0;
    int v64 = &v33;
    LOBYTE(v65) = 0;
    uint64_t v33 = (std::string *)operator new(0x18uLL);
    int v34 = v33;
    uint64_t v35 = v33 + 1;
    int v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v35, (long long *)&v69, (long long *)&v70, v33);
    Espresso::sequential_builder::add<Espresso::inner_product_uniforms>((uint64_t *)&v64, &v55, (uint64_t)__p, (uint64_t)v47, (uint64_t)v4, (uint64_t)v36, (uint64_t)v37, (uint64_t *)&v33);
    if (v65) {
      nitro::nitro_function::nitro_function(v65);
    }
    long long v66 = &v33;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
    for (uint64_t i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v74.__r_.__value_.__r.__words[i + 2]) < 0) {
        operator delete(*(void **)((char *)&v74.__r_.__value_.__l.__data_ + i * 8));
      }
    }
    if (v48 < 0) {
      operator delete(v47[0]);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (v50 < 0) {
      operator delete(__p[0]);
    }
  }
  insert_network_layers(*((Espresso::net **)a2 + 6), v59, *((void *)a2 + 8));
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v63);
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  if (v60) {
    nitro::nitro_function::nitro_function(v60);
  }
  if (v58 < 0) {
    operator delete(v57[5]);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v57, v57[1]);
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  std::__function::__value_func<std::string ()(Espresso::unpack_options &,std::string const&)>::~__value_func[abi:ne180100](v67);
  if ((char)v32 < 0) {
    operator delete(v30);
  }
}

void sub_192A2BD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v72 - 137) < 0) {
    operator delete(*(void **)(v72 - 160));
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&a48);
  std::__function::__value_func<std::string ()(Espresso::unpack_options &,std::string const&)>::~__value_func[abi:ne180100](&a72);
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::fused_weighted_grad_output_idx<Espresso::fused_inner_product_grad_params_t>@<X0>(unsigned __int8 *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 2:
      if (!a1[134]) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("has_bias_grad is false");
      }
      return a1[133] + a1[132];
    case 1:
      if (!a1[133]) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("has_weights_grad is false");
      }
      return a1[132];
    case 0:
      if (!a1[132]) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("has_data_grad is false");
      }
      return 0;
  }
  return a3;
}

void *std::__function::__func<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso39generic_fused_inner_product_grad_kernel6unpackERNS_14unpack_optionsEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 296))();
}

uint64_t std::__function::__func<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37CC70;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1EE37CC70;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0,std::allocator<Espresso::generic_fused_inner_product_grad_kernel::unpack(Espresso::unpack_options &)::$_0>,std::string ()(Espresso::unpack_options &,std::string const&)>::~__func()
{
}

void Espresso::generic_fused_inner_product_grad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v6 = *(_DWORD *)(a1 + 280);
  int v7 = *(unsigned __int8 *)(a1 + 320);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (*(unsigned char *)(a1 + 412))
  {
    unint64_t v8 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, (long long *)(*(void *)a2 + 64));
    a3[1] = v8;
  }
  else
  {
    unint64_t v8 = 0;
  }
  if (*(unsigned char *)(a1 + 413))
  {
    long long v9 = (long long *)(*(void *)a2 + 128);
    if (v8 >= a3[2])
    {
      unint64_t v8 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v9);
    }
    else
    {
      std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v9);
      v8 += 64;
    }
    a3[1] = v8;
  }
  if (*(unsigned char *)(a1 + 414))
  {
    if (v7)
    {
      int v34 = v6;
      uint64_t v36 = 0;
      uint64_t v35 = 0;
      int v37 = 1;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v34, 0, (uint64_t)&v38);
      unint64_t v10 = a3[2];
      unint64_t v11 = a3[1];
      if (v11 >= v10)
      {
        uint64_t v16 = (uint64_t)(v11 - *a3) >> 6;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 58) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v10 - *a3;
        if (v18 >> 5 > v17) {
          unint64_t v17 = v18 >> 5;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        uint64_t v46 = a3 + 2;
        long long v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v19);
        long long v21 = &v20[64 * v16];
        *(void *)&long long v43 = v20;
        *((void *)&v43 + 1) = v21;
        uint64_t v45 = &v20[64 * v22];
        long long v23 = v39;
        long long v24 = v40;
        *(_OWORD *)long long v21 = v38;
        *((_OWORD *)v21 + 1) = v23;
        *((void *)v21 + 4) = v24;
        *((void *)v21 + 5) = 0;
        *((void *)v21 + 6) = 0;
        *((void *)v21 + 7) = 0;
        *(_OWORD *)(v21 + 40) = *(_OWORD *)__p;
        *((void *)v21 + 7) = v42;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v42 = 0;
        long long v44 = v21 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v43);
        uint64_t v25 = a3[1];
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v43);
        uint64_t v26 = __p[0];
        a3[1] = v25;
        if (v26)
        {
          __p[1] = v26;
          operator delete(v26);
        }
      }
      else
      {
        long long v12 = v39;
        size_t v13 = v40;
        *(_OWORD *)unint64_t v11 = v38;
        *(_OWORD *)(v11 + 16) = v12;
        *(void *)(v11 + 32) = v13;
        *(void *)(v11 + 40) = 0;
        *(void *)(v11 + 48) = 0;
        *(void *)(v11 + 56) = 0;
        *(_OWORD *)(v11 + 40) = *(_OWORD *)__p;
        *(void *)(v11 + 56) = v42;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v42 = 0;
        a3[1] = v11 + 64;
      }
    }
    else
    {
      long long v43 = 0uLL;
      unint64_t v14 = a3[2];
      if (v8 >= v14)
      {
        uint64_t v27 = (uint64_t)(v8 - *a3) >> 6;
        if ((unint64_t)(v27 + 1) >> 58) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = v14 - *a3;
        uint64_t v29 = v28 >> 5;
        if (v28 >> 5 <= (unint64_t)(v27 + 1)) {
          uint64_t v29 = v27 + 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v30 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        long long v40 = a3 + 2;
        size_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v30);
        unsigned __int8 v32 = &v31[64 * v27];
        *(void *)&long long v38 = v31;
        *((void *)&v38 + 1) = v32;
        *((void *)&v39 + 1) = &v31[64 * v33];
        *(void *)unsigned __int8 v32 = 0x100000001;
        *((_DWORD *)v32 + 2) = v6;
        *(void *)(v32 + 12) = 0x100000001;
        *((_DWORD *)v32 + 5) = -1;
        *(_OWORD *)(v32 + 24) = 0u;
        *(_OWORD *)(v32 + 40) = 0u;
        *((void *)v32 + 7) = 0;
        *(void *)&long long v39 = v32 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v38);
        unint64_t v15 = a3[1];
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v38);
      }
      else
      {
        *(void *)unint64_t v8 = 0x100000001;
        *(_DWORD *)(v8 + 8) = v6;
        *(void *)(v8 + 12) = 0x100000001;
        *(_DWORD *)(v8 + 20) = -1;
        *(_OWORD *)(v8 + 24) = v43;
        unint64_t v15 = v8 + 64;
        *(void *)(v8 + 48) = 0;
        *(void *)(v8 + 56) = 0;
        *(void *)(v8 + 40) = 0;
        a3[1] = v8 + 64;
      }
      a3[1] = v15;
    }
  }
}

void sub_192A2C470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
}

void Espresso::generic_deconv3d_kernel::create_weights_blob(Espresso::generic_deconv3d_kernel *this@<X0>, void *a2@<X8>)
{
  int v2 = *((_DWORD *)this + 96);
  if (v2 <= 1) {
    int v2 = 1;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int &,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 80), *((_DWORD *)this + 81), *((_DWORD *)this + 82), *((_DWORD *)this + 78) / v2, *((_DWORD *)this + 79));
}

double Espresso::generic_deconv3d_kernel::weights_blob_shape@<D0>(Espresso::generic_deconv3d_kernel *this@<X0>, uint64_t a2@<X8>)
{
  int v2 = *((_DWORD *)this + 82);
  int v3 = *((_DWORD *)this + 78);
  int v4 = *((_DWORD *)this + 96);
  if (v4 <= 1) {
    int v4 = 1;
  }
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  double result = *((double *)this + 40);
  int v6 = *((_DWORD *)this + 79);
  *(void *)(a2 + 56) = 0;
  *(double *)a2 = result;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = v3 / v4;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = -1;
  return result;
}

const char *Espresso::generic_deconv3d_kernel::kernel_type_str(Espresso::generic_deconv3d_kernel *this)
{
  return "deconv3d";
}

BOOL Espresso::generic_deconv3d_kernel::supports_weight_key(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = (char)a2[23];
  if ((v2 & 0x80000000) == 0)
  {
    if (v2 == 1)
    {
      int v3 = *a2;
      return v3 == 87 || v3 == 98;
    }
    return 0;
  }
  if (*((void *)a2 + 1) != 1) {
    return 0;
  }
  int v3 = **(unsigned __int8 **)a2;
  return v3 == 87 || v3 == 98;
}

void Espresso::generic_deconv3d_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, const std::string::value_type **a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  if (!a6)
  {
    uint64_t v10 = 0;
    goto LABEL_6;
  }
  uint64_t v10 = *a6;
  if (!*a6)
  {
LABEL_6:
    unint64_t v11 = 0;
    goto LABEL_7;
  }
  unint64_t v11 = (std::__shared_weak_count *)a6[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 448))(&v45, a1);
  int v12 = v45;
  int v13 = HIDWORD(v45);
  int v14 = v46;
  int v15 = v47;
  int v16 = v48;
  if (*((char *)a3 + 23) < 0)
  {
    long long v20 = (unsigned __int8 *)a3[1];
    if (v20 != (unsigned __int8 *)1)
    {
      if (v20 != (unsigned __int8 *)5) {
        goto LABEL_72;
      }
      if (*(_DWORD *)*a3 != 828792663 || (*a3)[4] != 54)
      {
        unint64_t v19 = *a3;
LABEL_23:
        if (*(_DWORD *)v19 == 828792674 && v19[4] == 54)
        {
          v32[0] = v10;
          v32[1] = (uint64_t)v11;
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v40, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v32, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
          if (v11) {
            nitro::nitro_function::nitro_function(v11);
          }
          uint64_t v23 = *(void *)(a1 + 16);
          uint64_t v30 = *(void *)(a1 + 8);
          uint64_t v31 = v23;
          if (v23) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
          }
          if (*((char *)a3 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v29, *a3, (std::string::size_type)a3[1]);
          }
          else {
            std::string v29 = *(std::string *)a3;
          }
          if (v41) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::set_parameter_blob<unsigned short,1>();
        }
        goto LABEL_72;
      }
LABEL_49:
      v39[0] = v10;
      v39[1] = (uint64_t)v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<unsigned short,5>(&v40, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v39, v12, v13, v14, v15, v16, (a4 & 0x3F) == 0);
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      uint64_t v28 = *(void *)(a1 + 16);
      uint64_t v37 = *(void *)(a1 + 8);
      uint64_t v38 = v28;
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
      if (*((char *)a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v36, *a3, (std::string::size_type)a3[1]);
      }
      else {
        std::string v36 = *(std::string *)a3;
      }
      v35[6] = v40;
      v35[7] = v41;
      if (v41) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::set_parameter_blob<unsigned short,5>();
    }
    int v25 = *(unsigned __int8 *)*a3;
    if (v25 == 87)
    {
LABEL_57:
      v44[0] = v10;
      v44[1] = (uint64_t)v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob5d<float,5>(&src, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v44, v12, v13, v14, v15, v16, (a4 & 0x3F) == 0);
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      vImagePixelCount height = (std::__shared_weak_count *)src.height;
      data = src.data;
      vImagePixelCount v43 = src.height;
      if (src.height) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(src.height + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void **))(*(void *)a1 + 400))(a1, &data);
      uint64_t v27 = (std::__shared_weak_count *)v43;
      if (!v43) {
        goto LABEL_70;
      }
      goto LABEL_69;
    }
    if (v25 != 98) {
      goto LABEL_72;
    }
  }
  else
  {
    int v17 = *((unsigned __int8 *)a3 + 23);
    if (v17 != 1)
    {
      if (v17 != 5) {
        goto LABEL_72;
      }
      BOOL v18 = *(_DWORD *)a3 == 828792663 && *((unsigned char *)a3 + 4) == 54;
      unint64_t v19 = (const std::string::value_type *)a3;
      if (!v18) {
        goto LABEL_23;
      }
      goto LABEL_49;
    }
    int v24 = *(unsigned __int8 *)a3;
    if (v24 != 98)
    {
      if (v24 != 87) {
        goto LABEL_72;
      }
      goto LABEL_57;
    }
  }
  v35[0] = v10;
  v35[1] = (uint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&src, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v35, *(_DWORD *)(a1 + 312), (a4 & 0x3F) == 0);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  vImagePixelCount height = (std::__shared_weak_count *)src.height;
  uint64_t v33 = src.data;
  vImagePixelCount v34 = src.height;
  if (src.height) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(src.height + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 392))(a1, &v33);
  uint64_t v27 = (std::__shared_weak_count *)v34;
  if (!v34) {
    goto LABEL_70;
  }
LABEL_69:
  nitro::nitro_function::nitro_function(v27);
LABEL_70:
  if (height) {
    nitro::nitro_function::nitro_function(height);
  }
LABEL_72:
  if (v49)
  {
    char v50 = v49;
    operator delete(v49);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_192A2CB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  int v47 = *(std::__shared_weak_count **)(v45 - 232);
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  int v48 = *(void **)(v45 - 152);
  if (v48)
  {
    *(void *)(v45 - 144) = v48;
    operator delete(v48);
  }
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_deconv3d_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v38 + 1) = *MEMORY[0x1E4F143B8];
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v29, *a2, 0);
  long long v27 = v29;
  uint64_t v28 = v30;
  if (HIDWORD(v30) != 5) {
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Input tensor rank to conv3d must be 5");
  }
  int v5 = v30;
  int32x2_t v6 = *(int32x2_t *)((char *)&v29 + 8);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 384))(a1);
  int v8 = *(_DWORD *)(v7 + 8);
  int v9 = *(_DWORD *)(v7 + 84);
  int32x2_t v10 = *(int32x2_t *)(v7 + 88);
  if (v9 < 1 || (int)*(void *)(v7 + 88) < 1 || (int)HIDWORD(*(void *)(v7 + 88)) <= 0)
  {
    int v13 = *(__int16 *)(v7 + 70);
    if (v13 <= 1) {
      int v13 = 1;
    }
    int32x2_t v14 = vrev64_s32(v6);
    uint16x4_t v15 = *(uint16x4_t *)(v7 + 58);
    int v16 = (*(_DWORD *)(v7 + 16) - 1) * v13;
    v17.i32[0] = *(__int16 *)(v7 + 72);
    v17.i32[1] = *(__int16 *)(v7 + 74);
    int32x2_t v18 = vmul_s32(vadd_s32(*(int32x2_t *)(v7 + 20), (int32x2_t)-1), vmax_s32(v17, (int32x2_t)0x100000001));
    v19.i32[0] = *(__int16 *)(v7 + 66);
    v19.i32[1] = *(__int16 *)(v7 + 68);
    switch(*(_WORD *)(v7 + 44))
    {
      case 0xFFFF:
      case 0:
        v20.i32[0] = vmovl_u16(*(uint16x4_t *)(v7 + 56)).u32[0];
        v21.i32[0] = vmovl_u16(v15).u32[0];
        int v9 = (v5 - 1) * v15.i16[3] - (*(__int16 *)(v7 + 52) + *(__int16 *)(v7 + 54)) + v16 + 1;
        v20.i32[1] = v15.u16[1];
        v21.i32[1] = v15.u16[2];
        int32x2_t v10 = vsub_s32(v18, (int32x2_t)vmvn_s8((int8x8_t)vsub_s32(vmul_s32(vadd_s32(v14, (int32x2_t)-1), v19), vsra_n_s32(vshr_n_s32(vshl_n_s32(v20, 0x10uLL), 0x10uLL), vshl_n_s32(v21, 0x10uLL), 0x10uLL))));
        break;
      case 1:
      case 4:
        int v9 = v5 * v15.i16[3];
        int32x2_t v10 = vmul_s32(v14, v19);
        break;
      case 2:
      case 3:
        int v9 = v16 + v5 * v15.i16[3];
        int32x2_t v10 = vmla_s32(v18, v14, v19);
        break;
      default:
        int v9 = 0;
        int32x2_t v10 = 0;
        break;
    }
  }
  LODWORD(v28) = v9;
  *((int32x2_t *)&v27 + 1) = vrev64_s32(v10);
  DWORD1(v27) = v8;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v27, 0, (uint64_t)v23);
  v33[0] = v23[0];
  v33[1] = v23[1];
  uint64_t v34 = v24;
  std::vector<int> __p = 0;
  std::string v36 = 0;
  uint64_t v37 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v25, (uint64_t)v26, (v26 - (unsigned char *)v25) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v31 = a3;
  char v32 = 0;
  uint64_t v22 = (char *)operator new(0x40uLL);
  *a3 = v22;
  a3[1] = v22;
  a3[2] = v22 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v33, &v38, (uint64_t)v22);
  if (__p)
  {
    std::string v36 = __p;
    operator delete(__p);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
}

void sub_192A2CF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v33 = v32;
  *(void *)(v31 + 8) = v33;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a23);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::general_slice_update_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_general_slice_update_kernel::kernel_type_str(Espresso::generic_general_slice_update_kernel *this)
{
  return "general_slice_update";
}

void Espresso::generic_general_slice_update_kernel::top_shapes_for_bottom_shapes(long long **a1@<X1>, void *a2@<X8>)
{
  *((void *)&v12 + 1) = *MEMORY[0x1E4F143B8];
  int v3 = *a1;
  uint64_t v4 = *((void *)*a1 + 4);
  long long v5 = (*a1)[1];
  v7[0] = **a1;
  v7[1] = v5;
  uint64_t v8 = v4;
  std::vector<int> __p = 0;
  int32x2_t v10 = 0;
  uint64_t v11 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v3 + 5), *((void *)v3 + 6), (uint64_t)(*((void *)v3 + 6) - *((void *)v3 + 5)) >> 2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int32x2_t v6 = (char *)operator new(0x40uLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), v7, &v12, (uint64_t)v6);
  if (__p)
  {
    int32x2_t v10 = __p;
    operator delete(__p);
  }
}

void sub_192A2D0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = v18;
  *(void *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::resize_nearest_neighbor_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_resize_nearest_neighbor_kernel::kernel_type_str(Espresso::generic_resize_nearest_neighbor_kernel *this)
{
  return "resize_nearest_neighbor";
}

BOOL Espresso::generic_resize_nearest_neighbor_kernel::has_dynamic_top_shape(Espresso::generic_resize_nearest_neighbor_kernel *this)
{
  if (*((_DWORD *)this + 70) != 1) {
    return 0;
  }
  if (*((_DWORD *)this + 72)) {
    return *((_DWORD *)this + 71) == 0;
  }
  return 1;
}

void Espresso::generic_resize_nearest_neighbor_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v33 + 1) = *MEMORY[0x1E4F143B8];
  long long v5 = *a2;
  uint64_t v6 = *((void *)*a2 + 4);
  long long v7 = (*a2)[1];
  long long v19 = **a2;
  long long v20 = v7;
  uint64_t v21 = v6;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v22, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  *((void *)&v13 + 1) = *((void *)&v19 + 1);
  long long v14 = v20;
  uint64_t v15 = v21;
  std::vector<int> __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v22, (uint64_t)v23, (v23 - (unsigned char *)v22) >> 2);
  int v8 = *(_DWORD *)(a1 + 280);
  if (v8)
  {
    if (v8 == 1)
    {
      *(int32x2_t *)&long long v13 = vmax_s32(*(int32x2_t *)(a1 + 284), (int32x2_t)0x100000001);
      long long v27 = v13;
      long long v28 = v14;
      uint64_t v29 = v15;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v30, __p, (uint64_t)v17, (v17 - (unsigned char *)__p) >> 2);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      int v25 = a3;
      char v26 = 0;
      int v9 = (char *)operator new(0x40uLL);
      *a3 = v9;
      a3[1] = v9;
      a3[2] = v9 + 64;
      uint64_t v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v27, &v33, (uint64_t)v9);
      goto LABEL_8;
    }
    long long v12 = "resize_nearest_neighbor_kernel: mode not valid";
LABEL_19:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v12);
  }
  if (DWORD1(v20) != 4)
  {
    long long v12 = "resize_nearest_neighbor_kernel: input must be rank 4.";
    goto LABEL_19;
  }
  if (*(int *)(a1 + 284) < 1)
  {
    long long v12 = "resize_nearest_neighbor_kernel: output width must be at least 1.";
    goto LABEL_19;
  }
  if (*(int *)(a1 + 288) < 1)
  {
    long long v12 = "resize_nearest_neighbor_kernel: output height must be at least 1.";
    goto LABEL_19;
  }
  *(void *)&long long v13 = *(void *)(a1 + 284);
  long long v27 = v13;
  long long v28 = v14;
  uint64_t v29 = v15;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v30, __p, (uint64_t)v17, (v17 - (unsigned char *)__p) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v25 = a3;
  char v26 = 0;
  uint64_t v11 = (char *)operator new(0x40uLL);
  *a3 = v11;
  a3[1] = v11;
  a3[2] = v11 + 64;
  uint64_t v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v27, &v33, (uint64_t)v11);
LABEL_8:
  a3[1] = v10;
  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
}

void sub_192A2D3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void **a25)
{
  *(void *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a25);
  uint64_t v29 = *(void **)(v27 - 72);
  if (v29)
  {
    *(void *)(v27 - 64) = v29;
    operator delete(v29);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_einsum_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, void *a3@<X8>)
{
  *(void *)&long long v162 = *MEMORY[0x1E4F143B8];
  long long v5 = *a2;
  if (a2[1] - v5 != 128) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_einsum_kernel: must have 2 inputs");
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__str, v5, 0);
  Espresso::layer_nd_shape::shape_vector(&v157, (uint64_t)&__str);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__str, (const Espresso::layer_shape *)((char *)*a2 + 64), 0);
  Espresso::layer_nd_shape::shape_vector(&v156, (uint64_t)&__str);
  std::vector<int>::size_type v8 = v157.__end_ - v157.__begin_;
  if (v8 != v156.__end_ - v156.__begin_)
  {
    uint64_t v147 = "generic_einsum_kernel: inputs must be of the same rank";
LABEL_250:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v147);
  }
  if (*(void *)(a1 + 312) == *(void *)(a1 + 304)
    || *(void *)(a1 + 336) == *(void *)(a1 + 328)
    || *(void *)(a1 + 360) == *(void *)(a1 + 352))
  {
    if (*(char *)(a1 + 303) < 0)
    {
      uint64_t v10 = *(char **)(a1 + 280);
      uint64_t v9 = *(void *)(a1 + 288);
    }
    else
    {
      uint64_t v9 = *(unsigned __int8 *)(a1 + 303);
      uint64_t v10 = (char *)(a1 + 280);
    }
    if (v9 < 2) {
      goto LABEL_14;
    }
    uint64_t v11 = &v10[v9];
    long long v12 = v10;
    while (1)
    {
      long long v13 = (char *)memchr(v12, 45, v9 - 1);
      if (!v13) {
        goto LABEL_14;
      }
      if (*(_WORD *)v13 == 15917) {
        break;
      }
      long long v12 = v13 + 1;
      uint64_t v9 = v11 - (unsigned char *)v12;
      if (v11 - (unsigned char *)v12 < 2) {
        goto LABEL_14;
      }
    }
    if (v13 == v11 || (std::string::size_type v14 = v13 - v10, v14 == -1)) {
LABEL_14:
    }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_einsum_kernel: invalid equation");
    std::string::basic_string(&__str, (const std::string *)(a1 + 280), 0, v14, (std::allocator<char> *)&v155);
    std::string::basic_string(&v155, (const std::string *)(a1 + 280), v14 + 2, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v154);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = __str.__r_.__value_.__l.__size_;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (size < 1) {
      goto LABEL_28;
    }
    uint64_t v17 = (char *)p_str + size;
    uint64_t v18 = p_str;
    while (1)
    {
      long long v19 = memchr(v18, 44, size);
      if (!v19) {
        goto LABEL_28;
      }
      if (*v19 == 44) {
        break;
      }
      uint64_t v18 = (std::string *)(v19 + 1);
      int64_t size = v17 - (unsigned char *)v18;
      if (v17 - (unsigned char *)v18 < 1) {
        goto LABEL_28;
      }
    }
    if (v19 == v17 || (std::string::size_type v20 = v19 - (unsigned char *)p_str, v20 == -1)) {
LABEL_28:
    }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_einsum_kernel: invalid equation");
    std::string::basic_string(&v154, &__str, 0, v20, (std::allocator<char> *)&v153);
    std::string::basic_string(&v153, &__str, v20 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v151);
    std::string::size_type v21 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
    if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v21 = v154.__r_.__value_.__l.__size_;
    }
    if (v21 != v8) {
      goto LABEL_247;
    }
    std::string::size_type v22 = HIBYTE(v153.__r_.__value_.__r.__words[2]);
    if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v22 = v153.__r_.__value_.__l.__size_;
    }
    if (v22 != v8) {
      goto LABEL_247;
    }
    std::string::size_type v23 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
    if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v23 = v155.__r_.__value_.__l.__size_;
    }
    if (v23 != v8) {
LABEL_247:
    }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_einsum_kernel: invalid equation, inputs and output not of the same rank");
    std::vector<int>::resize((std::vector<int> *)(a1 + 304), v8);
    std::vector<int>::resize((std::vector<int> *)(a1 + 328), v8);
    std::vector<int>::resize((std::vector<int> *)(a1 + 352), v8);
    v152[0] = 0;
    v152[1] = 0;
    uint64_t v151 = (uint64_t *)v152;
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v150, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
    }
    else {
      std::string v150 = v154;
    }
    if (*(void *)(a1 + 312) == *(void *)(a1 + 304))
    {
      int v25 = 0;
    }
    else
    {
      unint64_t v24 = 0;
      int v25 = 0;
      do
      {
        if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v26 = &v150;
        }
        else {
          uint64_t v26 = (std::string *)v150.__r_.__value_.__r.__words[0];
        }
        int v27 = v26->__r_.__value_.__s.__data_[v24];
        std::string::value_type v158 = v26->__r_.__value_.__s.__data_[v24];
        long long v28 = v152[0];
        if (!v152[0]) {
          goto LABEL_57;
        }
        uint64_t v29 = v152;
        do
        {
          uint64_t v30 = v28;
          uint64_t v31 = v29;
          int v32 = *((char *)v28 + 28);
          long long v33 = v28 + 1;
          if (v32 >= v27)
          {
            long long v33 = v30;
            uint64_t v29 = (void **)v30;
          }
          long long v28 = (void *)*v33;
        }
        while (v28);
        if (v29 == v152) {
          goto LABEL_57;
        }
        if (v32 < v27) {
          uint64_t v30 = v31;
        }
        if (v27 < *((char *)v30 + 28)) {
LABEL_57:
        }
          *((_DWORD *)std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(&v151, v27, &v158)+ 8) = v25++;
        uint64_t v34 = std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(&v151, v27, &v158);
        uint64_t v35 = *(void *)(a1 + 304);
        *(_DWORD *)(v35 + 4 * v24++) = *((_DWORD *)v34 + 8);
      }
      while (v24 < (*(void *)(a1 + 312) - v35) >> 2);
    }
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v150.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v149, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
    }
    else {
      std::string v149 = v153;
    }
    if (*(void *)(a1 + 336) != *(void *)(a1 + 328))
    {
      unint64_t v36 = 0;
      do
      {
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v149;
        }
        else {
          uint64_t v37 = (std::string *)v149.__r_.__value_.__r.__words[0];
        }
        int v38 = v37->__r_.__value_.__s.__data_[v36];
        std::string::value_type v158 = v37->__r_.__value_.__s.__data_[v36];
        long long v39 = v152[0];
        if (!v152[0]) {
          goto LABEL_80;
        }
        uint64_t v40 = v152;
        do
        {
          uint64_t v41 = v39;
          uint64_t v42 = v40;
          int v43 = *((char *)v39 + 28);
          long long v44 = v39 + 1;
          if (v43 >= v38)
          {
            long long v44 = v41;
            uint64_t v40 = (void **)v41;
          }
          long long v39 = (void *)*v44;
        }
        while (v39);
        if (v40 == v152) {
          goto LABEL_80;
        }
        if (v43 < v38) {
          uint64_t v41 = v42;
        }
        if (v38 < *((char *)v41 + 28)) {
LABEL_80:
        }
          *((_DWORD *)std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(&v151, v38, &v158)+ 8) = v25++;
        uint64_t v45 = std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(&v151, v38, &v158);
        uint64_t v46 = *(void *)(a1 + 328);
        *(_DWORD *)(v46 + 4 * v36++) = *((_DWORD *)v45 + 8);
      }
      while (v36 < (*(void *)(a1 + 336) - v46) >> 2);
    }
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v149.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v155.__r_.__value_.__l.__data_, v155.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v155;
    }
    if (*(void *)(a1 + 360) != *(void *)(a1 + 352))
    {
      unint64_t v47 = 0;
      do
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v49 = p_p->__r_.__value_.__s.__data_[v47];
        std::string::value_type v158 = p_p->__r_.__value_.__s.__data_[v47];
        char v50 = v152[0];
        if (!v152[0]) {
          goto LABEL_101;
        }
        uint64_t v51 = v152;
        do
        {
          long long v52 = v50;
          std::string v53 = v51;
          int v54 = *((char *)v50 + 28);
          uint64_t v55 = v50 + 1;
          if (v54 >= v49)
          {
            uint64_t v55 = v52;
            uint64_t v51 = (void **)v52;
          }
          char v50 = (void *)*v55;
        }
        while (v50);
        if (v51 == v152) {
          goto LABEL_101;
        }
        if (v54 < v49) {
          long long v52 = v53;
        }
        if (v49 < *((char *)v52 + 28)) {
LABEL_101:
        }
          *((_DWORD *)std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(&v151, v49, &v158)+ 8) = v25++;
        std::string v56 = std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(&v151, v49, &v158);
        uint64_t v57 = *(void *)(a1 + 352);
        *(_DWORD *)(v57 + 4 * v47++) = *((_DWORD *)v56 + 8);
      }
      while (v47 < (*(void *)(a1 + 360) - v57) >> 2);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::__tree<int>::destroy(v152[0]);
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v153.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v154.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v155.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  char v58 = operator new(0x10uLL);
  std::string v59 = v58;
  _OWORD *v58 = xmmword_192DAF430;
  int v60 = *(uint64_t **)(a1 + 304);
  if (*(void *)(a1 + 312) - (void)v60 != 16) {
    goto LABEL_152;
  }
  uint64_t v62 = *v60;
  uint64_t v61 = v60[1];
  if (v62 != *(void *)v58 || v61 != *((void *)v58 + 1)) {
    goto LABEL_152;
  }
  int v64 = operator new(0x10uLL);
  std::string::size_type v65 = v64;
  *int v64 = xmmword_192DCA6D0;
  long long v66 = *(uint64_t **)(a1 + 328);
  if (*(void *)(a1 + 336) - (void)v66 != 16
    || ((uint64_t v68 = *v66, v67 = v66[1], v68 == *(void *)v64) ? (v69 = v67 == *((void *)v64 + 1)) : (v69 = 0), !v69))
  {
LABEL_151:
    operator delete(v65);
LABEL_152:
    operator delete(v59);
    goto LABEL_153;
  }
  uint64_t v70 = operator new(0x10uLL);
  *(_OWORD *)uint64_t v70 = xmmword_192DCA6E0;
  std::string v71 = *(uint64_t **)(a1 + 352);
  if (*(void *)(a1 + 360) - (void)v71 != 16)
  {
    operator delete(v70);
    goto LABEL_151;
  }
  uint64_t v73 = *v71;
  uint64_t v72 = v71[1];
  BOOL v75 = v73 != *v70 || v72 != v70[1];
  operator delete(v70);
  operator delete(v65);
  operator delete(v59);
  if (v75)
  {
LABEL_153:
    long long v86 = operator new(0xCuLL);
    long long v87 = v86;
    *long long v86 = 0x100000000;
    *((_DWORD *)v86 + 2) = 2;
    long long v88 = *(uint64_t **)(a1 + 304);
    if (*(void *)(a1 + 312) - (void)v88 != 12) {
      goto LABEL_184;
    }
    uint64_t v89 = *v88;
    uint64_t v90 = *((unsigned int *)v88 + 2);
    if (v89 != *v86 || v90 != *((_DWORD *)v86 + 2)) {
      goto LABEL_184;
    }
    std::string::size_type v92 = (unsigned int *)operator new(0xCuLL);
    char v93 = v92;
    *(void *)std::string::size_type v92 = 0x100000002;
    v92[2] = 3;
    long long v94 = *(uint64_t **)(a1 + 328);
    if (*(void *)(a1 + 336) - (void)v94 != 12
      || ((uint64_t v95 = *v94, v96 = *((unsigned int *)v94 + 2), v95 == *(void *)v92) ? (v97 = v96 == v92[2]) : (v97 = 0), !v97))
    {
LABEL_183:
      operator delete(v93);
LABEL_184:
      operator delete(v87);
      goto LABEL_185;
    }
    std::string v98 = operator new(0xCuLL);
    *(void *)std::string v98 = 0x100000000;
    v98[2] = 3;
    std::string v99 = *(uint64_t **)(a1 + 352);
    if (*(void *)(a1 + 360) - (void)v99 != 12)
    {
      operator delete(v98);
      goto LABEL_183;
    }
    uint64_t v100 = *v99;
    uint64_t v101 = *((unsigned int *)v99 + 2);
    BOOL v103 = v100 != *(void *)v98 || v101 != v98[2];
    operator delete(v98);
    operator delete(v93);
    operator delete(v87);
    if (v103)
    {
LABEL_185:
      long long v109 = operator new(0x14uLL);
      long long v110 = v109;
      *((_DWORD *)v109 + 4) = 4;
      *long long v109 = xmmword_192DE2AC8;
      size_t v111 = *(uint64_t **)(a1 + 304);
      if (*(void *)(a1 + 312) - (void)v111 != 20) {
        goto LABEL_253;
      }
      uint64_t v112 = *v111;
      uint64_t v113 = v111[1];
      uint64_t v114 = *((unsigned int *)v111 + 4);
      BOOL v115 = v112 == *(void *)v109 && v113 == *((void *)v109 + 1);
      if (!v115 || v114 != *((_DWORD *)v109 + 4)) {
        goto LABEL_253;
      }
      std::string v117 = (unsigned int *)operator new(0x14uLL);
      int v118 = v117;
      v117[4] = 5;
      *(_OWORD *)std::string v117 = xmmword_192DE2ADC;
      std::string::size_type v119 = *(uint64_t **)(a1 + 328);
      if (*(void *)(a1 + 336) - (void)v119 != 20
        || ((v120 = *v119, uint64_t v121 = v119[1], v122 = *((unsigned int *)v119 + 4), v120 == *(void *)v117)
          ? (BOOL v123 = v121 == *((void *)v117 + 1))
          : (BOOL v123 = 0),
            v123 ? (BOOL v124 = v122 == v117[4]) : (BOOL v124 = 0),
            !v124))
      {
LABEL_252:
        operator delete(v118);
LABEL_253:
        operator delete(v110);
        goto LABEL_254;
      }
      std::string::size_type v125 = operator new(0x14uLL);
      v125[4] = 5;
      *(_OWORD *)std::string::size_type v125 = xmmword_192DE2AF0;
      unsigned int v126 = *(uint64_t **)(a1 + 352);
      if (*(void *)(a1 + 360) - (void)v126 != 20)
      {
        operator delete(v125);
        goto LABEL_252;
      }
      uint64_t v127 = *v126;
      uint64_t v128 = v126[1];
      uint64_t v129 = *((unsigned int *)v126 + 4);
      BOOL v132 = v127 != *(void *)v125 || v128 != *((void *)v125 + 1) || v129 != v125[4];
      operator delete(v125);
      operator delete(v118);
      operator delete(v110);
      if (v132) {
LABEL_254:
      }
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_einsum_kernel: invalid or unsupported equation");
      int v133 = *v157.__begin_;
      int v134 = *v156.__begin_;
      if (*v157.__begin_ == *v156.__begin_
        || (v133 <= v134 ? (int v135 = *v156.__begin_) : (int v135 = *v157.__begin_), v134 * v133 == v135))
      {
        int v136 = v157.__begin_[1];
        int v137 = v156.__begin_[1];
        if (v136 == v137 || (v136 <= v137 ? (int v138 = v156.__begin_[1]) : (int v138 = v157.__begin_[1]), v137 * v136 == v138))
        {
          int v139 = v157.__begin_[3];
          int v140 = v156.__begin_[3];
          if (v139 == v140
            || (v139 <= v140 ? (int v141 = v156.__begin_[3]) : (int v141 = v157.__begin_[3]), v140 * v139 == v141))
          {
            if (v157.__begin_[4] == v156.__begin_[2])
            {
              if (v133 <= v134) {
                int v133 = *v156.__begin_;
              }
              int v142 = v157.__begin_[2];
              unsigned int v143 = v156.__begin_[4];
              if (v136 <= v137) {
                int v144 = v156.__begin_[1];
              }
              else {
                int v144 = v157.__begin_[1];
              }
              if (v139 <= v140) {
                int v145 = v156.__begin_[3];
              }
              else {
                int v145 = v157.__begin_[3];
              }
              v155.__r_.__value_.__r.__words[0] = __PAIR64__(v144, v133);
              v155.__r_.__value_.__l.__size_ = __PAIR64__(v145, v142);
              v155.__r_.__value_.__r.__words[2] = v143 | 0x500000000;
              Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v155, 0, (uint64_t)&__str);
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              v154.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
              v154.__r_.__value_.__s.__data_[8] = 0;
              std::string v146 = (char *)operator new(0x40uLL);
              *a3 = v146;
              a3[1] = v146;
              a3[2] = v146 + 64;
              uint64_t v85 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)&__str, &v162, (uint64_t)v146);
              goto LABEL_239;
            }
          }
        }
      }
      goto LABEL_246;
    }
    int v104 = v157.__begin_[1];
    int v105 = v156.__begin_[1];
    if (v104 == v105 || (v104 <= v105 ? (int v106 = v156.__begin_[1]) : (int v106 = v157.__begin_[1]), v105 * v104 == v106))
    {
      if (v157.__begin_[2] == *v156.__begin_)
      {
        if (v104 <= v105) {
          int v104 = v156.__begin_[1];
        }
        int v107 = v156.__begin_[2];
        LODWORD(v155.__r_.__value_.__l.__data_) = *v157.__begin_;
        *(_OWORD *)((char *)v155.__r_.__value_.__r.__words + 4) = __PAIR64__(v107, v104);
        HIDWORD(v155.__r_.__value_.__r.__words[2]) = 3;
        Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v155, 0, (uint64_t)&__str);
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        v154.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
        v154.__r_.__value_.__s.__data_[8] = 0;
        std::string::size_type v108 = (char *)operator new(0x40uLL);
        *a3 = v108;
        a3[1] = v108;
        a3[2] = v108 + 64;
        uint64_t v85 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)&__str, &v162, (uint64_t)v108);
        goto LABEL_239;
      }
    }
LABEL_246:
    uint64_t v147 = "generic_einsum_kernel: invalid input dims";
    goto LABEL_250;
  }
  int v76 = *v157.__begin_;
  int v77 = *v156.__begin_;
  if (*v157.__begin_ != *v156.__begin_)
  {
    int v78 = v76 <= v77 ? *v156.__begin_ : *v157.__begin_;
    if (v77 * v76 != v78) {
      goto LABEL_246;
    }
  }
  int v79 = v157.__begin_[2];
  int v80 = v156.__begin_[2];
  if (v79 != v80)
  {
    int v81 = v79 <= v80 ? v156.__begin_[2] : v157.__begin_[2];
    if (v80 * v79 != v81) {
      goto LABEL_246;
    }
  }
  if (v157.__begin_[3] != v156.__begin_[1]) {
    goto LABEL_246;
  }
  if (v76 <= v77) {
    int v76 = *v156.__begin_;
  }
  if (v79 <= v80) {
    int v82 = v156.__begin_[2];
  }
  else {
    int v82 = v157.__begin_[2];
  }
  int v83 = v156.__begin_[3];
  v155.__r_.__value_.__r.__words[0] = __PAIR64__(v157.__begin_[1], v76);
  v155.__r_.__value_.__l.__size_ = __PAIR64__(v83, v82);
  v155.__r_.__value_.__r.__words[2] = 0x400000000;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v155, 0, (uint64_t)&__str);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v154.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v154.__r_.__value_.__s.__data_[8] = 0;
  int v84 = (char *)operator new(0x40uLL);
  *a3 = v84;
  a3[1] = v84;
  a3[2] = v84 + 64;
  uint64_t v85 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)&__str, &v162, (uint64_t)v84);
LABEL_239:
  a3[1] = v85;
  if (v160)
  {
    int v161 = v160;
    operator delete(v160);
  }
  if (v156.__begin_)
  {
    v156.__end_ = v156.__begin_;
    operator delete(v156.__begin_);
  }
  if (v157.__begin_)
  {
    v157.__end_ = v157.__begin_;
    operator delete(v157.__begin_);
  }
}

void sub_192A2E080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *__p,uint64_t a52)
{
  *(void *)(v52 + 8) = v53;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  std::string v56 = *(void **)(v54 - 128);
  if (v56)
  {
    *(void *)(v54 - 120) = v56;
    operator delete(v56);
  }
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v57 = *(void **)(v54 - 200);
  if (v57)
  {
    *(void *)(v54 - 192) = v57;
    operator delete(v57);
  }
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(uint64_t **a1, char a2, unsigned char *a3)
{
  uint64_t v6 = a1 + 1;
  long long v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        long long v7 = v5;
        int v8 = v5[28];
        if (v8 <= a2) {
          break;
        }
        long long v5 = (char *)*v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      long long v5 = (char *)v7[1];
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    long long v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = v7;
    long long v7 = operator new(0x28uLL);
    *((unsigned char *)v7 + 28) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *long long v7 = 0;
    v7[1] = 0;
    long long v7[2] = v9;
    char *v6 = v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t Espresso::generic_furthest_point_sampling_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 64) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_furthest_point_sampling_kernel: Needs 1 bottom blob.");
  }
  uint64_t v5 = v4[5];
  if ((v5 - 3) >= 3 && v5 != -1) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("generic_furthest_point_sampling_kernel: Input blob must be rank 3, 4, or 5. Got %d.", v5);
  }
  if (v4[1] != 1 || v4[3] != 1 || v4[4] != 1) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_furthest_point_sampling_kernel: Input blob h, n, and seq must be 1.");
  }
  if (*(int *)(a1 + 288) <= -3) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_furthest_point_sampling_kernel: Invalid seed. Select -2 for no randomness, -1 for default seed, or 0 or greater for a layer-specific seed.");
  }
  int v7 = *(_DWORD *)(a1 + 280);
  if (v7 > *v4) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_furthest_point_sampling_kernel: Cannot request more centroids than input tensor holds");
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v12[4] = a3 + 2;
  int v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(1uLL);
  v12[0] = v8;
  v12[1] = v8;
  v12[3] = &v8[64 * v9];
  *(_DWORD *)int v8 = v7;
  *(_OWORD *)(v8 + 4) = xmmword_192DCA6F0;
  *((_DWORD *)v8 + 5) = -1;
  *((void *)v8 + 7) = 0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  void v12[2] = v8 + 64;
  std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, v12);
  uint64_t v10 = a3[1];
  uint64_t result = std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v12);
  a3[1] = v10;
  return result;
}

void sub_192A2E404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *Espresso::generic_degamma_kernel::top_shapes_for_bottom_shapes@<X0>(long long **a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a2, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 6);
}

uint64_t Espresso::generic_tunneled_ane_op_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 312) - *(void *)(a1 + 304);
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel must have top shapes");
  }
  uint64_t v6 = *(void *)(a1 + 280);
  uint64_t v7 = *(void *)(a1 + 288) - v6;
  if (!v7 || (v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3), v10 = *a2, uint64_t v9 = a2[1], v8 != (v9 - *a2) >> 6)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel must have bottom shapes with size matching bottom shapes in context.");
  }
  if (v9 != v10)
  {
    uint64_t v11 = 0;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    long long v12 = (int *)(v6 + 16);
    long long v13 = (_DWORD *)(v10 + 8);
    do
    {
      if (*v12 != *(v13 - 2)
        || *(v12 - 1) != *(v13 - 1)
        || *(v12 - 2) != *v13
        || *(v12 - 3) != v13[1]
        || *(v12 - 4) != v13[2])
      {
        uint64_t v40 = *(void *)(a1 + 280);
        uint64_t __vala = v11;
        std::to_string(&v105, *(v12 - 4));
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v41.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v105;
        }
        else {
          v41.__i_ = (std::__wrap_iter<const char *>::iterator_type)v105.__r_.__value_.__r.__words[0];
        }
        std::string::insert(&v105, v41, 40);
        std::string v106 = v105;
        memset(&v105, 0, sizeof(v105));
        std::string::push_back(&v106, 44);
        std::string v107 = v106;
        memset(&v106, 0, sizeof(v106));
        std::to_string(&v104, *(_DWORD *)(v40 + 24 * __vala + 4));
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v42 = &v104;
        }
        else {
          uint64_t v42 = (std::string *)v104.__r_.__value_.__r.__words[0];
        }
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v104.__r_.__value_.__l.__size_;
        }
        long long v44 = std::string::append(&v107, (const std::string::value_type *)v42, size);
        long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v108.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v108, 44);
        std::string v109 = v108;
        memset(&v108, 0, sizeof(v108));
        std::to_string(&v103, *(_DWORD *)(v40 + 24 * __vala + 8));
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v46 = &v103;
        }
        else {
          uint64_t v46 = (std::string *)v103.__r_.__value_.__r.__words[0];
        }
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v47 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v47 = v103.__r_.__value_.__l.__size_;
        }
        int v48 = std::string::append(&v109, (const std::string::value_type *)v46, v47);
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v110.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v110, 44);
        std::string v111 = v110;
        memset(&v110, 0, sizeof(v110));
        std::to_string(&v102, *(_DWORD *)(v40 + 24 * __vala + 12));
        if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v50 = &v102;
        }
        else {
          char v50 = (std::string *)v102.__r_.__value_.__r.__words[0];
        }
        if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v51 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v51 = v102.__r_.__value_.__l.__size_;
        }
        uint64_t v52 = std::string::append(&v111, (const std::string::value_type *)v50, v51);
        long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        v112.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v112, 44);
        std::string v113 = v112;
        memset(&v112, 0, sizeof(v112));
        std::to_string(&v101, *v12);
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v54 = &v101;
        }
        else {
          uint64_t v54 = (std::string *)v101.__r_.__value_.__r.__words[0];
        }
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v55 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v55 = v101.__r_.__value_.__l.__size_;
        }
        std::string v56 = std::string::append(&v113, (const std::string::value_type *)v54, v55);
        long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v114.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v114, 41);
        std::string v115 = v114;
        memset(&v114, 0, sizeof(v114));
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v102.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v111.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v110.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v109.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v108.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v104.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v106.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v105.__r_.__value_.__l.__data_);
        }
        std::to_string(&v104, *(_DWORD *)(*a2 + (__vala << 6) + 16));
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v58.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v104;
        }
        else {
          v58.__i_ = (std::__wrap_iter<const char *>::iterator_type)v104.__r_.__value_.__r.__words[0];
        }
        std::string::insert(&v104, v58, 40);
        std::string v105 = v104;
        memset(&v104, 0, sizeof(v104));
        std::string::push_back(&v105, 44);
        std::string v106 = v105;
        memset(&v105, 0, sizeof(v105));
        std::to_string(&v103, *(_DWORD *)(*a2 + (__vala << 6) + 12));
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v59 = &v103;
        }
        else {
          std::string v59 = (std::string *)v103.__r_.__value_.__r.__words[0];
        }
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v60 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v60 = v103.__r_.__value_.__l.__size_;
        }
        uint64_t v61 = std::string::append(&v106, (const std::string::value_type *)v59, v60);
        long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v107.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v107, 44);
        std::string v108 = v107;
        memset(&v107, 0, sizeof(v107));
        std::to_string(&v102, *(_DWORD *)(*a2 + (__vala << 6) + 8));
        if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v63 = &v102;
        }
        else {
          uint64_t v63 = (std::string *)v102.__r_.__value_.__r.__words[0];
        }
        if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v64 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v64 = v102.__r_.__value_.__l.__size_;
        }
        std::string::size_type v65 = std::string::append(&v108, (const std::string::value_type *)v63, v64);
        long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
        v109.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v66;
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v109, 44);
        std::string v110 = v109;
        memset(&v109, 0, sizeof(v109));
        std::to_string(&v101, *(_DWORD *)(*a2 + (__vala << 6) + 4));
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v67 = &v101;
        }
        else {
          uint64_t v67 = (std::string *)v101.__r_.__value_.__r.__words[0];
        }
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v68 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v68 = v101.__r_.__value_.__l.__size_;
        }
        BOOL v69 = std::string::append(&v110, (const std::string::value_type *)v67, v68);
        long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
        v111.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v70;
        v69->__r_.__value_.__l.__size_ = 0;
        v69->__r_.__value_.__r.__words[2] = 0;
        v69->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v111, 44);
        std::string v112 = v111;
        memset(&v111, 0, sizeof(v111));
        std::to_string(&v100, *(_DWORD *)(*a2 + (__vala << 6)));
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v71 = &v100;
        }
        else {
          std::string v71 = (std::string *)v100.__r_.__value_.__r.__words[0];
        }
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v72 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v72 = v100.__r_.__value_.__l.__size_;
        }
        uint64_t v73 = std::string::append(&v112, (const std::string::value_type *)v71, v72);
        long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v113.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        std::string::push_back(&v113, 41);
        std::string v114 = v113;
        memset(&v113, 0, sizeof(v113));
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v111.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v110.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v109.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v102.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v108.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v106.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v105.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v104.__r_.__value_.__l.__data_);
        }
        std::to_string(&v108, __vala);
        BOOL v75 = std::string::insert(&v108, 0, "tunneled_ane_op_kernel has inconsistent bottom shape at index ");
        long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v109.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        int v77 = std::string::append(&v109, " actual: ");
        long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        v110.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v79 = &v114;
        }
        else {
          int v79 = (std::string *)v114.__r_.__value_.__r.__words[0];
        }
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v80 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v80 = v114.__r_.__value_.__l.__size_;
        }
        int v81 = std::string::append(&v110, (const std::string::value_type *)v79, v80);
        long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
        v111.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v82;
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v81->__r_.__value_.__r.__words[0] = 0;
        int v83 = std::string::append(&v111, " declared: ");
        long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
        v112.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v84;
        v83->__r_.__value_.__l.__size_ = 0;
        v83->__r_.__value_.__r.__words[2] = 0;
        v83->__r_.__value_.__r.__words[0] = 0;
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v85 = &v115;
        }
        else {
          uint64_t v85 = (std::string *)v115.__r_.__value_.__r.__words[0];
        }
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v86 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v86 = v115.__r_.__value_.__l.__size_;
        }
        long long v87 = std::string::append(&v112, (const std::string::value_type *)v85, v86);
        long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
        v113.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v88;
        v87->__r_.__value_.__l.__size_ = 0;
        v87->__r_.__value_.__r.__words[2] = 0;
        v87->__r_.__value_.__r.__words[0] = 0;
        if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v89 = &v113;
        }
        else {
          uint64_t v89 = (std::string *)v113.__r_.__value_.__r.__words[0];
        }
        Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v89);
      }
      ++v11;
      v12 += 6;
      v13 += 16;
    }
    while (v8 != v11);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<Espresso::layer_shape>::reserve(a3, 0xAAAAAAAAAAAAAAABLL * (v4 >> 3));
  uint64_t v14 = *(void *)(a1 + 304);
  if (*(void *)(a1 + 312) != v14)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    v17.i64[0] = 0x100000001;
    v17.i64[1] = 0x100000001;
    do
    {
      uint64_t v18 = v14 + v15;
      int v19 = *(_DWORD *)(v18 + 20);
      if ((v19 - 6) <= 0xFFFFFFFA)
      {
        std::to_string(&v114, v19);
        uint64_t v90 = std::string::insert(&v114, 0, "tunneled_ane_op_kernel: Unsupported top rank ");
        long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
        v115.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v91;
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v92 = &v115;
        }
        else {
          std::string::size_type v92 = (std::string *)v115.__r_.__value_.__r.__words[0];
        }
        Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v92);
      }
      int32x4_t v20 = *(int32x4_t *)(v18 + 4);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v17, v20))) & 1) != 0 || (int v21 = *(_DWORD *)v18, *(int *)v18 <= 0)) {
        Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel: Unsupported non positive dimension.");
      }
      int8x16_t v22 = (int8x16_t)vrev64q_s32(v20);
      int8x16_t v23 = vextq_s8(v22, v22, 8uLL);
      unint64_t v24 = a3[1];
      unint64_t v25 = a3[2];
      if (v24 >= v25)
      {
        *(int8x16_t *)unint64_t __val = v23;
        uint64_t v27 = (uint64_t)(v24 - *a3) >> 6;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 58) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = v25 - *a3;
        if (v29 >> 5 > v28) {
          unint64_t v28 = v29 >> 5;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v30 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        std::string v117 = a3 + 2;
        uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v30);
        std::string::size_type v32 = (std::string::size_type)&v31[64 * v27];
        v115.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        v115.__r_.__value_.__l.__size_ = v32;
        uint64_t v116 = &v31[64 * v33];
        *(_OWORD *)std::string::size_type v32 = *(_OWORD *)__val;
        *(_DWORD *)(v32 + 16) = v21;
        *(_DWORD *)(v32 + 20) = v19;
        *(_OWORD *)(v32 + 24) = 0u;
        *(_OWORD *)(v32 + 40) = 0u;
        *(void *)(v32 + 56) = 0;
        v115.__r_.__value_.__r.__words[2] = v32 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v115);
        uint64_t v26 = a3[1];
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v115);
        v17.i64[0] = 0x100000001;
        v17.i64[1] = 0x100000001;
      }
      else
      {
        *(int8x16_t *)unint64_t v24 = v23;
        *(_DWORD *)(v24 + 16) = v21;
        *(_DWORD *)(v24 + 20) = v19;
        uint64_t v26 = v24 + 64;
        *(_OWORD *)(v24 + 24) = 0u;
        *(_OWORD *)(v24 + 40) = 0u;
        *(void *)(v24 + 56) = 0;
        a3[1] = v24 + 64;
      }
      a3[1] = v26;
      uint64_t v14 = *(void *)(a1 + 304);
      ++v16;
      v15 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 312) - v14) >> 3) > v16);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 472) - *(void *)(a1 + 464)) >> 3) != (a2[1] - *a2) >> 6)
  {
    char v93 = "tunneled_ane_op_kernel: Inconsistent name bindings size for inputs.";
    goto LABEL_178;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 496) - *(void *)(a1 + 488)) >> 3) != (a3[1] - *a3) >> 6)
  {
    char v93 = "tunneled_ane_op_kernel: Inconsistent name bindings size for outputs.";
    goto LABEL_178;
  }
  if (*(void *)(a1 + 424) != *(void *)(a1 + 416) || *(void *)(a1 + 448) != *(void *)(a1 + 440))
  {
    char v93 = "tunneled_ane_op_kernel: Custom layouts not yet supported.";
    goto LABEL_178;
  }
  if (*(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    char v93 = "tunneled_ane_op_kernel: Compilation options not yet supported.";
LABEL_178:
    Espresso::throw_exception_selector<Espresso::generic_error>(v93);
  }
  Espresso::validate_foreign_network_storage_blob(a1 + 336);
  uint64_t v34 = *(void *)(a1 + 512);
  uint64_t v35 = *(void *)(a1 + 520);
  if (v34 != v35)
  {
    uint64_t v36 = v34 + 24;
    do
    {
      if (*(char *)(v36 - 1) < 0)
      {
        if (!*(void *)(v36 - 16)) {
LABEL_170:
        }
          Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel: 'target_file_path' must be set for each weight file");
      }
      else if (!*(unsigned char *)(v36 - 1))
      {
        goto LABEL_170;
      }
      Espresso::validate_foreign_network_storage_blob(v36);
      uint64_t v37 = v36 + 80;
      v36 += 104;
    }
    while (v37 != v35);
  }
  uint64_t result = *(unsigned int *)(a1 + 328);
  if (result != 1)
  {
    std::to_string(&v114, result);
    long long v94 = std::string::insert(&v114, 0, "tunneled_ane_op_kernel: Unsupported blob format type: ");
    long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
    v115.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v95;
    v94->__r_.__value_.__l.__size_ = 0;
    v94->__r_.__value_.__r.__words[2] = 0;
    v94->__r_.__value_.__r.__words[0] = 0;
    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v96 = &v115;
    }
    else {
      uint64_t v96 = (std::string *)v115.__r_.__value_.__r.__words[0];
    }
    Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v96);
  }
  return result;
}

void sub_192A2F070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *__p,uint64_t a63)
{
  if (*(char *)(v67 - 185) < 0) {
    operator delete(*(void **)(v67 - 208));
  }
  if (*(char *)(v67 - 217) < 0) {
    operator delete(*(void **)(v67 - 240));
  }
  if (a67 < 0) {
    operator delete(__p);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (*(char *)(v67 - 153) < 0) {
    operator delete(*(void **)(v67 - 176));
  }
  if (*(char *)(v67 - 121) < 0) {
    operator delete(*(void **)(v67 - 144));
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::validate_foreign_network_storage_blob(uint64_t result)
{
  int v1 = *(_DWORD *)result;
  if (*(_DWORD *)result == 1)
  {
    uint64_t v2 = *(unsigned __int8 *)(result + 55);
    if ((v2 & 0x80u) != 0) {
      uint64_t v2 = *(void *)(result + 40);
    }
    if (v2) {
      goto LABEL_28;
    }
LABEL_18:
    uint64_t v6 = *(unsigned __int8 *)(result + 79);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(result + 64);
    }
    if (v6) {
      Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel: storage is not raw blob-based but blob name is set");
    }
    if (v1 != 2)
    {
      if (v1 != 1)
      {
        std::to_string(&v11, *(_DWORD *)result);
        unint64_t v8 = std::string::insert(&v11, 0, "tunneled_ane_op_kernel: Unsupported blob storage type: ");
        long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        int64_t v13 = v8->__r_.__value_.__r.__words[2];
        long long v12 = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        if (v13 >= 0) {
          uint64_t v10 = (const char *)&v12;
        }
        else {
          uint64_t v10 = (const char *)v12;
        }
        Espresso::throw_exception_selector<Espresso::generic_error>(v10);
      }
      uint64_t v7 = *(unsigned __int8 *)(result + 31);
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *(void *)(result + 16);
      }
      if (!v7) {
        Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel: file blob has empty path");
      }
    }
    return result;
  }
  uint64_t v3 = *(unsigned __int8 *)(result + 31);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(result + 16);
  }
  if (v3) {
    Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel: storage is not file-based but file path is set");
  }
  if (v1 == 2) {
    goto LABEL_18;
  }
  uint64_t v4 = *(unsigned __int8 *)(result + 55);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(result + 40);
  }
  if (v4) {
LABEL_28:
  }
    Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel: storage is not inline but contents are set");
  if (v1 != 3) {
    goto LABEL_18;
  }
  uint64_t v5 = *(unsigned __int8 *)(result + 79);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(result + 64);
  }
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_op_kernel: raw blob name is empty");
  }
  return result;
}

void sub_192A2F5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *Espresso::generic_tunneled_ane_unit_kernel::top_shapes_for_bottom_shapes@<X0>(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = a3;
  int v5 = *(_DWORD *)(a1 + 448);
  if (!v5)
  {
    uint64_t v10 = *(void *)(a1 + 312) - *(void *)(a1 + 304);
    if (!v10) {
      Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel must have declared top shapes when using explicit shape propagation");
    }
    uint64_t v11 = *(void *)(a1 + 280);
    uint64_t v12 = *(void *)(a1 + 288) - v11;
    if (!v12
      || (unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3), v15 = *a2, v14 = a2[1], v13 != ((char *)v14 - (char *)*a2) >> 6))
    {
      Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel must have declared bottom shapes with size matching bottom shapes in context.");
    }
    uint64_t v16 = *(void *)(a1 + 328);
    if (v13 != (*(void *)(a1 + 336) - v16) >> 5) {
      Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel must have declared bottom layouts with size matching bottom shapes in context.");
    }
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
    if (v17 != (uint64_t)(*(void *)(a1 + 360) - *(void *)(a1 + 352)) >> 5) {
      Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel must have declared top layouts with size matching top shapes in context.");
    }
    int v178 = v4;
    if (v14 != v15)
    {
      uint64_t v18 = 0;
      if (v13 <= 1) {
        uint64_t v19 = 1;
      }
      else {
        uint64_t v19 = v13;
      }
      do
      {
        uint64_t v20 = v11 + 24 * v18;
        int v23 = *(_DWORD *)(v20 + 16);
        int8x16_t v22 = (int *)(v20 + 16);
        int v21 = v23;
        if (v23 < 1) {
          goto LABEL_150;
        }
        uint64_t v24 = v11 + 24 * v18;
        int v27 = *(_DWORD *)(v24 + 12);
        uint64_t v26 = (int *)(v24 + 12);
        int v25 = v27;
        if (v27 < 1) {
          goto LABEL_150;
        }
        uint64_t v28 = v11 + 24 * v18;
        int v31 = *(_DWORD *)(v28 + 8);
        unint64_t v30 = (int *)(v28 + 8);
        int v29 = v31;
        if (v31 < 1) {
          goto LABEL_150;
        }
        uint64_t v32 = v11 + 24 * v18;
        int v35 = *(_DWORD *)(v32 + 4);
        uint64_t v34 = (int *)(v32 + 4);
        int v33 = v35;
        int v36 = *(_DWORD *)(v11 + 24 * v18);
        if (v35 < 1 || v36 <= 0) {
LABEL_150:
        }
          Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel: Unsupported non positive dimension.");
        uint64_t v38 = v11 + 24 * v18;
        int v41 = *(_DWORD *)(v38 + 20);
        uint64_t v40 = (int *)(v38 + 20);
        int v39 = v41;
        if ((v41 - 6) <= 0xFFFFFFFA)
        {
          std::to_string(&v193, v39);
          std::string v117 = std::string::insert(&v193, 0, "tunneled_ane_unit_kernel: Unsupported bottom rank ");
          long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
          v194.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v118;
          v117->__r_.__value_.__l.__size_ = 0;
          v117->__r_.__value_.__r.__words[2] = 0;
          v117->__r_.__value_.__r.__words[0] = 0;
          if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v119 = &v194;
          }
          else {
            std::string::size_type v119 = (std::string *)v194.__r_.__value_.__r.__words[0];
          }
          Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v119);
        }
        uint64_t v42 = &v15[4 * v18];
        int v43 = *((_DWORD *)v42 + 4);
        int v44 = *((_DWORD *)v42 + 5);
        long long v45 = (int *)(v42 + 1);
        if (v43 == 1) {
          int v46 = 4;
        }
        else {
          int v46 = 5;
        }
        if (v44 != -1) {
          int v46 = *((_DWORD *)v42 + 5);
        }
        if (v39 != v46)
        {
          std::to_string(&v191, v44);
          long long v162 = std::string::insert(&v191, 0, "tunneled_ane_unit_kernel: Rank. Actual bottom rank: ");
          long long v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
          v192.__r_.__value_.__r.__words[2] = v162->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v192.__r_.__value_.__l.__data_ = v163;
          v162->__r_.__value_.__l.__size_ = 0;
          v162->__r_.__value_.__r.__words[2] = 0;
          v162->__r_.__value_.__r.__words[0] = 0;
          int v164 = std::string::append(&v192, " declared bottom rank: ");
          long long v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
          v193.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v165;
          v164->__r_.__value_.__l.__size_ = 0;
          v164->__r_.__value_.__r.__words[2] = 0;
          v164->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v190, *v40);
          if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v166 = &v190;
          }
          else {
            int v166 = (std::string *)v190.__r_.__value_.__r.__words[0];
          }
          if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v190.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v190.__r_.__value_.__l.__size_;
          }
          uint64_t v168 = std::string::append(&v193, (const std::string::value_type *)v166, size);
          long long v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
          v194.__r_.__value_.__r.__words[2] = v168->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v169;
          v168->__r_.__value_.__l.__size_ = 0;
          v168->__r_.__value_.__r.__words[2] = 0;
          v168->__r_.__value_.__r.__words[0] = 0;
          if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v170 = &v194;
          }
          else {
            int v170 = (std::string *)v194.__r_.__value_.__r.__words[0];
          }
          Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v170);
        }
        std::string::size_type v47 = (int *)&v15[4 * v18];
        int v50 = *((_DWORD *)v42 + 1);
        int v48 = (int *)v42 + 1;
        int v49 = v50;
        if (v21 != *v47 || v25 != v49 || v29 != v48[1] || v33 != v48[2] || v36 != v43)
        {
          uint64_t v120 = v45;
          std::to_string(&v184, v36);
          if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v121.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v184;
          }
          else {
            v121.__i_ = (std::__wrap_iter<const char *>::iterator_type)v184.__r_.__value_.__r.__words[0];
          }
          std::string::insert(&v184, v121, 40);
          std::string v185 = v184;
          memset(&v184, 0, sizeof(v184));
          std::string::push_back(&v185, 44);
          std::string v186 = v185;
          memset(&v185, 0, sizeof(v185));
          std::to_string(&v183, *v34);
          if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v122 = &v183;
          }
          else {
            uint64_t v122 = (std::string *)v183.__r_.__value_.__r.__words[0];
          }
          if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v123 = HIBYTE(v183.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v123 = v183.__r_.__value_.__l.__size_;
          }
          BOOL v124 = std::string::append(&v186, (const std::string::value_type *)v122, v123);
          long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
          v187.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v125;
          v124->__r_.__value_.__l.__size_ = 0;
          v124->__r_.__value_.__r.__words[2] = 0;
          v124->__r_.__value_.__r.__words[0] = 0;
          std::string::push_back(&v187, 44);
          std::string v188 = v187;
          memset(&v187, 0, sizeof(v187));
          std::to_string(&v182, *v30);
          if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v126 = &v182;
          }
          else {
            unsigned int v126 = (std::string *)v182.__r_.__value_.__r.__words[0];
          }
          if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v127 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v127 = v182.__r_.__value_.__l.__size_;
          }
          uint64_t v128 = std::string::append(&v188, (const std::string::value_type *)v126, v127);
          long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
          v189.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v129;
          v128->__r_.__value_.__l.__size_ = 0;
          v128->__r_.__value_.__r.__words[2] = 0;
          v128->__r_.__value_.__r.__words[0] = 0;
          std::string::push_back(&v189, 44);
          std::string v190 = v189;
          memset(&v189, 0, sizeof(v189));
          std::to_string(&v181, *v26);
          if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v130 = &v181;
          }
          else {
            uint64_t v130 = (std::string *)v181.__r_.__value_.__r.__words[0];
          }
          if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v131 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v131 = v181.__r_.__value_.__l.__size_;
          }
          BOOL v132 = std::string::append(&v190, (const std::string::value_type *)v130, v131);
          long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
          v191.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v133;
          v132->__r_.__value_.__l.__size_ = 0;
          v132->__r_.__value_.__r.__words[2] = 0;
          v132->__r_.__value_.__r.__words[0] = 0;
          std::string::push_back(&v191, 44);
          std::string v192 = v191;
          memset(&v191, 0, sizeof(v191));
          std::to_string(&v180, *v22);
          if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v134 = &v180;
          }
          else {
            int v134 = (std::string *)v180.__r_.__value_.__r.__words[0];
          }
          if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v135 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v135 = v180.__r_.__value_.__l.__size_;
          }
          int v136 = std::string::append(&v192, (const std::string::value_type *)v134, v135);
          long long v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
          v193.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v137;
          v136->__r_.__value_.__l.__size_ = 0;
          v136->__r_.__value_.__r.__words[2] = 0;
          v136->__r_.__value_.__r.__words[0] = 0;
          std::string::push_back(&v193, 41);
          std::string v194 = v193;
          memset(&v193, 0, sizeof(v193));
          if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v180.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v192.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v191.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v181.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v190.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v189.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v182.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v188.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v187.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v183.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v186.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v185.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v184.__r_.__value_.__l.__data_);
          }
          std::to_string(&v183, *v120);
          if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v138.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v183;
          }
          else {
            v138.__i_ = (std::__wrap_iter<const char *>::iterator_type)v183.__r_.__value_.__r.__words[0];
          }
          std::string::insert(&v183, v138, 40);
          std::string v184 = v183;
          memset(&v183, 0, sizeof(v183));
          std::string::push_back(&v184, 44);
          std::string v185 = v184;
          memset(&v184, 0, sizeof(v184));
          std::to_string(&v182, v48[2]);
          if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v139 = &v182;
          }
          else {
            int v139 = (std::string *)v182.__r_.__value_.__r.__words[0];
          }
          if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v140 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v140 = v182.__r_.__value_.__l.__size_;
          }
          int v141 = std::string::append(&v185, (const std::string::value_type *)v139, v140);
          long long v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
          v186.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v186.__r_.__value_.__l.__data_ = v142;
          v141->__r_.__value_.__l.__size_ = 0;
          v141->__r_.__value_.__r.__words[2] = 0;
          v141->__r_.__value_.__r.__words[0] = 0;
          std::string::push_back(&v186, 44);
          std::string v187 = v186;
          memset(&v186, 0, sizeof(v186));
          std::to_string(&v181, v48[1]);
          if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v143 = &v181;
          }
          else {
            unsigned int v143 = (std::string *)v181.__r_.__value_.__r.__words[0];
          }
          if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v144 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v144 = v181.__r_.__value_.__l.__size_;
          }
          int v145 = std::string::append(&v187, (const std::string::value_type *)v143, v144);
          long long v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
          v188.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v146;
          v145->__r_.__value_.__l.__size_ = 0;
          v145->__r_.__value_.__r.__words[2] = 0;
          v145->__r_.__value_.__r.__words[0] = 0;
          std::string::push_back(&v188, 44);
          std::string v189 = v188;
          memset(&v188, 0, sizeof(v188));
          std::to_string(&v180, *v48);
          if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v147 = &v180;
          }
          else {
            uint64_t v147 = (std::string *)v180.__r_.__value_.__r.__words[0];
          }
          if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v148 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v148 = v180.__r_.__value_.__l.__size_;
          }
          std::string v149 = std::string::append(&v189, (const std::string::value_type *)v147, v148);
          long long v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
          v190.__r_.__value_.__r.__words[2] = v149->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v150;
          v149->__r_.__value_.__l.__size_ = 0;
          v149->__r_.__value_.__r.__words[2] = 0;
          v149->__r_.__value_.__r.__words[0] = 0;
          std::string::push_back(&v190, 44);
          std::string v191 = v190;
          memset(&v190, 0, sizeof(v190));
          std::to_string(&v179, *v47);
          if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v151 = &v179;
          }
          else {
            uint64_t v151 = (std::string *)v179.__r_.__value_.__r.__words[0];
          }
          if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v152 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v152 = v179.__r_.__value_.__l.__size_;
          }
          std::string v153 = std::string::append(&v191, (const std::string::value_type *)v151, v152);
          long long v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
          v192.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v192.__r_.__value_.__l.__data_ = v154;
          v153->__r_.__value_.__l.__size_ = 0;
          v153->__r_.__value_.__r.__words[2] = 0;
          v153->__r_.__value_.__r.__words[0] = 0;
          std::string::push_back(&v192, 41);
          std::string v193 = v192;
          memset(&v192, 0, sizeof(v192));
          if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v179.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v191.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v190.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v180.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v189.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v188.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v181.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v187.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v186.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v182.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v185.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v184.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v183.__r_.__value_.__l.__data_);
          }
          std::operator+<char>();
          std::string v155 = std::string::append(&v190, " Declared shape: ");
          long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
          v191.__r_.__value_.__r.__words[2] = v155->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v156;
          v155->__r_.__value_.__l.__size_ = 0;
          v155->__r_.__value_.__r.__words[2] = 0;
          v155->__r_.__value_.__r.__words[0] = 0;
          if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::vector<int> v157 = &v194;
          }
          else {
            std::vector<int> v157 = (std::string *)v194.__r_.__value_.__r.__words[0];
          }
          if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v158 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v158 = v194.__r_.__value_.__l.__size_;
          }
          uint64_t v159 = std::string::append(&v191, (const std::string::value_type *)v157, v158);
          long long v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
          v192.__r_.__value_.__r.__words[2] = v159->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v192.__r_.__value_.__l.__data_ = v160;
          v159->__r_.__value_.__l.__size_ = 0;
          v159->__r_.__value_.__r.__words[2] = 0;
          v159->__r_.__value_.__r.__words[0] = 0;
          if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v161 = &v192;
          }
          else {
            int v161 = (std::string *)v192.__r_.__value_.__r.__words[0];
          }
          Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v161);
        }
        uint64_t v51 = v16 + 32 * v18;
        if (*(unsigned char *)v51)
        {
          uint64_t v52 = *(unsigned __int8 *)(v51 + 31);
          uint64_t v53 = *(void *)(v51 + 16);
          if ((v52 & 0x80u) != 0) {
            uint64_t v52 = v53;
          }
          uint64_t v4 = v178;
          if (v52) {
            Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel: bottom layout cannot both inherit from espresso and be specified.");
          }
        }
        else
        {
          uint64_t v54 = (void *)(v51 + 8);
          int v55 = *(char *)(v51 + 31);
          uint64_t v4 = v178;
          if (v55 < 0)
          {
            if (*(void *)(v16 + 32 * v18 + 16) != 5) {
LABEL_293:
            }
              Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel: layout expected to be string of length 5 and a permutation of NDCHW");
            uint64_t v54 = (void *)*v54;
          }
          else if (v55 != 5)
          {
            goto LABEL_293;
          }
          int v56 = 0;
          int v57 = 0;
          int v58 = 0;
          int v59 = 0;
          int v60 = 0;
          for (uint64_t i = 0; i != 5; ++i)
          {
            int v62 = *((char *)v54 + i);
            if (v62 <= 71)
            {
              if (v62 == 67)
              {
                int v60 = 1;
              }
              else
              {
                if (v62 != 68) {
LABEL_153:
                }
                  Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel: layout string contains character not in NDCHW");
                int v57 = 1;
              }
            }
            else
            {
              switch(v62)
              {
                case 'H':
                  int v59 = 1;
                  break;
                case 'N':
                  int v56 = 1;
                  break;
                case 'W':
                  int v58 = 1;
                  break;
                default:
                  goto LABEL_153;
              }
            }
          }
          if ((v56 & v57 & v60 & v59 & v58 & 1) == 0) {
            Espresso::throw_exception_selector<Espresso::generic_error>("tunneled_ane_unit_kernel: layout string must contain all characters in NDCHW");
          }
        }
        ++v18;
      }
      while (v18 != v19);
    }
    uint64_t *v4 = 0;
    v4[1] = 0;
    uint64_t v4[2] = 0;
    uint64_t result = std::vector<Espresso::layer_shape>::reserve(v4, v17);
    uint64_t v63 = *(void *)(a1 + 304);
    uint64_t v64 = *(void *)(a1 + 312);
    if (v64 - v63 != 24)
    {
      std::string v108 = "tunneled_ane_unit_kernel: Must have a single top.";
      goto LABEL_307;
    }
    if (v64 != v63)
    {
      uint64_t v65 = 0;
      uint64_t v177 = v4 + 2;
      uint64_t result = (uint64_t *)0xAAAAAAAAAAAAAAABLL;
      while (1)
      {
        long long v66 = (int *)(v63 + 24 * v65);
        int v67 = v66[4];
        if (v67 < 1
          || (int v68 = *(_DWORD *)(v63 + 24 * v65 + 12), v68 < 1)
          || (int v69 = *(_DWORD *)(v63 + 24 * v65 + 8), v69 < 1)
          || ((int v70 = *(_DWORD *)(v63 + 24 * v65 + 4), v71 = *v66, v70 >= 1) ? (v72 = v71 < 1) : (v72 = 1), v72))
        {
          uint64_t v116 = "tunneled_ane_unit_kernel: Unsupported non positive dimension for top.";
          goto LABEL_297;
        }
        uint64_t v73 = *(unsigned int *)(v63 + 24 * v65 + 20);
        if ((v73 - 6) <= 0xFFFFFFFA)
        {
          std::to_string(&v193, v73);
          std::string v171 = std::string::insert(&v193, 0, "tunneled_ane_unit_kernel: Unsupported top rank ");
          long long v172 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
          v194.__r_.__value_.__r.__words[2] = v171->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v172;
          v171->__r_.__value_.__l.__size_ = 0;
          v171->__r_.__value_.__r.__words[2] = 0;
          v171->__r_.__value_.__r.__words[0] = 0;
          if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v173 = &v194;
          }
          else {
            uint64_t v173 = (std::string *)v194.__r_.__value_.__r.__words[0];
          }
          Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v173);
        }
        if (v73 != 5) {
          break;
        }
LABEL_78:
        uint64_t v77 = *(void *)(a1 + 352);
        long long v78 = (unsigned int *)(v77 + 32 * v65);
        unint64_t v79 = *v78;
        if (v79 == -1)
        {
          long long v82 = v78 + 2;
          int v83 = *((char *)v78 + 31);
          if (v83 < 0)
          {
            if (*(void *)(v77 + 32 * v65 + 16) != 5) {
              goto LABEL_295;
            }
            long long v82 = (void *)*v82;
          }
          else if (v83 != 5)
          {
LABEL_295:
            uint64_t v116 = "tunneled_ane_unit_kernel: layout expected to be string of length 5 and a permutation of NDCHW";
            goto LABEL_297;
          }
          int v84 = 0;
          int v85 = 0;
          int v86 = 0;
          int v87 = 0;
          int v88 = 0;
          for (uint64_t j = 0; j != 5; ++j)
          {
            int v90 = *((char *)v82 + j);
            if (v90 <= 71)
            {
              if (v90 == 67)
              {
                int v88 = 1;
              }
              else
              {
                if (v90 != 68)
                {
LABEL_154:
                  uint64_t v116 = "tunneled_ane_unit_kernel: layout string contains character not in NDCHW";
                  goto LABEL_297;
                }
                int v85 = 1;
              }
            }
            else
            {
              switch(v90)
              {
                case 'H':
                  int v87 = 1;
                  break;
                case 'N':
                  int v84 = 1;
                  break;
                case 'W':
                  int v86 = 1;
                  break;
                default:
                  goto LABEL_154;
              }
            }
          }
          if (v84 & v85 & v88 & v87 & v86) {
            goto LABEL_104;
          }
          uint64_t v116 = "tunneled_ane_unit_kernel: layout string must contain all characters in NDCHW";
LABEL_297:
          Espresso::throw_exception_selector<Espresso::generic_error>(v116);
        }
        uint64_t v80 = *((unsigned __int8 *)v78 + 31);
        uint64_t v81 = *((void *)v78 + 2);
        if ((v80 & 0x80u) == 0) {
          uint64_t v81 = v80;
        }
        if (v81)
        {
          uint64_t v116 = "tunneled_ane_unit_kernel: top layout cannot be inherited and specified.";
          goto LABEL_297;
        }
        if ((v79 & 0x80000000) != 0 || ((uint64_t)(*(void *)(a1 + 336) - *(void *)(a1 + 328)) >> 5) - 1 < v79)
        {
          uint64_t v116 = "tunneled_ane_unit_kernel: Invalid index to inherit layout from bottom blob.";
          goto LABEL_297;
        }
LABEL_104:
        unint64_t v91 = v178[1];
        unint64_t v92 = v178[2];
        if (v91 >= v92)
        {
          uint64_t v95 = (uint64_t)(v91 - *v178) >> 6;
          unint64_t v96 = v95 + 1;
          if ((unint64_t)(v95 + 1) >> 58) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v97 = v92 - *v178;
          if (v97 >> 5 > v96) {
            unint64_t v96 = v97 >> 5;
          }
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v98 = 0x3FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v98 = v96;
          }
          long long v196 = v177;
          std::string v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v98);
          std::string::size_type v100 = (std::string::size_type)&v99[64 * v95];
          v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
          v194.__r_.__value_.__l.__size_ = v100;
          uint64_t v195 = &v99[64 * v101];
          *(_DWORD *)std::string::size_type v100 = v67;
          *(_DWORD *)(v100 + 4) = v68;
          *(_DWORD *)(v100 + 8) = v69;
          *(_DWORD *)(v100 + 12) = v70;
          *(_DWORD *)(v100 + 16) = v71;
          *(_DWORD *)(v100 + 20) = v73;
          *(_OWORD *)(v100 + 24) = 0u;
          *(_OWORD *)(v100 + 40) = 0u;
          *(void *)(v100 + 56) = 0;
          v194.__r_.__value_.__r.__words[2] = v100 + 64;
          long long v94 = v178;
          std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(v178, &v194);
          uint64_t v93 = v178[1];
          std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v194);
          uint64_t result = (uint64_t *)0xAAAAAAAAAAAAAAABLL;
        }
        else
        {
          *(_DWORD *)unint64_t v91 = v67;
          *(_DWORD *)(v91 + 4) = v68;
          *(_DWORD *)(v91 + 8) = v69;
          *(_DWORD *)(v91 + 12) = v70;
          *(_DWORD *)(v91 + 16) = v71;
          *(_DWORD *)(v91 + 20) = v73;
          uint64_t v93 = v91 + 64;
          *(_OWORD *)(v91 + 24) = 0u;
          *(_OWORD *)(v91 + 40) = 0u;
          *(void *)(v91 + 56) = 0;
          v178[1] = v91 + 64;
          long long v94 = v178;
        }
        v94[1] = v93;
        uint64_t v63 = *(void *)(a1 + 304);
        if (++v65 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 312) - v63) >> 3)) {
          goto LABEL_114;
        }
      }
      uint64_t v74 = 0;
      char v75 = 1;
      while (2)
      {
        int v76 = v71;
        switch(v74)
        {
          case 0:
            goto LABEL_76;
          case 1:
            int v76 = v70;
            goto LABEL_76;
          case 2:
            int v76 = v69;
            goto LABEL_76;
          case 3:
            int v76 = v68;
LABEL_76:
            v75 &= v76 == 1;
            if (5 - v73 != ++v74) {
              continue;
            }
            if (v75) {
              goto LABEL_78;
            }
            uint64_t v116 = "tunneled_ane_unit_kernel: dimensions not mapped to rank specified by layout must be 1";
            break;
          default:
            uint64_t v116 = "tunneled_ane_unit_kernel: Unexpected error";
            goto LABEL_297;
        }
        goto LABEL_297;
      }
    }
LABEL_114:
    if (*(char *)(a1 + 423) < 0)
    {
      if (*(void *)(a1 + 408)) {
        goto LABEL_116;
      }
    }
    else if (*(unsigned char *)(a1 + 423))
    {
LABEL_116:
      if (*(char *)(a1 + 399) < 0)
      {
        if (*(void *)(a1 + 384))
        {
LABEL_118:
          uint64_t v102 = a1 + 424;
          if (*(char *)(a1 + 447) < 0)
          {
            uint64_t v109 = *(void *)(a1 + 432);
            if (v109 != 4)
            {
              if (v109 == 5)
              {
                int v110 = *(unsigned __int8 *)(*(void *)v102 + 4);
                BOOL v111 = **(_DWORD **)v102 == 1953384789;
                int v112 = 56;
              }
              else
              {
                if (v109 != 7) {
                  goto LABEL_146;
                }
                int v110 = *(_DWORD *)(*(void *)v102 + 3);
                BOOL v111 = **(_DWORD **)v102 == 1634692166;
                int v112 = 909210721;
              }
              if (v111 && v110 == v112) {
                return result;
              }
LABEL_146:
              std::operator+<char>();
              if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string v115 = &v194;
              }
              else {
                std::string v115 = (std::string *)v194.__r_.__value_.__r.__words[0];
              }
              Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v115);
            }
            std::string v104 = *(_DWORD **)v102;
          }
          else
          {
            int v103 = *(unsigned __int8 *)(a1 + 447);
            std::string v104 = (_DWORD *)(a1 + 424);
            if (v103 != 4)
            {
              if (v103 == 5)
              {
                int v105 = *(unsigned __int8 *)(a1 + 428);
                BOOL v106 = *(_DWORD *)v102 == 1953384789;
                int v107 = 56;
              }
              else
              {
                if (v103 != 7) {
                  goto LABEL_146;
                }
                int v105 = *(_DWORD *)(a1 + 427);
                BOOL v106 = *(_DWORD *)v102 == 1634692166;
                int v107 = 909210721;
              }
              if (v106 && v105 == v107) {
                return result;
              }
              goto LABEL_146;
            }
          }
          if (*v104 == 947154505) {
            return result;
          }
          goto LABEL_146;
        }
      }
      else if (*(unsigned char *)(a1 + 399))
      {
        goto LABEL_118;
      }
      std::string v108 = "tunneled_ane_unit_kernel: Must specify unit_template.unit_type.";
LABEL_307:
      Espresso::throw_exception_selector<Espresso::generic_error>(v108);
    }
    std::string v108 = "tunneled_ane_unit_kernel: Must specify unit_template.unit_params.";
    goto LABEL_307;
  }
  if (v5 != 1)
  {
    std::to_string(&v193, v5);
    uint64_t v174 = std::string::insert(&v193, 0, "Unknown shape propagation type ");
    long long v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
    v194.__r_.__value_.__r.__words[2] = v174->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v175;
    v174->__r_.__value_.__l.__size_ = 0;
    v174->__r_.__value_.__r.__words[2] = 0;
    v174->__r_.__value_.__r.__words[0] = 0;
    if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v176 = &v194;
    }
    else {
      uint64_t v176 = (std::string *)v194.__r_.__value_.__r.__words[0];
    }
    Espresso::throw_exception_selector<Espresso::generic_error>((const char *)v176);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = a2[1];
  unint64_t v7 = ((char *)v6 - (char *)*a2) >> 6;
  unint64_t v8 = *a2;

  return std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a3, v8, v6, v7);
}

void sub_192A306C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (*(char *)(v56 - 185) < 0) {
    operator delete(*(void **)(v56 - 208));
  }
  if (*(char *)(v56 - 217) < 0) {
    operator delete(*(void **)(v56 - 240));
  }
  if (a56 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v56 - 153) < 0) {
    operator delete(*(void **)(v56 - 176));
  }
  if (*(char *)(v56 - 121) < 0) {
    operator delete(*(void **)(v56 - 144));
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_plane_rw_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v37 + 1) = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 284))
  {
    uint64_t v4 = *a2;
    uint64_t v5 = *((void *)*a2 + 4);
    long long v6 = (*a2)[1];
    *(_OWORD *)int v29 = **a2;
    *(_OWORD *)&v29[16] = v6;
    *(void *)&v29[32] = v5;
    long long v30 = 0uLL;
    uint64_t v31 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v30, *((const void **)v4 + 5), *((void *)v4 + 6), (uint64_t)(*((void *)v4 + 6) - *((void *)v4 + 5)) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    unint64_t v7 = (char *)operator new(0x40uLL);
    *a3 = v7;
    a3[1] = v7;
    a3[2] = v7 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)v29, (long long *)&v32, (uint64_t)v7);
    unint64_t v8 = (void *)v30;
    if (!(void)v30) {
      return;
    }
    *((void *)&v30 + 1) = v30;
    goto LABEL_37;
  }
  int v9 = *(_DWORD *)(a1 + 280);
  if (v9 > 875836533)
  {
    if (v9 <= 1886859823)
    {
      if (v9 != 875836534)
      {
        if (v9 != 1882468912 && v9 != 1885745712) {
          goto LABEL_39;
        }
        goto LABEL_31;
      }
LABEL_16:
      uint64_t v11 = *a2;
      long long v22 = **a2;
      std::string __p = 0;
      int v25 = 0;
      uint64_t v26 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v11 + 5), *((void *)v11 + 6), (uint64_t)(*((void *)v11 + 6) - *((void *)v11 + 5)) >> 2);
      *(_OWORD *)&unsigned char v29[24] = 0u;
      long long v30 = 0u;
      uint64_t v31 = 0;
      *(void *)int v29 = v22;
      *(_OWORD *)&v29[8] = xmmword_192DC5D50;
      long long v34 = 0u;
      long long v35 = 0u;
      uint64_t v36 = 0;
      uint64_t v32 = v22;
      long long v33 = xmmword_192DCA700;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      int v27 = a3;
      char v28 = 0;
      uint64_t v12 = (char *)operator new(0x80uLL);
      *a3 = v12;
      a3[1] = v12;
      a3[2] = v12 + 128;
      uint64_t v13 = 0;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)v29, &v37, (uint64_t)v12);
      do
      {
        uint64_t v14 = *(void **)((char *)&v35 + v13);
        if (v14)
        {
          *(void *)((char *)&v35 + v13 + 8) = v14;
          operator delete(v14);
        }
        v13 -= 64;
      }
      while (v13 != -128);
      goto LABEL_35;
    }
    BOOL v15 = v9 == 1886859824 || v9 == 2019963440;
    int v16 = 2016686640;
LABEL_26:
    if (!v15 && v9 != v16) {
LABEL_39:
    }
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unsupported 4CC in plane_rw");
    goto LABEL_31;
  }
  if (v9 <= 875704421)
  {
    BOOL v15 = v9 == 641230384;
    int v16 = 641234480;
    goto LABEL_26;
  }
  if (v9 != 875704422 && v9 != 875704438)
  {
    if (v9 != 875836518) {
      goto LABEL_39;
    }
    goto LABEL_16;
  }
LABEL_31:
  uint64_t v18 = *a2;
  long long v23 = **a2;
  std::string __p = 0;
  int v25 = 0;
  uint64_t v26 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v18 + 5), *((void *)v18 + 6), (uint64_t)(*((void *)v18 + 6) - *((void *)v18 + 5)) >> 2);
  *(_OWORD *)&unsigned char v29[24] = 0u;
  long long v30 = 0u;
  uint64_t v31 = 0;
  *(void *)int v29 = v23;
  *(_OWORD *)&v29[8] = xmmword_192DC5D50;
  long long v34 = 0uLL;
  long long v35 = 0uLL;
  uint64_t v36 = 0;
  LODWORD(v32) = (int)v23 / 2;
  HIDWORD(v32) = SDWORD1(v23) / 2;
  long long v33 = xmmword_192DCA700;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  int v27 = a3;
  char v28 = 0;
  uint64_t v19 = (char *)operator new(0x80uLL);
  *a3 = v19;
  a3[1] = v19;
  a3[2] = v19 + 128;
  uint64_t v20 = 0;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)v29, &v37, (uint64_t)v19);
  do
  {
    int v21 = *(void **)((char *)&v35 + v20);
    if (v21)
    {
      *(void *)((char *)&v35 + v20 + 8) = v21;
      operator delete(v21);
    }
    v20 -= 64;
  }
  while (v20 != -128);
LABEL_35:
  unint64_t v8 = __p;
  if (!__p) {
    return;
  }
  int v25 = __p;
LABEL_37:
  operator delete(v8);
}

uint64_t *Espresso::generic_rnn_arch_kernel_impl::cached_temp_layer_data(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100](a2);
  unint64_t v6 = v5;
  unint64_t v7 = *(void *)(a1 + 848);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    unint64_t v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v2 = v5;
      if (v5 >= v7) {
        unint64_t v2 = v5 % v7;
      }
    }
    else
    {
      unint64_t v2 = (v7 - 1) & v5;
    }
    uint64_t v10 = *(unsigned __int8 ***)(*(void *)(a1 + 840) + 8 * v2);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v12 = *((void *)i + 1);
        if (v12 == v6)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)a2)) {
            goto LABEL_77;
          }
        }
        else
        {
          if (v9 > 1)
          {
            if (v12 >= v7) {
              v12 %= v7;
            }
          }
          else
          {
            v12 &= v7 - 1;
          }
          if (v12 != v2) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 856);
  uint64_t v14 = operator new(0x30uLL);
  v40[0] = v14;
  v40[1] = a1 + 856;
  LOBYTE(v41) = 0;
  *uint64_t v14 = 0;
  v14[1] = v6;
  BOOL v15 = (std::string *)(v14 + 2);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v14[4] = *(void *)(a2 + 16);
  }
  v14[5] = 0;
  LOBYTE(v41) = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 864) + 1);
  float v17 = *(float *)(a1 + 872);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    BOOL v18 = 1;
    if (v7 >= 3) {
      BOOL v18 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v7);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v7 = *(void *)(a1 + 848);
    if (*(void *)&prime > v7) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 864) / *(float *)(a1 + 872));
      if (v7 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *(void *)(a1 + 848);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v22 = operator new(8 * *(void *)&prime);
          long long v23 = *(void **)(a1 + 840);
          *(void *)(a1 + 840) = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *(int8x8_t *)(a1 + 848) = prime;
          do
            *(void *)(*(void *)(a1 + 840) + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          int v25 = (void *)*v13;
          if (*v13)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 840) + 8 * v26) = v13;
            uint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  uint64_t v33 = *(void *)(a1 + 840);
                  if (!*(void *)(v33 + 8 * v32))
                  {
                    *(void *)(v33 + 8 * v32) = v25;
                    goto LABEL_58;
                  }
                  *int v25 = *v31;
                  *uint64_t v31 = **(void **)(*(void *)(a1 + 840) + 8 * v32);
                  **(void **)(*(void *)(a1 + 840) + 8 * v32) = v31;
                  uint64_t v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_58:
                int v25 = v31;
                uint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_62;
        }
        int v39 = *(void **)(a1 + 840);
        *(void *)(a1 + 840) = 0;
        if (v39) {
          operator delete(v39);
        }
        unint64_t v7 = 0;
        *(void *)(a1 + 848) = 0;
      }
    }
LABEL_62:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v2 = v6 % v7;
      }
      else {
        unint64_t v2 = v6;
      }
    }
    else
    {
      unint64_t v2 = (v7 - 1) & v6;
    }
  }
  long long v34 = *(unsigned __int8 ***)(*(void *)(a1 + 840) + 8 * v2);
  uint64_t i = (unsigned __int8 *)v40[0];
  if (v34)
  {
    *(void *)v40[0] = *v34;
LABEL_75:
    *long long v34 = i;
    goto LABEL_76;
  }
  *(void *)v40[0] = *(void *)(a1 + 856);
  *(void *)(a1 + 856) = i;
  *(void *)(*(void *)(a1 + 840) + 8 * v2) = v13;
  if (*(void *)i)
  {
    unint64_t v35 = *(void *)(*(void *)i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v35 >= v7) {
        v35 %= v7;
      }
    }
    else
    {
      v35 &= v7 - 1;
    }
    long long v34 = (unsigned __int8 **)(*(void *)(a1 + 840) + 8 * v35);
    goto LABEL_75;
  }
LABEL_76:
  v40[0] = 0;
  ++*(void *)(a1 + 864);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,void *>>>>::reset[abi:ne180100]((uint64_t)v40);
LABEL_77:
  uint64_t v37 = *((void *)i + 5);
  uint64_t v36 = (uint64_t *)(i + 40);
  if (!v37) {
    operator new();
  }
  return v36;
}

void sub_192A316F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34)
{
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<Espresso::layer_data>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

char *Espresso::generic_rnn_arch_kernel_impl::cached_temp_blob(void *a1, long long *a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, int a8)
{
  uint64_t v13 = a2;
  long long v34 = a2;
  BOOL v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 100), (unsigned __int8 *)a2, &v34);
  uint64_t v41 = 0;
  *(_OWORD *)uint64_t v40 = 0u;
  float v16 = (_DWORD *)*((void *)v15 + 5);
  long long v39 = 0u;
  long long v34 = (long long *)__PAIR64__(a4, a3);
  int v35 = a5;
  int v36 = a6;
  int v37 = 1;
  int v38 = a8;
  if (!v16 || v16[2] != a3 || v16[3] != a4 || v16[4] != a5 || v16[5] != a6) {
    goto LABEL_17;
  }
  Espresso::abstract_blob_container::shape((char *)&v29, (uint64_t)v16);
  if (v30 == 1) {
    int v17 = 4;
  }
  else {
    int v17 = 5;
  }
  if (v31 == -1) {
    int v18 = v17;
  }
  else {
    int v18 = v31;
  }
  if (a8 == -1) {
    a8 = 4;
  }
  if (__p)
  {
    uint64_t v33 = __p;
    operator delete(__p);
  }
  if (v18 != a8)
  {
LABEL_17:
    (*(void (**)(long long *__return_ptr))(**(void **)(a1[1] + 8) + 24))(&v29);
    long long v19 = v29;
    long long v29 = 0uLL;
    unint64_t v20 = (std::__shared_weak_count *)*((void *)v15 + 6);
    *(_OWORD *)(v15 + 40) = v19;
    if (v20)
    {
      nitro::nitro_function::nitro_function(v20);
      if (*((void *)&v29 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v29 + 1));
      }
    }
    int v21 = *((char *)v13 + 23);
    if (v21 < 0)
    {
      if (*((void *)v13 + 1) != 6)
      {
LABEL_28:
        BOOL v25 = 1;
LABEL_33:
        (*(void (**)(long long *__return_ptr, void *, uint64_t, BOOL))(*a1 + 24))(&v29, a1, 1, v25);
        uint64_t v26 = *((void *)v15 + 5);
        long long v28 = v29;
        if (*((void *)&v29 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, long long **, long long *))(*(void *)v26 + 16))(v26, &v34, &v28);
        if (*((void *)&v28 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v28 + 1));
        }
        if (*((void *)&v29 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v29 + 1));
        }
        if (v40[0])
        {
          v40[1] = v40[0];
          operator delete(v40[0]);
        }
        return v15 + 40;
      }
      uint64_t v13 = *(long long **)v13;
    }
    else if (v21 != 6)
    {
      goto LABEL_28;
    }
    unsigned int v22 = 1634887533;
    unsigned int v23 = bswap32(*(_DWORD *)v13);
    if (v23 == 1634887533 && (v23 = bswap32(*((unsigned __int16 *)v13 + 2)) >> 16, unsigned int v22 = 24952, v23 == 24952))
    {
      int v24 = 0;
    }
    else if (v23 < v22)
    {
      int v24 = -1;
    }
    else
    {
      int v24 = 1;
    }
    BOOL v25 = v24 != 0;
    goto LABEL_33;
  }
  return v15 + 40;
}

void sub_192A31A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::generic_rnn_arch_kernel_impl::cached_temp_blob(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v17 = *(std::string *)a2;
  }
  uint64_t v15 = (*(uint64_t (**)(_DWORD *, std::string *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD))(*(void *)a1 + 456))(a1, &v17, a3, a4, a5, a6, a7, a8, a1[154]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return v15;
}

void sub_192A31B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_cell_mgu(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, long long *a8, int a9)
{
  vDSP_Length __ldb = *(int *)(a1 + 380);
  int v14 = *(_DWORD *)(a1 + 384);
  int v15 = *(unsigned __int8 *)(a1 + 456);
  int v16 = a9 & a6;
  if (*(unsigned char *)(a1 + 456))
  {
    if (v16 != -1)
    {
      uint64_t v17 = *(unsigned int *)(*(void *)a5 + 12);
      std::string::basic_string[abi:ne180100]<0>(v140, "x1");
      *(void *)int __M = v17;
      uint64_t v18 = (*(uint64_t (**)(void))(*(void *)a1 + 448))();
      goto LABEL_6;
    }
LABEL_131:
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("cell mode MGU not supported");
  }
  if (v16 == -1) {
    goto LABEL_131;
  }
  uint64_t v19 = *(unsigned int *)(*(void *)a5 + 20);
  std::string::basic_string[abi:ne180100]<0>(v138, "x1");
  *(void *)int __M = v19;
  uint64_t v18 = (*(uint64_t (**)(void))(*(void *)a1 + 448))();
LABEL_6:
  unint64_t v20 = *(void **)v18;
  int v21 = *(std::__shared_weak_count **)(v18 + 8);
  *(void *)&long long v142 = *(void *)v18;
  *((void *)&v142 + 1) = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v15)
  {
    unsigned int v22 = (unsigned __int8 *)a1;
    if ((v141 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    unsigned int v23 = (void **)v140;
  }
  else
  {
    unsigned int v22 = (unsigned __int8 *)a1;
    if ((v139 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    unsigned int v23 = (void **)v138;
  }
  operator delete(*v23);
LABEL_14:
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v136, v20, v21);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v134, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
  memcpy(*(void **)(v136 + 24), (const void *)(*(void *)(v134 + 24) + 4 * __M[0] * v14 * a6), 4 * __M[0] * v14);
  int v24 = v22[456];
  if (v22[456])
  {
    std::string::basic_string[abi:ne180100]<0>(v131, "wx");
    BOOL v25 = (void *)(*(uint64_t (**)(unsigned __int8 *, void *, void, int *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v22 + 448))(v22, v131, (2 * __ldb), *(int **)__M, 1, 1, 1, 2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v129, "wx");
    BOOL v25 = (void *)(*(uint64_t (**)(unsigned __int8 *, void *, uint64_t, uint64_t, void, int *, uint64_t, uint64_t))(*(void *)v22 + 448))(v22, v129, 1, 1, (2 * __ldb), *(int **)__M, 1, 0xFFFFFFFFLL);
  }
  uint64_t v26 = (std::__shared_weak_count *)v25[1];
  *(void *)&long long v133 = *v25;
  *((void *)&v133 + 1) = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v24)
  {
    if ((v132 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    uint8x8_t v27 = (void **)v131;
  }
  else
  {
    if ((v130 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    uint8x8_t v27 = (void **)v129;
  }
  operator delete(*v27);
LABEL_25:
  std::string::size_type v119 = 0;
  uint64_t v120 = 0;
  unint64_t v92 = v26;
  Espresso::layer_data::layer_data(&v127, &v133, (uint64_t *)&v119);
  long long v28 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)v127, (uint64_t)v128, 0);
  if (v28)
  {
    uint64_t v29 = v28[20];
    int v30 = (std::__shared_weak_count *)v28[21];
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v30 = 0;
    uint64_t v29 = 0;
  }
  int v31 = (std::__shared_weak_count *)a2[1];
  uint64_t v125 = *a2;
  unsigned int v126 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v91 = v30;
  std::string::basic_string[abi:ne180100]<0>(__p, "x1");
  memset(v122, 0, sizeof(v122));
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v122, v127, v128, (v128 - v127) >> 4);
  std::string::size_type v119 = 0;
  uint64_t v120 = 0;
  Espresso::layer_data::layer_data(v121, &v142, (uint64_t *)&v119);
  Espresso::generic_rnn_arch_kernel_impl::__launch_matmul((uint64_t)v22, (uint64_t)&v125, (const void **)__p, v122, v121, *(void *)&v22[16 * a3 + 624], *(void *)&v22[16 * a3 + 488], *(void *)&v22[16 * a3 + 520]);
  std::string v117 = (void **)v121;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v117);
  std::string::size_type v119 = (char **)v122;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
  if (v124 < 0) {
    operator delete(__p[0]);
  }
  if (v126) {
    nitro::nitro_function::nitro_function(v126);
  }
  std::string v117 = 0;
  long long v118 = 0;
  Espresso::layer_data::layer_data(&v119, a8, (uint64_t *)&v117);
  unint64_t v32 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)v119, v120, 0);
  if (v32)
  {
    uint64_t v33 = (std::__shared_weak_count *)v32[21];
    uint64_t v94 = v32[20];
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v94 = 0;
  }
  int v90 = v33;
  int v34 = v22[456];
  if (v22[456])
  {
    std::string::basic_string[abi:ne180100]<0>(v115, "z");
    uint64_t v35 = (*(uint64_t (**)(unsigned __int8 *, void *, vDSP_Length, int *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v22 + 448))(v22, v115, __ldb, *(int **)__M, 1, 1, 1, 2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v113, "z");
    uint64_t v35 = (*(uint64_t (**)(unsigned __int8 *, void *, uint64_t, uint64_t, vDSP_Length, int *, uint64_t, uint64_t))(*(void *)v22 + 448))(v22, v113, 1, 1, __ldb, *(int **)__M, 1, 0xFFFFFFFFLL);
  }
  int v37 = *(void **)v35;
  int v36 = *(std::__shared_weak_count **)(v35 + 8);
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v34)
  {
    if ((v116 & 0x80000000) == 0) {
      goto LABEL_50;
    }
    int v38 = (void **)v115;
  }
  else
  {
    if ((v114 & 0x80000000) == 0) {
      goto LABEL_50;
    }
    int v38 = (void **)v113;
  }
  operator delete(*v38);
LABEL_50:
  uint64_t v89 = v36;
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v117, v37, v36);
  long long v39 = *(const float **)(v94 + 24);
  uint64_t v40 = &v22[16 * a3];
  (*(void (**)(uint64_t *__return_ptr))(**((void **)v40 + 82) + 416))(&v111);
  uint64_t v41 = v117;
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, __M[0], __ldb, __ldb, 1.0, v39, __ldb, *(const float **)(v111 + 16), __ldb, 0.0, (float *)v117[3], __ldb);
  int v85 = a8;
  if (v112) {
    nitro::nitro_function::nitro_function(v112);
  }
  uint64_t v42 = __M[0];
  if (__M[0])
  {
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = __M[0];
    do
    {
      vDSP_vadd((const float *)(*(void *)(v29 + 24) + v43), 1, (const float *)((char *)v41[3] + v44), 1, (float *)((char *)v41[3] + v44), 1, __ldb);
      v44 += 4 * __ldb;
      v43 += 8 * __ldb;
      --v45;
    }
    while (v45);
  }
  uint64_t v46 = 0;
  vDSP_Length v47 = *((int *)v41 + 2);
  do
  {
    v47 *= *(int *)((char *)v41 + v46 + 12);
    v46 += 4;
  }
  while (v46 != 12);
  Espresso::apply_nonlinearity2((const float *)v41[3], (float *)v41[3], v47, a1 + 320);
  int v48 = *(unsigned __int8 *)(a1 + 456);
  if (*(unsigned char *)(a1 + 456))
  {
    std::string::basic_string[abi:ne180100]<0>(v109, "hh");
    uint64_t v49 = (*(uint64_t (**)(uint64_t, void *, vDSP_Length, int *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 448))(a1, v109, __ldb, *(int **)__M, 1, 1, 1, 2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v107, "hh");
    uint64_t v49 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, vDSP_Length, int *, uint64_t, uint64_t))(*(void *)a1 + 448))(a1, v107, 1, 1, __ldb, *(int **)__M, 1, 0xFFFFFFFFLL);
  }
  int v50 = *(void **)v49;
  uint64_t v51 = *(std::__shared_weak_count **)(v49 + 8);
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v48)
  {
    if ((v110 & 0x80000000) == 0) {
      goto LABEL_68;
    }
    uint64_t v52 = (void **)v109;
  }
  else
  {
    if ((v108 & 0x80000000) == 0) {
      goto LABEL_68;
    }
    uint64_t v52 = (void **)v107;
  }
  operator delete(*v52);
LABEL_68:
  int v88 = v51;
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v111, v50, v51);
  int v53 = *(unsigned __int8 *)(a1 + 456);
  if (*(unsigned char *)(a1 + 456))
  {
    std::string::basic_string[abi:ne180100]<0>(v105, "hz");
    uint64_t v54 = (*(uint64_t (**)(uint64_t, void *, vDSP_Length, int *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 448))(a1, v105, __ldb, *(int **)__M, 1, 1, 1, 2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v103, "hz");
    uint64_t v54 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, vDSP_Length, int *, uint64_t, uint64_t))(*(void *)a1 + 448))(a1, v103, 1, 1, __ldb, *(int **)__M, 1, 0xFFFFFFFFLL);
  }
  uint64_t v56 = *(void **)v54;
  int v55 = *(std::__shared_weak_count **)(v54 + 8);
  if (v55) {
    atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v53)
  {
    if (v106 < 0)
    {
      int v57 = v55;
      int v58 = (void **)v105;
LABEL_78:
      operator delete(*v58);
      int v55 = v57;
    }
  }
  else if (v104 < 0)
  {
    int v57 = v55;
    int v58 = (void **)v103;
    goto LABEL_78;
  }
  int v86 = v55;
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v101, v56, v55);
  uint64_t v59 = 0;
  uint64_t v60 = v101;
  vDSP_Length v61 = *(int *)(v101 + 8);
  do
  {
    v61 *= *(int *)(v101 + 12 + v59);
    v59 += 4;
  }
  while (v59 != 12);
  vDSP_vmul(*(const float **)(v94 + 24), 1, (const float *)v41[3], 1, *(float **)(v101 + 24), 1, v61);
  int v62 = *(const float **)(v60 + 24);
  (*(void (**)(uint64_t *__return_ptr))(**((void **)v40 + 82) + 416))(&v99);
  uint64_t v63 = v111;
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, __M[0], __ldb, __ldb, 1.0, v62, __ldb, (const float *)(*(void *)(v99 + 16) + 4 * (__ldb * __ldb)), __ldb, 0.0, *(float **)(v111 + 24), __ldb);
  if (v100) {
    nitro::nitro_function::nitro_function(v100);
  }
  if (__M[0])
  {
    uint64_t v64 = 0;
    uint64_t v65 = 4 * __ldb;
    uint64_t v66 = __M[0];
    do
    {
      vDSP_vadd((const float *)(*(void *)(v29 + 24) + v65), 1, (const float *)(*(void *)(v63 + 24) + v64), 1, (float *)(*(void *)(v63 + 24) + v64), 1, __ldb);
      v64 += 4 * __ldb;
      v65 += 8 * __ldb;
      --v66;
    }
    while (v66);
  }
  uint64_t v67 = 0;
  vDSP_Length v68 = *(int *)(v63 + 8);
  do
  {
    v68 *= *(int *)(v63 + 12 + v67);
    v67 += 4;
  }
  while (v67 != 12);
  Espresso::apply_nonlinearity2(*(const float **)(v63 + 24), *(float **)(v63 + 24), v68, a1 + 308);
  unint64_t v69 = 0;
  unint64_t v70 = *(int *)(v63 + 8);
  while (1)
  {
    uint64_t v71 = 0;
    unint64_t v72 = v70;
    do
    {
      v72 *= *(int *)(v63 + 12 + v71);
      v71 += 4;
    }
    while (v71 != 12);
    if (v69 >= v72) {
      break;
    }
    float v73 = *((float *)v41[3] + v69);
    *(float *)(*(void *)(v63 + 24) + 4 * v69) = (float)((float)(1.0 - v73)
                                                        * *(float *)(*(void *)(v63 + 24) + 4 * v69))
                                                + (float)(v73 * *(float *)(*(void *)(v94 + 24) + 4 * v69));
    ++v69;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v99, *(void **)a7, *(std::__shared_weak_count **)(a7 + 8));
  uint64_t v74 = *(_DWORD **)a7;
  int v75 = *(_DWORD *)(*(void *)a7 + 8);
  int v76 = *(_DWORD *)(*(void *)a7 + 12) * v75;
  if (!*(unsigned char *)(a1 + 456))
  {
    int v75 = v76 * v74[4];
    int v76 = v75 * v74[5];
  }
  int v77 = __M[0] * __ldb;
  int v78 = *(_DWORD *)(a1 + 452);
  if (v78)
  {
    if (v78 == 1 && __M[0])
    {
      uint64_t v79 = 0;
      size_t v80 = 4 * __ldb;
      uint64_t v81 = v99;
      uint64_t v82 = 4 * v76 * (uint64_t)v84 + 4 * (int)__ldb * a3;
      uint64_t v83 = 4 * v75;
      do
      {
        memcpy((void *)(*(void *)(v81 + 24) + v82), (const void *)(*(void *)(v63 + 24) + v79), v80);
        v79 += v80;
        v82 += v83;
        --v42;
      }
      while (v42);
    }
  }
  else
  {
    memcpy((void *)(*(void *)(v99 + 24) + 4 * v77 * v84), *(const void **)(v63 + 24), 4 * v77);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v97, *(void **)v85, *((std::__shared_weak_count **)v85 + 1));
  memcpy(*(void **)(v97 + 24), *(const void **)(v63 + 24), 4 * v77);
  if (v98) {
    nitro::nitro_function::nitro_function(v98);
  }
  if (v100) {
    nitro::nitro_function::nitro_function(v100);
  }
  if (v102) {
    nitro::nitro_function::nitro_function(v102);
  }
  if (v86) {
    nitro::nitro_function::nitro_function(v86);
  }
  if (v112) {
    nitro::nitro_function::nitro_function(v112);
  }
  if (v88) {
    nitro::nitro_function::nitro_function(v88);
  }
  if (v118) {
    nitro::nitro_function::nitro_function(v118);
  }
  if (v89) {
    nitro::nitro_function::nitro_function(v89);
  }
  if (v90) {
    nitro::nitro_function::nitro_function(v90);
  }
  std::string v117 = (void **)&v119;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v117);
  if (v91) {
    nitro::nitro_function::nitro_function(v91);
  }
  std::string::size_type v119 = &v127;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
  if (v92) {
    nitro::nitro_function::nitro_function(v92);
  }
  if (v135) {
    nitro::nitro_function::nitro_function(v135);
  }
  if (v137) {
    nitro::nitro_function::nitro_function(v137);
  }
  if (*((void *)&v142 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v142 + 1));
  }
}

void sub_192A3281C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, std::__shared_weak_count *a17, std::__shared_weak_count *a18, std::__shared_weak_count *a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a47) {
    nitro::nitro_function::nitro_function(a47);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a55) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a55);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  a54 = (uint64_t)&a56;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  a56 = (uint64_t)&a70;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  unint64_t v72 = *(std::__shared_weak_count **)(v70 - 176);
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
  float v73 = *(std::__shared_weak_count **)(v70 - 160);
  if (v73) {
    nitro::nitro_function::nitro_function(v73);
  }
  uint64_t v74 = *(std::__shared_weak_count **)(v70 - 96);
  if (v74) {
    nitro::nitro_function::nitro_function(v74);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_matmul(uint64_t a1, uint64_t a2, const void **a3, uint64_t **a4, uint64_t **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)&long long v39 = *MEMORY[0x1E4F143B8];
  if (a7)
  {
    if (*((char *)a3 + 23) >= 0) {
      size_t v16 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v16 = (size_t)a3[1];
    }
    uint64_t v17 = v31;
    std::string::basic_string[abi:ne180100]((uint64_t)v31, v16 + 12);
    if (v32 < 0) {
      uint64_t v17 = (void **)v31[0];
    }
    if (v16)
    {
      if (*((char *)a3 + 23) >= 0) {
        uint64_t v18 = a3;
      }
      else {
        uint64_t v18 = *a3;
      }
      memmove(v17, v18, v16);
    }
    strcpy((char *)v17 + v16, "_quant_input");
    Espresso::abstract_blob_container::shape((char *)&v35, **a5);
    long long v28 = 0;
    uint64_t v29 = 0;
    int v30 = 0;
    uint64_t v33 = &v28;
    char v34 = 0;
    long long v28 = (void **)operator new(0x40uLL);
    uint64_t v29 = v28;
    int v30 = v28 + 8;
    uint64_t v29 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v30, &v35, &v39, (uint64_t)v28);
    uint64_t v19 = *(uint64_t ***)(*(uint64_t (**)(uint64_t, void **, uint64_t, void ***))(*(void *)a1 + 464))(a1, v31, a7, &v28);
    uint64_t v33 = &v28;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
    if (__p)
    {
      int v38 = __p;
      operator delete(__p);
    }
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t **, uint64_t **))(*(void *)a7 + 16))(a7, a2, v19, a5);
    unint64_t v20 = *a5;
    uint64_t v22 = **v19;
    uint64_t v21 = (*v19)[1];
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v23 = (std::__shared_weak_count *)v20[1];
    *unint64_t v20 = v22;
    v20[1] = v21;
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t **, uint64_t **))(*(void *)a6 + 16))(a6, a2, a4, a5);
  if (a8)
  {
    long long v35 = 0uLL;
    uint64_t v36 = 0;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(&v35, *v19, v19[1], ((char *)v19[1] - (char *)*v19) >> 4);
    int v24 = (void *)v35;
    uint64_t v26 = **a4;
    uint64_t v25 = (*a4)[1];
    if (v25) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
    }
    uint8x8_t v27 = (std::__shared_weak_count *)v24[1];
    void *v24 = v26;
    v24[1] = v25;
    if (v27) {
      nitro::nitro_function::nitro_function(v27);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t **, long long *))(*(void *)a8 + 16))(a8, a2, a4, &v35);
    long long v28 = (void **)&v35;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v28);
  }
}

void sub_192A32DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
}

void Espresso::apply_nonlinearity2(const float *a1, float *__C, vDSP_Length __N, uint64_t a4)
{
  vDSP_Length v4 = __N;
  unint64_t v5 = __C;
  switch(*(_DWORD *)a4)
  {
    case 0:
    case 4:
      float v7 = *(float *)(a4 + 4);
      float v6 = *(float *)(a4 + 8);
      LODWORD(__Na) = __N;
      float __B = v6 * -2.0;
      float v12 = 1.0;
      vDSP_vsmul(a1, 1, &__B, __C, 1, (int)__N);
      vvexpf(v5, v5, (const int *)&__Na);
      vDSP_vsadd(v5, 1, &v12, v5, 1, (int)__Na);
      vvrecf(v5, v5, (const int *)&__Na);
      float __Ca = -v7;
      float v11 = v7 + v7;
      vDSP_vsmsa(v5, 1, &v11, &__Ca, v5, 1, (int)__Na);
      break;
    case 1:
      LODWORD(__Na) = 0;
      vDSP_vthr(a1, 1, (const float *)&__Na, __C, 1, __N);
      break;
    case 2:
      float __B = 1.0;
      LODWORD(__Na) = __N;
      vDSP_vneg(a1, 1, __C, 1, (int)__N);
      vvexpf(v5, v5, (const int *)&__Na);
      vDSP_vsadd(v5, 1, &__B, v5, 1, (int)__Na);
      vvrecf(v5, v5, (const int *)&__Na);
      break;
    case 3:
      LODWORD(__Na) = 1045220557;
      float v12 = 0.0;
      float __B = 0.5;
      float v11 = 1.0;
      vDSP_vsmsa(a1, 1, (const float *)&__Na, &__B, __C, 1, __N);
      vDSP_vclip(v5, 1, &v12, &v11, v5, 1, v4);
      break;
    case 5:
      if (__N)
      {
        do
        {
          float v8 = *a1++;
          float v9 = v8;
          if (v8 < *(float *)(a4 + 4)) {
            float v9 = *(float *)(a4 + 8);
          }
          *v5++ = v9;
          --v4;
        }
        while (v4);
      }
      break;
    case 6:
      vDSP_vsmul(a1, 1, (const float *)(a4 + 4), __C, 1, __N);
      break;
    default:
      return;
  }
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_cell_gru()
{
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "GRU Not implemented");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192A330D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_cell_rnn(uint64_t **a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int a9)
{
  size_t v16 = a1 + 35;
  std::string::basic_string[abi:ne180100]<0>(&v97, "W_h");
  uint64_t v95 = (char *)&v97;
  uint64_t v17 = (std::__shared_weak_count *)*((void *)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16, &v97, (_OWORD **)&v95)+ 8);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v99 < 0) {
    operator delete(v97);
  }
  std::string::basic_string[abi:ne180100]<0>(&v97, "W_x");
  uint64_t v53 = a7;
  uint64_t v95 = (char *)&v97;
  uint64_t v18 = (std::__shared_weak_count *)*((void *)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16, &v97, (_OWORD **)&v95)+ 8);
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v99 < 0) {
    operator delete(v97);
  }
  std::string::basic_string[abi:ne180100]<0>(&v97, "b");
  uint64_t v95 = (char *)&v97;
  uint64_t v19 = (std::__shared_weak_count *)*((void *)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16, &v97, (_OWORD **)&v95)+ 8);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v99 < 0) {
    operator delete(v97);
  }
  if ((a9 & a6) == 0xFFFFFFFF)
  {
    uint64_t v95 = 0;
    unint64_t v96 = 0;
    Espresso::layer_data::layer_data(&v97, (long long *)a8, (uint64_t *)&v95);
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v33 = v18;
    Espresso::layer_data::layer_data(&v95, (long long *)a5, (uint64_t *)&v93);
    long long v92 = 0uLL;
    Espresso::layer_data::layer_data(&v93, (long long *)v53, (uint64_t *)&v92);
    char v34 = (std::__shared_weak_count *)a2[1];
    uint64_t v90 = *a2;
    unint64_t v91 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v88, "h");
    memset(v87, 0, sizeof(v87));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v87, v93, v94, (v94 - (char *)v93) >> 4);
    memset(v86, 0, sizeof(v86));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v86, v97, v98, (v98 - (char *)v97) >> 4);
    Espresso::generic_rnn_arch_kernel_impl::__launch_matmul((uint64_t)a1, (uint64_t)&v90, v88, v87, v86, (uint64_t)a1[2 * a3 + 82], (uint64_t)a1[2 * a3 + 69], (uint64_t)a1[2 * a3 + 73]);
    *(void *)&long long v92 = v86;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
    *(void *)&long long v92 = v87;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
    if (v89 < 0) {
      operator delete((void *)v88[0]);
    }
    if (v91) {
      nitro::nitro_function::nitro_function(v91);
    }
    long long v35 = (std::__shared_weak_count *)a2[1];
    uint64_t v84 = *a2;
    int v85 = v35;
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v82, "x");
    memset(v81, 0, sizeof(v81));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v81, v93, v94, (v94 - (char *)v93) >> 4);
    memset(v80, 0, sizeof(v80));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v80, v95, v96, (v96 - v95) >> 4);
    Espresso::generic_rnn_arch_kernel_impl::__launch_matmul((uint64_t)a1, (uint64_t)&v84, (const void **)v82, v81, v80, (uint64_t)a1[2 * a3 + 78], (uint64_t)a1[2 * a3 + 61], (uint64_t)a1[2 * a3 + 65]);
    *(void *)&long long v92 = v80;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
    *(void *)&long long v92 = v81;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
    if (v83 < 0) {
      operator delete(v82[0]);
    }
    if (v85) {
      nitro::nitro_function::nitro_function(v85);
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v92, *(void **)v53, *(std::__shared_weak_count **)(v53 + 8));
    uint64_t v36 = 0;
    vDSP_Length v37 = *(int *)(v92 + 8);
    do
    {
      v37 *= *(int *)(v92 + 12 + v36);
      v36 += 4;
    }
    while (v36 != 12);
    Espresso::apply_nonlinearity2(*(const float **)(v92 + 24), *(float **)(v92 + 24), v37, a4 + 4);
    if (*((void *)&v92 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v92 + 1));
    }
    *(void *)&long long v92 = &v93;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
    uint64_t v93 = (void **)&v95;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v93);
    uint64_t v95 = (char *)&v97;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    if (v19) {
      goto LABEL_76;
    }
  }
  else
  {
    uint64_t v51 = v19;
    uint64_t v52 = v17;
    uint64_t v20 = *(unsigned int *)(a4 + 76);
    uint64_t v21 = *(unsigned int *)(a4 + 80);
    uint64_t v22 = 12;
    if (!*((unsigned char *)a1 + 456)) {
      uint64_t v22 = 20;
    }
    uint64_t v23 = *(unsigned int *)(*(void *)a5 + v22);
    std::string::basic_string[abi:ne180100]<0>(__p, "tmp");
    int v24 = (void *)((uint64_t (*)(uint64_t **, void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1)[56])(a1, __p, 1, 1, v20, v23, 1, 0xFFFFFFFFLL);
    uint64_t v25 = (std::__shared_weak_count *)v24[1];
    *(void *)&long long v92 = *v24;
    *((void *)&v92 + 1) = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v50 = v25;
    if (v79 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v75, "x1");
    uint64_t v26 = ((uint64_t (*)(uint64_t **, void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1)[56])(a1, v75, 1, 1, v21, v23, 1, 0xFFFFFFFFLL);
    uint8x8_t v27 = *(void **)v26;
    long long v28 = *(std::__shared_weak_count **)(v26 + 8);
    *(void *)&long long v77 = *(void *)v26;
    *((void *)&v77 + 1) = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v76 < 0) {
      operator delete(v75[0]);
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v73, v27, v28);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v71, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
    int v29 = *(_DWORD *)(*(void *)a5 + 12)
        * *(_DWORD *)(*(void *)a5 + 8)
        * *(_DWORD *)(*(void *)a5 + 16)
        * *(_DWORD *)(*(void *)a5 + 20);
    memcpy(*(void **)(v73 + 24), (const void *)(*(void *)(v71 + 24) + 4 * v29 * a6), 4 * v29);
    uint64_t v95 = 0;
    unint64_t v96 = 0;
    Espresso::layer_data::layer_data(&v97, &v92, (uint64_t *)&v95);
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    Espresso::layer_data::layer_data(&v95, (long long *)a8, (uint64_t *)&v93);
    unint64_t v69 = 0;
    uint64_t v70 = 0;
    Espresso::layer_data::layer_data(&v93, &v77, (uint64_t *)&v69);
    int v30 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)v97, (uint64_t)v98, 0);
    if (v30)
    {
      uint64_t v32 = *((void *)v30 + 20);
      int v31 = (std::__shared_weak_count *)*((void *)v30 + 21);
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v32 = 0;
      int v31 = 0;
    }
    int v38 = &a1[2 * a3];
    if (!v38[78])
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "weights not set");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v39 = (std::__shared_weak_count *)a2[1];
    uint64_t v67 = *a2;
    vDSP_Length v68 = v39;
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v65, "x1");
    memset(v64, 0, sizeof(v64));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v64, v97, v98, (v98 - (char *)v97) >> 4);
    memset(v63, 0, sizeof(v63));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v63, v93, v94, (v94 - (char *)v93) >> 4);
    Espresso::generic_rnn_arch_kernel_impl::__launch_matmul((uint64_t)a1, (uint64_t)&v67, (const void **)v65, v64, v63, (uint64_t)v38[78], (uint64_t)a1[2 * a3 + 61], (uint64_t)a1[2 * a3 + 65]);
    unint64_t v69 = (void **)v63;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v69);
    unint64_t v69 = (void **)v64;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v69);
    if (v66 < 0) {
      operator delete(v65[0]);
    }
    if (v68) {
      nitro::nitro_function::nitro_function(v68);
    }
    uint64_t v40 = (std::__shared_weak_count *)a2[1];
    uint64_t v61 = *a2;
    int v62 = v40;
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v59, "h");
    memset(v58, 0, sizeof(v58));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v58, v97, v98, (v98 - (char *)v97) >> 4);
    memset(v57, 0, sizeof(v57));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v57, v95, v96, (v96 - v95) >> 4);
    Espresso::generic_rnn_arch_kernel_impl::__launch_matmul((uint64_t)a1, (uint64_t)&v61, (const void **)v59, v58, v57, (uint64_t)a1[2 * a3 + 82], (uint64_t)a1[2 * a3 + 69], (uint64_t)a1[2 * a3 + 73]);
    unint64_t v69 = (void **)v57;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v69);
    unint64_t v69 = (void **)v58;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v69);
    if (v60 < 0) {
      operator delete(v59[0]);
    }
    if (v62) {
      nitro::nitro_function::nitro_function(v62);
    }
    uint64_t v41 = 0;
    vDSP_Length v42 = *(int *)(v32 + 8);
    do
    {
      v42 *= *(int *)(v32 + 12 + v41);
      v41 += 4;
    }
    while (v41 != 12);
    Espresso::apply_nonlinearity2(*(const float **)(v32 + 24), *(float **)(v32 + 24), v42, a4 + 4);
    int v43 = *(_DWORD *)(*(void *)v53 + 8);
    int v44 = *(_DWORD *)(*(void *)v53 + 12);
    int v46 = *(_DWORD *)(*(void *)v53 + 16);
    int v45 = *(_DWORD *)(*(void *)v53 + 20);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v69, *(void **)v53, *(std::__shared_weak_count **)(v53 + 8));
    int v47 = v44 * v43 * v46 * v45;
    size_t v48 = 4 * v47;
    memcpy((char *)v69[3] + 4 * v47 * a9, *(const void **)(v32 + 24), v48);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v55, *(void **)a8, *(std::__shared_weak_count **)(a8 + 8));
    memcpy(*(void **)(v55 + 24), *(const void **)(v32 + 24), v48);
    uint64_t v33 = v18;
    uint64_t v19 = v51;
    if (v56) {
      nitro::nitro_function::nitro_function(v56);
    }
    if (v70) {
      nitro::nitro_function::nitro_function(v70);
    }
    if (v31) {
      nitro::nitro_function::nitro_function(v31);
    }
    unint64_t v69 = (void **)&v93;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v69);
    uint64_t v93 = (void **)&v95;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v93);
    uint64_t v95 = (char *)&v97;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    if (v72) {
      nitro::nitro_function::nitro_function(v72);
    }
    if (v74) {
      nitro::nitro_function::nitro_function(v74);
    }
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
    if (v50) {
      nitro::nitro_function::nitro_function(v50);
    }
    uint64_t v17 = v52;
    if (v51) {
LABEL_76:
    }
      nitro::nitro_function::nitro_function(v19);
  }
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
}

void sub_192A339B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  __cxa_free_exception(v45);
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  a39 = v47 - 160;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  *(void *)(v47 - 160) = v47 - 136;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v47 - 160));
  *(void *)(v47 - 136) = v47 - 112;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v47 - 136));
  if (a42) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a42);
  }
  if (a44) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a44);
  }
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  _Unwind_Resume(a1);
}

void sub_192A33CD4()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x192A33CACLL);
}

void sub_192A33CF0()
{
}

void sub_192A33CFC()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x192A33CBCLL);
}

void sub_192A33D18()
{
}

void sub_192A33D24()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x192A33CCCLL);
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_cell_lstm(unsigned char *a1, uint64_t *a2, uint64_t a3, uint64_t a4, long long *a5, int a6, uint64_t *a7, long long *a8, long long *a9, int a10, int a11)
{
  uint64_t v16 = *(void *)a5;
  uint64_t v17 = (4 * *(_DWORD *)(a4 + 76));
  if ((a10 & a6) == 0xFFFFFFFF)
  {
    if (a1[456])
    {
      uint64_t v23 = *(unsigned int *)(v16 + 12);
      std::string::basic_string[abi:ne180100]<0>(v128, "ifog");
      int v24 = (long long *)(*(uint64_t (**)(unsigned char *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 448))(a1, v128, v17, v23, 1, 1, 1, 2);
      if ((v129 & 0x80000000) == 0) {
        goto LABEL_25;
      }
      uint64_t v25 = (void **)v128;
    }
    else
    {
      uint64_t v23 = *(unsigned int *)(v16 + 20);
      std::string::basic_string[abi:ne180100]<0>(v126, "ifog");
      int v24 = (long long *)(*(uint64_t (**)(unsigned char *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 448))(a1, v126, 1, 1, v17, v23, 1, 0xFFFFFFFFLL);
      if ((v127 & 0x80000000) == 0) {
        goto LABEL_25;
      }
      uint64_t v25 = (void **)v126;
    }
    operator delete(*v25);
LABEL_25:
    if (a1[456])
    {
      std::string::basic_string[abi:ne180100]<0>(v124, "ifog_h");
      int v31 = (long long *)(*(uint64_t (**)(unsigned char *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 448))(a1, v124, v17, v23, 1, 1, 1, 2);
      if ((v125 & 0x80000000) == 0) {
        goto LABEL_31;
      }
      uint64_t v32 = (void **)v124;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v122, "ifog_h");
      int v31 = (long long *)(*(uint64_t (**)(unsigned char *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 448))(a1, v122, 1, 1, v17, v23, 1, 0xFFFFFFFFLL);
      if ((v123 & 0x80000000) == 0) {
        goto LABEL_31;
      }
      uint64_t v32 = (void **)v122;
    }
    operator delete(*v32);
LABEL_31:
    long long v118 = 0;
    std::string::size_type v119 = 0;
    Espresso::layer_data::layer_data(&v120, v24, (uint64_t *)&v118);
    std::string v117 = 0;
    char v116 = 0;
    Espresso::layer_data::layer_data(&v118, v31, (uint64_t *)&v116);
    std::string v115 = 0;
    char v114 = 0;
    Espresso::layer_data::layer_data(&v116, a8, (uint64_t *)&v114);
    size_t v80 = 0;
    uint64_t v81 = 0;
    Espresso::layer_data::layer_data(&v114, a5, (uint64_t *)&v80);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v80, (uint64_t *)v24);
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v112, (uint64_t *)v31);
    uint64_t v33 = (std::__shared_weak_count *)a2[1];
    uint64_t v110 = *a2;
    uint64_t v111 = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "h");
    memset(v107, 0, sizeof(v107));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v107, v118, v119, (v119 - (char *)v118) >> 4);
    memset(v106, 0, sizeof(v106));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v106, v116, v117, (v117 - (char *)v116) >> 4);
    Espresso::generic_rnn_arch_kernel_impl::__launch_matmul((uint64_t)a1, (uint64_t)&v110, (const void **)__p, v107, v106, *(void *)&a1[16 * (int)a3 + 656], *(void *)&a1[16 * (int)a3 + 552], *(void *)&a1[16 * (int)a3 + 584]);
    int v86 = (void **)v106;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v86);
    int v86 = (void **)v107;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v86);
    if (v109 < 0) {
      operator delete(__p[0]);
    }
    if (v111) {
      nitro::nitro_function::nitro_function(v111);
    }
    char v34 = (std::__shared_weak_count *)a2[1];
    uint64_t v104 = *a2;
    int v105 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v102, "x");
    memset(v101, 0, sizeof(v101));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v101, v120, v121, (v121 - v120) >> 4);
    memset(v100, 0, sizeof(v100));
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v100, v114, v115, (v115 - (char *)v114) >> 4);
    Espresso::generic_rnn_arch_kernel_impl::__launch_matmul((uint64_t)a1, (uint64_t)&v104, (const void **)v102, v101, v100, *(void *)&a1[16 * (int)a3 + 624], *(void *)&a1[16 * (int)a3 + 488], *(void *)&a1[16 * (int)a3 + 520]);
    int v86 = (void **)v100;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v86);
    int v86 = (void **)v101;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v86);
    if (v103 < 0) {
      operator delete(v102[0]);
    }
    if (v105) {
      nitro::nitro_function::nitro_function(v105);
    }
    uint64_t v35 = 0;
    vDSP_Length v36 = *((int *)v80 + 2);
    do
    {
      v36 *= *(int *)((char *)v80 + v35 + 12);
      v35 += 4;
    }
    while (v35 != 12);
    vDSP_vadd((const float *)v80[3], 1, *(const float **)(v112 + 24), 1, (float *)v80[3], 1, v36);
    (*(void (**)(unsigned char *, uint64_t *, uint64_t, long long *, long long *, long long *))(*(void *)a1 + 440))(a1, a2, a3, a8, a9, v24);
    if (v113) {
      nitro::nitro_function::nitro_function(v113);
    }
    vDSP_Length v37 = (std::__shared_weak_count *)v81;
    if (v81) {
      goto LABEL_93;
    }
    goto LABEL_94;
  }
  HIDWORD(v61) = a10;
  uint64_t v19 = *(unsigned int *)(a4 + 80);
  if (a1[456])
  {
    uint64_t v20 = *(unsigned int *)(v16 + 12);
    std::string::basic_string[abi:ne180100]<0>(v98, "ifog");
    uint64_t v21 = (long long *)(*(uint64_t (**)(unsigned char *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 448))(a1, v98, v17, v20, 1, 1, 1, 2);
    if ((v99 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    uint64_t v22 = (void **)v98;
  }
  else
  {
    uint64_t v20 = *(unsigned int *)(v16 + 20);
    std::string::basic_string[abi:ne180100]<0>(v96, "ifog");
    uint64_t v21 = (long long *)(*(uint64_t (**)(unsigned char *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 448))(a1, v96, 1, 1, v17, v20, 1, 0xFFFFFFFFLL);
    if ((v97 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    uint64_t v22 = (void **)v96;
  }
  operator delete(*v22);
LABEL_11:
  if (a1[456])
  {
    std::string::basic_string[abi:ne180100]<0>(v94, "ifog_h");
    uint64_t v26 = (long long *)(*(uint64_t (**)(unsigned char *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 448))(a1, v94, v17, v20, 1, 1, 1, 2);
    if ((v95 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    uint8x8_t v27 = (void **)v94;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v92, "ifog_h");
    uint64_t v26 = (long long *)(*(uint64_t (**)(unsigned char *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 448))(a1, v92, 1, 1, v17, v20, 1, 0xFFFFFFFFLL);
    if ((v93 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    uint8x8_t v27 = (void **)v92;
  }
  operator delete(*v27);
LABEL_17:
  long long v118 = 0;
  std::string::size_type v119 = 0;
  Espresso::layer_data::layer_data(&v120, v21, (uint64_t *)&v118);
  std::string v117 = 0;
  char v116 = 0;
  Espresso::layer_data::layer_data(&v118, v26, (uint64_t *)&v116);
  std::string v115 = 0;
  char v114 = 0;
  Espresso::layer_data::layer_data(&v116, a8, (uint64_t *)&v114);
  size_t v80 = 0;
  uint64_t v81 = 0;
  Espresso::layer_data::layer_data(&v114, a9, (uint64_t *)&v80);
  if (!a1[456])
  {
    std::string::basic_string[abi:ne180100]<0>(v88, "x1");
    LODWORD(v61) = (*(uint64_t (**)(void))(**(void **)a5 + 32))();
    long long v28 = (uint64_t *)(*(uint64_t (**)(unsigned char *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 456))(a1, v88, 1, 1, v19, v20, 1, 0xFFFFFFFFLL, v61);
    if (v89 < 0)
    {
      int v29 = (void **)v88;
      goto LABEL_50;
    }
LABEL_21:
    int v30 = (uint64_t *)a8;
    goto LABEL_51;
  }
  std::string::basic_string[abi:ne180100]<0>(v90, "x1");
  LODWORD(v61) = (*(uint64_t (**)(void))(**(void **)a5 + 32))();
  long long v28 = (uint64_t *)(*(uint64_t (**)(unsigned char *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 456))(a1, v90, v19, v20, 1, 1, 1, 2, v61);
  if ((v91 & 0x80000000) == 0) {
    goto LABEL_21;
  }
  int v29 = (void **)v90;
LABEL_50:
  int v30 = (uint64_t *)a8;
  operator delete(*v29);
LABEL_51:
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v112, v28);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v86, (uint64_t *)a5);
  int v38 = *(_DWORD *)(*(void *)a5 + 12)
      * *(_DWORD *)(*(void *)a5 + 8)
      * *(_DWORD *)(*(void *)a5 + 16)
      * *(_DWORD *)(*(void *)a5 + 20);
  if (a1[456]) {
    int v38 = *(_DWORD *)(*(void *)a5 + 12) * *(_DWORD *)(*(void *)a5 + 8);
  }
  memcpy(*(void **)(v112 + 24), (char *)v86[3] + 4 * v38 * a6, 4 * v38);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v84, (uint64_t *)v21);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v82, (uint64_t *)v26);
  int v78 = 0;
  char v79 = 0;
  Espresso::layer_data::layer_data(&v80, (long long *)v28, (uint64_t *)&v78);
  long long v39 = &a1[16 * (int)a3];
  if (!*((void *)v39 + 78)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_rnn_arch_kernel_impl: LSTM weights not set");
  }
  uint64_t v40 = (std::__shared_weak_count *)a2[1];
  uint64_t v76 = *a2;
  long long v77 = v40;
  if (v40) {
    atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v74, "x1");
  memset(v73, 0, sizeof(v73));
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v73, v120, v121, (v121 - v120) >> 4);
  memset(v72, 0, sizeof(v72));
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v72, v80, v81, (v81 - (char *)v80) >> 4);
  Espresso::generic_rnn_arch_kernel_impl::__launch_matmul((uint64_t)a1, (uint64_t)&v76, (const void **)v74, v73, v72, *((void *)v39 + 78), *(void *)&a1[16 * (int)a3 + 488], *(void *)&a1[16 * (int)a3 + 520]);
  int v78 = (void **)v72;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v78);
  int v78 = (void **)v73;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v78);
  if (v75 < 0) {
    operator delete(v74[0]);
  }
  if (v77) {
    nitro::nitro_function::nitro_function(v77);
  }
  uint64_t v41 = (std::__shared_weak_count *)a2[1];
  uint64_t v70 = *a2;
  uint64_t v71 = v41;
  if (v41) {
    atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v68, "h");
  memset(v67, 0, sizeof(v67));
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v67, v118, v119, (v119 - (char *)v118) >> 4);
  memset(v66, 0, sizeof(v66));
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v66, v116, v117, (v117 - (char *)v116) >> 4);
  Espresso::generic_rnn_arch_kernel_impl::__launch_matmul((uint64_t)a1, (uint64_t)&v70, (const void **)v68, v67, v66, *(void *)&a1[16 * (int)a3 + 656], *(void *)&a1[16 * (int)a3 + 552], *(void *)&a1[16 * (int)a3 + 584]);
  int v78 = (void **)v66;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v78);
  int v78 = (void **)v67;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v78);
  if (v69 < 0) {
    operator delete(v68[0]);
  }
  if (v71) {
    nitro::nitro_function::nitro_function(v71);
  }
  uint64_t v42 = 0;
  vDSP_Length v43 = *(int *)(v84 + 8);
  do
  {
    v43 *= *(int *)(v84 + 12 + v42);
    v42 += 4;
  }
  while (v42 != 12);
  vDSP_vadd(*(const float **)(v84 + 24), 1, *(const float **)(v82 + 24), 1, *(float **)(v84 + 24), 1, v43);
  (*(void (**)(unsigned char *, uint64_t *, uint64_t, uint64_t *, long long *, long long *))(*(void *)a1 + 440))(a1, a2, a3, v30, a9, v21);
  if (a1[456]) {
    int v44 = *(_DWORD *)(*a7 + 12) * *(_DWORD *)(*a7 + 8);
  }
  else {
    int v44 = *(_DWORD *)(*a7 + 12) * *(_DWORD *)(*a7 + 8) * *(_DWORD *)(*a7 + 16) * *(_DWORD *)(*a7 + 20);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v78, a7);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v64, v30);
  uint64_t v45 = v64;
  int v46 = *(_DWORD *)(v64 + 8);
  uint64_t v47 = *a7;
  int v48 = *(_DWORD *)(*a7 + 8);
  if (a1[456])
  {
    uint64_t v49 = (unsigned int *)(v47 + 12);
    BOOL v50 = v46 == v48;
    int v51 = *(_DWORD *)(v64 + 8);
  }
  else
  {
    v48 *= *(_DWORD *)(v47 + 12) * *(_DWORD *)(v47 + 16);
    int v51 = *(_DWORD *)(v64 + 12) * v46 * *(_DWORD *)(v64 + 16);
    BOOL v50 = v51 == v48;
    uint64_t v49 = (unsigned int *)(v47 + 20);
  }
  uint64_t v52 = *v49;
  if ((int)v52 < 2 || v50)
  {
    uint64_t v59 = 0;
    uint64_t v60 = v46;
    do
    {
      v60 *= *(int *)(v64 + 12 + v59);
      v59 += 4;
    }
    while (v59 != 12);
    memcpy((char *)v78[3] + 4 * v44 * v62 + 4 * a11, *(const void **)(v64 + 24), 4 * v60);
  }
  else
  {
    uint64_t v53 = 0;
    int v54 = v44 * v62;
    size_t v55 = 4 * v51;
    uint64_t v56 = v78;
    uint64_t v57 = 4 * a11 + 4 * v54;
    uint64_t v58 = 4 * v48;
    do
    {
      memcpy((char *)v56[3] + v57, (const void *)(*(void *)(v45 + 24) + v53), v55);
      v53 += v55;
      v57 += v58;
      --v52;
    }
    while (v52);
  }
  if (v65) {
    nitro::nitro_function::nitro_function(v65);
  }
  if (v79) {
    nitro::nitro_function::nitro_function(v79);
  }
  int v78 = (void **)&v80;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v78);
  if (v83) {
    nitro::nitro_function::nitro_function(v83);
  }
  if (v85) {
    nitro::nitro_function::nitro_function(v85);
  }
  if (v87) {
    nitro::nitro_function::nitro_function(v87);
  }
  vDSP_Length v37 = v113;
  if (v113) {
LABEL_93:
  }
    nitro::nitro_function::nitro_function(v37);
LABEL_94:
  size_t v80 = (void **)&v114;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v80);
  char v114 = (void **)&v116;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v114);
  char v116 = (void **)&v118;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v116);
  long long v118 = (void **)&v120;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v118);
}

void sub_192A34AA4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_cell(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t a10)
{
  a1[154] = (*(uint64_t (**)(void))(*(void *)*a5 + 32))();
  switch(*(_DWORD *)a4)
  {
    case 0:
      uint64_t v18 = (std::__shared_weak_count *)a2[1];
      uint64_t v83 = *a2;
      uint64_t v84 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v19 = *(_OWORD *)(a4 + 112);
      v81[6] = *(_OWORD *)(a4 + 96);
      v81[7] = v19;
      uint64_t v82 = *(void *)(a4 + 128);
      long long v20 = *(_OWORD *)(a4 + 48);
      uint64_t v81[2] = *(_OWORD *)(a4 + 32);
      v81[3] = v20;
      long long v21 = *(_OWORD *)(a4 + 80);
      v81[4] = *(_OWORD *)(a4 + 64);
      v81[5] = v21;
      long long v22 = *(_OWORD *)(a4 + 16);
      v81[0] = *(_OWORD *)a4;
      v81[1] = v22;
      uint64_t v23 = (std::__shared_weak_count *)a5[1];
      uint64_t v79 = *a5;
      size_t v80 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v24 = (std::__shared_weak_count *)a7[1];
      uint64_t v77 = *a7;
      int v78 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v25 = (std::__shared_weak_count *)a8[1];
      uint64_t v75 = *a8;
      uint64_t v76 = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v26 = (std::__shared_weak_count *)a9[1];
      uint64_t v73 = *a9;
      uint64_t v74 = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(_DWORD *, uint64_t *, uint64_t, _OWORD *, uint64_t *, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 408))(a1, &v83, a3, v81, &v79, a6, &v77, &v75, &v73, a10);
      if (v74) {
        nitro::nitro_function::nitro_function(v74);
      }
      if (v76) {
        nitro::nitro_function::nitro_function(v76);
      }
      if (v78) {
        nitro::nitro_function::nitro_function(v78);
      }
      if (v80) {
        nitro::nitro_function::nitro_function(v80);
      }
      uint8x8_t v27 = v84;
      if (!v84) {
        return;
      }
      goto LABEL_53;
    case 1:
      int v44 = (std::__shared_weak_count *)a2[1];
      uint64_t v93 = *a2;
      uint64_t v94 = v44;
      if (v44) {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v45 = *(_OWORD *)(a4 + 112);
      v91[6] = *(_OWORD *)(a4 + 96);
      v91[7] = v45;
      uint64_t v92 = *(void *)(a4 + 128);
      long long v46 = *(_OWORD *)(a4 + 48);
      void v91[2] = *(_OWORD *)(a4 + 32);
      v91[3] = v46;
      long long v47 = *(_OWORD *)(a4 + 80);
      v91[4] = *(_OWORD *)(a4 + 64);
      v91[5] = v47;
      long long v48 = *(_OWORD *)(a4 + 16);
      v91[0] = *(_OWORD *)a4;
      v91[1] = v48;
      uint64_t v49 = (std::__shared_weak_count *)a5[1];
      uint64_t v89 = *a5;
      uint64_t v90 = v49;
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v50 = (std::__shared_weak_count *)a7[1];
      uint64_t v87 = *a7;
      int v88 = v50;
      if (v50) {
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v51 = (std::__shared_weak_count *)a8[1];
      uint64_t v85 = *a8;
      int v86 = v51;
      if (v51) {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(_DWORD *, uint64_t *, uint64_t, _OWORD *, uint64_t *, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 416))(a1, &v93, a3, v91, &v89, a6, &v87, &v85, a10);
      if (v86) {
        nitro::nitro_function::nitro_function(v86);
      }
      if (v88) {
        nitro::nitro_function::nitro_function(v88);
      }
      if (v90) {
        nitro::nitro_function::nitro_function(v90);
      }
      uint8x8_t v27 = v94;
      if (!v94) {
        return;
      }
      goto LABEL_53;
    case 2:
      long long v28 = (std::__shared_weak_count *)a2[1];
      uint64_t v71 = *a2;
      unint64_t v72 = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v29 = *(_OWORD *)(a4 + 112);
      v69[6] = *(_OWORD *)(a4 + 96);
      v69[7] = v29;
      uint64_t v70 = *(void *)(a4 + 128);
      long long v30 = *(_OWORD *)(a4 + 48);
      v69[2] = *(_OWORD *)(a4 + 32);
      v69[3] = v30;
      long long v31 = *(_OWORD *)(a4 + 80);
      v69[4] = *(_OWORD *)(a4 + 64);
      v69[5] = v31;
      long long v32 = *(_OWORD *)(a4 + 16);
      v69[0] = *(_OWORD *)a4;
      v69[1] = v32;
      uint64_t v33 = (std::__shared_weak_count *)a5[1];
      uint64_t v67 = *a5;
      vDSP_Length v68 = v33;
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v34 = (std::__shared_weak_count *)a7[1];
      uint64_t v65 = *a7;
      char v66 = v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v35 = (std::__shared_weak_count *)a8[1];
      uint64_t v63 = *a8;
      uint64_t v64 = v35;
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(_DWORD *, uint64_t *, uint64_t, _OWORD *, uint64_t *, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 424))(a1, &v71, a3, v69, &v67, a6, &v65, &v63, a10);
      if (v64) {
        nitro::nitro_function::nitro_function(v64);
      }
      if (v66) {
        nitro::nitro_function::nitro_function(v66);
      }
      if (v68) {
        nitro::nitro_function::nitro_function(v68);
      }
      uint8x8_t v27 = v72;
      if (!v72) {
        return;
      }
      goto LABEL_53;
    case 3:
      vDSP_Length v36 = (std::__shared_weak_count *)a2[1];
      uint64_t v61 = *a2;
      int v62 = v36;
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v37 = *(_OWORD *)(a4 + 112);
      v59[6] = *(_OWORD *)(a4 + 96);
      v59[7] = v37;
      uint64_t v60 = *(void *)(a4 + 128);
      long long v38 = *(_OWORD *)(a4 + 48);
      v59[2] = *(_OWORD *)(a4 + 32);
      v59[3] = v38;
      long long v39 = *(_OWORD *)(a4 + 80);
      v59[4] = *(_OWORD *)(a4 + 64);
      v59[5] = v39;
      long long v40 = *(_OWORD *)(a4 + 16);
      v59[0] = *(_OWORD *)a4;
      v59[1] = v40;
      uint64_t v41 = (std::__shared_weak_count *)a5[1];
      uint64_t v57 = *a5;
      uint64_t v58 = v41;
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v42 = (std::__shared_weak_count *)a7[1];
      uint64_t v55 = *a7;
      uint64_t v56 = v42;
      if (v42) {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      vDSP_Length v43 = (std::__shared_weak_count *)a8[1];
      uint64_t v53 = *a8;
      int v54 = v43;
      if (v43) {
        atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(_DWORD *, uint64_t *, uint64_t, _OWORD *, uint64_t *, uint64_t, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 432))(a1, &v61, a3, v59, &v57, a6, &v55, &v53, a10);
      if (v54) {
        nitro::nitro_function::nitro_function(v54);
      }
      if (v56) {
        nitro::nitro_function::nitro_function(v56);
      }
      if (v58) {
        nitro::nitro_function::nitro_function(v58);
      }
      uint8x8_t v27 = v62;
      if (v62) {
LABEL_53:
      }
        nitro::nitro_function::nitro_function(v27);
      return;
    default:
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "invalid value");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
}

void sub_192A3535C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_encoder(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  float v7 = (uint64_t *)*a4;
  v108[0] = a1;
  v108[1] = v7;
  v107[0] = a3;
  v107[1] = v108;
  void v107[2] = (uint64_t *)a1;
  void v107[3] = a4;
  v107[4] = a2;
  float v8 = (uint64_t *)*a3;
  uint64_t v105 = 0;
  char v106 = 0;
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  Espresso::generic_rnn_arch_kernel_impl::__launch_encoder(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1::operator()(&v101, v107, 0);
  char v99 = &v105;
  std::string::size_type v100 = &v103;
  std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::shared_ptr<Espresso::abstract_blob_container> &,std::shared_ptr<Espresso::abstract_blob_container> &>,std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container>>,std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container>,0ul,1ul>((uint64_t *)&v99, &v101);
  if (v102) {
    nitro::nitro_function::nitro_function(v102);
  }
  if (*((void *)&v101 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v101 + 1));
  }
  uint64_t v9 = 16;
  if (!*(unsigned char *)(a1 + 456)) {
    uint64_t v9 = 24;
  }
  if (*(unsigned char *)(a1 + 457))
  {
    uint64_t v10 = a4[1];
    float v11 = *(std::__shared_weak_count **)(v10 - 8);
    v98[0] = *(void *)(v10 - 16);
    v98[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::sync_copy_to_host(&v101, v98);
    float v12 = **(float **)(v101 + 24);
    if (*((void *)&v101 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v101 + 1));
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v101, v8);
    uint64_t v13 = 0;
    int v14 = (int)v12;
    uint64_t v15 = *(int *)(v101 + 8);
    do
    {
      v15 *= *(int *)(v101 + 12 + v13);
      v13 += 4;
    }
    while (v13 != 12);
    bzero(*(void **)(v101 + 24), 4 * v15);
    if (*((void *)&v101 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v101 + 1));
    }
  }
  else
  {
    int v14 = *(_DWORD *)(*v7 + v9);
  }
  uint64_t v16 = (_OWORD *)(a1 + 304);
  if (v14 >= 1)
  {
    uint64_t v17 = 0;
    do
    {
      if (*(_DWORD *)(a1 + 448))
      {
        uint64_t v18 = a2[1];
        uint64_t v96 = *a2;
        char v97 = (std::__shared_weak_count *)v18;
        if (v18) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
        }
        long long v19 = *(_OWORD *)(a1 + 352);
        void v94[2] = *(_OWORD *)(a1 + 336);
        v94[3] = v19;
        uint64_t v95 = *(void *)(a1 + 432);
        long long v20 = *(_OWORD *)(a1 + 416);
        v94[6] = *(_OWORD *)(a1 + 400);
        v94[7] = v20;
        long long v21 = *(_OWORD *)(a1 + 384);
        v94[4] = *(_OWORD *)(a1 + 368);
        v94[5] = v21;
        long long v22 = *(_OWORD *)(a1 + 320);
        v94[0] = *v16;
        v94[1] = v22;
        uint64_t v23 = (std::__shared_weak_count *)v7[1];
        uint64_t v92 = *v7;
        uint64_t v93 = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v24 = (std::__shared_weak_count *)v8[1];
        uint64_t v90 = *v8;
        char v91 = v24;
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v88 = v105;
        uint64_t v89 = v106;
        if (v106) {
          atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v86 = v103;
        uint64_t v87 = v104;
        if (v104) {
          atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void, _OWORD *, uint64_t *, uint64_t, uint64_t *, uint64_t *, uint64_t *, void))(*(void *)a1 + 400))(a1, &v96, 0, v94, &v92, v17, &v90, &v88, &v86, v17);
        if (v87) {
          nitro::nitro_function::nitro_function(v87);
        }
        if (v89) {
          nitro::nitro_function::nitro_function(v89);
        }
        if (v91) {
          nitro::nitro_function::nitro_function(v91);
        }
        if (v93) {
          nitro::nitro_function::nitro_function(v93);
        }
        uint64_t v25 = v97;
        if (!v97) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v26 = a2[1];
        uint64_t v84 = *a2;
        uint64_t v85 = (std::__shared_weak_count *)v26;
        if (v26) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
        }
        long long v27 = *(_OWORD *)(a1 + 352);
        uint64_t v82[2] = *(_OWORD *)(a1 + 336);
        v82[3] = v27;
        uint64_t v83 = *(void *)(a1 + 432);
        long long v28 = *(_OWORD *)(a1 + 416);
        v82[6] = *(_OWORD *)(a1 + 400);
        v82[7] = v28;
        long long v29 = *(_OWORD *)(a1 + 384);
        v82[4] = *(_OWORD *)(a1 + 368);
        v82[5] = v29;
        long long v30 = *(_OWORD *)(a1 + 320);
        v82[0] = *v16;
        v82[1] = v30;
        long long v31 = (std::__shared_weak_count *)v7[1];
        uint64_t v80 = *v7;
        uint64_t v81 = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v32 = (std::__shared_weak_count *)v8[1];
        uint64_t v78 = *v8;
        uint64_t v79 = v32;
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v76 = v105;
        uint64_t v77 = v106;
        if (v106) {
          atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v74 = v103;
        uint64_t v75 = v104;
        if (v104) {
          atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void, _OWORD *, uint64_t *, uint64_t, uint64_t *, uint64_t *, uint64_t *, void))(*(void *)a1 + 400))(a1, &v84, 0, v82, &v80, v17, &v78, &v76, &v74, 0);
        if (v75) {
          nitro::nitro_function::nitro_function(v75);
        }
        if (v77) {
          nitro::nitro_function::nitro_function(v77);
        }
        if (v79) {
          nitro::nitro_function::nitro_function(v79);
        }
        if (v81) {
          nitro::nitro_function::nitro_function(v81);
        }
        uint64_t v25 = v85;
        if (!v85) {
          goto LABEL_42;
        }
      }
      nitro::nitro_function::nitro_function(v25);
LABEL_42:
      uint64_t v17 = (v17 + 1);
    }
    while (v14 != v17);
  }
  if (*(_DWORD *)(a1 + 452) == 1)
  {
    Espresso::generic_rnn_arch_kernel_impl::__launch_encoder(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1::operator()(&v101, v107, 1);
    char v99 = &v105;
    std::string::size_type v100 = &v103;
    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::shared_ptr<Espresso::abstract_blob_container> &,std::shared_ptr<Espresso::abstract_blob_container> &>,std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container>>,std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container>,0ul,1ul>((uint64_t *)&v99, &v101);
    if (v102) {
      nitro::nitro_function::nitro_function(v102);
    }
    if (*((void *)&v101 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v101 + 1));
    }
    if (v14 >= 1)
    {
      for (unsigned int i = v14 + 1; i > 1; --i)
      {
        if (*(_DWORD *)(a1 + 448))
        {
          uint64_t v34 = a2[1];
          uint64_t v72 = *a2;
          uint64_t v73 = (std::__shared_weak_count *)v34;
          if (v34) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
          }
          long long v35 = *(_OWORD *)(a1 + 352);
          v70[2] = *(_OWORD *)(a1 + 336);
          v70[3] = v35;
          uint64_t v71 = *(void *)(a1 + 432);
          long long v36 = *(_OWORD *)(a1 + 416);
          v70[6] = *(_OWORD *)(a1 + 400);
          v70[7] = v36;
          long long v37 = *(_OWORD *)(a1 + 384);
          v70[4] = *(_OWORD *)(a1 + 368);
          v70[5] = v37;
          long long v38 = *(_OWORD *)(a1 + 320);
          v70[0] = *v16;
          v70[1] = v38;
          long long v39 = (std::__shared_weak_count *)v7[1];
          uint64_t v68 = *v7;
          char v69 = v39;
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v40 = (std::__shared_weak_count *)v8[1];
          uint64_t v66 = *v8;
          uint64_t v67 = v40;
          if (v40) {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v64 = v105;
          uint64_t v65 = v106;
          if (v106) {
            atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v62 = v103;
          uint64_t v63 = v104;
          if (v104) {
            atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t, _OWORD *, uint64_t *))(*(void *)a1 + 400))(a1, &v72, 1, v70, &v68);
          if (v63) {
            nitro::nitro_function::nitro_function(v63);
          }
          if (v65) {
            nitro::nitro_function::nitro_function(v65);
          }
          if (v67) {
            nitro::nitro_function::nitro_function(v67);
          }
          if (v69) {
            nitro::nitro_function::nitro_function(v69);
          }
          uint64_t v41 = v73;
          if (!v73) {
            continue;
          }
        }
        else
        {
          uint64_t v42 = a2[1];
          uint64_t v60 = *a2;
          uint64_t v61 = (std::__shared_weak_count *)v42;
          if (v42) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
          }
          long long v43 = *(_OWORD *)(a1 + 352);
          v58[2] = *(_OWORD *)(a1 + 336);
          v58[3] = v43;
          uint64_t v59 = *(void *)(a1 + 432);
          long long v44 = *(_OWORD *)(a1 + 416);
          v58[6] = *(_OWORD *)(a1 + 400);
          v58[7] = v44;
          long long v45 = *(_OWORD *)(a1 + 384);
          v58[4] = *(_OWORD *)(a1 + 368);
          v58[5] = v45;
          long long v46 = *(_OWORD *)(a1 + 320);
          v58[0] = *v16;
          v58[1] = v46;
          long long v47 = (std::__shared_weak_count *)v7[1];
          uint64_t v56 = *v7;
          uint64_t v57 = v47;
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v48 = (std::__shared_weak_count *)v8[1];
          uint64_t v54 = *v8;
          uint64_t v55 = v48;
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v52 = v105;
          uint64_t v53 = v106;
          if (v106) {
            atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v50 = v103;
          int v51 = v104;
          if (v104) {
            atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          LODWORD(v49) = 0;
          HIDWORD(v49) = *(_DWORD *)(a1 + 380);
          (*(void (**)(uint64_t, uint64_t *, uint64_t, _OWORD *, uint64_t *, void, uint64_t *, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 400))(a1, &v60, 1, v58, &v56, i - 2, &v54, &v52, &v50, v49);
          if (v51) {
            nitro::nitro_function::nitro_function(v51);
          }
          if (v53) {
            nitro::nitro_function::nitro_function(v53);
          }
          if (v55) {
            nitro::nitro_function::nitro_function(v55);
          }
          if (v57) {
            nitro::nitro_function::nitro_function(v57);
          }
          uint64_t v41 = v61;
          if (!v61) {
            continue;
          }
        }
        nitro::nitro_function::nitro_function(v41);
      }
    }
  }
  if (v104) {
    nitro::nitro_function::nitro_function(v104);
  }
  if (v106) {
    nitro::nitro_function::nitro_function(v106);
  }
}

void sub_192A35B34(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 184);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  vDSP_Length v4 = *(std::__shared_weak_count **)(v1 - 168);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_encoder(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1::operator()(void *a1, uint64_t **a2, int a3)
{
  unint64_t v5 = a2[2];
  unint64_t v6 = (2 * a3) | 1u;
  uint64_t v7 = **a2;
  if (v6 >= ((*a2)[1] - v7) >> 4)
  {
    Espresso::generic_rnn_arch_kernel_impl::__launch_encoder(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0::operator()((uint64_t *)&v32, a2[1]);
    uint64_t v9 = (void *)v32;
  }
  else
  {
    long long v8 = *(_OWORD *)(v7 + 16 * v6);
    long long v32 = v8;
    uint64_t v9 = (void *)v8;
    if (*((void *)&v8 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 1uLL, memory_order_relaxed);
    }
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v32 + 1);
  if (*((void *)&v32 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if (!*((_DWORD *)v5 + 76))
  {
    uint64_t v11 = **a2;
    if (v6 + 1 >= ((*a2)[1] - v11) >> 4)
    {
      Espresso::generic_rnn_arch_kernel_impl::__launch_encoder(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0::operator()((uint64_t *)__p, a2[1]);
      uint64_t v9 = __p[0];
    }
    else
    {
      long long v12 = *(_OWORD *)(v11 + 16 * (v6 + 1));
      *(_OWORD *)std::string __p = v12;
      uint64_t v9 = (void *)v12;
      if (*((void *)&v12 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
      }
    }
    uint64_t v13 = (std::__shared_weak_count *)__p[1];
    __p[0] = 0;
    __p[1] = 0;
    if (v10)
    {
      nitro::nitro_function::nitro_function(v10);
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
    }
    uint64_t v10 = v13;
  }
  uint64_t v14 = *a2[3];
  if (v6 < (a2[3][1] - v14) >> 4)
  {
    long long v15 = *(_OWORD *)(v14 + 16 * v6);
    *(_OWORD *)std::string __p = v15;
    if (*((void *)&v15 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = (uint64_t)a2[4];
    uint64_t v17 = (std::__shared_weak_count *)*((void *)&v32 + 1);
    long long v31 = v32;
    if (*((void *)&v32 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    Espresso::axpby_closure::operator()(v5 + 86, v16, (long long *)__p, (uint64_t *)&v31, 1, 1.0, 0.0);
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    if (!*((_DWORD *)v5 + 76))
    {
      long long v18 = *(_OWORD *)(*a2[3] + 16 * v6 + 16);
      long long v30 = v18;
      if (*((void *)&v18 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = (uint64_t)a2[4];
      v29[0] = (uint64_t)v9;
      v29[1] = (uint64_t)v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::axpby_closure::operator()(v5 + 86, v19, &v30, v29, 1, 1.0, 0.0);
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      if (*((void *)&v30 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v30 + 1));
      }
    }
    goto LABEL_51;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "h0");
  *(void *)&long long v30 = __p;
  uint64_t v20 = *((void *)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v5 + 35, __p, (_OWORD **)&v30)+ 7);
  if (v28 < 0)
  {
    operator delete(__p[0]);
    if (!v20) {
      goto LABEL_36;
    }
  }
  else if (!v20)
  {
LABEL_36:
    (*(void (**)(void **__return_ptr))(*(void *)v32 + 56))(__p);
    uint64_t v21 = 0;
    uint64_t v22 = *((int *)__p[0] + 2);
    do
    {
      v22 *= *(int *)((char *)__p[0] + v21 + 12);
      v21 += 4;
    }
    while (v21 != 12);
    if (v22) {
      bzero(*((void **)__p[0] + 3), 4 * v22);
    }
    (*(void (**)(void, uint64_t *, void **))(*(void *)v32 + 48))(v32, a2[4], __p);
    if (__p[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "c0");
  *(void *)&long long v30 = __p;
  uint64_t v23 = *((void *)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v5 + 35, __p, (_OWORD **)&v30)+ 7);
  if (v28 < 0)
  {
    operator delete(__p[0]);
    if (v23) {
      goto LABEL_53;
    }
  }
  else if (v23)
  {
    goto LABEL_53;
  }
  (*(void (**)(void **__return_ptr, void *))(*(void *)v9 + 56))(__p, v9);
  uint64_t v24 = 0;
  uint64_t v25 = *((int *)__p[0] + 2);
  do
  {
    v25 *= *(int *)((char *)__p[0] + v24 + 12);
    v24 += 4;
  }
  while (v24 != 12);
  if (v25) {
    bzero(*((void **)__p[0] + 3), 4 * v25);
  }
  (*(void (**)(void *, uint64_t *, void **))(*(void *)v9 + 48))(v9, a2[4], __p);
LABEL_51:
  if (__p[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
  }
LABEL_53:
  uint64_t v26 = *((void *)&v32 + 1);
  *a1 = v32;
  a1[1] = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = v9;
  a1[3] = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    nitro::nitro_function::nitro_function(v10);
  }
  if (*((void *)&v32 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v32 + 1));
  }
}

void sub_192A360A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::__shared_weak_count *a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  _Unwind_Resume(exception_object);
}

void std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::shared_ptr<Espresso::abstract_blob_container> &,std::shared_ptr<Espresso::abstract_blob_container> &>,std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container>>,std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container>,0ul,1ul>(uint64_t *a1, long long *a2)
{
  uint64_t v4 = *a1;
  long long v5 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t v6 = *(std::__shared_weak_count **)(v4 + 8);
  *(_OWORD *)uint64_t v4 = v5;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = a1[1];
  long long v8 = a2[1];
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 8);
  *(_OWORD *)uint64_t v7 = v8;
  if (v9)
  {
    nitro::nitro_function::nitro_function(v9);
  }
}

void Espresso::generic_rnn_arch_kernel_impl::__launch_encoder(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  (*(void (**)(void, uint64_t))(**(void **)(*(void *)(*a2 + 8) + 8) + 24))(*(void *)(*(void *)(*a2 + 8) + 8), *a2 + 8);
  if (*(unsigned char *)(v4 + 456))
  {
    unsigned int v5 = *(_DWORD *)(v4 + 380);
    unsigned int v6 = *(_DWORD *)(*(void *)a2[1] + 12);
    uint64_t v20 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v18 = 0u;
    unint64_t v16 = __PAIR64__(v6, v5);
    long long v17 = xmmword_192DCA710;
    uint64_t v7 = *a1;
    uint64_t v14 = 0;
    long long v15 = 0;
    (*(void (**)(uint64_t, unint64_t *, uint64_t *))(*(void *)v7 + 16))(v7, &v16, &v14);
    long long v8 = v15;
    if (!v15) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v9 = *a1;
  unsigned int v10 = *(_DWORD *)(v4 + 380);
  unsigned int v11 = *(_DWORD *)(*(void *)a2[1] + 20);
  uint64_t v20 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v18 = 0u;
  unint64_t v16 = 0x100000001;
  *(void *)&long long v17 = __PAIR64__(v11, v10);
  *((void *)&v17 + 1) = 0xFFFFFFFF00000001;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  (*(void (**)(uint64_t, unint64_t *, uint64_t *))(*(void *)v9 + 16))(v9, &v16, &v12);
  long long v8 = v13;
  if (v13) {
LABEL_3:
  }
    nitro::nitro_function::nitro_function(v8);
LABEL_4:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_192A3631C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v19 + 8);
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::axpby_closure::operator()(void *a1, uint64_t a2, long long *a3, uint64_t *a4, uint64_t a5, float a6, float a7)
{
  if (*a1)
  {
    if (*(void *)(*(void *)a3 + 72) != *(void *)(*a1 + 8))
    {
      uint64_t v14 = (std::__shared_weak_count *)a1[1];
      *a1 = 0;
      a1[1] = 0;
      if (v14) {
        nitro::nitro_function::nitro_function(v14);
      }
    }
  }
  if (!*(void *)a3 || !*a4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected null blobs");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v15 = (const void *)*a1;
  if (!*a1)
  {
    uint64_t v37 = 0;
    long long v36 = 0u;
    long long v35 = 0u;
    unint64_t v33 = __PAIR64__(LODWORD(a7), LODWORD(a6));
    int v34 = a5;
    Espresso::abstract_engine_factory::shared(&v30);
    uint64_t v16 = v30;
    uint64_t v17 = *(void *)a3;
    std::string::basic_string[abi:ne180100]<0>(__p, "axpby");
    long long v18 = *(uint64_t (****)(void))(*(void *)(*(void *)a3 + 72) + 8);
    int v27 = (**v18)(v18);
    (*(void (**)(void))(**(void **)a3 + 32))();
    Espresso::abstract_engine_factory::make_kernel_priv(v16, v17 + 72, (uint64_t)__p, (uint64_t)&v33, &v27);
    long long v19 = v32;
    long long v32 = 0uLL;
    uint64_t v20 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v19;
    if (v20)
    {
      nitro::nitro_function::nitro_function(v20);
      if (*((void *)&v32 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v32 + 1));
      }
    }
    if (v29 < 0) {
      operator delete(__p[0]);
    }
    if (v31) {
      nitro::nitro_function::nitro_function(v31);
    }
    long long v15 = (const void *)*a1;
    if (!*a1) {
      goto LABEL_28;
    }
  }
  if (!v21)
  {
LABEL_28:
    uint64_t v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Inconsistent state");
    __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v22 = (std::__shared_weak_count *)a1[1];
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, uint64_t, float, float))(*(void *)v21 + 328))(v21, a5, a6, a7);
  if (*(void *)(*(void *)a3 + 72) != *(void *)(*a4 + 72))
  {
    uint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Incompatible operands");
    __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(*(void *)a3 + 80);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::layer_data::layer_data(&v33, a3, a4);
  long long v32 = 0uLL;
  Espresso::layer_data::layer_data(__p, (long long *)a4, (uint64_t *)&v32);
  (*(void (**)(void, uint64_t, void **, unint64_t *))(*(void *)*a1 + 16))(*a1, a2, __p, &v33);
  *(void *)&long long v32 = __p;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  __p[0] = &v33;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
}

void sub_192A36704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::generic_rnn_arch_kernel_impl::supports_weight_key()
{
  return 1;
}

void Espresso::generic_rnn_arch_kernel_impl::__set_weight_raw_blob(uint64_t a1, uint64_t *a2, std::string::size_type a3, uint64_t a4, unint64_t a5, uint64_t *a6)
{
  v632[1] = *MEMORY[0x1E4F143B8];
  if (a6 && *a6)
  {
    uint64_t v8 = a6[1];
    uint64_t v576 = *a6;
    if (v8)
    {
      v577 = (std::__shared_weak_count *)a6[1];
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      v577 = 0;
    }
  }
  else
  {
    uint64_t v576 = 0;
    v577 = 0;
  }
  char v9 = 0;
  uint64_t v10 = 0;
  v632[0] = 0x100000000;
  v584 = (void *)(a1 + 8);
  uint64_t v583 = a1 + 420;
  uint64_t v581 = a1 + 520;
  uint64_t v582 = a1 + 488;
  uint64_t v579 = a1 + 552;
  uint64_t v580 = a1 + 428;
  uint64_t v578 = a1 + 584;
  v574 = (uint64_t **)(a1 + 280);
  uint64_t v575 = a4 & 0x3F;
  __asm { FMOV            V8.2S, #1.0 }
  while (2)
  {
    char v16 = v9;
    uint64_t v17 = *((int *)v632 + v10);
    long long v18 = std::string::basic_string[abi:ne180100]<0>(&v629, "");
    if (v17 == 1) {
      MEMORY[0x192FF0F50](v18, "_reverse");
    }
    int v19 = *(_DWORD *)(a1 + 304);
    switch(v19)
    {
      case 0:
      case 3:
        int v20 = *(_DWORD *)(a1 + 380);
        int v585 = *(_DWORD *)(a1 + 384);
        uint64_t v591 = a1 + 16 * v17 + 624;
        if (!*(void *)v591)
        {
          *(_DWORD *)&v625[52] = -1;
          *(void *)&v625[56] = _D8;
          *(void *)((char *)&v627 + 4) = 0;
          if (v19) {
            char v21 = 1;
          }
          else {
            char v21 = 2;
          }
          memset(&v628[4], 0, 32);
          *(_DWORD *)v625 = v20 << v21;
          *(_DWORD *)&v625[4] = v585;
          *(void *)&v625[12] = 0;
          *(void *)&v625[20] = _D8;
          *(void *)&v625[44] = 0;
          *(void *)&v625[28] = 0;
          int v22 = *(_DWORD *)(a1 + 396);
          v625[40] = *(unsigned char *)(a1 + 456);
          *(void *)&v625[8] = v22 != 5;
          *(_DWORD *)&v625[36] = v22;
          Espresso::abstract_engine_factory::shared(&v618);
          uint64_t v23 = v618.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__p, "inner_product");
          LODWORD(v617.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(*v584 + 8))(*(void *)(*v584 + 8));
          Espresso::abstract_engine_factory::make_kernel_priv(v23, (uint64_t)v584, (uint64_t)&__p, (uint64_t)v625, (int *)&v617);
          uint64_t v24 = (void *)v631.__r_.__value_.__r.__words[0];
          if (v631.__r_.__value_.__r.__words[0]
          {
            std::string::size_type size = v631.__r_.__value_.__l.__size_;
            if (v631.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v631.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            std::string::size_type size = 0;
          }
          *(void *)uint64_t v591 = v24;
          uint64_t v32 = a1 + 16 * v17;
          unint64_t v33 = *(std::__shared_weak_count **)(v32 + 632);
          *(void *)(v32 + 632) = size;
          if (v33) {
            nitro::nitro_function::nitro_function(v33);
          }
          if (v631.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v631.__r_.__value_.__l.__size_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v618.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v618.__r_.__value_.__l.__size_);
          }
          std::to_string(&__p, v17);
          int v34 = std::string::insert(&__p, 0, "Wx_");
          std::string::size_type v35 = v34->__r_.__value_.__r.__words[0];
          v631.__r_.__value_.__r.__words[0] = v34->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v631.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7);
          char v36 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          uint64_t v37 = *(void *)v591;
          if (*(char *)(*(void *)v591 + 199) < 0) {
            operator delete(*(void **)(v37 + 176));
          }
          std::string::size_type v38 = v631.__r_.__value_.__r.__words[0];
          *(void *)(v37 + 176) = v35;
          *(void *)(v37 + 184) = v38;
          *(void *)(v37 + 191) = *(std::string::size_type *)((char *)v631.__r_.__value_.__r.__words + 7);
          *(unsigned char *)(v37 + 199) = v36;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          v600[6] = *(_OWORD *)v628;
          v600[7] = *(_OWORD *)&v628[16];
          int v601 = *(_DWORD *)&v628[32];
          v600[2] = *(_OWORD *)&v625[32];
          v600[3] = *(_OWORD *)&v625[48];
          v600[4] = v626;
          v600[5] = v627;
          v600[0] = *(_OWORD *)v625;
          v600[1] = *(_OWORD *)&v625[16];
          Espresso::generic_rnn_arch_kernel_impl::__initialize_dynamic_quantization(a1, (uint64_t)v600, v17, v583, v582, v581);
        }
        uint64_t v590 = a1 + 16 * v17 + 656;
        if (!*(void *)v590)
        {
          *(_DWORD *)&v625[52] = -1;
          *(void *)&v625[56] = _D8;
          *(void *)((char *)&v627 + 4) = 0;
          if (v19) {
            char v39 = 1;
          }
          else {
            char v39 = 2;
          }
          memset(&v628[4], 0, 32);
          *(_DWORD *)v625 = v20 << v39;
          *(_DWORD *)&v625[4] = v20;
          *(void *)&v625[20] = _D8;
          *(void *)&v625[44] = 0;
          *(void *)&v625[28] = 0;
          *(void *)&v625[8] = 0;
          v625[40] = *(unsigned char *)(a1 + 456);
          int v40 = *(_DWORD *)(a1 + 396);
          *(_DWORD *)&v625[16] = 0;
          *(_DWORD *)&v625[36] = v40;
          Espresso::abstract_engine_factory::shared(&v618);
          uint64_t v41 = v618.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__p, "inner_product");
          LODWORD(v617.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(*v584 + 8))(*(void *)(*v584 + 8));
          Espresso::abstract_engine_factory::make_kernel_priv(v41, (uint64_t)v584, (uint64_t)&__p, (uint64_t)v625, (int *)&v617);
          uint64_t v42 = (void *)v631.__r_.__value_.__r.__words[0];
          if (v631.__r_.__value_.__r.__words[0]
          {
            std::string::size_type v43 = v631.__r_.__value_.__l.__size_;
            if (v631.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v631.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            std::string::size_type v43 = 0;
          }
          *(void *)uint64_t v590 = v42;
          uint64_t v44 = a1 + 16 * v17;
          long long v45 = *(std::__shared_weak_count **)(v44 + 664);
          *(void *)(v44 + 664) = v43;
          if (v45) {
            nitro::nitro_function::nitro_function(v45);
          }
          if (v631.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v631.__r_.__value_.__l.__size_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v618.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v618.__r_.__value_.__l.__size_);
          }
          std::to_string(&__p, v17);
          long long v46 = std::string::insert(&__p, 0, "Wh_");
          std::string::size_type v47 = v46->__r_.__value_.__r.__words[0];
          v631.__r_.__value_.__r.__words[0] = v46->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v631.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v46->__r_.__value_.__r.__words[1] + 7);
          char v48 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          uint64_t v49 = *(void *)v590;
          if (*(char *)(*(void *)v590 + 199) < 0) {
            operator delete(*(void **)(v49 + 176));
          }
          std::string::size_type v50 = v631.__r_.__value_.__r.__words[0];
          *(void *)(v49 + 176) = v47;
          *(void *)(v49 + 184) = v50;
          *(void *)(v49 + 191) = *(std::string::size_type *)((char *)v631.__r_.__value_.__r.__words + 7);
          *(unsigned char *)(v49 + 199) = v48;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          v598[6] = *(_OWORD *)v628;
          v598[7] = *(_OWORD *)&v628[16];
          int v599 = *(_DWORD *)&v628[32];
          v598[2] = *(_OWORD *)&v625[32];
          v598[3] = *(_OWORD *)&v625[48];
          v598[4] = v626;
          v598[5] = v627;
          v598[0] = *(_OWORD *)v625;
          v598[1] = *(_OWORD *)&v625[16];
          Espresso::generic_rnn_arch_kernel_impl::__initialize_dynamic_quantization(a1, (uint64_t)v598, v17, v580, v579, v578);
        }
        std::operator+<char>();
        uint64_t v51 = *(unsigned __int8 *)(a3 + 23);
        if ((v51 & 0x80u) == 0) {
          uint64_t v52 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v52 = *(void *)(a3 + 8);
        }
        uint64_t v53 = v625[23];
        char v54 = v625[23];
        if (v625[23] < 0) {
          uint64_t v53 = *(void *)&v625[8];
        }
        if (v52 != v53) {
          goto LABEL_75;
        }
        if (v625[23] >= 0) {
          uint64_t v55 = v625;
        }
        else {
          uint64_t v55 = *(unsigned __int8 **)v625;
        }
        if ((v51 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v55, *(void *)(a3 + 8))) {
            goto LABEL_75;
          }
        }
        else if (*(unsigned char *)(a3 + 23))
        {
          uint64_t v56 = (unsigned __int8 *)a3;
          while (*v56 == *v55)
          {
            ++v56;
            ++v55;
            if (!--v51) {
              goto LABEL_98;
            }
          }
LABEL_75:
          std::operator+<char>();
          uint64_t v57 = *(unsigned __int8 *)(a3 + 23);
          if ((v57 & 0x80u) == 0) {
            uint64_t v58 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            uint64_t v58 = *(void *)(a3 + 8);
          }
          std::string::size_type v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          int v60 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v59 = __p.__r_.__value_.__l.__size_;
          }
          if (v58 == v59)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((v57 & 0x80) != 0)
            {
              BOOL v69 = memcmp(*(const void **)a3, p_p, *(void *)(a3 + 8)) == 0;
              if ((v60 & 0x80000000) == 0) {
                goto LABEL_93;
              }
            }
            else if (*(unsigned char *)(a3 + 23))
            {
              uint64_t v62 = v57 - 1;
              uint64_t v63 = (unsigned __int8 *)a3;
              do
              {
                int v65 = *v63++;
                int v64 = v65;
                int v67 = p_p->__r_.__value_.__s.__data_[0];
                p_p = (std::string *)((char *)p_p + 1);
                int v66 = v67;
                _CF = v62-- != 0;
                char v68 = _CF;
                BOOL v69 = v64 == v66;
              }
              while (v64 == v66 && (v68 & 1) != 0);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_93:
                if ((v625[23] & 0x80) == 0) {
                  goto LABEL_94;
                }
                goto LABEL_99;
              }
            }
            else
            {
              BOOL v69 = 1;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_93;
              }
            }
          }
          else
          {
            BOOL v69 = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_93;
            }
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_93;
        }
LABEL_98:
        BOOL v69 = 1;
        if ((v54 & 0x80) == 0)
        {
LABEL_94:
          if (v69) {
            goto LABEL_95;
          }
          goto LABEL_100;
        }
LABEL_99:
        operator delete(*(void **)v625);
        if (v69)
        {
LABEL_95:
          uint64_t v70 = *(void *)v591;
          std::string::basic_string[abi:ne180100]<0>(v625, "W_int8");
          (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v70 + 160))(v70, a2, v625, a4, a5, 0);
          goto LABEL_316;
        }
LABEL_100:
        std::operator+<char>();
        uint64_t v71 = *(unsigned __int8 *)(a3 + 23);
        if ((v71 & 0x80u) == 0) {
          uint64_t v72 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v72 = *(void *)(a3 + 8);
        }
        uint64_t v73 = v625[23];
        char v74 = v625[23];
        if (v625[23] < 0) {
          uint64_t v73 = *(void *)&v625[8];
        }
        if (v72 != v73) {
          goto LABEL_207;
        }
        if (v625[23] >= 0) {
          uint64_t v75 = v625;
        }
        else {
          uint64_t v75 = *(unsigned __int8 **)v625;
        }
        if ((v71 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v75, *(void *)(a3 + 8))) {
            goto LABEL_207;
          }
        }
        else if (*(unsigned char *)(a3 + 23))
        {
          uint64_t v76 = (unsigned __int8 *)a3;
          while (*v76 == *v75)
          {
            ++v76;
            ++v75;
            if (!--v71) {
              goto LABEL_230;
            }
          }
LABEL_207:
          std::operator+<char>();
          uint64_t v122 = *(unsigned __int8 *)(a3 + 23);
          if ((v122 & 0x80u) == 0) {
            uint64_t v123 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            uint64_t v123 = *(void *)(a3 + 8);
          }
          std::string::size_type v124 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          int v125 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v124 = __p.__r_.__value_.__l.__size_;
          }
          if (v123 == v124)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned int v126 = &__p;
            }
            else {
              unsigned int v126 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((v122 & 0x80) != 0)
            {
              BOOL v134 = memcmp(*(const void **)a3, v126, *(void *)(a3 + 8)) == 0;
              if ((v125 & 0x80000000) == 0) {
                goto LABEL_225;
              }
            }
            else if (*(unsigned char *)(a3 + 23))
            {
              uint64_t v127 = v122 - 1;
              uint64_t v128 = (unsigned __int8 *)a3;
              do
              {
                int v130 = *v128++;
                int v129 = v130;
                int v132 = v126->__r_.__value_.__s.__data_[0];
                unsigned int v126 = (std::string *)((char *)v126 + 1);
                int v131 = v132;
                _CF = v127-- != 0;
                char v133 = _CF;
                BOOL v134 = v129 == v131;
              }
              while (v129 == v131 && (v133 & 1) != 0);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_225:
                if ((v625[23] & 0x80) == 0) {
                  goto LABEL_226;
                }
                goto LABEL_231;
              }
            }
            else
            {
              BOOL v134 = 1;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_225;
              }
            }
          }
          else
          {
            BOOL v134 = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_225;
            }
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_225;
        }
LABEL_230:
        BOOL v134 = 1;
        if ((v74 & 0x80) == 0)
        {
LABEL_226:
          if (v134) {
            goto LABEL_227;
          }
          goto LABEL_232;
        }
LABEL_231:
        operator delete(*(void **)v625);
        if (v134)
        {
LABEL_227:
          uint64_t v135 = *(void *)v590;
          std::string::basic_string[abi:ne180100]<0>(v625, "W_int8");
          (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v135
                                                                                                 + 160))(v135, a2, v625, a4, a5, 0);
          goto LABEL_316;
        }
LABEL_232:
        std::operator+<char>();
        uint64_t v136 = *(unsigned __int8 *)(a3 + 23);
        if ((v136 & 0x80u) == 0) {
          uint64_t v137 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v137 = *(void *)(a3 + 8);
        }
        uint64_t v138 = v625[23];
        char v139 = v625[23];
        if (v625[23] < 0) {
          uint64_t v138 = *(void *)&v625[8];
        }
        if (v137 != v138) {
          goto LABEL_295;
        }
        if (v625[23] >= 0) {
          std::string::size_type v140 = v625;
        }
        else {
          std::string::size_type v140 = *(unsigned __int8 **)v625;
        }
        if ((v136 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v140, *(void *)(a3 + 8))) {
            goto LABEL_295;
          }
        }
        else if (*(unsigned char *)(a3 + 23))
        {
          char v141 = (unsigned __int8 *)a3;
          while (*v141 == *v140)
          {
            ++v141;
            ++v140;
            if (!--v136) {
              goto LABEL_320;
            }
          }
LABEL_295:
          std::operator+<char>();
          uint64_t v162 = *(unsigned __int8 *)(a3 + 23);
          if ((v162 & 0x80u) == 0) {
            uint64_t v163 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            uint64_t v163 = *(void *)(a3 + 8);
          }
          std::string::size_type v164 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          int v165 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v164 = __p.__r_.__value_.__l.__size_;
          }
          if (v163 == v164)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v166 = &__p;
            }
            else {
              int v166 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((v162 & 0x80) != 0)
            {
              BOOL v174 = memcmp(*(const void **)a3, v166, *(void *)(a3 + 8)) == 0;
              if ((v165 & 0x80000000) == 0) {
                goto LABEL_313;
              }
            }
            else if (*(unsigned char *)(a3 + 23))
            {
              uint64_t v167 = v162 - 1;
              uint64_t v168 = (unsigned __int8 *)a3;
              do
              {
                int v170 = *v168++;
                int v169 = v170;
                int v172 = v166->__r_.__value_.__s.__data_[0];
                int v166 = (std::string *)((char *)v166 + 1);
                int v171 = v172;
                _CF = v167-- != 0;
                char v173 = _CF;
                BOOL v174 = v169 == v171;
              }
              while (v169 == v171 && (v173 & 1) != 0);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_313:
                if ((v625[23] & 0x80) == 0) {
                  goto LABEL_314;
                }
LABEL_321:
                operator delete(*(void **)v625);
                if (!v174) {
                  goto LABEL_322;
                }
LABEL_315:
                uint64_t v175 = *(void *)v591;
                std::string::basic_string[abi:ne180100]<0>(v625, "W_t_int8");
                (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v175 + 160))(v175, a2, v625, a4, a5, 0);
LABEL_316:
                if ((v625[23] & 0x80000000) == 0) {
                  goto LABEL_786;
                }
                goto LABEL_785;
              }
            }
            else
            {
              BOOL v174 = 1;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_313;
              }
            }
          }
          else
          {
            BOOL v174 = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_313;
            }
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_313;
        }
LABEL_320:
        BOOL v174 = 1;
        if ((v139 & 0x80) == 0)
        {
LABEL_314:
          if (v174) {
            goto LABEL_315;
          }
LABEL_322:
          std::operator+<char>();
          uint64_t v176 = *(unsigned __int8 *)(a3 + 23);
          if ((v176 & 0x80u) == 0) {
            uint64_t v177 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            uint64_t v177 = *(void *)(a3 + 8);
          }
          uint64_t v178 = v625[23];
          char v179 = v625[23];
          if (v625[23] < 0) {
            uint64_t v178 = *(void *)&v625[8];
          }
          if (v177 != v178) {
            goto LABEL_387;
          }
          if (v625[23] >= 0) {
            std::string v180 = v625;
          }
          else {
            std::string v180 = *(unsigned __int8 **)v625;
          }
          if ((v176 & 0x80) != 0)
          {
            if (memcmp(*(const void **)a3, v180, *(void *)(a3 + 8))) {
              goto LABEL_387;
            }
          }
          else if (*(unsigned char *)(a3 + 23))
          {
            std::string v181 = (unsigned __int8 *)a3;
            while (*v181 == *v180)
            {
              ++v181;
              ++v180;
              if (!--v176) {
                goto LABEL_410;
              }
            }
LABEL_387:
            std::operator+<char>();
            uint64_t v202 = *(unsigned __int8 *)(a3 + 23);
            if ((v202 & 0x80u) == 0) {
              uint64_t v203 = *(unsigned __int8 *)(a3 + 23);
            }
            else {
              uint64_t v203 = *(void *)(a3 + 8);
            }
            std::string::size_type v204 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            int v205 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v204 = __p.__r_.__value_.__l.__size_;
            }
            if (v203 == v204)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v206 = &__p;
              }
              else {
                uint64_t v206 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              if ((v202 & 0x80) != 0)
              {
                BOOL v214 = memcmp(*(const void **)a3, v206, *(void *)(a3 + 8)) == 0;
                if ((v205 & 0x80000000) == 0) {
                  goto LABEL_405;
                }
              }
              else if (*(unsigned char *)(a3 + 23))
              {
                uint64_t v207 = v202 - 1;
                int v208 = (unsigned __int8 *)a3;
                do
                {
                  int v210 = *v208++;
                  int v209 = v210;
                  int v212 = v206->__r_.__value_.__s.__data_[0];
                  uint64_t v206 = (std::string *)((char *)v206 + 1);
                  int v211 = v212;
                  _CF = v207-- != 0;
                  char v213 = _CF;
                  BOOL v214 = v209 == v211;
                }
                while (v209 == v211 && (v213 & 1) != 0);
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_405:
                  if ((v625[23] & 0x80) == 0) {
                    goto LABEL_406;
                  }
                  goto LABEL_411;
                }
              }
              else
              {
                BOOL v214 = 1;
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_405;
                }
              }
            }
            else
            {
              BOOL v214 = 0;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_405;
              }
            }
            operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_405;
          }
LABEL_410:
          BOOL v214 = 1;
          if ((v179 & 0x80) == 0)
          {
LABEL_406:
            if (v214) {
              goto LABEL_407;
            }
            goto LABEL_412;
          }
LABEL_411:
          operator delete(*(void **)v625);
          if (v214)
          {
LABEL_407:
            uint64_t v215 = *(void *)v590;
            std::string::basic_string[abi:ne180100]<0>(v625, "W_t_int8");
            (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v215 + 160))(v215, a2, v625, a4, a5, 0);
            goto LABEL_784;
          }
LABEL_412:
          std::operator+<char>();
          std::string v216 = std::string::append(&__p, "_Qbias");
          *(std::string *)v625 = *v216;
          v216->__r_.__value_.__l.__size_ = 0;
          v216->__r_.__value_.__r.__words[2] = 0;
          v216->__r_.__value_.__r.__words[0] = 0;
          uint64_t v217 = *(unsigned __int8 *)(a3 + 23);
          if ((v217 & 0x80u) == 0) {
            uint64_t v218 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            uint64_t v218 = *(void *)(a3 + 8);
          }
          uint64_t v219 = v625[23];
          int v220 = v625[23];
          if (v625[23] < 0) {
            uint64_t v219 = *(void *)&v625[8];
          }
          if (v218 == v219)
          {
            if (v625[23] >= 0) {
              std::string v221 = v625;
            }
            else {
              std::string v221 = *(unsigned __int8 **)v625;
            }
            if ((v217 & 0x80) != 0)
            {
              BOOL v229 = memcmp(*(const void **)a3, v221, *(void *)(a3 + 8)) == 0;
              if ((v220 & 0x80000000) == 0) {
                goto LABEL_430;
              }
            }
            else if (*(unsigned char *)(a3 + 23))
            {
              uint64_t v222 = v217 - 1;
              uint64_t v223 = (unsigned __int8 *)a3;
              do
              {
                int v225 = *v223++;
                int v224 = v225;
                int v227 = *v221++;
                int v226 = v227;
                _CF = v222-- != 0;
                char v228 = _CF;
                BOOL v229 = v224 == v226;
              }
              while (v224 == v226 && (v228 & 1) != 0);
              if ((v625[23] & 0x80000000) == 0)
              {
LABEL_430:
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (v229)
                {
                  uint64_t v230 = *(void *)(a1 + 16 * v17 + 520);
                  if (!v230) {
                    goto LABEL_786;
                  }
                  goto LABEL_702;
                }
                std::operator+<char>();
                std::string v231 = std::string::append(&__p, "_Qrow_sums");
                *(std::string *)v625 = *v231;
                v231->__r_.__value_.__l.__size_ = 0;
                v231->__r_.__value_.__r.__words[2] = 0;
                v231->__r_.__value_.__r.__words[0] = 0;
                uint64_t v232 = *(unsigned __int8 *)(a3 + 23);
                if ((v232 & 0x80u) == 0) {
                  uint64_t v233 = *(unsigned __int8 *)(a3 + 23);
                }
                else {
                  uint64_t v233 = *(void *)(a3 + 8);
                }
                uint64_t v234 = v625[23];
                int v235 = v625[23];
                if (v625[23] < 0) {
                  uint64_t v234 = *(void *)&v625[8];
                }
                if (v233 != v234)
                {
                  BOOL v244 = 0;
                  if ((v625[23] & 0x80000000) == 0) {
                    goto LABEL_550;
                  }
                  goto LABEL_464;
                }
                if (v625[23] >= 0) {
                  int v236 = v625;
                }
                else {
                  int v236 = *(unsigned __int8 **)v625;
                }
                if ((v232 & 0x80) != 0)
                {
                  BOOL v244 = memcmp(*(const void **)a3, v236, *(void *)(a3 + 8)) == 0;
                }
                else
                {
                  if (!*(unsigned char *)(a3 + 23))
                  {
                    BOOL v244 = 1;
                    if ((v625[23] & 0x80000000) == 0)
                    {
LABEL_550:
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                      if (v244)
                      {
                        uint64_t v287 = *(void *)(a1 + 16 * v17 + 520);
                        if (!v287) {
                          goto LABEL_786;
                        }
                        goto LABEL_758;
                      }
                      std::operator+<char>();
                      v288 = std::string::append(&__p, "_Qscale");
                      *(std::string *)v625 = *v288;
                      v288->__r_.__value_.__l.__size_ = 0;
                      v288->__r_.__value_.__r.__words[2] = 0;
                      v288->__r_.__value_.__r.__words[0] = 0;
                      uint64_t v289 = *(unsigned __int8 *)(a3 + 23);
                      if ((v289 & 0x80u) == 0) {
                        uint64_t v290 = *(unsigned __int8 *)(a3 + 23);
                      }
                      else {
                        uint64_t v290 = *(void *)(a3 + 8);
                      }
                      uint64_t v291 = v625[23];
                      int v292 = v625[23];
                      if (v625[23] < 0) {
                        uint64_t v291 = *(void *)&v625[8];
                      }
                      if (v290 == v291)
                      {
                        if (v625[23] >= 0) {
                          char v293 = v625;
                        }
                        else {
                          char v293 = *(unsigned __int8 **)v625;
                        }
                        if ((v289 & 0x80) != 0)
                        {
                          BOOL v301 = memcmp(*(const void **)a3, v293, *(void *)(a3 + 8)) == 0;
                          goto LABEL_608;
                        }
                        if (*(unsigned char *)(a3 + 23))
                        {
                          uint64_t v294 = v289 - 1;
                          v295 = (unsigned __int8 *)a3;
                          do
                          {
                            int v297 = *v295++;
                            int v296 = v297;
                            int v299 = *v293++;
                            int v298 = v299;
                            _CF = v294-- != 0;
                            char v300 = _CF;
                            BOOL v301 = v296 == v298;
                          }
                          while (v296 == v298 && (v300 & 1) != 0);
LABEL_608:
                          if ((v292 & 0x80000000) == 0) {
                            goto LABEL_609;
                          }
                          goto LABEL_574;
                        }
                        BOOL v301 = 1;
                        if ((v625[23] & 0x80000000) == 0) {
                          goto LABEL_609;
                        }
                      }
                      else
                      {
                        BOOL v301 = 0;
                        if ((v625[23] & 0x80000000) == 0)
                        {
LABEL_609:
                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__p.__r_.__value_.__l.__data_);
                          }
                          if (v301)
                          {
                            uint64_t v316 = *(void *)(a1 + 16 * v17 + 520);
                            if (!v316) {
                              goto LABEL_786;
                            }
                            goto LABEL_783;
                          }
                          std::operator+<char>();
                          uint64_t v317 = std::string::append(&__p, "_Qbias");
                          *(std::string *)v625 = *v317;
                          v317->__r_.__value_.__l.__size_ = 0;
                          v317->__r_.__value_.__r.__words[2] = 0;
                          v317->__r_.__value_.__r.__words[0] = 0;
                          uint64_t v318 = *(unsigned __int8 *)(a3 + 23);
                          if ((v318 & 0x80u) == 0) {
                            uint64_t v319 = *(unsigned __int8 *)(a3 + 23);
                          }
                          else {
                            uint64_t v319 = *(void *)(a3 + 8);
                          }
                          uint64_t v320 = v625[23];
                          int v321 = v625[23];
                          if (v625[23] < 0) {
                            uint64_t v320 = *(void *)&v625[8];
                          }
                          if (v319 == v320)
                          {
                            if (v625[23] >= 0) {
                              v322 = v625;
                            }
                            else {
                              v322 = *(unsigned __int8 **)v625;
                            }
                            if ((v318 & 0x80) != 0)
                            {
                              BOOL v330 = memcmp(*(const void **)a3, v322, *(void *)(a3 + 8)) == 0;
                            }
                            else if (*(unsigned char *)(a3 + 23))
                            {
                              uint64_t v323 = v318 - 1;
                              uint64_t v324 = (unsigned __int8 *)a3;
                              do
                              {
                                int v326 = *v324++;
                                int v325 = v326;
                                int v328 = *v322++;
                                int v327 = v328;
                                _CF = v323-- != 0;
                                char v329 = _CF;
                                BOOL v330 = v325 == v327;
                              }
                              while (v325 == v327 && (v329 & 1) != 0);
                            }
                            else
                            {
                              BOOL v330 = 1;
                            }
                          }
                          else
                          {
                            BOOL v330 = 0;
                          }
                          if (v321 < 0) {
                            operator delete(*(void **)v625);
                          }
                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__p.__r_.__value_.__l.__data_);
                          }
                          if (!v330)
                          {
                            std::operator+<char>();
                            v345 = std::string::append(&__p, "_Qrow_sums");
                            *(std::string *)v625 = *v345;
                            v345->__r_.__value_.__l.__size_ = 0;
                            v345->__r_.__value_.__r.__words[2] = 0;
                            v345->__r_.__value_.__r.__words[0] = 0;
                            uint64_t v346 = *(unsigned __int8 *)(a3 + 23);
                            if ((v346 & 0x80u) == 0) {
                              uint64_t v347 = *(unsigned __int8 *)(a3 + 23);
                            }
                            else {
                              uint64_t v347 = *(void *)(a3 + 8);
                            }
                            uint64_t v348 = v625[23];
                            int v349 = v625[23];
                            if (v625[23] < 0) {
                              uint64_t v348 = *(void *)&v625[8];
                            }
                            if (v347 == v348)
                            {
                              if (v625[23] >= 0) {
                                v350 = v625;
                              }
                              else {
                                v350 = *(unsigned __int8 **)v625;
                              }
                              if ((v346 & 0x80) != 0)
                              {
                                BOOL v358 = memcmp(*(const void **)a3, v350, *(void *)(a3 + 8)) == 0;
                              }
                              else if (*(unsigned char *)(a3 + 23))
                              {
                                uint64_t v351 = v346 - 1;
                                v352 = (unsigned __int8 *)a3;
                                do
                                {
                                  int v354 = *v352++;
                                  int v353 = v354;
                                  int v356 = *v350++;
                                  int v355 = v356;
                                  _CF = v351-- != 0;
                                  char v357 = _CF;
                                  BOOL v358 = v353 == v355;
                                }
                                while (v353 == v355 && (v357 & 1) != 0);
                              }
                              else
                              {
                                BOOL v358 = 1;
                              }
                            }
                            else
                            {
                              BOOL v358 = 0;
                            }
                            if (v349 < 0) {
                              operator delete(*(void **)v625);
                            }
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(__p.__r_.__value_.__l.__data_);
                            }
                            if (v358)
                            {
                              uint64_t v287 = *(void *)(a1 + 16 * v17 + 584);
                              if (!v287) {
                                goto LABEL_786;
                              }
                              goto LABEL_758;
                            }
                            std::operator+<char>();
                            v373 = std::string::append(&__p, "_Qscale");
                            *(std::string *)v625 = *v373;
                            v373->__r_.__value_.__l.__size_ = 0;
                            v373->__r_.__value_.__r.__words[2] = 0;
                            v373->__r_.__value_.__r.__words[0] = 0;
                            uint64_t v374 = *(unsigned __int8 *)(a3 + 23);
                            if ((v374 & 0x80u) == 0) {
                              uint64_t v375 = *(unsigned __int8 *)(a3 + 23);
                            }
                            else {
                              uint64_t v375 = *(void *)(a3 + 8);
                            }
                            uint64_t v376 = v625[23];
                            int v377 = v625[23];
                            if (v625[23] < 0) {
                              uint64_t v376 = *(void *)&v625[8];
                            }
                            if (v375 == v376)
                            {
                              if (v625[23] >= 0) {
                                v378 = v625;
                              }
                              else {
                                v378 = *(unsigned __int8 **)v625;
                              }
                              if ((v374 & 0x80) != 0)
                              {
                                BOOL v386 = memcmp(*(const void **)a3, v378, *(void *)(a3 + 8)) == 0;
                              }
                              else if (*(unsigned char *)(a3 + 23))
                              {
                                uint64_t v379 = v374 - 1;
                                v380 = (unsigned __int8 *)a3;
                                do
                                {
                                  int v382 = *v380++;
                                  int v381 = v382;
                                  int v384 = *v378++;
                                  int v383 = v384;
                                  _CF = v379-- != 0;
                                  char v385 = _CF;
                                  BOOL v386 = v381 == v383;
                                }
                                while (v381 == v383 && (v385 & 1) != 0);
                              }
                              else
                              {
                                BOOL v386 = 1;
                              }
                            }
                            else
                            {
                              BOOL v386 = 0;
                            }
                            if (v377 < 0) {
                              operator delete(*(void **)v625);
                            }
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(__p.__r_.__value_.__l.__data_);
                            }
                            if (!v386)
                            {
                              std::operator+<char>();
                              BOOL v393 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
                              if ((v625[23] & 0x80000000) != 0) {
                                operator delete(*(void **)v625);
                              }
                              if (v393)
                              {
                                v597[0] = v576;
                                v597[1] = (uint64_t)v577;
                                if (v577) {
                                  atomic_fetch_add_explicit(&v577->__shared_owners_, 1uLL, memory_order_relaxed);
                                }
                                Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(v625, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v597, 3, v20, v575 == 0);
                                v391 = v584;
                                if (v577) {
                                  nitro::nitro_function::nitro_function(v577);
                                }
                                goto LABEL_797;
                              }
                              std::operator+<char>();
                              if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625))
                              {
                                BOOL v400 = 1;
                              }
                              else
                              {
                                std::operator+<char>();
                                BOOL v400 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, (unsigned __int8 *)&__p);
                                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(__p.__r_.__value_.__l.__data_);
                                }
                              }
                              if ((v625[23] & 0x80000000) != 0) {
                                operator delete(*(void **)v625);
                              }
                              if (v400)
                              {
                                uint64_t v401 = a1 + 16 * v17;
                                v402 = *(std::__shared_weak_count **)(v401 + 712);
                                *(void *)(v401 + 704) = 0;
                                *(void *)(v401 + 712) = 0;
                                if (v402) {
                                  nitro::nitro_function::nitro_function(v402);
                                }
                                Espresso::blob<unsigned char,2>::make(v625, v20);
                                uint64_t v403 = a1 + 16 * v17;
                                uint64_t v404 = v403 + 736;
                                uint64_t v405 = *(void *)v625;
                                v406 = *(std::__shared_weak_count **)(v403 + 744);
                                *(_OWORD *)(v403 + 736) = *(_OWORD *)v625;
                                if (v406)
                                {
                                  nitro::nitro_function::nitro_function(v406);
                                  uint64_t v407 = *(void *)v404;
                                }
                                else
                                {
                                  uint64_t v407 = v405;
                                }
                                size_t v432 = a5;
                                if (*(int *)(v407 + 12) * (uint64_t)*(int *)(v407 + 8) != a5)
                                {
                                  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                  std::to_string(&v614, a5);
                                  v482 = std::string::insert(&v614, 0, "Unexpected size s=");
                                  long long v483 = *(_OWORD *)&v482->__r_.__value_.__l.__data_;
                                  v615.__r_.__value_.__r.__words[2] = v482->__r_.__value_.__r.__words[2];
                                  *(_OWORD *)&v615.__r_.__value_.__l.__data_ = v483;
                                  v482->__r_.__value_.__l.__size_ = 0;
                                  v482->__r_.__value_.__r.__words[2] = 0;
                                  v482->__r_.__value_.__r.__words[0] = 0;
                                  v484 = std::string::append(&v615, "/blob=");
                                  long long v485 = *(_OWORD *)&v484->__r_.__value_.__l.__data_;
                                  v616.__r_.__value_.__r.__words[2] = v484->__r_.__value_.__r.__words[2];
                                  *(_OWORD *)&v616.__r_.__value_.__l.__data_ = v485;
                                  v484->__r_.__value_.__l.__size_ = 0;
                                  v484->__r_.__value_.__r.__words[2] = 0;
                                  v484->__r_.__value_.__r.__words[0] = 0;
                                  std::to_string(&v613, *(int *)(*(void *)v404 + 12) * (uint64_t)*(int *)(*(void *)v404 + 8));
                                  if ((v613.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                    v486 = &v613;
                                  }
                                  else {
                                    v486 = (std::string *)v613.__r_.__value_.__r.__words[0];
                                  }
                                  if ((v613.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                    std::string::size_type v487 = HIBYTE(v613.__r_.__value_.__r.__words[2]);
                                  }
                                  else {
                                    std::string::size_type v487 = v613.__r_.__value_.__l.__size_;
                                  }
                                  v488 = std::string::append(&v616, (const std::string::value_type *)v486, v487);
                                  long long v489 = *(_OWORD *)&v488->__r_.__value_.__l.__data_;
                                  v617.__r_.__value_.__r.__words[2] = v488->__r_.__value_.__r.__words[2];
                                  *(_OWORD *)&v617.__r_.__value_.__l.__data_ = v489;
                                  v488->__r_.__value_.__l.__size_ = 0;
                                  v488->__r_.__value_.__r.__words[2] = 0;
                                  v488->__r_.__value_.__r.__words[0] = 0;
                                  std::string::basic_string[abi:ne180100]<0>(&v610, " @ ");
                                  if ((v612 & 0x80u) == 0) {
                                    v490 = (const std::string::value_type *)&v610;
                                  }
                                  else {
                                    v490 = v610;
                                  }
                                  if ((v612 & 0x80u) == 0) {
                                    std::string::size_type v491 = v612;
                                  }
                                  else {
                                    std::string::size_type v491 = v611;
                                  }
                                  v492 = std::string::append(&v617, v490, v491);
                                  long long v493 = *(_OWORD *)&v492->__r_.__value_.__l.__data_;
                                  v618.__r_.__value_.__r.__words[2] = v492->__r_.__value_.__r.__words[2];
                                  *(_OWORD *)&v618.__r_.__value_.__l.__data_ = v493;
                                  v492->__r_.__value_.__l.__size_ = 0;
                                  v492->__r_.__value_.__r.__words[2] = 0;
                                  v492->__r_.__value_.__r.__words[0] = 0;
                                  v494 = std::string::append(&v618, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
                                  long long v495 = *(_OWORD *)&v494->__r_.__value_.__l.__data_;
                                  v631.__r_.__value_.__r.__words[2] = v494->__r_.__value_.__r.__words[2];
                                  *(_OWORD *)&v631.__r_.__value_.__l.__data_ = v495;
                                  v494->__r_.__value_.__l.__size_ = 0;
                                  v494->__r_.__value_.__r.__words[2] = 0;
                                  v494->__r_.__value_.__r.__words[0] = 0;
                                  std::string::basic_string[abi:ne180100]<0>(&v607, ":");
                                  if ((v609 & 0x80u) == 0) {
                                    v496 = (const std::string::value_type *)&v607;
                                  }
                                  else {
                                    v496 = v607;
                                  }
                                  if ((v609 & 0x80u) == 0) {
                                    std::string::size_type v497 = v609;
                                  }
                                  else {
                                    std::string::size_type v497 = v608;
                                  }
                                  v498 = std::string::append(&v631, v496, v497);
                                  long long v499 = *(_OWORD *)&v498->__r_.__value_.__l.__data_;
                                  __p.__r_.__value_.__r.__words[2] = v498->__r_.__value_.__r.__words[2];
                                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v499;
                                  v498->__r_.__value_.__l.__size_ = 0;
                                  v498->__r_.__value_.__r.__words[2] = 0;
                                  v498->__r_.__value_.__r.__words[0] = 0;
                                  std::to_string(&v606, 9262);
                                  if ((v606.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                    v500 = &v606;
                                  }
                                  else {
                                    v500 = (std::string *)v606.__r_.__value_.__r.__words[0];
                                  }
                                  if ((v606.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                    std::string::size_type v501 = HIBYTE(v606.__r_.__value_.__r.__words[2]);
                                  }
                                  else {
                                    std::string::size_type v501 = v606.__r_.__value_.__l.__size_;
                                  }
                                  v502 = std::string::append(&__p, (const std::string::value_type *)v500, v501);
                                  long long v503 = *(_OWORD *)&v502->__r_.__value_.__l.__data_;
                                  *(void *)&v625[16] = *((void *)&v502->__r_.__value_.__l + 2);
                                  *(_OWORD *)v625 = v503;
                                  v502->__r_.__value_.__l.__size_ = 0;
                                  v502->__r_.__value_.__r.__words[2] = 0;
                                  v502->__r_.__value_.__r.__words[0] = 0;
                                  std::runtime_error::runtime_error(exception, (const std::string *)v625);
                                  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                }
                                goto LABEL_908;
                              }
                              std::operator+<char>();
                              BOOL v408 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
                              if ((v625[23] & 0x80000000) != 0) {
                                operator delete(*(void **)v625);
                              }
                              if (v408)
                              {
                                uint64_t v409 = *(void *)v590;
                                std::string::basic_string[abi:ne180100]<0>(v625, "Q");
                                (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v409 + 168))(v409, a2, v625, a4, a5, 0);
                                if ((v625[23] & 0x80000000) != 0) {
                                  operator delete(*(void **)v625);
                                }
                                uint64_t v410 = *(void *)v591;
                                std::string::basic_string[abi:ne180100]<0>(v625, "Q");
                                (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v410 + 168))(v410, a2, v625, a4, a5, 0);
                                if ((v625[23] & 0x80000000) != 0) {
                                  operator delete(*(void **)v625);
                                }
                                Espresso::blob<float,1>::make(v625, 2);
                                uint64_t v411 = a1 + 16 * v17;
                                uint64_t v412 = v411 + 768;
                                uint64_t v413 = *(void *)v625;
                                v414 = *(std::__shared_weak_count **)(v411 + 776);
                                *(_OWORD *)(v411 + 768) = *(_OWORD *)v625;
                                if (v414)
                                {
                                  nitro::nitro_function::nitro_function(v414);
                                  uint64_t v407 = *(void *)v412;
                                }
                                else
                                {
                                  uint64_t v407 = v413;
                                }
                                size_t v432 = a5;
                                if (a5 != 4 * *(int *)(v407 + 8))
                                {
                                  v504 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                  std::to_string(&v614, a5);
                                  v505 = std::string::insert(&v614, 0, "Unexpected size s=");
                                  long long v506 = *(_OWORD *)&v505->__r_.__value_.__l.__data_;
                                  v615.__r_.__value_.__r.__words[2] = v505->__r_.__value_.__r.__words[2];
                                  *(_OWORD *)&v615.__r_.__value_.__l.__data_ = v506;
                                  v505->__r_.__value_.__l.__size_ = 0;
                                  v505->__r_.__value_.__r.__words[2] = 0;
                                  v505->__r_.__value_.__r.__words[0] = 0;
                                  v507 = std::string::append(&v615, "/blob=");
                                  long long v508 = *(_OWORD *)&v507->__r_.__value_.__l.__data_;
                                  v616.__r_.__value_.__r.__words[2] = v507->__r_.__value_.__r.__words[2];
                                  *(_OWORD *)&v616.__r_.__value_.__l.__data_ = v508;
                                  v507->__r_.__value_.__l.__size_ = 0;
                                  v507->__r_.__value_.__r.__words[2] = 0;
                                  v507->__r_.__value_.__r.__words[0] = 0;
                                  std::to_string(&v613, 4 * *(int *)(*(void *)v412 + 8));
                                  if ((v613.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                    v509 = &v613;
                                  }
                                  else {
                                    v509 = (std::string *)v613.__r_.__value_.__r.__words[0];
                                  }
                                  if ((v613.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                    std::string::size_type v510 = HIBYTE(v613.__r_.__value_.__r.__words[2]);
                                  }
                                  else {
                                    std::string::size_type v510 = v613.__r_.__value_.__l.__size_;
                                  }
                                  v511 = std::string::append(&v616, (const std::string::value_type *)v509, v510);
                                  long long v512 = *(_OWORD *)&v511->__r_.__value_.__l.__data_;
                                  v617.__r_.__value_.__r.__words[2] = v511->__r_.__value_.__r.__words[2];
                                  *(_OWORD *)&v617.__r_.__value_.__l.__data_ = v512;
                                  v511->__r_.__value_.__l.__size_ = 0;
                                  v511->__r_.__value_.__r.__words[2] = 0;
                                  v511->__r_.__value_.__r.__words[0] = 0;
                                  std::string::basic_string[abi:ne180100]<0>(&v610, " @ ");
                                  if ((v612 & 0x80u) == 0) {
                                    v513 = (const std::string::value_type *)&v610;
                                  }
                                  else {
                                    v513 = v610;
                                  }
                                  if ((v612 & 0x80u) == 0) {
                                    std::string::size_type v514 = v612;
                                  }
                                  else {
                                    std::string::size_type v514 = v611;
                                  }
                                  v515 = std::string::append(&v617, v513, v514);
                                  long long v516 = *(_OWORD *)&v515->__r_.__value_.__l.__data_;
                                  v618.__r_.__value_.__r.__words[2] = v515->__r_.__value_.__r.__words[2];
                                  *(_OWORD *)&v618.__r_.__value_.__l.__data_ = v516;
                                  v515->__r_.__value_.__l.__size_ = 0;
                                  v515->__r_.__value_.__r.__words[2] = 0;
                                  v515->__r_.__value_.__r.__words[0] = 0;
                                  v517 = std::string::append(&v618, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
                                  long long v518 = *(_OWORD *)&v517->__r_.__value_.__l.__data_;
                                  v631.__r_.__value_.__r.__words[2] = v517->__r_.__value_.__r.__words[2];
                                  *(_OWORD *)&v631.__r_.__value_.__l.__data_ = v518;
                                  v517->__r_.__value_.__l.__size_ = 0;
                                  v517->__r_.__value_.__r.__words[2] = 0;
                                  v517->__r_.__value_.__r.__words[0] = 0;
                                  std::string::basic_string[abi:ne180100]<0>(&v607, ":");
                                  if ((v609 & 0x80u) == 0) {
                                    v519 = (const std::string::value_type *)&v607;
                                  }
                                  else {
                                    v519 = v607;
                                  }
                                  if ((v609 & 0x80u) == 0) {
                                    std::string::size_type v520 = v609;
                                  }
                                  else {
                                    std::string::size_type v520 = v608;
                                  }
                                  v521 = std::string::append(&v631, v519, v520);
                                  long long v522 = *(_OWORD *)&v521->__r_.__value_.__l.__data_;
                                  __p.__r_.__value_.__r.__words[2] = v521->__r_.__value_.__r.__words[2];
                                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v522;
                                  v521->__r_.__value_.__l.__size_ = 0;
                                  v521->__r_.__value_.__r.__words[2] = 0;
                                  v521->__r_.__value_.__r.__words[0] = 0;
                                  std::to_string(&v606, 9270);
                                  if ((v606.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                    v523 = &v606;
                                  }
                                  else {
                                    v523 = (std::string *)v606.__r_.__value_.__r.__words[0];
                                  }
                                  if ((v606.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                    std::string::size_type v524 = HIBYTE(v606.__r_.__value_.__r.__words[2]);
                                  }
                                  else {
                                    std::string::size_type v524 = v606.__r_.__value_.__l.__size_;
                                  }
                                  v525 = std::string::append(&__p, (const std::string::value_type *)v523, v524);
                                  long long v526 = *(_OWORD *)&v525->__r_.__value_.__l.__data_;
                                  *(void *)&v625[16] = *((void *)&v525->__r_.__value_.__l + 2);
                                  *(_OWORD *)v625 = v526;
                                  v525->__r_.__value_.__l.__size_ = 0;
                                  v525->__r_.__value_.__r.__words[2] = 0;
                                  v525->__r_.__value_.__r.__words[0] = 0;
                                  std::runtime_error::runtime_error(v504, (const std::string *)v625);
                                  __cxa_throw(v504, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                }
                                goto LABEL_908;
                              }
                              std::operator+<char>();
                              BOOL v428 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
                              if ((v625[23] & 0x80000000) != 0) {
                                operator delete(*(void **)v625);
                              }
                              if (v428)
                              {
                                uint64_t v429 = *(void *)v591;
                                std::string::basic_string[abi:ne180100]<0>(v625, "W");
                                (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v429 + 160))(v429, a2, v625, a4, a5, 0);
                                v430 = v584;
                                if ((v625[23] & 0x80000000) != 0) {
                                  operator delete(*(void **)v625);
                                }
                                v596[0] = v576;
                                v596[1] = (uint64_t)v577;
                                if (v577) {
                                  atomic_fetch_add_explicit(&v577->__shared_owners_, 1uLL, memory_order_relaxed);
                                }
                                if (v19) {
                                  char v431 = 1;
                                }
                                else {
                                  char v431 = 2;
                                }
                                Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(v625, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v596, v585, v20 << v431, v575 == 0);
                                if (v577) {
                                  nitro::nitro_function::nitro_function(v577);
                                }
                                goto LABEL_898;
                              }
                              std::operator+<char>();
                              BOOL v435 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
                              if ((v625[23] & 0x80000000) != 0) {
                                operator delete(*(void **)v625);
                              }
                              if (v435)
                              {
                                uint64_t v436 = *(void *)v590;
                                std::string::basic_string[abi:ne180100]<0>(v625, "W");
                                (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v436 + 160))(v436, a2, v625, a4, a5, 0);
                                v430 = v584;
                                if ((v625[23] & 0x80000000) != 0) {
                                  operator delete(*(void **)v625);
                                }
                                v595[0] = v576;
                                v595[1] = (uint64_t)v577;
                                if (v577) {
                                  atomic_fetch_add_explicit(&v577->__shared_owners_, 1uLL, memory_order_relaxed);
                                }
                                if (v19) {
                                  char v437 = 1;
                                }
                                else {
                                  char v437 = 2;
                                }
                                Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(v625, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v595, v20, v20 << v437, v575 == 0);
                                if (v577) {
                                  nitro::nitro_function::nitro_function(v577);
                                }
                                goto LABEL_898;
                              }
                              std::operator+<char>();
                              BOOL v442 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
                              if ((v625[23] & 0x80000000) != 0) {
                                operator delete(*(void **)v625);
                              }
                              if (v442)
                              {
                                uint64_t v443 = *(void *)v591;
                                std::string::basic_string[abi:ne180100]<0>(v625, "W_f16");
                                (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v443 + 160))(v443, a2, v625, a4, a5, 0);
                                goto LABEL_784;
                              }
                              std::operator+<char>();
                              BOOL v446 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
                              if ((v625[23] & 0x80000000) != 0) {
                                operator delete(*(void **)v625);
                              }
                              if (v446)
                              {
                                uint64_t v447 = *(void *)v590;
                                std::string::basic_string[abi:ne180100]<0>(v625, "W_f16");
                                (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v447 + 160))(v447, a2, v625, a4, a5, 0);
                                goto LABEL_988;
                              }
                              std::operator+<char>();
                              BOOL v450 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
                              if ((v625[23] & 0x80000000) != 0) {
                                operator delete(*(void **)v625);
                              }
                              if (!v450)
                              {
                                std::operator+<char>();
                                BOOL v453 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
                                if ((v625[23] & 0x80000000) != 0) {
                                  operator delete(*(void **)v625);
                                }
                                if (v453)
                                {
                                  uint64_t v454 = *(void *)v591;
                                  std::string::basic_string[abi:ne180100]<0>(v625, "w_f32_t");
                                  (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v454 + 160))(v454, a2, v625, a4, a5, 0);
                                  goto LABEL_988;
                                }
                                std::operator+<char>();
                                BOOL v457 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
                                if ((v625[23] & 0x80000000) != 0) {
                                  operator delete(*(void **)v625);
                                }
                                if (v457)
                                {
                                  uint64_t v458 = *(void *)v590;
                                  std::string::basic_string[abi:ne180100]<0>(v625, "w_f32_t");
                                  (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v458 + 160))(v458, a2, v625, a4, a5, 0);
                                  goto LABEL_988;
                                }
                                std::operator+<char>();
                                BOOL v467 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
                                if ((v625[23] & 0x80000000) != 0) {
                                  operator delete(*(void **)v625);
                                }
                                if (v467)
                                {
                                  uint64_t v468 = *(void *)v591;
                                  std::string::basic_string[abi:ne180100]<0>(v625, "w_f16_t");
                                  (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v468 + 160))(v468, a2, v625, a4, a5, 0);
                                  goto LABEL_988;
                                }
                                std::operator+<char>();
                                BOOL v474 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
                                if ((v625[23] & 0x80000000) != 0) {
                                  operator delete(*(void **)v625);
                                }
                                if (v474)
                                {
                                  uint64_t v475 = *(void *)v590;
                                  std::string::basic_string[abi:ne180100]<0>(v625, "w_f16_t");
                                  (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v475 + 160))(v475, a2, v625, a4, a5, 0);
                                  goto LABEL_988;
                                }
LABEL_991:
                                Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob((_DWORD *)a1, a2, (const std::string *)a3, a4, a5, (uint64_t)a6);
                                goto LABEL_786;
                              }
                              uint64_t v451 = *(void *)(a1 + 16 * v17 + 520);
                              if (v451) {
                                goto LABEL_925;
                              }
                              v594[0] = v576;
                              v594[1] = (uint64_t)v577;
                              if (v577) {
                                atomic_fetch_add_explicit(&v577->__shared_owners_, 1uLL, memory_order_relaxed);
                              }
                              if (v19) {
                                char v459 = 1;
                              }
                              else {
                                char v459 = 2;
                              }
                              Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(v625, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v594, v20 << v459, v575 == 0);
                              if (v577) {
                                nitro::nitro_function::nitro_function(v577);
                              }
                              std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,1>> &,void>(&__p, v584, (uint64_t *)v625);
                              v631.__r_.__value_.__r.__words[0] = a3;
                              v460 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v574, (void *)a3, (long long **)&v631);
                              v461 = (std::__shared_weak_count *)v460[8];
                              *(_OWORD *)(v460 + 7) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                              if (v461) {
                                nitro::nitro_function::nitro_function(v461);
                              }
                              uint64_t v462 = *(void *)v591;
                              v463 = *(std::__shared_weak_count **)&v625[8];
                              long long v593 = *(_OWORD *)v625;
                              if (*(void *)&v625[8]) {
                                atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v625[8] + 8), 1uLL, memory_order_relaxed);
                              }
                              (*(void (**)(uint64_t, long long *))(*(void *)v462 + 392))(v462, &v593);
                              v464 = (std::__shared_weak_count *)*((void *)&v593 + 1);
                              if (*((void *)&v593 + 1)) {
                                goto LABEL_955;
                              }
                              goto LABEL_956;
                            }
                            uint64_t v316 = *(void *)(a1 + 16 * v17 + 584);
                            if (!v316) {
                              goto LABEL_786;
                            }
                            goto LABEL_783;
                          }
                          uint64_t v230 = *(void *)(a1 + 16 * v17 + 584);
                          if (!v230) {
                            goto LABEL_786;
                          }
LABEL_702:
                          std::string::basic_string[abi:ne180100]<0>(v625, "Qbias");
                          (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v230 + 160))(v230, a2, v625, a4, a5, 0);
                          goto LABEL_784;
                        }
                      }
LABEL_574:
                      operator delete(*(void **)v625);
                      goto LABEL_609;
                    }
LABEL_464:
                    operator delete(*(void **)v625);
                    goto LABEL_550;
                  }
                  uint64_t v237 = v232 - 1;
                  uint64_t v238 = (unsigned __int8 *)a3;
                  do
                  {
                    int v240 = *v238++;
                    int v239 = v240;
                    int v242 = *v236++;
                    int v241 = v242;
                    _CF = v237-- != 0;
                    char v243 = _CF;
                    BOOL v244 = v239 == v241;
                  }
                  while (v239 == v241 && (v243 & 1) != 0);
                }
                if ((v235 & 0x80000000) == 0) {
                  goto LABEL_550;
                }
                goto LABEL_464;
              }
            }
            else
            {
              BOOL v229 = 1;
              if ((v625[23] & 0x80000000) == 0) {
                goto LABEL_430;
              }
            }
          }
          else
          {
            BOOL v229 = 0;
            if ((v625[23] & 0x80000000) == 0) {
              goto LABEL_430;
            }
          }
          operator delete(*(void **)v625);
          goto LABEL_430;
        }
        goto LABEL_321;
      case 1:
        int v592 = *(_DWORD *)(a1 + 380);
        int v589 = *(_DWORD *)(a1 + 384);
        uint64_t v26 = a1 + 16 * v17;
        uint64_t v27 = v26 + 624;
        if (!*(void *)(v26 + 624))
        {
          *(_DWORD *)&v625[52] = -1;
          *(void *)&v625[56] = _D8;
          *(void *)((char *)&v627 + 4) = 0;
          memset(&v628[4], 0, 32);
          *(_DWORD *)v625 = v592;
          *(_DWORD *)&v625[4] = v589;
          *(void *)&v625[12] = 0;
          *(void *)&v625[20] = _D8;
          *(void *)&v625[44] = 0;
          *(void *)&v625[28] = 0;
          int v28 = *(_DWORD *)(a1 + 396);
          v625[40] = *(unsigned char *)(a1 + 456);
          *(void *)&v625[8] = v28 != 5;
          *(_DWORD *)&v625[36] = v28;
          Espresso::abstract_engine_factory::shared(&v618);
          uint64_t v29 = v618.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__p, "inner_product");
          LODWORD(v617.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(*v584 + 8))(*(void *)(*v584 + 8));
          Espresso::abstract_engine_factory::make_kernel_priv(v29, (uint64_t)v584, (uint64_t)&__p, (uint64_t)v625, (int *)&v617);
          uint64_t v30 = (void *)v631.__r_.__value_.__r.__words[0];
          if (v631.__r_.__value_.__r.__words[0]
          {
            std::string::size_type v31 = v631.__r_.__value_.__l.__size_;
            if (v631.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v631.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            std::string::size_type v31 = 0;
          }
          *(void *)uint64_t v27 = v30;
          uint64_t v77 = a1 + 16 * v17;
          uint64_t v78 = *(std::__shared_weak_count **)(v77 + 632);
          *(void *)(v77 + 632) = v31;
          if (v78) {
            nitro::nitro_function::nitro_function(v78);
          }
          if (v631.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v631.__r_.__value_.__l.__size_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v618.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v618.__r_.__value_.__l.__size_);
          }
          std::to_string(&__p, v17);
          uint64_t v79 = std::string::insert(&__p, 0, "Wx_");
          std::string::size_type v80 = v79->__r_.__value_.__r.__words[0];
          v631.__r_.__value_.__r.__words[0] = v79->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v631.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v79->__r_.__value_.__r.__words[1] + 7);
          char v81 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
          v79->__r_.__value_.__l.__size_ = 0;
          v79->__r_.__value_.__r.__words[2] = 0;
          v79->__r_.__value_.__r.__words[0] = 0;
          uint64_t v82 = *(void *)v27;
          if (*(char *)(*(void *)v27 + 199) < 0) {
            operator delete(*(void **)(v82 + 176));
          }
          std::string::size_type v83 = v631.__r_.__value_.__r.__words[0];
          *(void *)(v82 + 176) = v80;
          *(void *)(v82 + 184) = v83;
          *(void *)(v82 + 191) = *(std::string::size_type *)((char *)v631.__r_.__value_.__r.__words + 7);
          *(unsigned char *)(v82 + 199) = v81;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          v622[6] = *(_OWORD *)v628;
          v622[7] = *(_OWORD *)&v628[16];
          int v623 = *(_DWORD *)&v628[32];
          v622[2] = *(_OWORD *)&v625[32];
          v622[3] = *(_OWORD *)&v625[48];
          v622[5] = v627;
          v622[4] = v626;
          v622[0] = *(_OWORD *)v625;
          v622[1] = *(_OWORD *)&v625[16];
          Espresso::generic_rnn_arch_kernel_impl::__initialize_dynamic_quantization(a1, (uint64_t)v622, v17, v583, v582, v581);
        }
        uint64_t v84 = v26 + 656;
        if (!*(void *)(v26 + 656))
        {
          *(_DWORD *)&v625[52] = -1;
          *(void *)&v625[56] = _D8;
          *(void *)((char *)&v627 + 4) = 0;
          memset(&v628[4], 0, 32);
          *(_DWORD *)v625 = v592;
          *(_DWORD *)&v625[4] = v592;
          *(void *)&v625[20] = _D8;
          *(void *)&v625[44] = 1;
          *(void *)&v625[28] = 0;
          *(void *)&v625[8] = 0;
          v625[40] = *(unsigned char *)(a1 + 456);
          int v85 = *(_DWORD *)(a1 + 396);
          *(_DWORD *)&v625[16] = 0;
          *(_DWORD *)&v625[36] = v85;
          Espresso::abstract_engine_factory::shared(&v618);
          uint64_t v86 = v618.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&__p, "inner_product");
          LODWORD(v617.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(*v584 + 8))(*(void *)(*v584 + 8));
          Espresso::abstract_engine_factory::make_kernel_priv(v86, (uint64_t)v584, (uint64_t)&__p, (uint64_t)v625, (int *)&v617);
          uint64_t v87 = (void *)v631.__r_.__value_.__r.__words[0];
          if (v631.__r_.__value_.__r.__words[0]
          {
            std::string::size_type v88 = v631.__r_.__value_.__l.__size_;
            if (v631.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v631.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            std::string::size_type v88 = 0;
          }
          *(void *)uint64_t v84 = v87;
          uint64_t v89 = a1 + 16 * v17;
          uint64_t v90 = *(std::__shared_weak_count **)(v89 + 664);
          *(void *)(v89 + 664) = v88;
          if (v90) {
            nitro::nitro_function::nitro_function(v90);
          }
          if (v631.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v631.__r_.__value_.__l.__size_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v618.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v618.__r_.__value_.__l.__size_);
          }
          std::to_string(&__p, v17);
          char v91 = std::string::insert(&__p, 0, "Wh_");
          std::string::size_type v92 = v91->__r_.__value_.__r.__words[0];
          v631.__r_.__value_.__r.__words[0] = v91->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v631.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v91->__r_.__value_.__r.__words[1] + 7);
          char v93 = HIBYTE(v91->__r_.__value_.__r.__words[2]);
          v91->__r_.__value_.__l.__size_ = 0;
          v91->__r_.__value_.__r.__words[2] = 0;
          v91->__r_.__value_.__r.__words[0] = 0;
          uint64_t v94 = *(void *)v84;
          if (*(char *)(*(void *)v84 + 199) < 0) {
            operator delete(*(void **)(v94 + 176));
          }
          std::string::size_type v95 = v631.__r_.__value_.__r.__words[0];
          *(void *)(v94 + 176) = v92;
          *(void *)(v94 + 184) = v95;
          *(void *)(v94 + 191) = *(std::string::size_type *)((char *)v631.__r_.__value_.__r.__words + 7);
          *(unsigned char *)(v94 + 199) = v93;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          v620[6] = *(_OWORD *)v628;
          v620[7] = *(_OWORD *)&v628[16];
          int v621 = *(_DWORD *)&v628[32];
          v620[2] = *(_OWORD *)&v625[32];
          v620[3] = *(_OWORD *)&v625[48];
          v620[4] = v626;
          v620[5] = v627;
          v620[0] = *(_OWORD *)v625;
          v620[1] = *(_OWORD *)&v625[16];
          Espresso::generic_rnn_arch_kernel_impl::__initialize_dynamic_quantization(a1, (uint64_t)v620, v17, v580, v579, v578);
        }
        std::operator+<char>();
        uint64_t v96 = *(unsigned __int8 *)(a3 + 23);
        if ((v96 & 0x80u) == 0) {
          uint64_t v97 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v97 = *(void *)(a3 + 8);
        }
        uint64_t v98 = v625[23];
        char v99 = v625[23];
        if (v625[23] < 0) {
          uint64_t v98 = *(void *)&v625[8];
        }
        if (v97 != v98) {
          goto LABEL_166;
        }
        if (v625[23] >= 0) {
          std::string::size_type v100 = v625;
        }
        else {
          std::string::size_type v100 = *(unsigned __int8 **)v625;
        }
        if ((v96 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v100, *(void *)(a3 + 8))) {
            goto LABEL_166;
          }
        }
        else if (*(unsigned char *)(a3 + 23))
        {
          long long v101 = (unsigned __int8 *)a3;
          while (*v101 == *v100)
          {
            ++v101;
            ++v100;
            if (!--v96) {
              goto LABEL_189;
            }
          }
LABEL_166:
          std::operator+<char>();
          uint64_t v102 = *(unsigned __int8 *)(a3 + 23);
          if ((v102 & 0x80u) == 0) {
            uint64_t v103 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            uint64_t v103 = *(void *)(a3 + 8);
          }
          std::string::size_type v104 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          int v105 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v104 = __p.__r_.__value_.__l.__size_;
          }
          if (v103 == v104)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v106 = &__p;
            }
            else {
              char v106 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((v102 & 0x80) != 0)
            {
              BOOL v114 = memcmp(*(const void **)a3, v106, *(void *)(a3 + 8)) == 0;
              if ((v105 & 0x80000000) == 0) {
                goto LABEL_184;
              }
            }
            else if (*(unsigned char *)(a3 + 23))
            {
              uint64_t v107 = v102 - 1;
              char v108 = (unsigned __int8 *)a3;
              do
              {
                int v110 = *v108++;
                int v109 = v110;
                int v112 = v106->__r_.__value_.__s.__data_[0];
                char v106 = (std::string *)((char *)v106 + 1);
                int v111 = v112;
                _CF = v107-- != 0;
                char v113 = _CF;
                BOOL v114 = v109 == v111;
              }
              while (v109 == v111 && (v113 & 1) != 0);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_184:
                if ((v625[23] & 0x80) == 0) {
                  goto LABEL_185;
                }
                goto LABEL_190;
              }
            }
            else
            {
              BOOL v114 = 1;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_184;
              }
            }
          }
          else
          {
            BOOL v114 = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_184;
            }
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_184;
        }
LABEL_189:
        BOOL v114 = 1;
        if ((v99 & 0x80) == 0)
        {
LABEL_185:
          if (v114) {
            goto LABEL_186;
          }
          goto LABEL_191;
        }
LABEL_190:
        operator delete(*(void **)v625);
        if (v114)
        {
LABEL_186:
          uint64_t v115 = *(void *)v27;
          std::string::basic_string[abi:ne180100]<0>(v625, "W_int8");
          (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v115
                                                                                                 + 160))(v115, a2, v625, a4, a5, 0);
          goto LABEL_784;
        }
LABEL_191:
        std::operator+<char>();
        uint64_t v116 = *(unsigned __int8 *)(a3 + 23);
        if ((v116 & 0x80u) == 0) {
          uint64_t v117 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v117 = *(void *)(a3 + 8);
        }
        uint64_t v118 = v625[23];
        char v119 = v625[23];
        if (v625[23] < 0) {
          uint64_t v118 = *(void *)&v625[8];
        }
        if (v117 != v118) {
          goto LABEL_254;
        }
        if (v625[23] >= 0) {
          uint64_t v120 = v625;
        }
        else {
          uint64_t v120 = *(unsigned __int8 **)v625;
        }
        if ((v116 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v120, *(void *)(a3 + 8))) {
            goto LABEL_254;
          }
        }
        else if (*(unsigned char *)(a3 + 23))
        {
          std::string::const_iterator v121 = (unsigned __int8 *)a3;
          while (*v121 == *v120)
          {
            ++v121;
            ++v120;
            if (!--v116) {
              goto LABEL_277;
            }
          }
LABEL_254:
          std::operator+<char>();
          uint64_t v142 = *(unsigned __int8 *)(a3 + 23);
          if ((v142 & 0x80u) == 0) {
            uint64_t v143 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            uint64_t v143 = *(void *)(a3 + 8);
          }
          std::string::size_type v144 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          int v145 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v144 = __p.__r_.__value_.__l.__size_;
          }
          if (v143 == v144)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v146 = &__p;
            }
            else {
              long long v146 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((v142 & 0x80) != 0)
            {
              BOOL v154 = memcmp(*(const void **)a3, v146, *(void *)(a3 + 8)) == 0;
              if ((v145 & 0x80000000) == 0) {
                goto LABEL_272;
              }
            }
            else if (*(unsigned char *)(a3 + 23))
            {
              uint64_t v147 = v142 - 1;
              std::string::size_type v148 = (unsigned __int8 *)a3;
              do
              {
                int v150 = *v148++;
                int v149 = v150;
                int v152 = v146->__r_.__value_.__s.__data_[0];
                long long v146 = (std::string *)((char *)v146 + 1);
                int v151 = v152;
                _CF = v147-- != 0;
                char v153 = _CF;
                BOOL v154 = v149 == v151;
              }
              while (v149 == v151 && (v153 & 1) != 0);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_272:
                if ((v625[23] & 0x80) == 0) {
                  goto LABEL_273;
                }
                goto LABEL_278;
              }
            }
            else
            {
              BOOL v154 = 1;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_272;
              }
            }
          }
          else
          {
            BOOL v154 = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_272;
            }
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_272;
        }
LABEL_277:
        BOOL v154 = 1;
        if ((v119 & 0x80) == 0)
        {
LABEL_273:
          if (v154) {
            goto LABEL_274;
          }
          goto LABEL_279;
        }
LABEL_278:
        operator delete(*(void **)v625);
        if (v154)
        {
LABEL_274:
          uint64_t v155 = *(void *)v84;
          std::string::basic_string[abi:ne180100]<0>(v625, "W_int8");
          (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v155
                                                                                                 + 160))(v155, a2, v625, a4, a5, 0);
          goto LABEL_784;
        }
LABEL_279:
        std::operator+<char>();
        uint64_t v156 = *(unsigned __int8 *)(a3 + 23);
        if ((v156 & 0x80u) == 0) {
          uint64_t v157 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v157 = *(void *)(a3 + 8);
        }
        uint64_t v158 = v625[23];
        char v159 = v625[23];
        if (v625[23] < 0) {
          uint64_t v158 = *(void *)&v625[8];
        }
        if (v157 != v158) {
          goto LABEL_346;
        }
        if (v625[23] >= 0) {
          long long v160 = v625;
        }
        else {
          long long v160 = *(unsigned __int8 **)v625;
        }
        if ((v156 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a3, v160, *(void *)(a3 + 8))) {
            goto LABEL_346;
          }
        }
        else if (*(unsigned char *)(a3 + 23))
        {
          int v161 = (unsigned __int8 *)a3;
          while (*v161 == *v160)
          {
            ++v161;
            ++v160;
            if (!--v156) {
              goto LABEL_369;
            }
          }
LABEL_346:
          std::operator+<char>();
          uint64_t v182 = *(unsigned __int8 *)(a3 + 23);
          if ((v182 & 0x80u) == 0) {
            uint64_t v183 = *(unsigned __int8 *)(a3 + 23);
          }
          else {
            uint64_t v183 = *(void *)(a3 + 8);
          }
          std::string::size_type v184 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          int v185 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v184 = __p.__r_.__value_.__l.__size_;
          }
          if (v183 == v184)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string v186 = &__p;
            }
            else {
              std::string v186 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((v182 & 0x80) != 0)
            {
              BOOL v194 = memcmp(*(const void **)a3, v186, *(void *)(a3 + 8)) == 0;
              if ((v185 & 0x80000000) == 0) {
                goto LABEL_364;
              }
            }
            else if (*(unsigned char *)(a3 + 23))
            {
              uint64_t v187 = v182 - 1;
              std::string v188 = (unsigned __int8 *)a3;
              do
              {
                int v190 = *v188++;
                int v189 = v190;
                int v192 = v186->__r_.__value_.__s.__data_[0];
                std::string v186 = (std::string *)((char *)v186 + 1);
                int v191 = v192;
                _CF = v187-- != 0;
                char v193 = _CF;
                BOOL v194 = v189 == v191;
              }
              while (v189 == v191 && (v193 & 1) != 0);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_364:
                if ((v625[23] & 0x80) == 0) {
                  goto LABEL_365;
                }
                goto LABEL_370;
              }
            }
            else
            {
              BOOL v194 = 1;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_364;
              }
            }
          }
          else
          {
            BOOL v194 = 0;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_364;
            }
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_364;
        }
LABEL_369:
        BOOL v194 = 1;
        if ((v159 & 0x80) == 0)
        {
LABEL_365:
          if (v194) {
            goto LABEL_366;
          }
          goto LABEL_371;
        }
LABEL_370:
        operator delete(*(void **)v625);
        if (v194)
        {
LABEL_366:
          uint64_t v195 = *(void *)v27;
          std::string::basic_string[abi:ne180100]<0>(v625, "W_t_int8");
          (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v195
                                                                                                 + 160))(v195, a2, v625, a4, a5, 0);
          goto LABEL_784;
        }
LABEL_371:
        std::operator+<char>();
        uint64_t v196 = *(unsigned __int8 *)(a3 + 23);
        if ((v196 & 0x80u) == 0) {
          uint64_t v197 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v197 = *(void *)(a3 + 8);
        }
        uint64_t v198 = v625[23];
        char v199 = v625[23];
        if (v625[23] < 0) {
          uint64_t v198 = *(void *)&v625[8];
        }
        if (v197 != v198) {
          goto LABEL_466;
        }
        if (v625[23] >= 0) {
          char v200 = v625;
        }
        else {
          char v200 = *(unsigned __int8 **)v625;
        }
        if ((v196 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)a3, v200, *(void *)(a3 + 8)))
          {
LABEL_486:
            BOOL v257 = 1;
            if (v199 < 0) {
              goto LABEL_487;
            }
            goto LABEL_517;
          }
        }
        else
        {
          if (!*(unsigned char *)(a3 + 23)) {
            goto LABEL_486;
          }
          v201 = (unsigned __int8 *)a3;
          while (*v201 == *v200)
          {
            ++v201;
            ++v200;
            if (!--v196) {
              goto LABEL_486;
            }
          }
        }
LABEL_466:
        std::operator+<char>();
        uint64_t v245 = *(unsigned __int8 *)(a3 + 23);
        if ((v245 & 0x80u) == 0) {
          uint64_t v246 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v246 = *(void *)(a3 + 8);
        }
        std::string::size_type v247 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        int v248 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v247 = __p.__r_.__value_.__l.__size_;
        }
        if (v246 != v247)
        {
          BOOL v257 = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_516;
          }
LABEL_485:
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_516;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v249 = &__p;
        }
        else {
          v249 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((v245 & 0x80) != 0)
        {
          BOOL v257 = memcmp(*(const void **)a3, v249, *(void *)(a3 + 8)) == 0;
          goto LABEL_515;
        }
        if (*(unsigned char *)(a3 + 23))
        {
          uint64_t v250 = v245 - 1;
          uint64_t v251 = (unsigned __int8 *)a3;
          do
          {
            int v253 = *v251++;
            int v252 = v253;
            int v255 = v249->__r_.__value_.__s.__data_[0];
            v249 = (std::string *)((char *)v249 + 1);
            int v254 = v255;
            _CF = v250-- != 0;
            char v256 = _CF;
            BOOL v257 = v252 == v254;
          }
          while (v252 == v254 && (v256 & 1) != 0);
LABEL_515:
          if (v248 < 0) {
            goto LABEL_485;
          }
          goto LABEL_516;
        }
        BOOL v257 = 1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_485;
        }
LABEL_516:
        if ((v625[23] & 0x80) != 0)
        {
LABEL_487:
          operator delete(*(void **)v625);
          if (v257) {
            goto LABEL_518;
          }
          goto LABEL_488;
        }
LABEL_517:
        if (v257)
        {
LABEL_518:
          uint64_t v272 = *(void *)v84;
          std::string::basic_string[abi:ne180100]<0>(v625, "W_t_int8");
          (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v272
                                                                                                 + 160))(v272, a2, v625, a4, a5, 0);
          goto LABEL_784;
        }
LABEL_488:
        std::operator+<char>();
        v258 = std::string::append(&__p, "_Qbias");
        *(std::string *)v625 = *v258;
        v258->__r_.__value_.__l.__size_ = 0;
        v258->__r_.__value_.__r.__words[2] = 0;
        v258->__r_.__value_.__r.__words[0] = 0;
        uint64_t v259 = *(unsigned __int8 *)(a3 + 23);
        if ((v259 & 0x80u) == 0) {
          uint64_t v260 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v260 = *(void *)(a3 + 8);
        }
        uint64_t v261 = v625[23];
        int v262 = v625[23];
        if (v625[23] < 0) {
          uint64_t v261 = *(void *)&v625[8];
        }
        if (v260 != v261)
        {
          BOOL v271 = 0;
          if ((v625[23] & 0x80000000) == 0) {
            goto LABEL_523;
          }
LABEL_507:
          operator delete(*(void **)v625);
          goto LABEL_523;
        }
        if (v625[23] >= 0) {
          v263 = v625;
        }
        else {
          v263 = *(unsigned __int8 **)v625;
        }
        if ((v259 & 0x80) != 0)
        {
          BOOL v271 = memcmp(*(const void **)a3, v263, *(void *)(a3 + 8)) == 0;
          goto LABEL_522;
        }
        if (*(unsigned char *)(a3 + 23))
        {
          uint64_t v264 = v259 - 1;
          v265 = (unsigned __int8 *)a3;
          do
          {
            int v267 = *v265++;
            int v266 = v267;
            int v269 = *v263++;
            int v268 = v269;
            _CF = v264-- != 0;
            char v270 = _CF;
            BOOL v271 = v266 == v268;
          }
          while (v266 == v268 && (v270 & 1) != 0);
LABEL_522:
          if (v262 < 0) {
            goto LABEL_507;
          }
          goto LABEL_523;
        }
        BOOL v271 = 1;
        if ((v625[23] & 0x80000000) != 0) {
          goto LABEL_507;
        }
LABEL_523:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v271)
        {
          uint64_t v230 = *(void *)(a1 + 16 * v17 + 520);
          if (!v230) {
            goto LABEL_786;
          }
          goto LABEL_702;
        }
        std::operator+<char>();
        v273 = std::string::append(&__p, "_Qrow_sums");
        *(std::string *)v625 = *v273;
        v273->__r_.__value_.__l.__size_ = 0;
        v273->__r_.__value_.__r.__words[2] = 0;
        v273->__r_.__value_.__r.__words[0] = 0;
        uint64_t v274 = *(unsigned __int8 *)(a3 + 23);
        if ((v274 & 0x80u) == 0) {
          uint64_t v275 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v275 = *(void *)(a3 + 8);
        }
        uint64_t v276 = v625[23];
        int v277 = v625[23];
        if (v625[23] < 0) {
          uint64_t v276 = *(void *)&v625[8];
        }
        if (v275 != v276)
        {
          BOOL v286 = 0;
          if ((v625[23] & 0x80000000) == 0) {
            goto LABEL_583;
          }
LABEL_547:
          operator delete(*(void **)v625);
          goto LABEL_583;
        }
        if (v625[23] >= 0) {
          v278 = v625;
        }
        else {
          v278 = *(unsigned __int8 **)v625;
        }
        if ((v274 & 0x80) != 0)
        {
          BOOL v286 = memcmp(*(const void **)a3, v278, *(void *)(a3 + 8)) == 0;
          goto LABEL_582;
        }
        if (*(unsigned char *)(a3 + 23))
        {
          uint64_t v279 = v274 - 1;
          v280 = (unsigned __int8 *)a3;
          do
          {
            int v282 = *v280++;
            int v281 = v282;
            int v284 = *v278++;
            int v283 = v284;
            _CF = v279-- != 0;
            char v285 = _CF;
            BOOL v286 = v281 == v283;
          }
          while (v281 == v283 && (v285 & 1) != 0);
LABEL_582:
          if (v277 < 0) {
            goto LABEL_547;
          }
          goto LABEL_583;
        }
        BOOL v286 = 1;
        if ((v625[23] & 0x80000000) != 0) {
          goto LABEL_547;
        }
LABEL_583:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v286)
        {
          uint64_t v287 = *(void *)(a1 + 16 * v17 + 520);
          if (!v287) {
            goto LABEL_786;
          }
          goto LABEL_758;
        }
        std::operator+<char>();
        std::string v302 = std::string::append(&__p, "_Qscale");
        *(std::string *)v625 = *v302;
        v302->__r_.__value_.__l.__size_ = 0;
        v302->__r_.__value_.__r.__words[2] = 0;
        v302->__r_.__value_.__r.__words[0] = 0;
        uint64_t v303 = *(unsigned __int8 *)(a3 + 23);
        if ((v303 & 0x80u) == 0) {
          uint64_t v304 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v304 = *(void *)(a3 + 8);
        }
        uint64_t v305 = v625[23];
        int v306 = v625[23];
        if (v625[23] < 0) {
          uint64_t v305 = *(void *)&v625[8];
        }
        if (v304 == v305)
        {
          if (v625[23] >= 0) {
            v307 = v625;
          }
          else {
            v307 = *(unsigned __int8 **)v625;
          }
          if ((v303 & 0x80) != 0)
          {
            BOOL v315 = memcmp(*(const void **)a3, v307, *(void *)(a3 + 8)) == 0;
          }
          else if (*(unsigned char *)(a3 + 23))
          {
            uint64_t v308 = v303 - 1;
            uint64_t v309 = (unsigned __int8 *)a3;
            do
            {
              int v311 = *v309++;
              int v310 = v311;
              int v313 = *v307++;
              int v312 = v313;
              _CF = v308-- != 0;
              char v314 = _CF;
              BOOL v315 = v310 == v312;
            }
            while (v310 == v312 && (v314 & 1) != 0);
          }
          else
          {
            BOOL v315 = 1;
          }
        }
        else
        {
          BOOL v315 = 0;
        }
        if (v306 < 0) {
          operator delete(*(void **)v625);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v315)
        {
          uint64_t v316 = *(void *)(a1 + 16 * v17 + 520);
          if (!v316) {
            goto LABEL_786;
          }
          goto LABEL_783;
        }
        std::operator+<char>();
        uint64_t v331 = std::string::append(&__p, "_Qbias");
        *(std::string *)v625 = *v331;
        v331->__r_.__value_.__l.__size_ = 0;
        v331->__r_.__value_.__r.__words[2] = 0;
        v331->__r_.__value_.__r.__words[0] = 0;
        uint64_t v332 = *(unsigned __int8 *)(a3 + 23);
        if ((v332 & 0x80u) == 0) {
          uint64_t v333 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v333 = *(void *)(a3 + 8);
        }
        uint64_t v334 = v625[23];
        int v335 = v625[23];
        if (v625[23] < 0) {
          uint64_t v334 = *(void *)&v625[8];
        }
        if (v333 == v334)
        {
          if (v625[23] >= 0) {
            v336 = v625;
          }
          else {
            v336 = *(unsigned __int8 **)v625;
          }
          if ((v332 & 0x80) != 0)
          {
            BOOL v344 = memcmp(*(const void **)a3, v336, *(void *)(a3 + 8)) == 0;
          }
          else if (*(unsigned char *)(a3 + 23))
          {
            uint64_t v337 = v332 - 1;
            v338 = (unsigned __int8 *)a3;
            do
            {
              int v340 = *v338++;
              int v339 = v340;
              int v342 = *v336++;
              int v341 = v342;
              _CF = v337-- != 0;
              char v343 = _CF;
              BOOL v344 = v339 == v341;
            }
            while (v339 == v341 && (v343 & 1) != 0);
          }
          else
          {
            BOOL v344 = 1;
          }
        }
        else
        {
          BOOL v344 = 0;
        }
        if (v335 < 0) {
          operator delete(*(void **)v625);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v344)
        {
          uint64_t v230 = *(void *)(a1 + 16 * v17 + 584);
          if (!v230) {
            goto LABEL_786;
          }
          goto LABEL_702;
        }
        std::operator+<char>();
        v359 = std::string::append(&__p, "_Qrow_sums");
        *(std::string *)v625 = *v359;
        v359->__r_.__value_.__l.__size_ = 0;
        v359->__r_.__value_.__r.__words[2] = 0;
        v359->__r_.__value_.__r.__words[0] = 0;
        uint64_t v360 = *(unsigned __int8 *)(a3 + 23);
        if ((v360 & 0x80u) == 0) {
          uint64_t v361 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v361 = *(void *)(a3 + 8);
        }
        uint64_t v362 = v625[23];
        int v363 = v625[23];
        if (v625[23] < 0) {
          uint64_t v362 = *(void *)&v625[8];
        }
        if (v361 == v362)
        {
          if (v625[23] >= 0) {
            v364 = v625;
          }
          else {
            v364 = *(unsigned __int8 **)v625;
          }
          if ((v360 & 0x80) != 0)
          {
            BOOL v372 = memcmp(*(const void **)a3, v364, *(void *)(a3 + 8)) == 0;
          }
          else if (*(unsigned char *)(a3 + 23))
          {
            uint64_t v365 = v360 - 1;
            v366 = (unsigned __int8 *)a3;
            do
            {
              int v368 = *v366++;
              int v367 = v368;
              int v370 = *v364++;
              int v369 = v370;
              _CF = v365-- != 0;
              char v371 = _CF;
              BOOL v372 = v367 == v369;
            }
            while (v367 == v369 && (v371 & 1) != 0);
          }
          else
          {
            BOOL v372 = 1;
          }
        }
        else
        {
          BOOL v372 = 0;
        }
        if (v363 < 0) {
          operator delete(*(void **)v625);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v372)
        {
          uint64_t v287 = *(void *)(a1 + 16 * v17 + 584);
          if (!v287) {
            goto LABEL_786;
          }
LABEL_758:
          std::string::basic_string[abi:ne180100]<0>(v625, "Qrow_sums");
          (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v287
                                                                                                 + 160))(v287, a2, v625, a4, a5, 0);
LABEL_784:
          if ((v625[23] & 0x80000000) != 0) {
LABEL_785:
          }
            operator delete(*(void **)v625);
          goto LABEL_786;
        }
        std::operator+<char>();
        v387 = std::string::append(&__p, "_Qscale");
        long long v388 = *(_OWORD *)&v387->__r_.__value_.__l.__data_;
        *(void *)&v625[16] = *((void *)&v387->__r_.__value_.__l + 2);
        *(_OWORD *)v625 = v388;
        v387->__r_.__value_.__l.__size_ = 0;
        v387->__r_.__value_.__r.__words[2] = 0;
        v387->__r_.__value_.__r.__words[0] = 0;
        BOOL v389 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
        if ((v625[23] & 0x80000000) != 0) {
          operator delete(*(void **)v625);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v389)
        {
          uint64_t v316 = *(void *)(a1 + 16 * v17 + 584);
          if (!v316) {
            goto LABEL_786;
          }
LABEL_783:
          std::string::basic_string[abi:ne180100]<0>(v625, "Qscale");
          (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v316
                                                                                                 + 160))(v316, a2, v625, a4, a5, 0);
          goto LABEL_784;
        }
        std::operator+<char>();
        BOOL v390 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
        if ((v625[23] & 0x80000000) != 0) {
          operator delete(*(void **)v625);
        }
        if (v390)
        {
          v619[0] = v576;
          v619[1] = (uint64_t)v577;
          if (v577) {
            atomic_fetch_add_explicit(&v577->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(v625, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v619, 3, v592, v575 == 0);
          v391 = v584;
          if (v577) {
            nitro::nitro_function::nitro_function(v577);
          }
LABEL_797:
          std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,2>> &,void>(&__p, v391, (uint64_t *)v625);
          v631.__r_.__value_.__r.__words[0] = a3;
          v394 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v574, (void *)a3, (long long **)&v631);
          v395 = (std::__shared_weak_count *)v394[8];
          *(_OWORD *)(v394 + 7) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          if (v395) {
            nitro::nitro_function::nitro_function(v395);
          }
          long long v396 = *(_OWORD *)v625;
          if (*(void *)&v625[8]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v625[8] + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v397 = a1 + 16 * v17;
          *(void *)(v397 + 704) = v396;
          v398 = *(std::__shared_weak_count **)(v397 + 712);
          *(void *)(v397 + 712) = *((void *)&v396 + 1);
          if (v398) {
            nitro::nitro_function::nitro_function(v398);
          }
          if (*((void *)&v396 + 1))
          {
            v399 = (std::__shared_weak_count *)*((void *)&v396 + 1);
LABEL_805:
            nitro::nitro_function::nitro_function(v399);
          }
        }
        else
        {
          std::operator+<char>();
          if (std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625))
          {
            BOOL v392 = 1;
          }
          else
          {
            std::operator+<char>();
            BOOL v392 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, (unsigned __int8 *)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          if ((v625[23] & 0x80000000) != 0) {
            operator delete(*(void **)v625);
          }
          if (v392)
          {
            uint64_t v415 = a1 + 16 * v17;
            v416 = *(std::__shared_weak_count **)(v415 + 712);
            *(void *)(v415 + 704) = 0;
            *(void *)(v415 + 712) = 0;
            if (v416) {
              nitro::nitro_function::nitro_function(v416);
            }
            Espresso::blob<unsigned char,2>::make(v625, v592);
            uint64_t v417 = a1 + 16 * v17;
            uint64_t v418 = v417 + 736;
            uint64_t v419 = *(void *)v625;
            v420 = *(std::__shared_weak_count **)(v417 + 744);
            *(_OWORD *)(v417 + 736) = *(_OWORD *)v625;
            if (v420)
            {
              nitro::nitro_function::nitro_function(v420);
              uint64_t v407 = *(void *)v418;
            }
            else
            {
              uint64_t v407 = v419;
            }
            size_t v432 = a5;
            if (*(int *)(v407 + 12) * (uint64_t)*(int *)(v407 + 8) != a5)
            {
              v527 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::to_string(&v614, a5);
              v528 = std::string::insert(&v614, 0, "Unexpected size s=");
              long long v529 = *(_OWORD *)&v528->__r_.__value_.__l.__data_;
              v615.__r_.__value_.__r.__words[2] = v528->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v615.__r_.__value_.__l.__data_ = v529;
              v528->__r_.__value_.__l.__size_ = 0;
              v528->__r_.__value_.__r.__words[2] = 0;
              v528->__r_.__value_.__r.__words[0] = 0;
              v530 = std::string::append(&v615, "/blob=");
              long long v531 = *(_OWORD *)&v530->__r_.__value_.__l.__data_;
              v616.__r_.__value_.__r.__words[2] = v530->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v616.__r_.__value_.__l.__data_ = v531;
              v530->__r_.__value_.__l.__size_ = 0;
              v530->__r_.__value_.__r.__words[2] = 0;
              v530->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v613, *(int *)(*(void *)v418 + 12) * (uint64_t)*(int *)(*(void *)v418 + 8));
              if ((v613.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v532 = &v613;
              }
              else {
                v532 = (std::string *)v613.__r_.__value_.__r.__words[0];
              }
              if ((v613.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v533 = HIBYTE(v613.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v533 = v613.__r_.__value_.__l.__size_;
              }
              v534 = std::string::append(&v616, (const std::string::value_type *)v532, v533);
              long long v535 = *(_OWORD *)&v534->__r_.__value_.__l.__data_;
              v617.__r_.__value_.__r.__words[2] = v534->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v617.__r_.__value_.__l.__data_ = v535;
              v534->__r_.__value_.__l.__size_ = 0;
              v534->__r_.__value_.__r.__words[2] = 0;
              v534->__r_.__value_.__r.__words[0] = 0;
              std::string::basic_string[abi:ne180100]<0>(&v610, " @ ");
              if ((v612 & 0x80u) == 0) {
                v536 = (const std::string::value_type *)&v610;
              }
              else {
                v536 = v610;
              }
              if ((v612 & 0x80u) == 0) {
                std::string::size_type v537 = v612;
              }
              else {
                std::string::size_type v537 = v611;
              }
              v538 = std::string::append(&v617, v536, v537);
              long long v539 = *(_OWORD *)&v538->__r_.__value_.__l.__data_;
              v618.__r_.__value_.__r.__words[2] = v538->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v618.__r_.__value_.__l.__data_ = v539;
              v538->__r_.__value_.__l.__size_ = 0;
              v538->__r_.__value_.__r.__words[2] = 0;
              v538->__r_.__value_.__r.__words[0] = 0;
              v540 = std::string::append(&v618, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
              long long v541 = *(_OWORD *)&v540->__r_.__value_.__l.__data_;
              v631.__r_.__value_.__r.__words[2] = v540->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v631.__r_.__value_.__l.__data_ = v541;
              v540->__r_.__value_.__l.__size_ = 0;
              v540->__r_.__value_.__r.__words[2] = 0;
              v540->__r_.__value_.__r.__words[0] = 0;
              std::string::basic_string[abi:ne180100]<0>(&v607, ":");
              if ((v609 & 0x80u) == 0) {
                v542 = (const std::string::value_type *)&v607;
              }
              else {
                v542 = v607;
              }
              if ((v609 & 0x80u) == 0) {
                std::string::size_type v543 = v609;
              }
              else {
                std::string::size_type v543 = v608;
              }
              v544 = std::string::append(&v631, v542, v543);
              long long v545 = *(_OWORD *)&v544->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v544->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v545;
              v544->__r_.__value_.__l.__size_ = 0;
              v544->__r_.__value_.__r.__words[2] = 0;
              v544->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v606, 9088);
              if ((v606.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v546 = &v606;
              }
              else {
                v546 = (std::string *)v606.__r_.__value_.__r.__words[0];
              }
              if ((v606.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v547 = HIBYTE(v606.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v547 = v606.__r_.__value_.__l.__size_;
              }
              v548 = std::string::append(&__p, (const std::string::value_type *)v546, v547);
              long long v549 = *(_OWORD *)&v548->__r_.__value_.__l.__data_;
              *(void *)&v625[16] = *((void *)&v548->__r_.__value_.__l + 2);
              *(_OWORD *)v625 = v549;
              v548->__r_.__value_.__l.__size_ = 0;
              v548->__r_.__value_.__r.__words[2] = 0;
              v548->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v527, (const std::string *)v625);
              __cxa_throw(v527, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
LABEL_908:
            memcpy(*(void **)(v407 + 16), (const void *)a4, v432);
            goto LABEL_786;
          }
          std::operator+<char>();
          BOOL v421 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
          if ((v625[23] & 0x80000000) != 0) {
            operator delete(*(void **)v625);
          }
          if (v421)
          {
            uint64_t v422 = *(void *)v84;
            std::string::basic_string[abi:ne180100]<0>(v625, "Q");
            (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v422 + 160))(v422, a2, v625, a4, a5, 0);
            if ((v625[23] & 0x80000000) != 0) {
              operator delete(*(void **)v625);
            }
            uint64_t v423 = *(void *)v27;
            std::string::basic_string[abi:ne180100]<0>(v625, "Q");
            (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v423 + 160))(v423, a2, v625, a4, a5, 0);
            if ((v625[23] & 0x80000000) != 0) {
              operator delete(*(void **)v625);
            }
            Espresso::blob<float,1>::make(v625, 2);
            uint64_t v424 = a1 + 16 * v17;
            uint64_t v425 = v424 + 768;
            uint64_t v426 = *(void *)v625;
            v427 = *(std::__shared_weak_count **)(v424 + 776);
            *(_OWORD *)(v424 + 768) = *(_OWORD *)v625;
            if (v427)
            {
              nitro::nitro_function::nitro_function(v427);
              uint64_t v407 = *(void *)v425;
            }
            else
            {
              uint64_t v407 = v426;
            }
            size_t v432 = a5;
            if (a5 != 4 * *(int *)(v407 + 8))
            {
              v550 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::to_string(&v614, a5);
              v551 = std::string::insert(&v614, 0, "Unexpected size s=");
              long long v552 = *(_OWORD *)&v551->__r_.__value_.__l.__data_;
              v615.__r_.__value_.__r.__words[2] = v551->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v615.__r_.__value_.__l.__data_ = v552;
              v551->__r_.__value_.__l.__size_ = 0;
              v551->__r_.__value_.__r.__words[2] = 0;
              v551->__r_.__value_.__r.__words[0] = 0;
              v553 = std::string::append(&v615, "/blob=");
              long long v554 = *(_OWORD *)&v553->__r_.__value_.__l.__data_;
              v616.__r_.__value_.__r.__words[2] = v553->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v616.__r_.__value_.__l.__data_ = v554;
              v553->__r_.__value_.__l.__size_ = 0;
              v553->__r_.__value_.__r.__words[2] = 0;
              v553->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v613, 4 * *(int *)(*(void *)v425 + 8));
              if ((v613.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v555 = &v613;
              }
              else {
                v555 = (std::string *)v613.__r_.__value_.__r.__words[0];
              }
              if ((v613.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v556 = HIBYTE(v613.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v556 = v613.__r_.__value_.__l.__size_;
              }
              v557 = std::string::append(&v616, (const std::string::value_type *)v555, v556);
              long long v558 = *(_OWORD *)&v557->__r_.__value_.__l.__data_;
              v617.__r_.__value_.__r.__words[2] = v557->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v617.__r_.__value_.__l.__data_ = v558;
              v557->__r_.__value_.__l.__size_ = 0;
              v557->__r_.__value_.__r.__words[2] = 0;
              v557->__r_.__value_.__r.__words[0] = 0;
              std::string::basic_string[abi:ne180100]<0>(&v610, " @ ");
              if ((v612 & 0x80u) == 0) {
                v559 = (const std::string::value_type *)&v610;
              }
              else {
                v559 = v610;
              }
              if ((v612 & 0x80u) == 0) {
                std::string::size_type v560 = v612;
              }
              else {
                std::string::size_type v560 = v611;
              }
              v561 = std::string::append(&v617, v559, v560);
              long long v562 = *(_OWORD *)&v561->__r_.__value_.__l.__data_;
              v618.__r_.__value_.__r.__words[2] = v561->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v618.__r_.__value_.__l.__data_ = v562;
              v561->__r_.__value_.__l.__size_ = 0;
              v561->__r_.__value_.__r.__words[2] = 0;
              v561->__r_.__value_.__r.__words[0] = 0;
              v563 = std::string::append(&v618, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelInterfaces.mm");
              long long v564 = *(_OWORD *)&v563->__r_.__value_.__l.__data_;
              v631.__r_.__value_.__r.__words[2] = v563->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v631.__r_.__value_.__l.__data_ = v564;
              v563->__r_.__value_.__l.__size_ = 0;
              v563->__r_.__value_.__r.__words[2] = 0;
              v563->__r_.__value_.__r.__words[0] = 0;
              std::string::basic_string[abi:ne180100]<0>(&v607, ":");
              if ((v609 & 0x80u) == 0) {
                v565 = (const std::string::value_type *)&v607;
              }
              else {
                v565 = v607;
              }
              if ((v609 & 0x80u) == 0) {
                std::string::size_type v566 = v609;
              }
              else {
                std::string::size_type v566 = v608;
              }
              v567 = std::string::append(&v631, v565, v566);
              long long v568 = *(_OWORD *)&v567->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v567->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v568;
              v567->__r_.__value_.__l.__size_ = 0;
              v567->__r_.__value_.__r.__words[2] = 0;
              v567->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v606, 9094);
              if ((v606.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v569 = &v606;
              }
              else {
                v569 = (std::string *)v606.__r_.__value_.__r.__words[0];
              }
              if ((v606.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v570 = HIBYTE(v606.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v570 = v606.__r_.__value_.__l.__size_;
              }
              v571 = std::string::append(&__p, (const std::string::value_type *)v569, v570);
              long long v572 = *(_OWORD *)&v571->__r_.__value_.__l.__data_;
              *(void *)&v625[16] = *((void *)&v571->__r_.__value_.__l + 2);
              *(_OWORD *)v625 = v572;
              v571->__r_.__value_.__l.__size_ = 0;
              v571->__r_.__value_.__r.__words[2] = 0;
              v571->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v550, (const std::string *)v625);
              __cxa_throw(v550, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            goto LABEL_908;
          }
          std::operator+<char>();
          BOOL v433 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
          if ((v625[23] & 0x80000000) != 0) {
            operator delete(*(void **)v625);
          }
          if (v433)
          {
            uint64_t v434 = *(void *)v27;
            std::string::basic_string[abi:ne180100]<0>(v625, "W");
            (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v434 + 160))(v434, a2, v625, a4, a5, 0);
            v430 = v584;
            if ((v625[23] & 0x80000000) != 0) {
              operator delete(*(void **)v625);
            }
            v605[0] = v576;
            v605[1] = (uint64_t)v577;
            if (v577) {
              atomic_fetch_add_explicit(&v577->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(v625, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v605, v589, v592, v575 == 0);
            if (v577) {
              nitro::nitro_function::nitro_function(v577);
            }
          }
          else
          {
            std::operator+<char>();
            BOOL v438 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
            if ((v625[23] & 0x80000000) != 0) {
              operator delete(*(void **)v625);
            }
            if (!v438)
            {
              std::operator+<char>();
              BOOL v444 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
              if ((v625[23] & 0x80000000) != 0) {
                operator delete(*(void **)v625);
              }
              if (v444)
              {
                uint64_t v445 = *(void *)v27;
                std::string::basic_string[abi:ne180100]<0>(v625, "W_f16");
                (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v445 + 160))(v445, a2, v625, a4, a5, 0);
                goto LABEL_988;
              }
              std::operator+<char>();
              BOOL v448 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
              if ((v625[23] & 0x80000000) != 0) {
                operator delete(*(void **)v625);
              }
              if (v448)
              {
                uint64_t v449 = *(void *)v84;
                std::string::basic_string[abi:ne180100]<0>(v625, "W_f16");
                (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v449 + 160))(v449, a2, v625, a4, a5, 0);
                goto LABEL_988;
              }
              std::operator+<char>();
              BOOL v452 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
              if ((v625[23] & 0x80000000) != 0) {
                operator delete(*(void **)v625);
              }
              if (!v452)
              {
                std::operator+<char>();
                BOOL v455 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
                if ((v625[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v625);
                }
                if (v455)
                {
                  uint64_t v456 = *(void *)v27;
                  std::string::basic_string[abi:ne180100]<0>(v625, "w_f32_t");
                  (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v456 + 160))(v456, a2, v625, a4, a5, 0);
                }
                else
                {
                  std::operator+<char>();
                  BOOL v465 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
                  if ((v625[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v625);
                  }
                  if (v465)
                  {
                    uint64_t v466 = *(void *)v84;
                    std::string::basic_string[abi:ne180100]<0>(v625, "w_f32_t");
                    (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v466 + 160))(v466, a2, v625, a4, a5, 0);
                  }
                  else
                  {
                    std::operator+<char>();
                    BOOL v472 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
                    if ((v625[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v625);
                    }
                    if (v472)
                    {
                      uint64_t v473 = *(void *)v27;
                      std::string::basic_string[abi:ne180100]<0>(v625, "w_f16_t");
                      (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v473 + 160))(v473, a2, v625, a4, a5, 0);
                    }
                    else
                    {
                      std::operator+<char>();
                      BOOL v476 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)a3, v625);
                      if ((v625[23] & 0x80000000) != 0) {
                        operator delete(*(void **)v625);
                      }
                      if (!v476) {
                        goto LABEL_991;
                      }
                      uint64_t v477 = *(void *)v84;
                      std::string::basic_string[abi:ne180100]<0>(v625, "w_f16_t");
                      (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v477 + 160))(v477, a2, v625, a4, a5, 0);
                    }
                  }
                }
                goto LABEL_988;
              }
              uint64_t v451 = *(void *)(a1 + 16 * v17 + 520);
              if (v451)
              {
LABEL_925:
                std::string::basic_string[abi:ne180100]<0>(v625, "biases");
                (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v451 + 160))(v451, a2, v625, a4, a5, 0);
LABEL_988:
                if ((v625[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v625);
                }
                goto LABEL_786;
              }
              v603[0] = v576;
              v603[1] = (uint64_t)v577;
              if (v577) {
                atomic_fetch_add_explicit(&v577->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(v625, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v603, v592, v575 == 0);
              if (v577) {
                nitro::nitro_function::nitro_function(v577);
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,1>> &,void>(&__p, v584, (uint64_t *)v625);
              v631.__r_.__value_.__r.__words[0] = a3;
              v469 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v574, (void *)a3, (long long **)&v631);
              v470 = (std::__shared_weak_count *)v469[8];
              *(_OWORD *)(v469 + 7) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              if (v470) {
                nitro::nitro_function::nitro_function(v470);
              }
              uint64_t v471 = *(void *)v27;
              v463 = *(std::__shared_weak_count **)&v625[8];
              long long v602 = *(_OWORD *)v625;
              if (*(void *)&v625[8]) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v625[8] + 8), 1uLL, memory_order_relaxed);
              }
              (*(void (**)(uint64_t, long long *))(*(void *)v471 + 392))(v471, &v602);
              v464 = (std::__shared_weak_count *)*((void *)&v602 + 1);
              if (!*((void *)&v602 + 1)) {
                goto LABEL_956;
              }
LABEL_955:
              nitro::nitro_function::nitro_function(v464);
LABEL_956:
              if (v463) {
                nitro::nitro_function::nitro_function(v463);
              }
              goto LABEL_786;
            }
            uint64_t v439 = *(void *)v84;
            std::string::basic_string[abi:ne180100]<0>(v625, "W");
            (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t, unint64_t, void))(*(void *)v439 + 160))(v439, a2, v625, a4, a5, 0);
            v430 = v584;
            if ((v625[23] & 0x80000000) != 0) {
              operator delete(*(void **)v625);
            }
            v604[0] = v576;
            v604[1] = (uint64_t)v577;
            if (v577) {
              atomic_fetch_add_explicit(&v577->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(v625, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (const void *)a4, a5, v604, v592, v592, v575 == 0);
            if (v577) {
              nitro::nitro_function::nitro_function(v577);
            }
          }
LABEL_898:
          std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,2>> &,void>(&__p, v430, (uint64_t *)v625);
          v631.__r_.__value_.__r.__words[0] = a3;
          v440 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v574, (void *)a3, (long long **)&v631);
          v441 = (std::__shared_weak_count *)v440[8];
          *(_OWORD *)(v440 + 7) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          if (v441) {
            nitro::nitro_function::nitro_function(v441);
          }
          v399 = *(std::__shared_weak_count **)&v625[8];
          if (*(void *)&v625[8]) {
            goto LABEL_805;
          }
        }
LABEL_786:
        if (v630 < 0) {
          operator delete(v629);
        }
        char v9 = 1;
        uint64_t v10 = 1;
        if ((v16 & 1) == 0) {
          continue;
        }
        if (v577) {
          nitro::nitro_function::nitro_function(v577);
        }
        return;
      case 2:
        goto LABEL_786;
      default:
        v478 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&__p, *(_DWORD *)(a1 + 304));
        v479 = std::string::insert(&__p, 0, "Invalid cell mode ");
        long long v480 = *(_OWORD *)&v479->__r_.__value_.__l.__data_;
        *(void *)&v625[16] = *((void *)&v479->__r_.__value_.__l + 2);
        *(_OWORD *)v625 = v480;
        v479->__r_.__value_.__l.__size_ = 0;
        v479->__r_.__value_.__r.__words[2] = 0;
        v479->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v478, (const std::string *)v625);
        __cxa_throw(v478, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
}

void sub_192A3ADB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete((void *)STACK[0x258]);
  }
  if (SLOBYTE(STACK[0x497]) < 0) {
    operator delete((void *)STACK[0x480]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (*(char *)(v17 - 137) < 0) {
    operator delete(*(void **)(v17 - 160));
  }
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  if (SLOBYTE(STACK[0x29F]) < 0) {
    operator delete((void *)STACK[0x288]);
  }
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  if (SLOBYTE(STACK[0x2CF]) < 0)
  {
    operator delete((void *)STACK[0x2B8]);
    if ((v15 & 1) == 0)
    {
LABEL_28:
      if (*(char *)(v17 - 161) < 0) {
        operator delete(*(void **)(v17 - 184));
      }
      if (a15) {
        nitro::nitro_function::nitro_function(a15);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v15)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v16);
  goto LABEL_28;
}

void sub_192A3B434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a15) {
    JUMPOUT(0x192A3B42CLL);
  }
  JUMPOUT(0x192A3B424);
}

void Espresso::generic_rnn_arch_kernel_impl::__initialize_dynamic_quantization(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(_DWORD *)(a2 + 36) == 5)
  {
    if (!*(unsigned char *)(a1 + 436)) {
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("generic_rnn_arch_kernel_impl: dynamic quantization with legacy mode");
    }
    uint64_t v35 = 0x1FFFFFFFFLL;
    Espresso::abstract_engine_factory::shared(&v33);
    uint64_t v12 = v33;
    std::string::basic_string[abi:ne180100]<0>(__p, "dynamic_quantize");
    LODWORD(v27) = (***(uint64_t (****)(void))(*(void *)(a1 + 8) + 8))(*(void *)(*(void *)(a1 + 8)
                                                                                                 + 8));
    Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v12, a1 + 8, (uint64_t)__p, (uint64_t)&v35, (int *)&v27);
    uint64_t v13 = lpsrc;
    if (lpsrc
    {
      uint64_t v14 = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    int v15 = (void *)(a5 + 16 * a3);
    char v16 = (std::__shared_weak_count *)v15[1];
    void *v15 = v13;
    v15[1] = v14;
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(*(void **)__p);
    }
    if (v34) {
      nitro::nitro_function::nitro_function(v34);
    }
    __p[0] = -1;
    int v17 = *(unsigned __int8 *)(a1 + 436);
    *(void *)&__p[1] = *(void *)(a2 + 12);
    int v30 = *(_DWORD *)(a2 + 28);
    int v31 = v17;
    *(void *)&__p[3] = *(void *)(a2 + 20);
    int v32 = *(_DWORD *)(a4 + 4 * a3);
    Espresso::abstract_engine_factory::shared(&v27);
    uint64_t v18 = v27;
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "dynamic_dequantize");
    int v23 = (***(uint64_t (****)(void))(*(void *)(a1 + 8) + 8))(*(void *)(*(void *)(a1 + 8) + 8));
    Espresso::abstract_engine_factory::make_kernel_priv(v18, a1 + 8, (uint64_t)&lpsrc, (uint64_t)__p, &v23);
    int v19 = v33;
    if (v33
    {
      int v20 = v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      int v20 = 0;
    }
    char v21 = (void *)(a6 + 16 * a3);
    int v22 = (std::__shared_weak_count *)v21[1];
    void *v21 = v19;
    v21[1] = v20;
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    if (v34) {
      nitro::nitro_function::nitro_function(v34);
    }
    if (v26 < 0) {
      operator delete(lpsrc);
    }
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
  }
}

void sub_192A3B73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_192A3B774(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (!a24) {
    JUMPOUT(0x192A3B76CLL);
  }
  JUMPOUT(0x192A3B768);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,2>> &,void>(void *a1, void *a2, uint64_t *a3)
{
  unsigned int v6 = (char *)operator new(0x118uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unsigned int v6 = &unk_1EE38C588;
  Espresso::abstract_blob_container::abstract_blob_container((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE3718A0;
  *((void *)v6 + 34) = 0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *((_DWORD *)v6 + 66) = 0;
  uint64_t v7 = *a3;
  uint64_t v8 = operator new(0x60uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_1EE3899C8;
  char v9 = (std::__shared_weak_count *)a3[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v11 = *(_DWORD *)(v7 + 8);
  int v10 = *(_DWORD *)(v7 + 12);
  v8[3] = &unk_1EE36BF10;
  v8[8] = 0;
  v8[9] = 0;
  v8[10] = v7;
  v8[11] = v9;
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *((_DWORD *)v8 + 8) = v11;
    *((_DWORD *)v8 + 9) = v10;
    v8[5] = 0x100000001;
    v8[6] = *(void *)(v7 + 16);
    *((unsigned char *)v8 + 56) = 0;
    nitro::nitro_function::nitro_function(v9);
  }
  else
  {
    *((_DWORD *)v8 + 8) = v11;
    *((_DWORD *)v8 + 9) = v10;
    v8[5] = 0x100000001;
    v8[6] = *(void *)(v7 + 16);
    *((unsigned char *)v8 + 56) = 0;
  }
  *(void *)&long long v12 = v8 + 3;
  *((void *)&v12 + 1) = v8;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v6 + 24);
  *(_OWORD *)(v6 + 184) = v12;
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  *((_DWORD *)v6 + 66) = 0;
  *a1 = v6 + 24;
  a1[1] = v6;
}

void sub_192A3B924(_Unwind_Exception *a1)
{
  Espresso::abstract_blob_container::~abstract_blob_container(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::blob<unsigned char,2>::make(void *a1, int a2)
{
}

void std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,1>> &,void>(void *a1, void *a2, uint64_t *a3)
{
  unsigned int v6 = (char *)operator new(0x118uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unsigned int v6 = &unk_1EE38C588;
  Espresso::abstract_blob_container::abstract_blob_container((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE3718A0;
  *((void *)v6 + 34) = 0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *((_DWORD *)v6 + 66) = 0;
  uint64_t v7 = *a3;
  uint64_t v8 = operator new(0x60uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_1EE3899C8;
  char v9 = (std::__shared_weak_count *)a3[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v10 = *(_DWORD *)(v7 + 8);
  v8[3] = &unk_1EE36BF10;
  v8[8] = 0;
  v8[9] = 0;
  v8[10] = v7;
  v8[11] = v9;
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *((_DWORD *)v8 + 8) = v10;
    *(void *)((char *)v8 + 36) = 0x100000001;
    *((_DWORD *)v8 + 11) = 1;
    v8[6] = *(void *)(v7 + 16);
    *((unsigned char *)v8 + 56) = 0;
    nitro::nitro_function::nitro_function(v9);
  }
  else
  {
    *((_DWORD *)v8 + 8) = v10;
    *(void *)((char *)v8 + 36) = 0x100000001;
    *((_DWORD *)v8 + 11) = 1;
    v8[6] = *(void *)(v7 + 16);
    *((unsigned char *)v8 + 56) = 0;
  }
  *(void *)&long long v11 = v8 + 3;
  *((void *)&v11 + 1) = v8;
  long long v12 = (std::__shared_weak_count *)*((void *)v6 + 24);
  *(_OWORD *)(v6 + 184) = v11;
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  *((_DWORD *)v6 + 66) = 0;
  *a1 = v6 + 24;
  a1[1] = v6;
}

void sub_192A3BAF4(_Unwind_Exception *a1)
{
  Espresso::abstract_blob_container::~abstract_blob_container(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  int v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)int v10 = &unk_1EE389AA8;
  *((void *)v10 + 3) = &unk_1EE36BF90;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  size_t v11 = a3 * (uint64_t)a2 * a4 * a5;
  long long v12 = Espresso::kern_alloc_uninitialized((Espresso *)v11);
  bzero(v12, v11);
  *((void *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_192A3BBF0(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::generic_rnn_arch_kernel_impl::on_resized(uint64_t a1)
{
  if (*(void *)(a1 + 864))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<Espresso::layer_data>>>>::__deallocate_node(*(void **)(a1 + 856));
    *(void *)(a1 + 856) = 0;
    uint64_t v2 = *(void *)(a1 + 848);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)(a1 + 840) + 8 * i) = 0;
    }
    *(void *)(a1 + 864) = 0;
  }
}

void Espresso::generic_rnn_arch_kernel_impl::clear_weights(Espresso::generic_rnn_arch_kernel_impl *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 89);
  *((_OWORD *)this + 44) = 0u;
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 91);
  *((void *)this + 90) = 0;
  *((void *)this + 91) = 0;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 93);
  *((_OWORD *)this + 46) = 0u;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  unsigned int v5 = (std::__shared_weak_count *)*((void *)this + 95);
  *((void *)this + 94) = 0;
  *((void *)this + 95) = 0;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  unsigned int v6 = (std::__shared_weak_count *)*((void *)this + 97);
  *((_OWORD *)this + 48) = 0u;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 99);
  *((void *)this + 98) = 0;
  *((void *)this + 99) = 0;
  if (v7)
  {
    nitro::nitro_function::nitro_function(v7);
  }
}

void Espresso::generic_rnn_arch_kernel_impl::__launch(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t **a4)
{
  int v7 = *(_DWORD *)(a1 + 440);
  if (v7 == 1)
  {
    uint64_t v13 = *(void (**)(void))(*(void *)a1 + 392);
    v13();
  }
  else
  {
    if (v7)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v37, *(_DWORD *)(a1 + 440));
      int v32 = std::string::insert(&v37, 0, "Invalid value ");
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v38);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v8 = *a4;
    uint64_t v10 = **a4;
    char v9 = (std::__shared_weak_count *)(*a4)[1];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v8 = *a4;
    }
    std::string::size_type v11 = v8[2];
    long long v12 = (std::__shared_weak_count *)v8[3];
    v38.__r_.__value_.__r.__words[0] = v11;
    v38.__r_.__value_.__l.__size_ = (std::string::size_type)v12;
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      v37.__r_.__value_.__r.__words[0] = v11;
      v37.__r_.__value_.__l.__size_ = (std::string::size_type)v12;
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v11;
    }
    uint64_t v14 = *a3;
    int v15 = (std::__shared_weak_count *)(*a3)[1];
    uint64_t v35 = v15;
    char v36 = v9;
    uint64_t v34 = **a3;
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = *a3;
    }
    char v16 = (_DWORD *)(a1 + 304);
    uint64_t v17 = v14[2];
    uint64_t v18 = (std::__shared_weak_count *)v14[3];
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v19 = v18;
    uint64_t v20 = v17;
    if (!*v16)
    {
      std::string::size_type v22 = (*a4)[4];
      std::string::size_type v21 = (*a4)[5];
      if (v21) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::size_type size = (std::__shared_weak_count *)v37.__r_.__value_.__l.__size_;
      v37.__r_.__value_.__r.__words[0] = v22;
      v37.__r_.__value_.__l.__size_ = v21;
      if (size) {
        nitro::nitro_function::nitro_function(size);
      }
      uint64_t v20 = (*a3)[4];
      int v19 = (std::__shared_weak_count *)(*a3)[5];
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v18) {
        nitro::nitro_function::nitro_function(v18);
      }
      v52[0] = v20;
      v52[1] = (uint64_t)v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::axpby_closure::operator()((void *)(a1 + 688), (uint64_t)a2, (long long *)&v37, v52, 1, 1.0, 0.0);
      if (v19) {
        nitro::nitro_function::nitro_function(v19);
      }
    }
    *(_DWORD *)(a1 + 616) = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10);
    v51[0] = v17;
    v51[1] = (uint64_t)v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::axpby_closure::operator()((void *)(a1 + 688), (uint64_t)a2, (long long *)&v38, v51, 1, 1.0, 0.0);
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    uint64_t v24 = (std::__shared_weak_count *)a2[1];
    uint64_t v49 = *a2;
    std::string::size_type v50 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v25 = *(_OWORD *)(a1 + 400);
    long long v26 = *(_OWORD *)(a1 + 416);
    long long v27 = *(_OWORD *)(a1 + 368);
    _DWORD v47[5] = *(_OWORD *)(a1 + 384);
    v47[6] = v25;
    v47[7] = v26;
    long long v28 = *(_OWORD *)(a1 + 336);
    long long v29 = *(_OWORD *)(a1 + 352);
    long long v30 = *(_OWORD *)v16;
    v47[1] = *(_OWORD *)(a1 + 320);
    v47[2] = v28;
    v47[3] = v29;
    v47[4] = v27;
    uint64_t v48 = *(void *)(a1 + 432);
    v47[0] = v30;
    uint64_t v45 = v10;
    long long v46 = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v43 = v34;
    uint64_t v44 = v35;
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v41 = v17;
    uint64_t v42 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v39 = v20;
    int v40 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, void, _OWORD *, uint64_t *, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 400))(a1, &v49, 0, v47, &v45, 0xFFFFFFFFLL, &v43, &v41, &v39, 0xFFFFFFFFLL);
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    if (v44) {
      nitro::nitro_function::nitro_function(v44);
    }
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    if (v50) {
      nitro::nitro_function::nitro_function(v50);
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    if (v35) {
      nitro::nitro_function::nitro_function(v35);
    }
    if (v37.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v37.__r_.__value_.__l.__size_);
    }
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    if (v36) {
      nitro::nitro_function::nitro_function(v36);
    }
  }
}

void sub_192A3C170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a19 < 0)
  {
    operator delete(a14);
    if ((v35 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v34);
  goto LABEL_8;
}

void Espresso::abstract_kernel_with_named_weights_::~abstract_kernel_with_named_weights_(Espresso::abstract_kernel_with_named_weights_ *this)
{
  *(void *)this = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::abstract_kernel_with_weights_grad_::~abstract_kernel_with_weights_grad_(Espresso::abstract_kernel_with_weights_grad_ *this)
{
  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t Espresso::no_op_kernel::make@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = operator new(0x138uLL);
  v4[1] = 0;
  uint64_t v4[2] = 0;
  void *v4 = &unk_1EE381A78;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  int8x16_t v4[3] = &unk_1EE32A920;
  *a2 = result;
  a2[1] = (uint64_t)v4;
  return result;
}

void sub_192A3C3D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::no_op_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::no_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381A78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::no_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381A78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::generic_convolution_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  int v19 = a4;
  int v20 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v8 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "convolution");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v20);
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v9 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "convolution");
    int v12 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v9, a1, (uint64_t)__p, a2, &v12);
  }
  if (lpsrc
  {
    std::string::size_type v11 = v18;
    *a5 = v10;
    a5[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192A3C5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_conv3d_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  int v19 = a4;
  int v20 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v8 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "conv3d");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v20);
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v9 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "conv3d");
    int v12 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v9, a1, (uint64_t)__p, a2, &v12);
  }
  if (lpsrc
  {
    std::string::size_type v11 = v18;
    *a5 = v10;
    a5[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192A3C774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_lrn_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  int v19 = a4;
  int v20 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v8 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "lrn");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v20);
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v9 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "lrn");
    int v12 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v9, a1, (uint64_t)__p, a2, &v12);
  }
  if (lpsrc
  {
    std::string::size_type v11 = v18;
    *a5 = v10;
    a5[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192A3C904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_pool_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  int v19 = a4;
  int v20 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v8 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "pool");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v20);
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v9 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "pool");
    int v12 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v9, a1, (uint64_t)__p, a2, &v12);
  }
  if (lpsrc
  {
    std::string::size_type v11 = v18;
    *a5 = v10;
    a5[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192A3CA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_softmax_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  int v19 = a4;
  int v20 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v8 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "softmax");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v20);
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v9 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "softmax");
    int v12 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v9, a1, (uint64_t)__p, a2, &v12);
  }
  if (lpsrc
  {
    std::string::size_type v11 = v18;
    *a5 = v10;
    a5[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192A3CC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_inner_product_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  int v19 = a4;
  int v20 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v8 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v20);
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v9 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
    int v12 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v9, a1, (uint64_t)__p, a2, &v12);
  }
  if (lpsrc
  {
    std::string::size_type v11 = v18;
    *a5 = v10;
    a5[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192A3CDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_inner_product_quantized_kernel::make(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_concat_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  int v19 = a4;
  int v20 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v8 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "concat");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v20);
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v9 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "concat");
    int v12 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v9, a1, (uint64_t)__p, a2, &v12);
  }
  if (lpsrc
  {
    std::string::size_type v11 = v18;
    *a5 = v10;
    a5[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192A3CF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_upsample_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  int v19 = a4;
  int v20 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v8 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "upsample");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v20);
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v9 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "upsample");
    int v12 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v9, a1, (uint64_t)__p, a2, &v12);
  }
  if (lpsrc
  {
    std::string::size_type v11 = v18;
    *a5 = v10;
    a5[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192A3D0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_elementwise_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  int v19 = a4;
  int v20 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v8 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v20);
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v9 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
    int v12 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v9, a1, (uint64_t)__p, a2, &v12);
  }
  if (lpsrc
  {
    std::string::size_type v11 = v18;
    *a5 = v10;
    a5[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192A3D26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_split_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  int v19 = a4;
  int v20 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v8 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "split");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v20);
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v9 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "split");
    int v12 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v9, a1, (uint64_t)__p, a2, &v12);
  }
  if (lpsrc
  {
    std::string::size_type v11 = v18;
    *a5 = v10;
    a5[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192A3D3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_deconvolution_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  int v17 = a4;
  int v18 = a3;
  Espresso::abstract_engine_factory::shared(&v13);
  uint64_t v8 = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "deconvolution");
  Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v18);
  if (lpsrc
  {
    uint64_t v10 = v16;
    *a5 = v9;
    a5[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
}

void sub_192A3D540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_deconv3d_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  int v17 = a4;
  int v18 = a3;
  Espresso::abstract_engine_factory::shared(&v13);
  uint64_t v8 = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "deconv3d");
  Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v18);
  if (lpsrc
  {
    uint64_t v10 = v16;
    *a5 = v9;
    a5[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
}

void sub_192A3D67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_activation_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  int v17 = a4;
  int v18 = a3;
  Espresso::abstract_engine_factory::shared(&v13);
  uint64_t v8 = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v18);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (lpsrc
  {
    uint64_t v10 = v16;
    *a5 = v9;
    a5[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192A3D7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::shuffle_to_gpu_conv_weights(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(unsigned int *)(*a1 + 8);
  uint64_t v5 = *(unsigned int *)(*a1 + 12);
  int v6 = *(_DWORD *)(*a1 + 16);
  int v7 = *(_DWORD *)(*a1 + 20);
  int v8 = v6 - 1;
  if (v6 < 1) {
    int v8 = v6 + 2;
  }
  int v70 = v8 >> 2;
  int v9 = (v8 >> 2) + 1;
  int v10 = v7 - 1;
  if (v7 < 1) {
    int v10 = v7 + 2;
  }
  int v68 = v10 >> 2;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,6>,std::allocator<Espresso::blob<float,6>>,int &,int &,int &,int &,int &,int &,void>(a2, 4, 4, v4, v5, v9, (v10 >> 2) + 1);
  uint64_t v11 = 0;
  uint64_t v12 = *a1;
  uint64_t v13 = 1;
  do
  {
    *(void *)&v72[8 * v11] = (int)v13;
    v13 *= *(unsigned int *)(v12 + 4 * v11++ + 8);
  }
  while (v11 != 4);
  uint64_t v14 = v73;
  uint64_t v15 = v74;
  uint64_t v16 = v75;
  int v17 = (std::__shared_weak_count *)a1[1];
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v12 = *a1;
  }
  uint64_t v18 = 0;
  uint64_t v61 = *(_DWORD **)(v12 + 24);
  uint64_t v19 = *a2;
  uint64_t v20 = *a2 + 8;
  uint64_t v21 = 1;
  do
  {
    *(void *)&v72[8 * v18] = (int)v21;
    v21 *= *(unsigned int *)(v20 + 4 * v18++);
  }
  while (v18 != 6);
  uint64_t v57 = v17;
  uint64_t v23 = v73;
  uint64_t v22 = v74;
  uint64_t v25 = v75;
  uint64_t v24 = v76;
  uint64_t v26 = v77;
  long long v27 = (std::__shared_weak_count *)a2[1];
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v56 = v27;
  uint64_t v62 = *(char **)(v19 + 32);
  if (v6 >= 4 && v7 >= 4 && ((v7 | v6) & 3) == 0) {
    goto LABEL_21;
  }
  uint64_t v28 = *(int *)(v19 + 8);
  for (uint64_t i = 12; i != 32; i += 4)
    v28 *= *(int *)(v19 + i);
  if (v28)
  {
    uint64_t v64 = v14;
    uint64_t v66 = v16;
    uint64_t v30 = v15;
    bzero(v62, 4 * v28);
    uint64_t v14 = v64;
    uint64_t v16 = v66;
    uint64_t v15 = v30;
  }
  if (v7 >= -2)
  {
LABEL_21:
    int v31 = v68 & ~(v68 >> 31);
    if (v7 <= 3) {
      uint64_t v32 = v7;
    }
    else {
      uint64_t v32 = 4;
    }
    uint64_t v59 = 4 * v26;
    uint64_t v60 = 0;
    if (v6 <= 3) {
      uint64_t v33 = v6;
    }
    else {
      uint64_t v33 = 4;
    }
    uint64_t v34 = 4 * v25;
    uint64_t v65 = (v70 & ~(v70 >> 31)) + 1;
    uint64_t v67 = 4 * v24;
    uint64_t v35 = 4 * v22;
    uint64_t v36 = 4 * v23;
    uint64_t v58 = 16 * v16;
    uint64_t v63 = 16 * v15;
    uint64_t v37 = 4 * v14;
    uint64_t v38 = 4 * v16;
    uint64_t v39 = 4 * v15;
    do
    {
      if (v6 >= -2)
      {
        int v40 = 0;
        uint64_t v41 = 0;
        uint64_t v42 = v62;
        uint64_t v71 = v61;
        do
        {
          uint64_t v69 = v41;
          if ((int)v5 >= 1)
          {
            uint64_t v43 = 0;
            uint64_t v44 = v71;
            uint64_t v45 = v42;
            do
            {
              if ((int)v4 >= 1)
              {
                uint64_t v46 = 0;
                std::string::size_type v47 = v44;
                uint64_t v48 = v45;
                do
                {
                  if ((int)v32 >= 1)
                  {
                    uint64_t v49 = 0;
                    std::string::size_type v50 = v47;
                    uint64_t v51 = v48;
                    do
                    {
                      if ((int)v33 >= 1)
                      {
                        int v52 = v40;
                        uint64_t v53 = v50;
                        char v54 = v51;
                        uint64_t v55 = v33;
                        do
                        {
                          if (v7 > (int)v49 + 4 * (int)v60 && v6 > v52) {
                            _DWORD *v54 = *v53;
                          }
                          ++v54;
                          uint64_t v53 = (_DWORD *)((char *)v53 + v39);
                          ++v52;
                          --v55;
                        }
                        while (v55);
                      }
                      ++v49;
                      uint64_t v51 = (_DWORD *)((char *)v51 + v36);
                      std::string::size_type v50 = (_DWORD *)((char *)v50 + v38);
                    }
                    while (v49 != v32);
                  }
                  ++v46;
                  uint64_t v48 = (_DWORD *)((char *)v48 + v35);
                  ++v47;
                }
                while (v46 != v4);
              }
              ++v43;
              v45 += v34;
              uint64_t v44 = (_DWORD *)((char *)v44 + v37);
            }
            while (v43 != v5);
          }
          uint64_t v41 = v69 + 1;
          v42 += v67;
          uint64_t v71 = (_DWORD *)((char *)v71 + v63);
          v40 += 4;
        }
        while (v69 + 1 != v65);
      }
      v62 += v59;
      ++v60;
      uint64_t v61 = (_DWORD *)((char *)v61 + v58);
    }
    while (v60 != v31 + 1);
  }
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  if (v57)
  {
    nitro::nitro_function::nitro_function(v57);
  }
}

void Espresso::shuffle_to_gpu_conv_weights_8(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(unsigned int *)(*a1 + 8);
  uint64_t v5 = *(unsigned int *)(*a1 + 12);
  uint64_t v6 = *(int *)(*a1 + 16);
  uint64_t v7 = *(int *)(*a1 + 20);
  int v8 = v6 - 1;
  if ((int)v6 < 1) {
    int v8 = v6 + 2;
  }
  int v9 = v8 >> 2;
  int v10 = (v8 >> 2) + 1;
  int v11 = v7 - 1;
  if ((int)v7 < 1) {
    int v11 = v7 + 2;
  }
  int v12 = v11 >> 2;
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,6>,std::allocator<Espresso::blob<unsigned char,6>>,int &,int &,int &,int &,int &,int &,void>(a2, 4, 4, v4, v5, v10, (v11 >> 2) + 1);
  uint64_t v13 = 0;
  uint64_t v14 = *a1;
  uint64_t v15 = 1;
  do
  {
    *(void *)&v58[8 * v13] = (int)v15;
    v15 *= *(unsigned int *)(v14 + 4 * v13++ + 8);
  }
  while (v13 != 4);
  uint64_t v16 = v59;
  uint64_t v17 = v60;
  uint64_t v18 = v61;
  uint64_t v19 = (std::__shared_weak_count *)a1[1];
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = *a1;
  }
  uint64_t v20 = 0;
  uint64_t v53 = *(unsigned char **)(v14 + 24);
  uint64_t v21 = *a2;
  uint64_t v22 = *a2 + 8;
  uint64_t v23 = 1;
  do
  {
    *(void *)&v58[8 * v20] = (int)v23;
    v23 *= *(unsigned int *)(v22 + 4 * v20++);
  }
  while (v20 != 6);
  uint64_t v48 = v19;
  uint64_t v24 = v59;
  uint64_t v25 = v60;
  uint64_t v26 = v61;
  uint64_t v54 = v62;
  uint64_t v50 = v63;
  long long v27 = (std::__shared_weak_count *)a2[1];
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v47 = v27;
  if ((int)v7 >= -2)
  {
    uint64_t v51 = *(unsigned char **)(v21 + 32);
    uint64_t v52 = 0;
    if ((int)v7 >= 4) {
      int v28 = 4;
    }
    else {
      int v28 = v7;
    }
    if ((int)v6 >= 4) {
      int v29 = 4;
    }
    else {
      int v29 = v6;
    }
    if (v29 <= 1) {
      uint64_t v30 = 1;
    }
    else {
      uint64_t v30 = v29;
    }
    if (v28 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = v28;
    }
    uint64_t v49 = (v12 & ~(v12 >> 31)) + 1;
    do
    {
      if ((int)v6 >= -2)
      {
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v57 = v53;
        uint64_t v56 = v51;
        do
        {
          uint64_t v55 = v33;
          if ((int)v5 >= 1)
          {
            uint64_t v34 = 0;
            uint64_t v36 = v56;
            uint64_t v35 = v57;
            do
            {
              if ((int)v4 >= 1)
              {
                uint64_t v37 = 0;
                uint64_t v38 = v35;
                uint64_t v39 = v36;
                do
                {
                  if ((int)v7 >= 1)
                  {
                    uint64_t v40 = 0;
                    uint64_t v41 = v38;
                    uint64_t v42 = v39;
                    do
                    {
                      if ((int)v6 >= 1)
                      {
                        uint64_t v43 = v32;
                        uint64_t v44 = v41;
                        uint64_t v45 = v42;
                        uint64_t v46 = v30;
                        do
                        {
                          if (v40 + 4 * v52 < v7 && v43 < v6) {
                            *uint64_t v45 = *v44;
                          }
                          ++v45;
                          v44 += v17;
                          ++v43;
                          --v46;
                        }
                        while (v46);
                      }
                      ++v40;
                      v42 += v24;
                      v41 += v18;
                    }
                    while (v40 != v31);
                  }
                  ++v37;
                  v39 += v25;
                  ++v38;
                }
                while (v37 != v4);
              }
              ++v34;
              v36 += v26;
              v35 += v16;
            }
            while (v34 != v5);
          }
          ++v33;
          v56 += v54;
          v57 += 4 * v17;
          v32 += 4;
        }
        while (v55 + 1 != (v9 & ~(v9 >> 31)) + 1);
      }
      v51 += v50;
      ++v52;
      v53 += 4 * v18;
    }
    while (v52 != v49);
  }
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  if (v48)
  {
    nitro::nitro_function::nitro_function(v48);
  }
}

void Espresso::unshuffle_from_gpu_conv_weights(void *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(unsigned int *)(*a1 + 16);
  uint64_t v67 = *(unsigned int *)(*a1 + 20);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(a4, v8, v67, a3, a2);
  uint64_t v9 = 0;
  uint64_t v10 = *a4;
  uint64_t v11 = *a4 + 8;
  uint64_t v12 = 1;
  do
  {
    *(void *)&v68[8 * v9] = (int)v12;
    v12 *= *(unsigned int *)(v11 + 4 * v9++);
  }
  while (v9 != 4);
  uint64_t v14 = v69;
  uint64_t v13 = v70;
  uint64_t v15 = v71;
  uint64_t v16 = (std::__shared_weak_count *)a4[1];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v55 = v16;
  uint64_t v17 = 0;
  uint64_t v60 = *(_DWORD **)(v10 + 24);
  uint64_t v18 = *a1;
  uint64_t v19 = 1;
  do
  {
    *(void *)&v68[8 * v17] = (int)v19;
    v19 *= *(unsigned int *)(v18 + 4 * v17++ + 8);
  }
  while (v17 != 6);
  uint64_t v20 = v69;
  uint64_t v21 = v70;
  uint64_t v22 = v71;
  uint64_t v23 = v72;
  uint64_t v24 = v73;
  uint64_t v25 = (std::__shared_weak_count *)a1[1];
  if (v25)
  {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v18 = *a1;
  }
  uint64_t v54 = v25;
  if (a2 >= -2)
  {
    int v26 = a2 - 1;
    if (a2 < 1) {
      int v26 = a2 + 2;
    }
    if (a3 >= 1) {
      int v27 = a3 - 1;
    }
    else {
      int v27 = a3 + 2;
    }
    uint64_t v58 = *(_DWORD **)(v18 + 32);
    uint64_t v59 = 0;
    if (a2 >= 4) {
      int v28 = 4;
    }
    else {
      int v28 = a2;
    }
    uint64_t v29 = 4 * v24;
    uint64_t v63 = 4 * v23;
    uint64_t v30 = 4 * v22;
    uint64_t v31 = 4 * v21;
    if (a3 >= 4) {
      int v32 = 4;
    }
    else {
      int v32 = a3;
    }
    uint64_t v33 = 4 * v20;
    uint64_t v56 = 16 * v15;
    uint64_t v57 = v29;
    if (v32 <= 1) {
      uint64_t v34 = 1;
    }
    else {
      uint64_t v34 = v32;
    }
    uint64_t v62 = 16 * v13;
    uint64_t v35 = 4 * v14;
    if (v28 <= 1) {
      uint64_t v36 = 1;
    }
    else {
      uint64_t v36 = v28;
    }
    uint64_t v61 = ((v27 >> 2) & ~(v27 >> 31)) + 1;
    uint64_t v37 = 4 * v15;
    uint64_t v38 = 4 * v13;
    do
    {
      if (a3 >= -2)
      {
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        uint64_t v66 = v60;
        uint64_t v65 = v58;
        do
        {
          uint64_t v64 = v40;
          if ((int)v67 >= 1)
          {
            uint64_t v41 = 0;
            uint64_t v43 = v65;
            uint64_t v42 = v66;
            do
            {
              if ((int)v8 >= 1)
              {
                uint64_t v44 = 0;
                uint64_t v45 = v42;
                uint64_t v46 = v43;
                do
                {
                  if (a2 >= 1)
                  {
                    uint64_t v47 = 0;
                    uint64_t v48 = v45;
                    uint64_t v49 = v46;
                    do
                    {
                      if (a3 >= 1)
                      {
                        uint64_t v50 = v39;
                        uint64_t v51 = v48;
                        uint64_t v52 = v49;
                        uint64_t v53 = v34;
                        do
                        {
                          if (v47 + 4 * v59 < a2 && v50 < a3) {
                            *uint64_t v51 = *v52;
                          }
                          ++v52;
                          uint64_t v51 = (_DWORD *)((char *)v51 + v38);
                          ++v50;
                          --v53;
                        }
                        while (v53);
                      }
                      ++v47;
                      uint64_t v49 = (_DWORD *)((char *)v49 + v33);
                      uint64_t v48 = (_DWORD *)((char *)v48 + v37);
                    }
                    while (v47 != v36);
                  }
                  ++v44;
                  uint64_t v46 = (_DWORD *)((char *)v46 + v31);
                  ++v45;
                }
                while (v44 != v8);
              }
              ++v41;
              uint64_t v43 = (_DWORD *)((char *)v43 + v30);
              uint64_t v42 = (_DWORD *)((char *)v42 + v35);
            }
            while (v41 != v67);
          }
          uint64_t v40 = v64 + 1;
          uint64_t v65 = (_DWORD *)((char *)v65 + v63);
          uint64_t v66 = (_DWORD *)((char *)v66 + v62);
          v39 += 4;
        }
        while (v64 + 1 != v61);
      }
      uint64_t v58 = (_DWORD *)((char *)v58 + v57);
      ++v59;
      uint64_t v60 = (_DWORD *)((char *)v60 + v56);
    }
    while (v59 != (v26 >> 2) + 1);
  }
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  if (v55)
  {
    nitro::nitro_function::nitro_function(v55);
  }
}

void Espresso::shuffle_to_gpu_image(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(unsigned int *)(*a1 + 8);
  uint64_t v5 = *(unsigned int *)(*a1 + 12);
  int v6 = *(_DWORD *)(*a1 + 16);
  int v7 = v6 - 1;
  if (v6 < 1) {
    int v7 = v6 + 2;
  }
  int v8 = v7 >> 2;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(a2, 4, v4, v5, (v7 >> 2) + 1);
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v11 = 1;
  do
  {
    *(void *)&v44[8 * v9] = (int)v11;
    v11 *= *(unsigned int *)(v10 + 4 * v9++ + 8);
  }
  while (v9 != 3);
  uint64_t v13 = v45;
  uint64_t v12 = v46;
  uint64_t v14 = (std::__shared_weak_count *)a1[1];
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = *a1;
  }
  uint64_t v15 = 0;
  uint64_t v16 = *(_DWORD **)(v10 + 24);
  uint64_t v17 = *a2;
  uint64_t v18 = *a2 + 8;
  uint64_t v19 = 1;
  do
  {
    *(void *)&v44[8 * v15] = (int)v19;
    v19 *= *(unsigned int *)(v18 + 4 * v15++);
  }
  while (v15 != 4);
  uint64_t v21 = v45;
  uint64_t v20 = v46;
  uint64_t v22 = v47;
  uint64_t v23 = (std::__shared_weak_count *)a2[1];
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6 >= -2)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *(_DWORD **)(v17 + 24);
    uint64_t v26 = 4 * v22;
    uint64_t v27 = 4 * v20;
    if (v6 >= 4) {
      LODWORD(v28) = 4;
    }
    else {
      LODWORD(v28) = v6;
    }
    uint64_t v29 = 4 * v21;
    uint64_t v30 = 16 * v12;
    if ((int)v28 <= 1) {
      uint64_t v28 = 1;
    }
    else {
      uint64_t v28 = v28;
    }
    uint64_t v31 = (v8 & ~(v8 >> 31)) + 1;
    uint64_t v32 = 4 * v13;
    uint64_t v33 = 4 * v12;
    do
    {
      if ((int)v5 >= 1)
      {
        uint64_t v34 = 0;
        uint64_t v35 = v16;
        uint64_t v36 = v25;
        do
        {
          if ((int)v4 >= 1)
          {
            uint64_t v37 = 0;
            uint64_t v38 = v35;
            uint64_t v39 = v36;
            do
            {
              for (int i = 0; i != 4; ++i)
              {
                uint64_t v41 = v38;
                uint64_t v42 = v39;
                uint64_t v43 = v28;
                if (v6 >= 1)
                {
                  do
                  {
                    *v42++ = *v41;
                    uint64_t v41 = (_DWORD *)((char *)v41 + v33);
                    --v43;
                  }
                  while (v43);
                }
              }
              ++v37;
              uint64_t v39 = (_DWORD *)((char *)v39 + v29);
              ++v38;
            }
            while (v37 != v4);
          }
          ++v34;
          uint64_t v36 = (_DWORD *)((char *)v36 + v27);
          uint64_t v35 = (_DWORD *)((char *)v35 + v32);
        }
        while (v34 != v5);
      }
      ++v24;
      uint64_t v25 = (_DWORD *)((char *)v25 + v26);
      uint64_t v16 = (_DWORD *)((char *)v16 + v30);
    }
    while (v24 != v31);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (v14)
  {
    nitro::nitro_function::nitro_function(v14);
  }
}

void Espresso::unshuffle_from_gpu_image(void *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(unsigned int *)(*a1 + 12);
  uint64_t v6 = *(unsigned int *)(*a1 + 16);
  int v7 = *(_DWORD *)(*a1 + 20);
  int v8 = 4 * v7;
  if (a2 == -1) {
    int v9 = 4 * v7;
  }
  else {
    int v9 = a2;
  }
  uint64_t v10 = 1;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(a3, v5, v6, v9, 1);
  uint64_t v11 = 0;
  uint64_t v12 = *a1;
  do
  {
    *(void *)&v47[8 * v11] = (int)v10;
    v10 *= *(unsigned int *)(v12 + 4 * v11++ + 8);
  }
  while (v11 != 4);
  uint64_t v13 = v48;
  uint64_t v14 = v49;
  uint64_t v15 = v50;
  uint64_t v16 = (std::__shared_weak_count *)a1[1];
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v12 = *a1;
  }
  uint64_t v17 = 0;
  uint64_t v18 = *(int **)(v12 + 24);
  uint64_t v19 = *a3;
  uint64_t v20 = *a3 + 8;
  uint64_t v21 = 1;
  do
  {
    *(void *)&v47[8 * v17] = (int)v21;
    v21 *= *(unsigned int *)(v20 + 4 * v17++);
  }
  while (v17 != 3);
  uint64_t v22 = v48;
  uint64_t v23 = v49;
  uint64_t v24 = (std::__shared_weak_count *)a3[1];
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((v7 & 0x80000000) == 0)
  {
    uint64_t v25 = 0;
    int v26 = v8 - 1;
    if (v8 < 1) {
      int v26 = v8 + 2;
    }
    uint64_t v27 = *(_DWORD **)(v19 + 24);
    int v28 = (v26 >> 2) & ~(v26 >> 31);
    uint64_t v29 = 16 * v23;
    uint64_t v30 = 4 * v22;
    if (v9 >= 4) {
      LODWORD(v31) = 4;
    }
    else {
      LODWORD(v31) = v9;
    }
    uint64_t v32 = 4 * v23;
    uint64_t v33 = 4 * v15;
    if ((int)v31 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = v31;
    }
    uint64_t v34 = (v28 + 1);
    uint64_t v35 = 4 * v14;
    uint64_t v36 = 4 * v13;
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v37 = 0;
        uint64_t v38 = v18;
        uint64_t v39 = v27;
        do
        {
          if ((int)v5 >= 1)
          {
            uint64_t v40 = 0;
            uint64_t v41 = v38;
            uint64_t v42 = v39;
            do
            {
              uint64_t v43 = v41;
              uint64_t v44 = v42;
              uint64_t v45 = v31;
              if (v9 >= 1)
              {
                do
                {
                  int v46 = *v43++;
                  _DWORD *v44 = v46;
                  uint64_t v44 = (_DWORD *)((char *)v44 + v32);
                  --v45;
                }
                while (v45);
              }
              ++v40;
              ++v42;
              uint64_t v41 = (int *)((char *)v41 + v36);
            }
            while (v40 != v5);
          }
          ++v37;
          uint64_t v39 = (_DWORD *)((char *)v39 + v30);
          uint64_t v38 = (int *)((char *)v38 + v35);
        }
        while (v37 != v6);
      }
      ++v25;
      uint64_t v27 = (_DWORD *)((char *)v27 + v29);
      uint64_t v18 = (int *)((char *)v18 + v33);
    }
    while (v25 != v34);
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (v16)
  {
    nitro::nitro_function::nitro_function(v16);
  }
}

double Espresso::generic_reshape_like_kernel::GetEquivalentReshapeParams@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0;
  *(_WORD *)(a2 + 32) = 1;
  *(_DWORD *)(a2 + 36) = 2;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  double result = *(double *)(a1 + 16);
  *(double *)(a2 + 16) = result;
  return result;
}

void Espresso::generic_rnn_arch_kernel::~generic_rnn_arch_kernel(Espresso::generic_rnn_arch_kernel *this)
{
  *(void *)this = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));

  Espresso::base_kernel::~base_kernel(this);
}

__n128 Espresso::generic_meta_convolution_kernel::generic_meta_convolution_kernel(void *a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v5 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights(a1, a2);
  *uint64_t v5 = &unk_1EE35E508;
  *(_OWORD *)(v5 + 61) = 0u;
  *(_OWORD *)(v5 + 63) = 0u;
  *(_OWORD *)(v5 + 65) = 0u;
  *(_OWORD *)(v5 + 67) = 0u;
  v5[69] = 0;
  long long v6 = *a4;
  long long v7 = a4[2];
  *((_OWORD *)v5 + 20) = a4[1];
  *((_OWORD *)v5 + 21) = v7;
  *((_OWORD *)v5 + 19) = v6;
  long long v8 = a4[3];
  long long v9 = a4[4];
  long long v10 = a4[6];
  *((_OWORD *)v5 + 24) = a4[5];
  *((_OWORD *)v5 + 25) = v10;
  *((_OWORD *)v5 + 22) = v8;
  *((_OWORD *)v5 + 23) = v9;
  __n128 result = (__n128)a4[7];
  long long v12 = a4[8];
  long long v13 = a4[9];
  *(void *)((char *)v5 + 461) = *(void *)((char *)a4 + 157);
  *((_OWORD *)v5 + 27) = v12;
  *((_OWORD *)v5 + 28) = v13;
  *((__n128 *)v5 + 26) = result;
  *uint64_t v5 = &unk_1EE366D38;
  return result;
}

void Espresso::generic_tunneled_ane_op_kernel::~generic_tunneled_ane_op_kernel(Espresso::generic_tunneled_ane_op_kernel *this)
{
  *(void *)this = &unk_1EE356848;
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::generic_tunneled_ane_op_kernel *)((char *)this + 280));

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_tunneled_ane_unit_kernel::~generic_tunneled_ane_unit_kernel(void **this)
{
  *this = &unk_1EE3569A0;
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(this + 35);

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::generic_patch_extractor_kernel::get_homography_from_4_source_points(Espresso::generic_patch_extractor_kernel *this, float *a2, float *a3)
{
}

void Espresso::generic_quantized_gather_kernel::~generic_quantized_gather_kernel(Espresso::generic_quantized_gather_kernel *this)
{
  *(void *)this = &unk_1EE362518;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  *(void *)this = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_cf_branch_kernel::~generic_cf_branch_kernel(void **this)
{
  *this = &unk_1EE356148;
  if (*((char *)this + 327) < 0) {
    operator delete(this[38]);
  }
  if (*((char *)this + 303) < 0) {
    operator delete(this[35]);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::generic_dynamic_dequantize_kernel::~generic_dynamic_dequantize_kernel(Espresso::generic_dynamic_dequantize_kernel *this)
{
  *(void *)this = &unk_1EE368350;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_spatial_transformer_kernel::get_homography_from_4_source_points(Espresso::generic_spatial_transformer_kernel *this, float *a2, float *a3)
{
}

void Espresso::generic_spatial_transformer_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  int v19 = a4;
  int v20 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v8 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "spatial_transformer");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v20);
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v9 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "spatial_transformer");
    int v12 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v9, a1, (uint64_t)__p, a2, &v12);
  }
  if (lpsrc
  {
    uint64_t v11 = v18;
    *a5 = v10;
    a5[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192A3EB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_copy_kernel::make(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  int v19 = a4;
  int v20 = a3;
  if (a4 | a3)
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v8 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "copy");
    Espresso::abstract_engine_factory::make_kernel_priv(v8, a1, (uint64_t)__p, a2, &v20);
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v15);
    uint64_t v9 = v15;
    std::string::basic_string[abi:ne180100]<0>(__p, "copy");
    int v12 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v9, a1, (uint64_t)__p, a2, &v12);
  }
  if (lpsrc
  {
    uint64_t v11 = v18;
    *a5 = v10;
    a5[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192A3ED24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::generic_fused_convolution_grad_kernel::output_idx@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  return Espresso::fused_weighted_grad_output_idx<Espresso::fused_convolution_grad_params_t>((unsigned __int8 *)(a1 + 280), *a2, a3);
}

uint64_t Espresso::generic_fused_inner_product_grad_kernel::output_idx@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  return Espresso::fused_weighted_grad_output_idx<Espresso::fused_inner_product_grad_params_t>((unsigned __int8 *)(a1 + 280), *a2, a3);
}

void Espresso::generic_cf_jump_kernel::~generic_cf_jump_kernel(Espresso::generic_cf_jump_kernel *this)
{
  *((void *)this + 36) = &unk_1EE366248;
  if (*((char *)this + 319) < 0) {
    operator delete(*((void **)this + 37));
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_cf_call_kernel::~generic_cf_call_kernel(Espresso::generic_cf_call_kernel *this)
{
  *(void *)this = &unk_1EE358488;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EE355E98;
  if (*((char *)this + 303) < 0) {
    operator delete(*((void **)this + 35));
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t Espresso::generic_load_global_kernel::global_name(Espresso::generic_load_global_kernel *this)
{
  return (uint64_t)this + 280;
}

void Espresso::generic_load_global_kernel::~generic_load_global_kernel(Espresso::generic_load_global_kernel *this)
{
  *(void *)this = &unk_1EE35EA38;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EE3562A0;
  if (*((char *)this + 303) < 0) {
    operator delete(*((void **)this + 35));
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_store_global_kernel::~generic_store_global_kernel(void **this)
{
  *this = &unk_1EE3563F8;
  if (*((char *)this + 303) < 0) {
    operator delete(this[35]);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::generic_cf_if_kernel::~generic_cf_if_kernel(Espresso::generic_cf_if_kernel *this)
{
  *((void *)this + 36) = &unk_1EE366248;
  if (*((char *)this + 319) < 0) {
    operator delete(*((void **)this + 37));
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_cf_loop_kernel::~generic_cf_loop_kernel(Espresso::generic_cf_loop_kernel *this)
{
  *((void *)this + 36) = &unk_1EE366248;
  if (*((char *)this + 319) < 0) {
    operator delete(*((void **)this + 37));
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_cf_for_kernel::~generic_cf_for_kernel(Espresso::generic_cf_for_kernel *this)
{
  *(void *)this = &unk_1EE3541C8;
  *((void *)this + 36) = &unk_1EE354320;
  if (*((char *)this + 351) < 0) {
    operator delete(*((void **)this + 41));
  }
  *((void *)this + 36) = &unk_1EE366248;
  if (*((char *)this + 319) < 0) {
    operator delete(*((void **)this + 37));
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_cf_end_kernel::~generic_cf_end_kernel(Espresso::generic_cf_end_kernel *this)
{
  *(void *)this = &unk_1EE354070;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (*((char *)this + 311) < 0) {
    operator delete(*((void **)this + 36));
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_cf_else_kernel::~generic_cf_else_kernel(Espresso::generic_cf_else_kernel *this)
{
  *((void *)this + 36) = &unk_1EE366248;
  if (*((char *)this + 319) < 0) {
    operator delete(*((void **)this + 37));
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(Espresso::generic_instancenorm_1d_kernel *this)
{
  *(void *)this = &unk_1EE365240;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_builtin_kernel::~generic_builtin_kernel(void **this)
{
  *this = &unk_1EE358330;
  uint64_t v2 = this + 54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = &unk_1EE355D40;
  if (*((char *)this + 399) < 0) {
    operator delete(this[47]);
  }
  if (*((char *)this + 375) < 0) {
    operator delete(this[44]);
  }
  if (*((char *)this + 351) < 0) {
    operator delete(this[41]);
  }
  if (*((char *)this + 327) < 0) {
    operator delete(this[38]);
  }
  if (*((char *)this + 303) < 0) {
    operator delete(this[35]);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::generic_transplant_kernel::~generic_transplant_kernel(Espresso::generic_transplant_kernel *this)
{
  *(void *)this = &unk_1EE35D8B0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE361D20;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  *(void *)this = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_sparse_inner_product_kernel::~generic_sparse_inner_product_kernel(Espresso::generic_sparse_inner_product_kernel *this)
{
  *(void *)this = &unk_1EE3626B0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  *(void *)this = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_wg_transform_4_out_kernel_::~generic_wg_transform_4_out_kernel_(Espresso::generic_wg_transform_4_out_kernel_ *this)
{
  *(void *)this = &unk_1EE361EB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  *(void *)this = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::abstract_kernel_with_weights<Espresso::wg_transform_params>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
}

void Espresso::generic_loopkit_kernel::~generic_loopkit_kernel(void **this)
{
  *this = &unk_1EE358E50;
  if (*((char *)this + 447) < 0) {
    operator delete(this[53]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[52];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  *this = &unk_1EE355FF0;
  uint64_t v3 = this[47];
  if (v3)
  {
    this[48] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 375) < 0) {
    operator delete(this[44]);
  }
  if (*((char *)this + 351) < 0) {
    operator delete(this[41]);
  }
  uint64_t v4 = this[38];
  if (v4)
  {
    this[39] = v4;
    operator delete(v4);
  }
  if (*((char *)this + 303) < 0) {
    operator delete(this[35]);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(Espresso::generic_conv3d_kernel *this)
{
  *(void *)this = &unk_1EE3619F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  *(void *)this = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_static_dequantize_kernel::~generic_static_dequantize_kernel(Espresso::generic_static_dequantize_kernel *this)
{
  *(void *)this = &unk_1EE367B58;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  *(void *)this = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_einsum_kernel::~generic_einsum_kernel(Espresso::generic_einsum_kernel *this)
{
  *(void *)this = &unk_1EE355600;
  uint64_t v2 = (void *)*((void *)this + 44);
  if (v2)
  {
    *((void *)this + 45) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 41);
  if (v3)
  {
    *((void *)this + 42) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 38);
  if (v4)
  {
    *((void *)this + 39) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 303) < 0) {
    operator delete(*((void **)this + 35));
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_linear_quantize_kernel::~generic_linear_quantize_kernel(Espresso::generic_linear_quantize_kernel *this)
{
  *(void *)this = &unk_1EE365398;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_linear_dequantize_kernel::~generic_linear_dequantize_kernel(Espresso::generic_linear_dequantize_kernel *this)
{
  *(void *)this = &unk_1EE367750;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t Espresso::generic_load_constant_kernel::get_constant_blob@<X0>(Espresso::generic_load_constant_kernel *this@<X0>, void *a2@<X8>)
{
  return Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(a2, (uint64_t *)this + 43);
}

uint64_t Espresso::util_bake_batchnorm(Espresso *this, int a2, uint64_t a3, const float *a4, float *a5, const float *a6, float *a7, float *a8)
{
  return Espresso::util_bake_batchnorm_generic((uint64_t)this, a2, 1, a3, a4, a5, a6, a8);
}

uint64_t Espresso::util_bake_batchnorm_generic(uint64_t this, int a2, int a3, uint64_t a4, const float *a5, float *a6, const float *a7, float *a8)
{
  if ((int)this >= 1)
  {
    int v8 = 0;
    uint64_t v9 = 0;
    do
    {
      long long v10 = &a6[4 * v9];
      double v11 = *v10;
      double v12 = v10[3];
      float v13 = v10[1] - v11 * v10[2] / v12;
      a7[v9] = v13;
      if (a3 >= 1)
      {
        int v14 = 0;
        int v15 = v8;
        do
        {
          int v16 = v15;
          uint64_t v17 = a2;
          if (a2 >= 1)
          {
            do
            {
              float v18 = v11 * *(float *)(a4 + 4 * v16) / v12;
              a5[v16++] = v18;
              --v17;
            }
            while (v17);
          }
          ++v14;
          v15 += a2 * this;
        }
        while (v14 != a3);
      }
      ++v9;
      v8 += a2;
    }
    while (v9 != this);
  }
  return this;
}

void Espresso::generic_rnn_kernel::~generic_rnn_kernel(Espresso::generic_rnn_kernel *this)
{
  *(void *)this = &unk_1EE34E248;
  uint64_t v2 = (void *)*((void *)this + 103);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 104);
    uint64_t v4 = (void *)*((void *)this + 103);
    if (v3 != v2)
    {
      do
      {
        v3 -= 6;
        std::allocator<Espresso::generic_rnn_kernel::embedding_cluster>::destroy[abi:ne180100](v3);
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 103);
    }
    *((void *)this + 104) = v2;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 101));
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 99);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  double v11 = (void **)((char *)this + 760);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v11);
  double v11 = (void **)((char *)this + 736);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v11);
  long long v6 = (std::__shared_weak_count *)*((void *)this + 90);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  double v11 = (void **)((char *)this + 688);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v11);
  double v11 = (void **)((char *)this + 664);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v11);
  long long v7 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  double v11 = (void **)((char *)this + 616);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v11);
  double v11 = (void **)((char *)this + 592);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v11);
  int v8 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  double v11 = (void **)((char *)this + 544);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v11);
  double v11 = (void **)((char *)this + 520);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  double v11 = (void **)((char *)this + 472);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v11);
  double v11 = (void **)((char *)this + 448);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v11);
  long long v10 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  double v11 = (void **)((char *)this + 400);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v11);
  double v11 = (void **)((char *)this + 376);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v11);
  *(void *)this = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::abstract_kernel_with_weights<Espresso::pool_params>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
}

void Espresso::abstract_kernel_with_weights<Espresso::inner_product_uniforms>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
}

void Espresso::generic_bias_kernel::~generic_bias_kernel(Espresso::generic_bias_kernel *this)
{
  *(void *)this = &unk_1EE3616C0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  *(void *)this = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::abstract_kernel_with_weights<Espresso::bias_params>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
}

void Espresso::generic_convolution_grad_kernel::~generic_convolution_grad_kernel(Espresso::generic_convolution_grad_kernel *this)
{
  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::abstract_kernel_with_weights<Espresso::batchnorm_params>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
}

void Espresso::generic_bias_grad_kernel::~generic_bias_grad_kernel(Espresso::generic_bias_grad_kernel *this)
{
  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_batchnorm_grad_kernel::~generic_batchnorm_grad_kernel(Espresso::generic_batchnorm_grad_kernel *this)
{
  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_inner_product_grad_kernel::~generic_inner_product_grad_kernel(Espresso::generic_inner_product_grad_kernel *this)
{
  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_inner_product_weights_grad_kernel::~generic_inner_product_weights_grad_kernel(Espresso::generic_inner_product_weights_grad_kernel *this)
{
  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_convolution_weights_grad_kernel::~generic_convolution_weights_grad_kernel(Espresso::generic_convolution_weights_grad_kernel *this)
{
  *(void *)this = &unk_1EE368A88;
  uint64_t v2 = (void **)((char *)this + 280);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t Espresso::generic_lambda_kernel::generic_lambda_kernel(uint64_t a1, uint64_t *a2, unsigned int *a3, const std::string *a4)
{
  uint64_t v8 = Espresso::base_kernel::base_kernel(a1, a2) + 280;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  *(void *)a1 = &unk_1EE354BD8;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::string::operator=((std::string *)v8, a4);
  std::string::operator=((std::string *)(a1 + 304), a4 + 1);
  Espresso::load_network((uint64_t)a4, a2, *a3, 0, (uint64_t *)&v11);
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 336);
  *(_OWORD *)(a1 + 328) = v11;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  return a1;
}

void sub_192A400C0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 336);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::kernel_with_uniforms<Espresso::lambda_params_t>::~kernel_with_uniforms((void **)v1);
  _Unwind_Resume(a1);
}

void Espresso::kernel_with_uniforms<Espresso::lambda_params_t>::~kernel_with_uniforms(void **this)
{
  *this = &unk_1EE355758;
  if (*((char *)this + 327) < 0) {
    operator delete(this[38]);
  }
  if (*((char *)this + 303) < 0) {
    operator delete(this[35]);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::apply_nonlinearity(float *__C, vDSP_Length __N, uint64_t a3)
{
}

uint64_t ___ZN25JITBackendSignpostEmitter15startJITSegmentENS_11ComputeUnitE_block_invoke()
{
  return kdebug_trace();
}

void Espresso::batch_metal::autocreate_command_encoder(id *this)
{
  uint64_t v2 = [this[18] computeCommandEncoder];
  id v3 = this[19];
  this[19] = (id)v2;

  *((unsigned char *)this + 248) = 0;
}

void Espresso::batch_metal::log_profiler_event(id *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Espresso::abstract_batch::log_profiler_event((Espresso::abstract_batch *)this);
  if (this[13])
  {
    id v12 = objc_alloc_init(MEMORY[0x1E4F35308]);
    float v13 = [this[18] device];
    int v14 = (void *)[v13 newSharedEvent];

    v18[0] = 0;
    v18[1] = v18;
    long long v18[2] = 0x4012000000;
    void v18[3] = __Block_byref_object_copy__16621;
    v18[4] = __Block_byref_object_dispose__16622;
    void v18[5] = "";
    int v15 = (std::__shared_weak_count *)this[14];
    v18[6] = this[13];
    int v19 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    long long v16[2] = ___ZN8Espresso11batch_metal18log_profiler_eventEiyyyy_block_invoke;
    void v16[3] = &unk_1E57475D8;
    int v17 = a2;
    v16[6] = a4;
    v16[7] = a5;
    v16[8] = a6;
    void v16[4] = v18;
    v16[5] = a3;
    [v14 notifyListener:v12 atValue:1 block:v16];
    [this[18] encodeSignalEvent:v14 value:1];
    _Block_object_dispose(v18, 8);
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
  }
}

void sub_192A40388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__16621(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__16622(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void ___ZN8Espresso11batch_metal18log_profiler_eventEiyyyy_block_invoke(uint64_t a1)
{
  *(void *)&v2[0] = 0xBFF0000000000000;
  DWORD2(v2[0]) = *(_DWORD *)(a1 + 72);
  long long v1 = *(_OWORD *)(a1 + 56);
  v2[1] = *(_OWORD *)(a1 + 40);
  v2[2] = v1;
  Espresso::profiler_t::log_event(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48), v2);
}

uint64_t Espresso::batch_metal::sync_point(Espresso::batch_metal *this)
{
  if (!*((void *)this + 23))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "sync_point not allowed without command queue");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (*(void (**)(Espresso::batch_metal *))(*(void *)this + 16))(this);
  (*(void (**)(Espresso::batch_metal *))(*(void *)this + 24))(this);
  uint64_t v2 = *((void *)this + 20);
  if ((unint64_t)(*((void *)this + 22) - v2) <= 0x7F)
  {
    uint64_t v3 = *((void *)this + 21) - v2;
    v9[4] = (char *)this + 176;
    v9[0] = operator new(0x80uLL);
    v9[1] = v9[0] + v3;
    v9[2] = v9[0] + v3;
    v9[3] = v9[0] + 128;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer((void *)this + 20, v9);
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v9);
  }
  uint64_t v4 = [*((id *)this + 23) commandBuffer];
  uint64_t v5 = (void *)*((void *)this + 18);
  *((void *)this + 18) = v4;

  long long v6 = *(uint64_t (**)(Espresso::batch_metal *))(*(void *)this + 72);

  return v6(this);
}

void sub_192A40590(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::batch_metal::sync_wait_for_scheduled(Espresso::batch_metal *this)
{
  if (!*((unsigned char *)this + 248)) {
    (*(void (**)(Espresso::batch_metal *))(*(void *)this + 16))(this);
  }
  uint64_t v2 = (Espresso *)[*((id *)this + 18) waitUntilScheduled];
  if (*((unsigned char *)this + 192))
  {
    uint64_t v4 = Espresso::espresso_os_log_subsystem(v2, v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_debug_impl(&dword_1920CB000, v4, OS_LOG_TYPE_DEBUG, "Metal batch: sync_wait_for_scheduled completed\n", v5, 2u);
    }
  }
}

void Espresso::batch_metal::sync_wait(Espresso::batch_metal *this)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 248)) {
    (*(void (**)(Espresso::batch_metal *))(*(void *)this + 16))(this);
  }
  v30[0] = 1;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v36 = 0;
  uint64_t v32 = 50000;
  int v31 = 723714224;
  kdebug_trace();
  [*((id *)this + 18) waitUntilCompleted];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v2 = *((id *)this + 25);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v26 objects:v37 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v27;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v27 != v4) {
          objc_enumerationMutation(v2);
        }
        long long v6 = *(void **)(*((void *)&v26 + 1) + 8 * i);
        if ([v6 status] != 4 && objc_msgSend(v6, "status") != 5) {
          [v6 waitUntilCompleted];
        }
        Espresso::throw_commandbuffer_error(v6);
        if (*((_DWORD *)this + 64))
        {
          [v6 GPUEndTime];
          double v8 = v7;
          [v6 GPUStartTime];
          *(float *)&double v9 = v8 - v9 + *((float *)this + 14);
          *((_DWORD *)this + 14) = LODWORD(v9);
          [v6 kernelEndTime];
          double v11 = v10;
          [v6 kernelStartTime];
          *(float *)&double v12 = v11 - v12 + *((float *)this + 15);
          *((_DWORD *)this + 15) = LODWORD(v12);
        }
      }
      uint64_t v3 = [v2 countByEnumeratingWithState:&v26 objects:v37 count:16];
    }
    while (v3);
  }

  if (*((_DWORD *)this + 64))
  {
    [*((id *)this + 18) GPUEndTime];
    double v14 = v13;
    [*((id *)this + 18) GPUStartTime];
    *(float *)&double v15 = v14 - v15 + *((float *)this + 14);
    *((_DWORD *)this + 14) = LODWORD(v15);
    [*((id *)this + 18) kernelEndTime];
    double v17 = v16;
    [*((id *)this + 18) kernelStartTime];
    *(float *)&double v18 = v17 - v18 + *((float *)this + 15);
    *((_DWORD *)this + 15) = LODWORD(v18);
  }
  int v19 = (void *)*((void *)this + 25);
  *((void *)this + 25) = 0;

  Espresso::throw_commandbuffer_error(*((void **)this + 18));
  int v20 = (void *)*((void *)this + 18);
  *((void *)this + 18) = 0;

  uint64_t v21 = (void *)*((void *)this + 19);
  *((void *)this + 19) = 0;

  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)this + 20);
  if (*((unsigned char *)this + 192))
  {
    uint64_t v24 = Espresso::espresso_os_log_subsystem(v22, v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v25 = 0;
      _os_log_debug_impl(&dword_1920CB000, v24, OS_LOG_TYPE_DEBUG, "Metal batch: sync_wait completed\n", v25, 2u);
    }
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v30);
}

void sub_192A40950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)va);
  _Unwind_Resume(a1);
}

void Espresso::throw_commandbuffer_error(void *a1)
{
  id v2 = a1;
  Espresso::commandbuffer_error_string_if_any((uint64_t)&v3, v2);
  if (v3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::generic_error::generic_error(exception, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_192A40A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void Espresso::commandbuffer_error_string_if_any(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];

  if (v4)
  {
    uint64_t v5 = NSString;
    long long v6 = [v3 error];
    double v7 = [v6 localizedDescription];
    double v8 = [v3 error];
    double v9 = [v5 stringWithFormat:@"%@ code=%d", v7, objc_msgSend(v8, "code")];;

    id v10 = v9;
    std::string::basic_string[abi:ne180100]<0>(&v11, (char *)[v10 UTF8String]);
    *(_DWORD *)a1 = 1;
    *(_OWORD *)(a1 + 8) = v11;
    *(void *)(a1 + 24) = v12;
  }
  else if ([v3 status] == 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "Unspecified metal error");
    *(_DWORD *)a1 = 1;
    *(_OWORD *)(a1 + 8) = v11;
    *(void *)(a1 + 24) = v12;
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
}

void sub_192A40B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::batch_metal::commit(id *this)
{
  uint64_t result = [this[19] endEncoding];
  if (this[23]) {
    uint64_t result = [this[18] commit];
  }
  *((unsigned char *)this + 248) = 1;
  return result;
}

void Espresso::batch_metal::~batch_metal(id *this)
{
  Espresso::batch_metal::~batch_metal(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  *this = &unk_1EE32A548;
  if (!*((unsigned char *)this + 248)) {
    [this[19] endEncoding];
  }

  Espresso::abstract_batch_metal::~abstract_batch_metal((Espresso::abstract_batch_metal *)this);
}

float Espresso::context_metal::begin_batch@<S0>(id *this@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  if (a2)
  {
    long long v6 = operator new(0x120uLL);
    v6[1] = 0;
    v6[2] = 0;
    void *v6 = &unk_1EE381810;
    *(void *)&long long v7 = Espresso::batch_metal::batch_metal((uint64_t)(v6 + 3), (uint64_t)this, a2);
    *((void *)&v7 + 1) = v6;
    long long v11 = v7;

    long long v8 = v11;
  }
  else
  {
    double v9 = operator new(0x120uLL);
    v9[1] = 0;
    v9[2] = 0;
    *double v9 = &unk_1EE381810;
    *(void *)&long long v8 = Espresso::batch_metal::batch_metal((Espresso::batch_metal *)(v9 + 3), this);
    *((void *)&v8 + 1) = v9;
  }
  *(unsigned char *)(v8 + 216) = *((unsigned char *)this + 172);
  *(void *)(v8 + 224) = this[22];
  float result = *((float *)this + 42);
  *(float *)(v8 + 212) = result;
  *(unsigned char *)(v8 + 232) = *((unsigned char *)this + 184);
  *a3 = v8;
  return result;
}

void sub_192A40DB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

Espresso::batch_metal *Espresso::batch_metal::batch_metal(Espresso::batch_metal *this, id *a2)
{
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((unsigned char *)this + 40) = 1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_WORD *)this + 48) = 256;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 0;
  *((_OWORD *)this + 9) = 0u;
  uint64_t v4 = (void **)((char *)this + 144);
  *((_OWORD *)this + 10) = 0u;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  uint64_t v5 = (id *)((char *)this + 184);
  *(void *)this = &unk_1EE32A548;
  *((unsigned char *)this + 192) = 0;
  *((unsigned char *)this + 216) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 28) = 1;
  *((unsigned char *)this + 232) = 0;
  *((void *)this + 30) = 0;
  *((unsigned char *)this + 248) = 0;
  *((_DWORD *)this + 63) = 0;
  *((_DWORD *)this + 64) = 0;
  objc_storeStrong((id *)this + 23, a2[24]);
  uint64_t v6 = [*v5 commandBuffer];
  long long v7 = *v4;
  void *v4 = (void *)v6;

  if (*((_DWORD *)a2 + 47)) {
    (*(void (**)(Espresso::batch_metal *))(*(void *)this + 72))(this);
  }
  *((_DWORD *)this + 64) = *((unsigned __int8 *)a2 + 64);
  *((unsigned char *)this + 97) = 0;
  return this;
}

void sub_192A40F00(_Unwind_Exception *a1)
{
  Espresso::abstract_batch_metal::~abstract_batch_metal((Espresso::abstract_batch_metal *)v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::batch_metal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::batch_metal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381810;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::batch_metal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::batch_metal::batch_metal(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_WORD *)(a1 + 96) = 256;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)a1 = &unk_1EE32A548;
  *(unsigned char *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 1;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 252) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  objc_storeStrong((id *)(a1 + 144), a3);
  if (*(_DWORD *)(a2 + 188)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 72))(a1);
  }
  *(_DWORD *)(a1 + 256) = *(unsigned __int8 *)(a2 + 64);
  *(unsigned char *)(a1 + 97) = 0;

  return a1;
}

void sub_192A410C0(_Unwind_Exception *a1)
{
  Espresso::abstract_batch_metal::~abstract_batch_metal((Espresso::abstract_batch_metal *)v1);
  _Unwind_Resume(a1);
}

void Espresso::context_metal::set_priority(Espresso::context_metal *this, int a2, float a3, unsigned int a4)
{
  if (!*((void *)this + 24)) {
    Espresso::throw_exception_selector<Espresso::device_not_found_error>("set_priority not allowed without command queue");
  }
  *((unsigned char *)this + 172) = a2;
  *((float *)this + 42) = a3;
  *((void *)this + 22) = a4;
  uint64_t v6 = [*((id *)this + 18) newCommandQueueWithMaxCommandBufferCount:*((int *)this + 39)];
  long long v7 = (void *)*((void *)this + 24);
  *((void *)this + 24) = v6;

  long long v8 = (void *)*((void *)this + 24);
  if (a2)
  {
    if (!v8) {
      Espresso::throw_exception_selector<Espresso::device_not_found_error>("Failed to create new command queue");
    }
    id v9 = v8;
    if ((objc_opt_respondsToSelector() & 1) == 0) {
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Low priority not supported");
    }
    [v9 setBackgroundGPUPriority:*((void *)this + 22)];
    [v9 setGPUPriority:*((void *)this + 22)];
  }
  else
  {
    id v9 = v8;
    if (objc_opt_respondsToSelector()) {
      [v9 setGPUPriority:*((void *)this + 22)];
    }
  }
}

void sub_192A41224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::device_not_found_error>(const char *a1)
{
}

void Espresso::context_metal::batch_callback(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  v18[4] = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  if (!*(void *)a2
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Espresso: Not a metal batch");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  id v9 = *(std::__shared_weak_count **)(a2 + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v10 = (void *)v8[18];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3321888768;
  long long v13[2] = ___ZN8Espresso13context_metal14batch_callbackERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectNS1_8functionIFvRKNS_17execution_error_tEEEE_block_invoke;
  v13[3] = &unk_1EE38F348;
  uint64_t v15 = a1;
  double v16 = v8;
  double v17 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v11 = v7;
  id v14 = v11;
  std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::__value_func[abi:ne180100]((uint64_t)v18, a4);
  [v10 addCompletedHandler:v13];
  std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::~__value_func[abi:ne180100](v18);

  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_192A4142C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::~__value_func[abi:ne180100](v19);

  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }

  _Unwind_Resume(a1);
}

void ___ZN8Espresso13context_metal14batch_callbackERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectNS1_8functionIFvRKNS_17execution_error_tEEEE_block_invoke(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = a1[5];
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)(a1[6] + 160));
  uint64_t v5 = a1[6];
  uint64_t v6 = *(void **)(v5 + 144);
  *(void *)(v5 + 144) = 0;

  uint64_t v7 = a1[6];
  long long v8 = *(void **)(v7 + 152);
  *(void *)(v7 + 152) = 0;

  if (*(unsigned char *)(v4 + 64))
  {
    [v3 GPUEndTime];
    double v10 = v9;
    [v3 GPUStartTime];
    *(double *)(v4 + 200) = v10 - v11 + *(double *)(v4 + 200);
    [v3 kernelEndTime];
    double v13 = v12;
    [v3 kernelStartTime];
    *(double *)(v4 + 208) = v13 - v14 + *(double *)(v4 + 208);
    ++*(_DWORD *)(v4 + 216);
  }
  Espresso::commandbuffer_error_string_if_any((uint64_t)&v17, v3);
  uint64_t v15 = a1[4];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZN8Espresso13context_metal14batch_callbackERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectNS1_8functionIFvRKNS_17execution_error_tEEEE_block_invoke_2;
  block[3] = &__block_descriptor_96_ea8_32c58_ZTSNSt3__18functionIFvRKN8Espresso17execution_error_tEEEE64c34_ZTSN8Espresso17execution_error_tE_e5_v8__0l;
  std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)(a1 + 8));
  int v21 = v17;
  int v16 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v18;
  }
  dispatch_async(v15, block);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::~__value_func[abi:ne180100](v20);
  if (v16 < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_192A41658(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::~__value_func[abi:ne180100](v2);
  operator delete(v3);

  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_48c50_ZTSNSt3__110shared_ptrIN8Espresso11batch_metalEEE64c58_ZTSNSt3__18functionIFvRKN8Espresso17execution_error_tEEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::~__value_func[abi:ne180100]((void *)(a1 + 64));
  id v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

uint64_t __copy_helper_block_ea8_48c50_ZTSNSt3__110shared_ptrIN8Espresso11batch_metalEEE64c58_ZTSNSt3__18functionIFvRKN8Espresso17execution_error_tEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::__value_func[abi:ne180100](a1 + 64, a2 + 64);
}

void sub_192A41730(_Unwind_Exception *exception_object)
{
  id v3 = *(std::__shared_weak_count **)(v1 + 56);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN8Espresso13context_metal14batch_callbackERKNSt3__110shared_ptrINS_14abstract_batchEEEPU28objcproto17OS_dispatch_queue8NSObjectNS1_8functionIFvRKNS_17execution_error_tEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void *__destroy_helper_block_ea8_32c58_ZTSNSt3__18functionIFvRKN8Espresso17execution_error_tEEEE64c34_ZTSN8Espresso17execution_error_tE(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }

  return std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

void __copy_helper_block_ea8_32c58_ZTSNSt3__18functionIFvRKN8Espresso17execution_error_tEEEE64c34_ZTSN8Espresso17execution_error_tE(uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  uint64_t v4 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_192A41854(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(Espresso::execution_error_t const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::context_metal::begin_batch(Espresso::context_metal *this)
{
  return (*(uint64_t (**)(Espresso::context_metal *, void))(*(void *)this + 168))(this, 0);
}

uint64_t Espresso::batch_metal::recreate_command_buffer_after_flops(uint64_t this, double a2)
{
  float v2 = 100.0;
  float v3 = a2 / 1000000000.0;
  if (*(unsigned char *)(this + 232)) {
    float v2 = 20.0;
  }
  float v4 = *(float *)(this + 208) + (float)(v3 / v2) * 1000.0;
  *(float *)(this + 208) = v4;
  if (v4 > 60.0)
  {
    uint64_t v5 = this;
    uint64_t v6 = *(void **)(this + 200);
    if (!v6)
    {
      uint64_t v7 = objc_opt_new();
      long long v8 = *(void **)(v5 + 200);
      *(void *)(v5 + 200) = v7;

      uint64_t v6 = *(void **)(v5 + 200);
    }
    [v6 addObject:*(void *)(v5 + 144)];
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    *(_DWORD *)(v5 + 208) = 0;
    uint64_t v9 = [*(id *)(v5 + 184) commandBuffer];
    double v10 = *(void **)(v5 + 144);
    *(void *)(v5 + 144) = v9;

    double v11 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 72);
    return v11(v5);
  }
  return this;
}

void Espresso::batch_metal::recreate_command_buffer(Espresso::batch_metal *this)
{
  float v2 = (void *)*((void *)this + 25);
  if (!v2)
  {
    uint64_t v3 = objc_opt_new();
    float v4 = (void *)*((void *)this + 25);
    *((void *)this + 25) = v3;

    float v2 = (void *)*((void *)this + 25);
  }
  [v2 addObject:*((void *)this + 18)];
  (*(void (**)(Espresso::batch_metal *))(*(void *)this + 16))(this);
  *((_DWORD *)this + 52) = 0;
  uint64_t v5 = [*((id *)this + 23) commandBuffer];
  uint64_t v6 = (void *)*((void *)this + 18);
  *((void *)this + 18) = v5;

  *((unsigned char *)this + 248) = 0;
}

void sub_192A41B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id Espresso::context_metal::kernel_for_function(Espresso::context_metal *this, NSString *a2, NSString *a3, MTLFunctionConstantValues *a4)
{
  uint64_t v7 = a2;
  long long v8 = a3;
  uint64_t v9 = a4;
  double v10 = (void *)*((void *)this + 20);
  double v11 = v7;
  uint64_t v12 = [(NSString *)v11 UTF8String];
  if (v8) {
    uint64_t v13 = [(NSString *)v8 UTF8String];
  }
  else {
    uint64_t v13 = 0;
  }
  double v14 = [v10 kernelForFunction:v12 cacheString:v13 withConstants:v9];

  return v14;
}

void sub_192A41C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id Espresso::context_metal::kernel_for_function(Espresso::context_metal *this, const char *a2, const char *a3, MTLFunctionConstantValues *a4)
{
  float v4 = [(Espresso::context_metal *)this kernelForFunction:a2 cacheString:a3 withConstants:a4];

  return v4;
}

id Espresso::context_metal::kernel_for_function(Espresso::context_metal *this, NSString *a2)
{
  uint64_t v3 = a2;
  float v4 = (void *)*((void *)this + 20);
  uint64_t v5 = v3;
  uint64_t v6 = objc_msgSend(v4, "kernelForFunction:cacheString:withConstants:", -[NSString UTF8String](v5, "UTF8String"), 0, 0);

  return v6;
}

void sub_192A41CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::util_update_metal_priority(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (result)
  {
    if (result)
    {
      uint64_t v7 = (std::__shared_weak_count *)a1[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(unsigned __int8 *)(result + 172) != a2 || *(void *)(result + 176) != a3) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, float))(*(void *)result + 16))(result, a2, a3, 4.0);
      }
      if (v7) {
        nitro::nitro_function::nitro_function(v7);
      }
      return 1;
    }
  }
  return result;
}

void sub_192A41DDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::submit_and_create_new_command_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  float v4 = *(Espresso::batch_metal **)a1;
  if (v4
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::batch_metal::recreate_command_buffer(v4);
    if (v5)
    {
      nitro::nitro_function::nitro_function(v5);
    }
  }
  else
  {
    uint64_t v6 = Espresso::espresso_os_log_subsystem(v4, (const char *)a2);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a2 + 16);
      uint64_t v8 = a2 + 16;
      uint64_t v7 = v9;
      if (*(char *)(v8 + 23) >= 0) {
        uint64_t v7 = v8;
      }
      int v10 = 136315138;
      uint64_t v11 = v7;
      _os_log_error_impl(&dword_1920CB000, v6, OS_LOG_TYPE_ERROR, "Cannot create command buffer on this batch, batch_metal required (layer %s)", (uint8_t *)&v10, 0xCu);
    }
  }
}

void sub_192A41F54(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void *Espresso::EspressoReporterUtilities::get_compute_unit_string@<X0>(uint64_t a1@<X0>, void **a2@<X8>)
{
  uint64_t v3 = a2;
  uint64_t result = std::string::basic_string[abi:ne180100]<0>(a2, "");
  if (*(void *)(a1 + 16))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::ostream_iterator<std::string,char,std::char_traits<char>>>(&v9, *(void **)a1, (void *)(a1 + 8), v6, "_");
    std::stringbuf::str();
    if (*((char *)v3 + 23) < 0) {
      operator delete(*v3);
    }
    *(_OWORD *)uint64_t v3 = v9;
    void v3[2] = v10;
    if (*((char *)v3 + 23) < 0)
    {
      uint64_t v5 = (uint64_t)v3[1] - 1;
      v3[1] = (void *)v5;
      uint64_t v3 = (void **)*v3;
    }
    else
    {
      uint64_t v5 = *((unsigned __int8 *)v3 + 23) - 1;
      *((unsigned char *)v3 + 23) = v5 & 0x7F;
    }
    *((unsigned char *)v3 + v5) = 0;
    v6[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v6[1] = MEMORY[0x1E4FBA470] + 16;
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x192FF15B0](&v8);
  }
  return result;
}

void sub_192A42120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  _Unwind_Resume(a1);
}

void Espresso::EspressoReporterUtilities::append_compute_unit_set(_DWORD *a1, const void **a2, uint64_t **a3)
{
  switch(*a1)
  {
    case 2:
      std::string::basic_string[abi:ne180100]<0>(__p, "ANE");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(a3, __p, (uint64_t)__p);
      goto LABEL_8;
    case 3:
    case 4:
    case 8:
      std::string::basic_string[abi:ne180100]<0>(__p, "CPU");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(a3, __p, (uint64_t)__p);
      goto LABEL_8;
    case 5:
      std::string::basic_string[abi:ne180100]<0>(__p, "GPU");
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(a3, __p, (uint64_t)__p);
LABEL_8:
      if (v5 < 0) {
        operator delete(__p[0]);
      }
      break;
    default:
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a3, a2, (uint64_t)a2);
      break;
  }
}

void sub_192A42248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::EventReporterImplementation::printVectorOfXpcEventObjects(Espresso *a1, const char *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = Espresso::espresso_os_log_subsystem(a1, a2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = (uint64_t)(*((void *)a1 + 1) - *(void *)a1) >> 3;
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v42 = v4;
    _os_log_impl(&dword_1920CB000, v3, OS_LOG_TYPE_INFO, "\n Number of xpc events in the pond : %lu ", buf, 0xCu);
  }

  if (*((void *)a1 + 1) != *(void *)a1)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = Espresso::espresso_os_log_subsystem(v5, v6);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67109120;
        LODWORD(v42) = v7;
        _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "\n %d th xpc event object : \n", buf, 8u);
      }

      id v9 = *(id *)(*(void *)a1 + 8 * v7);
      int v10 = xpc_dictionary_get_value(v9, "computeUnit");
      BOOL v11 = v10 == 0;

      if (!v11)
      {
        double v14 = Espresso::espresso_os_log_subsystem(v12, v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          string = xpc_dictionary_get_string(v9, "computeUnit");
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v42 = (uint64_t)string;
          _os_log_impl(&dword_1920CB000, v14, OS_LOG_TYPE_INFO, "computeUnit : %s, ", buf, 0xCu);
        }
      }
      int v16 = xpc_dictionary_get_value(v9, "numLayers");
      BOOL v17 = v16 == 0;

      if (!v17)
      {
        int v20 = Espresso::espresso_os_log_subsystem(v18, v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          uint64_t uint64 = xpc_dictionary_get_uint64(v9, "numLayers");
          *(_DWORD *)std::string buf = 134217984;
          uint64_t v42 = uint64;
          _os_log_impl(&dword_1920CB000, v20, OS_LOG_TYPE_INFO, "numLayers : %llu, ", buf, 0xCu);
        }
      }
      uint64_t v22 = xpc_dictionary_get_value(v9, "numSegments");
      BOOL v23 = v22 == 0;

      if (!v23)
      {
        long long v26 = Espresso::espresso_os_log_subsystem(v24, v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          uint64_t v27 = xpc_dictionary_get_uint64(v9, "numSegments");
          *(_DWORD *)std::string buf = 134217984;
          uint64_t v42 = v27;
          _os_log_impl(&dword_1920CB000, v26, OS_LOG_TYPE_INFO, "numSegments : %llu, ", buf, 0xCu);
        }
      }
      long long v28 = xpc_dictionary_get_value(v9, "compilerType");
      BOOL v29 = v28 == 0;

      if (!v29)
      {
        uint64_t v32 = Espresso::espresso_os_log_subsystem(v30, v31);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          uint64_t v33 = xpc_dictionary_get_uint64(v9, "compilerType");
          *(_DWORD *)std::string buf = 134217984;
          uint64_t v42 = v33;
          _os_log_impl(&dword_1920CB000, v32, OS_LOG_TYPE_INFO, "compilerType : %llu, ", buf, 0xCu);
        }
      }
      long long v34 = xpc_dictionary_get_value(v9, "modelHash");
      BOOL v35 = v34 == 0;

      if (!v35)
      {
        uint64_t v38 = Espresso::espresso_os_log_subsystem(v36, v37);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          uint64_t v39 = xpc_dictionary_get_string(v9, "modelHash");
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v42 = (uint64_t)v39;
          _os_log_impl(&dword_1920CB000, v38, OS_LOG_TYPE_INFO, "modelHash : %s, ", buf, 0xCu);
        }
      }
      ++v7;
    }
    while (v7 < (uint64_t)(*((void *)a1 + 1) - *(void *)a1) >> 3);
  }
  uint64_t v40 = Espresso::espresso_os_log_subsystem(v5, v6);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1920CB000, v40, OS_LOG_TYPE_INFO, "\n", buf, 2u);
  }
}

void sub_192A426AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::blob_container::__copy_to(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)a2
  {
    return 0;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = *(const void **)(a1 + 72);
  if (!v7
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  id v9 = v8;
  int v10 = *(std::__shared_weak_count **)(a1 + 80);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(void *)a3
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(std::__shared_weak_count **)(a3 + 8);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v23 = v13;
    id v14 = v9[18];
    uint64_t v15 = *((unsigned int *)v12 + 45);
    if ((int)v15 >= 1)
    {
      for (unint64_t i = 0; i != v15; ++i)
      {
        uint64_t v17 = v12[27];
        if (i >= (v12[28] - v17) >> 3) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Empty blob being copied");
        }
        size_t BytesPerRow = IOSurfaceGetBytesPerRow((IOSurfaceRef)[*(id *)(v17 + 8 * i) ioSurfaceForMultiBufferFrame:*(void *)(*(void *)a2 + 80)]);
        int v19 = [*(id *)(v12[27] + 8 * i) metalBufferWithDevice:v14 multiBufferFrame:*(void *)(*(void *)a2 + 80)];
        Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_ane_metal_buffer(a1, a2, v19, BytesPerRow, *((unsigned int *)v12 + 48), i, v15, 0);
      }
    }

    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    uint64_t v20 = 1;
    if (!v10) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v20 = 0;
    if (!v10) {
      goto LABEL_24;
    }
  }
  nitro::nitro_function::nitro_function(v10);
LABEL_24:
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  return v20;
}

void sub_192A429C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_ane_metal_buffer(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, int a6, unsigned int a7, int a8)
{
  id v15 = a3;
  int v16 = v15;
  v63[0] = 0;
  v63[1] = 0;
  uint64_t v64 = 0;
  if (*(void *)(a1 + 248) != 16) {
    goto LABEL_45;
  }
  id v49 = v15;
  if (!a8)
  {
    if (a5 == 1)
    {
      int v17 = *(_DWORD *)(a1 + 192);
      if (v17 == 268435472)
      {
        std::string v18 = "mps_buffers_src_gpu_h_unpacked_h_vec4";
      }
      else
      {
        if (v17 != 268435488) {
          goto LABEL_48;
        }
        std::string v18 = "mps_buffers_src_gpu_f_unpacked_h_vec4";
      }
      goto LABEL_22;
    }
LABEL_47:
    Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("Unsupported interleave factor: %d", a5);
  }
  if (a5 != 1) {
    goto LABEL_47;
  }
  int v17 = *(_DWORD *)(a1 + 192);
  if (v17 > 268435487)
  {
    switch(v17)
    {
      case 268435488:
        std::string v18 = "mps_buffers_dst_gpu_f_unpacked_h_vec4";
        break;
      case 536870920:
        std::string v18 = "mps_buffers_dst_gpu_i8_unpacked_h_vec4";
        break;
      case 536870944:
        std::string v18 = "mps_buffers_dst_gpu_i32_unpacked_h_vec4";
        break;
      default:
        goto LABEL_48;
    }
  }
  else
  {
    switch(v17)
    {
      case 8:
        std::string v18 = "mps_buffers_dst_gpu_ui8_unpacked_h_vec4";
        break;
      case 32:
        std::string v18 = "mps_buffers_dst_gpu_ui32_unpacked_h_vec4";
        break;
      case 268435472:
        std::string v18 = "mps_buffers_dst_gpu_h_unpacked_h_vec4";
        break;
      default:
LABEL_48:
        Espresso::throw_exception_selector<Espresso::not_implemented_error,MPSDataType &>(v17);
    }
  }
LABEL_22:
  MEMORY[0x192FF0F50](v63, v18);
  int v19 = *(const void **)(a1 + 72);
  if (!v19
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  int v21 = v20;
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 80);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v48 = v22;
  if (v64 >= 0) {
    BOOL v23 = v63;
  }
  else {
    BOOL v23 = (void **)v63[0];
  }
  uint64_t v50 = [v20[20] kernelForFunction:v23 cacheString:0 withConstants:0];
  uint64_t v25 = *(std::__shared_weak_count **)(a2 + 8);
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v26 = [v24[18] computeCommandEncoder];
  [v26 setComputePipelineState:v50];
  int v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  unsigned int v28 = a4 >> 1;
  int v29 = *(_DWORD *)(a1 + 12);
  uint64_t v30 = *(int *)(a1 + 8);
  v56[0] = *(_DWORD *)(a1 + 8);
  v56[1] = v29;
  int v31 = *(_DWORD *)(a1 + 16);
  uint64_t v56[2] = v31;
  int32x2_t v32 = vmax_s32(*(int32x2_t *)(a1 + 20), (int32x2_t)0x100000001);
  int32x2_t v57 = v32;
  int v58 = 1;
  if ((v27 - 1) > 0xC) {
    unint64_t v33 = 4;
  }
  else {
    unint64_t v33 = qword_192DF6AD8[v27 - 1];
  }
  int v59 = (*(void *)(a1 + 248) + *(void *)(a1 + 248) * ((v33 * v30 - 1) / *(void *)(a1 + 248))) / v33;
  int v60 = v29 * v59;
  int v34 = v29 * v59 * v31;
  int v61 = v34;
  __int32 v62 = v34 * v32.i32[0];
  int v36 = v30 - 1;
  BOOL v35 = (int)v30 < 1;
  int v37 = v30 + 2;
  if (!v35) {
    int v37 = v36;
  }
  v55[0] = (v37 >> 2) + 1;
  v55[1] = v28 >> 2;
  unsigned int v38 = v29 * v28;
  v55[2] = v38 >> 2;
  v55[3] = (v31 * v38) >> 2;
  v55[4] = (v34 * a6 * (v32.i32[1] * v32.i32[0] / a7)) >> 2;
  v55[5] = v32.i32[1] * v32.i32[0] * v29 * v31 / a7;
  uint64_t v39 = (void *)[v21[18] newBufferWithBytes:v55 length:24 options:0];
  if (a8)
  {
    [v26 setBuffer:*(void *)(a1 + 168) offset:0 atIndex:0];
    uint64_t v40 = v16;
  }
  else
  {
    [v26 setBuffer:v16 offset:0 atIndex:0];
    uint64_t v40 = *(void **)(a1 + 168);
  }
  [v26 setBuffer:v40 offset:0 atIndex:1];
  [v26 setBuffer:v39 offset:0 atIndex:2];
  [v26 setBytes:v56 length:40 atIndex:3];
  int v41 = *(_DWORD *)(a1 + 20);
  int v42 = *(_DWORD *)(a1 + 24);
  int v43 = *(_DWORD *)(a1 + 12);
  int v44 = *(_DWORD *)(a1 + 16);
  int v45 = *(_DWORD *)(a1 + 240);
  unint64_t v46 = [v50 maxTotalThreadsPerThreadgroup];
  unint64_t v53 = ((unint64_t)(v43 * v44 * v45 * (v42 * v41 / (int)a7)) - 1) / v46 + 1;
  int64x2_t v54 = vdupq_n_s64(1uLL);
  unint64_t v51 = v46;
  int64x2_t v52 = v54;
  [v26 dispatchThreadgroups:&v53 threadsPerThreadgroup:&v51];
  [v26 endEncoding];

  int v16 = v49;
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }

  if (SHIBYTE(v64) < 0) {
    operator delete(v63[0]);
  }
LABEL_45:
}

void sub_192A42F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, void *a12)
{
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }

  if (*(char *)(v15 - 89) < 0) {
    operator delete(*(void **)(v15 - 112));
  }

  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,MPSDataType &>(int a1)
{
}

uint64_t Espresso::MPSBuffersEngine::blob_container::__copy_from(int *a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)a2) {
    return 0;
  }
  if (!v6) {
    return 0;
  }
  unint64_t v7 = v6;
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v9 = *(void **)a3;
  if (!*(void *)a3)
  {
    BOOL v11 = 0;
    goto LABEL_12;
  }
  if (!v10)
  {
    BOOL v11 = 0;
LABEL_16:
    if (v15)
    {
      int v16 = v15;
      int v17 = *(std::__shared_weak_count **)(a3 + 8);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string v18 = (const void *)*((void *)a1 + 9);
      unint64_t v46 = v11;
      uint64_t v47 = v8;
      if (!v18
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
      }
      uint64_t v20 = (std::__shared_weak_count *)*((void *)a1 + 10);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      id v21 = v19[18];
      uint64_t v22 = *((unsigned int *)v16 + 45);
      if ((int)v22 >= 1)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          size_t BytesPerRow = IOSurfaceGetBytesPerRow((IOSurfaceRef)objc_msgSend(*(id *)(v16[27] + 8 * i), "ioSurfaceForMultiBufferFrame:", *(void *)(*(void *)a2 + 80), v46, v47));
          uint64_t v25 = [*(id *)(v16[27] + 8 * i) metalBufferWithDevice:v21 multiBufferFrame:*(void *)(*(void *)a2 + 80)];
          Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_ane_metal_buffer((uint64_t)a1, a2, v25, BytesPerRow, *((unsigned int *)v16 + 48), i, v22, 1);
        }
      }

      if (v20) {
        nitro::nitro_function::nitro_function(v20);
      }
      BOOL v11 = v46;
      uint64_t v8 = v47;
      if (!v17)
      {
LABEL_31:
        uint64_t v12 = 1;
        if (!v11) {
          goto LABEL_33;
        }
        goto LABEL_32;
      }
      id v14 = v17;
      goto LABEL_30;
    }
    if (v10) {
      goto LABEL_37;
    }
LABEL_12:
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(buf, v9, *(std::__shared_weak_count **)(a3 + 8));
    if (!*(void *)buf)
    {
      int v29 = (Espresso *)v52;
      if (v52) {
        nitro::nitro_function::nitro_function(v52);
      }
      uint64_t v30 = Espresso::espresso_os_log_subsystem(v29, v13);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_debug_impl(&dword_1920CB000, v30, OS_LOG_TYPE_DEBUG, "Only copies from CPU/MPSBuffer blobs are supported", buf, 2u);
      }

      goto LABEL_50;
    }
    (*(void (**)(int *, uint64_t, uint8_t *))(*(void *)a1 + 48))(a1, a2, buf);
    id v14 = v52;
    if (!v52) {
      goto LABEL_31;
    }
LABEL_30:
    nitro::nitro_function::nitro_function(v14);
    goto LABEL_31;
  }
  BOOL v11 = *(std::__shared_weak_count **)(a3 + 8);
  if (!v11) {
    goto LABEL_16;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  id v9 = *(void **)a3;
  if (*(void *)a3) {
    goto LABEL_16;
  }
LABEL_37:
  if (*((_DWORD *)v10 + 2) == a1[2]
    && *((_DWORD *)v10 + 3) == a1[3]
    && *((_DWORD *)v10 + 4) == a1[4]
    && *((_DWORD *)v10 + 5) == a1[5]
    && *((_DWORD *)v10 + 6) == a1[6])
  {
    Espresso::abstract_blob_container::get_context<Espresso::MPSBuffersEngine::context>(&v53, (uint64_t)a1);
    int v27 = *(unsigned int (**)(int *))(*(void *)a1 + 32);
    if (*((void *)a1 + 31) == 16)
    {
      if (v27(a1) == 1)
      {
        unsigned int v28 = "mps_buffers_copy_float16_to_float16_both_have_alignment";
      }
      else if ((*(unsigned int (**)(int *))(*(void *)a1 + 32))(a1))
      {
        if ((*(unsigned int (**)(int *))(*(void *)a1 + 32))(a1) == 2)
        {
          unsigned int v28 = "mps_buffers_copy_S8_to_S8_both_have_alignment";
        }
        else
        {
          if ((*(unsigned int (**)(int *))(*(void *)a1 + 32))(a1) != 4) {
            goto LABEL_74;
          }
          unsigned int v28 = "mps_buffers_copy_U8_to_U8_both_have_alignment";
        }
      }
      else
      {
        unsigned int v28 = "mps_buffers_copy_float32_to_float32_both_have_alignment";
      }
    }
    else if (v27(a1) == 1)
    {
      unsigned int v28 = "mps_buffers_copy_float16_to_float16_neither_has_alignment";
    }
    else
    {
      if ((*(unsigned int (**)(int *))(*(void *)a1 + 32))(a1)) {
        goto LABEL_74;
      }
      unsigned int v28 = "mps_buffers_copy_float32_to_float32_neither_has_alignment";
    }
    int v31 = [*(id *)(v53 + 160) kernelForFunction:v28 cacheString:0 withConstants:0];
    if (v31)
    {
      int v32 = (*(uint64_t (**)(int *))(*(void *)a1 + 32))(a1);
      Espresso::MPSBuffersEngine::populate_pb_params(buf, (uint64_t)v10, v32);
      unint64_t v33 = [v7[18] computeCommandEncoder];
      [v33 setComputePipelineState:v31];
      [v33 setBuffer:v10[21] offset:0 atIndex:0];
      [v33 setBuffer:*((void *)a1 + 21) offset:0 atIndex:1];
      [v33 setBytes:buf length:56 atIndex:2];
      int v34 = a1[2];
      int v36 = v34 - 1;
      BOOL v35 = v34 < 1;
      int v37 = v34 + 6;
      if (!v35) {
        int v37 = v36;
      }
      uint64_t v38 = a1[5];
      int v39 = a1[4] * a1[3];
      int v40 = v39 - 1;
      BOOL v35 = v39 < 1;
      int v41 = v39 + 6;
      if (!v35) {
        int v41 = v40;
      }
      LODWORD(v42) = a1[6];
      uint64_t v43 = (v41 >> 3) + 1;
      uint64_t v44 = (v37 >> 3) + 1;
      if ((int)v42 <= 1) {
        uint64_t v42 = 1;
      }
      else {
        uint64_t v42 = v42;
      }
      v50[0] = v44;
      v50[1] = v43;
      v50[2] = v42 * v38;
      int64x2_t v48 = vdupq_n_s64(8uLL);
      uint64_t v49 = 1;
      [v33 dispatchThreadgroups:v50 threadsPerThreadgroup:&v48];
      [v33 endEncoding];

      if (v54) {
        nitro::nitro_function::nitro_function(v54);
      }

      goto LABEL_31;
    }
LABEL_74:
    Espresso::throw_exception_selector<Espresso::generic_error>("Could not find kernel for copy.");
  }
LABEL_50:
  uint64_t v12 = 0;
  if (v11) {
LABEL_32:
  }
    nitro::nitro_function::nitro_function(v11);
LABEL_33:
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v12;
}

void sub_192A4370C(_Unwind_Exception *a1)
{
  unint64_t v7 = *(std::__shared_weak_count **)(v5 - 88);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }

  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(a1);
}

void *Espresso::abstract_blob_container::get_context<Espresso::MPSBuffersEngine::context>(void *a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)(a2 + 72);
  if (!v3
  {
    *a1 = 0;
    a1[1] = 0;
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v6 = *(void *)(a2 + 80);
  *a1 = result;
  a1[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_192A438D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *Espresso::MPSBuffersEngine::populate_pb_params(_DWORD *result, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(a2 + 12);
  uint64_t v4 = *(int *)(a2 + 8);
  int v5 = *(_DWORD *)(a2 + 16);
  int v6 = v5 * v3;
  result[1] = v4;
  result[2] = v5 * v3;
  result[6] = v3;
  result[7] = v5;
  unint64_t v7 = *(void *)(a2 + 248);
  result[9] = *(void *)(a2 + 248);
  int v9 = *(_DWORD *)(a2 + 20);
  int v8 = *(_DWORD *)(a2 + 24);
  if (v9 <= 1) {
    int v9 = 1;
  }
  if (v8 <= 1) {
    int v10 = 1;
  }
  else {
    int v10 = *(_DWORD *)(a2 + 24);
  }
  result[8] = v10 * v9;
  if ((a3 - 1) > 0xC) {
    unint64_t v11 = 4;
  }
  else {
    unint64_t v11 = qword_192DF6AD8[a3 - 1];
  }
  unint64_t v12 = (v7 + v7 * ((v11 * v4 - 1) / v7)) / v11;
  *uint64_t result = v12;
  int v13 = v4 - 1;
  if ((int)v4 < 1) {
    int v13 = v4 + 2;
  }
  result[10] = (v13 >> 2) + 1;
  result[11] = v12 >> 2;
  int v14 = *(_DWORD *)(a2 + 20);
  int v15 = v3 * v4;
  int v16 = v6 * v4;
  result[3] = v15;
  result[4] = v16;
  result[5] = v14 * v16;
  if (v14 <= 1) {
    int v17 = 1;
  }
  else {
    int v17 = v14;
  }
  result[12] = v17;
  result[13] = v8;
  return result;
}

uint64_t Espresso::MPSBuffersEngine::blob_container::unsafe_opaque_raw_pointer(Espresso::MPSBuffersEngine::blob_container *this)
{
  return *((void *)this + 21);
}

void Espresso::MPSBuffersEngine::blob_container::__copy_to_CVPixelBuffer(void *a1, uint64_t a2, uint64_t a3, __CVBuffer *a4)
{
  int v5 = (const void *)a1[9];
  if (!v5
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  int v9 = v8;
  int v10 = (std::__shared_weak_count *)a1[10];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (CVPixelBufferGetPixelFormatType(a4) != 1278226536) {
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Copy not implemented for CVPixelBuffer on this engine.");
  }
  IOSurface = CVPixelBufferGetIOSurface(a4);
  if (IOSurface && (unint64_t v12 = (void *)[v9[18] newBufferWithIOSurface:IOSurface]) != 0)
  {
    size_t BytesPerRow = IOSurfaceGetBytesPerRow(IOSurface);
    Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_ane_metal_buffer((uint64_t)a1, a2, v12, BytesPerRow, 1, 0, 1u, 0);
  }
  else
  {
    size_t Width = IOSurfaceGetWidth(IOSurface);
    size_t Height = IOSurfaceGetHeight(IOSurface);
    if (!IOSurface || Width >> 14 || Height >= 0x4000) {
      Espresso::MetalLowmemEngine::blob_container::slow_copy_kCVPixelFormatType_OneComponent16Half_shared(a2, a4, a1, 0);
    }
    else {
      Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_cvpb_iosurface((uint64_t)a1, a2, IOSurface, 0);
    }
    unint64_t v12 = 0;
  }

  if (v10)
  {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192A43BB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_cvpb_iosurface(uint64_t a1, uint64_t a2, __IOSurface *a3, int a4)
{
  v54[0] = 0;
  v54[1] = 0;
  uint64_t v55 = 0;
  int v5 = *(const void **)(a1 + 72);
  if (!v5
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  int v10 = v9;
  unint64_t v11 = *(std::__shared_weak_count **)(a1 + 80);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t Width = IOSurfaceGetWidth(a3);
  int v13 = [MEMORY[0x1E4F35330] texture2DDescriptorWithPixelFormat:25 width:Width height:IOSurfaceGetHeight(a3) mipmapped:0];
  [v13 setUsage:3];
  uint64_t v41 = [v10[18] newTextureWithDescriptor:v13 iosurface:a3 plane:0];
  int v14 = *(_DWORD *)(a1 + 192);
  if (a4)
  {
    if (v14 != 268435488)
    {
      if (v14 == 268435472)
      {
        int v15 = "mps_buffers_dst_gpu_h_from_unpacked_h_tex_vec4";
        goto LABEL_14;
      }
LABEL_44:
      Espresso::throw_exception_selector<Espresso::not_implemented_error,MPSDataType &>(v14);
    }
    int v15 = "mps_buffers_dst_gpu_f_from_unpacked_h_tex_vec4";
  }
  else if (v14 == 268435472)
  {
    int v15 = "mps_buffers_src_gpu_h_to_unpacked_h_tex_vec4";
  }
  else
  {
    if (v14 != 268435488) {
      goto LABEL_44;
    }
    int v15 = "mps_buffers_src_gpu_f_to_unpacked_h_tex_vec4";
  }
LABEL_14:
  MEMORY[0x192FF0F50](v54, v15);
  if (v55 >= 0) {
    int v16 = v54;
  }
  else {
    int v16 = (void **)v54[0];
  }
  int v17 = objc_msgSend(v10[20], "kernelForFunction:cacheString:withConstants:", v16, 0, 0, v41);
  int v19 = *(std::__shared_weak_count **)(a2 + 8);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = [v18[18] computeCommandEncoder];
  [v20 setComputePipelineState:v17];
  unsigned int BytesPerRow = IOSurfaceGetBytesPerRow(a3);
  int v23 = *(_DWORD *)(a1 + 8);
  int v22 = *(_DWORD *)(a1 + 12);
  int v24 = v23 - 1;
  if (v23 < 1) {
    int v24 = v23 + 2;
  }
  int v25 = v24 >> 2;
  v52[0] = (v24 >> 2) + 1;
  v52[1] = BytesPerRow >> 2;
  unsigned int v26 = v22 * BytesPerRow;
  unsigned int v27 = (*(_DWORD *)(a1 + 16) * v26) >> 2;
  uint64_t v52[2] = v26 >> 2;
  v52[3] = v27;
  uint64_t v53 = 0x100000000;
  unsigned int v28 = (void *)[v10[18] newBufferWithBytes:v52 length:24 options:0];
  int v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  int v30 = *(_DWORD *)(a1 + 12);
  uint64_t v31 = *(int *)(a1 + 8);
  v45[0] = *(_DWORD *)(a1 + 8);
  v45[1] = v30;
  int v32 = *(_DWORD *)(a1 + 16);
  uint64_t v45[2] = v32;
  int32x2_t v33 = vmax_s32(*(int32x2_t *)(a1 + 20), (int32x2_t)0x100000001);
  int32x2_t v46 = v33;
  int v47 = 1;
  if ((v29 - 1) > 0xC) {
    unint64_t v34 = 4;
  }
  else {
    unint64_t v34 = qword_192DF6AD8[v29 - 1];
  }
  int v48 = (*(void *)(a1 + 248) + *(void *)(a1 + 248) * ((v34 * v31 - 1) / *(void *)(a1 + 248))) / v34;
  int v49 = v30 * v48;
  int v50 = v30 * v48 * v32;
  __int32 v51 = v50 * v33.i32[0];
  if (a4)
  {
    [v20 setBuffer:*(void *)(a1 + 168) offset:0 atIndex:0];
    [v20 setTexture:v42 atIndex:0];
  }
  else
  {
    [v20 setTexture:v42 atIndex:0];
    [v20 setBuffer:*(void *)(a1 + 168) offset:0 atIndex:0];
  }
  [v20 setBuffer:v28 offset:0 atIndex:1];
  [v20 setBytes:v45 length:40 atIndex:2];
  int v35 = *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 20);
  if (v23 >= 125) {
    uint64_t v36 = 8;
  }
  else {
    uint64_t v36 = 2;
  }
  int v37 = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 12);
  if (v37 >= 32) {
    uint64_t v38 = 8;
  }
  else {
    uint64_t v38 = 2;
  }
  if (v35 < 32) {
    uint64_t v39 = 1;
  }
  else {
    uint64_t v39 = 8;
  }
  v44[0] = v25 / (int)v36 + 1;
  v44[1] = (v37 - 1) / (int)v38 + 1;
  uint64_t v44[2] = (v35 - 1) / (int)v39 + 1;
  v43[0] = v36;
  v43[1] = v38;
  void v43[2] = v39;
  [v20 dispatchThreadgroups:v44 threadsPerThreadgroup:v43];
  [v20 endEncoding];

  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }

  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (SHIBYTE(v55) < 0) {
    operator delete(v54[0]);
  }
}

void sub_192A440CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }

  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (*(char *)(v14 - 81) < 0) {
    operator delete(*(void **)(v14 - 104));
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::blob_container::__copy_from_CVPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3, __CVBuffer *a4, __n128 *a5, uint64_t a6)
{
  unint64_t v7 = *(const void **)(a1 + 72);
  if (!v7
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  int v13 = v12;
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IOSurface = CVPixelBufferGetIOSurface(a4);
  if (!IOSurface || CVPixelBufferGetPixelFormatType(a4) != 1278226536)
  {
    Espresso::abstract_blob_container::__copy_from_CVPixelBuffer((int *)a1, a2, v15, a4, a5, a6);
    goto LABEL_15;
  }
  int v17 = (void *)[v13[18] newBufferWithIOSurface:IOSurface];
  if (v17)
  {
    size_t BytesPerRow = IOSurfaceGetBytesPerRow(IOSurface);
    Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_ane_metal_buffer(a1, a2, v17, BytesPerRow, 1, 0, 1u, 1);
LABEL_14:

    goto LABEL_15;
  }
  size_t Width = IOSurfaceGetWidth(IOSurface);
  size_t Height = IOSurfaceGetHeight(IOSurface);
  if (!(Width >> 14) && Height < 0x4000)
  {
    Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_cvpb_iosurface(a1, a2, IOSurface, 1);
    goto LABEL_14;
  }
  Espresso::MetalLowmemEngine::blob_container::slow_copy_kCVPixelFormatType_OneComponent16Half_shared(a2, a4, (void *)a1, 1u);
LABEL_15:
  if (v14)
  {
    nitro::nitro_function::nitro_function(v14);
  }
}

void sub_192A4439C(_Unwind_Exception *a1)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::blob_container::__copy_from_host(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_host(uint64_t a1, void *lpsrc, std::__shared_weak_count *a3, uint64_t *a4, int a5)
{
  v117[2] = *MEMORY[0x1E4F143B8];
  if (!lpsrc
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_batch_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE33E418;
  }
  int v10 = v9;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v11 = *(const void **)(a1 + 72);
  char v93 = a3;
  if (!v11
  {
    uint64_t v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v87, "Espresso: wrong_context_type");
    v87->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  std::string::size_type v13 = (std::string::size_type)v12;
  std::string::size_type v14 = *(void *)(a1 + 80);
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v92 = (std::__shared_weak_count *)v14;
  std::string::basic_string[abi:ne180100]<0>(&v113, "float32");
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  int v16 = "float16";
  switch(v15)
  {
    case 0:
      goto LABEL_16;
    case 1:
      goto LABEL_15;
    case 2:
      int v16 = "s8";
      goto LABEL_15;
    case 3:
      int v16 = "i32";
      goto LABEL_15;
    case 4:
      int v16 = "u8";
      goto LABEL_15;
    case 8:
      int v16 = "i64";
      goto LABEL_15;
    case 10:
      int v16 = "u32";
LABEL_15:
      MEMORY[0x192FF0F50](&v113, v16);
LABEL_16:
      memset(&v112, 0, sizeof(v112));
      std::string::basic_string[abi:ne180100]<0>(&v109, "copy_");
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1)) {
        MEMORY[0x192FF0F50](&v109, "convert_");
      }
      Espresso::abstract_blob_container::shape((char *)&v100, a1);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v107, (const Espresso::layer_shape *)&v100, 0);
      if (__p)
      {
        char v106 = __p;
        operator delete(__p);
      }
      int v94 = v108;
      std::string::basic_string[abi:ne180100]<0>(v98, "");
      uint64_t v90 = a4;
      int v89 = a5;
      if (a5)
      {
        if ((v111 & 0x80u) == 0) {
          size_t v17 = v111;
        }
        else {
          size_t v17 = v110;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v116, v17 + 8);
        if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v18 = &v116;
        }
        else {
          std::string v18 = (std::string *)v116.__r_.__value_.__r.__words[0];
        }
        if (v17)
        {
          if ((v111 & 0x80u) == 0) {
            int v19 = &v109;
          }
          else {
            int v19 = v109;
          }
          memmove(v18, v19, v17);
        }
        strcpy((char *)v18 + v17, "aligned_");
        if ((v115 & 0x80u) == 0) {
          uint64_t v20 = (const std::string::value_type *)&v113;
        }
        else {
          uint64_t v20 = v113;
        }
        if ((v115 & 0x80u) == 0) {
          std::string::size_type v21 = v115;
        }
        else {
          std::string::size_type v21 = v114;
        }
        int v22 = std::string::append(&v116, v20, v21);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        int v24 = std::string::append(&v100, "_to_packed_float32");
        std::string::size_type v25 = v24->__r_.__value_.__r.__words[0];
        v117[0] = v24->__r_.__value_.__l.__size_;
        *(void *)((char *)v117 + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
        char v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
        v112.__r_.__value_.__r.__words[0] = v25;
        v112.__r_.__value_.__l.__size_ = v117[0];
        *(std::string::size_type *)((char *)&v112.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v117 + 7);
        *((unsigned char *)&v112.__r_.__value_.__s + 23) = v26;
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        {
          unsigned int v27 = (void *)v116.__r_.__value_.__r.__words[0];
LABEL_65:
          operator delete(v27);
        }
      }
      else
      {
        if ((v111 & 0x80u) == 0) {
          size_t v28 = v111;
        }
        else {
          size_t v28 = v110;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v100, v28 + 26);
        if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v29 = &v100;
        }
        else {
          int v29 = (std::string *)v100.__r_.__value_.__r.__words[0];
        }
        if (v28)
        {
          if ((v111 & 0x80u) == 0) {
            int v30 = &v109;
          }
          else {
            int v30 = v109;
          }
          memmove(v29, v30, v28);
        }
        strcpy((char *)v29 + v28, "packed_float32_to_aligned_");
        if ((v115 & 0x80u) == 0) {
          uint64_t v31 = (const std::string::value_type *)&v113;
        }
        else {
          uint64_t v31 = v113;
        }
        if ((v115 & 0x80u) == 0) {
          std::string::size_type v32 = v115;
        }
        else {
          std::string::size_type v32 = v114;
        }
        int32x2_t v33 = std::string::append(&v100, v31, v32);
        std::string::size_type v34 = v33->__r_.__value_.__r.__words[0];
        v116.__r_.__value_.__r.__words[0] = v33->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v116.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v33->__r_.__value_.__r.__words[1] + 7);
        char v35 = HIBYTE(v33->__r_.__value_.__r.__words[2]);
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
        v112.__r_.__value_.__r.__words[0] = v34;
        v112.__r_.__value_.__l.__size_ = v116.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v112.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v116.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v112.__r_.__value_.__s + 23) = v35;
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        {
          unsigned int v27 = (void *)v100.__r_.__value_.__r.__words[0];
          goto LABEL_65;
        }
      }
      if (v94 >= 4 && *(unsigned char *)(v13 + 241))
      {
        MEMORY[0x192FF0F50](v98, "_transposed");
        if ((v99 & 0x80u) == 0) {
          uint64_t v36 = v98;
        }
        else {
          uint64_t v36 = (void **)v98[0];
        }
        if ((v99 & 0x80u) == 0) {
          std::string::size_type v37 = v99;
        }
        else {
          std::string::size_type v37 = (std::string::size_type)v98[1];
        }
        std::string::append(&v112, (const std::string::value_type *)v36, v37);
      }
      if (!*(unsigned char *)(v13 + 241) && *(void *)(a1 + 248) <= 0xFuLL) {
        std::string::append(&v112, "_scalar");
      }
      if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v38 = &v112;
      }
      else {
        uint64_t v38 = (std::string *)v112.__r_.__value_.__r.__words[0];
      }
      uint64_t v39 = [*(id *)(v13 + 160) kernelForFunction:v38 cacheString:0 withConstants:0];
      if (!v39)
      {
        std::string::size_type v88 = &v112;
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v88 = (std::string *)v112.__r_.__value_.__r.__words[0];
        }
        v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Kernel not found: %s", &v100);
      }
      v100.__r_.__value_.__r.__words[0] = v13;
      v100.__r_.__value_.__l.__size_ = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      if (a3) {
        atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v40 = Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<float,4>> const>((uint64_t)&v100, v10, v90);
      if (a3) {
        nitro::nitro_function::nitro_function(a3);
      }
      if (v100.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v100.__r_.__value_.__l.__size_);
      }
      uint64_t v41 = (void *)v10[19];
      char v91 = (void *)v40;
      if (v41)
      {
        id v42 = v41;
      }
      else
      {
        id v42 = [(id)v10[18] computeCommandEncoder];
      }
      [v42 setComputePipelineState:v39];
      uint64_t v43 = *(int *)(a1 + 8);
      unsigned int v44 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) - 1;
      if (v44 > 0xC) {
        uint64_t v45 = 4;
      }
      else {
        uint64_t v45 = qword_192DF6AD8[v44];
      }
      unint64_t v46 = *(void *)(a1 + 248);
      unsigned int v47 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) - 1;
      if (v47 > 0xC) {
        unint64_t v48 = 4;
      }
      else {
        unint64_t v48 = qword_192DF6AD8[v47];
      }
      *(_DWORD *)(a1 + 240) = (v46 + v46 * ((v45 * v43 - 1) / v46)) / v48;
      int v49 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
      int v50 = *(_DWORD *)(a1 + 12);
      uint64_t v51 = *(int *)(a1 + 8);
      int v53 = *(_DWORD *)(a1 + 16);
      int v52 = *(_DWORD *)(a1 + 20);
      int v54 = v53 * v50;
      HIDWORD(v100.__r_.__value_.__r.__words[0]) = *(_DWORD *)(a1 + 8);
      LODWORD(v100.__r_.__value_.__r.__words[1]) = v53 * v50;
      int v101 = v50;
      int v102 = v53;
      uint64_t v55 = *(void *)(a1 + 248);
      unint64_t v56 = v55;
      if (v52 <= 1) {
        int v57 = 1;
      }
      else {
        int v57 = v52;
      }
      int v58 = *(_DWORD *)(a1 + 24);
      if (v58 <= 1) {
        int v59 = 1;
      }
      else {
        int v59 = *(_DWORD *)(a1 + 24);
      }
      int v103 = v59 * v57;
      int v104 = v55;
      if ((v49 - 1) > 0xC) {
        unint64_t v60 = 4;
      }
      else {
        unint64_t v60 = qword_192DF6AD8[v49 - 1];
      }
      unint64_t v61 = (v56 + v56 * ((v60 * v51 - 1) / v56)) / v60;
      int v62 = v51 - 1;
      if ((int)v51 < 1) {
        int v62 = v51 + 2;
      }
      LODWORD(__p) = (v62 >> 2) + 1;
      HIDWORD(__p) = v61 >> 2;
      LODWORD(v100.__r_.__value_.__l.__data_) = v61;
      HIDWORD(v100.__r_.__value_.__r.__words[1]) = v50 * v51;
      LODWORD(v100.__r_.__value_.__r.__words[2]) = v54 * v51;
      HIDWORD(v100.__r_.__value_.__r.__words[2]) = v52 * v54 * v51;
      char v106 = (void *)__PAIR64__(v58, v57);
      if (v89)
      {
        [v42 setBuffer:*(void *)(a1 + 168) offset:0 atIndex:0];
        uint64_t v63 = v40;
      }
      else
      {
        [v42 setBuffer:v40 offset:0 atIndex:0];
        uint64_t v63 = *(void *)(a1 + 168);
      }
      [v42 setBuffer:v63 offset:0 atIndex:1];
      [v42 setBytes:&v100 length:56 atIndex:2];
      int v64 = *(_DWORD *)(a1 + 20);
      int v65 = *(_DWORD *)(a1 + 24);
      int v67 = *(_DWORD *)(a1 + 12);
      int v66 = *(_DWORD *)(a1 + 16);
      int v68 = *(_DWORD *)(a1 + 240);
      unsigned int v69 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
      unint64_t v70 = (v65 * v64 * v66 * v67 * v68);
      if (v69 <= 0xC && ((1 << v69) & 0x1900) != 0)
      {
        uint64_t v72 = v92;
        uint64_t v71 = v93;
        uint64_t v73 = v91;
      }
      else
      {
        uint64_t v72 = v92;
        uint64_t v71 = v93;
        uint64_t v73 = v91;
        if (*(void *)(a1 + 248) == 16) {
          unint64_t v70 = ((v70 - 1) >> 2) + 1;
        }
      }
      unint64_t v74 = [v39 maxTotalThreadsPerThreadgroup];
      unint64_t v75 = (v70 - 1) / v74 + 1;
      if (v94 >= 4 && *(unsigned char *)(v13 + 241))
      {
        unint64_t v75 = ((*(_DWORD *)(a1 + 240) - 1) >> 3) + 1;
        int v76 = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 12);
        int v78 = v76 - 1;
        BOOL v77 = v76 < 1;
        int v79 = v76 + 6;
        if (!v77) {
          int v79 = v78;
        }
        uint64_t v80 = (v79 >> 3) + 1;
        int32x2_t v81 = vmax_s32(*(int32x2_t *)(a1 + 20), (int32x2_t)0x100000001);
        int v82 = vmul_lane_s32(v81, v81, 1).u32[0];
        int v83 = v82 + 2;
        if (v82 >= 1) {
          int v83 = v82 - 1;
        }
        uint64_t v84 = (v83 >> 2) + 1;
        int64x2_t v85 = (int64x2_t)xmmword_192DCA4D0;
        unint64_t v74 = 8;
      }
      else
      {
        uint64_t v80 = 1;
        int64x2_t v85 = vdupq_n_s64(1uLL);
        uint64_t v84 = 1;
      }
      v97[0] = v75;
      v97[1] = v80;
      v97[2] = v84;
      unint64_t v95 = v74;
      int64x2_t v96 = v85;
      [v42 dispatchThreadgroups:v97 threadsPerThreadgroup:&v95];
      if (!v41) {
        [v42 endEncoding];
      }

      if ((char)v99 < 0) {
        operator delete(v98[0]);
      }
      if ((char)v111 < 0) {
        operator delete(v109);
      }
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v112.__r_.__value_.__l.__data_);
      }
      if ((char)v115 < 0) {
        operator delete(v113);
      }
      if (v72) {
        nitro::nitro_function::nitro_function(v72);
      }
      if (v71) {
        nitro::nitro_function::nitro_function(v71);
      }
      return;
    default:
      Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported compute path in MPS Buffers engine.");
  }
}

void sub_192A44E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (*(char *)(v46 - 169) < 0) {
    operator delete(*(void **)(v46 - 192));
  }
  if (*(char *)(v46 - 145) < 0) {
    operator delete(*(void **)(v46 - 168));
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSBuffersEngine::blob_container::__copy_to_host(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!*a3)
  {
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 56))(&v8, a1);
    long long v6 = v8;
    long long v8 = 0uLL;
    unint64_t v7 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v6;
    if (v7)
    {
      nitro::nitro_function::nitro_function(v7);
      if (*((void *)&v8 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v8 + 1));
      }
    }
  }
  Espresso::MPSBuffersEngine::blob_container::__copy_from_or_to_host(a1, *(void **)a2, *(std::__shared_weak_count **)(a2 + 8), a3, 1);
}

uint64_t Espresso::MPSBuffersEngine::blob_container::compute_path(Espresso::MPSBuffersEngine::blob_container *this)
{
  return *((unsigned int *)this + 40);
}

uint64_t Espresso::MPSBuffersEngine::blob_container::platform(Espresso::MPSBuffersEngine::blob_container *this)
{
  return (***(uint64_t (****)(void))(*((void *)this + 9) + 8))(*(void *)(*((void *)this + 9) + 8));
}

void Espresso::MPSBuffersEngine::blob_container::resize(uint64_t a1, const Espresso::layer_shape *a2, uint64_t a3)
{
  unint64_t v7 = *(const void **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  long long v8 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = v6;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (!*(void *)a3)
  {
    int v10 = 0;
    goto LABEL_10;
  }
  int v10 = v9;
  if (!v9)
  {
LABEL_10:
    unint64_t v12 = 0;
    std::string::size_type v13 = 0;
    BOOL v11 = 0;
    goto LABEL_11;
  }
  BOOL v11 = *((unsigned char *)v9 + 88) != 0;
  std::string::size_type v13 = v9[13];
  unint64_t v12 = v9[14];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_11:
  std::string::size_type v14 = *(const void **)(a1 + 72);
  if (!v14
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  int v16 = v15;
  size_t v17 = *(std::__shared_weak_count **)(a1 + 80);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::MPSBuffersEngine::blob_container::setup_shape((Espresso::MPSBuffersEngine::blob_container *)v64, (const Espresso::layer_shape *)a1, a2);
  if (*(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 24))
  {
    unint64_t v56 = v16;
    int v58 = v12;
    std::string v18 = *(void **)(a1 + 200);
    *(void *)(a1 + 200) = 0;

    int v19 = *(void **)(a1 + 208);
    *(void *)(a1 + 208) = 0;

    uint64_t v20 = *(std::__shared_weak_count **)(a1 + 184);
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
    std::string::size_type v21 = *(void **)(a1 + 216);
    *(void *)(a1 + 216) = 0;

    int v22 = *(void **)(a1 + 224);
    *(void *)(a1 + 224) = 0;

    long long v23 = *(void **)(a1 + 232);
    *(void *)(a1 + 232) = 0;

    int v24 = *(_DWORD *)(a1 + 8);
    int v25 = *(_DWORD *)(a1 + 12);
    int v27 = *(_DWORD *)(a1 + 16);
    int v26 = *(_DWORD *)(a1 + 20);
    if (*(int *)(a1 + 24) <= 1) {
      int v28 = 1;
    }
    else {
      int v28 = *(_DWORD *)(a1 + 24);
    }
    Espresso::abstract_blob_container::shape(v59, a1);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v62, (const Espresso::layer_shape *)v59, 0);
    if (__p)
    {
      unint64_t v61 = __p;
      operator delete(__p);
    }
    if (v63 == 3)
    {
      int v29 = *(_DWORD *)(a1 + 8);
      int v25 = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 12);
      if (*(int *)(a1 + 24) <= 1) {
        int v30 = 1;
      }
      else {
        int v30 = *(_DWORD *)(a1 + 24);
      }
      int v31 = v30 * *(_DWORD *)(a1 + 20);
    }
    else
    {
      int v31 = v26 * v27 * v28;
      int v29 = v24;
    }
    unint64_t v12 = v58;
    if (v11)
    {
      v10[12] = v65;
LABEL_34:
      if (!v17) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
    if (v13)
    {
      int32x2_t v33 = 0;
      if (v58 && v32)
      {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
        int32x2_t v33 = v58;
      }
      objc_storeStrong((id *)(a1 + 168), v32[21]);
      if (v33) {
        nitro::nitro_function::nitro_function(v33);
      }
LABEL_50:
      uint64_t v39 = objc_opt_new();
      uint64_t v40 = 268435472;
      uint64_t v41 = *(void **)(a1 + 208);
      *(void *)(a1 + 208) = v39;

      *(_DWORD *)(a1 + 192) = 268435488;
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1))
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) != 1)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) == 3)
          {
            uint64_t v40 = 536870944;
          }
          else if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) == 10)
          {
            uint64_t v40 = 32;
          }
          else if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) == 2)
          {
            uint64_t v40 = 536870920;
          }
          else if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) == 4)
          {
            uint64_t v40 = 8;
          }
          else
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) != 8) {
              Espresso::throw_exception_selector<Espresso::generic_error>("Compute path not supported; FP16, FP32, I32, U32, U8, S8 compute paths supported by MPS_BUFFERS_ENGINE");
            }
            uint64_t v40 = 536870976;
          }
        }
        *(_DWORD *)(a1 + 192) = v40;
      }
      else
      {
        uint64_t v40 = *(unsigned int *)(a1 + 192);
      }
      uint64_t v42 = objc_msgSend(MEMORY[0x1E4F35640], "matrixDescriptorWithRows:columns:matrices:rowBytes:matrixBytes:dataType:", v25, v29, v31, v64[0], v64[1], v40, v56);
      uint64_t v43 = *(void **)(a1 + 208);
      *(void *)(a1 + 208) = v42;

      uint64_t v44 = [objc_alloc(MEMORY[0x1E4F35618]) initWithBuffer:*(void *)(a1 + 168) descriptor:*(void *)(a1 + 208)];
      uint64_t v45 = *(void **)(a1 + 200);
      *(void *)(a1 + 200) = v44;

      uint64_t v46 = objc_opt_new();
      if (v63)
      {
        for (unint64_t i = 0; i < v63; ++i)
        {
          unint64_t v48 = [NSNumber numberWithInt:v62[i]];
          [v46 addObject:v48];
        }
      }
      uint64_t v49 = [objc_alloc(MEMORY[0x1E4F1C978]) initWithArray:v46];
      int v50 = *(void **)(a1 + 232);
      *(void *)(a1 + 232) = v49;

      uint64_t v51 = [MEMORY[0x1E4F35720] descriptorWithDataType:*(unsigned int *)(a1 + 192) shape:*(void *)(a1 + 232)];
      int v52 = *(void **)(a1 + 224);
      *(void *)(a1 + 224) = v51;

      uint64_t v53 = [objc_alloc(MEMORY[0x1E4F35690]) initWithDevice:*(void *)(v57 + 144) descriptor:*(void *)(a1 + 224)];
      int v54 = *(void **)(a1 + 216);
      *(void *)(a1 + 216) = v53;

      if (!v17) {
        goto LABEL_36;
      }
LABEL_35:
      nitro::nitro_function::nitro_function(v17);
      goto LABEL_36;
    }
    std::string::size_type v34 = *(void **)(a1 + 168);
    if (v34)
    {
      uint64_t v35 = [v34 length];
      uint64_t v36 = (uint64_t)v65;
      if ((std::__shared_weak_count *)v35 == v65) {
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v36 = (uint64_t)v65;
    }
    uint64_t v37 = objc_msgSend(v56[18], "newBufferWithLength:options:", v36, 0, v56);
    uint64_t v38 = *(void **)(a1 + 168);
    *(void *)(a1 + 168) = v37;

    goto LABEL_50;
  }
  if (!v11) {
    goto LABEL_34;
  }
  v10[12] = 0;
  if (v17) {
    goto LABEL_35;
  }
LABEL_36:
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192A45764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::blob_container::setup_shape(Espresso::MPSBuffersEngine::blob_container *this, const Espresso::layer_shape *a2, const Espresso::layer_shape *a3)
{
  uint64_t v4 = (const void *)*((void *)a2 + 9);
  if (!v4
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  long long v8 = (std::__shared_weak_count *)*((void *)a2 + 10);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7[240])
  {
    *((void *)a2 + 31) = 16;
  }
  else
  {
    int v9 = *((_DWORD *)a2 + 40);
    uint64_t v10 = 2;
    if (!v9) {
      uint64_t v10 = 4;
    }
    *((void *)a2 + 31) = v10;
    if ((v9 - 2) <= 3) {
      Espresso::throw_exception_selector<Espresso::generic_error>("Training supports fp16 and fp32 compute paths.");
    }
  }
  Espresso::abstract_blob_container::set_shape(a2, a3);
  int v12 = *((_DWORD *)a2 + 2);
  int v11 = *((_DWORD *)a2 + 3);
  int v13 = *((_DWORD *)a2 + 4);
  int v14 = *((_DWORD *)a2 + 5);
  if (*((int *)a2 + 6) <= 1) {
    int v15 = 1;
  }
  else {
    int v15 = *((_DWORD *)a2 + 6);
  }
  Espresso::abstract_blob_container::shape(v26, (uint64_t)a2);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v29, (const Espresso::layer_shape *)v26, 0);
  if (__p)
  {
    int v28 = __p;
    operator delete(__p);
  }
  if (v30 == 3)
  {
    int v12 = *((_DWORD *)a2 + 2);
    int v11 = *((_DWORD *)a2 + 4) * *((_DWORD *)a2 + 3);
    if (*((int *)a2 + 6) <= 1) {
      int v16 = 1;
    }
    else {
      int v16 = *((_DWORD *)a2 + 6);
    }
    int v17 = v16 * *((_DWORD *)a2 + 5);
  }
  else
  {
    int v17 = v14 * v13 * v15;
  }
  unsigned int v18 = (*(uint64_t (**)(const Espresso::layer_shape *))(*(void *)a2 + 32))(a2) - 1;
  if (v18 > 0xC) {
    uint64_t v19 = 4;
  }
  else {
    uint64_t v19 = qword_192DF6AD8[v18];
  }
  unint64_t v20 = *((void *)a2 + 31);
  int v21 = (*(uint64_t (**)(const Espresso::layer_shape *))(*(void *)a2 + 32))(a2);
  unint64_t v22 = v20 + v20 * ((v19 * v12 - 1) / v20);
  if ((v21 - 1) > 0xC) {
    unint64_t v23 = 4;
  }
  else {
    unint64_t v23 = qword_192DF6AD8[v21 - 1];
  }
  *((_DWORD *)a2 + 60) = v22 / v23;
  uint64_t v24 = v22 * v11;
  *((void *)this + 1) = v24;
  *((void *)this + 2) = v24 * v17;
  *(void *)this = v22;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_192A45A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSBuffersEngine::blob_container::~blob_container(id *this)
{
  Espresso::MPSBuffersEngine::blob_container::~blob_container(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *this = &unk_1EE33BD88;

  float v2 = (std::__shared_weak_count *)this[23];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::abstract_blob_container::~abstract_blob_container((Espresso::abstract_blob_container *)this);
}

uint64_t Espresso::MPSBuffersEngine::blob_container::ndarray_strides(Espresso::MPSBuffersEngine::blob_container *this, void *a2)
{
  Espresso::abstract_blob_container::shape(v16, (uint64_t)a2);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v19, (const Espresso::layer_shape *)v16, 0);
  if (__p)
  {
    unsigned int v18 = __p;
    operator delete(__p);
  }
  unint64_t v4 = v20;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  if (v4)
  {
    if ((v4 & 0x80000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4);
    *(void *)this = v5;
    *((void *)this + 2) = &v5[v6];
    bzero(v5, 8 * v4);
    *((void *)this + 1) = &v5[v4];
  }
  else
  {
    int v5 = 0;
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a2 + 32))(a2);
  if ((result - 1) > 0xC) {
    uint64_t v8 = 4;
  }
  else {
    uint64_t v8 = qword_192DF6AD8[(result - 1)];
  }
  *int v5 = v8;
  signed int v9 = v20;
  if (v20 >= 2)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v20;
    uint64_t v12 = -1;
    do
    {
      if (v10)
      {
        v5[v10 + 1] = v5[v10] * (int)v19[v11 + v12];
      }
      else
      {
        uint64_t v13 = (int)v19[v11 - 1];
        uint64_t result = (*(uint64_t (**)(void *))(*a2 + 32))(a2);
        if ((result - 1) > 0xC) {
          uint64_t v14 = 4;
        }
        else {
          uint64_t v14 = qword_192DF6AD8[(result - 1)];
        }
        v5[1] = a2[31] + a2[31] * ((unint64_t)(v14 * v13 - 1) / a2[31]);
        signed int v9 = v20;
      }
      uint64_t v11 = v9;
      unint64_t v15 = v10 + 2;
      ++v10;
      --v12;
    }
    while (v15 < v9);
  }
  return result;
}

void sub_192A45D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v17)
  {
    *(void *)(v16 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::run_pass_on_network<Espresso::pass_transform_quantize_kernel>(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  float v2 = (Espresso *)operator new(0x30uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)float v2 = &unk_1EE388EA0;
  int v3 = (void *)((char *)v2 + 24);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = &unk_1EE365F18;
  int v5 = Espresso::espresso_os_log_subsystem(v2, v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315138;
    unint64_t v10 = (unint64_t)"N8Espresso30pass_transform_quantize_kernelE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_1920CB000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, void *, uint64_t))(*v3 + 24))(buf, v3, a1);
  char v8 = 0;
  (*(void (**)(void *, char *))(*v3 + 16))(v3, &v8);
  if (v8)
  {
    if (buf[0]) {
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (unint64_t *)((char *)&v10 + 4));
    }
    else {
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso34analysis_transform_quantize_kernelE");
    }
  }
  int v6 = buf[0];
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v2);
  return v6 != 0;
}

void sub_192A45F74(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::pass_transform_quantize_kernel::run_on_network@<X0>(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  int v3 = a1;
  v182[0] = *MEMORY[0x1E4F143B8];
  memset(v155, 0, sizeof(v155));
  int v156 = 1065353216;
  memset(v161, 0, 32);
  *(_DWORD *)&v161[32] = 1065353216;
  Espresso::net::get_consumers_of_blobs(a1, v161, (uint64_t)v154);
  uint64_t v139 = a2;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v161);
  Espresso::net::get_producers_of_blobs(v3, (uint64_t)v153);
  uint64_t v150 = 0;
  unint64_t v151 = 0;
  unint64_t v152 = 0;
  int v5 = (void *)*((void *)v3 + 29);
  if (v5 != (void *)((char *)v3 + 240))
  {
    do
    {
      if (*((char *)v5 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v161, (const std::string::value_type *)v5[4], v5[5]);
      }
      else
      {
        *(_OWORD *)int v161 = *((_OWORD *)v5 + 2);
        *(void *)&v161[16] = v5[6];
      }
      *(void *)&v161[28] = 0x100000000;
      *(_DWORD *)&v161[24] = 1065353216;
      *(_DWORD *)&v161[36] = 1;
      *(void *)&long long v163 = 0;
      long long __p = 0uLL;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, 0, 0, 0);
      unint64_t v6 = v151;
      if (v151 >= v152)
      {
        uint64_t v8 = (uint64_t)(v151 - v150) >> 6;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 58) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v152 - v150;
        if ((uint64_t)(v152 - v150) >> 5 > v9) {
          unint64_t v9 = v10 >> 5;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v11 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        *((void *)&v179 + 1) = &v152;
        uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v11);
        std::string::size_type v13 = (std::string::size_type)&v12[64 * v8];
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
        __str.__r_.__value_.__l.__size_ = v13;
        *(void *)&long long v179 = &v12[64 * v14];
        long long v15 = *(_OWORD *)v161;
        *(void *)(v13 + 16) = *(void *)&v161[16];
        *(_OWORD *)std::string::size_type v13 = v15;
        memset(v161, 0, 24);
        *(_OWORD *)(v13 + 24) = *(_OWORD *)&v161[24];
        *(void *)(v13 + 48) = 0;
        *(void *)(v13 + 56) = 0;
        *(void *)(v13 + 40) = 0;
        *(_OWORD *)(v13 + 40) = __p;
        *(void *)(v13 + 56) = v163;
        long long __p = 0uLL;
        *(void *)&long long v163 = 0;
        __str.__r_.__value_.__r.__words[2] = v13 + 64;
        std::vector<std::pair<std::string,Espresso::blob_numerical_properties>>::__swap_out_circular_buffer(&v150, &__str);
        unint64_t v16 = v151;
        std::__split_buffer<std::pair<std::string,Espresso::blob_numerical_properties>>::~__split_buffer((uint64_t)&__str);
        unint64_t v151 = v16;
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
      }
      else
      {
        long long v7 = *(_OWORD *)v161;
        *(void *)(v151 + 16) = *(void *)&v161[16];
        *(_OWORD *)unint64_t v6 = v7;
        memset(v161, 0, 24);
        *(_OWORD *)(v6 + 24) = *(_OWORD *)&v161[24];
        *(void *)(v6 + 48) = 0;
        *(void *)(v6 + 56) = 0;
        *(void *)(v6 + 40) = 0;
        *(_OWORD *)(v6 + 40) = __p;
        *(void *)(v6 + 56) = v163;
        long long __p = 0uLL;
        *(void *)&long long v163 = 0;
        unint64_t v151 = v6 + 64;
      }
      if ((v161[23] & 0x80000000) != 0) {
        operator delete(*(void **)v161);
      }
      int v17 = (void *)v5[1];
      if (v17)
      {
        do
        {
          unsigned int v18 = v17;
          int v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          unsigned int v18 = (void *)v5[2];
          BOOL v33 = *v18 == (void)v5;
          int v5 = v18;
        }
        while (!v33);
      }
      int v5 = v18;
    }
    while (v18 != (void *)((char *)v3 + 240));
    unint64_t v19 = v151;
    if (v150 != v151)
    {
      char v141 = (uint64_t **)((char *)v3 + 352);
      uint64_t v144 = (uint64_t)v3 + 96;
      uint64_t v140 = (uint64_t)v3 + 56;
      uint64_t v142 = v3;
      while (1)
      {
        if (*(char *)(v19 - 41) < 0)
        {
          std::string::__init_copy_ctor_external(&v145, *(const std::string::value_type **)(v19 - 64), *(void *)(v19 - 56));
        }
        else
        {
          long long v20 = *(_OWORD *)(v19 - 64);
          v145.__r_.__value_.__r.__words[2] = *(void *)(v19 - 48);
          *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v20;
        }
        long long v146 = *(_OWORD *)(v19 - 40);
        std::string::size_type v148 = 0;
        uint64_t v149 = 0;
        uint64_t v147 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v147, *(const void **)(v19 - 24), *(void *)(v19 - 16), (uint64_t)(*(void *)(v19 - 16) - *(void *)(v19 - 24)) >> 2);
        unint64_t v21 = v151 - 64;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::blob_numerical_properties>,0>(v151 - 64);
        unint64_t v151 = v21;
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v155, (uint64_t)&v145))
        {
          goto LABEL_307;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
        unint64_t v22 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v141, &v145, (uint64_t)&std::piecewise_construct, (long long **)&__str);
        *(_OWORD *)(v22 + 56) = v146;
        if (v22 + 56 != (char *)&v146) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v22 + 72, (char *)v147, (uint64_t)v148, (v148 - (unsigned char *)v147) >> 2);
        }
        if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v154, (unsigned __int8 *)&v145))
        {
          break;
        }
LABEL_306:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v155, (uint64_t)&v145, (uint64_t)&v145);
LABEL_307:
        if (v147)
        {
          std::string::size_type v148 = v147;
          operator delete(v147);
        }
        if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v145.__r_.__value_.__l.__data_);
        }
        unint64_t v19 = v151;
        if (v150 == v151) {
          goto LABEL_321;
        }
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
      unint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v154, (unsigned __int8 *)&v145, (long long **)&__str);
      if (*((void *)v23 + 6) - *((void *)v23 + 5) >= 9uLL)
      {
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
        uint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v154, (unsigned __int8 *)&v145, (long long **)&__str);
        int v26 = (unint64_t *)*((void *)v24 + 5);
        int v25 = (unint64_t *)*((void *)v24 + 6);
        for (i = v25; ; int v25 = i)
        {
          if (v26 == v25) {
            goto LABEL_306;
          }
          unint64_t v175 = 0;
          unint64_t v175 = *v26;
          uint64_t v173 = 0;
          uint64_t v174 = 0;
          int v172 = 0;
          *(void *)&long long v171 = 1065353216;
          *((void *)&v171 + 1) = DWORD2(v146) | 0x100000000;
          int v27 = (uint64_t *)(*((void *)v3 + 4) + 16 * v175);
          uint64_t v28 = *v27;
          int v29 = (std::__shared_weak_count *)v27[1];
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v175;
          int v30 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v144, &v175, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str)[3];
          if (*((char *)v30 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)v30, *((void *)v30 + 1));
          }
          else
          {
            long long v31 = *v30;
            v170.__r_.__value_.__r.__words[2] = *((void *)v30 + 2);
            *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v31;
          }
          std::string::size_type v32 = (uint64_t **)(v28 + 40);
          if (*(char *)(v28 + 63) < 0) {
            break;
          }
          switch(*(unsigned char *)(v28 + 63))
          {
            case 0xF:
              BOOL v33 = *v32 == (uint64_t *)0x715F636974617473 && *(void *)(v28 + 47) == 0x657A69746E617571;
              if (v33) {
                goto LABEL_81;
              }
              break;
            case 0x10:
              goto LABEL_94;
            case 0x11:
              if (*v32 == (uint64_t *)0x645F636974617473
                && *(void *)(v28 + 48) == 0x7A69746E61757165
                && *(unsigned char *)(v28 + 56) == 101)
              {
                goto LABEL_81;
              }
              break;
            case 0x12:
              if (*v32 == (uint64_t *)0x5F63696D616E7964
                && *(void *)(v28 + 48) == 0x69746E6175716564
                && *(_WORD *)(v28 + 56) == 25978)
              {
                goto LABEL_103;
              }
              break;
            default:
              break;
          }
LABEL_160:
          std::pair<std::string,Espresso::blob_numerical_properties>::pair[abi:ne180100]<std::string&,Espresso::blob_numerical_properties&,0>((std::string *)v161, (long long *)&v170, &v171);
          unint64_t v69 = v151;
          if (v151 >= v152)
          {
            uint64_t v71 = (uint64_t)(v151 - v150) >> 6;
            unint64_t v72 = v71 + 1;
            if ((unint64_t)(v71 + 1) >> 58) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v73 = v152 - v150;
            if ((uint64_t)(v152 - v150) >> 5 > v72) {
              unint64_t v72 = v73 >> 5;
            }
            if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFC0) {
              unint64_t v74 = 0x3FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v74 = v72;
            }
            *((void *)&v179 + 1) = &v152;
            unint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v74);
            std::string::size_type v76 = (std::string::size_type)&v75[64 * v71];
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
            __str.__r_.__value_.__l.__size_ = v76;
            *(void *)&long long v179 = &v75[64 * v77];
            long long v78 = *(_OWORD *)v161;
            *(void *)(v76 + 16) = *(void *)&v161[16];
            *(_OWORD *)std::string::size_type v76 = v78;
            memset(v161, 0, 24);
            *(_OWORD *)(v76 + 24) = *(_OWORD *)&v161[24];
            *(void *)(v76 + 48) = 0;
            *(void *)(v76 + 56) = 0;
            *(void *)(v76 + 40) = 0;
            *(_OWORD *)(v76 + 40) = __p;
            *(void *)(v76 + 56) = v163;
            long long __p = 0uLL;
            *(void *)&long long v163 = 0;
            __str.__r_.__value_.__r.__words[2] = v76 + 64;
            std::vector<std::pair<std::string,Espresso::blob_numerical_properties>>::__swap_out_circular_buffer(&v150, &__str);
            unint64_t v79 = v151;
            std::__split_buffer<std::pair<std::string,Espresso::blob_numerical_properties>>::~__split_buffer((uint64_t)&__str);
            unint64_t v151 = v79;
            if ((void)__p)
            {
              *((void *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
          }
          else
          {
            long long v70 = *(_OWORD *)v161;
            *(void *)(v151 + 16) = *(void *)&v161[16];
            *(_OWORD *)unint64_t v69 = v70;
            memset(v161, 0, 24);
            *(_OWORD *)(v69 + 24) = *(_OWORD *)&v161[24];
            *(void *)(v69 + 48) = 0;
            *(void *)(v69 + 56) = 0;
            *(void *)(v69 + 40) = 0;
            *(_OWORD *)(v69 + 40) = __p;
            *(void *)(v69 + 56) = v163;
            long long __p = 0uLL;
            *(void *)&long long v163 = 0;
            unint64_t v151 = v69 + 64;
          }
          if ((v161[23] & 0x80000000) != 0) {
            operator delete(*(void **)v161);
          }
          if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (!v29) {
              goto LABEL_175;
            }
LABEL_174:
            nitro::nitro_function::nitro_function(v29);
            goto LABEL_175;
          }
          operator delete(v170.__r_.__value_.__l.__data_);
          if (v29) {
            goto LABEL_174;
          }
LABEL_175:
          if (v172) {
            operator delete(v172);
          }
          ++v26;
        }
        switch(*(void *)(v28 + 48))
        {
          case 0xFLL:
            if (**v32 == 0x715F636974617473 && *(uint64_t *)((char *)*v32 + 7) == 0x657A69746E617571) {
              goto LABEL_81;
            }
            goto LABEL_160;
          case 0x10:
            std::string::size_type v32 = (uint64_t **)*v32;
LABEL_94:
            if (*v32 == (uint64_t *)0x5F63696D616E7964 && v32[1] == (uint64_t *)0x657A69746E617571)
            {
              if (*v32 != (uint64_t *)0x5F63696D616E7964 || v32[1] != (uint64_t *)0x657A69746E617571) {
                goto LABEL_103;
              }
              unint64_t v48 = *(void **)(v28 + 64);
              if (!v48
              {
                uint64_t v49 = 0;
                goto LABEL_108;
              }
              uint64_t v49 = *(std::__shared_weak_count **)(v28 + 72);
              if (!v49) {
                goto LABEL_108;
              }
              goto LABEL_106;
            }
            goto LABEL_160;
          case 0x11:
            if (**v32 != 0x645F636974617473 || (*v32)[1] != 0x7A69746E61757165 || *((unsigned char *)*v32 + 16) != 101) {
              goto LABEL_160;
            }
LABEL_81:
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v175;
            uint64_t v41 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v140, &v175, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
            uint64_t v168 = 0;
            uint64_t v169 = 0;
            uint64_t v167 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v167, v41[3], v41[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41[4] - v41[3]) >> 3));
            int v42 = *(char *)(v28 + 63);
            if (v42 < 0)
            {
              if (*(void *)(v28 + 48) != 15) {
                goto LABEL_117;
              }
              uint64_t v43 = *v32;
            }
            else
            {
              uint64_t v43 = (uint64_t *)(v28 + 40);
              if (v42 != 15) {
                goto LABEL_117;
              }
            }
            uint64_t v51 = *v43;
            uint64_t v52 = *(uint64_t *)((char *)v43 + 7);
            if (v51 == 0x715F636974617473 && v52 == 0x657A69746E617571)
            {
              uint64_t v80 = *(const void **)(v28 + 64);
              if (v80)
              {
                if (v81)
                {
                  unint64_t v56 = *(std::__shared_weak_count **)(v28 + 72);
                  if (v56) {
                    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                }
                else
                {
                  unint64_t v56 = 0;
                }
              }
              else
              {
                unint64_t v56 = 0;
                int32x2_t v81 = 0;
              }
              int v57 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v81 + 320))(v81);
              uint64_t v58 = (*(uint64_t (**)(void *))(*(void *)v81 + 320))(v81);
LABEL_124:
              int v59 = *(_DWORD *)(v58 + 4);
              if (v56) {
                nitro::nitro_function::nitro_function(v56);
              }
              DWORD2(v171) = v57;
              LODWORD(v171) = v59;
              int v166 = 0;
              unint64_t v60 = (std::__shared_weak_count *)*((void *)v142 + 3);
              uint64_t v164 = *((void *)v142 + 2);
              int v165 = v60;
              if (v60) {
                atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              Espresso::abstract_engine_factory::shared(&v157);
              uint64_t v61 = v157;
              std::string::basic_string[abi:ne180100]<0>(v161, "copy");
              LODWORD(v176) = (***(uint64_t (****)(void))(v164 + 8))(*(void *)(v164 + 8));
              Espresso::abstract_engine_factory::make_kernel_priv(v61, (uint64_t)&v164, (uint64_t)v161, (uint64_t)&v166, (int *)&v176);
              if (__str.__r_.__value_.__r.__words[0])
              {
                if (v62)
                {
                  std::string::size_type size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
                  if (!__str.__r_.__value_.__l.__size_)
                  {
LABEL_136:
                    if ((v161[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v161);
                    }
                    if (v158) {
                      nitro::nitro_function::nitro_function(v158);
                    }
                    *(_DWORD *)int v161 = 0;
                    memset(&v161[8], 0, 32);
                    long long __p = 0u;
                    long long v163 = 0u;
                    int v64 = (char *)operator new(0xF8uLL);
                    *((void *)v64 + 1) = 0;
                    *((void *)v64 + 2) = 0;
                    *(void *)int v64 = &unk_1EE389DF0;
                    *((void *)v64 + 3) = &unk_1EE36C758;
                    *(_OWORD *)(v64 + 40) = 0u;
                    *(_OWORD *)(v64 + 56) = 0u;
                    *(_OWORD *)(v64 + 72) = 0u;
                    *(_OWORD *)(v64 + 88) = 0u;
                    *(_OWORD *)(v64 + 104) = 0u;
                    *(_OWORD *)(v64 + 120) = 0u;
                    *(_OWORD *)(v64 + 136) = 0u;
                    *(_OWORD *)(v64 + 152) = 0u;
                    *(_OWORD *)(v64 + 161) = 0u;
                    *((_OWORD *)v64 + 13) = 0u;
                    *((_OWORD *)v64 + 14) = 0u;
                    *((void *)v64 + 30) = 0;
                    *(void *)&v161[8] = v64 + 24;
                    *(void *)&v161[16] = v64;
                    if (size)
                    {
                      atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
                      int v65 = (std::__shared_weak_count *)*((void *)v64 + 12);
                      *((void *)v64 + 11) = v62;
                      *((void *)v64 + 12) = size;
                      if (v65) {
                        nitro::nitro_function::nitro_function(v65);
                      }
                    }
                    else
                    {
                      *((void *)v64 + 11) = v62;
                      *((void *)v64 + 12) = 0;
                    }
                    std::string::operator=((std::string *)(*(void *)&v161[8] + 16), (const std::string *)(v28 + 16));
                    int v3 = v142;
                    std::string::operator=((std::string *)(*(void *)&v161[8] + 40), (const std::string *)(v28 + 40));
                    int v66 = *(uint64_t (****)(void))(*(void *)(*(void *)(v28 + 64) + 8) + 8);
                    int v67 = (**v66)(v66);
                    uint64_t v68 = *(void *)&v161[8];
                    *(_DWORD *)(*(void *)&v161[8] + 8) = v67;
                    *(_DWORD *)(v68 + 12) = *(_DWORD *)(v28 + 12);
                    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v161[24], v167, v168, 0xAAAAAAAAAAAAAAABLL * (((char *)v168 - (char *)v167) >> 3));
                    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
                      std::string::__init_copy_ctor_external(&__str, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
                    }
                    else {
                      std::string __str = v170;
                    }
                    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)((char *)&__p + 8), &__str, &v179, 1uLL);
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__str.__r_.__value_.__l.__data_);
                    }
                    Espresso::net::remove_layer(v142, v175);
                    int v160 = v175;
                    LODWORD(__str.__r_.__value_.__l.__data_) = *(_DWORD *)v161;
                    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)&v161[8];
                    if (*(void *)&v161[16]) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v161[16] + 8), 1uLL, memory_order_relaxed);
                    }
                    long long v179 = 0uLL;
                    uint64_t v180 = 0;
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v179, *(uint64_t *)&v161[24], *(uint64_t *)&v161[32], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v161[32] - *(void *)&v161[24]) >> 3));
                    memset(v181, 0, sizeof(v181));
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v181, *((uint64_t *)&__p + 1), v163, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v163 - *((void *)&__p + 1)) >> 3));
                    uint64_t v157 = 0;
                    uint64_t v158 = 0;
                    uint64_t v159 = 0;
                    uint64_t v176 = (void **)&v157;
                    char v177 = 0;
                    uint64_t v157 = (uint64_t)operator new(0x48uLL);
                    uint64_t v158 = (std::__shared_weak_count *)v157;
                    uint64_t v159 = v157 + 72;
                    uint64_t v158 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v159, (uint64_t)&__str, (uint64_t)v182, v157);
                    Espresso::net::insert_layers((uint64_t)v142, &v160, &v157);
                    uint64_t v176 = (void **)&v157;
                    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v176);
                    uint64_t v176 = (void **)v181;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v176);
                    uint64_t v176 = (void **)&v179;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v176);
                    if (__str.__r_.__value_.__r.__words[2]) {
                      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2]);
                    }
                    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p + 8;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v161[24];
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                    if (*(void *)&v161[16]) {
                      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v161[16]);
                    }
                    if (size) {
                      nitro::nitro_function::nitro_function(size);
                    }
                    if (v165) {
                      nitro::nitro_function::nitro_function(v165);
                    }
                    *(void *)int v161 = &v167;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v161);
                    goto LABEL_160;
                  }
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
LABEL_134:
                  if (__str.__r_.__value_.__l.__size_) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
                  }
                  goto LABEL_136;
                }
              }
              else
              {
                int v62 = 0;
              }
              std::string::size_type size = 0;
              goto LABEL_134;
            }
LABEL_117:
            int v54 = *(const void **)(v28 + 64);
            if (v54)
            {
              if (v55)
              {
                unint64_t v56 = *(std::__shared_weak_count **)(v28 + 72);
                if (v56) {
                  atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                unint64_t v56 = 0;
              }
            }
            else
            {
              unint64_t v56 = 0;
              uint64_t v55 = 0;
            }
            int v57 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v55 + 384))(v55);
            uint64_t v58 = (*(uint64_t (**)(void *))(*(void *)v55 + 384))(v55);
            goto LABEL_124;
          case 0x12:
            if (**v32 == 0x5F63696D616E7964 && (*v32)[1] == 0x69746E6175716564 && *((_WORD *)*v32 + 8) == 25978)
            {
LABEL_103:
              unint64_t v48 = *(void **)(v28 + 64);
              if (v48
              {
                uint64_t v49 = *(std::__shared_weak_count **)(v28 + 72);
                if (v49) {
LABEL_106:
                }
                  atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              else
              {
                uint64_t v49 = 0;
              }
LABEL_108:
              int v50 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v48 + 320))(v48);
              if (v49) {
                nitro::nitro_function::nitro_function(v49);
              }
              DWORD2(v171) = v50;
              LODWORD(v171) = 1065353216;
            }
            goto LABEL_160;
          default:
            goto LABEL_160;
        }
      }
      uint64_t v173 = 0;
      uint64_t v174 = 0;
      int v172 = 0;
      *(void *)&long long v171 = 1065353216;
      *((void *)&v171 + 1) = DWORD2(v146) | 0x100000000;
      uint64_t v157 = 0;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
      uint64_t v157 = **((void **)std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v154, (unsigned __int8 *)&v145, (long long **)&__str)+ 5);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v157;
      int v82 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v144, (unint64_t *)&v157, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str)[3];
      if (*((char *)v82 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)v82, *((void *)v82 + 1));
      }
      else
      {
        long long v83 = *v82;
        v170.__r_.__value_.__r.__words[2] = *((void *)v82 + 2);
        *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v83;
      }
      uint64_t v84 = (uint64_t *)(*((void *)v3 + 4) + 16 * v157);
      uint64_t v85 = *v84;
      uint64_t v86 = (std::__shared_weak_count *)v84[1];
      if (v86) {
        atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v87 = (uint64_t *)(v85 + 40);
      if (*(char *)(v85 + 63) < 0)
      {
        if (*(void *)(v85 + 48) != 15)
        {
LABEL_227:
          if (*(char *)(v85 + 63) < 0)
          {
            if (*(void *)(v85 + 48) != 17) {
              goto LABEL_248;
            }
            int v103 = (uint64_t *)*v87;
LABEL_233:
            uint64_t v104 = *v103;
            uint64_t v105 = v103[1];
            int v106 = *((unsigned __int8 *)v103 + 16);
            if (v104 == 0x645F636974617473 && v105 == 0x7A69746E61757165 && v106 == 101)
            {
              int v109 = *(void **)(v85 + 64);
              if (v109
              {
                size_t v110 = *(std::__shared_weak_count **)(v85 + 72);
                if (v110) {
                  atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                size_t v110 = 0;
              }
              uint64_t v111 = (*(uint64_t (**)(void *))(*(void *)v109 + 384))(v109);
              float v112 = *(float *)(v111 + 4);
              DWORD2(v171) = *(_DWORD *)v111;
              *(float *)&long long v171 = 1.0 / v112;
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
              char v113 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v141, &v145, (uint64_t)&std::piecewise_construct, (long long **)&__str);
              *(_OWORD *)(v113 + 56) = v171;
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v113 + 72, 0, 0, 0);
              if (v110) {
                nitro::nitro_function::nitro_function(v110);
              }
            }
LABEL_248:
            if (*(char *)(v85 + 63) < 0)
            {
              uint64_t v117 = *(void *)(v85 + 48);
              if (v117 != 16)
              {
                if (v117 != 18) {
                  goto LABEL_289;
                }
                BOOL v118 = *(void *)*v87 == 0x5F63696D616E7964 && *(void *)(*v87 + 8) == 0x69746E6175716564;
                if (!v118 || *(_WORD *)(*v87 + 16) != 25978) {
                  goto LABEL_289;
                }
                goto LABEL_281;
              }
              uint64_t v87 = (uint64_t *)*v87;
            }
            else
            {
              int v114 = *(unsigned __int8 *)(v85 + 63);
              if (v114 != 16)
              {
                if (v114 != 18) {
                  goto LABEL_289;
                }
                BOOL v115 = *v87 == 0x5F63696D616E7964 && *(void *)(v85 + 48) == 0x69746E6175716564;
                if (!v115 || *(_WORD *)(v85 + 56) != 25978) {
                  goto LABEL_289;
                }
                goto LABEL_281;
              }
            }
            if (*v87 != 0x5F63696D616E7964 || v87[1] != 0x657A69746E617571) {
              goto LABEL_289;
            }
            if (*v87 == 0x5F63696D616E7964 && v87[1] == 0x657A69746E617571)
            {
              uint64_t v122 = *(void **)(v85 + 64);
              if (!v122
              {
                uint64_t v123 = 0;
                goto LABEL_286;
              }
              uint64_t v123 = *(std::__shared_weak_count **)(v85 + 72);
              if (v123) {
LABEL_284:
              }
                atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_286:
              int v124 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v122 + 320))(v122);
              if (v123) {
                nitro::nitro_function::nitro_function(v123);
              }
              DWORD2(v171) = v124;
              LODWORD(v171) = 1065353216;
LABEL_289:
              std::pair<std::string,Espresso::blob_numerical_properties>::pair[abi:ne180100]<std::string&,Espresso::blob_numerical_properties&,0>((std::string *)v161, (long long *)&v170, &v171);
              unint64_t v125 = v151;
              if (v151 >= v152)
              {
                uint64_t v127 = (uint64_t)(v151 - v150) >> 6;
                unint64_t v128 = v127 + 1;
                if ((unint64_t)(v127 + 1) >> 58) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v129 = v152 - v150;
                if ((uint64_t)(v152 - v150) >> 5 > v128) {
                  unint64_t v128 = v129 >> 5;
                }
                if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFC0) {
                  unint64_t v130 = 0x3FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v130 = v128;
                }
                *((void *)&v179 + 1) = &v152;
                int v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v130);
                std::string::size_type v132 = (std::string::size_type)&v131[64 * v127];
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
                __str.__r_.__value_.__l.__size_ = v132;
                *(void *)&long long v179 = &v131[64 * v133];
                long long v134 = *(_OWORD *)v161;
                *(void *)(v132 + 16) = *(void *)&v161[16];
                *(_OWORD *)std::string::size_type v132 = v134;
                memset(v161, 0, 24);
                *(_OWORD *)(v132 + 24) = *(_OWORD *)&v161[24];
                *(void *)(v132 + 48) = 0;
                *(void *)(v132 + 56) = 0;
                *(void *)(v132 + 40) = 0;
                *(_OWORD *)(v132 + 40) = __p;
                *(void *)(v132 + 56) = v163;
                long long __p = 0uLL;
                *(void *)&long long v163 = 0;
                __str.__r_.__value_.__r.__words[2] = v132 + 64;
                std::vector<std::pair<std::string,Espresso::blob_numerical_properties>>::__swap_out_circular_buffer(&v150, &__str);
                unint64_t v135 = v151;
                std::__split_buffer<std::pair<std::string,Espresso::blob_numerical_properties>>::~__split_buffer((uint64_t)&__str);
                unint64_t v151 = v135;
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
              }
              else
              {
                long long v126 = *(_OWORD *)v161;
                *(void *)(v151 + 16) = *(void *)&v161[16];
                *(_OWORD *)unint64_t v125 = v126;
                memset(v161, 0, 24);
                *(_OWORD *)(v125 + 24) = *(_OWORD *)&v161[24];
                *(void *)(v125 + 48) = 0;
                *(void *)(v125 + 56) = 0;
                *(void *)(v125 + 40) = 0;
                *(_OWORD *)(v125 + 40) = __p;
                *(void *)(v125 + 56) = v163;
                long long __p = 0uLL;
                *(void *)&long long v163 = 0;
                unint64_t v151 = v125 + 64;
              }
              if ((v161[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)v161);
                if (!v86) {
                  goto LABEL_302;
                }
              }
              else if (!v86)
              {
LABEL_302:
                if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v170.__r_.__value_.__l.__data_);
                }
                if (v172) {
                  operator delete(v172);
                }
                goto LABEL_306;
              }
              nitro::nitro_function::nitro_function(v86);
              goto LABEL_302;
            }
LABEL_281:
            uint64_t v122 = *(void **)(v85 + 64);
            if (!v122
            {
              uint64_t v123 = 0;
              goto LABEL_286;
            }
            uint64_t v123 = *(std::__shared_weak_count **)(v85 + 72);
            if (v123) {
              goto LABEL_284;
            }
            goto LABEL_286;
          }
          int v88 = *(unsigned __int8 *)(v85 + 63);
LABEL_229:
          int v103 = (uint64_t *)(v85 + 40);
          if (v88 != 17) {
            goto LABEL_248;
          }
          goto LABEL_233;
        }
        int v89 = (uint64_t *)*v87;
      }
      else
      {
        int v88 = *(unsigned __int8 *)(v85 + 63);
        int v89 = (uint64_t *)(v85 + 40);
        if (v88 != 15) {
          goto LABEL_229;
        }
      }
      uint64_t v90 = *v89;
      uint64_t v91 = *(uint64_t *)((char *)v89 + 7);
      if (v90 == 0x715F636974617473 && v91 == 0x657A69746E617571)
      {
        char v93 = *(void **)(v85 + 64);
        if (v93
        {
          int v94 = *(std::__shared_weak_count **)(v85 + 72);
          if (v94) {
            atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          int v94 = 0;
        }
        unint64_t v95 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v93 + 320))(v93);
        int v96 = v95[1];
        if (*v95 == -1)
        {
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
          uint64_t v98 = (uint64_t *)(*((void *)v3 + 4)
                          + 16
                          * std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v153, (uint64_t)&v145, (uint64_t)&std::piecewise_construct, (long long **)&__str)[5]);
          uint64_t v99 = *v98;
          std::string v100 = (std::__shared_weak_count *)v98[1];
          if (v100) {
            atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int,void>(&__str, 1);
          std::string::size_type v101 = __str.__r_.__value_.__r.__words[0];
          **(_DWORD **)(__str.__r_.__value_.__r.__words[0] + 24) = v96;
          uint64_t v102 = *(void *)(v99 + 64);
          uint64_t v167 = 0;
          uint64_t v168 = 0;
          std::string::basic_string[abi:ne180100]<0>(v161, "post_scale");
          (*(void (**)(uint64_t, std::string **, unsigned char *, void, uint64_t, void))(*(void *)v102 + 160))(v102, &v167, v161, *(void *)(v101 + 24), 1, 0);
          if ((v161[23] & 0x80000000) != 0) {
            operator delete(*(void **)v161);
          }
          if (v168) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v168);
          }
          if (__str.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
          }
          if (v100) {
            nitro::nitro_function::nitro_function(v100);
          }
        }
        else
        {
          DWORD2(v171) = *v95;
          LODWORD(v171) = v96;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
          uint64_t v97 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v141, &v145, (uint64_t)&std::piecewise_construct, (long long **)&__str);
          *(_OWORD *)(v97 + 56) = v171;
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v97 + 72, 0, 0, 0);
        }
        if (v94) {
          nitro::nitro_function::nitro_function(v94);
        }
      }
      goto LABEL_227;
    }
  }
LABEL_321:
  *(void *)(v139 + 8) = 0;
  *(void *)(v139 + 16) = 0;
  *(unsigned char *)uint64_t v139 = 1;
  *(void *)int v161 = &v150;
  std::vector<std::pair<std::string,Espresso::blob_numerical_properties>>::__destroy_vector::operator()[abi:ne180100]((void ***)v161);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v153[2]);
  uint64_t v136 = v153[0];
  v153[0] = 0;
  if (v136) {
    operator delete(v136);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((void *)v154[2]);
  uint64_t v137 = v154[0];
  v154[0] = 0;
  if (v137) {
    operator delete(v137);
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v155);
}

void sub_192A478FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  if (v57)
  {
    nitro::nitro_function::nitro_function(v57);
    if (!v58)
    {
LABEL_4:
      if (SLOBYTE(STACK[0x217]) < 0) {
        operator delete((void *)STACK[0x200]);
      }
      uint64_t v61 = *(void **)(v59 - 240);
      if (v61) {
        operator delete(v61);
      }
      std::pair<std::string,Espresso::blob_numerical_properties>::~pair((uint64_t)&a25);
      a57 = &a34;
      std::vector<std::pair<std::string,Espresso::blob_numerical_properties>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a37);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&a42);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a47);
      _Unwind_Resume(a1);
    }
  }
  else if (!v58)
  {
    goto LABEL_4;
  }
  nitro::nitro_function::nitro_function(v58);
  goto LABEL_4;
}

uint64_t *std::vector<std::pair<std::string,Espresso::blob_numerical_properties>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 64;
      long long v6 = *(_OWORD *)(v3 - 64);
      *(void *)(v4 - 48) = *(void *)(v3 - 48);
      *(_OWORD *)(v4 - 64) = v6;
      *(void *)(v3 - 56) = 0;
      *(void *)(v3 - 48) = 0;
      *(void *)(v3 - 64) = 0;
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(void *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v4 -= 64;
      v3 -= 64;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v7 = *result;
  *uint64_t result = v5;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<std::string,Espresso::blob_numerical_properties>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::blob_numerical_properties>,0>(i - 64);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::pair<std::string,Espresso::blob_numerical_properties>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *std::pair<std::string,Espresso::blob_numerical_properties>::pair[abi:ne180100]<std::string&,Espresso::blob_numerical_properties&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = *a3;
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&this[1].__r_.__value_.__r.__words[2], *((const void **)a3 + 2), *((void *)a3 + 3), (uint64_t)(*((void *)a3 + 3) - *((void *)a3 + 2)) >> 2);
  return this;
}

void sub_192A47DA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int,void>(void *a1, int a2)
{
  uint64_t v4 = operator new(0x60uLL);
  v4[1] = 0;
  uint64_t v4[2] = 0;
  void *v4 = &unk_1EE3899C8;
  int8x16_t v4[3] = &unk_1EE36BF10;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_DWORD *)v4 + 8) = a2;
  *(void *)((char *)v4 + 36) = 0x100000001;
  *((_DWORD *)v4 + 11) = 1;
  long long v5 = (Espresso *)(4 * a2);
  long long v6 = Espresso::kern_alloc_uninitialized(v5);
  bzero(v6, (size_t)v5);
  v4[6] = v6;
  *((unsigned char *)v4 + 56) = 1;
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_192A47E7C(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,Espresso::blob_numerical_properties>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::blob_numerical_properties>,0>(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Espresso::pass_transform_quantize_kernel::~pass_transform_quantize_kernel(Espresso::pass_transform_quantize_kernel *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_transform_quantize_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_transform_quantize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388EA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_transform_quantize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388EA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::V9Engine::v9_depthwise_kernel::get_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 568);
  *a2 = *(void *)(this + 560);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

double Espresso::V9Engine::v9_depthwise_kernel::get_biases@<D0>(id *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = [this[75] contents];
  long long v5 = (char *)operator new(0x58uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)long long v5 = &unk_1EE389920;
  id v6 = this[74];
  *((void *)v5 + 3) = &unk_1EE36BEB0;
  double result = 0.0;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *((_DWORD *)v5 + 8) = v6;
  *((void *)v5 + 5) = v4;
  v5[48] = 0;
  *a2 = v5 + 24;
  a2[1] = v5;
  return result;
}

void Espresso::V9Engine::v9_depthwise_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  Espresso::blob<float,4>::copy(&v5, *a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 568);
  *(_OWORD *)(a1 + 560) = v5;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = *(void **)(a1 + 576);
  *(void *)(a1 + 576) = 0;
}

void Espresso::V9Engine::v9_depthwise_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(_DWORD *)(a1 + 336) = *a2 != 0;
  if (v3)
  {
    *(void *)(a1 + 592) = 4 * *(int *)(v3 + 8);
    uint64_t v4 = *(const void **)(a1 + 8);
    if (!v4
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      id v13 = v6[18];
      nitro::nitro_function::nitro_function(v7);
      id v8 = v13;
    }
    else
    {
      id v8 = v6[18];
    }
    id v14 = v8;
    uint64_t v10 = [v8 newBufferWithLength:*(void *)(a1 + 592) options:0];
    unint64_t v11 = *(void **)(a1 + 600);
    *(void *)(a1 + 600) = v10;

    memcpy((void *)[*(id *)(a1 + 600) contents], *(const void **)(*a2 + 16), *(void *)(a1 + 592));
    uint64_t v9 = v14;
  }
  else
  {
    *(void *)(a1 + 592) = -1;
    uint64_t v9 = *(void **)(a1 + 600);
    *(void *)(a1 + 600) = 0;
  }
}

void sub_192A48334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_depthwise_kernel::on_resized(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 648);
  *(void *)(a1 + 648) = 0;

  uint64_t v3 = *(void **)(a1 + 712);
  *(void *)(a1 + 712) = 0;

  *(unsigned char *)(a1 + 584) = 0;
}

void Espresso::V9Engine::v9_depthwise_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v107, *a2);
  id v8 = v107[0];
  if (*(unsigned char *)(v7 + 64))
  {
    uint64_t v9 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      uint64_t v9 = (void *)*v9;
    }
    uint64_t v10 = [NSString stringWithUTF8String:v9];
    [v8 setLabel:v10];
  }
  unint64_t v11 = **a3;
  if (v11) {
  else
  }
    uint64_t v12 = 0;
  id v13 = **a4;
  if (v13) {
  else
  }
    id v14 = 0;
  uint64_t v15 = *(void *)(a1 + 712);
  if (v15) {
    goto LABEL_71;
  }
  int32x2_t v16 = v14[1];
  int32x2_t v17 = v12[1];
  *(int32x2_t *)v18.i8 = v16;
  v18.u64[1] = (unint64_t)v17;
  *(int16x4_t *)(a1 + 608) = vmovn_s32(v18);
  int v19 = *(_DWORD *)(a1 + 344);
  *(_WORD *)(a1 + 618) = v19 * v12[2].i32[1];
  *(_WORD *)(a1 + 616) = v19;
  *(_WORD *)(a1 + 620) = v19 / *(_DWORD *)(a1 + 348);
  *(_WORD *)(a1 + 622) = 8;
  unsigned int v20 = *(unsigned __int16 *)(a1 + 396);
  unsigned int v21 = *(unsigned __int16 *)(a1 + 398);
  *(_WORD *)(a1 + 626) = v21;
  *(_WORD *)(a1 + 624) = v20;
  *(_WORD *)(a1 + 632) = v14[31].i32[0];
  *(_WORD *)(a1 + 634) = v14[31].i32[1];
  *(_DWORD *)(a1 + 636) = v14[32].i32[1];
  *(_WORD *)(a1 + 640) = v12[31].i32[0];
  *(_WORD *)(a1 + 642) = v12[31].i32[1];
  *(_DWORD *)(a1 + 644) = v12[32].i32[1];
  int v22 = *(__int16 *)(a1 + 376);
  switch(v22)
  {
    case 4:
      goto LABEL_15;
    case 2:
      int8x8_t v26 = 0;
      break;
    case 1:
LABEL_15:
      v23.i32[0] = *(__int16 *)(a1 + 400);
      v23.i32[1] = *(__int16 *)(a1 + 402);
      int32x2_t v24 = vmax_s32(vsub_s32(vmul_s32(vadd_s32(*(int32x2_t *)(a1 + 352), (int32x2_t)-1), vmax_s32(v23, (int32x2_t)0x100000001)), (int32x2_t)vmvn_s8((int8x8_t)vmla_s32(vneg_s32(v16), vadd_s32(v17, (int32x2_t)-1), vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(v21, v20), 0x10uLL), 0x10uLL)))), 0);
      int32x2_t v25 = (int32x2_t)vshr_n_u32((uint32x2_t)v24, 1uLL);
      int8x8_t v26 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(unsigned __int16 *)(a1 + 376) == 1), 0x1FuLL)), (int8x8_t)v25, (int8x8_t)vsub_s32(v24, v25));
      break;
    default:
      v16.i16[0] = *(_WORD *)(a1 + 384);
      v16.i16[2] = *(_WORD *)(a1 + 388);
      int8x8_t v26 = vand_s8((int8x8_t)v16, (int8x8_t)0xFFFF0000FFFFLL);
      break;
  }
  *(_WORD *)(a1 + 630) = v26.i16[2];
  *(_WORD *)(a1 + 628) = v26.i16[0];
  int v27 = *(void **)(a1 + 704);
  *(void *)(a1 + 704) = @"v9_depthwise_kernel_dumb";

  *(int64x2_t *)(a1 + 656) = vdupq_n_s64(4uLL);
  *(void *)(a1 + 672) = 4;
  v28.i64[0] = *(__int16 *)(a1 + 612);
  v28.i64[1] = *(__int16 *)(a1 + 614);
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  *(uint64x2_t *)(a1 + 680) = vsraq_n_u64((uint64x2_t)vdupq_n_s64(1uLL), (uint64x2_t)vaddq_s64(v28, v29), 2uLL);
  *(void *)(a1 + 696) = (((unint64_t)*(unsigned __int16 *)(a1 + 618) - 1) >> 2) + 1;
  if (*(_WORD *)(a1 + 620) == 1
    && (*(unsigned char *)(a1 + 344) & 7) == 0
    && (*(_WORD *)(a1 + 632) & 7) == 0
    && (*(_WORD *)(a1 + 634) & 7) == 0
    && (*(unsigned char *)(a1 + 636) & 7) == 0
    && (*(_WORD *)(a1 + 640) & 7) == 0
    && (*(_WORD *)(a1 + 642) & 7) == 0
    && (*(unsigned char *)(a1 + 644) & 7) == 0)
  {
    int v30 = [*(id *)(v7 + 144) supportsFeatureSet:11];
    *(unsigned char *)(a1 + 584) = 1;
    unint64_t v31 = (unint64_t)*(unsigned __int16 *)(a1 + 618) >> 3;
    *(_WORD *)(a1 + 618) = v31;
    unsigned int v32 = *(unsigned __int16 *)(a1 + 616) >> 3;
    *(_WORD *)(a1 + 616) >>= 3;
    *(_WORD *)(a1 + 632) >>= 3;
    *(_WORD *)(a1 + 634) >>= 3;
    *(_DWORD *)(a1 + 636) >>= 3;
    *(_WORD *)(a1 + 640) >>= 3;
    *(_WORD *)(a1 + 642) >>= 3;
    *(_DWORD *)(a1 + 644) >>= 3;
    if (v30
      && *(_WORD *)(a1 + 624) == 1
      && *(_WORD *)(a1 + 626) == 1
      && *(_WORD *)(a1 + 400) == 1
      && *(_WORD *)(a1 + 402) == 1
      && *(_DWORD *)(a1 + 356) == 3
      && *(_DWORD *)(a1 + 352) == 3
      && (v33 = *(__int16 *)(a1 + 612), int v34 = *(unsigned __int16 *)(a1 + 622), v33 >= v34))
    {
      unsigned int v94 = 16;
      LOWORD(v95) = 4;
      while (1)
      {
        unsigned int v96 = v94 >> 1;
        if (v94 >> 1 < v32) {
          break;
        }
        LOWORD(v95) = 2 * v95;
        BOOL v97 = v94 > 3;
        v94 >>= 1;
        if (!v97) {
          goto LABEL_80;
        }
      }
      unsigned int v96 = v94;
LABEL_80:
      if ((unsigned __int16)v95 < 5u)
      {
        unsigned int v98 = 1;
      }
      else
      {
        unsigned int v98 = 1;
        unsigned __int16 v99 = v95;
        while (1)
        {
          unsigned int v95 = v99 >> 1;
          if (2 * v98 > v95) {
            break;
          }
          unsigned int v98 = (unsigned __int16)(2 * v98);
          unsigned int v100 = v99;
          v99 >>= 1;
          if (v100 < 0xA) {
            goto LABEL_87;
          }
        }
        LOWORD(v95) = v99;
      }
LABEL_87:
      uint64_t v101 = ((v33 - 1) / v34 + 1);
      unsigned int v102 = *(__int16 *)(a1 + 614);
      *(void *)(a1 + 672) = v96;
      *(void *)(a1 + 696) = (v31 - 1) / v96 + 1;
      *(void *)(a1 + 656) = (unsigned __int16)v95;
      *(void *)(a1 + 664) = v98;
      *(void *)(a1 + 680) = ((unint64_t)v102 - 1) / (unsigned __int16)v95 + 1;
      *(void *)(a1 + 688) = (v101 - 1) / (unint64_t)v98 + 1;
      uint64_t v35 = @"v9_depthwise_kernel_multiplier1_3x3filter_shuffle_load_by8channels";
    }
    else
    {
      uint64_t v35 = @"v9_depthwise_kernel_multiplier1_by8channels";
    }
    uint64_t v36 = *(void **)(a1 + 704);
    *(void *)(a1 + 704) = v35;
  }
  uint64_t v37 = objc_opt_new();
  [v37 appendString:*(void *)(a1 + 704)];
  uint64_t v38 = (MTLFunctionConstantValues *)objc_opt_new();
  uint64_t v39 = *(unsigned int *)(a1 + 356);
  __int16 v108 = *(_DWORD *)(a1 + 356);
  objc_msgSend(v37, "appendFormat:", @"%d:%d_", 0, v39);
  [(MTLFunctionConstantValues *)v38 setConstantValue:&v108 type:41 atIndex:0];
  uint64_t v40 = *(unsigned int *)(a1 + 352);
  __int16 v108 = *(_DWORD *)(a1 + 352);
  objc_msgSend(v37, "appendFormat:", @"%d:%d_", 1, v40);
  [(MTLFunctionConstantValues *)v38 setConstantValue:&v108 type:41 atIndex:1];
  __int16 v108 = *(_WORD *)(a1 + 402);
  objc_msgSend(v37, "appendFormat:", @"%d:%d_", 2, v108);
  [(MTLFunctionConstantValues *)v38 setConstantValue:&v108 type:41 atIndex:2];
  __int16 v108 = *(_WORD *)(a1 + 400);
  objc_msgSend(v37, "appendFormat:", @"%d:%d_", 3, v108);
  [(MTLFunctionConstantValues *)v38 setConstantValue:&v108 type:41 atIndex:3];
  uint64_t v41 = *(unsigned int *)(a1 + 336);
  __int16 v108 = *(_DWORD *)(a1 + 336);
  objc_msgSend(v37, "appendFormat:", @"%d:%d_", 4, v41);
  [(MTLFunctionConstantValues *)v38 setConstantValue:&v108 type:37 atIndex:4];
  if (*(_DWORD *)(a1 + 328)) {
    LODWORD(v42) = 0;
  }
  else {
    LODWORD(v42) = -1;
  }
  if (*(_DWORD *)(a1 + 332)) {
    uint64_t v42 = 1;
  }
  else {
    uint64_t v42 = v42;
  }
  __int16 v108 = v42;
  objc_msgSend(v37, "appendFormat:", @"%d:%d_", 5, v42);
  [(MTLFunctionConstantValues *)v38 setConstantValue:&v108 type:37 atIndex:5];
  BOOL v43 = *(unsigned __int16 *)(a1 + 378) == 2;
  __int16 v108 = 2 * v43;
  objc_msgSend(v37, "appendFormat:", @"%d:%d_", 6, 2 * v43);
  [(MTLFunctionConstantValues *)v38 setConstantValue:&v108 type:41 atIndex:6];
  id v44 = *(id *)(v7 + 144);
  uint64_t v45 = [v44 newBufferWithBytes:a1 + 608 length:40 options:0];
  uint64_t v46 = *(void **)(a1 + 648);
  *(void *)(a1 + 648) = v45;

  uint64_t v47 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v7, *(NSString **)(a1 + 704), (NSString *)v37, v38);
  unint64_t v48 = *(void **)(a1 + 712);
  *(void *)(a1 + 712) = v47;

  id v49 = *(id *)(v7 + 144);
  int v50 = v49;
  uint64_t v51 = 0;
  uint64_t v52 = *(void *)(a1 + 560);
  uint64_t v53 = *(int *)(v52 + 8);
  uint64_t v54 = v52 + 12;
  do
  {
    v53 *= *(int *)(v54 + v51);
    v51 += 4;
  }
  while (v51 != 12);
  uint64_t v55 = [v49 newBufferWithLength:2 * v53 options:0];
  unint64_t v56 = *(void **)(a1 + 576);
  *(void *)(a1 + 576) = v55;

  int v57 = (_WORD *)[*(id *)(a1 + 576) contents];
  uint64_t v58 = *(void *)(a1 + 560);
  if (*(unsigned char *)(a1 + 584))
  {
    uint64_t v59 = 0;
    uint64_t v60 = *(int *)(v58 + 8);
    do
    {
      v60 *= *(int *)(v58 + 12 + v59);
      v59 += 4;
    }
    while (v59 != 12);
    uint64_t v61 = malloc_type_malloc(2 * v60, 0x1000040BDFB0063uLL);
    uint64_t v62 = 0;
    uint64_t v63 = *(void *)(a1 + 560);
    int v64 = *(int **)(v63 + 24);
    uint64_t v65 = *(int *)(v63 + 8);
    uint64_t v66 = v63 + 12;
    do
    {
      v65 *= *(int *)(v66 + v62);
      v62 += 4;
    }
    while (v62 != 12);
    if (v65)
    {
      int v67 = v61;
      do
      {
        int v68 = *v64++;
        _S0 = v68;
        __asm { FCVT            H0, S0 }
        *v67++ = _S0;
        --v65;
      }
      while (v65);
    }
    uint64_t v74 = *(int *)(a1 + 344);
    if (v74)
    {
      uint64_t v75 = 0;
      unint64_t v76 = 0;
      unint64_t v77 = *(int *)(a1 + 356);
      if (v77 <= 1) {
        uint64_t v78 = 1;
      }
      else {
        uint64_t v78 = *(int *)(a1 + 356);
      }
      do
      {
        if (v77)
        {
          uint64_t v79 = 0;
          unint64_t v80 = *(int *)(a1 + 352);
          if (v80 <= 1) {
            uint64_t v81 = 1;
          }
          else {
            uint64_t v81 = *(int *)(a1 + 352);
          }
          int v82 = (_WORD *)((char *)&v57[v76 & 7] + 16 * v77 * (v76 >> 3) * v80);
          long long v83 = (_WORD *)((char *)v61 + v75 * v80);
          do
          {
            uint64_t v84 = v83;
            uint64_t v85 = v82;
            uint64_t v86 = v81;
            if (v80)
            {
              do
              {
                __int16 v87 = *v84++;
                *uint64_t v85 = v87;
                v85 += 8;
                --v86;
              }
              while (v86);
            }
            ++v79;
            v82 += 8 * v80;
            v83 += v80;
          }
          while (v79 != v78);
        }
        ++v76;
        v75 += 2 * v77;
      }
      while (v76 != v74);
    }
    free(v61);
  }
  else
  {
    uint64_t v88 = 0;
    int v89 = *(int **)(v58 + 24);
    uint64_t v90 = *(int *)(v58 + 8);
    uint64_t v91 = v58 + 12;
    do
    {
      v90 *= *(int *)(v91 + v88);
      v88 += 4;
    }
    while (v88 != 12);
    for (; v90; --v90)
    {
      int v92 = *v89++;
      _S0 = v92;
      __asm { FCVT            H0, S0 }
      *v57++ = _S0;
    }
  }

  uint64_t v15 = *(void *)(a1 + 712);
LABEL_71:
  [v8 setComputePipelineState:v15];
  if (*(unsigned char *)(a1 + 584)) {
    [v8 setTexture:*(void *)&v14[33] atIndex:0];
  }
  else {
    [v8 setBuffer:*(void *)&v14[20] offset:0 atIndex:0];
  }
  [v8 setBuffer:*(void *)(a1 + 576) offset:0 atIndex:1];
  [v8 setBuffer:*(void *)(a1 + 600) offset:0 atIndex:2];
  [v8 setBuffer:*(void *)&v12[20] offset:0 atIndex:3];
  [v8 setBuffer:*(void *)(a1 + 648) offset:0 atIndex:4];
  uint64_t v106 = *(void *)(a1 + 696);
  long long v105 = *(_OWORD *)(a1 + 680);
  long long v103 = *(_OWORD *)(a1 + 656);
  uint64_t v104 = *(void *)(a1 + 672);
  [v8 dispatchThreadgroups:&v105 threadsPerThreadgroup:&v103];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v107);
}

void sub_192A48D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)va);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_depthwise_kernel::~v9_depthwise_kernel(id *this)
{
  uint64_t v2 = (std::__shared_weak_count *)this[71];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)this[71];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
}

void Espresso::pass_params_prepare_gradient_builder::~pass_params_prepare_gradient_builder(Espresso::pass_params_prepare_gradient_builder *this)
{
}

void Espresso::analysis_prepare_gradient_builder::~analysis_prepare_gradient_builder(Espresso::analysis_prepare_gradient_builder *this)
{
  Espresso::analysis_prepare_gradient_builder::~analysis_prepare_gradient_builder(this);

  JUMPOUT(0x192FF16B0);
}

{
  char *v2;

  *(void *)this = &unk_1EE368030;
  uint64_t v2 = (char *)this + 8;
  std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table((uint64_t)this + 208);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 168);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 128);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 88);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 48);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
}

void Espresso::pass_params_rename_phi_io::~pass_params_rename_phi_io(Espresso::pass_params_rename_phi_io *this)
{
}

void Espresso::analysis_rename_phi_io::~analysis_rename_phi_io(Espresso::analysis_rename_phi_io *this)
{
  *(void *)this = &unk_1EE357730;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 8);

  JUMPOUT(0x192FF16B0);
}

{
  *(void *)this = &unk_1EE357730;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 8);
}

void Espresso::pass_params_stack_blobs::~pass_params_stack_blobs(Espresso::pass_params_stack_blobs *this)
{
  *(void *)this = &unk_1EE35B148;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 8);

  JUMPOUT(0x192FF16B0);
}

{
  *(void *)this = &unk_1EE35B148;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 8);
}

void Espresso::pass_prepare_gradient_builder::run_on_network(Espresso::pass_prepare_gradient_builder *this, Espresso::net *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (const void *)*((void *)this + 1);
  if (v4
  {
    uint64_t v5 = *((void *)this + 2);
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  *(_OWORD *)std::vector<int> __x = 0u;
  long long v14 = 0u;
  int v15 = 1065353216;
  *(_OWORD *)uint64_t __n = 0u;
  long long v8 = 0u;
  int v9 = 1065353216;
  memset(v10, 0, sizeof(v10));
  LODWORD(v11) = 1065353216;
  id v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE379938;
  v6[1] = __x;
  v6[2] = v10;
  v6[3] = __n;
  uint64_t v12 = v6;
  Espresso::transform_network_inplace((uint64_t)a2);
}

void sub_192A4AA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a55 < 0) {
    operator delete(__p);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  a56 = (void *)(v61 - 248);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v61 - 176);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a39);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v61 - 224);
  *(void *)(v61 - 176) = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v61 - 176));
  if (a32) {
    nitro::nitro_function::nitro_function(a32);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table((uint64_t)&a33);
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  _Unwind_Resume(a1);
}

void visit_program_stacks(uint64_t a1, uint64_t a2)
{
  long long __p = 0;
  int v22 = 0;
  int32x2_t v23 = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40) != v2)
  {
    unint64_t v5 = 0;
    do
    {
      unsigned int v6 = Espresso::str_to_type((std::string *)(*(void *)(v2 + 16 * v5) + 40));
      unsigned int v25 = v6;
      int32x2_t v24 = (void *)v5;
      uint64_t v7 = *(void *)(a2 + 24);
      if (!v7) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, unsigned int *, void **, void **))(*(void *)v7 + 48))(v7, &v25, &v24, &__p);
      if (v6 > 1)
      {
        switch(v6)
        {
          case 0xFFFFFFFF:
          case 2u:
          case 4u:
            goto LABEL_22;
          case 3u:
            int v9 = v22 - 16;
            goto LABEL_21;
          default:
            uint64_t v19 = *(void *)(v2 + 16 * v5);
            unsigned int v20 = (void *)(v19 + 40);
            if (*(char *)(v19 + 63) < 0) {
              unsigned int v20 = (void *)*v20;
            }
            int32x2_t v24 = v20;
            Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("backprop of control flow instruction %s", &v24);
        }
      }
      long long v8 = v22;
      if (v22 >= v23)
      {
        uint64_t v10 = (char *)__p;
        uint64_t v11 = (v22 - (unsigned char *)__p) >> 4;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v23 - (unsigned char *)__p;
        if ((v23 - (unsigned char *)__p) >> 3 > v12) {
          unint64_t v12 = v13 >> 3;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v15 = (char *)operator new(16 * v14);
        uint64_t v16 = &v15[16 * v11];
        *(_DWORD *)uint64_t v16 = v6;
        *((void *)v16 + 1) = v5;
        int32x2_t v17 = v16;
        while (v8 != v10)
        {
          int v18 = *((_DWORD *)v8 - 4);
          v8 -= 16;
          *((_DWORD *)v17 - 4) = v18;
          v17 -= 16;
          *((void *)v17 + 1) = *((void *)v8 + 1);
        }
        int v9 = v16 + 16;
        long long __p = v17;
        int v22 = v16 + 16;
        int32x2_t v23 = &v15[16 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *(_DWORD *)int v22 = v6;
        *((void *)v8 + 1) = v5;
        int v9 = v8 + 16;
      }
LABEL_21:
      int v22 = v9;
LABEL_22:
      ++v5;
      uint64_t v2 = *(void *)(a1 + 32);
    }
    while (v5 < (*(void *)(a1 + 40) - v2) >> 4);
    if (__p)
    {
      int v22 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_192A4AF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,char const*,unsigned long>(const char *a1, uint64_t a2)
{
}

void *std::vector<Espresso::layer_nd_shape>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Espresso::layer_nd_shape>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_192A4B0D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t get_blobs_on_path_helper(unsigned __int8 *a1, void *a2, void *a3, void *a4, void *a5)
{
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a5, a1))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    if (std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, a1, (uint64_t)&std::piecewise_construct, (long long **)&__p)[40])char v10 = 1; {
    else
    }
      char v10 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a4, (uint64_t)a1) != 0;
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, a1, (uint64_t)&std::piecewise_construct, (long long **)&__p)[40] = 0;
    char v10 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a2, (uint64_t)a1) != 0;
    if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, a1))
    {
      uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, a1);
      unint64_t v12 = (long long *)*((void *)v11 + 5);
      uint64_t v13 = (long long *)*((void *)v11 + 6);
      while (v12 != v13)
      {
        if (*((char *)v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v12, *((void *)v12 + 1));
        }
        else
        {
          long long v14 = *v12;
          __p.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
        }
        char blobs_on_path_helper = get_blobs_on_path_helper(&__p, a2, a3, a4, a5);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v10 |= blobs_on_path_helper;
        unint64_t v12 = (long long *)((char *)v12 + 24);
      }
    }
    if (v10) {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a4, (uint64_t)a1, (uint64_t)a1);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, a1, (uint64_t)&std::piecewise_construct, (long long **)&__p)[40] = v10 & 1;
  }
  return v10 & 1;
}

void sub_192A4B2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<Espresso::layer_nd_shape>::__init_with_size[abi:ne180100]<Espresso::layer_nd_shape*,Espresso::layer_nd_shape*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v6 = result;
    double result = std::vector<Espresso::layer_nd_shape>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_192A4B320(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::str_to_type(std::string *__str)
{
  uint64_t v1 = __str;
  std::string::basic_string(&v13, __str, 0, 3uLL, (std::allocator<char> *)&v14);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v13.__r_.__value_.__l.__size_ != 3)
    {
      operator delete(v13.__r_.__value_.__l.__data_);
      return 0xFFFFFFFFLL;
    }
    BOOL v4 = *(_WORD *)v13.__r_.__value_.__l.__data_ != 26211 || *(unsigned char *)(v13.__r_.__value_.__r.__words[0] + 2) != 95;
    operator delete(v13.__r_.__value_.__l.__data_);
    if (v4) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) != 3) {
      return 0xFFFFFFFFLL;
    }
    if (LOWORD(v13.__r_.__value_.__l.__data_) != 26211 || v13.__r_.__value_.__s.__data_[2] != 95) {
      return 0xFFFFFFFFLL;
    }
  }
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v1->__r_.__value_.__l.__size_;
    if (size != 5)
    {
      if (size == 7)
      {
        uint64_t v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
        goto LABEL_27;
      }
      uint64_t v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
      if (size != 6) {
        goto LABEL_57;
      }
      goto LABEL_49;
    }
    uint64_t v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
LABEL_42:
    if (LODWORD(v1->__r_.__value_.__l.__data_) == 1767859811 && v1->__r_.__value_.__s.__data_[4] == 102) {
      return 0;
    }
    goto LABEL_57;
  }
  int v5 = HIBYTE(v1->__r_.__value_.__r.__words[2]);
  if (v5 == 5) {
    goto LABEL_42;
  }
  if (v5 == 6)
  {
LABEL_49:
    if (LODWORD(v1->__r_.__value_.__l.__data_) == 1700750947 && WORD2(v1->__r_.__value_.__r.__words[0]) == 25710) {
      return 3;
    }
LABEL_57:
    v13.__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
    Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("gradient of control flow instruct %s", &v13);
  }
  if (v5 != 7) {
    goto LABEL_57;
  }
LABEL_27:
  if (LODWORD(v1->__r_.__value_.__l.__data_) == 1818191459
    && *(_DWORD *)((char *)v1->__r_.__value_.__r.__words + 3) == 1886351212)
  {
    return 1;
  }
  if (LODWORD(v1->__r_.__value_.__l.__data_) == 1700750947
    && *(_DWORD *)((char *)v1->__r_.__value_.__r.__words + 3) == 1702063205)
  {
    return 2;
  }
  if (LODWORD(v1->__r_.__value_.__l.__data_) != 1784637027
    || *(_DWORD *)((char *)v1->__r_.__value_.__r.__words + 3) != 1886221674)
  {
    goto LABEL_57;
  }
  return 4;
}

void *std::__function::__func<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0,std::allocator<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::target_type()
{
}

uint64_t std::__function::__func<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0,std::allocator<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZL29visit_program_to_prepare_infoRN8Espresso3netERKNSt3__110shared_ptrINS_33analysis_prepare_gradient_builderEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0,std::allocator<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::operator()(uint64_t a1, int *a2, unint64_t *a3, void *a4)
{
  unint64_t v5 = (unint64_t)a4;
  int v7 = *a2;
  unint64_t v8 = *a3;
  unint64_t v94 = *a3;
  if (v7 != 3)
  {
    if (!v7)
    {
      uint64_t v9 = a4[1];
      if (v9 != *a4 && *(_DWORD *)(v9 - 16) == 1) {
        ++**(_DWORD **)(a1 + 8);
      }
    }
    goto LABEL_169;
  }
  uint64_t v10 = a4[1];
  uint64_t v11 = *(uint64_t **)(a1 + 16);
  uint64_t v12 = *v11;
  unint64_t v13 = *(void *)(*v11 + 136);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v13) {
        unint64_t v4 = v8 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v8;
    }
    int v15 = *(void **)(*(void *)(v12 + 128) + 8 * v4);
    if (v15)
    {
      for (uint64_t i = (void *)*v15; i; uint64_t i = (void *)*i)
      {
        unint64_t v17 = i[1];
        if (v17 == v8)
        {
          if (i[2] == v8) {
            goto LABEL_79;
          }
        }
        else
        {
          if (v14.u32[0] > 1uLL)
          {
            if (v17 >= v13) {
              v17 %= v13;
            }
          }
          else
          {
            v17 &= v13 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  int v18 = operator new(0x28uLL);
  *int v18 = 0;
  v18[1] = v8;
  long long v18[2] = v8;
  *((_DWORD *)v18 + 6) = *(_DWORD *)(v10 - 16);
  v18[4] = *(void *)(v10 - 8);
  float v19 = (float)(unint64_t)(*(void *)(v12 + 152) + 1);
  float v20 = *(float *)(v12 + 160);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    BOOL v21 = 1;
    if (v13 >= 3) {
      BOOL v21 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v13);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v13 = *(void *)(v12 + 136);
    if (*(void *)&prime > v13) {
      goto LABEL_35;
    }
    if (*(void *)&prime < v13)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(v12 + 152) / *(float *)(v12 + 160));
      if (v13 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v13)
      {
        unint64_t v13 = *(void *)(v12 + 136);
      }
      else
      {
        if (prime)
        {
LABEL_35:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unsigned int v25 = operator new(8 * *(void *)&prime);
          int8x8_t v26 = *(void **)(v12 + 128);
          *(void *)(v12 + 128) = v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          *(int8x8_t *)(v12 + 136) = prime;
          do
            *(void *)(*(void *)(v12 + 128) + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          int64x2_t v28 = *(void **)(v12 + 144);
          if (v28)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(v12 + 128) + 8 * v29) = v12 + 144;
            int v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  uint64_t v36 = *(void *)(v12 + 128);
                  if (!*(void *)(v36 + 8 * v35))
                  {
                    *(void *)(v36 + 8 * vstd::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)this + 35) = v28;
                    goto LABEL_60;
                  }
                  *int64x2_t v28 = *v34;
                  *int v34 = **(void **)(*(void *)(v12 + 128) + 8 * v35);
                  **(void **)(*(void *)(v12 + 128) + 8 * vstd::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)this + 35) = v34;
                  int v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_60:
                int64x2_t v28 = v34;
                int v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v13 = (unint64_t)prime;
          goto LABEL_64;
        }
        uint64_t v47 = *(void **)(v12 + 128);
        *(void *)(v12 + 128) = 0;
        if (v47) {
          operator delete(v47);
        }
        unint64_t v13 = 0;
        *(void *)(v12 + 136) = 0;
      }
    }
LABEL_64:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v8 >= v13) {
        unint64_t v4 = v8 % v13;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v8;
    }
  }
  uint64_t v37 = *(void *)(v12 + 128);
  uint64_t v38 = *(void **)(v37 + 8 * v4);
  if (v38)
  {
    *int v18 = *v38;
LABEL_77:
    *uint64_t v38 = v18;
    goto LABEL_78;
  }
  *int v18 = *(void *)(v12 + 144);
  *(void *)(v12 + 144) = v18;
  *(void *)(v37 + 8 * v4) = v12 + 144;
  if (*v18)
  {
    unint64_t v39 = *(void *)(*v18 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v39 >= v13) {
        v39 %= v13;
      }
    }
    else
    {
      v39 &= v13 - 1;
    }
    uint64_t v38 = (void *)(*(void *)(v12 + 128) + 8 * v39);
    goto LABEL_77;
  }
LABEL_78:
  ++*(void *)(v12 + 152);
  uint64_t v12 = **(void **)(a1 + 16);
LABEL_79:
  unint64_t v40 = *(void *)(v12 + 248);
  if (v40 <= v8 && v8 < *(void *)(v12 + 256))
  {
    unint64_t v41 = *(void *)(v10 - 8);
    if (v40 > v41) {
      *(void *)(v12 + 248) = v41;
    }
  }
  if (!*(_DWORD *)(v10 - 16))
  {
    uint64_t v42 = *(void *)(v5 + 8);
    if ((unint64_t)(v42 - *(void *)v5) >= 0x11 && *(_DWORD *)(v42 - 32) == 1)
    {
      --**(_DWORD **)(a1 + 8);
      uint64_t v43 = *(void *)(v10 - 8);
      unint64_t v44 = *(void *)(v42 - 24);
      unint64_t v45 = *(void *)(v12 + 176);
      if (v45)
      {
        uint8x8_t v46 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
        v46.i16[0] = vaddlv_u8(v46);
        if (v46.u32[0] > 1uLL)
        {
          unint64_t v5 = *(void *)(v42 - 24);
          if (v44 >= v45) {
            unint64_t v5 = v44 % v45;
          }
        }
        else
        {
          unint64_t v5 = (v45 - 1) & v44;
        }
        unint64_t v48 = *(void ***)(*(void *)(v12 + 168) + 8 * v5);
        if (v48)
        {
          for (uint64_t j = *v48; j; uint64_t j = (void *)*j)
          {
            unint64_t v50 = j[1];
            if (v50 == v44)
            {
              if (j[2] == v44) {
                goto LABEL_168;
              }
            }
            else
            {
              if (v46.u32[0] > 1uLL)
              {
                if (v50 >= v45) {
                  v50 %= v45;
                }
              }
              else
              {
                v50 &= v45 - 1;
              }
              if (v50 != v5) {
                break;
              }
            }
          }
        }
      }
      uint64_t j = operator new(0x28uLL);
      *uint64_t j = 0;
      j[1] = v44;
      uint64_t v51 = *(void *)(v42 - 24);
      j[3] = 0;
      j[4] = 0;
      j[2] = v51;
      float v52 = (float)(unint64_t)(*(void *)(v12 + 192) + 1);
      float v53 = *(float *)(v12 + 200);
      if (v45 && (float)(v53 * (float)v45) >= v52)
      {
LABEL_158:
        uint64_t v70 = *(void *)(v12 + 168);
        uint64_t v71 = *(void **)(v70 + 8 * v5);
        if (v71)
        {
          *uint64_t j = *v71;
        }
        else
        {
          *uint64_t j = *(void *)(v12 + 184);
          *(void *)(v12 + 184) = j;
          *(void *)(v70 + 8 * v5) = v12 + 184;
          if (!*j) {
            goto LABEL_167;
          }
          unint64_t v72 = *(void *)(*j + 8);
          if ((v45 & (v45 - 1)) != 0)
          {
            if (v72 >= v45) {
              v72 %= v45;
            }
          }
          else
          {
            v72 &= v45 - 1;
          }
          uint64_t v71 = (void *)(*(void *)(v12 + 168) + 8 * v72);
        }
        void *v71 = j;
LABEL_167:
        ++*(void *)(v12 + 192);
LABEL_168:
        j[3] = v43;
        j[4] = v8;
        goto LABEL_169;
      }
      BOOL v54 = 1;
      if (v45 >= 3) {
        BOOL v54 = (v45 & (v45 - 1)) != 0;
      }
      unint64_t v55 = v54 | (2 * v45);
      unint64_t v56 = vcvtps_u32_f32(v52 / v53);
      if (v55 <= v56) {
        int8x8_t v57 = (int8x8_t)v56;
      }
      else {
        int8x8_t v57 = (int8x8_t)v55;
      }
      if (*(void *)&v57 == 1)
      {
        int8x8_t v57 = (int8x8_t)2;
      }
      else if ((*(void *)&v57 & (*(void *)&v57 - 1)) != 0)
      {
        int8x8_t v57 = (int8x8_t)std::__next_prime(*(void *)&v57);
      }
      unint64_t v45 = *(void *)(v12 + 176);
      if (*(void *)&v57 > v45) {
        goto LABEL_124;
      }
      if (*(void *)&v57 < v45)
      {
        unint64_t v64 = vcvtps_u32_f32((float)*(unint64_t *)(v12 + 192) / *(float *)(v12 + 200));
        if (v45 < 3 || (uint8x8_t v65 = (uint8x8_t)vcnt_s8((int8x8_t)v45), v65.i16[0] = vaddlv_u8(v65), v65.u32[0] > 1uLL))
        {
          unint64_t v64 = std::__next_prime(v64);
        }
        else
        {
          uint64_t v66 = 1 << -(char)__clz(v64 - 1);
          if (v64 >= 2) {
            unint64_t v64 = v66;
          }
        }
        if (*(void *)&v57 <= v64) {
          int8x8_t v57 = (int8x8_t)v64;
        }
        if (*(void *)&v57 >= v45)
        {
          unint64_t v45 = *(void *)(v12 + 176);
        }
        else
        {
          if (v57)
          {
LABEL_124:
            if (*(void *)&v57 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v58 = operator new(8 * *(void *)&v57);
            uint64_t v59 = *(void **)(v12 + 168);
            *(void *)(v12 + 168) = v58;
            if (v59) {
              operator delete(v59);
            }
            uint64_t v60 = 0;
            *(int8x8_t *)(v12 + 176) = v57;
            do
              *(void *)(*(void *)(v12 + 168) + 8 * v60++) = 0;
            while (*(void *)&v57 != v60);
            uint64_t v61 = *(void **)(v12 + 184);
            if (v61)
            {
              unint64_t v62 = v61[1];
              uint8x8_t v63 = (uint8x8_t)vcnt_s8(v57);
              v63.i16[0] = vaddlv_u8(v63);
              if (v63.u32[0] > 1uLL)
              {
                if (v62 >= *(void *)&v57) {
                  v62 %= *(void *)&v57;
                }
              }
              else
              {
                v62 &= *(void *)&v57 - 1;
              }
              *(void *)(*(void *)(v12 + 168) + 8 * v62) = v12 + 184;
              int v67 = (void *)*v61;
              if (*v61)
              {
                do
                {
                  unint64_t v68 = v67[1];
                  if (v63.u32[0] > 1uLL)
                  {
                    if (v68 >= *(void *)&v57) {
                      v68 %= *(void *)&v57;
                    }
                  }
                  else
                  {
                    v68 &= *(void *)&v57 - 1;
                  }
                  if (v68 != v62)
                  {
                    uint64_t v69 = *(void *)(v12 + 168);
                    if (!*(void *)(v69 + 8 * v68))
                    {
                      *(void *)(v69 + 8 * v68) = v61;
                      goto LABEL_149;
                    }
                    *uint64_t v61 = *v67;
                    void *v67 = **(void **)(*(void *)(v12 + 168) + 8 * v68);
                    **(void **)(*(void *)(v12 + 168) + 8 * v68) = v67;
                    int v67 = v61;
                  }
                  unint64_t v68 = v62;
LABEL_149:
                  uint64_t v61 = v67;
                  int v67 = (void *)*v67;
                  unint64_t v62 = v68;
                }
                while (v67);
              }
            }
            unint64_t v45 = (unint64_t)v57;
            goto LABEL_153;
          }
          char v93 = *(void **)(v12 + 168);
          *(void *)(v12 + 168) = 0;
          if (v93) {
            operator delete(v93);
          }
          unint64_t v45 = 0;
          *(void *)(v12 + 176) = 0;
        }
      }
LABEL_153:
      if ((v45 & (v45 - 1)) != 0)
      {
        if (v44 >= v45) {
          unint64_t v5 = v44 % v45;
        }
        else {
          unint64_t v5 = v44;
        }
      }
      else
      {
        unint64_t v5 = (v45 - 1) & v44;
      }
      goto LABEL_158;
    }
  }
LABEL_169:
  *(_DWORD *)(**(void **)(a1 + 24) + 4 * v8) = **(_DWORD **)(a1 + 8);
  uint64_t v73 = *(void *)(a1 + 32);
  unsigned int v95 = (unint64_t *)(*(void *)(*(void *)(v73 + 32) + 16 * v8) + 16);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v73 + 928, (uint64_t)v95, (uint64_t)&std::piecewise_construct, (long long **)&v95)[5] = v8;
  uint64_t v74 = **(void **)(a1 + 16);
  if (*(void *)(v74 + 248) > v8 || v8 >= *(void *)(v74 + 256)) {
    return;
  }
  uint64_t v75 = *(void *)(a1 + 32);
  uint64_t v76 = *(void *)(*(void *)(v75 + 32) + 16 * v8);
  unint64_t v77 = (void *)(v76 + 40);
  int v78 = *(char *)(v76 + 63);
  if (v78 < 0)
  {
    if (*(void *)(v76 + 48) != 11) {
      goto LABEL_180;
    }
    unint64_t v77 = (void *)*v77;
LABEL_176:
    uint64_t v79 = (void *)*v77;
    uint64_t v80 = *(void *)((char *)v77 + 3);
    if (v79 == (void *)0x747269765F696870 && v80 == 0x6C6175747269765FLL)
    {
      unsigned int v95 = &v94;
      uint64_t v88 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v75 + 56, &v94, (uint64_t)&std::piecewise_construct, (uint64_t **)&v95);
      int v89 = (unsigned __int8 *)v88[3];
      uint64_t v90 = (unsigned __int8 *)v88[4];
      while (v89 != v90)
      {
        uint64_t v91 = **(void **)(a1 + 16);
        int v92 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(*(void *)(a1 + 40) + 16), v89);
        if (!v92) {
LABEL_199:
        }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v91 + 8, *((_DWORD *)v92 + 10), *((_DWORD *)v92 + 10));
        v89 += 24;
      }
    }
    goto LABEL_180;
  }
  if (v78 == 11) {
    goto LABEL_176;
  }
LABEL_180:
  if (**(int **)(a1 + 8) >= 1)
  {
    uint64_t v82 = *(void *)(a1 + 32) + 96;
    unsigned int v95 = &v94;
    long long v83 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v82, &v94, (uint64_t)&std::piecewise_construct, (uint64_t **)&v95);
    uint64_t v84 = (unsigned __int8 *)v83[3];
    uint64_t v85 = (unsigned __int8 *)v83[4];
    while (v84 != v85)
    {
      uint64_t v86 = **(void **)(a1 + 16);
      __int16 v87 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(*(void *)(a1 + 40) + 16), v84);
      if (!v87) {
        goto LABEL_199;
      }
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v86 + 8, *((_DWORD *)v87 + 10), *((_DWORD *)v87 + 10));
      v84 += 24;
    }
  }
}

void sub_192A4BF78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0,std::allocator<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3799E8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0,std::allocator<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE3799E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0,std::allocator<visit_program_to_prepare_info(Espresso::net &,std::shared_ptr<Espresso::analysis_prepare_gradient_builder> const&)::$_0>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_prepare_gradient_builder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::analysis_prepare_gradient_builder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3891B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::analysis_prepare_gradient_builder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3891B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0,std::allocator<insert_loop_count_stack(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target_type()
{
}

uint64_t std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0,std::allocator<insert_loop_count_stack(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZL23insert_loop_count_stackRN8Espresso3netEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0,std::allocator<insert_loop_count_stack(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 24);
  int v7 = (char *)operator new(0x30uLL);
  *(void *)int v7 = &unk_1EE37E5E0;
  *((void *)v7 + 1) = a2;
  *((void *)v7 + 2) = a3;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(a1 + 8);
  *((void *)v7 + 5) = v6;
  v9[3] = v7;
  visit_program_stacks(a2, (uint64_t)v9);
  return std::__function::__value_func<void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::~__value_func[abi:ne180100](v9);
}

void sub_192A4C1DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1},std::allocator<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1}>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::target_type()
{
}

uint64_t std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1},std::allocator<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1}>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZL23insert_loop_count_stackRN8Espresso3netEENK3$_0clES1_RNS_18sequential_builderEEUlNS_7cf_typeEmRNSt3__16vectorINS_7cf_headENS6_9allocatorIS8_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1},std::allocator<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1}>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::operator()(uint64_t a1, int *a2, unint64_t *a3, void *a4)
{
  *(void *)&long long v67 = *MEMORY[0x1E4F143B8];
  int v6 = *a2;
  unint64_t v7 = *a3;
  unint64_t v53 = *a3;
  if (v6 == 1)
  {
    v57[32] = 1;
    *(_DWORD *)&v57[28] = 0;
    memset(v57, 0, 20);
    *(void *)&v57[20] = 1;
    std::operator+<char>();
    unint64_t v8 = *(uint64_t **)(a1 + 16);
    std::string::basic_string[abi:ne180100]<0>(&__p, "fill");
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v66, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else {
      std::string v66 = __str;
    }
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    unint64_t v45 = 0;
    uint64_t v37 = &v43;
    LOBYTE(v38) = 0;
    uint64_t v43 = (std::string *)operator new(0x18uLL);
    unint64_t v44 = v43;
    unint64_t v45 = v43 + 1;
    unint64_t v44 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v45, (long long *)&v66, &v67, v43);
    Espresso::sequential_builder::add<Espresso::fill_params_t>(&v50, v8, (uint64_t)&__p, (uint64_t)&__str, (uint64_t)v57, v46, v47, (uint64_t *)&v43);
    if (v51) {
      nitro::nitro_function::nitro_function(v51);
    }
    uint64_t v37 = &v43;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v9 = *(void *)(a1 + 24);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
    uint64_t v10 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v9, &v53, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
    std::string::operator=(v10 + 1, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    unint64_t v7 = v53;
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 80);
  uint64_t v13 = *(void *)(v11 + 32);
  uint64_t v12 = *(void *)(v11 + 40);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(*(void *)(a1 + 32), v7, &v53)[3] = (v12 - v13) >> 4;
  Espresso::sequential_builder::add_layer_from_network(*(Espresso::sequential_builder **)(a1 + 16), *(Espresso::net **)(a1 + 8), v53);
  if (v6 == 3)
  {
    uint64_t v18 = a4[1];
    if (*(_DWORD *)(v18 - 16) != 1) {
      return;
    }
    uint64_t v19 = *(void *)(a1 + 24);
    float v20 = (unint64_t *)(v18 - 8);
    *(void *)int8x8_t v57 = v18 - 8;
    BOOL v21 = std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v19, (unint64_t *)(v18 - 8), (uint64_t)&std::piecewise_construct, (uint64_t **)v57);
    unint64_t v22 = v21 + 3;
    v57[0] = 1;
    if (*((char *)v21 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v57[8], (const std::string::value_type *)v21[3], v21[4]);
    }
    else
    {
      *(_OWORD *)&v57[8] = *v22;
      *(void *)&v57[24] = v21[5];
    }
    *(void *)&v57[32] = 1;
    Espresso::ssa_blob_name::repr(&__str, (uint64_t)v57);
    if ((v57[31] & 0x80000000) != 0) {
      operator delete(*(void **)&v57[8]);
    }
    v57[0] = 1;
    if (*((char *)v21 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v57[8], (const std::string::value_type *)v21[3], v21[4]);
    }
    else
    {
      *(_OWORD *)&v57[8] = *v22;
      *(void *)&v57[24] = v21[5];
    }
    *(void *)&v57[32] = 2;
    Espresso::ssa_blob_name::repr(&__p, (uint64_t)v57);
    if ((v57[31] & 0x80000000) != 0) {
      operator delete(*(void **)&v57[8]);
    }
    v57[0] = 1;
    if (*((char *)v21 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v57[8], (const std::string::value_type *)v21[3], v21[4]);
    }
    else
    {
      *(_OWORD *)&v57[8] = *v22;
      *(void *)&v57[24] = v21[5];
    }
    *(void *)&v57[32] = 3;
    Espresso::ssa_blob_name::repr(&v66, (uint64_t)v57);
    if ((v57[31] & 0x80000000) != 0) {
      operator delete(*(void **)&v57[8]);
    }
    unint64_t v23 = *(uint64_t **)(a1 + 16);
    std::string::basic_string[abi:ne180100]<0>(&v37, "phi_virtual");
    if (*((char *)v21 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v57, (const std::string::value_type *)v21[3], v21[4]);
    }
    else
    {
      *(_OWORD *)int8x8_t v57 = *v22;
      *(void *)&v57[16] = v21[5];
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v57[24], __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v57[24] = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(void *)uint64_t v58 = *((void *)&__str.__r_.__value_.__l + 2);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)&v58[8], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)&unsigned char v58[8] = __p;
    }
    int v34 = 0;
    unint64_t v35 = 0;
    uint64_t v36 = 0;
    v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
    v64.__r_.__value_.__s.__data_[8] = 0;
    int v34 = (std::string *)operator new(0x48uLL);
    unint64_t v35 = v34;
    uint64_t v36 = v34 + 3;
    unint64_t v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36, (long long *)v57, (long long *)&v59, v34);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v62, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
    }
    else {
      std::string v62 = v66;
    }
    memset(&v64, 0, sizeof(v64));
    unint64_t v31 = (std::__shared_weak_count *)&v64;
    LOBYTE(v32) = 0;
    v64.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v64.__r_.__value_.__l.__size_ = v64.__r_.__value_.__r.__words[0];
    v64.__r_.__value_.__r.__words[2] = v64.__r_.__value_.__r.__words[0] + 24;
    v64.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v64.__r_.__value_.__r.__words[2], (long long *)&v62, (long long *)&v63, (std::string *)v64.__r_.__value_.__l.__data_);
    Espresso::sequential_builder::add<Espresso::phi_virtual_params_t>((uint64_t *)&v31, v23, (uint64_t)&v37, (uint64_t)&v66, (uint64_t)&v54, (uint64_t)v34, (uint64_t)v35, (uint64_t *)&v64);
    if (v32) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v32);
    }
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    for (uint64_t i = 0; i != -72; i -= 24)
    {
      if ((char)v58[i + 31] < 0) {
        operator delete(*(void **)&v58[i + 8]);
      }
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(v37);
    }
    std::operator+<char>();
    init_and_push_stack(*(uint64_t **)(a1 + 16), (const std::string *)v57, (uint64_t)&v66, 0);
    uint64_t v25 = *(void *)(a1 + 40);
    uint64_t v37 = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(*(void *)(a1 + 32), *v20, v20)+ 3;
    int8x8_t v26 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v25, (unint64_t *)v37, (uint64_t)&std::piecewise_construct, (uint64_t **)&v37);
    std::string::operator=(v26 + 1, (const std::string *)v57);
    if ((v57[23] & 0x80000000) == 0) {
      goto LABEL_100;
    }
    uint64_t v27 = *(void **)v57;
    goto LABEL_99;
  }
  if (v6) {
    return;
  }
  uint64_t v14 = a4[1];
  if (v14 == *a4 || *(_DWORD *)(v14 - 16) != 1) {
    return;
  }
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)int8x8_t v57 = v14 - 8;
  uint64_t v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v15, (unint64_t *)(v14 - 8), (uint64_t)&std::piecewise_construct, (uint64_t **)v57);
  unint64_t v17 = v16 + 3;
  v57[0] = 1;
  if (*((char *)v16 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v57[8], (const std::string::value_type *)v16[3], v16[4]);
  }
  else
  {
    *(_OWORD *)&v57[8] = *v17;
    *(void *)&v57[24] = v16[5];
  }
  *(void *)&v57[32] = 1;
  Espresso::ssa_blob_name::repr(&__str, (uint64_t)v57);
  if ((v57[31] & 0x80000000) != 0) {
    operator delete(*(void **)&v57[8]);
  }
  v57[0] = 1;
  if (*((char *)v16 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v57[8], (const std::string::value_type *)v16[3], v16[4]);
  }
  else
  {
    *(_OWORD *)&v57[8] = *v17;
    *(void *)&v57[24] = v16[5];
  }
  *(void *)&v57[32] = 2;
  Espresso::ssa_blob_name::repr(&__p, (uint64_t)v57);
  if ((v57[31] & 0x80000000) != 0) {
    operator delete(*(void **)&v57[8]);
  }
  int64x2_t v28 = *(uint64_t **)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(&v66, "phi_virtual");
  if (*((char *)v16 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v57, (const std::string::value_type *)v16[3], v16[4]);
  }
  else
  {
    *(_OWORD *)int8x8_t v57 = *v17;
    *(void *)&v57[16] = v16[5];
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v57[24], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v57[24] = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)uint64_t v58 = *((void *)&__p.__r_.__value_.__l + 2);
  }
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v39 = 0;
  int v34 = (std::string *)&v37;
  LOBYTE(vstd::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)this + 35) = 0;
  uint64_t v37 = operator new(0x30uLL);
  uint64_t v38 = v37;
  unint64_t v39 = (char *)v37 + 48;
  uint64_t v38 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v39, (long long *)v57, (long long *)&v58[8], (std::string *)v37);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v64, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else {
    std::string v64 = __str;
  }
  int v34 = 0;
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  v62.__r_.__value_.__s.__data_[8] = 0;
  int v34 = (std::string *)operator new(0x18uLL);
  unint64_t v35 = v34;
  uint64_t v36 = v34 + 1;
  unint64_t v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36, (long long *)&v64, (long long *)&v65, v34);
  Espresso::sequential_builder::add<Espresso::phi_virtual_params_t>(&v40, v28, (uint64_t)&v66, (uint64_t)&__str, (uint64_t)&v42, (uint64_t)v37, (uint64_t)v38, (uint64_t *)&v34);
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  for (uint64_t j = 0; j != -48; j -= 24)
  {
    if ((char)v58[j + 7] < 0) {
      operator delete(*(void **)&v57[j + 24]);
    }
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  *(void *)&v57[16] = 897988541;
  v57[24] = 0;
  *(void *)&v58[4] = 0;
  *(void *)int8x8_t v57 = 0;
  *(void *)&v57[8] = 1065353216;
  uint8x8_t v30 = *(uint64_t **)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(&v66, "elementwise");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v62, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else {
    std::string v62 = __str;
  }
  memset(&v64, 0, sizeof(v64));
  unint64_t v31 = (std::__shared_weak_count *)&v64;
  LOBYTE(v32) = 0;
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v64.__r_.__value_.__l.__size_ = v64.__r_.__value_.__r.__words[0];
  v64.__r_.__value_.__r.__words[2] = v64.__r_.__value_.__r.__words[0] + 24;
  v64.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v64.__r_.__value_.__r.__words[2], (long long *)&v62, (long long *)&v63, (std::string *)v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v60, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v60 = __p;
  }
  unint64_t v31 = 0;
  uint8x8_t v32 = 0;
  uint64_t v33 = 0;
  BOOL v54 = &v31;
  LOBYTE(v55) = 0;
  unint64_t v31 = (std::__shared_weak_count *)operator new(0x18uLL);
  uint8x8_t v32 = (std::string *)v31;
  uint64_t v33 = (std::string *)&v31[1];
  uint8x8_t v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v33, (long long *)&v60, (long long *)&v61, (std::string *)v31);
  Espresso::sequential_builder::add<Espresso::elementwise_params>((uint64_t *)&v54, v30, (uint64_t)&v66, (uint64_t)&__p, (uint64_t)v57, (uint64_t)v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_, (uint64_t *)&v31);
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  unint64_t v56 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v27 = (void *)v62.__r_.__value_.__r.__words[0];
LABEL_99:
    operator delete(v27);
  }
LABEL_100:
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_192A4CC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,int a54,__int16 a55,char a56,char a57)
{
  *(void *)(v57 - 192) = v57 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 192));
  if (*(char *)(v57 - 137) < 0) {
    operator delete(*(void **)(v57 - 160));
  }
  if (*(char *)(v57 - 73) < 0) {
    operator delete(*(void **)(v57 - 96));
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  _Unwind_Resume(a1);
}

void init_and_push_stack(uint64_t *a1, const std::string *a2, uint64_t a3, int a4)
{
  *(void *)&long long v48 = *MEMORY[0x1E4F143B8];
  memset(&v38, 0, sizeof(v38));
  long long v40 = xmmword_192DC3600;
  uint64_t v41 = 0x100000001;
  char v39 = 1;
  int v42 = 0;
  std::string::operator=(&v38, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "store_global");
  std::operator+<char>();
  memset(v34, 0, sizeof(v34));
  memset(v33, 0, sizeof(v33));
  Espresso::sequential_builder::add<Espresso::store_global_params_t>(&v36, a1, (uint64_t)__p, (uint64_t)&v35, (uint64_t)&v38, 0, 0, v33);
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v35 = *(std::string *)a3;
  }
  if (a4)
  {
    memset(v31, 0, sizeof(v31));
    long long v30 = 0u;
    long long v29 = 0u;
    long long v28 = 0u;
    long long v27 = 0u;
    int v32 = 2;
    memset(__p, 0, sizeof(__p));
    if (*(char *)(a3 + 23) >= 0) {
      size_t v8 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v8 = *(void *)(a3 + 8);
    }
    uint64_t v9 = &v25;
    std::string::basic_string[abi:ne180100]((uint64_t)&v25, v8 + 4);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v10 = (const void *)a3;
      }
      else {
        uint64_t v10 = *(const void **)a3;
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "_sqz");
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    std::string v35 = v25;
    std::string::basic_string[abi:ne180100]<0>(&v25, "squeeze");
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v47 = *(std::string *)a3;
    }
    float v20 = 0;
    BOOL v21 = 0;
    unint64_t v22 = 0;
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
    v45.__r_.__value_.__s.__data_[8] = 0;
    float v20 = (std::string *)operator new(0x18uLL);
    BOOL v21 = v20;
    unint64_t v22 = v20 + 1;
    BOOL v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v22, (long long *)&v47, &v48, v20);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v45, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
    }
    else {
      std::string v45 = v35;
    }
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v43 = &v17;
    char v44 = 0;
    unint64_t v17 = (std::string *)operator new(0x18uLL);
    uint64_t v18 = v17;
    uint64_t v19 = v17 + 1;
    uint64_t v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v19, (long long *)&v45, (long long *)&v46, v17);
    Espresso::sequential_builder::add<Espresso::squeeze_params_t>(&v23, a1, (uint64_t)&v25, (uint64_t)&v35, (uint64_t)__p, (uint64_t)v20, (uint64_t)v21, (uint64_t *)&v17);
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    uint64_t v43 = &v17;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  memset(__p, 0, 24);
  *(_OWORD *)&unsigned char __p[28] = xmmword_192DC3600;
  *(void *)&__p[44] = 0x100000001;
  __p[24] = 1;
  LODWORD(v27) = 2;
  std::string::operator=((std::string *)__p, a2);
  std::string::basic_string[abi:ne180100]<0>(&v25, "store_global");
  std::operator+<char>();
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v45, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  }
  else {
    std::string v45 = v35;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v43 = &v12;
  char v44 = 0;
  uint64_t v12 = (std::string *)operator new(0x18uLL);
  uint64_t v13 = v12;
  uint64_t v14 = v12 + 1;
  uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, (long long *)&v45, (long long *)&v46, v12);
  memset(v11, 0, sizeof(v11));
  Espresso::sequential_builder::add<Espresso::store_global_params_t>(&v15, a1, (uint64_t)&v25, (uint64_t)&v47, (uint64_t)__p, (uint64_t)v12, (uint64_t)v13, v11);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  uint64_t v43 = (std::string **)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  uint64_t v43 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_192A4D4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  *(void *)(v58 - 128) = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 128));
  if (*(char *)(v58 - 73) < 0) {
    operator delete(*(void **)(v58 - 96));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v58 - 217) < 0) {
    operator delete(*(void **)(v58 - 240));
  }
  if (*(char *)(v58 - 177) < 0) {
    operator delete(*(void **)(v58 - 200));
  }
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1},std::allocator<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1}>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37E5E0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1},std::allocator<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1}>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE37E5E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1},std::allocator<insert_loop_count_stack(Espresso::net &)::$_0::operator() const(Espresso::net &,Espresso::sequential_builder &)::{lambda(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)#1}>,void ()(Espresso::cf_type,unsigned long,std::vector<Espresso::cf_head> &)>::~__func()
{
}

__n128 std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0,std::allocator<insert_loop_count_stack(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE379938;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0,std::allocator<insert_loop_count_stack(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE379938;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<insert_loop_count_stack(Espresso::net &)::$_0,std::allocator<insert_loop_count_stack(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::~__func()
{
}

void Espresso::pass_prepare_gradient_builder::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_prepare_gradient_builder::~pass_prepare_gradient_builder(Espresso::pass_prepare_gradient_builder *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void Espresso::pass_rename_phi_io::run_on_network(Espresso::pass_rename_phi_io *this@<X0>, Espresso::net *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v245 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (const void *)*((void *)this + 1);
  if (v5
  {
    unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v209 = v7;
    unint64_t v8 = v6[1];
  }
  else
  {
    int v209 = 0;
    unint64_t v8 = 0;
  }
  uint64_t v9 = (std::__shared_weak_count *)operator new(0x48uLL);
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387700;
  v9[2].__shared_weak_owners_ = 0;
  uint64_t v207 = v9 + 1;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE357730;
  *(_OWORD *)&v9[1].__shared_owners_ = 0u;
  uint64_t p_shared_owners = (uint64_t)&v9[1].__shared_owners_;
  v9[2].std::__shared_count = 0u;
  int v210 = v9;
  LODWORD(v9[2].__shared_weak_owners_) = 1065353216;
  Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>((uint64_t)a2);
  uint64_t v10 = (uint64_t)Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a2);
  uint64_t v218 = (void *)v10;
  long long v238 = 0u;
  long long v239 = 0u;
  float v240 = 1.0;
  int v235 = 0;
  int v236 = 0;
  unint64_t v237 = 0;
  unint64_t v219 = v8;
  uint64_t v13 = *((void *)a2 + 4);
  uint64_t v12 = *((void *)a2 + 5);
  if (v8 >= (v12 - v13) >> 4)
  {
    *(_OWORD *)std::string __p = 0uLL;
    long long v233 = 0uLL;
    int v234 = 1065353216;
    goto LABEL_246;
  }
  do
  {
    uint64_t v14 = *(void *)(v13 + 16 * v8);
    uint64_t v15 = (void *)(v14 + 40);
    int v16 = *(char *)(v14 + 63);
    if (v16 < 0)
    {
      if (*(void *)(v14 + 48) != 11) {
        goto LABEL_229;
      }
      uint64_t v15 = (void *)*v15;
    }
    else if (v16 != 11)
    {
      goto LABEL_229;
    }
    unint64_t v17 = (void *)*v15;
    uint64_t v18 = *(void *)((char *)v15 + 3);
    if (v17 == (void *)0x747269765F696870 && v18 == 0x6C6175747269765FLL)
    {
      *(void *)std::string buf = &v219;
      float v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 96, &v219, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      Espresso::ssa_blob_name::ssa_blob_name((uint64_t)__p, v20[3]);
      if (!LOBYTE(__p[0])) {
        goto LABEL_64;
      }
      *(void *)std::string buf = &v219;
      uint64_t v10 = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 56, &v219, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      uint64_t v21 = *(void *)(v10 + 24);
      uint64_t v22 = *(void *)(v10 + 32);
      if (v21 == v22) {
        goto LABEL_226;
      }
      char v23 = 1;
      while (1)
      {
        uint64_t v10 = Espresso::ssa_blob_name::ssa_blob_name((uint64_t)buf, v21);
        uint64_t v24 = HIBYTE(v233);
        uint64_t v25 = v233;
        if (buf[0]) {
          break;
        }
        uint64_t v30 = *(unsigned __int8 *)(v21 + 23);
        size_t v27 = *(void *)(v21 + 8);
        if ((v30 & 0x80u) == 0) {
          uint64_t v31 = *(unsigned __int8 *)(v21 + 23);
        }
        else {
          uint64_t v31 = *(void *)(v21 + 8);
        }
        if (v233 >= 0) {
          uint64_t v25 = HIBYTE(v233);
        }
        if (v31 != v25) {
          goto LABEL_55;
        }
        if (v233 >= 0) {
          unint64_t v11 = (unint64_t)&__p[1];
        }
        else {
          unint64_t v11 = (unint64_t)__p[1];
        }
        if ((v30 & 0x80) != 0)
        {
          uint64_t v33 = *(const void **)v21;
LABEL_54:
          uint64_t v10 = memcmp(v33, (const void *)v11, v27);
          if (!v10)
          {
LABEL_56:
            char v34 = 0;
            goto LABEL_57;
          }
          goto LABEL_55;
        }
        if (!*(unsigned char *)(v21 + 23)) {
          goto LABEL_56;
        }
        uint64_t v32 = 0;
        while (*(unsigned __int8 *)(v21 + v32) == *(unsigned __int8 *)(v11 + v32))
        {
          if (v30 == ++v32) {
            goto LABEL_56;
          }
        }
LABEL_55:
        char v23 = 0;
        char v34 = 1;
LABEL_57:
        if (SHIBYTE(v243) < 0) {
          operator delete(*(void **)&buf[8]);
        }
        v21 += 24;
        if (v21 == v22) {
          char v35 = 1;
        }
        else {
          char v35 = v34;
        }
        if (v35)
        {
          if ((v23 & 1) == 0)
          {
LABEL_64:
            uint64_t v36 = v236;
            if ((unint64_t)v236 >= v237)
            {
              std::string v38 = v235;
              uint64_t v39 = (v236 - v235) >> 3;
              unint64_t v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 61) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v41 = v237 - (void)v235;
              if ((uint64_t)(v237 - (void)v235) >> 2 > v40) {
                unint64_t v40 = v41 >> 2;
              }
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v42 = v40;
              }
              if (v42) {
                unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v42);
              }
              else {
                uint64_t v43 = 0;
              }
              char v44 = (char *)(v42 + 8 * v39);
              *(void *)char v44 = v219;
              uint64_t v37 = v44 + 8;
              while (v36 != v38)
              {
                uint64_t v45 = *((void *)v36 - 1);
                v36 -= 8;
                *((void *)v44 - 1) = v45;
                v44 -= 8;
              }
              int v235 = v44;
              unint64_t v237 = v42 + 8 * v43;
              if (v38) {
                operator delete(v38);
              }
            }
            else
            {
              *(void *)int v236 = v219;
              uint64_t v37 = v36 + 8;
            }
            int v236 = v37;
            memset(buf, 0, sizeof(buf));
            *(void *)&long long v243 = 0;
            unint64_t v46 = v219;
            uint64_t v47 = v218[13];
            if (0xAAAAAAAAAAAAAAABLL * ((v218[14] - v47) >> 3) <= v219) {
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            }
            long long v48 = (int **)(v47 + 24 * v219);
            id v49 = *v48;
            uint64_t v50 = v48[1];
            if (*v48 != v50)
            {
              uint64_t v51 = 0;
              while (1)
              {
                unint64_t v52 = *v49;
                uint64_t v53 = v218[19];
                if (v52 >= (v218[20] - v53) >> 3) {
                  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                }
                unint64_t v54 = *(void *)(v53 + 8 * v52);
                uint64_t v55 = *((void *)a2 + 4);
                if (v54 >= (*((void *)a2 + 5) - v55) >> 4) {
                  goto LABEL_112;
                }
                uint64_t v56 = *(void *)(v55 + 16 * v54);
                uint64_t v57 = (void *)(v56 + 40);
                int v58 = *(char *)(v56 + 63);
                if (v58 < 0)
                {
                  if (*(void *)(v56 + 48) == 11)
                  {
                    uint64_t v57 = (void *)*v57;
LABEL_90:
                    uint64_t v59 = (void *)*v57;
                    uint64_t v60 = *(void *)((char *)v57 + 3);
                    if (v59 == (void *)0x747269765F696870 && v60 == 0x6C6175747269765FLL)
                    {
                      if ((unint64_t)v51 >= (unint64_t)v243)
                      {
                        uint64_t v63 = *(unint64_t **)buf;
                        uint64_t v64 = ((uint64_t)v51 - *(void *)buf) >> 3;
                        unint64_t v65 = v64 + 1;
                        if ((unint64_t)(v64 + 1) >> 61) {
                          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v66 = v243 - *(void *)buf;
                        if ((uint64_t)(v243 - *(void *)buf) >> 2 > v65) {
                          unint64_t v65 = v66 >> 2;
                        }
                        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
                          unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v67 = v65;
                        }
                        if (v67)
                        {
                          unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v67);
                          uint64_t v63 = *(unint64_t **)buf;
                          uint64_t v51 = *(unint64_t **)&buf[8];
                        }
                        else
                        {
                          uint64_t v68 = 0;
                        }
                        uint64_t v69 = (unint64_t *)(v67 + 8 * v64);
                        unint64_t *v69 = v54;
                        std::string v62 = v69 + 1;
                        while (v51 != v63)
                        {
                          unint64_t v70 = *--v51;
                          *--uint64_t v69 = v70;
                        }
                        *(void *)std::string buf = v69;
                        *(void *)&uint8_t buf[8] = v62;
                        *(void *)&long long v243 = v67 + 8 * v68;
                        if (v63) {
                          operator delete(v63);
                        }
                      }
                      else
                      {
                        *uint64_t v51 = v54;
                        std::string v62 = v51 + 1;
                      }
                      *(void *)&uint8_t buf[8] = v62;
                      uint64_t v51 = v62;
                    }
                  }
                }
                else if (v58 == 11)
                {
                  goto LABEL_90;
                }
LABEL_112:
                if (++v49 == v50)
                {
                  unint64_t v46 = v219;
                  goto LABEL_115;
                }
              }
            }
            uint64_t v51 = 0;
LABEL_115:
            uint64_t v71 = v218[10];
            if (0xAAAAAAAAAAAAAAABLL * ((v218[11] - v71) >> 3) <= v46) {
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            }
            unint64_t v72 = (int **)(v71 + 24 * v46);
            uint64_t v73 = *v72;
            unint64_t v74 = (unint64_t)v72[1];
            if (*v72 != (int *)v74)
            {
              while (2)
              {
                unint64_t v75 = *v73;
                uint64_t v76 = v218[22];
                if (0xAAAAAAAAAAAAAAABLL * ((v218[23] - v76) >> 3) <= v75) {
                  std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                }
                unint64_t v77 = (unint64_t **)(v76 + 24 * (int)v75);
                int v78 = *v77;
                uint64_t v79 = v77[1];
LABEL_119:
                if (v78 == v79)
                {
                  if (++v73 == (int *)v74)
                  {
                    unint64_t v46 = v219;
                    goto LABEL_150;
                  }
                  continue;
                }
                break;
              }
              unint64_t v80 = *v78;
              uint64_t v81 = *(void *)(*((void *)a2 + 4) + 16 * *v78);
              uint64_t v82 = (void *)(v81 + 40);
              int v83 = *(char *)(v81 + 63);
              if (v83 < 0)
              {
                if (*(void *)(v81 + 48) != 11)
                {
LABEL_147:
                  ++v78;
                  goto LABEL_119;
                }
                uint64_t v82 = (void *)*v82;
              }
              else if (v83 != 11)
              {
                goto LABEL_147;
              }
              uint64_t v84 = (void *)*v82;
              uint64_t v85 = *(void *)((char *)v82 + 3);
              if (v84 == (void *)0x747269765F696870 && v85 == 0x6C6175747269765FLL)
              {
                if ((unint64_t)v51 >= (unint64_t)v243)
                {
                  uint64_t v88 = *(unint64_t **)buf;
                  uint64_t v89 = ((uint64_t)v51 - *(void *)buf) >> 3;
                  unint64_t v90 = v89 + 1;
                  if ((unint64_t)(v89 + 1) >> 61) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v91 = v243 - *(void *)buf;
                  if ((uint64_t)(v243 - *(void *)buf) >> 2 > v90) {
                    unint64_t v90 = v91 >> 2;
                  }
                  if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v92 = v90;
                  }
                  if (v92)
                  {
                    unint64_t v92 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v92);
                    uint64_t v88 = *(unint64_t **)buf;
                    uint64_t v51 = *(unint64_t **)&buf[8];
                  }
                  else
                  {
                    uint64_t v93 = 0;
                  }
                  unint64_t v94 = (unint64_t *)(v92 + 8 * v89);
                  *unint64_t v94 = v80;
                  __int16 v87 = v94 + 1;
                  while (v51 != v88)
                  {
                    unint64_t v95 = *--v51;
                    *--unint64_t v94 = v95;
                  }
                  *(void *)std::string buf = v94;
                  *(void *)&uint8_t buf[8] = v87;
                  *(void *)&long long v243 = v92 + 8 * v93;
                  if (v88) {
                    operator delete(v88);
                  }
                }
                else
                {
                  *uint64_t v51 = v80;
                  __int16 v87 = v51 + 1;
                }
                *(void *)&uint8_t buf[8] = v87;
                uint64_t v51 = v87;
              }
              goto LABEL_147;
            }
LABEL_150:
            unint64_t v96 = *((void *)&v238 + 1);
            if (*((void *)&v238 + 1))
            {
              uint8x8_t v97 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v238 + 8));
              v97.i16[0] = vaddlv_u8(v97);
              if (v97.u32[0] > 1uLL)
              {
                unint64_t v74 = v46;
                if (v46 >= *((void *)&v238 + 1)) {
                  unint64_t v74 = v46 % *((void *)&v238 + 1);
                }
              }
              else
              {
                unint64_t v74 = (*((void *)&v238 + 1) - 1) & v46;
              }
              unsigned int v98 = *(void ***)(v238 + 8 * v74);
              if (v98)
              {
                unsigned __int16 v99 = *v98;
                if (*v98)
                {
                  do
                  {
                    unint64_t v100 = v99[1];
                    if (v100 == v46)
                    {
                      if (v99[2] == v46) {
                        goto LABEL_222;
                      }
                    }
                    else
                    {
                      if (v97.u32[0] > 1uLL)
                      {
                        if (v100 >= *((void *)&v238 + 1)) {
                          v100 %= *((void *)&v238 + 1);
                        }
                      }
                      else
                      {
                        v100 &= *((void *)&v238 + 1) - 1;
                      }
                      if (v100 != v74) {
                        break;
                      }
                    }
                    unsigned __int16 v99 = (void *)*v99;
                  }
                  while (v99);
                }
              }
            }
            unsigned __int16 v99 = operator new(0x30uLL);
            *unsigned __int16 v99 = 0;
            v99[1] = v46;
            v99[2] = v46;
            v99[3] = 0;
            v99[4] = 0;
            v99[5] = 0;
            float v101 = (float)(unint64_t)(*((void *)&v239 + 1) + 1);
            if (v96 && (float)(v240 * (float)v96) >= v101)
            {
              unint64_t v46 = v74;
              goto LABEL_212;
            }
            BOOL v102 = (v96 & (v96 - 1)) != 0;
            if (v96 < 3) {
              BOOL v102 = 1;
            }
            unint64_t v103 = v102 | (2 * v96);
            unint64_t v104 = vcvtps_u32_f32(v101 / v240);
            if (v103 <= v104) {
              int8x8_t prime = (int8x8_t)v104;
            }
            else {
              int8x8_t prime = (int8x8_t)v103;
            }
            if (*(void *)&prime == 1)
            {
              int8x8_t prime = (int8x8_t)2;
            }
            else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
            {
              int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
              unint64_t v96 = *((void *)&v238 + 1);
            }
            if (*(void *)&prime <= v96)
            {
              if (*(void *)&prime < v96)
              {
                unint64_t v112 = vcvtps_u32_f32((float)*((unint64_t *)&v239 + 1) / v240);
                if (v96 < 3
                  || (uint8x8_t v113 = (uint8x8_t)vcnt_s8((int8x8_t)v96), v113.i16[0] = vaddlv_u8(v113), v113.u32[0] > 1uLL))
                {
                  unint64_t v112 = std::__next_prime(v112);
                }
                else
                {
                  uint64_t v114 = 1 << -(char)__clz(v112 - 1);
                  if (v112 >= 2) {
                    unint64_t v112 = v114;
                  }
                }
                if (*(void *)&prime <= v112) {
                  int8x8_t prime = (int8x8_t)v112;
                }
                if (*(void *)&prime >= v96)
                {
                  unint64_t v96 = *((void *)&v238 + 1);
                }
                else
                {
                  if (prime) {
                    goto LABEL_179;
                  }
                  uint64_t v120 = (void *)v238;
                  *(void *)&long long v238 = 0;
                  if (v120) {
                    operator delete(v120);
                  }
                  unint64_t v96 = 0;
                  *((void *)&v238 + 1) = 0;
                }
              }
            }
            else
            {
LABEL_179:
              if (*(void *)&prime >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v106 = operator new(8 * *(void *)&prime);
              uint64_t v107 = (void *)v238;
              *(void *)&long long v238 = v106;
              if (v107) {
                operator delete(v107);
              }
              uint64_t v108 = 0;
              *((int8x8_t *)&v238 + 1) = prime;
              do
                *(void *)(v238 + 8 * v108++) = 0;
              while (*(void *)&prime != v108);
              int v109 = (void **)v239;
              if ((void)v239)
              {
                unint64_t v110 = *(void *)(v239 + 8);
                uint8x8_t v111 = (uint8x8_t)vcnt_s8(prime);
                v111.i16[0] = vaddlv_u8(v111);
                if (v111.u32[0] > 1uLL)
                {
                  if (v110 >= *(void *)&prime) {
                    v110 %= *(void *)&prime;
                  }
                }
                else
                {
                  v110 &= *(void *)&prime - 1;
                }
                *(void *)(v238 + 8 * v110) = &v239;
                for (uint64_t i = *v109; i; v110 = v116)
                {
                  unint64_t v116 = i[1];
                  if (v111.u32[0] > 1uLL)
                  {
                    if (v116 >= *(void *)&prime) {
                      v116 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v116 &= *(void *)&prime - 1;
                  }
                  if (v116 != v110)
                  {
                    if (!*(void *)(v238 + 8 * v116))
                    {
                      *(void *)(v238 + 8 * v116) = v109;
                      goto LABEL_204;
                    }
                    *int v109 = (void *)*i;
                    *uint64_t i = **(void **)(v238 + 8 * v116);
                    **(void **)(v238 + 8 * v116) = i;
                    uint64_t i = v109;
                  }
                  unint64_t v116 = v110;
LABEL_204:
                  int v109 = (void **)i;
                  uint64_t i = (void *)*i;
                }
              }
              unint64_t v96 = (unint64_t)prime;
            }
            if ((v96 & (v96 - 1)) != 0)
            {
              if (v46 >= v96) {
                v46 %= v96;
              }
            }
            else
            {
              v46 &= v96 - 1;
            }
LABEL_212:
            uint64_t v117 = v238;
            BOOL v118 = *(void **)(v238 + 8 * v46);
            if (v118)
            {
              *unsigned __int16 v99 = *v118;
              goto LABEL_220;
            }
            *unsigned __int16 v99 = v239;
            *(void *)&long long v239 = v99;
            *(void *)(v117 + 8 * v46) = &v239;
            if (*v99)
            {
              unint64_t v119 = *(void *)(*v99 + 8);
              if ((v96 & (v96 - 1)) != 0)
              {
                if (v119 >= v96) {
                  v119 %= v96;
                }
              }
              else
              {
                v119 &= v96 - 1;
              }
              BOOL v118 = (void *)(v238 + 8 * v119);
LABEL_220:
              *BOOL v118 = v99;
            }
            ++*((void *)&v239 + 1);
LABEL_222:
            uint64_t v10 = (uint64_t)(v99 + 3);
            unint64_t v11 = *(void *)buf;
            if (v99 + 3 != (void *)buf)
            {
              uint64_t v10 = (uint64_t)std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((void *)v10, *(char **)buf, *(char **)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3);
              unint64_t v11 = *(void *)buf;
            }
            if (v11)
            {
              *(void *)&uint8_t buf[8] = v11;
              operator delete((void *)v11);
            }
          }
LABEL_226:
          if (SHIBYTE(v233) < 0) {
            operator delete(__p[1]);
          }
          unint64_t v8 = v219;
          uint64_t v13 = *((void *)a2 + 4);
          uint64_t v12 = *((void *)a2 + 5);
          goto LABEL_229;
        }
      }
      uint64_t v26 = HIBYTE(v243);
      size_t v27 = v243;
      if (v243 >= 0) {
        uint64_t v28 = HIBYTE(v243);
      }
      else {
        uint64_t v28 = v243;
      }
      if (v233 < 0) {
        uint64_t v24 = v233;
      }
      if (v28 != v24) {
        goto LABEL_55;
      }
      if (v233 >= 0) {
        unint64_t v11 = (unint64_t)&__p[1];
      }
      else {
        unint64_t v11 = (unint64_t)__p[1];
      }
      if ((HIBYTE(v243) & 0x80) == 0)
      {
        if (!HIBYTE(v243)) {
          goto LABEL_56;
        }
        long long v29 = &buf[8];
        while (*v29 == *(unsigned __int8 *)v11)
        {
          ++v29;
          ++v11;
          if (!--v26) {
            goto LABEL_56;
          }
        }
        goto LABEL_55;
      }
      uint64_t v33 = *(const void **)&buf[8];
      goto LABEL_54;
    }
LABEL_229:
    unint64_t v219 = ++v8;
  }
  while (v8 < (v12 - v13) >> 4);
  std::string::const_iterator v121 = (void *)v239;
  *(_OWORD *)std::string __p = 0u;
  long long v233 = 0u;
  int v234 = 1065353216;
  if ((void)v239)
  {
    uint64_t v122 = 0;
    do
    {
      unint64_t v123 = v121[2];
      uint64_t v10 = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>((uint64_t)__p[0], (unint64_t)__p[1], v123);
      if (!v10) {
        uint64_t v10 = (uint64_t)dfs(&v238, (uint64_t)__p, v123, v122++);
      }
      std::string::const_iterator v121 = (void *)*v121;
    }
    while (v121);
  }
LABEL_246:
  uint64_t v229 = 0;
  uint64_t v230 = 0;
  uint64_t v231 = 0;
  int v124 = (unint64_t *)v235;
  unint64_t v125 = (unint64_t *)v236;
  if (v235 != v236)
  {
    do
    {
      unint64_t v126 = *v124;
      uint64_t v10 = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>((uint64_t)__p[0], (unint64_t)__p[1], *v124);
      if (!v10) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v127 = *(void *)(v10 + 24);
      unint64_t v11 = v127 + 1;
      uint64_t v128 = v229;
      if (v127 + 1 > 0xAAAAAAAAAAAAAAABLL * ((v230 - v229) >> 3))
      {
        std::vector<std::vector<unsigned long>>::resize(&v229, v11);
        uint64_t v128 = v229;
      }
      uint64_t v129 = (uint64_t *)(v128 + 24 * v127);
      int v131 = (unint64_t **)(v129 + 1);
      unint64_t v130 = (unint64_t *)v129[1];
      unint64_t v132 = v129[2];
      if ((unint64_t)v130 >= v132)
      {
        uint64_t v10 = *v129;
        uint64_t v134 = ((uint64_t)v130 - *v129) >> 3;
        unint64_t v135 = v134 + 1;
        if ((unint64_t)(v134 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v136 = v132 - v10;
        if (v136 >> 2 > v135) {
          unint64_t v135 = v136 >> 2;
        }
        BOOL v137 = (unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v137) {
          unint64_t v138 = v135;
        }
        if (v138)
        {
          unint64_t v138 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v138);
          unint64_t v130 = *v131;
          uint64_t v10 = *v129;
        }
        else
        {
          unint64_t v11 = 0;
        }
        uint64_t v139 = (unint64_t *)(v138 + 8 * v134);
        *uint64_t v139 = v126;
        uint64_t v133 = v139 + 1;
        while (v130 != (unint64_t *)v10)
        {
          unint64_t v140 = *--v130;
          *--uint64_t v139 = v140;
        }
        *uint64_t v129 = (uint64_t)v139;
        char *v131 = v133;
        void v129[2] = v138 + 8 * v11;
        if (v10) {
          operator delete((void *)v10);
        }
      }
      else
      {
        *unint64_t v130 = v126;
        uint64_t v133 = v130 + 1;
      }
      char *v131 = v133;
      ++v124;
    }
    while (v124 != v125);
  }
  char v141 = Espresso::espresso_os_log_subsystem((Espresso *)v10, (const char *)v11);
  if (os_log_type_enabled(v141, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_1920CB000, v141, OS_LOG_TYPE_INFO, "pass_rename_phi_io: components:\n", buf, 2u);
  }

  if (v230 != v229)
  {
    unint64_t v144 = 0;
    do
    {
      std::string v145 = Espresso::espresso_os_log_subsystem(v142, v143);
      if (os_log_type_enabled(v145, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        *(void *)&uint8_t buf[4] = v144;
        _os_log_impl(&dword_1920CB000, v145, OS_LOG_TYPE_INFO, "%lu:\t", buf, 0xCu);
      }

      if (0xAAAAAAAAAAAAAAABLL * ((v230 - v229) >> 3) <= v144) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      std::string::size_type v148 = (uint64_t **)(v229 + 24 * v144);
      uint64_t v149 = *v148;
      uint64_t v150 = v148[1];
      while (v149 != v150)
      {
        uint64_t v151 = *v149;
        unint64_t v152 = Espresso::espresso_os_log_subsystem(v146, v147);
        if (os_log_type_enabled(v152, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 134217984;
          *(void *)&uint8_t buf[4] = v151;
          _os_log_impl(&dword_1920CB000, v152, OS_LOG_TYPE_INFO, "%lu,\t", buf, 0xCu);
        }

        ++v149;
      }
      char v153 = Espresso::espresso_os_log_subsystem(v146, v147);
      if (os_log_type_enabled(v153, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_1920CB000, v153, OS_LOG_TYPE_INFO, "\n", buf, 2u);
      }

      ++v144;
      uint64_t v154 = v229;
    }
    while (v144 < 0xAAAAAAAAAAAAAAABLL * ((v230 - v229) >> 3));
    if (v230 != v229)
    {
      uint64_t v155 = 0;
      BOOL v214 = (char *)a2 + 136;
      int v156 = (char *)a2 + 56;
      std::string v216 = (char *)a2 + 96;
      uint64_t v217 = (uint64_t **)((char *)a2 + 184);
      do
      {
        uint64_t v211 = v155;
        uint64_t v157 = (uint64_t **)(v154 + 24 * v155);
        int v226 = 0;
        int v227 = 0;
        uint64_t v228 = 0;
        *(_OWORD *)std::string buf = 0u;
        long long v243 = 0u;
        int v244 = 1065353216;
        uint64_t v158 = *v157;
        int v161 = v157[1];
        uint64_t v159 = v157 + 1;
        int v160 = v161;
        while (v158 != v160)
        {
          uint64_t v162 = *v158;
          uint64_t v163 = v218[13] + 24 * *v158;
          uint64_t v164 = *(int **)v163;
          int v165 = *(int **)(v163 + 8);
          while (v164 != v165)
            check_and_add<int>(*v164++, (uint64_t)&v226, buf);
          uint64_t v166 = v218[10] + 24 * v162;
          uint64_t v167 = *(int **)v166;
          uint64_t v168 = *(int **)(v166 + 8);
          while (v167 != v168)
            check_and_add<int>(*v167++, (uint64_t)&v226, buf);
          ++v158;
        }
        unint64_t v225 = 0;
        unint64_t v225 = *(void *)(*v159 - 8);
        unint64_t v219 = (unint64_t)&v225;
        uint64_t v169 = v214;
        std::string v170 = v218 + 2;
        long long v171 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v216, &v225, (uint64_t)&std::piecewise_construct, (uint64_t **)&v219)[3];
        if (*((char *)v171 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v224, *(const std::string::value_type **)v171, *((void *)v171 + 1));
        }
        else
        {
          long long v172 = *v171;
          v224.__r_.__value_.__r.__words[2] = *((void *)v171 + 2);
          *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v172;
        }
        uint64_t v173 = (int *)v226;
        char v213 = v227;
        if (v226 == v227) {
          goto LABEL_360;
        }
        uint64_t v174 = 0;
        do
        {
          uint64_t v175 = v218[7] + 24 * *v173;
          if (*(char *)(v175 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v223, *(const std::string::value_type **)v175, *(void *)(v175 + 8));
          }
          else
          {
            long long v176 = *(_OWORD *)v175;
            v223.__r_.__value_.__r.__words[2] = *(void *)(v175 + 16);
            *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v176;
          }
          LOBYTE(v219) = 1;
          if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v220, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
          }
          else {
            std::string v220 = v224;
          }
          uint64_t v221 = v174;
          Espresso::ssa_blob_name::repr(&__str, (uint64_t)&v219);
          uint64_t v215 = v174;
          if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v220.__r_.__value_.__l.__data_);
          }
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v170, (unsigned __int8 *)&__str))
          {
            p_str = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            unint64_t v219 = (unint64_t)p_str;
            Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("blob %s already exists in the network", &v219);
          }
          unint64_t v219 = (unint64_t)&v223;
          int v177 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v170, (unsigned __int8 *)&v223, (uint64_t)&std::piecewise_construct, (long long **)&v219)+ 10);
          std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>(v170, (unsigned __int8 *)&v223);
          unint64_t v219 = (unint64_t)&__str;
          uint64_t v178 = v177;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v170, (unsigned __int8 *)&__str, (uint64_t)&std::piecewise_construct, (long long **)&v219)+ 10) = v177;
          std::string::operator=((std::string *)(v218[7] + 24 * v177), &__str);
          unint64_t v219 = (unint64_t)&v223;
          long long v179 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v169, (unsigned __int8 *)&v223, (long long **)&v219);
          unint64_t v219 = (unint64_t)&__str;
          uint64_t v180 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v169, (unsigned __int8 *)&__str, (long long **)&v219);
          uint64_t v182 = *((void *)v179 + 5);
          uint64_t v181 = *((void *)v179 + 6);
          if (v181) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v181 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v183 = (std::__shared_weak_count *)*((void *)v180 + 6);
          *((void *)v180 + 5) = v182;
          *((void *)v180 + 6) = v181;
          if (v183) {
            nitro::nitro_function::nitro_function(v183);
          }
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__erase_unique<std::string>(v169, (unsigned __int8 *)&v223);
          std::string::size_type v184 = (unint64_t **)(v218[22] + 24 * (int)v178);
          int v185 = *v184;
          std::string v186 = v184[1];
LABEL_311:
          if (v185 != v186)
          {
            unint64_t v241 = *v185;
            unint64_t v219 = (unint64_t)&v241;
            uint64_t v187 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v156, &v241, (uint64_t)&std::piecewise_construct, (uint64_t **)&v219)[3];
            unint64_t v219 = (unint64_t)&v241;
            uint64_t v188 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v156, &v241, (uint64_t)&std::piecewise_construct, (uint64_t **)&v219)[4];
            while (1)
            {
              if (v187 == v188)
              {
                ++v185;
                goto LABEL_311;
              }
              uint64_t v189 = *(unsigned __int8 *)(v187 + 23);
              if ((v189 & 0x80u) == 0) {
                uint64_t v190 = *(unsigned __int8 *)(v187 + 23);
              }
              else {
                uint64_t v190 = *(void *)(v187 + 8);
              }
              std::string::size_type size = HIBYTE(v223.__r_.__value_.__r.__words[2]);
              if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type size = v223.__r_.__value_.__l.__size_;
              }
              if (v190 == size)
              {
                if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v192 = &v223;
                }
                else {
                  int v192 = (std::string *)v223.__r_.__value_.__r.__words[0];
                }
                if ((v189 & 0x80) != 0)
                {
                  if (memcmp(*(const void **)v187, v192, *(void *)(v187 + 8))) {
                    goto LABEL_331;
                  }
LABEL_330:
                  std::string::operator=((std::string *)v187, &__str);
                  goto LABEL_331;
                }
                if (!*(unsigned char *)(v187 + 23)) {
                  goto LABEL_330;
                }
                uint64_t v193 = 0;
                while (*(unsigned __int8 *)(v187 + v193) == v192->__r_.__value_.__s.__data_[v193])
                {
                  if (v189 == ++v193) {
                    goto LABEL_330;
                  }
                }
              }
LABEL_331:
              v187 += 24;
            }
          }
          unint64_t v241 = *(void *)(v218[19] + 8 * v178);
          unint64_t v219 = (unint64_t)&v241;
          uint64_t v169 = v214;
          std::string v170 = v218 + 2;
          uint64_t v194 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v216, &v241, (uint64_t)&std::piecewise_construct, (uint64_t **)&v219)[3];
          unint64_t v219 = (unint64_t)&v241;
          uint64_t v195 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v216, &v241, (uint64_t)&std::piecewise_construct, (uint64_t **)&v219)[4];
          while (v194 != v195)
          {
            uint64_t v196 = *(unsigned __int8 *)(v194 + 23);
            if ((v196 & 0x80u) == 0) {
              uint64_t v197 = *(unsigned __int8 *)(v194 + 23);
            }
            else {
              uint64_t v197 = *(void *)(v194 + 8);
            }
            std::string::size_type v198 = HIBYTE(v223.__r_.__value_.__r.__words[2]);
            if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v198 = v223.__r_.__value_.__l.__size_;
            }
            if (v197 == v198)
            {
              if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                char v199 = &v223;
              }
              else {
                char v199 = (std::string *)v223.__r_.__value_.__r.__words[0];
              }
              if ((v196 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v194, v199, *(void *)(v194 + 8))) {
                  goto LABEL_352;
                }
LABEL_351:
                std::string::operator=((std::string *)v194, &__str);
                goto LABEL_352;
              }
              if (!*(unsigned char *)(v194 + 23)) {
                goto LABEL_351;
              }
              uint64_t v200 = 0;
              while (*(unsigned __int8 *)(v194 + v200) == v199->__r_.__value_.__s.__data_[v200])
              {
                if (v196 == ++v200) {
                  goto LABEL_351;
                }
              }
            }
LABEL_352:
            v194 += 24;
          }
          unint64_t v219 = (unint64_t)&v223;
          v201 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v217, &v223, (long long **)&v219);
          unint64_t v219 = (unint64_t)&__str;
          uint64_t v202 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v217, &__str, (long long **)&v219);
          long long v203 = *(_OWORD *)(v201 + 56);
          long long v204 = *(_OWORD *)(v201 + 72);
          *((void *)v202 + 11) = *((void *)v201 + 11);
          *(_OWORD *)(v202 + 72) = v204;
          *(_OWORD *)(v202 + 56) = v203;
          if (v202 != v201) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v202 + 96, *((char **)v201 + 12), *((void *)v201 + 13), (uint64_t)(*((void *)v201 + 13) - *((void *)v201 + 12)) >> 2);
          }
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__erase_unique<std::string>(v217, &v223);
          unint64_t v219 = (unint64_t)&v223;
          int v205 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(p_shared_owners, (uint64_t)&v223, (uint64_t)&std::piecewise_construct, (long long **)&v219);
          std::string::operator=((std::string *)(v205 + 5), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v223.__r_.__value_.__l.__data_);
          }
          uint64_t v174 = v215 + 1;
          ++v173;
        }
        while (v173 != v213);
LABEL_360:
        if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v224.__r_.__value_.__l.__data_);
        }
        std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)buf);
        if (v226)
        {
          int v227 = (int *)v226;
          operator delete(v226);
        }
        uint64_t v155 = v211 + 1;
        uint64_t v154 = v229;
      }
      while (v211 + 1 < 0xAAAAAAAAAAAAAAABLL * ((v230 - v229) >> 3));
    }
  }
  atomic_fetch_add_explicit(&v210->__shared_owners_, 1uLL, memory_order_relaxed);
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 8) = v207;
  *(void *)(a3 + 16) = v210;
  atomic_fetch_add_explicit(&v210->__shared_owners_, 1uLL, memory_order_relaxed);
  nitro::nitro_function::nitro_function(v210);
  *(void *)std::string buf = &v229;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)__p);
  if (v235) {
    operator delete(v235);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&v238);
  nitro::nitro_function::nitro_function(v210);
  if (v209) {
    nitro::nitro_function::nitro_function(v209);
  }
}

void sub_192A4EDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,void *>>>::operator()[abi:ne180100](1, v53);
  uint64_t v56 = *(void **)(v54 - 144);
  if (v56)
  {
    *(void *)(v54 - 136) = v56;
    operator delete(v56);
  }
  if (a53 < 0) {
    operator delete(__p);
  }
  uint64_t v57 = *(void **)(v54 - 232);
  if (v57)
  {
    *(void *)(v54 - 224) = v57;
    operator delete(v57);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table(v54 - 208);
  nitro::nitro_function::nitro_function(a12);
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  unint64_t v5 = *(void **)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  __n128 result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= a2) {
            v7 %= a2;
          }
        }
        else
        {
          v7 &= a2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *dfs(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v18 = a3;
  __n128 result = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a2, a3, &v18);
  result[3] = a4;
  int8x8_t v9 = (int8x8_t)a1[1];
  if (!*(void *)&v9) {
    goto LABEL_17;
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v11 = a3;
    if (*(void *)&v9 <= a3) {
      unint64_t v11 = a3 % *(void *)&v9;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v9 - 1) & a3;
  }
  uint64_t v12 = *(void **)(*a1 + 8 * v11);
  if (!v12 || (uint64_t v13 = (void *)*v12) == 0) {
LABEL_17:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  while (1)
  {
    unint64_t v14 = v13[1];
    if (v14 == a3) {
      break;
    }
    if (v10.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v9) {
        v14 %= *(void *)&v9;
      }
    }
    else
    {
      v14 &= *(void *)&v9 - 1;
    }
    if (v14 != v11) {
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v13 = (void *)*v13;
    if (!v13) {
      goto LABEL_17;
    }
  }
  if (v13[2] != a3) {
    goto LABEL_16;
  }
  uint64_t v15 = (unint64_t *)v13[3];
  int v16 = (unint64_t *)v13[4];
  while (v15 != v16)
  {
    unint64_t v17 = *v15;
    __n128 result = std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>(*(void *)a2, *(void *)(a2 + 8), *v15);
    if (!result) {
      __n128 result = (void *)dfs(a1, a2, v17, a4);
    }
    ++v15;
  }
  return result;
}

void check_and_add<int>(int a1, uint64_t a2, void *a3)
{
  if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a3, a1))
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)a3, a1, a1);
    unint64_t v7 = *(int **)(a2 + 8);
    unint64_t v6 = *(void *)(a2 + 16);
    if ((unint64_t)v7 >= v6)
    {
      int8x8_t v9 = *(int **)a2;
      uint64_t v10 = ((uint64_t)v7 - *(void *)a2) >> 2;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = v6 - (void)v9;
      if (v12 >> 1 > v11) {
        unint64_t v11 = v12 >> 1;
      }
      BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v13) {
        unint64_t v14 = v11;
      }
      if (v14)
      {
        unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v14);
        int8x8_t v9 = *(int **)a2;
        unint64_t v7 = *(int **)(a2 + 8);
      }
      else
      {
        uint64_t v15 = 0;
      }
      int v16 = (int *)(v14 + 4 * v10);
      unint64_t v17 = v14 + 4 * v15;
      *int v16 = a1;
      unint64_t v8 = v16 + 1;
      while (v7 != v9)
      {
        int v18 = *--v7;
        *--int v16 = v18;
      }
      *(void *)a2 = v16;
      *(void *)(a2 + 8) = v8;
      *(void *)(a2 + 16) = v17;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *unint64_t v7 = a1;
      unint64_t v8 = v7 + 1;
    }
    *(void *)(a2 + 8) = v8;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint8x8_t v3 = (void *)*v2;
      unint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint8x8_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_rename_phi_io>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::analysis_rename_phi_io>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387700;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::analysis_rename_phi_io>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::pass_rename_phi_io::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_rename_phi_io::~pass_rename_phi_io(Espresso::pass_rename_phi_io *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void Espresso::pass_stack_blobs::run_on_network(Espresso::pass_stack_blobs *this, Espresso::net *a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  Espresso::run_pass_on_network<Espresso::pass_update_absolute_indexes_after_transform>((uint64_t)a2);
  uint64_t v55 = (char *)Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a2);
  unint64_t v4 = (const void *)*((void *)this + 1);
  uint64_t v54 = this;
  if (v4)
  {
    if (v5)
    {
      uint64_t v6 = *((void *)this + 2);
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
  long long v68 = 0u;
  long long v69 = 0u;
  int v70 = 1065353216;
  unint64_t v7 = v5[6];
  unint64_t v8 = v5[7];
  if (v7 < v8)
  {
    int8x8_t v9 = v55 + 16;
    do
    {
      uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((void *)a2 + 7, v7);
      if (!v10) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v12 = (unsigned __int8 *)v10[3];
      unint64_t v11 = (unsigned __int8 *)v10[4];
      if (v12 != v11)
      {
        do
        {
          if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v9, v12))
          {
            BOOL v13 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v9, v12);
            if (!v13) {
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
            LODWORD(v63) = *((_DWORD *)v13 + 10);
            int v14 = v63;
            if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v5 + 1, v63))
            {
              if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v68, v14))
              {
                uint64_t v15 = std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v68, v14, &v63);
                ++v15[3];
              }
              else
              {
                std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v68, v14, &v63)[3] = 1;
              }
            }
          }
          v12 += 24;
        }
        while (v12 != v11);
        unint64_t v8 = v5[7];
      }
      ++v7;
    }
    while (v7 < v8);
  }
  memset(v66, 0, sizeof(v66));
  int v67 = 1065353216;
  long long v56 = 0u;
  long long v57 = 0u;
  int v58 = 1065353216;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  int v62 = 1065353216;
  std::deque<unsigned long>::push_back(&v63, v5 + 6);
  unint64_t v16 = v5[6];
  if (v16 < v5[7])
  {
    unint64_t v17 = v55 + 16;
    do
    {
      unint64_t v18 = *(void *)(*(void *)(*((void *)&v63 + 1)
                                  + (((unint64_t)(*((void *)&v65 + 1) + v65 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((*((void *)&v65 + 1) + v65 - 1) & 0x1FF));
      uint64_t v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((void *)a2 + 7, v16);
      if (!v19) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      float v20 = (unsigned __int8 *)v19[3];
      uint64_t v21 = (unsigned __int8 *)v19[4];
      while (v20 != v21)
      {
        if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v17, v20))
        {
          uint64_t v22 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v17, v20);
          if (!v22) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          LODWORD(v59) = *((_DWORD *)v22 + 10);
          int v23 = (int)v59;
          if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v68, (int)v59))
          {
            if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v66, v23)
              || v18 < std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)v66, v23, &v59)[3])
            {
              std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)v66, v23, &v59)[3] = v18;
            }
            if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v68, v23)
              && std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v68, v23, &v59)[3])
            {
              uint64_t v24 = std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v68, v23, &v59);
              --v24[3];
            }
            if (!std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((float *)&v68, v23, &v59)[3])
            {
              std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)&v60, v23, v23);
              uint64_t v25 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v68, v23);
              if (v25)
              {
                unint64_t v26 = *((void *)&v68 + 1);
                unint64_t v27 = v25[1];
                uint8x8_t v28 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v68 + 8));
                v28.i16[0] = vaddlv_u8(v28);
                if (v28.u32[0] > 1uLL)
                {
                  if (v27 >= *((void *)&v68 + 1)) {
                    v27 %= *((void *)&v68 + 1);
                  }
                }
                else
                {
                  v27 &= *((void *)&v68 + 1) - 1;
                }
                long long v29 = *(uint64_t **)(v68 + 8 * v27);
                do
                {
                  uint64_t v30 = v29;
                  long long v29 = (uint64_t *)*v29;
                }
                while (v29 != v25);
                if (v30 == (uint64_t *)&v69) {
                  goto LABEL_53;
                }
                unint64_t v31 = v30[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v31 >= *((void *)&v68 + 1)) {
                    v31 %= *((void *)&v68 + 1);
                  }
                }
                else
                {
                  v31 &= *((void *)&v68 + 1) - 1;
                }
                if (v31 != v27)
                {
LABEL_53:
                  if (!*v25) {
                    goto LABEL_54;
                  }
                  unint64_t v32 = *(void *)(*v25 + 8);
                  if (v28.u32[0] > 1uLL)
                  {
                    if (v32 >= *((void *)&v68 + 1)) {
                      v32 %= *((void *)&v68 + 1);
                    }
                  }
                  else
                  {
                    v32 &= *((void *)&v68 + 1) - 1;
                  }
                  if (v32 != v27) {
LABEL_54:
                  }
                    *(void *)(v68 + 8 * v27) = 0;
                }
                uint64_t v33 = *v25;
                if (*v25)
                {
                  unint64_t v34 = *(void *)(v33 + 8);
                  if (v28.u32[0] > 1uLL)
                  {
                    if (v34 >= v26) {
                      v34 %= v26;
                    }
                  }
                  else
                  {
                    v34 &= v26 - 1;
                  }
                  if (v34 != v27)
                  {
                    *(void *)(v68 + 8 * v34) = v30;
                    uint64_t v33 = *v25;
                  }
                }
                *uint64_t v30 = v33;
                --*((void *)&v69 + 1);
                operator delete(v25);
              }
            }
          }
        }
        v20 += 24;
      }
      uint64_t v35 = *((void *)a2 + 4);
      if (v16 >= (*((void *)a2 + 5) - v35) >> 4) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      unsigned int v36 = Espresso::str_to_type((std::string *)(*(void *)(v35 + 16 * v16) + 40));
      if (v36 > 1)
      {
        switch(v36)
        {
          case 0xFFFFFFFF:
          case 4u:
            break;
          case 2u:
            --*((void *)&v65 + 1);
            std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](&v63);
            check_zero_count_blobs_and_mark_covering_block(v18, v66, &v60, (float *)&v56);
            uint64_t v59 = (void *)(v16 + 1);
            std::deque<unsigned long>::push_back(&v63, &v59);
            break;
          case 3u:
            --*((void *)&v65 + 1);
            std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](&v63);
            check_zero_count_blobs_and_mark_covering_block(v18, v66, &v60, (float *)&v56);
            break;
          default:
            uint64_t v52 = *(void *)(v35 + 16 * v16);
            uint64_t v53 = (void *)(v52 + 40);
            if (*(char *)(v52 + 63) < 0) {
              uint64_t v53 = (void *)*v53;
            }
            uint64_t v59 = v53;
            Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("backprop of control flow instruction %s", &v59);
        }
      }
      else
      {
        uint64_t v59 = (void *)(v16 + 1);
        std::deque<unsigned long>::push_back(&v63, &v59);
      }
      ++v16;
    }
    while (v16 < v5[7]);
  }
  check_zero_count_blobs_and_mark_covering_block(*(void *)(*(void *)(*((void *)&v63 + 1)+ (((unint64_t)(*((void *)&v65 + 1) + v65 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*((void *)&v65 + 1) + v65 - 1) & 0x1FF)), v66, &v60, (float *)&v56);
  --*((void *)&v65 + 1);
  std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](&v63);
  if (!*((void *)&v61 + 1))
  {
    if (!*((void *)&v65 + 1))
    {
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v60);
      std::deque<unsigned long>::~deque[abi:ne180100]((uint64_t)&v63);
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v66);
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v68);
      long long v63 = 0u;
      long long v64 = 0u;
      LODWORD(v65) = 1065353216;
      for (uint64_t i = (uint64_t *)v57; i; uint64_t i = (uint64_t *)*i)
      {
        std::string v38 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)&v63, i[3], i + 3);
        uint64_t v39 = v38;
        unint64_t v40 = (char *)v38[4];
        unint64_t v41 = v38[5];
        if ((unint64_t)v40 >= v41)
        {
          uint64_t v43 = (char *)v38[3];
          uint64_t v44 = (v40 - v43) >> 2;
          if ((unint64_t)(v44 + 1) >> 62) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v45 = v41 - (void)v43;
          unint64_t v46 = (uint64_t)(v41 - (void)v43) >> 1;
          if (v46 <= v44 + 1) {
            unint64_t v46 = v44 + 1;
          }
          if (v45 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v46;
          }
          if (v47)
          {
            unint64_t v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v47);
            uint64_t v43 = (char *)v39[3];
            unint64_t v40 = (char *)v39[4];
          }
          else
          {
            uint64_t v48 = 0;
          }
          id v49 = (_DWORD *)(v47 + 4 * v44);
          *id v49 = *((_DWORD *)i + 4);
          unint64_t v42 = v49 + 1;
          while (v40 != v43)
          {
            int v50 = *((_DWORD *)v40 - 1);
            v40 -= 4;
            *--id v49 = v50;
          }
          void v39[3] = v49;
          void v39[4] = v42;
          v39[5] = v47 + 4 * v48;
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v40 = *((_DWORD *)i + 4);
          unint64_t v42 = v40 + 4;
        }
        void v39[4] = v42;
      }
      uint64_t v71 = 0;
      uint64_t v51 = operator new(0x30uLL);
      *uint64_t v51 = &unk_1EE37C220;
      v51[1] = &v63;
      uint64_t v51[2] = v55;
      v51[3] = v54;
      v51[4] = a2;
      v51[5] = &v56;
      uint64_t v71 = v51;
      Espresso::transform_network_inplace((uint64_t)a2);
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("stack is not cleared at the end of bwd pass");
  }
  Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("%lu blobs are not fully covered", *((uint64_t *)&v61 + 1));
}

void sub_192A4FC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__function::__value_func<void ()(Espresso::net &,Espresso::sequential_builder &)>::~__value_func[abi:ne180100]((void *)(v27 - 128));
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&a27);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a15);
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(float *a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x20uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v18 = operator new(8 * *(void *)&prime);
          uint64_t v19 = *(void **)a1;
          *(void *)a1 = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          uint64_t v21 = (void *)*((void *)a1 + 2);
          if (v21)
          {
            unint64_t v22 = v21[1];
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
            uint64_t v27 = (void *)*v21;
            if (*v21)
            {
              do
              {
                unint64_t v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(void *)&prime) {
                    v28 %= *(void *)&prime;
                  }
                }
                else
                {
                  v28 &= *(void *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v28))
                  {
                    *(void *)(*(void *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  void *v21 = *v27;
                  void *v27 = **(void **)(*(void *)a1 + 8 * v28);
                  **(void **)(*(void *)a1 + 8 * v28) = v27;
                  uint64_t v27 = v21;
                }
                unint64_t v28 = v22;
LABEL_55:
                uint64_t v21 = v27;
                uint64_t v27 = (void *)*v27;
                unint64_t v22 = v28;
              }
              while (v27);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v33 = *(void **)a1;
        *(void *)a1 = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  long long v29 = *(void **)a1;
  uint64_t v30 = *(void **)(*(void *)a1 + 8 * v3);
  if (v30)
  {
    *uint64_t v10 = *v30;
LABEL_72:
    *uint64_t v30 = v10;
    goto LABEL_73;
  }
  *uint64_t v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    uint64_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_192A50134(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t check_zero_count_blobs_and_mark_covering_block(unint64_t a1, void *a2, void *a3, float *a4)
{
  long long v30 = 0u;
  long long v31 = 0u;
  int v32 = 1065353216;
  unint64_t v4 = a3 + 2;
  unint64_t v5 = (uint64_t *)a3[2];
  if (!v5) {
    return std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v30);
  }
  do
  {
    unint64_t v10 = *((int *)v5 + 4);
    int v29 = *((_DWORD *)v5 + 4);
    int8x8_t v11 = (int8x8_t)a2[1];
    if (!*(void *)&v11) {
      goto LABEL_53;
    }
    uint8x8_t v12 = (uint8x8_t)vcnt_s8(v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v13 = v10;
      if (*(void *)&v11 <= v10) {
        unint64_t v13 = v10 % *(void *)&v11;
      }
    }
    else
    {
      unint64_t v13 = (*(void *)&v11 - 1) & v10;
    }
    BOOL v14 = *(uint64_t ***)(*a2 + 8 * v13);
    if (!v14 || (unint64_t v15 = *v14) == 0) {
LABEL_53:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    while (1)
    {
      unint64_t v16 = v15[1];
      if (v16 == v10) {
        break;
      }
      if (v12.u32[0] > 1uLL)
      {
        if (v16 >= *(void *)&v11) {
          v16 %= *(void *)&v11;
        }
      }
      else
      {
        v16 &= *(void *)&v11 - 1;
      }
      if (v16 != v13) {
        goto LABEL_53;
      }
LABEL_17:
      unint64_t v15 = (uint64_t *)*v15;
      if (!v15) {
        goto LABEL_53;
      }
    }
    if (*((_DWORD *)v15 + 4) != v10) {
      goto LABEL_17;
    }
    if (v15[3] >= a1)
    {
      std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a4, v10, &v29)[3] = a1;
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)&v30, v10, v10);
    }
    unint64_t v5 = (uint64_t *)*v5;
  }
  while (v5);
  for (uint64_t i = (uint64_t *)v31; i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v18 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a3, *((_DWORD *)i + 4));
    if (v18)
    {
      int8x8_t v19 = (int8x8_t)a3[1];
      unint64_t v20 = v18[1];
      uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        if (v20 >= *(void *)&v19) {
          v20 %= *(void *)&v19;
        }
      }
      else
      {
        v20 &= *(void *)&v19 - 1;
      }
      unint64_t v22 = *(uint64_t **)(*a3 + 8 * v20);
      do
      {
        uint8x8_t v23 = v22;
        unint64_t v22 = (uint64_t *)*v22;
      }
      while (v22 != v18);
      if (v23 == v4) {
        goto LABEL_41;
      }
      unint64_t v24 = v23[1];
      if (v21.u32[0] > 1uLL)
      {
        if (v24 >= *(void *)&v19) {
          v24 %= *(void *)&v19;
        }
      }
      else
      {
        v24 &= *(void *)&v19 - 1;
      }
      if (v24 != v20)
      {
LABEL_41:
        if (!*v18) {
          goto LABEL_42;
        }
        unint64_t v25 = *(void *)(*v18 + 8);
        if (v21.u32[0] > 1uLL)
        {
          if (v25 >= *(void *)&v19) {
            v25 %= *(void *)&v19;
          }
        }
        else
        {
          v25 &= *(void *)&v19 - 1;
        }
        if (v25 != v20) {
LABEL_42:
        }
          *(void *)(*a3 + 8 * v20) = 0;
      }
      uint64_t v26 = *v18;
      if (*v18)
      {
        unint64_t v27 = *(void *)(v26 + 8);
        if (v21.u32[0] > 1uLL)
        {
          if (v27 >= *(void *)&v19) {
            v27 %= *(void *)&v19;
          }
        }
        else
        {
          v27 &= *(void *)&v19 - 1;
        }
        if (v27 != v20)
        {
          *(void *)(*a3 + 8 * v27) = v23;
          uint64_t v26 = *v18;
        }
      }
      uint64_t *v23 = v26;
      --a3[3];
      operator delete(v18);
    }
  }
  return std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v30);
}

void sub_192A503F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int8x8_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint8x8_t v12 = a1 + 2;
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      unint64_t v34 = (void *)*a1;
      *a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int8x8_t v19 = operator new(8 * *(void *)&prime);
  unint64_t v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  unint64_t v22 = (void *)*v12;
  if (*v12)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v23) = v12;
    unint64_t v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*a1 + 8 * v29))
          {
            *(void *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *unint64_t v22 = *v28;
          *unint64_t v28 = **(void **)(*a1 + 8 * v29);
          **(void **)(*a1 + 8 * v29) = v28;
          unint64_t v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        unint64_t v22 = v28;
        unint64_t v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint64_t v30 = *a1;
  long long v31 = *(void **)(*a1 + 8 * v5);
  if (v31)
  {
    *uint64_t i = *v31;
LABEL_72:
    *long long v31 = i;
    goto LABEL_73;
  }
  *uint64_t i = *v12;
  *uint8x8_t v12 = i;
  *(void *)(v30 + 8 * v5) = v12;
  if (*i)
  {
    unint64_t v32 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    long long v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_192A507E8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso16pass_stack_blobs14run_on_networkERNS_3netEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  memset(v59, 0, sizeof(v59));
  int v60 = 1065353216;
  unint64_t v58 = 0;
  if (*(void *)(a2 + 40) != *(void *)(a2 + 32))
  {
    unint64_t v6 = 0;
    uint64_t v52 = (void *)(v3 + 24);
    do
    {
      unint64_t v7 = *(uint64_t **)(a1 + 8);
      int8x8_t v8 = (int8x8_t)v7[1];
      if (v8)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v10 = v6;
          if (v6 >= *(void *)&v8) {
            unint64_t v10 = v6 % *(void *)&v8;
          }
        }
        else
        {
          unint64_t v10 = (*(void *)&v8 - 1) & v6;
        }
        unint64_t v11 = *(void **)(*v7 + 8 * v10);
        if (v11)
        {
          for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
          {
            unint64_t v13 = i[1];
            if (v13 == v6)
            {
              if (i[2] == v6)
              {
                unint64_t v41 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<int>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<int>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<int>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v7, v6, &v58);
                unint64_t v42 = (int *)v41[3];
                uint64_t v43 = (int *)v41[4];
                while (v42 != v43)
                {
                  int v44 = *v42;
                  uint64_t v45 = *(void *)(*(void *)(a1 + 16) + 56);
                  stack_global_name((std::string *)&__v, *v42);
                  std::to_string(&v53, v44);
                  unint64_t v46 = std::string::insert(&v53, 0, "popped_blob_");
                  long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
                  v57.__end_cap_.__value_ = (std::pair<std::string, std::string> *)v46->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v57.__begin_ = v47;
                  v46->__r_.__value_.__l.__size_ = 0;
                  v46->__r_.__value_.__r.__words[2] = 0;
                  v46->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v53.__r_.__value_.__l.__data_);
                  }
                  BOOL v48 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v52, v44) != 0;
                  Espresso::pop_stack(a3, (const std::string *)&__v, (uint64_t)&v57, v48);
                  v53.__r_.__value_.__r.__words[0] = v45 + 24 * v44;
                  id v49 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v59, (uint64_t)v53.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v53);
                  std::string::operator=((std::string *)(v49 + 5), (const std::string *)&v57);
                  if (SHIBYTE(v57.__end_cap_.__value_) < 0) {
                    operator delete(v57.__begin_);
                  }
                  if (SHIBYTE(__v.__end_) < 0) {
                    operator delete(__v.__first_);
                  }
                  ++v42;
                }
                break;
              }
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v13 >= *(void *)&v8) {
                  v13 %= *(void *)&v8;
                }
              }
              else
              {
                v13 &= *(void *)&v8 - 1;
              }
              if (v13 != v10) {
                break;
              }
            }
          }
        }
      }
      memset(&v57, 0, sizeof(v57));
      __v.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&v58;
      float v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a2 + 56, &v58, (uint64_t)&std::piecewise_construct, (uint64_t **)&__v);
      BOOL v15 = (std::pair<std::string, std::string> *)v14[3];
      unint64_t v16 = (std::pair<std::string, std::string> *)v14[4];
      while (v15 != v16)
      {
        if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v59, (uint64_t)v15))
        {
          __v.__first_ = v15;
          unint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v59, (uint64_t)v15, (uint64_t)&std::piecewise_construct, (long long **)&__v);
          std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,std::string&,0>(&v53, (long long *)v15, (long long *)(v17 + 5));
          std::vector<std::pair<std::string, std::string>>::pointer end = v57.__end_;
          if (v57.__end_ >= v57.__end_cap_.__value_)
          {
            unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_ - (char *)v57.__begin_) >> 4);
            unint64_t v22 = v21 + 1;
            if (v21 + 1 > 0x555555555555555) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 4) > v22) {
              unint64_t v22 = 0x5555555555555556 * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 4);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v23 = 0x555555555555555;
            }
            else {
              unint64_t v23 = v22;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)&v57.__end_cap_;
            if (v23) {
              unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::profiler_t::event_t>>(v23);
            }
            else {
              uint64_t v24 = 0;
            }
            unint64_t v25 = v23 + 48 * v21;
            __v.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v23;
            __v.__begin_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v25;
            __v.__end_cap_.__value_ = (std::pair<std::string, std::string> *)(v23 + 48 * v24);
            long long v26 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
            *(void *)(v25 + 16) = *((void *)&v53.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v25 = v26;
            memset(&v53, 0, sizeof(v53));
            long long v27 = __p;
            *(void *)(v25 + 40) = v55;
            *(_OWORD *)(v25 + 24) = v27;
            uint64_t v55 = 0;
            long long __p = 0uLL;
            __v.__end_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)(v25 + 48);
            std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(&v57, &__v);
            unint64_t v28 = v57.__end_;
            std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
            v57.__end_ = v28;
            if (SHIBYTE(v55) < 0) {
              operator delete((void *)__p);
            }
          }
          else
          {
            long long v19 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
            v57.__end_->first.__r_.__value_.__r.__words[2] = v53.__r_.__value_.__r.__words[2];
            *(_OWORD *)&end->first.__r_.__value_.__l.__data_ = v19;
            memset(&v53, 0, sizeof(v53));
            std::string::size_type v20 = (std::string::size_type)v55;
            *(_OWORD *)&end->second.__r_.__value_.__l.__data_ = __p;
            end->second.__r_.__value_.__r.__words[2] = v20;
            uint64_t v55 = 0;
            long long __p = 0uLL;
            v57.__end_ = end + 1;
          }
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v53.__r_.__value_.__l.__data_);
          }
        }
        BOOL v15 = (std::pair<std::string, std::string> *)((char *)v15 + 24);
      }
      Espresso::sequential_builder::add_layer_from_network((uint64_t)a3, a2, v58, (const std::string **)&v57);
      uint64_t v29 = *(void *)(a1 + 32);
      v53.__r_.__value_.__r.__words[0] = ((uint64_t)(*(void *)(v29 + 40) - *(void *)(v29 + 32)) >> 4) - 1;
      uint64_t v30 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v29 + 96, v53.__r_.__value_.__r.__words[0], &v53);
      unint64_t v32 = (std::pair<std::string, std::string> *)v30[3];
      long long v31 = (std::pair<std::string, std::string> *)v30[4];
      while (v32 != v31)
      {
        if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(*(void *)(a1 + 16) + 16), (unsigned __int8 *)v32))goto LABEL_51; {
        uint64_t v33 = *(void *)(a1 + 16) + 16;
        }
        __v.__first_ = v32;
        int v34 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, (unsigned __int8 *)v32, (uint64_t)&std::piecewise_construct, (long long **)&__v)+ 10);
        if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(*(void **)(a1 + 40), v34))goto LABEL_51; {
        int v35 = v34;
        }
        uint64_t v36 = *(void *)(*(void *)(a1 + 16) + 56);
        stack_global_name((std::string *)&__v, v35);
        uint64_t v37 = (long long *)(v36 + 24 * v35);
        uint64_t v38 = *(void *)(a1 + 32) + 136;
        long long v61 = v37;
        uint64_t v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v38, (unsigned __int8 *)v37, &v61);
        Espresso::abstract_blob_container::shape((char *)&v53, *((void *)v39 + 5));
        if (HIDWORD(v53.__r_.__value_.__r.__words[2]) == -1)
        {
          if (LODWORD(v53.__r_.__value_.__r.__words[2]) == 1)
          {
LABEL_46:
            int v40 = 0;
            goto LABEL_47;
          }
        }
        else if (SHIDWORD(v53.__r_.__value_.__r.__words[2]) < 5)
        {
          goto LABEL_46;
        }
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v52, v35, v35);
        int v40 = 1;
LABEL_47:
        init_and_push_stack(a3, (const std::string *)&__v, (uint64_t)v37, v40);
        if (v55)
        {
          long long v56 = v55;
          operator delete(v55);
        }
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
LABEL_51:
        unint64_t v32 = (std::pair<std::string, std::string> *)((char *)v32 + 24);
      }
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      unint64_t v6 = v58 + 1;
      unint64_t v58 = v6;
    }
    while (v6 < (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v59);
}

void sub_192A50DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34)
{
}

void stack_global_name(std::string *a1, int __val)
{
  std::to_string(&v4, __val);
  uint64_t v3 = std::string::insert(&v4, 0, "stack_blob_");
  *a1 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_192A50F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pop_stack(uint64_t *a1, const std::string *a2, uint64_t a3, int a4)
{
  *(void *)&long long v53 = *MEMORY[0x1E4F143B8];
  memset(&v41, 0, sizeof(v41));
  long long v43 = xmmword_192DCA4C0;
  unint64_t v44 = 0xFFFFFFFF00000001;
  char v42 = 1;
  int v45 = 3;
  std::string::operator=(&v41, a2);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v40 = *(std::string *)a3;
  }
  if (a4)
  {
    if (*(char *)(a3 + 23) >= 0) {
      size_t v7 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v7 = *(void *)(a3 + 8);
    }
    int8x8_t v8 = v21;
    std::string::basic_string[abi:ne180100]((uint64_t)v21, v7 + 6);
    if (SBYTE7(v22) < 0) {
      int8x8_t v8 = (void **)v21[0];
    }
    if (v7)
    {
      if (*(char *)(a3 + 23) >= 0) {
        uint8x8_t v9 = (const void *)a3;
      }
      else {
        uint8x8_t v9 = *(const void **)a3;
      }
      memmove(v8, v9, v7);
    }
    strcpy((char *)v8 + v7, "_sqzed");
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)v21;
    v40.__r_.__value_.__r.__words[2] = v22;
  }
  std::string::basic_string[abi:ne180100]<0>(v21, "load_global");
  std::operator+<char>();
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v52, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else {
    std::string v52 = v40;
  }
  uint64_t v30 = 0;
  long long v31 = 0;
  unint64_t v32 = 0;
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  v18.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v30 = (std::string *)operator new(0x18uLL);
  long long v31 = v30;
  unint64_t v32 = v30 + 1;
  long long v31 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v32, (long long *)&v52, &v53, v30);
  Espresso::sequential_builder::add<Espresso::load_global_params_t>(&v38, a1, (uint64_t)v21, (uint64_t)__p, (uint64_t)&v41, v33, v34, (uint64_t *)&v30);
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v22) < 0)
  {
    operator delete(v21[0]);
    if (!a4) {
      goto LABEL_49;
    }
  }
  else if (!a4)
  {
    goto LABEL_49;
  }
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  *(_OWORD *)unint64_t v21 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "expand_dims");
  std::operator+<char>();
  unint64_t v10 = std::string::append(&v18, "_unsqz");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v50, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else {
    std::string v50 = v40;
  }
  BOOL v15 = 0;
  unint64_t v16 = 0;
  unint64_t v17 = 0;
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  v48.__r_.__value_.__s.__data_[8] = 0;
  BOOL v15 = (std::string *)operator new(0x18uLL);
  unint64_t v16 = v15;
  unint64_t v17 = v15 + 1;
  unint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v17, (long long *)&v50, (long long *)&v51, v15);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v48 = *(std::string *)a3;
  }
  uint8x8_t v12 = 0;
  unint64_t v13 = 0;
  float v14 = 0;
  unint64_t v46 = &v12;
  char v47 = 0;
  uint8x8_t v12 = (std::string *)operator new(0x18uLL);
  unint64_t v13 = v12;
  float v14 = v12 + 1;
  unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, (long long *)&v48, (long long *)&v49, v12);
  Espresso::sequential_builder::add<Espresso::expand_dims_params_t>(&v19, a1, (uint64_t)__p, (uint64_t)&v52, (uint64_t)v21, (uint64_t)v15, (uint64_t)v16, (uint64_t *)&v12);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  unint64_t v46 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (v37 < 0) {
    operator delete(__p[0]);
  }
LABEL_49:
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
}

void sub_192A513E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  *(void *)(v63 - 176) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v63 - 176));
  if (*(char *)(v63 - 121) < 0) {
    operator delete(*(void **)(v63 - 144));
  }
  if (*(char *)(v63 - 89) < 0) {
    operator delete(*(void **)(v63 - 112));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (*(char *)(v63 - 225) < 0) {
    operator delete(*(void **)(v63 - 248));
  }
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,std::string&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  unint64_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_192A515CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  begiuint64_t n = this->__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer end = this->__end_;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v4 = __v->__begin_;
  if (end == this->__begin_)
  {
    long long v5 = __v->__begin_;
  }
  else
  {
    do
    {
      long long v5 = v4 - 1;
      long long v6 = *(_OWORD *)&end[-1].first.__r_.__value_.__l.__data_;
      v4[-1].first.__r_.__value_.__r.__words[2] = end[-1].first.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v4[-1].first.__r_.__value_.__l.__data_ = v6;
      end[-1].first.__r_.__value_.__l.__size_ = 0;
      end[-1].first.__r_.__value_.__r.__words[2] = 0;
      end[-1].first.__r_.__value_.__r.__words[0] = 0;
      long long v7 = *(_OWORD *)&end[-1].second.__r_.__value_.__l.__data_;
      v4[-1].second.__r_.__value_.__r.__words[2] = end[-1].second.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v4[-1].second.__r_.__value_.__l.__data_ = v7;
      end[-1].second.__r_.__value_.__l.__size_ = 0;
      end[-1].second.__r_.__value_.__r.__words[2] = 0;
      end[-1].second.__r_.__value_.__r.__words[0] = 0;
      --v4;
      --end;
    }
    while (end != begin);
  }
  __v->__begin_ = v5;
  int8x8_t v8 = this->__begin_;
  this->__begin_ = v5;
  __v->__begin_ = v8;
  uint8x8_t v9 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v9;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  begiuint64_t n = this->__begin_;
  for (std::__split_buffer<std::pair<std::string, std::string>>::pointer i = this->__end_; i != begin; std::__split_buffer<std::pair<std::string, std::string>>::pointer i = this->__end_)
  {
    this->__end_ = i - 1;
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)&i[-1]);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

__n128 std::__function::__func<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37C220;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE37C220;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_stack_blobs::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::~__func()
{
}

void Espresso::pass_stack_blobs::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::blob_container_array::__copy_from_host(Espresso::blob_container_array *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  long long __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)(v6 + 8), v6 + 24, 4uLL);
  v13[0] = 0;
  v13[1] = 0;
  int v14 = 0;
  long long v7 = (int *)__p;
  uint64_t v8 = v17 - (unsigned char *)__p;
  if (v17 != __p)
  {
    uint64_t v9 = v8 >> 2;
    if ((unint64_t)(v8 >> 2) <= 1) {
      uint64_t v9 = 1;
    }
    unint64_t v10 = v13;
    do
    {
      int v11 = *v7++;
      *v10++ = v11;
      --v9;
    }
    while (v9);
  }
  int v15 = (unint64_t)v8 >> 2;
  memset(v12, 0, sizeof(v12));
  Espresso::blob_container_array::scatter(a1, a2, (uint64_t)a3, (int *)v13, v12);
  if (__p)
  {
    unint64_t v17 = __p;
    operator delete(__p);
  }
}

void sub_192A518E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::blob_container_array::scatter(Espresso::blob_container_array *a1, uint64_t a2, uint64_t a3, int *a4, void *a5)
{
  if (a4[5]) {
    int v9 = *a4;
  }
  else {
    int v9 = 1;
  }
  unint64_t v10 = v9;
  uint64_t v11 = a5[1] - *a5;
  if (v11)
  {
    if (v11 >> 2 > v10) {
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,unsigned long const&>("blob_container_array_scatter: Invalid number of value blobs %ld != %ld", v10, v11 >> 2);
    }
    unint64_t v10 = v11 >> 2;
  }
  get_value_shape((const Espresso::layer_nd_shape *)v18, (uint64_t)a4);
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v18, 0, (uint64_t)v19);
  if (v20 != -1 && v20 < 1)
  {
    uint64_t v13 = 1;
    if (!v10) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v13 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v19);
    if (!v10) {
      goto LABEL_19;
    }
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 4 * v13;
  do
  {
    if (a5[1] == *a5) {
      int v17 = v15;
    }
    else {
      int v17 = *(_DWORD *)(*a5 + 4 * v15);
    }
    v18[0] = v17;
    Espresso::blob_container_array::put(a1, a2, *(void *)(*(void *)a3 + 24) + v14, (Espresso::layer_shape *)v19, v18);
    ++v15;
    v14 += v16;
  }
  while (v10 != v15);
LABEL_19:
  if (__p)
  {
    long long v22 = __p;
    operator delete(__p);
  }
}

void sub_192A51A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void get_value_shape(const Espresso::layer_nd_shape *a1, uint64_t a2)
{
  Espresso::layer_nd_shape::shape_vector(&__p, a2);
  int v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v8, __p.__begin_ + 1, (uint64_t)__p.__end_, __p.__end_ - (__p.__begin_ + 1));
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v4 = v8;
  long long v3 = v9;
  uint64_t v5 = v9 - v8;
  if (v9 == v8)
  {
    *((_DWORD *)a1 + 5) = (unint64_t)v5 >> 2;
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v6 = v5 >> 2;
    unint64_t v7 = (unint64_t)v5 >> 2;
    if ((unint64_t)(v5 >> 2) <= 1) {
      uint64_t v6 = 1;
    }
    memcpy(a1, v8, 4 * v6);
    *((_DWORD *)a1 + 5) = v7;
  }
  int v9 = v4;
  operator delete(v4);
LABEL_7:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_192A51B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::blob_container_array::put(Espresso::blob_container_array *a1, uint64_t a2, uint64_t a3, Espresso::layer_shape *a4, int *a5)
{
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v36, a4, 0);
  unint64_t v10 = Espresso::blob_container_array::size(a1);
  Espresso::blob_container_array::element_shape((Espresso::blob_container_array *)&v32, (uint64_t)a1);
  BOOL v11 = 0;
  if (v36[5] != v33)
  {
LABEL_10:
    if (v10) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Inserted element should have same shape as existing elements in blob_array");
    }
    goto LABEL_11;
  }
  if (!v33)
  {
    BOOL v11 = 1;
    goto LABEL_11;
  }
  if (v32 != v36[0])
  {
    BOOL v11 = 0;
    goto LABEL_10;
  }
  unint64_t v12 = 0;
  while (v33 - 1 != v12)
  {
    int v13 = *((_DWORD *)&v32 + v12 + 1);
    int v14 = v36[++v12];
    if (v13 != v14) {
      goto LABEL_35;
    }
  }
  unint64_t v12 = v33;
LABEL_35:
  BOOL v11 = v12 >= v33;
  if (!v11) {
    goto LABEL_10;
  }
LABEL_11:
  unint64_t v15 = *a5;
  if (!v11 || v10 <= v15)
  {
    if (v10 <= v15) {
      unint64_t v16 = (int)v15 + 1;
    }
    else {
      unint64_t v16 = v10;
    }
    get_array_shape(v31, (const Espresso::layer_nd_shape *)v16, (uint64_t)v36);
    *(int32x2_t *)&double v17 = Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v31, 0, (uint64_t)&v32);
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    (*(void (**)(Espresso::blob_container_array *, long long *, uint64_t *, double))(*(void *)a1 + 16))(a1, &v32, &v29, v17);
    if (v30) {
      nitro::nitro_function::nitro_function(v30);
    }
    if (__p)
    {
      uint64_t v35 = __p;
      operator delete(__p);
    }
    unint64_t v15 = *a5;
  }
  uint64_t v18 = (uint64_t *)(*((void *)a1 + 21) + 16 * v15);
  uint64_t v19 = *v18;
  if (!*v18)
  {
    (*(void (**)(long long *__return_ptr))(**(void **)(*((void *)a1 + 9) + 8) + 24))(&v32);
    long long v20 = v32;
    long long v32 = 0uLL;
    unint64_t v21 = (std::__shared_weak_count *)v18[1];
    *(_OWORD *)uint64_t v18 = v20;
    if (v21)
    {
      nitro::nitro_function::nitro_function(v21);
      if (*((void *)&v32 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v32 + 1));
      }
    }
    uint64_t v19 = *v18;
  }
  Espresso::abstract_blob_container::shape((char *)&v32, v19);
  BOOL v22 = Espresso::layer_shape::operator==((uint64_t)&v32, (uint64_t)a4);
  if (__p)
  {
    uint64_t v35 = __p;
    operator delete(__p);
  }
  if (!v22)
  {
    uint64_t v23 = *v18;
    uint64_t v27 = 0;
    long long v28 = 0;
    (*(void (**)(uint64_t, Espresso::layer_shape *, uint64_t *))(*(void *)v23 + 16))(v23, a4, &v27);
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
  }
  int v24 = *((_DWORD *)a4 + 4) * *((_DWORD *)a4 + 3);
  long long v25 = operator new(0x60uLL);
  v25[1] = 0;
  uint64_t v25[2] = 0;
  *long long v25 = &unk_1EE3899C8;
  int v26 = *((_DWORD *)a4 + 2);
  uint64_t v25[3] = &unk_1EE36BF10;
  *((_OWORD *)v25 + 4) = 0u;
  *((_OWORD *)v25 + 5) = 0u;
  v25[4] = *(void *)a4;
  *((_DWORD *)v25 + 10) = v26;
  *((_DWORD *)v25 + 11) = v24;
  v25[6] = a3;
  *((unsigned char *)v25 + 56) = 0;
  *(void *)&long long v32 = v25 + 3;
  *((void *)&v32 + 1) = v25;
  (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)*v18 + 48))(*v18, a2, &v32);
  if (*((void *)&v32 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v32 + 1));
  }
}

void sub_192A51E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::blob_container_array::size(Espresso::blob_container_array *this)
{
  Espresso::abstract_blob_container::shape(v3, (uint64_t)this);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v6, (const Espresso::layer_shape *)v3, 0);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  if (v6[5]) {
    return v6[0];
  }
  else {
    return 0;
  }
}

void sub_192A51EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::blob_container_array::element_shape(Espresso::blob_container_array *this, uint64_t a2)
{
  Espresso::abstract_blob_container::shape(v3, a2);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v6, (const Espresso::layer_shape *)v3, 0);
  get_value_shape(this, (uint64_t)v6);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
}

void sub_192A51F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void get_array_shape(_DWORD *a1, const Espresso::layer_nd_shape *a2, uint64_t a3)
{
  std::vector<int>::value_type v3 = (int)a2;
  Espresso::layer_nd_shape::shape_vector(&v12, a3);
  v5.__i_ = v12.__begin_;
  std::vector<int>::value_type __x = v3;
  std::vector<int>::insert(&v12, v5, &__x);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  begiuint64_t n = v12.__begin_;
  std::vector<int>::pointer end = v12.__end_;
  int64_t v8 = (char *)v12.__end_ - (char *)v12.__begin_;
  if (v12.__end_ == v12.__begin_)
  {
    a1[5] = (unint64_t)v8 >> 2;
    if (!end) {
      return;
    }
  }
  else
  {
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (unint64_t)v8 >> 2;
    if ((unint64_t)(v8 >> 2) <= 1) {
      uint64_t v9 = 1;
    }
    memcpy(a1, v12.__begin_, 4 * v9);
    a1[5] = v10;
  }
  v12.__end_ = begin;
  operator delete(begin);
}

void sub_192A52034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::blob_container_array::__copy_to_host(Espresso::blob_container_array *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  if (!*a3)
  {
    (*(void (**)(void **__return_ptr, Espresso::blob_container_array *))(*(void *)a1 + 56))(__p, a1);
    long long v6 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    unint64_t v7 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v6;
    if (v7)
    {
      nitro::nitro_function::nitro_function(v7);
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
    }
    uint64_t v5 = *a3;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v18 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, (const void *)(v5 + 8), v5 + 24, 4uLL);
  v14[0] = 0;
  v14[1] = 0;
  int v15 = 0;
  int64_t v8 = (int *)__p[0];
  int64_t v9 = (char *)__p[1] - (char *)__p[0];
  if (__p[1] != __p[0])
  {
    uint64_t v10 = v9 >> 2;
    if ((unint64_t)(v9 >> 2) <= 1) {
      uint64_t v10 = 1;
    }
    BOOL v11 = v14;
    do
    {
      int v12 = *v8++;
      *v11++ = v12;
      --v10;
    }
    while (v10);
  }
  int v16 = (unint64_t)v9 >> 2;
  memset(v13, 0, sizeof(v13));
  Espresso::blob_container_array::gather(a1, (uint64_t)a3, (int *)v14, v13);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_192A5215C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::blob_container_array::gather(Espresso::blob_container_array *a1, uint64_t a2, int *a3, void *a4)
{
  Espresso::abstract_blob_container::shape(v19, (uint64_t)a1);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v22, (const Espresso::layer_shape *)v19, 0);
  get_value_shape((const Espresso::layer_nd_shape *)v23, (uint64_t)v22);
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v23, 0, (uint64_t)v24);
  if (__p)
  {
    unint64_t v21 = __p;
    operator delete(__p);
  }
  get_value_shape((const Espresso::layer_nd_shape *)v23, (uint64_t)a3);
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v23, 0, (uint64_t)v19);
  uint64_t v8 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v19);
  if (v8 < Espresso::layer_shape::total_dim((Espresso::layer_shape *)v24)
    || (unint64_t v9 = *a3, v10 = a4[1], v11 = (v10 - *a4) >> 2, v11 > v9))
  {
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("blob_container_array_gather: Blob shape not compatible for gathering blob array");
  }
  if (a3[5])
  {
    uint64_t v12 = 0;
    unint64_t v13 = *(int *)(*(void *)a2 + 8);
    do
    {
      v13 *= *(int *)(*(void *)a2 + 12 + v12);
      v12 += 4;
    }
    while (v12 != 12);
    uint64_t v14 = v13 / v9;
  }
  else
  {
    uint64_t v14 = 1;
  }
  if (v10 == *a4)
  {
    unint64_t v11 = (uint64_t)(*((void *)a1 + 22) - *((void *)a1 + 21)) >> 4;
    if (!v11) {
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 4 * v14;
    do
    {
      if (a4[1] == *a4) {
        int v18 = v16;
      }
      else {
        int v18 = *(_DWORD *)(*a4 + 4 * v16);
      }
      v23[0] = v18;
      Espresso::blob_container_array::get(a1, (float *)(*(void *)(*(void *)a2 + 24) + v15), (const Espresso::layer_shape *)v19, v23);
      ++v16;
      v15 += v17;
    }
    while (v11 != v16);
    goto LABEL_19;
  }
  if (v11) {
    goto LABEL_14;
  }
LABEL_19:
  if (__p)
  {
    unint64_t v21 = __p;
    operator delete(__p);
  }
  if (v25)
  {
    int v26 = v25;
    operator delete(v25);
  }
}

void sub_192A52338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::blob_container_array::get(Espresso::blob_container_array *this, float *a2, const Espresso::layer_shape *a3, const int *a4)
{
  unint64_t v6 = *a4;
  uint64_t v7 = *((void *)this + 21);
  if (v6 >= (*((void *)this + 22) - v7) >> 4)
  {
    Espresso::abstract_blob_container::shape(v22, (uint64_t)this);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v25, (const Espresso::layer_shape *)v22, 0);
    int v10 = v6 + 1;
    if (__p)
    {
      int v24 = __p;
      operator delete(__p);
    }
    if (!v26)
    {
      *(void *)&v25[12] = 0;
      *(void *)&v25[4] = 0;
      int v26 = 1;
    }
    *(_DWORD *)long long v25 = v10;
    *(int32x2_t *)&double v11 = Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v25, 0, (uint64_t)v22);
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    (*(void (**)(Espresso::blob_container_array *, char *, uint64_t *, double))(*(void *)this + 16))(this, v22, &v20, v11);
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    if (__p)
    {
      int v24 = __p;
      operator delete(__p);
    }
    unint64_t v6 = *a4;
    uint64_t v7 = *((void *)this + 21);
  }
  uint64_t v12 = (uint64_t *)(v7 + 16 * v6);
  if (*v12)
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(v25, v12);
    uint64_t v13 = *(void *)v25;
    if (*(void *)v25)
    {
      Espresso::abstract_blob_container::shape(v22, *v12);
      BOOL v14 = Espresso::layer_shape::operator==((uint64_t)a3, (uint64_t)v22);
      if (__p)
      {
        int v24 = __p;
        operator delete(__p);
      }
      if (!v14)
      {
        int v17 = *((_DWORD *)a3 + 4);
        if (v17 == 1) {
          int v18 = 4;
        }
        else {
          int v18 = 5;
        }
        if (*((_DWORD *)a3 + 5) == -1) {
          int v19 = v18;
        }
        else {
          int v19 = *((_DWORD *)a3 + 5);
        }
        Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,int const&,int const&,int const&,int const&,int,int &,int &,int &,int &,int &,int &>(*(_DWORD *)a3, *((_DWORD *)a3 + 1), *((_DWORD *)a3 + 2), *((_DWORD *)a3 + 3), v17, v19, *(_DWORD *)(*v12 + 8), *(_DWORD *)(*v12 + 12), *(_OWORD *)(*v12 + 16), HIDWORD(*(void *)(*v12 + 16)), *(void *)(*v12 + 24), HIDWORD(*(_OWORD *)(*v12 + 16)));
      }
      uint64_t v15 = 0;
      uint64_t v16 = *(int *)(v13 + 8);
      do
      {
        v16 *= *(int *)(v13 + 12 + v15);
        v15 += 4;
      }
      while (v15 != 12);
      memcpy(a2, *(const void **)(v13 + 24), 4 * v16);
    }
    if (*(void *)&v25[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v25[8]);
    }
  }
}

void sub_192A52554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  BOOL v22 = *(std::__shared_weak_count **)(v20 - 64);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,int const&,int const&,int const&,int const&,int,int &,int &,int &,int &,int &,int &>(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12)
{
}

uint64_t Espresso::blob_container_array::compute_path(Espresso::blob_container_array *this)
{
  return *((unsigned int *)this + 40);
}

uint64_t Espresso::blob_container_array::platform(Espresso::blob_container_array *this)
{
  return (***(uint64_t (****)(void))(*((void *)this + 9) + 8))(*(void *)(*((void *)this + 9) + 8));
}

void Espresso::blob_container_array::resize(uint64_t *a1, const Espresso::layer_shape *a2)
{
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  unint64_t v3 = Espresso::blob_container_array::size((Espresso::blob_container_array *)a1);
  uint64_t v4 = a1[21];
  uint64_t v5 = a1[22];
  unint64_t v6 = a1 + 21;
  if (v3 != (v5 - v4) >> 4)
  {
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::resize(v6, v3);
  }
}

void Espresso::blob_container_array::~blob_container_array(Espresso::blob_container_array *this)
{
  *(void *)this = &unk_1EE350AE8;
  uint64_t v2 = (void **)((char *)this + 168);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::abstract_blob_container::~abstract_blob_container(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE350AE8;
  uint64_t v2 = (void **)((char *)this + 168);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::abstract_blob_container::~abstract_blob_container(this);
}

void Espresso::blob_container_array::set_array_shape(Espresso::blob_container_array *this, const Espresso::layer_nd_shape *a2, const Espresso::layer_nd_shape *a3)
{
  get_array_shape(v4, a2, (uint64_t)a3);
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v4, 0, (uint64_t)v5);
  Espresso::abstract_blob_container::set_shape(this, (const Espresso::layer_shape *)v5);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_192A527B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float *scalar_vDSP_vargmin(float *result, uint64_t a2, float *a3, unint64_t a4)
{
  float v4 = 0.0;
  if (a4 >= 2)
  {
    unint64_t v5 = 0;
    float v6 = *result;
    uint64_t v7 = 1;
    uint64_t v8 = &result[a2];
    do
    {
      if (*v8 < v6)
      {
        float v6 = *v8;
        unint64_t v5 = v7;
      }
      ++v7;
      v8 += a2;
    }
    while (a4 != v7);
    float v4 = (float)v5;
  }
  *a3 = v4;
  return result;
}

float *scalar_vDSP_vargmax(float *result, uint64_t a2, float *a3, unint64_t a4)
{
  float v4 = 0.0;
  if (a4 >= 2)
  {
    unint64_t v5 = 0;
    float v6 = *result;
    uint64_t v7 = 1;
    uint64_t v8 = &result[a2];
    do
    {
      if (*v8 > v6)
      {
        float v6 = *v8;
        unint64_t v5 = v7;
      }
      ++v7;
      v8 += a2;
    }
    while (a4 != v7);
    float v4 = (float)v5;
  }
  *a3 = v4;
  return result;
}

uint64_t scalar_vDSP_pve(uint64_t result, int a2, float *a3, uint64_t a4)
{
  if (a4)
  {
    int v4 = 0;
    float v5 = 1.0;
    do
    {
      float v5 = v5 * *(float *)(result + 4 * v4);
      v4 += a2;
      --a4;
    }
    while (a4);
  }
  else
  {
    float v5 = 1.0;
  }
  *a3 = v5;
  return result;
}

void Espresso::reduce_kernel_cpu::~reduce_kernel_cpu(Espresso::reduce_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  uint64_t v4 = a3[1] - *a3;
  if (v4 != 128)
  {
    float v6 = a2[1];
    v19[0] = *a2;
    v19[1] = v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
      uint64_t v4 = a3[1] - *a3;
    }
    std::to_string(&v13, v4 >> 6);
    uint64_t v8 = std::string::insert(&v13, 0, "[Dispatch::MPSGraph::batch_matmul_kernel] unsupported: bottoms size ");
    std::string v14 = *v8;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v14, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v19, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_18;
  }
  uint64_t v5 = a3[4] - a3[3];
  if (v5 != 64)
  {
    float v6 = a2[1];
    v12[0] = *a2;
    v12[1] = v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
      uint64_t v5 = a3[4] - a3[3];
    }
    std::to_string(&v13, v5 >> 6);
    unint64_t v9 = std::string::insert(&v13, 0, "[Dispatch::MPSGraph::batch_matmul_kernel] unsupported: tops size ");
    std::string v14 = *v9;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v14, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v12, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_18:
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    uint64_t v20 = (void **)v17;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v20);
    uint64_t v20 = (void **)v16;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v20);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    uint64_t v7 = (void *)v13.__r_.__value_.__r.__words[0];
    goto LABEL_26;
  }
  if (!*(unsigned char *)(a1 + 280)) {
    return 1;
  }
  float v6 = a2[1];
  v11[0] = *a2;
  v11[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, "[Dispatch::MPSGraph::batch_matmul_kernel] unsupported: channel mode");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v14, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v11, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v7 = (void *)v14.__r_.__value_.__r.__words[0];
LABEL_26:
    operator delete(v7);
  }
LABEL_27:
  if (v6) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v6);
  }
  return 0;
}

void sub_192A52BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a26);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel::~batch_matmul_kernel(Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::hierarchical_inner_product_kernel_cpu::supports_weight_key(uint64_t a1, const std::string *a2)
{
  v39[0] = 0;
  v39[1] = 0;
  uint64_t v40 = 0;
  v37[1] = 0;
  uint64_t v38 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v37[0] = 0;
  if ((unwrap_hierarchical_name(a2, (uint64_t)v39, (uint64_t)v37, (uint64_t)&v34) & 1) == 0
    || (v40 >= 0 ? (unint64_t v3 = (const char *)v39) : (unint64_t v3 = (const char *)v39[0]),
        (v4 = atoi(v3), v38 >= 0) ? (uint64_t v5 = (const char *)v37) : (uint64_t v5 = (const char *)v37[0]),
        int v6 = atoi(v5),
        v4 >= (unint64_t)((uint64_t)(*(void *)(a1 + 424) - *(void *)(a1 + 416)) >> 4)))
  {
    uint64_t v8 = 0;
    goto LABEL_13;
  }
  if (SHIBYTE(v36) < 0)
  {
    if (v35 != 13) {
      goto LABEL_26;
    }
    uint64_t v7 = v34;
  }
  else
  {
    if (SHIBYTE(v36) != 13) {
      goto LABEL_26;
    }
    uint64_t v7 = (void **)&v34;
  }
  int v10 = *v7;
  uint64_t v11 = *(uint64_t *)((char *)v7 + 5);
  if (v10 == (void *)0x5F72657474616373 && v11 == 0x7865646E695F7265)
  {
    uint64_t v8 = 1;
    goto LABEL_13;
  }
LABEL_26:
  int v33 = *(_DWORD *)(a1 + 408);
  long long v13 = *(_OWORD *)(a1 + 392);
  long long v31 = *(_OWORD *)(a1 + 376);
  long long v32 = v13;
  long long v14 = *(_OWORD *)(a1 + 296);
  v30[0] = *(_OWORD *)(a1 + 280);
  v30[1] = v14;
  long long v15 = *(_OWORD *)(a1 + 328);
  void v30[2] = *(_OWORD *)(a1 + 312);
  v30[3] = v15;
  long long v16 = *(_OWORD *)(a1 + 360);
  char v30[4] = *(_OWORD *)(a1 + 344);
  v30[5] = v16;
  *(void *)((char *)&v31 + 4) = 0;
  LODWORD(v30[0]) = v6;
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v17 = a1 + 8;
  int v19 = (***(uint64_t (****)(void))(v18 + 8))();
  if (LODWORD(v30[0]) < 0xB && v19 == 100) {
    int v21 = 0;
  }
  else {
    int v21 = v19;
  }
  int v29 = v21;
  Espresso::abstract_engine_factory::shared(&v25);
  uint64_t v22 = v25;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
  Espresso::abstract_engine_factory::make_kernel_priv(v22, v17, (uint64_t)__p, (uint64_t)v30, &v29);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void ***))(*(void *)v27 + 208))(v27, &v34);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
LABEL_13:
  if (SHIBYTE(v36) < 0) {
    operator delete(v34);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(v39[0]);
  }
  return v8;
}

void sub_192A52EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (*(char *)(v21 - 81) < 0) {
    operator delete(v20[17]);
  }
  if (*(char *)(v21 - 57) < 0) {
    operator delete(v20[20]);
  }
  if (*(char *)(v21 - 33) < 0) {
    operator delete(v20[23]);
  }
  _Unwind_Resume(exception_object);
}

uint64_t unwrap_hierarchical_name(const std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v7 >= 0) {
    int64_t size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = a1->__r_.__value_.__l.__size_;
  }
  if (v7 >= 0) {
    unint64_t v9 = a1;
  }
  else {
    unint64_t v9 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if (size >= 1)
  {
    uint64_t v11 = (char *)v9 + size;
    uint64_t v12 = (std::string *)v9;
    do
    {
      long long v13 = (char *)memchr(v12, 47, size);
      if (!v13) {
        break;
      }
      if (*v13 == 47)
      {
        if (v13 == v11) {
          break;
        }
        std::string::size_type v14 = v13 - (char *)v9;
        if (v14 == -1) {
          break;
        }
        std::string::basic_string(&__str, a1, 0, v14, (std::allocator<char> *)&v23);
        if (*(char *)(a2 + 23) < 0) {
          operator delete(*(void **)a2);
        }
        *(std::string *)a2 = __str;
        std::string::basic_string(&__str, a1, v14 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t v15 = __str.__r_.__value_.__l.__size_;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if (v15 >= 1)
        {
          uint64_t v17 = (char *)p_str + v15;
          uint64_t v18 = p_str;
          do
          {
            int v19 = memchr(v18, 47, v15);
            if (!v19) {
              break;
            }
            if (*v19 == 47)
            {
              if (v19 == v17) {
                break;
              }
              std::string::size_type v22 = v19 - (unsigned char *)p_str;
              if (v22 == -1) {
                break;
              }
              std::string::basic_string(&v23, &__str, 0, v22, (std::allocator<char> *)&v25);
              if (*(char *)(a3 + 23) < 0) {
                operator delete(*(void **)a3);
              }
              *(std::string *)a3 = v23;
              std::string::basic_string(&v23, &__str, v22 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v25);
              if (*(char *)(a4 + 23) < 0) {
                operator delete(*(void **)a4);
              }
              *(std::string *)a4 = v23;
              uint64_t v20 = 1;
              goto LABEL_39;
            }
            uint64_t v18 = (std::string *)(v19 + 1);
            int64_t v15 = v17 - (unsigned char *)v18;
          }
          while (v17 - (unsigned char *)v18 >= 1);
        }
        MEMORY[0x192FF0F50](a3, "");
        MEMORY[0x192FF0F50](a4, "");
        uint64_t v20 = 0;
LABEL_39:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        return v20;
      }
      uint64_t v12 = (std::string *)(v13 + 1);
      int64_t size = v11 - (char *)v12;
    }
    while (v11 - (char *)v12 >= 1);
  }
  MEMORY[0x192FF0F50](a2, "");
  MEMORY[0x192FF0F50](a3, "");
  MEMORY[0x192FF0F50](a4, "");
  return 0;
}

void sub_192A531AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::hierarchical_inner_product_kernel_cpu::__set_weight_raw_blob(uint64_t a1, uint64_t a2, const std::string *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  if (!a6)
  {
    uint64_t v10 = 0;
    goto LABEL_6;
  }
  uint64_t v10 = *a6;
  if (!*a6)
  {
LABEL_6:
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  uint64_t v11 = (std::__shared_weak_count *)a6[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  v71[0] = 0;
  v71[1] = 0;
  uint64_t v72 = 0;
  v69[1] = 0;
  uint64_t v70 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  v69[0] = 0;
  if ((unwrap_hierarchical_name(a3, (uint64_t)v71, (uint64_t)v69, (uint64_t)&v66) & 1) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unsuccessfully formatted hierarchical inner product kernel.");
  }
  if (v72 >= 0) {
    uint64_t v12 = (const char *)v71;
  }
  else {
    uint64_t v12 = (const char *)v71[0];
  }
  int v13 = atoi(v12);
  if (v70 >= 0) {
    std::string::size_type v14 = (const char *)v69;
  }
  else {
    std::string::size_type v14 = (const char *)v69[0];
  }
  int v15 = atoi(v14);
  uint64_t v16 = *(void *)(a1 + 416);
  unint64_t v17 = (*(void *)(a1 + 424) - v16) >> 4;
  if (v17 <= v13) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("index %d > %d", v13, v17);
  }
  unsigned int v18 = v15;
  if ((SHIBYTE(v68) & 0x80000000) == 0)
  {
    if (SHIBYTE(v68) == 13)
    {
      int v19 = (void **)&v66;
      goto LABEL_20;
    }
LABEL_24:
    uint64_t v23 = *(void *)(v16 + 16 * v13);
    if (!v23)
    {
      long long v56 = v11;
      char v24 = a4;
      int v65 = *(_DWORD *)(a1 + 408);
      long long v25 = *(_OWORD *)(a1 + 392);
      long long v63 = *(_OWORD *)(a1 + 376);
      long long v64 = v25;
      long long v26 = *(_OWORD *)(a1 + 296);
      *(_OWORD *)unint64_t v58 = *(_OWORD *)(a1 + 280);
      *(_OWORD *)&v58[16] = v26;
      long long v27 = *(_OWORD *)(a1 + 328);
      long long v59 = *(_OWORD *)(a1 + 312);
      long long v60 = v27;
      long long v28 = *(_OWORD *)(a1 + 360);
      long long v61 = *(_OWORD *)(a1 + 344);
      long long v62 = v28;
      *(void *)((char *)&v63 + 4) = 0;
      *(_DWORD *)unint64_t v58 = v18;
      int v29 = (***(uint64_t (****)(void))(*(void *)(a1 + 8) + 8))();
      if (v18 < 0xB && v29 == 100) {
        int v31 = 0;
      }
      else {
        int v31 = v29;
      }
      LODWORD(v73.__r_.__value_.__l.__data_) = v31;
      Espresso::abstract_engine_factory::shared(&v74);
      uint64_t v32 = v74.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&v76, "inner_product");
      Espresso::abstract_engine_factory::make_kernel_priv(v32, a1 + 8, (uint64_t)&v76, (uint64_t)v58, (int *)&v73);
      a4 = v24;
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      uint64_t v11 = v56;
      if (v74.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v74.__r_.__value_.__l.__size_);
      }
      int v33 = (void *)v75.__r_.__value_.__r.__words[0];
      if (v75.__r_.__value_.__r.__words[0]
      {
        std::string::size_type size = v75.__r_.__value_.__l.__size_;
        if (v75.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v75.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string::size_type size = 0;
      }
      uint64_t v38 = (void *)(*(void *)(a1 + 416) + 16 * v13);
      uint64_t v39 = (std::__shared_weak_count *)v38[1];
      *uint64_t v38 = v33;
      v38[1] = size;
      if (v39) {
        nitro::nitro_function::nitro_function(v39);
      }
      if (v75.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v75.__r_.__value_.__l.__size_);
      }
      uint64_t v23 = *(void *)(*(void *)(a1 + 416) + 16 * v13);
    }
    if (v18 != *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 384))(v23))
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::invalid_state_error::invalid_state_error(exception);
    }
    uint64_t v40 = *(void *)(*(void *)(a1 + 416) + 16 * v13);
    (*(void (**)(uint64_t, uint64_t, void ***, const void *, unint64_t, uint64_t *))(*(void *)v40
                                                                                                  + 160))(v40, a2, &v66, a4, a5, a6);
    goto LABEL_60;
  }
  if (v67 != 13) {
    goto LABEL_24;
  }
  int v19 = v66;
LABEL_20:
  uint64_t v20 = *v19;
  uint64_t v21 = *(uint64_t *)((char *)v19 + 5);
  if (v20 != (void *)0x5F72657474616373 || v21 != 0x7865646E695F7265) {
    goto LABEL_24;
  }
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = *(void *)(a1 + 8);
  uint64_t v36 = *(std::__shared_weak_count **)(a1 + 16);
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(unsigned char *)(v35 + 73))
  {
    if (v10 && (a4 & 0x3F) != 0)
    {
      if (!*(unsigned char *)(v35 + 123)) {
        goto LABEL_49;
      }
LABEL_70:
      std::string v41 = (char *)operator new(0x58uLL);
      *((void *)v41 + 1) = 0;
      *((void *)v41 + 2) = 0;
      *(void *)std::string v41 = &unk_1EE389B88;
      *((void *)v41 + 3) = &unk_1EE36C010;
      *(_OWORD *)(v41 + 56) = 0u;
      *(_OWORD *)(v41 + 72) = 0u;
      *((_DWORD *)v41 + 8) = v18;
      *((void *)v41 + 5) = a4;
      v41[48] = 0;
      *(void *)&long long v42 = v41 + 24;
      *((void *)&v42 + 1) = v41;
      long long v55 = v42;
      if (!v11)
      {
        *((void *)v41 + 7) = v10;
        *((void *)v41 + 8) = 0;
        if (!v36) {
          goto LABEL_75;
        }
        goto LABEL_74;
      }
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      *((void *)v41 + 7) = v10;
      *((void *)v41 + 8) = v11;
      goto LABEL_72;
    }
    if (v10) {
      goto LABEL_70;
    }
  }
LABEL_49:
  std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(v58, v15, 1, 1, 1);
  long long v55 = *(_OWORD *)v58;
  uint64_t v37 = *(void *)v58;
  if (a5 != 4 * *(int *)(*(void *)v58 + 8))
  {
    unint64_t v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v74, a5);
    char v47 = std::string::insert(&v74, 0, "Unexpected size s=");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    uint64_t v49 = std::string::append(&v75, "/blob=");
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v73, 4 * *(int *)(v37 + 8));
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v51 = &v73;
    }
    else {
      uint64_t v51 = (std::string *)v73.__r_.__value_.__r.__words[0];
    }
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v52 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v52 = v73.__r_.__value_.__l.__size_;
    }
    long long v53 = std::string::append(&v76, (const std::string::value_type *)v51, v52);
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    *(void *)&v58[16] = *((void *)&v53->__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v58 = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v46, (const std::string *)v58);
    __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  memcpy(*(void **)(*(void *)v58 + 16), a4, a5);
  if (v11) {
LABEL_72:
  }
    nitro::nitro_function::nitro_function(v11);
  if (v36) {
LABEL_74:
  }
    nitro::nitro_function::nitro_function(v36);
LABEL_75:
  uint64_t v43 = *(void *)(a1 + 440) + 16 * v13;
  unint64_t v44 = *(std::__shared_weak_count **)(v43 + 8);
  *(_OWORD *)uint64_t v43 = v55;
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
LABEL_60:
  if (SHIBYTE(v68) < 0) {
    operator delete(v66);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete(v69[0]);
  }
  if (SHIBYTE(v72) < 0) {
    operator delete(v71[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_192A5384C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v55 - 185) < 0) {
    operator delete(v51[9]);
  }
  if (*(char *)(v55 - 105) < 0) {
    operator delete(v51[19]);
  }
  if (*(char *)(v55 - 137) < 0) {
    operator delete(v51[15]);
  }
  if (*(char *)(v55 - 161) < 0)
  {
    operator delete(v51[12]);
    if ((v52 & 1) == 0)
    {
LABEL_14:
      if (*((void *)&a9 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&a9 + 1));
      }
      if (a11) {
        nitro::nitro_function::nitro_function(a11);
      }
      if (v53) {
        nitro::nitro_function::nitro_function(v53);
      }
      if (a11) {
        nitro::nitro_function::nitro_function(a11);
      }
      if (a39 < 0) {
        operator delete(*v51);
      }
      if (a45 < 0) {
        operator delete(v51[3]);
      }
      if (a51 < 0) {
        operator delete(v51[6]);
      }
      if (a11) {
        nitro::nitro_function::nitro_function(a11);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v52)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v54);
  goto LABEL_14;
}

void Espresso::hierarchical_inner_product_kernel_cpu::on_resized(Espresso::hierarchical_inner_product_kernel_cpu *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  std::vector<int>::resize((std::vector<int> *)((char *)this + 464), *((int *)this + 95));
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v37, (void *)this + 1);
  long long v38 = v37;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  int v4 = (std::__shared_weak_count *)*((void *)&v37 + 1);
  Espresso::layer_data::layer_data(v31, &v38, &v35);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((uint64_t *)this + 64);
  *((_OWORD *)this + 32) = *(_OWORD *)v31;
  *((void *)this + 66) = *(void *)&v31[16];
  memset(v31, 0, sizeof(v31));
  uint64_t v39 = (void **)v31;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v39);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v37, (void *)this + 1);
  long long v38 = v37;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)&v37 + 1);
  Espresso::layer_data::layer_data(v31, &v38, &v35);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((uint64_t *)this + 67);
  *(_OWORD *)((char *)this + 536) = *(_OWORD *)v31;
  *((void *)this + 69) = *(void *)&v31[16];
  memset(v31, 0, sizeof(v31));
  uint64_t v39 = (void **)v31;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v39);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v37, (void *)this + 1);
  long long v38 = v37;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  int v6 = (std::__shared_weak_count *)*((void *)&v37 + 1);
  Espresso::layer_data::layer_data(v31, &v38, &v35);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((uint64_t *)this + 70);
  *((_OWORD *)this + std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)this + 35) = *(_OWORD *)v31;
  *((void *)this + 72) = *(void *)&v31[16];
  memset(v31, 0, sizeof(v31));
  uint64_t v39 = (void **)v31;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v39);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  int v7 = *((_DWORD *)this + 70);
  uint64_t v8 = **((void **)this + 64);
  uint64_t v34 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v32 = 0u;
  *(void *)int v31 = 0x100000001;
  *(_DWORD *)&v31[8] = v7;
  *(void *)&v31[12] = 0x100000001;
  *(_DWORD *)&v31[20] = -1;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  (*(void (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v8 + 16))(v8, v31, &v29);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v9 = **((void **)this + 67);
  int v10 = *((_DWORD *)this + 70);
  uint64_t v34 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v32 = 0u;
  *(void *)int v31 = 0x100000001;
  *(_DWORD *)&v31[8] = v10;
  *(void *)&v31[12] = 0x100000001;
  *(_DWORD *)&v31[20] = -1;
  uint64_t v27 = 0;
  long long v28 = 0;
  (*(void (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v9 + 16))(v9, v31, &v27);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v11 = **((void **)this + 70);
  int v12 = *((_DWORD *)this + 71);
  uint64_t v34 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v32 = 0u;
  *(void *)int v31 = 0x100000001;
  *(_DWORD *)&v31[8] = v12;
  *(void *)&v31[12] = 0x100000001;
  *(_DWORD *)&v31[20] = -1;
  uint64_t v25 = 0;
  long long v26 = 0;
  (*(void (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v11 + 16))(v11, v31, &v25);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v13 = **((void **)this + 70);
  uint64_t v14 = **((void **)this + 64);
  uint64_t v16 = *(void *)(v14 + 160);
  uint64_t v15 = *(void *)(v14 + 168);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 73) = v16;
  unint64_t v17 = (std::__shared_weak_count *)*((void *)this + 74);
  *((void *)this + 74) = v15;
  if (v17)
  {
    nitro::nitro_function::nitro_function(v17);
    uint64_t v16 = *((void *)this + 73);
  }
  int v18 = *((_DWORD *)this + 71);
  int v19 = operator new(0x60uLL);
  v19[1] = 0;
  _OWORD v19[2] = 0;
  void *v19 = &unk_1EE3899C8;
  uint64_t v20 = *(void *)(v16 + 24);
  _OWORD v19[3] = &unk_1EE36BF10;
  *((_OWORD *)v19 + 4) = 0u;
  *((_OWORD *)v19 + 5) = 0u;
  v19[4] = 0x100000001;
  *((_DWORD *)v19 + 10) = v18;
  *((_DWORD *)v19 + 11) = 1;
  v19[6] = v20;
  *((unsigned char *)v19 + 56) = 0;
  uint64_t v21 = *(std::__shared_weak_count **)(v14 + 168);
  *(void *)(v14 + 160) = v19 + 3;
  *(void *)(v14 + 168) = v19;
  if (v21)
  {
    nitro::nitro_function::nitro_function(v21);
    int v18 = *((_DWORD *)this + 71);
  }
  std::string::size_type v22 = operator new(0x60uLL);
  v22[1] = 0;
  void v22[2] = 0;
  *std::string::size_type v22 = &unk_1EE3899C8;
  uint64_t v22[3] = &unk_1EE36BF10;
  *((_OWORD *)v22 + 4) = 0u;
  *((_OWORD *)v22 + 5) = 0u;
  v22[4] = 0x100000001;
  *((_DWORD *)v22 + 10) = v18;
  *((_DWORD *)v22 + 11) = 1;
  v22[6] = 0;
  *((unsigned char *)v22 + 56) = 0;
  uint64_t v23 = *(std::__shared_weak_count **)(v13 + 168);
  *(void *)(v13 + 160) = v22 + 3;
  *(void *)(v13 + 168) = v22;
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (*((_DWORD *)this + 83) == 100002)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(v31, 1, 1, *((_DWORD *)this + 70), 1);
    char v24 = (std::__shared_weak_count *)*((void *)this + 76);
    *(_OWORD *)((char *)this + 600) = *(_OWORD *)v31;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    std::vector<int>::resize((std::vector<int> *)((char *)this + 488), *((unsigned int *)this + 70));
  }
}

void sub_192A53E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::hierarchical_inner_product_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v193, *a4);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v191, *a4 + 2);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v189, *a3);
  Espresso::abstract_blob_container::shape((char *)__A, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v183, (const Espresso::layer_shape *)__A, 0);
  if (*((void *)&v153 + 1))
  {
    *(void *)&long long v154 = *((void *)&v153 + 1);
    operator delete(*((void **)&v153 + 1));
  }
  Espresso::abstract_blob_container::shape((char *)__A, (*a4)[2]);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v177, (const Espresso::layer_shape *)__A, 0);
  if (*((void *)&v153 + 1))
  {
    *(void *)&long long v154 = *((void *)&v153 + 1);
    operator delete(*((void **)&v153 + 1));
  }
  if (*(unsigned char *)(a1 + 320) || v188 <= 3)
  {
    switch(v188)
    {
      case 1u:
        uint64_t v8 = 1;
        goto LABEL_18;
      case 2u:
        uint64_t v8 = v183;
        goto LABEL_18;
      case 3u:
        uint64_t v8 = v184 * (uint64_t)v183;
        goto LABEL_18;
      case 4u:
        uint64_t v8 = v184 * (uint64_t)v183 * v185;
        goto LABEL_18;
      case 5u:
        uint64_t v8 = v184 * (uint64_t)v183 * v185 * v186;
LABEL_18:
        uint64_t v138 = v8;
        if (v188) {
          goto LABEL_19;
        }
        goto LABEL_22;
      default:
        uint64_t v138 = 0;
        if (!v188) {
          goto LABEL_22;
        }
LABEL_19:
        uint64_t v7 = *(&v183 + (int)v188 - 1);
        break;
    }
    goto LABEL_20;
  }
  if (v188 == 5)
  {
    uint64_t v138 = v184 * (uint64_t)v183;
    uint64_t v7 = v186 * (uint64_t)v187 * v185;
    goto LABEL_20;
  }
  if (v188 == 4)
  {
    uint64_t v138 = v183;
    uint64_t v7 = v185 * (uint64_t)v186 * v184;
LABEL_20:
    uint64_t v137 = v7;
    goto LABEL_23;
  }
  uint64_t v138 = 0;
LABEL_22:
  uint64_t v137 = 0;
LABEL_23:
  if (!*(unsigned char *)(a1 + 320) && v182 > 3)
  {
    if (v182 == 5)
    {
      int v10 = v180;
      int v9 = v181;
      uint64_t v11 = v179;
      goto LABEL_32;
    }
    if (v182 == 4)
    {
      int v10 = v179;
      int v9 = v180;
      uint64_t v11 = v178;
LABEL_32:
      uint64_t v12 = v10 * (uint64_t)v9 * v11;
      goto LABEL_33;
    }
LABEL_30:
    uint64_t v130 = 0;
    goto LABEL_34;
  }
  if (!v182) {
    goto LABEL_30;
  }
  uint64_t v12 = *(int *)&v177[4 * v182 - 4];
LABEL_33:
  uint64_t v130 = v12;
LABEL_34:
  uint64_t v13 = *(unsigned int *)(a1 + 280);
  float v14 = *(float *)(a1 + 336);
  unint64_t v15 = *(int *)(a1 + 384);
  if (Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::onceToken != -1) {
    dispatch_once(&Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::onceToken, &__block_literal_global_17170);
  }
  if (Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::need_recheck_env == 1)
  {
    uint64_t v16 = getenv("ESPRESSO_N_CLUSTERS_KEEP");
    if (v16) {
      Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::ext_n_clusters_keep = atoi(v16);
    }
    unint64_t v17 = getenv("ESPRESSO_N_MIN_ROWS_FACTOR");
    if (v17) {
      Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::ext_min_n_rows_factor = atoi(v17);
    }
  }
  unint64_t v18 = Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::ext_n_clusters_keep;
  if (Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::ext_n_clusters_keep <= 0) {
    unint64_t v18 = v15;
  }
  unint64_t v143 = v18;
  if (Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::ext_min_n_rows_factor < 0) {
    int v19 = 4;
  }
  else {
    int v19 = Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::ext_min_n_rows_factor;
  }
  uint64_t v136 = **(void **)(a1 + 560);
  uint64_t v20 = **(void **)(a1 + 512);
  uint64_t v127 = **(void **)(a1 + 536);
  int v21 = *(_DWORD *)(a1 + 332);
  BOOL v22 = v19 > 0;
  if (v21 != 100002) {
    BOOL v22 = 0;
  }
  BOOL v141 = v22;
  if (v21 != 100002)
  {
    uint64_t v23 = 0;
    float v24 = -1000000000.0;
    if ((v21 - 100001) < 2) {
      float v24 = 0.0;
    }
    *(float *)__A = v24;
    vDSP_Length v25 = *(int *)(v189 + 8);
    do
    {
      v25 *= *(int *)(v189 + 12 + v23);
      v23 += 4;
    }
    while (v23 != 12);
    vDSP_vfill((const float *)__A, *(float **)(v189 + 24), 1, v25);
  }
  unint64_t v126 = a3;
  uint64_t v26 = v143;
  if (v138)
  {
    uint64_t v142 = 0;
    uint64_t v148 = a1 + 560;
    int v27 = (int)v14;
    unint64_t v144 = v19 * (int)v14;
    uint64_t v145 = 0;
    unint64_t v124 = v27 & ~(v27 >> 31);
    vDSP_Length v125 = (int)v14;
    unsigned int v131 = v21 - 100001;
    if ((v21 - 100001) >= 2) {
      uint64_t v28 = v20 + 160;
    }
    else {
      uint64_t v28 = v127 + 160;
    }
    uint64_t v147 = v28;
    uint64_t v134 = v191;
    uint64_t v135 = v193;
    uint64_t v128 = v189;
    uint64_t v132 = v127 + 160;
    uint64_t v133 = 4 * v27;
    while (1)
    {
      uint64_t v30 = *(int **)(a1 + 464);
      uint64_t v29 = *(int **)(a1 + 472);
      unint64_t v31 = v29 - v30;
      if (v31 >= v144) {
        unint64_t v31 = v144;
      }
      if (v141) {
        uint64_t v32 = v31;
      }
      else {
        uint64_t v32 = v26;
      }
      uint64_t v33 = *(void *)(v135 + 24);
      uint64_t v34 = *(void *)(v134 + 24);
      if (v29 != v30)
      {
        int v35 = 0;
        uint64_t v36 = *(int **)(a1 + 464);
        do
          *v36++ = v35++;
        while (v36 != v29);
      }
      if (v32)
      {
        uint64_t v139 = v33;
        uint64_t v37 = v34 + 4 * v145 * v130;
        if (v32 >= 2)
        {
          unint64_t v38 = (unint64_t)(v32 - 2) >> 1;
          unint64_t v39 = v38 + 1;
          uint64_t v40 = &v30[v38];
          do
          {
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0 &,std::__wrap_iter<int *>>((uint64_t)v30, v37, v32, v40--);
            --v39;
          }
          while (v39);
        }
        std::string v41 = &v30[v32];
        if (v41 != v29)
        {
          long long v42 = &v30[v32];
          do
          {
            uint64_t v43 = *v42;
            uint64_t v44 = *v30;
            if (*(float *)(v37 + 4 * v43) > *(float *)(v37 + 4 * v44))
            {
              int *v42 = v44;
              *uint64_t v30 = v43;
              std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0 &,std::__wrap_iter<int *>>((uint64_t)v30, v37, v32, v30);
            }
            ++v42;
          }
          while (v42 != v29);
        }
        uint64_t v33 = v139;
        if (v32 >= 2)
        {
          uint64_t v45 = v32 & 0x3FFFFFFFFFFFFFFFLL;
          do
          {
            uint64_t v46 = 0;
            int v47 = *v30;
            long long v48 = v30;
            do
            {
              uint64_t v49 = v48;
              v48 += v46 + 1;
              uint64_t v50 = 2 * v46;
              uint64_t v46 = (2 * v46) | 1;
              uint64_t v51 = v50 + 2;
              if (v51 < v45 && *(float *)(v37 + 4 * *v48) > *(float *)(v37 + 4 * v48[1]))
              {
                ++v48;
                uint64_t v46 = v51;
              }
              *uint64_t v49 = *v48;
            }
            while (v46 <= (uint64_t)((unint64_t)(v45 - 2) >> 1));
            if (v48 == --v41)
            {
              int *v48 = v47;
            }
            else
            {
              int *v48 = *v41;
              int *v41 = v47;
              uint64_t v52 = (char *)v48 - (char *)v30 + 4;
              if (v52 >= 5)
              {
                unint64_t v53 = (((unint64_t)v52 >> 2) - 2) >> 1;
                long long v54 = &v30[v53];
                uint64_t v55 = *v54;
                uint64_t v56 = *v48;
                float v57 = *(float *)(v37 + 4 * v56);
                if (*(float *)(v37 + 4 * v55) > v57)
                {
                  do
                  {
                    int *v48 = v55;
                    long long v48 = v54;
                    if (!v53) {
                      break;
                    }
                    unint64_t v53 = (v53 - 1) >> 1;
                    long long v54 = &v30[v53];
                    uint64_t v55 = *v54;
                  }
                  while (*(float *)(v37 + 4 * v55) > v57);
                  int *v48 = v56;
                }
              }
            }
            BOOL v58 = v45-- <= 2;
          }
          while (!v58);
        }
      }
      *(void *)(*(void *)(v136 + 160) + 24) = v33 + 4 * v145 * v137;
      *(_DWORD *)(**(void **)v148 + 16) = v137;
      uint64_t v26 = v143;
      unint64_t v59 = v143;
      if (v141)
      {
        uint64_t v60 = *(void *)(a1 + 464);
        if (*(void *)(a1 + 472) == v60) {
          goto LABEL_108;
        }
        unint64_t v61 = 0;
        unint64_t v59 = 0;
        while (v59 < v143 || v61 < v144 && v59 < v32)
        {
          unint64_t v62 = *(int *)(v60 + 4 * v59);
          uint64_t v63 = *(void *)(a1 + 416);
          unint64_t v64 = (*(void *)(a1 + 424) - v63) >> 4;
          if (v64 <= v62) {
            Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("hierarchical_inner_product_kernel_cpu: invalid cluster index %d > %zu", v62, v64);
          }
          v61 += *(int *)(*(uint64_t (**)(void))(**(void **)(v63 + 16 * v62) + 384))(*(void *)(v63 + 16 * v62));
          ++v59;
          uint64_t v60 = *(void *)(a1 + 464);
          if (v59 >= (*(void *)(a1 + 472) - v60) >> 2) {
            goto LABEL_102;
          }
        }
      }
      if (v59) {
        break;
      }
      if (v131 < 2)
      {
LABEL_108:
        uint64_t v66 = 0;
        unint64_t v59 = 0;
        char v73 = 1;
LABEL_109:
        uint64_t v176 = 0;
        long long v174 = 0u;
        long long v175 = 0u;
        long long v172 = 0u;
        long long v173 = 0u;
        long long v170 = 0u;
        long long v171 = 0u;
        long long v168 = 0u;
        long long v169 = 0u;
        long long v166 = 0u;
        long long v167 = 0u;
        long long v164 = 0u;
        long long v165 = 0u;
        long long v162 = 0u;
        long long v163 = 0u;
        long long v160 = 0u;
        long long v161 = 0u;
        long long v159 = 0u;
        long long v157 = 0u;
        long long v158 = 0u;
        long long v155 = 0u;
        long long v156 = 0u;
        long long v153 = 0u;
        long long v154 = 0u;
        __A[0] = 0x1000000000000;
        long long v152 = 0u;
        __A[1] = v66;
        *((void *)&v159 + 1) = *(void *)(*(void *)(a1 + 584) + 24);
        LODWORD(v160) = 65568;
        DWORD1(v162) = 0x10000;
        *((void *)&v162 + 1) = v66;
        *((void *)&v170 + 1) = *(void *)(*(void *)v132 + 24);
        LODWORD(v171) = 65568;
        LODWORD(v173) = 11;
        if (MEMORY[0x192FEE6A0](__A, 0, 1, v66, v66) == -1)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
          Espresso::invalid_state_error::invalid_state_error(exception);
        }
        if (v73)
        {
          unint64_t v74 = 0;
LABEL_122:
          uint64_t v26 = v143;
          if (v21 == 100002)
          {
            Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(__A, *v126 + 2);
            int v85 = v124;
            if (v74 < v124)
            {
              float v149 = -1.0;
              float v150 = 0.0;
              vDSP_vfill(&v150, (float *)(*(void *)(v128 + 24) + 4 * v145 * v125), 1, v125);
              vDSP_vfill(&v149, (float *)(*(void *)(__A[0] + 24) + 4 * v145 * v125), 1, v125);
              int v85 = v74;
            }
            uint64_t v86 = *(int **)(a1 + 488);
            if (v74)
            {
              uint64_t v87 = 0;
              uint64_t v88 = 4 * v74;
              do
              {
                v86[v87] = v87;
                ++v87;
                v88 -= 4;
              }
              while (v88);
            }
            uint64_t v90 = *(void *)(v127 + 160);
            uint64_t v89 = *(std::__shared_weak_count **)(v127 + 168);
            if (v89) {
              atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v91 = v85;
            if (v85)
            {
              unint64_t v140 = v89;
              int v146 = v85;
              if (v85 >= 2)
              {
                unint64_t v92 = ((unint64_t)v85 - 2) >> 1;
                unint64_t v93 = v92 + 1;
                unint64_t v94 = &v86[v92];
                do
                {
                  std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1 &,std::__wrap_iter<int *>>((uint64_t)v86, v90, v91, v94--);
                  --v93;
                }
                while (v93);
              }
              uint64_t v89 = v140;
              if (v74 != v91)
              {
                uint64_t v95 = 4 * v74;
                uint64_t v96 = 4 * v91;
                do
                {
                  uint64_t v97 = v86[(unint64_t)v96 / 4];
                  uint64_t v98 = *v86;
                  if (*(float *)(*(void *)(v90 + 24) + 4 * v97) > *(float *)(*(void *)(v90 + 24) + 4 * v98))
                  {
                    v86[(unint64_t)v96 / 4] = v98;
                    *uint64_t v86 = v97;
                    std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::hierarchical_inner_product_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1 &,std::__wrap_iter<int *>>((uint64_t)v86, v90, v91, v86);
                  }
                  v96 += 4;
                }
                while (v95 != v96);
              }
              int v85 = v146;
              if (v146 >= 2)
              {
                unsigned __int16 v99 = &v86[v146];
                uint64_t v100 = v91;
                do
                {
                  uint64_t v101 = 0;
                  int v102 = *v86;
                  unint64_t v103 = v86;
                  do
                  {
                    unint64_t v104 = v103;
                    v103 += v101 + 1;
                    uint64_t v105 = 2 * v101;
                    uint64_t v101 = (2 * v101) | 1;
                    uint64_t v106 = v105 + 2;
                    if (v106 < v100
                      && *(float *)(*(void *)(v90 + 24) + 4 * *v103) > *(float *)(*(void *)(v90 + 24)
                                                                                    + 4 * v103[1]))
                    {
                      ++v103;
                      uint64_t v101 = v106;
                    }
                    *unint64_t v104 = *v103;
                  }
                  while (v101 <= (uint64_t)((unint64_t)(v100 - 2) >> 1));
                  if (v103 == --v99)
                  {
                    *unint64_t v103 = v102;
                  }
                  else
                  {
                    *unint64_t v103 = *v99;
                    *unsigned __int16 v99 = v102;
                    uint64_t v107 = (char *)v103 - (char *)v86 + 4;
                    if (v107 >= 5)
                    {
                      unint64_t v108 = (((unint64_t)v107 >> 2) - 2) >> 1;
                      int v109 = &v86[v108];
                      uint64_t v110 = *(void *)(v90 + 24);
                      uint64_t v111 = *v109;
                      uint64_t v112 = *v103;
                      float v113 = *(float *)(v110 + 4 * v112);
                      if (*(float *)(v110 + 4 * v111) > v113)
                      {
                        do
                        {
                          *unint64_t v103 = v111;
                          unint64_t v103 = v109;
                          if (!v108) {
                            break;
                          }
                          unint64_t v108 = (v108 - 1) >> 1;
                          int v109 = &v86[v108];
                          uint64_t v111 = *v109;
                        }
                        while (*(float *)(v110 + 4 * v111) > v113);
                        *unint64_t v103 = v112;
                      }
                    }
                  }
                  BOOL v58 = v100-- <= 2;
                }
                while (!v58);
              }
            }
            if (v89) {
              nitro::nitro_function::nitro_function(v89);
            }
            if (v85)
            {
              uint64_t v114 = *(void *)(*(void *)v132 + 24);
              BOOL v115 = *(int **)(a1 + 488);
              unint64_t v116 = (float *)(*(void *)(__A[0] + 24) + v142);
              uint64_t v117 = (float *)(*(void *)(v128 + 24) + v142);
              do
              {
                uint64_t v119 = *v115++;
                uint64_t v118 = v119;
                float v120 = *(float *)(v114 + 4 * v119);
                float *v117 = v120;
                double v121 = v120;
                float v122 = -1.0;
                if (v121 > 0.000001) {
                  float v122 = *(float *)(*(void *)(*(void *)(a1 + 600) + 24) + 4 * v118);
                }
                *v116++ = v122;
                ++v117;
                --v91;
              }
              while (v91);
            }
            if (__A[1]) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)__A[1]);
            }
            uint64_t v26 = v143;
          }
          goto LABEL_165;
        }
LABEL_112:
        uint64_t v75 = 0;
        unint64_t v74 = 0;
        uint64_t v76 = v189;
        do
        {
          uint64_t v77 = 16 * *(int *)(*(void *)(a1 + 464) + 4 * v75);
          int v78 = (int *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 416) + v77) + 384))(*(void *)(*(void *)(a1 + 416) + v77));
          uint64_t v79 = *v78;
          if (v79)
          {
            unint64_t v80 = *(int **)(*(void *)(*(void *)(a1 + 440) + v77) + 16);
            uint64_t v81 = 4 * v74;
            uint64_t v82 = *v78;
            do
            {
              int v83 = *v80++;
              int v84 = v83 & ~(v83 >> 31);
              if (v84 >= v13) {
                int v84 = v13 - 1;
              }
              if (v21 == 100002) {
                *(float *)(*(void *)(*(void *)(a1 + 600) + 24) + v81) = (float)v84;
              }
              else {
                *(_DWORD *)(*(void *)(v76 + 24) + 4 * (v145 * v13 + v84)) = *(_DWORD *)(*(void *)(*(void *)v147 + 24)
              }
                                                                                        + v81);
              v81 += 4;
              --v82;
            }
            while (v82);
          }
          v74 += v79;
          ++v75;
        }
        while (v75 != v59);
        goto LABEL_122;
      }
LABEL_165:
      v142 += v133;
      if (++v145 == v138) {
        goto LABEL_166;
      }
    }
LABEL_102:
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    do
    {
      unint64_t v67 = *(int *)(*(void *)(a1 + 464) + 4 * v65);
      uint64_t v68 = *(void *)(a1 + 416);
      unint64_t v69 = (*(void *)(a1 + 424) - v68) >> 4;
      if (v69 <= v67) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("hierarchical_inner_product_kernel_cpu: invalid cluster index %d > %zu", v67, v69);
      }
      uint64_t v70 = (void *)(v68 + 16 * v67);
      uint64_t v71 = *(int *)(*(uint64_t (**)(void))(*(void *)*v70 + 384))(*v70);
      uint64_t v72 = *(void *)(v20 + 160);
      *(void *)(v72 + 24) = *(void *)(*(void *)(a1 + 584) + 24) + 4 * v66;
      *(_DWORD *)(v72 + 16) = v71;
      *(_DWORD *)(**(void **)(a1 + 512) + 16) = v71;
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v70 + 16))(*v70, a2, a1 + 512, v148);
      v66 += v71;
      ++v65;
    }
    while (v59 != v65);
    if (v131 < 2)
    {
      char v73 = 0;
      goto LABEL_109;
    }
    goto LABEL_112;
  }
LABEL_166:
  if (v190) {
    nitro::nitro_function::nitro_function(v190);
  }
  if (v192) {
    nitro::nitro_function::nitro_function(v192);
  }
  if (v194) {
    nitro::nitro_function::nitro_function(v194);
  }
}