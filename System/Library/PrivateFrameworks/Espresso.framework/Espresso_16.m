void sub_1929594E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::generic_elementwise_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  __int32 v23 = 0;
  memset(v26, 0, sizeof(v26));
  v12 = (char *)operator new(0xF8uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)v12 = &unk_1EE389DF0;
  *((void *)v12 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((void *)v12 + 30) = 0;
  v24 = v12 + 24;
  v25 = (std::__shared_weak_count *)v12;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    v15 = (std::__shared_weak_count *)*((void *)v12 + 12);
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = v14;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  else
  {
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = 0;
  }
  std::string::operator=((std::string *)(v24 + 16), a4);
  std::string::operator=((std::string *)(v24 + 40), a3);
  v16 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  v17 = v24;
  *((_DWORD *)v24 + 2) = (**v16)(v16);
  uint64_t v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(void *)(v18 + 208));
    }
    else {
      std::string __p = *(std::string *)(v18 + 200);
    }
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v19) {
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(void *)v19 + 12);
    }
  }
  if (v26 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v26, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v26[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v26[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  __int32 v23 = a1[3].i32[2];
  unint64_t v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    uint64_t v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v23);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v23);
    uint64_t v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
}

void sub_19295978C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void ___ZN8Espresso17ANECompilerEngine7context26handle_photon_quantizationEPNS_3netEPNS_16abstract_contextE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a2->i64[0] + 408))(&v41);
  if (*(void *)(a2->i64[0] + 8) == *(void *)(a1 + 32)
    && !*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 384))(a2->i64[0]) + 4)
    && !*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 384))(a2->i64[0]) + 28))
  {
    v4 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 384))(a2->i64[0]);
    if (!*((_DWORD *)v4 + 6))
    {
      if (v41)
      {
        unint64_t v6 = *(int *)(v41 + 8);
        float v7 = 0.0;
        float v8 = 0.0;
        if (v6 >= 4)
        {
          uint64_t v26 = 0;
          unint64_t v27 = v6 >> 2;
          if (v27 <= 1) {
            uint64_t v28 = 1;
          }
          else {
            uint64_t v28 = v27;
          }
          v29 = (float *)(*(void *)(v41 + 16) + 8);
          while (1)
          {
            if (!v26)
            {
              float v7 = *(v29 - 2);
              float v8 = *(v29 - 1);
            }
            if (fabsf(*v29) >= 0.00000011921) {
              break;
            }
            float v30 = vabds_f32(*(v29 - 2), v7);
            BOOL v31 = fabsf(v29[1] + -1.0) < 0.00000011921 && v30 < 0.00000011921;
            float v32 = vabds_f32(*(v29 - 1), v8);
            if (!v31 || v32 >= 0.00000011921) {
              break;
            }
            ++v26;
            v29 += 4;
            if (v28 == v26) {
              goto LABEL_10;
            }
          }
        }
        else
        {
LABEL_10:
          float v9 = fabsf(v8);
          float v10 = fabsf(v7 + -1.0);
          if (v9 < 0.00000011921 || v10 < 0.00000011921)
          {
            v12 = Espresso::espresso_os_log_subsystem(v4, v5);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 67109376;
              BOOL v44 = v9 >= 0.00000011921;
              *(_WORD *)v45 = 1024;
              *(_DWORD *)&v45[2] = v10 >= 0.00000011921;
              _os_log_debug_impl(&dword_1920CB000, v12, OS_LOG_TYPE_DEBUG, "handle_photon_quantization: strength reduction of photon bn %d %d\n", buf, 0xEu);
            }

            Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::remove_layer(a2);
            *(void *)&v45[4] = 0x358637BD00000000;
            int v46 = 0;
            char v47 = 0;
            int v48 = 0;
            int v49 = 0;
            if (v9 < 0.00000011921) {
              int v13 = 3;
            }
            else {
              int v13 = 2;
            }
            *(_DWORD *)buf = v13;
            BOOL v44 = 0;
            if (v9 < 0.00000011921) {
              float v14 = v7;
            }
            else {
              float v14 = v8;
            }
            *(float *)v45 = v14;
            Espresso::abstract_engine_factory::shared(&v37);
            uint64_t v15 = v37;
            uint64_t v16 = a2->i64[0];
            std::string::basic_string[abi:ne180100]<0>(&__p, "elementwise");
            v17 = *(uint64_t (****)(void))(*(void *)(a2->i64[0] + 8) + 8);
            LODWORD(v34) = (**v17)(v17);
            Espresso::abstract_engine_factory::make_kernel_priv(v15, v16 + 8, (uint64_t)&__p, (uint64_t)buf, (int *)&v34);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v38) {
              nitro::nitro_function::nitro_function(v38);
            }
            uint64_t v18 = v40;
            v35[0] = v39;
            v35[1] = v40;
            if (v40) {
              atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "elementwise");
            uint64_t v19 = a2[1].i64[0];
            uint64_t v20 = *(void *)(a1 + 40) + 56;
            unint64_t v21 = a2[3].i32[2];
            unint64_t v37 = v21;
            v22 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v20, v21, &v37);
            uint64_t v23 = *(void *)(a1 + 40) + 96;
            unint64_t v24 = a2[3].i32[2];
            unint64_t v34 = v24;
            v25 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v23, v24, &v34);
            Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::add_kernel(a2, v35, &__p, (const std::string *)(v19 + 16), v22 + 3, v25 + 3);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v18) {
              nitro::nitro_function::nitro_function(v18);
            }
            if (v40) {
              nitro::nitro_function::nitro_function(v40);
            }
          }
        }
      }
    }
  }
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
}

void sub_192959BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::single_match_replace<Espresso::generic_batchnorm_kernel>(Espresso::net *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v27, a1);
  long long v25 = 0u;
  memset(v26, 0, 28);
  long long v24 = 0u;
  v26[4] = a1;
  uint64_t v4 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      LODWORD(v26[3]) = v5;
      long long v6 = *(_OWORD *)(v4 + 16 * v5);
      uint64_t v7 = *(void *)(v4 + 16 * v5 + 8);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      float v8 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      long long v25 = v6;
      if (v8)
      {
        nitro::nitro_function::nitro_function(v8);
        uint64_t v9 = v25;
      }
      else
      {
        uint64_t v9 = v6;
      }
      float v10 = *(void **)(v9 + 64);
      if (v10
      {
        uint64_t v11 = *(void *)(v9 + 72);
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
      *(void *)&long long v24 = v10;
      *((void *)&v24 + 1) = v11;
      if (v12)
      {
        nitro::nitro_function::nitro_function(v12);
        float v10 = (void *)v24;
      }
      if (v10) {
        v3[2](v3, &v24);
      }
      ++v5;
      uint64_t v4 = *((void *)a1 + 4);
    }
    while (v5 < (*((void *)a1 + 5) - v4) >> 4);
    int v13 = (uint64_t *)v26[1];
    if (v26[0] != v26[1])
    {
      int v14 = 0;
      uint64_t v15 = (uint64_t *)(v26[0] + 32);
      do
      {
        uint64_t v16 = v15 - 4;
        int v17 = *((_DWORD *)v15 - 8) + v14;
        *((_DWORD *)v15 - 8) = v17;
        uint64_t v18 = (void **)*(v15 - 3);
        if (v18)
        {
          LODWORD(v33[0]) = v17;
          v33[1] = v18;
          uint64_t v19 = (std::__shared_weak_count *)*(v15 - 2);
          unint64_t v34 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          memset(v35, 0, sizeof(v35));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v35, *(v15 - 1), *v15, 0xAAAAAAAAAAAAAAABLL * ((*v15 - *(v15 - 1)) >> 3));
          memset(v36, 0, sizeof(v36));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v36, v15[2], v15[3], 0xAAAAAAAAAAAAAAABLL * ((v15[3] - v15[2]) >> 3));
          unint64_t v21 = 0;
          v22 = 0;
          uint64_t v23 = 0;
          BOOL v31 = (void **)&v21;
          char v32 = 0;
          unint64_t v21 = (uint64_t *)operator new(0x48uLL);
          v22 = v21;
          uint64_t v23 = v21 + 9;
          v22 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v23, (uint64_t)v33, (uint64_t)&v37, (uint64_t)v21);
          Espresso::net::insert_layers((uint64_t)a1, &v21);
          BOOL v31 = (void **)&v21;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v31);
          BOOL v31 = (void **)v36;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          BOOL v31 = (void **)v35;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
          int v20 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          int v20 = -1;
        }
        v14 += v20;
        v15 += 9;
      }
      while (v16 + 9 != v13);
    }
  }
  v33[0] = (void **)v26;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v33);
  if (*((void *)&v25 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v25 + 1));
  }
  if (*((void *)&v24 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v30);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v29);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
}

void sub_192959FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *,false>(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
  while (2)
  {
    float v10 = a2 - 1;
    uint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = a2 - v11;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v40 = *v11;
                if ((int)*v10 > (int)*v11)
                {
                  *uint64_t v11 = *v10;
                  *float v10 = v40;
                }
                break;
              case 3uLL:
                result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v11, v11 + 1, a2 - 1);
                break;
              case 4uLL:
                result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v11, v11 + 1, v11 + 2, a2 - 1);
                break;
              case 5uLL:
                uint64_t v41 = v11 + 1;
                v42 = v11 + 2;
                v43 = v11 + 3;
                result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v11, v11 + 1, v11 + 2, v11 + 3);
                uint64_t v44 = v11[3];
                if ((int)*v10 > (int)v44)
                {
                  uint64_t *v43 = *v10;
                  *float v10 = v44;
                  uint64_t v45 = *v43;
                  uint64_t v46 = *v42;
                  if ((int)*v43 > (int)*v42)
                  {
                    uint64_t *v42 = v45;
                    uint64_t *v43 = v46;
                    uint64_t v47 = *v41;
                    if ((int)v45 > (int)*v41)
                    {
                      v11[1] = v45;
                      v11[2] = v47;
                      uint64_t v48 = *v11;
                      if ((int)v45 > (int)*v11)
                      {
                        *uint64_t v11 = v45;
                        v11[1] = v48;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            int v49 = v11 + 1;
            BOOL v51 = v11 == a2 || v49 == a2;
            if (a4)
            {
              if (!v51)
              {
                uint64_t v52 = 8;
                v53 = v11;
                do
                {
                  uint64_t v55 = *v53;
                  uint64_t v54 = v53[1];
                  v53 = v49;
                  if ((int)v54 > (int)v55)
                  {
                    uint64_t v56 = v52;
                    do
                    {
                      *(uint64_t *)((char *)v11 + v56) = v55;
                      uint64_t v57 = v56 - 8;
                      if (v56 == 8)
                      {
                        v58 = v11;
                        goto LABEL_82;
                      }
                      uint64_t v55 = *(uint64_t *)((char *)v11 + v56 - 16);
                      v56 -= 8;
                    }
                    while ((int)v54 > (int)v55);
                    v58 = (uint64_t *)((char *)v11 + v57);
LABEL_82:
                    uint64_t *v58 = v54;
                  }
                  int v49 = v53 + 1;
                  v52 += 8;
                }
                while (v53 + 1 != a2);
              }
            }
            else if (!v51)
            {
              do
              {
                uint64_t v87 = *v9;
                uint64_t v86 = v9[1];
                uint64_t v9 = v49;
                if ((int)v86 > (int)v87)
                {
                  do
                  {
                    *int v49 = v87;
                    uint64_t v87 = *(v49 - 2);
                    --v49;
                  }
                  while ((int)v86 > (int)v87);
                  *int v49 = v86;
                }
                int v49 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v59 = (v13 - 2) >> 1;
              int64_t v60 = v59;
              do
              {
                int64_t v61 = v60;
                if (v59 >= v60)
                {
                  uint64_t v62 = (2 * v60) | 1;
                  v63 = &v11[v62];
                  uint64_t v64 = *v63;
                  if (2 * v61 + 2 < (uint64_t)v13 && (int)v64 > (int)v63[1])
                  {
                    uint64_t v64 = v63[1];
                    ++v63;
                    uint64_t v62 = 2 * v61 + 2;
                  }
                  result = &v11[v61];
                  uint64_t v65 = *result;
                  if ((int)v64 <= (int)*result)
                  {
                    do
                    {
                      v66 = v63;
                      *result = v64;
                      if (v59 < v62) {
                        break;
                      }
                      uint64_t v67 = (2 * v62) | 1;
                      v63 = &v11[v67];
                      uint64_t v68 = 2 * v62 + 2;
                      uint64_t v64 = *v63;
                      if (v68 < (uint64_t)v13 && (int)v64 > (int)v63[1])
                      {
                        uint64_t v64 = v63[1];
                        ++v63;
                        uint64_t v67 = v68;
                      }
                      result = v66;
                      uint64_t v62 = v67;
                    }
                    while ((int)v64 <= (int)v65);
                    uint64_t *v66 = v65;
                  }
                }
                int64_t v60 = v61 - 1;
              }
              while (v61);
              uint64_t v69 = (unint64_t)v12 >> 3;
              do
              {
                uint64_t v70 = 0;
                uint64_t v71 = *v11;
                v72 = v11;
                do
                {
                  v73 = &v72[v70];
                  uint64_t v76 = v73[1];
                  v74 = v73 + 1;
                  uint64_t v75 = v76;
                  uint64_t v77 = (2 * v70) | 1;
                  uint64_t v78 = 2 * v70 + 2;
                  if (v78 < v69 && (int)v75 > (int)v74[1])
                  {
                    uint64_t v75 = v74[1];
                    ++v74;
                    uint64_t v77 = v78;
                  }
                  uint64_t *v72 = v75;
                  v72 = v74;
                  uint64_t v70 = v77;
                }
                while (v77 <= (uint64_t)((unint64_t)(v69 - 2) >> 1));
                if (v74 == --a2)
                {
                  uint64_t *v74 = v71;
                }
                else
                {
                  uint64_t *v74 = *a2;
                  *a2 = v71;
                  uint64_t v79 = (char *)v74 - (char *)v11 + 8;
                  if (v79 >= 9)
                  {
                    unint64_t v80 = (((unint64_t)v79 >> 3) - 2) >> 1;
                    v81 = &v11[v80];
                    uint64_t v82 = *v81;
                    uint64_t v83 = *v74;
                    if ((int)*v81 > (int)*v74)
                    {
                      do
                      {
                        v84 = v81;
                        uint64_t *v74 = v82;
                        if (!v80) {
                          break;
                        }
                        unint64_t v80 = (v80 - 1) >> 1;
                        v81 = &v11[v80];
                        uint64_t v82 = *v81;
                        v74 = v84;
                      }
                      while ((int)*v81 > (int)v83);
                      uint64_t *v84 = v83;
                    }
                  }
                }
              }
              while (v69-- > 2);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = &v11[v13 >> 1];
          if ((unint64_t)v12 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v9 + 2, &v9[v14 + 1], a2 - 3);
            result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v15 - 1, v15, &v9[v14 + 1]);
            uint64_t v16 = *v9;
            *uint64_t v9 = *v15;
            uint64_t *v15 = v16;
          }
          else
          {
            result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(&v9[v13 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v17 = *v9;
          if ((a4 & 1) != 0 || *((_DWORD *)v9 - 2) > (int)v17) {
            break;
          }
          if ((int)v17 <= *(_DWORD *)v10)
          {
            char v32 = v9 + 1;
            do
            {
              uint64_t v11 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while ((int)v17 <= *(_DWORD *)v11);
          }
          else
          {
            uint64_t v11 = v9;
            do
              int v31 = *((_DWORD *)v11++ + 2);
            while ((int)v17 <= v31);
          }
          v33 = a2;
          if (v11 < a2)
          {
            v33 = a2;
            do
              int v34 = *((_DWORD *)v33-- - 2);
            while ((int)v17 > v34);
          }
          if (v11 < v33)
          {
            uint64_t v35 = *v11;
            uint64_t v36 = *v33;
            do
            {
              *uint64_t v11 = v36;
              uint64_t *v33 = v35;
              do
              {
                uint64_t v37 = v11[1];
                ++v11;
                uint64_t v35 = v37;
              }
              while ((int)v17 <= (int)v37);
              do
              {
                uint64_t v38 = *--v33;
                uint64_t v36 = v38;
              }
              while ((int)v17 > (int)v38);
            }
            while (v11 < v33);
          }
          uint64_t v39 = v11 - 1;
          BOOL v4 = v11 - 1 >= v9;
          BOOL v5 = v11 - 1 == v9;
          if (v11 - 1 != v9) {
            *uint64_t v9 = *v39;
          }
          a4 = 0;
          *uint64_t v39 = v17;
        }
        uint64_t v18 = v9;
        do
        {
          uint64_t v19 = v18;
          uint64_t v21 = v18[1];
          ++v18;
          uint64_t v20 = v21;
        }
        while ((int)v17 < (int)v21);
        v22 = a2;
        if (v19 == v9)
        {
          v22 = a2;
          do
          {
            if (v18 >= v22) {
              break;
            }
            int v24 = *((_DWORD *)v22-- - 2);
          }
          while ((int)v17 >= v24);
        }
        else
        {
          do
            int v23 = *((_DWORD *)v22-- - 2);
          while ((int)v17 >= v23);
        }
        if (v18 < v22)
        {
          uint64_t v25 = *v22;
          uint64_t v26 = v18;
          unint64_t v27 = v22;
          do
          {
            *uint64_t v26 = v25;
            *unint64_t v27 = v20;
            do
            {
              uint64_t v19 = v26;
              uint64_t v28 = v26[1];
              ++v26;
              uint64_t v20 = v28;
            }
            while ((int)v17 < (int)v28);
            do
            {
              uint64_t v29 = *--v27;
              uint64_t v25 = v29;
            }
            while ((int)v17 >= (int)v29);
          }
          while (v26 < v27);
        }
        if (v19 != v9) {
          *uint64_t v9 = *v19;
        }
        *uint64_t v19 = v17;
        if (v18 >= v22) {
          break;
        }
LABEL_31:
        result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *,false>(v9, v19, a3, a4 & 1);
        a4 = 0;
        uint64_t v11 = v19 + 1;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v9, v19);
      uint64_t v11 = v19 + 1;
      result = (uint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(v19 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_31;
      }
    }
    a2 = v19;
    if (!v30) {
      continue;
    }
    return result;
  }
}

void ___ZN8Espresso17ANECompilerEngine7context26handle_photon_quantizationEPNS_3netEPNS_16abstract_contextE_block_invoke_392(uint64_t a1, uint64_t a2)
{
  BOOL v5 = *(std::__shared_weak_count **)(a2 + 8);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = v4[1];
    uint64_t v7 = (uint64_t *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 32);
    nitro::nitro_function::nitro_function(v5);
    if (v6 != v8) {
      return;
    }
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 32);
    if (v4[1] != *(void *)(a1 + 32)) {
      return;
    }
  }
  uint64_t v9 = *(void **)(a2 + 16);
  if (v9 && (float v10 = *(std::__shared_weak_count **)(a2 + 24)) != 0)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v11 = v9[1];
    uint64_t v12 = *v7;
    nitro::nitro_function::nitro_function(v10);
    if (v11 != v12) {
      return;
    }
    uint64_t v9 = *(void **)(a2 + 16);
  }
  else if (v9[1] != *v7)
  {
    return;
  }
  if (*(_DWORD *)(*(uint64_t (**)(void *))(*v9 + 320))(v9) == 3)
  {
    uint64_t v13 = *(void *)(a1 + 40) + 96;
    unint64_t v14 = *(int *)(a2 + 112);
    v33.__r_.__value_.__r.__words[0] = v14;
    uint64_t v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, v14, &v33);
    if (v15[3] != v15[4])
    {
      uint64_t v16 = *(void *)(a1 + 40) + 96;
      unint64_t v17 = *(int *)(a2 + 112);
      v32.__r_.__value_.__r.__words[0] = v17;
      uint64_t v18 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v16, v17, &v32)[3];
      if (*((char *)v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v18, *((void *)v18 + 1));
      }
      else
      {
        long long v19 = *v18;
        v33.__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v19;
      }
      uint64_t v20 = *(void *)(a1 + 40) + 96;
      unint64_t v21 = *(int *)(a2 + 116);
      unint64_t v31 = v21;
      v22 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v20, v21, &v31)[3];
      if (*((char *)v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v22, *((void *)v22 + 1));
      }
      else
      {
        long long v23 = *v22;
        v32.__r_.__value_.__r.__words[2] = *((void *)v22 + 2);
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v23;
      }
      uint64_t v24 = *(void *)(*(void *)a2 + 64);
      if (v24)
      {
        uint64_t v25 = *(void *)(a1 + 40);
        uint64_t v26 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v25 + 352, &v33);
        if ((void *)(v25 + 360) == v26 || (int v27 = *((_DWORD *)v26 + 16), v27 != 2) && v27 != 4)
        {
          if (*(_DWORD *)(v24 + 8))
          {
            unint64_t v28 = 0;
            do
            {
              uint64_t v29 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 320))(*(void *)(a2 + 16));
              uint64_t v30 = *(void *)(*(void *)a2 + 64);
              *(float *)(*(void *)(v30 + 16) + 4 * v28) = *(float *)(v29 + 8)
                                                          * *(float *)(*(void *)(v30 + 16) + 4 * v28);
              ++v28;
            }
            while (v28 < *(unsigned int *)(v30 + 8));
          }
          Espresso::fuse_vertical_state<Espresso::ANECompilerEngine::ane_kernel,Espresso::generic_elementwise_kernel>::remove_second_layer(a2);
        }
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_19295A998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::fuse_vertical_state<Espresso::ANECompilerEngine::ane_kernel,Espresso::generic_elementwise_kernel>::remove_second_layer(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 120) + 32);
  v3 = *(char **)(*(void *)(v2 + 16 * *(int *)(a1 + 112)) + 64);
  uint64_t v4 = *(void *)(*(void *)(v2 + 16 * *(int *)(a1 + 116)) + 64);
  BOOL v5 = operator new(8uLL);
  void *v5 = v4;
  v26[1] = (uint64_t)(v5 + 1);
  v26[2] = (uint64_t)(v5 + 1);
  v26[0] = (uint64_t)v5;
  Espresso::merge_kernel_attributes(v3, v26);
  operator delete(v5);
  uint64_t v6 = *(void *)(a1 + 120) + 96;
  unint64_t v7 = *(int *)(a1 + 116);
  v26[0] = v7;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v7, v26);
  uint64_t v9 = *(void *)(a1 + 120) + 96;
  unint64_t v10 = *(int *)(a1 + 112);
  unint64_t v25 = v10;
  uint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, &v25);
  if (v11 != v8) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v11 + 3), (std::string *)v8[3], (std::string *)v8[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[4] - v8[3]) >> 3));
  }
  uint64_t v12 = *(char **)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  if ((unint64_t)v12 >= v13)
  {
    uint64_t v15 = *(char **)(a1 + 64);
    uint64_t v16 = (v12 - v15) >> 2;
    if ((unint64_t)(v16 + 1) >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v17 = v13 - (void)v15;
    unint64_t v18 = (uint64_t)(v13 - (void)v15) >> 1;
    if (v18 <= v16 + 1) {
      unint64_t v18 = v16 + 1;
    }
    BOOL v19 = v17 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v19) {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
      uint64_t v15 = *(char **)(a1 + 64);
      uint64_t v12 = *(char **)(a1 + 72);
    }
    else
    {
      uint64_t v21 = 0;
    }
    v22 = (_DWORD *)(v20 + 4 * v16);
    unint64_t v23 = v20 + 4 * v21;
    _DWORD *v22 = *(_DWORD *)(a1 + 116);
    unint64_t v14 = v22 + 1;
    while (v12 != v15)
    {
      int v24 = *((_DWORD *)v12 - 1);
      v12 -= 4;
      *--v22 = v24;
    }
    *(void *)(a1 + 64) = v22;
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v23;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v12 = *(_DWORD *)(a1 + 116);
    unint64_t v14 = v12 + 4;
  }
  *(void *)(a1 + 72) = v14;
}

void sub_19295AB68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  uint64_t v5 = *a3;
  if ((int)*a2 <= (int)*result)
  {
    if ((int)v5 > (int)v3)
    {
      *a2 = v5;
      *a3 = v3;
      uint64_t v6 = *result;
      if ((int)*a2 > (int)*result)
      {
        *result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if ((int)v5 <= (int)v3)
    {
      *result = v3;
      *a2 = v4;
      if ((int)*a3 <= (int)v4) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *result = v5;
    }
    *a3 = v4;
  }
  return result;
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(a1, a2, a3);
  uint64_t v9 = *a3;
  if ((int)*a4 > (int)*a3)
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if ((int)*a3 > (int)*a2)
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if ((int)*a2 > (int)*a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if ((int)v6 > (int)*a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      unint64_t v17 = a1 + 1;
      unint64_t v18 = a1 + 2;
      BOOL v19 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v20 = *(a2 - 1);
      uint64_t v21 = a1[3];
      if ((int)v20 > (int)v21)
      {
        *BOOL v19 = v20;
        *(a2 - 1) = v21;
        uint64_t v22 = *v19;
        uint64_t v23 = *v18;
        if ((int)*v19 > (int)*v18)
        {
          *unint64_t v18 = v22;
          *BOOL v19 = v23;
          uint64_t v24 = *v17;
          if ((int)v22 > (int)*v17)
          {
            a1[1] = v22;
            a1[2] = v24;
            uint64_t v25 = *a1;
            if ((int)v22 > (int)*a1)
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    if ((int)*v9 > (int)*v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if ((int)v12 <= (int)v13)
        {
          uint64_t v16 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      uint64_t v16 = a1;
LABEL_13:
      *uint64_t v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

void Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::remove_layer(int64x2_t *a1)
{
  memset(v7, 0, sizeof(v7));
  __int32 v4 = a1[3].i32[2];
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    uint64_t v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v4);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v4);
    uint64_t v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  uint64_t v8 = (void **)&v7[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_19295AF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  __int32 v23 = 0;
  memset(v26, 0, sizeof(v26));
  uint64_t v12 = (char *)operator new(0xF8uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = &unk_1EE389DF0;
  *((void *)v12 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((void *)v12 + 30) = 0;
  uint64_t v24 = v12 + 24;
  uint64_t v25 = (std::__shared_weak_count *)v12;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 12);
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = v14;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  else
  {
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = 0;
  }
  std::string::operator=((std::string *)(v24 + 16), a4);
  std::string::operator=((std::string *)(v24 + 40), a3);
  uint64_t v16 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  unint64_t v17 = v24;
  *((_DWORD *)v24 + 2) = (**v16)(v16);
  uint64_t v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(void *)(v18 + 208));
    }
    else {
      std::string __p = *(std::string *)(v18 + 200);
    }
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v19) {
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(void *)v19 + 12);
    }
  }
  if (v26 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v26, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v26[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v26[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  __int32 v23 = a1[3].i32[2];
  unint64_t v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    uint64_t v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v23);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v23);
    uint64_t v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
}

void sub_19295B1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void ___ZN8Espresso17ANECompilerEngine7context40transform_reshape_like_to_static_reshapeEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v58 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **(void **)(a1 + 48);
  if (*(void *)(a2->i64[0] + 8) == v2 || v2 == 0)
  {
    long long v54 = 0u;
    long long v53 = 0u;
    long long v52 = 0u;
    *(_DWORD *)BOOL v51 = a2[3].i32[2];
    *(void *)&v51[8] = 0;
    *(void *)&v51[16] = 0;
    unint64_t v6 = a2[2].u64[1];
    if (v6 >= a2[3].i64[0])
    {
      uint64_t v7 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v51);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v6, (uint64_t)v51);
      uint64_t v7 = v6 + 72;
      a2[2].i64[1] = v6 + 72;
    }
    a2[2].i64[1] = v7;
    *(void *)&long long v40 = (char *)&v53 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    *(void *)&long long v40 = &v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    if (*(void *)&v51[16]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v51[16]);
    }
    uint64_t v8 = **(void **)(a1 + 40) + 56;
    unint64_t v9 = a2[3].i32[2];
    *(void *)BOOL v51 = v9;
    int v10 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v8, v9, v51)[3];
    uint64_t v11 = **(void **)(a1 + 40) + 96;
    unint64_t v12 = a2[3].i32[2];
    *(void *)BOOL v51 = v12;
    uint64_t v13 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, v12, v51)[3];
    Espresso::abstract_engine_factory::shared(&v48);
    uint64_t v14 = v48;
    uint64_t v15 = a2->i64[0];
    std::string::basic_string[abi:ne180100]<0>(&v50, "reshape");
    uint64_t v16 = std::map<std::string,Espresso::blob_numerical_properties>::at(**(void **)(a1 + 40) + 184, v13);
    long long v17 = *(_OWORD *)(v16 + 16);
    uint64_t v18 = *(void *)(v16 + 32);
    long long v40 = *(_OWORD *)v16;
    long long v41 = v17;
    uint64_t v42 = v18;
    std::string __p = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v16 + 40), *(void *)(v16 + 48), (uint64_t)(*(void *)(v16 + 48) - *(void *)(v16 + 40)) >> 2);
    *(void *)&long long v52 = 0;
    WORD4(v52) = 1;
    HIDWORD(v52) = 2;
    *(_OWORD *)BOOL v51 = v40;
    *(void *)&v51[16] = v41;
    LODWORD(__str.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(*(void *)(a2->i64[0] + 8) + 8))();
    Espresso::abstract_engine_factory::make_kernel_priv(v14, v15 + 8, (uint64_t)&v50, (uint64_t)v51, (int *)&__str);
    if (__p)
    {
      uint64_t v44 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    unint64_t v20 = v46;
    uint64_t v19 = v47;
    if (v47) {
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = (char *)(*(uint64_t (**)(void *))(*v20 + 272))(v20);
    std::string::basic_string[abi:ne180100]<0>(&__str, v21);
    uint64_t v22 = a2[1].i64[0];
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v23 = *v10;
      v57.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v23;
    }
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    *(void *)BOOL v51 = &v36;
    v51[8] = 0;
    uint64_t v36 = (std::string *)operator new(0x18uLL);
    uint64_t v37 = v36;
    uint64_t v38 = v36 + 1;
    uint64_t v37 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v38, (long long *)&v57, &v58, v36);
    if (*((char *)v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)v13, *((void *)v13 + 1));
    }
    else
    {
      long long v24 = *v13;
      v55.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v24;
    }
    std::string v33 = 0;
    int v34 = 0;
    uint64_t v35 = 0;
    *(void *)BOOL v51 = &v33;
    v51[8] = 0;
    std::string v33 = (std::string *)operator new(0x18uLL);
    int v34 = v33;
    uint64_t v35 = v33 + 1;
    int v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v35, (long long *)&v55, (long long *)&v56, v33);
    *(_DWORD *)BOOL v51 = 0;
    *(_OWORD *)&v51[8] = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    uint64_t v25 = (char *)operator new(0xF8uLL);
    *((void *)v25 + 1) = 0;
    *((void *)v25 + 2) = 0;
    *(void *)uint64_t v25 = &unk_1EE389DF0;
    *((void *)v25 + 3) = &unk_1EE36C758;
    *(_OWORD *)(v25 + 40) = 0u;
    *(_OWORD *)(v25 + 56) = 0u;
    *(_OWORD *)(v25 + 72) = 0u;
    *(_OWORD *)(v25 + 88) = 0u;
    *(_OWORD *)(v25 + 104) = 0u;
    *(_OWORD *)(v25 + 120) = 0u;
    *(_OWORD *)(v25 + 136) = 0u;
    *(_OWORD *)(v25 + 152) = 0u;
    *(_OWORD *)(v25 + 161) = 0u;
    *((_OWORD *)v25 + 13) = 0u;
    *((_OWORD *)v25 + 14) = 0u;
    *((void *)v25 + 30) = 0;
    *(void *)&v51[8] = v25 + 24;
    *(void *)&v51[16] = v25;
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v26 = (std::__shared_weak_count *)*((void *)v25 + 12);
      *((void *)v25 + 11) = v20;
      *((void *)v25 + 12) = v19;
      if (v26) {
        nitro::nitro_function::nitro_function(v26);
      }
    }
    else
    {
      *((void *)v25 + 11) = v20;
      *((void *)v25 + 12) = 0;
    }
    std::string::operator=((std::string *)(*(void *)&v51[8] + 16), (const std::string *)(v22 + 16));
    std::string::operator=((std::string *)(*(void *)&v51[8] + 40), &__str);
    int v27 = (***(uint64_t (****)(void))(v20[1] + 8))(*(void *)(v20[1] + 8));
    uint64_t v28 = *(void *)&v51[8];
    *(_DWORD *)(*(void *)&v51[8] + 8) = v27;
    uint64_t v29 = a2[1].i64[0];
    if (v29)
    {
      *(_DWORD *)(v28 + 12) = *(_DWORD *)(v29 + 12);
      if (*(char *)(v29 + 223) < 0) {
        std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)(v29 + 200), *(void *)(v29 + 208));
      }
      else {
        std::string v50 = *(std::string *)(v29 + 200);
      }
      std::string::operator=((std::string *)(v28 + 200), &v50);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v30 = *(void *)(a2[4].i64[0] + 32);
      if (*(void *)(a2[4].i64[0] + 40) != v30) {
        *(_DWORD *)(v28 + 12) = *(_DWORD *)(*(void *)v30 + 12);
      }
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v52, v36, v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v53 + 8, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
    *(_DWORD *)BOOL v51 = a2[3].i32[2];
    unint64_t v31 = a2[2].u64[1];
    if (v31 >= a2[3].i64[0])
    {
      uint64_t v32 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v51);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)v51);
      uint64_t v32 = v31 + 72;
      a2[2].i64[1] = v31 + 72;
    }
    a2[2].i64[1] = v32;
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
    if (*(void *)&v51[16]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v51[16]);
    }
    *(void *)BOOL v51 = &v33;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    *(void *)BOOL v51 = &v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    **(unsigned char **)(a1 + 32) = 1;
    if (v47) {
      nitro::nitro_function::nitro_function(v47);
    }
    if (v49) {
      nitro::nitro_function::nitro_function(v49);
    }
  }
}

void sub_19295B84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,std::__shared_weak_count *a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char *a41)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a41);
  a41 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  if (*(char *)(v42 - 121) < 0) {
    operator delete(*(void **)(v42 - 144));
  }
  a41 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  if (*(char *)(v42 - 89) < 0) {
    operator delete(*(void **)(v42 - 112));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  if (a31) {
    nitro::nitro_function::nitro_function(a31);
  }
  if (a33) {
    nitro::nitro_function::nitro_function(a33);
  }
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c104_ZTSKZN8Espresso17ANECompilerEngine7context40transform_reshape_like_to_static_reshapeEPNS_3netEPS1_E3__0(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[2] = result;
  return result;
}

void Espresso::blob<unsigned char,4>::make(void *a1, int a2, int a3)
{
}

void *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_reshape_kernel,Espresso::base_kernel>(void *result, void *lpsrc, uint64_t a3)
{
  uint64_t v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  int v10 = operator new(0x60uLL);
  v10[1] = 0;
  v10[2] = 0;
  *int v10 = &unk_1EE389B18;
  v10[3] = &unk_1EE36BFD0;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  size_t v11 = a3 * (uint64_t)a2 * a4 * a5;
  unint64_t v12 = Espresso::kern_alloc_uninitialized((Espresso *)v11);
  bzero(v12, v11);
  v10[6] = v12;
  *((unsigned char *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_19295BB2C(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  __int32 v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context29decompose_layer_normalizationEPNS_3netEPS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(void *)(*(void *)a2 + 8) == v2 || v2 == 0) && (!v2 || *(void *)(*(void *)(a2 + 16) + 8) == v2))
  {
    uint64_t v7 = *(void *)(a1 + 40) + 56;
    unint64_t v8 = *(int *)(a2 + 112);
    *(void *)&long long v43 = *(int *)(a2 + 112);
    unint64_t v9 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v8, &v43)[3];
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v49.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v10;
    }
    uint64_t v11 = *(void *)(a1 + 40);
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v11 + 192), &v49))
    {
      *(void *)&long long v36 = &v49;
      unint64_t v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v11 + 184), &v49, (long long **)&v36);
      long long v13 = *(_OWORD *)(v12 + 72);
      long long v43 = *(_OWORD *)(v12 + 56);
      long long v44 = v13;
      uint64_t v14 = (const void *)*((void *)v12 + 12);
      uint64_t v45 = *((void *)v12 + 11);
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v46, v14, *((void *)v12 + 13), (uint64_t)(*((void *)v12 + 13) - (void)v14) >> 2);
      uint64_t v15 = *(void *)(a1 + 40) + 56;
      unint64_t v16 = *(int *)(a2 + 116);
      *(void *)&long long v36 = v16;
      long long v17 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v15, v16, &v36)[3];
      if (*((char *)v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)v17, *((void *)v17 + 1));
      }
      else
      {
        long long v18 = *v17;
        v42.__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v18;
      }
      uint64_t v19 = *(void *)(a1 + 40);
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v19 + 192), &v42))
      {
        std::string v50 = &v42;
        unint64_t v20 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v19 + 184), &v42, (long long **)&v50);
        long long v21 = *(_OWORD *)(v20 + 72);
        long long v36 = *(_OWORD *)(v20 + 56);
        long long v37 = v21;
        uint64_t v22 = (const void *)*((void *)v20 + 12);
        uint64_t v38 = *((void *)v20 + 11);
        std::string __p = 0;
        long long v40 = 0;
        uint64_t v41 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v22, *((void *)v20 + 13), (uint64_t)(*((void *)v20 + 13) - (void)v22) >> 2);
        uint64_t v23 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 320))(*(void *)(a2 + 16));
        if (*(_DWORD *)(v23 + 8) == 2
          && v36 == __PAIR128__(v43, 0x100000001)
          && v37 == DWORD2(v43)
          && DWORD1(v44) == 3
          && (DWORD1(v37) == 5 || DWORD1(v37) == -1 && v37 != 1))
        {
          *(_DWORD *)(v23 + 8) = 0;
          uint64_t v24 = *(void *)(a1 + 40);
          unint64_t v25 = *(int *)(a2 + 112);
          unint64_t v35 = v25;
          std::string v50 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v24 + 56, v25, &v35)[3];
          uint64_t v26 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v24 + 184), v50, (long long **)&v50);
          uint64_t v27 = *(void *)(a1 + 40);
          unint64_t v28 = *(int *)(a2 + 112);
          unint64_t v34 = v28;
          std::string v50 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v27 + 96, v28, &v34)[3];
          uint64_t v29 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v27 + 184), v50, (long long **)&v50);
          Espresso::layer_shape::operator=((uint64_t)(v29 + 56), (long long *)(v26 + 56));
          uint64_t v30 = *(void *)(*(void *)(a2 + 120) + 32);
          uint64_t v31 = *(int *)(a2 + 112);
          uint64_t v32 = *(int *)(a2 + 116);
          long long v33 = *(_OWORD *)(v30 + 16 * v31);
          *(_OWORD *)(v30 + 16 * v31) = *(_OWORD *)(v30 + 16 * v32);
          *(_OWORD *)(v30 + 16 * v32) = v33;
        }
        if (__p)
        {
          long long v40 = __p;
          operator delete(__p);
        }
      }
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      if (v46)
      {
        uint64_t v47 = v46;
        operator delete(v46);
      }
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
  }
}

void sub_19295BE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a31) {
    operator delete(a31);
  }
  if (*(char *)(v32 - 57) < 0) {
    operator delete(*(void **)(v32 - 80));
  }
  _Unwind_Resume(exception_object);
}

void *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_load_constant_kernel,Espresso::base_kernel>(void *result, void *lpsrc, uint64_t a3)
{
  uint64_t v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void ___ZN8Espresso17ANECompilerEngine7context29decompose_layer_normalizationEPNS_3netEPS1__block_invoke_2(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v212 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(a2->i64[0] + 8) != v3 && v3 != 0) {
    return;
  }
  unint64_t v6 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 320))(a2->i64[0]);
  if (v6[1] != 1) {
    return;
  }
  int v7 = *v6;
  int v8 = v6[2];
  *(_OWORD *)v200 = 0u;
  *(_OWORD *)__src = 0u;
  *(_DWORD *)v198 = a2[3].i32[2];
  memset(&v198[8], 0, 32);
  unint64_t v9 = a2[2].u64[1];
  if (v9 >= a2[3].i64[0])
  {
    uint64_t v10 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v198);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)v198);
    uint64_t v10 = v9 + 72;
    a2[2].i64[1] = v9 + 72;
  }
  a2[2].i64[1] = v10;
  *(void *)&long long lpsrc = &__src[1];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
  *(void *)&long long lpsrc = &v198[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
  if (*(void *)&v198[16]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v198[16]);
  }
  uint64_t v11 = *(void *)(a1 + 40) + 96;
  unint64_t v12 = a2[3].i32[2];
  *(void *)v198 = v12;
  long long v13 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, v12, v198)[3];
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)v13, *((void *)v13 + 1));
  }
  else
  {
    long long v14 = *v13;
    v190.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
    *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v14;
  }
  uint64_t v15 = *(void *)(a1 + 40) + 56;
  unint64_t v16 = a2[3].i32[2];
  *(void *)v198 = v16;
  long long v17 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v15, v16, v198)[3];
  if (*((char *)v17 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v18 = *v17;
    __str.__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v18;
  }
  uint64_t v19 = a2[1].i64[0];
  if (*(char *)(v19 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v188, *(const std::string::value_type **)(v19 + 16), *(void *)(v19 + 24));
  }
  else {
    std::string v188 = *(std::string *)(v19 + 16);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v187, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else {
    std::string v187 = __str;
  }
  if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v190.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v190.__r_.__value_.__l.__size_;
  }
  long long v21 = &v186;
  std::string::basic_string[abi:ne180100]((uint64_t)&v186, size + 9);
  if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v21 = (std::string *)v186.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v22 = &v190;
    }
    else {
      uint64_t v22 = (std::string *)v190.__r_.__value_.__r.__words[0];
    }
    memmove(v21, v22, size);
  }
  strcpy((char *)v21 + size, "__@x_mean");
  memset(&v185, 0, sizeof(v185));
  memset(&__p, 0, sizeof(__p));
  *(void *)&v193[8] = 0x100000007;
  *(void *)&v193[16] = 0;
  *(void *)&v193[24] = 0;
  unint64_t v194 = 0xFFFFFFFF00000000;
  LOBYTE(v195[0]) = 0;
  *(void *)v193 = 0x358637BD00000001;
  int v23 = 1;
  switch(v8)
  {
    case 0:
      goto LABEL_37;
    case 1:
      int v23 = 3;
      goto LABEL_37;
    case 2:
      goto LABEL_38;
    case 3:
      int v23 = 31;
LABEL_37:
      *(_DWORD *)&v193[8] = v23;
LABEL_38:
      std::string::operator=(&v185, &__str);
      if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v24 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v24 = v190.__r_.__value_.__l.__size_;
      }
      unint64_t v25 = v198;
      std::string::basic_string[abi:ne180100]((uint64_t)v198, v24 + 14);
      if (v198[23] < 0) {
        unint64_t v25 = *(unsigned char **)v198;
      }
      if (v24)
      {
        if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v26 = &v190;
        }
        else {
          uint64_t v26 = (std::string *)v190.__r_.__value_.__r.__words[0];
        }
        memmove(v25, v26, v24);
      }
      strcpy(&v25[v24], "__@reduce_mean");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = *(std::string *)v198;
      uint64_t v27 = *(void *)(a1 + 40);
      uint64_t v29 = *(void ***)(v27 + 16);
      unint64_t v28 = *(std::__shared_weak_count **)(v27 + 24);
      v191 = (std::string *)v29;
      v192 = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::abstract_engine_factory::shared(&v177);
      uint64_t v30 = v177.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(v198, "reduce");
      LODWORD(v211.__r_.__value_.__l.__data_) = (**(uint64_t (***)(void *))v191->__r_.__value_.__l.__size_)((void *)v191->__r_.__value_.__l.__size_);
      Espresso::abstract_engine_factory::make_kernel_priv(v30, (uint64_t)&v191, (uint64_t)v198, (uint64_t)v193, (int *)&v211);
      if (!(void)lpsrc)
      {
        uint64_t v31 = 0;
        goto LABEL_57;
      }
      if (!v31)
      {
LABEL_57:
        uint64_t v32 = 0;
        goto LABEL_58;
      }
      uint64_t v32 = (std::__shared_weak_count *)*((void *)&lpsrc + 1);
      if (*((void *)&lpsrc + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&lpsrc + 1) + 8), 1uLL, memory_order_relaxed);
      }
LABEL_58:
      if (*((void *)&lpsrc + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&lpsrc + 1));
      }
      if ((v198[23] & 0x80000000) != 0) {
        operator delete(*(void **)v198);
      }
      if (v177.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v177.__r_.__value_.__l.__size_);
      }
      v183[0] = v31;
      v183[1] = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v198, "reduce");
      if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v33 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v33 = v188.__r_.__value_.__l.__size_;
      }
      p_long long lpsrc = &lpsrc;
      std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v33 + 14);
      if (v204[7] < 0) {
        p_long long lpsrc = (long long *)lpsrc;
      }
      if (v33)
      {
        if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v35 = &v188;
        }
        else {
          unint64_t v35 = (std::string *)v188.__r_.__value_.__r.__words[0];
        }
        memmove(p_lpsrc, v35, v33);
      }
      strcpy((char *)p_lpsrc + v33, "__@reduce_mean");
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v211, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
      }
      else {
        std::string v211 = v185;
      }
      memset(&v177, 0, sizeof(v177));
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
      v209.__r_.__value_.__s.__data_[8] = 0;
      v177.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v177.__r_.__value_.__l.__size_ = v177.__r_.__value_.__r.__words[0];
      v177.__r_.__value_.__r.__words[2] = v177.__r_.__value_.__r.__words[0] + 24;
      v177.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v177.__r_.__value_.__r.__words[2], (long long *)&v211, &v212, (std::string *)v177.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v207, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v207 = __p;
      }
      memset(&v209, 0, sizeof(v209));
      v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
      v196.__r_.__value_.__s.__data_[8] = 0;
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v209.__r_.__value_.__l.__size_ = v209.__r_.__value_.__r.__words[0];
      v209.__r_.__value_.__r.__words[2] = v209.__r_.__value_.__r.__words[0] + 24;
      v209.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v209.__r_.__value_.__r.__words[2], (long long *)&v207, (long long *)&v208, (std::string *)v209.__r_.__value_.__l.__data_);
      Espresso::single_match_state<Espresso::generic_l2_normalize_kernel>::add_kernel(a2, v183, (const std::string *)v198, (const std::string *)&lpsrc, (std::string **)&v177, (std::string **)&v209);
      v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
      if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v207.__r_.__value_.__l.__data_);
      }
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v211.__r_.__value_.__l.__data_);
      }
      if ((v204[7] & 0x80000000) != 0) {
        operator delete((void *)lpsrc);
      }
      if ((v198[23] & 0x80000000) != 0) {
        operator delete(*(void **)v198);
      }
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
      long long v36 = (uint64_t **)(*(void *)(a1 + 40) + 184);
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
      long long v37 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v36, &v185, (long long **)&v209);
      long long v38 = *(_OWORD *)(v37 + 72);
      long long lpsrc = *(_OWORD *)(v37 + 56);
      *(_OWORD *)v204 = v38;
      uint64_t v39 = (const void *)*((void *)v37 + 12);
      *(void *)&v204[16] = *((void *)v37 + 11);
      v205 = 0;
      long long v206 = 0uLL;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v205, v39, *((void *)v37 + 13), (uint64_t)(*((void *)v37 + 13) - (void)v39) >> 2);
      memset(&v211, 0, sizeof(v211));
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
      v209.__r_.__value_.__s.__data_[8] = 0;
      v211.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
      v211.__r_.__value_.__l.__size_ = v211.__r_.__value_.__r.__words[0];
      v211.__r_.__value_.__r.__words[2] = v211.__r_.__value_.__r.__words[0] + 64;
      v211.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v211.__r_.__value_.__r.__words[2], &lpsrc, (long long *)&v207, (uint64_t)v211.__r_.__value_.__l.__data_);
      (*(void (**)(std::string *__return_ptr, void *, std::string *))(*(void *)v31 + 64))(&v177, v31, &v211);
      uint64_t v40 = *(void *)(v177.__r_.__value_.__r.__words[0] + 32);
      long long v41 = *(_OWORD *)(v177.__r_.__value_.__r.__words[0] + 16);
      *(_OWORD *)v198 = *(_OWORD *)v177.__r_.__value_.__l.__data_;
      *(_OWORD *)&v198[16] = v41;
      *(void *)&v198[32] = v40;
      *(_OWORD *)__src = 0uLL;
      v200[0] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__src, *(const void **)(v177.__r_.__value_.__r.__words[0] + 40), *(void *)(v177.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(void *)(v177.__r_.__value_.__r.__words[0] + 48)- *(void *)(v177.__r_.__value_.__r.__words[0] + 40)) >> 2);
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
      if (v205)
      {
        *(void *)&long long v206 = v205;
        operator delete(v205);
      }
      std::string v42 = (uint64_t **)(*(void *)(a1 + 40) + 184);
      *(void *)&long long lpsrc = &__p;
      long long v43 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v42, &__p, (long long **)&lpsrc);
      long long v44 = *(_OWORD *)&v198[16];
      *(_OWORD *)(v43 + 56) = *(_OWORD *)v198;
      *(_OWORD *)(v43 + 72) = v44;
      *((void *)v43 + 11) = *(void *)&v198[32];
      if (v43 + 56 != v198) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v43 + 96, (char *)__src[0], (uint64_t)__src[1], ((char *)__src[1] - (char *)__src[0]) >> 2);
      }
      if (__src[0])
      {
        __src[1] = __src[0];
        operator delete(__src[0]);
      }
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
      if (v192) {
        nitro::nitro_function::nitro_function(v192);
      }
      *(void *)&v193[16] = 897988541;
      v193[24] = 0;
      *(void **)((char *)v195 + 4) = 0;
      *(void *)v193 = 33;
      *(void *)&v193[8] = 1065353216;
      std::string::operator=(&v185, &__p);
      std::string::operator=(&__p, &v186);
      uint64_t v45 = *(void *)(a1 + 40);
      uint64_t v47 = *(void ***)(v45 + 16);
      uint64_t v46 = *(std::__shared_weak_count **)(v45 + 24);
      v191 = (std::string *)v47;
      v192 = v46;
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::abstract_engine_factory::shared(&v177);
      uint64_t v48 = v177.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(v198, "elementwise");
      LODWORD(v211.__r_.__value_.__l.__data_) = (**(uint64_t (***)(void *))v191->__r_.__value_.__l.__size_)((void *)v191->__r_.__value_.__l.__size_);
      Espresso::abstract_engine_factory::make_kernel_priv(v48, (uint64_t)&v191, (uint64_t)v198, (uint64_t)v193, (int *)&v211);
      if ((void)lpsrc)
      {
        if (v49)
        {
          std::string v50 = (std::__shared_weak_count *)*((void *)&lpsrc + 1);
          if (*((void *)&lpsrc + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&lpsrc + 1) + 8), 1uLL, memory_order_relaxed);
          }
          goto LABEL_110;
        }
      }
      else
      {
        std::string v49 = 0;
      }
      std::string v50 = 0;
LABEL_110:
      if (*((void *)&lpsrc + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&lpsrc + 1));
      }
      if ((v198[23] & 0x80000000) != 0) {
        operator delete(*(void **)v198);
      }
      if (v177.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v177.__r_.__value_.__l.__size_);
      }
      v182[0] = v49;
      v182[1] = v50;
      if (v50) {
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&lpsrc, "elementwise");
      if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v51 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v51 = v188.__r_.__value_.__l.__size_;
      }
      long long v52 = &v177;
      std::string::basic_string[abi:ne180100]((uint64_t)&v177, v51 + 9);
      if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v52 = (std::string *)v177.__r_.__value_.__r.__words[0];
      }
      if (v51)
      {
        if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v53 = &v188;
        }
        else {
          long long v53 = (std::string *)v188.__r_.__value_.__r.__words[0];
        }
        memmove(v52, v53, v51);
      }
      strcpy((char *)v52 + v51, "__@x_mean");
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external((std::string *)v198, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      }
      else {
        *(std::string *)v198 = v187;
      }
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v198[24], v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v198[24] = *(_OWORD *)&v185.__r_.__value_.__l.__data_;
        __src[0] = (void *)v185.__r_.__value_.__r.__words[2];
      }
      memset(&v211, 0, sizeof(v211));
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
      v209.__r_.__value_.__s.__data_[8] = 0;
      v211.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      v211.__r_.__value_.__l.__size_ = v211.__r_.__value_.__r.__words[0];
      v211.__r_.__value_.__r.__words[2] = v211.__r_.__value_.__r.__words[0] + 48;
      v211.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v211.__r_.__value_.__r.__words[2], (long long *)v198, (long long *)&__src[1], (std::string *)v211.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v207, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v207 = __p;
      }
      memset(&v209, 0, sizeof(v209));
      v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
      v196.__r_.__value_.__s.__data_[8] = 0;
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v209.__r_.__value_.__l.__size_ = v209.__r_.__value_.__r.__words[0];
      v209.__r_.__value_.__r.__words[2] = v209.__r_.__value_.__r.__words[0] + 24;
      v209.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v209.__r_.__value_.__r.__words[2], (long long *)&v207, (long long *)&v208, (std::string *)v209.__r_.__value_.__l.__data_);
      Espresso::single_match_state<Espresso::generic_l2_normalize_kernel>::add_kernel(a2, v182, (const std::string *)&lpsrc, &v177, (std::string **)&v211, (std::string **)&v209);
      v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
      if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v207.__r_.__value_.__l.__data_);
      }
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
      for (uint64_t i = 0; i != -6; i -= 3)
      {
        if (SHIBYTE(__src[i]) < 0) {
          operator delete(*(void **)&v198[i * 8 + 24]);
        }
      }
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v177.__r_.__value_.__l.__data_);
      }
      if ((v204[7] & 0x80000000) != 0) {
        operator delete((void *)lpsrc);
      }
      if (v50) {
        nitro::nitro_function::nitro_function(v50);
      }
      std::string v55 = (uint64_t **)(*(void *)(a1 + 40) + 184);
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
      uint64_t v56 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v55, &v187, (long long **)&v209);
      long long v57 = *(_OWORD *)(v56 + 72);
      *(_OWORD *)v198 = *(_OWORD *)(v56 + 56);
      *(_OWORD *)&v198[16] = v57;
      long long v58 = (const void *)*((void *)v56 + 12);
      *(void *)&v198[32] = *((void *)v56 + 11);
      *(_OWORD *)__src = 0uLL;
      v200[0] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__src, v58, *((void *)v56 + 13), (uint64_t)(*((void *)v56 + 13) - (void)v58) >> 2);
      int64_t v59 = (uint64_t **)(*(void *)(a1 + 40) + 184);
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
      int64_t v60 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v59, &v185, (long long **)&v209);
      long long v61 = *(_OWORD *)(v60 + 72);
      uint64_t v62 = *((void *)v60 + 11);
      *(_OWORD *)&v200[1] = *(_OWORD *)(v60 + 56);
      *(_OWORD *)&v200[3] = v61;
      v200[5] = v62;
      uint64_t v201 = 0;
      v202[1] = 0;
      v202[0] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v201, *((const void **)v60 + 12), *((void *)v60 + 13), (uint64_t)(*((void *)v60 + 13) - *((void *)v60 + 12)) >> 2);
      memset(&v211, 0, sizeof(v211));
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
      v209.__r_.__value_.__s.__data_[8] = 0;
      v211.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x80uLL);
      v211.__r_.__value_.__l.__size_ = v211.__r_.__value_.__r.__words[0];
      v211.__r_.__value_.__r.__words[2] = v211.__r_.__value_.__r.__words[0] + 128;
      v211.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v211.__r_.__value_.__r.__words[2], (long long *)v198, &lpsrc, (uint64_t)v211.__r_.__value_.__l.__data_);
      (*(void (**)(std::string *__return_ptr, void *, std::string *))(*(void *)v49 + 64))(&v177, v49, &v211);
      uint64_t v63 = *(void *)(v177.__r_.__value_.__r.__words[0] + 32);
      long long v64 = *(_OWORD *)(v177.__r_.__value_.__r.__words[0] + 16);
      long long lpsrc = *(_OWORD *)v177.__r_.__value_.__l.__data_;
      *(_OWORD *)v204 = v64;
      *(void *)&v204[16] = v63;
      v205 = 0;
      long long v206 = 0uLL;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v205, *(const void **)(v177.__r_.__value_.__r.__words[0] + 40), *(void *)(v177.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(void *)(v177.__r_.__value_.__r.__words[0] + 48)- *(void *)(v177.__r_.__value_.__r.__words[0] + 40)) >> 2);
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
      for (uint64_t j = 0; j != -16; j -= 8)
      {
        v66 = (void *)v202[j - 1];
        if (v66)
        {
          v202[j] = v66;
          operator delete(v66);
        }
      }
      uint64_t v67 = (uint64_t **)(*(void *)(a1 + 40) + 184);
      *(void *)v198 = &__p;
      uint64_t v68 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v67, &__p, (long long **)v198);
      long long v69 = *(_OWORD *)v204;
      *(_OWORD *)(v68 + 56) = lpsrc;
      *(_OWORD *)(v68 + 72) = v69;
      *((void *)v68 + 11) = *(void *)&v204[16];
      if (v68 + 56 != (char *)&lpsrc) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v68 + 96, (char *)v205, v206, (uint64_t)(v206 - (void)v205) >> 2);
      }
      if (v205)
      {
        *(void *)&long long v206 = v205;
        operator delete(v205);
      }
      if (v50) {
        nitro::nitro_function::nitro_function(v50);
      }
      if (v192) {
        nitro::nitro_function::nitro_function(v192);
      }
      *(void *)&v193[8] = 0x100000007;
      *(void *)&v193[16] = 0;
      *(void *)&v193[24] = 0;
      unint64_t v194 = 0xFFFFFFFF00000000;
      LOBYTE(v195[0]) = 0;
      *(void *)v193 = 0x358637BD00000004;
      int v70 = 1;
      switch(v8)
      {
        case 0:
          goto LABEL_164;
        case 1:
          int v70 = 3;
          goto LABEL_164;
        case 2:
          goto LABEL_165;
        case 3:
          int v70 = 31;
LABEL_164:
          *(_DWORD *)&v193[8] = v70;
LABEL_165:
          std::string::operator=(&v185, &__p);
          if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v71 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v71 = v190.__r_.__value_.__l.__size_;
          }
          v72 = v198;
          std::string::basic_string[abi:ne180100]((uint64_t)v198, v71 + 15);
          if (v198[23] < 0) {
            v72 = *(unsigned char **)v198;
          }
          if (v71)
          {
            if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v73 = &v190;
            }
            else {
              v73 = (std::string *)v190.__r_.__value_.__r.__words[0];
            }
            memmove(v72, v73, v71);
          }
          strcpy(&v72[v71], "__@reduce_sumsq");
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = *(std::string *)v198;
          uint64_t v74 = *(void *)(a1 + 40);
          uint64_t v76 = *(void ***)(v74 + 16);
          uint64_t v75 = *(std::__shared_weak_count **)(v74 + 24);
          v191 = (std::string *)v76;
          v192 = v75;
          if (v75) {
            atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::abstract_engine_factory::shared(&v177);
          uint64_t v77 = v177.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(v198, "reduce");
          LODWORD(v211.__r_.__value_.__l.__data_) = (**(uint64_t (***)(void *))v191->__r_.__value_.__l.__size_)((void *)v191->__r_.__value_.__l.__size_);
          Espresso::abstract_engine_factory::make_kernel_priv(v77, (uint64_t)&v191, (uint64_t)v198, (uint64_t)v193, (int *)&v211);
          if (!(void)lpsrc)
          {
            uint64_t v78 = 0;
            goto LABEL_184;
          }
          if (!v78)
          {
LABEL_184:
            uint64_t v79 = 0;
            goto LABEL_185;
          }
          uint64_t v79 = (std::__shared_weak_count *)*((void *)&lpsrc + 1);
          if (*((void *)&lpsrc + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&lpsrc + 1) + 8), 1uLL, memory_order_relaxed);
          }
LABEL_185:
          if (*((void *)&lpsrc + 1)) {
            nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&lpsrc + 1));
          }
          if ((v198[23] & 0x80000000) != 0) {
            operator delete(*(void **)v198);
          }
          if (v177.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v177.__r_.__value_.__l.__size_);
          }
          v181[0] = v78;
          v181[1] = v79;
          if (v79) {
            atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v198, "reduce");
          if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v80 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v80 = v188.__r_.__value_.__l.__size_;
          }
          v81 = &lpsrc;
          std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v80 + 15);
          if (v204[7] < 0) {
            v81 = (long long *)lpsrc;
          }
          if (v80)
          {
            if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v82 = &v188;
            }
            else {
              uint64_t v82 = (std::string *)v188.__r_.__value_.__r.__words[0];
            }
            memmove(v81, v82, v80);
          }
          strcpy((char *)v81 + v80, "__@reduce_sumsq");
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v211, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
          }
          else {
            std::string v211 = v185;
          }
          memset(&v177, 0, sizeof(v177));
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
          v209.__r_.__value_.__s.__data_[8] = 0;
          v177.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v177.__r_.__value_.__l.__size_ = v177.__r_.__value_.__r.__words[0];
          v177.__r_.__value_.__r.__words[2] = v177.__r_.__value_.__r.__words[0] + 24;
          v177.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v177.__r_.__value_.__r.__words[2], (long long *)&v211, &v212, (std::string *)v177.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v207, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v207 = __p;
          }
          memset(&v209, 0, sizeof(v209));
          v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
          v196.__r_.__value_.__s.__data_[8] = 0;
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v209.__r_.__value_.__l.__size_ = v209.__r_.__value_.__r.__words[0];
          v209.__r_.__value_.__r.__words[2] = v209.__r_.__value_.__r.__words[0] + 24;
          v209.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v209.__r_.__value_.__r.__words[2], (long long *)&v207, (long long *)&v208, (std::string *)v209.__r_.__value_.__l.__data_);
          Espresso::single_match_state<Espresso::generic_l2_normalize_kernel>::add_kernel(a2, v181, (const std::string *)v198, (const std::string *)&lpsrc, (std::string **)&v177, (std::string **)&v209);
          v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
          if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v207.__r_.__value_.__l.__data_);
          }
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
          if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v211.__r_.__value_.__l.__data_);
          }
          if ((v204[7] & 0x80000000) != 0) {
            operator delete((void *)lpsrc);
          }
          if ((v198[23] & 0x80000000) != 0) {
            operator delete(*(void **)v198);
          }
          if (v79) {
            nitro::nitro_function::nitro_function(v79);
          }
          uint64_t v83 = (uint64_t **)(*(void *)(a1 + 40) + 184);
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
          v84 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v83, &v185, (long long **)&v209);
          long long v85 = *(_OWORD *)(v84 + 72);
          long long lpsrc = *(_OWORD *)(v84 + 56);
          *(_OWORD *)v204 = v85;
          uint64_t v86 = (const void *)*((void *)v84 + 12);
          *(void *)&v204[16] = *((void *)v84 + 11);
          v205 = 0;
          long long v206 = 0uLL;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v205, v86, *((void *)v84 + 13), (uint64_t)(*((void *)v84 + 13) - (void)v86) >> 2);
          memset(&v211, 0, sizeof(v211));
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
          v209.__r_.__value_.__s.__data_[8] = 0;
          v211.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
          v211.__r_.__value_.__l.__size_ = v211.__r_.__value_.__r.__words[0];
          v211.__r_.__value_.__r.__words[2] = v211.__r_.__value_.__r.__words[0] + 64;
          v211.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v211.__r_.__value_.__r.__words[2], &lpsrc, (long long *)&v207, (uint64_t)v211.__r_.__value_.__l.__data_);
          (*(void (**)(std::string *__return_ptr, void *, std::string *))(*(void *)v78 + 64))(&v177, v78, &v211);
          uint64_t v87 = *(void *)(v177.__r_.__value_.__r.__words[0] + 32);
          long long v88 = *(_OWORD *)(v177.__r_.__value_.__r.__words[0] + 16);
          *(_OWORD *)v198 = *(_OWORD *)v177.__r_.__value_.__l.__data_;
          *(_OWORD *)&v198[16] = v88;
          *(void *)&v198[32] = v87;
          *(_OWORD *)__src = 0uLL;
          v200[0] = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__src, *(const void **)(v177.__r_.__value_.__r.__words[0] + 40), *(void *)(v177.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(void *)(v177.__r_.__value_.__r.__words[0] + 48)- *(void *)(v177.__r_.__value_.__r.__words[0] + 40)) >> 2);
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
          if (v205)
          {
            *(void *)&long long v206 = v205;
            operator delete(v205);
          }
          v89 = (uint64_t **)(*(void *)(a1 + 40) + 184);
          *(void *)&long long lpsrc = &__p;
          v90 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v89, &__p, (long long **)&lpsrc);
          long long v91 = *(_OWORD *)&v198[16];
          *(_OWORD *)(v90 + 56) = *(_OWORD *)v198;
          *(_OWORD *)(v90 + 72) = v91;
          *((void *)v90 + 11) = *(void *)&v198[32];
          if (v90 + 56 != v198) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v90 + 96, (char *)__src[0], (uint64_t)__src[1], ((char *)__src[1] - (char *)__src[0]) >> 2);
          }
          if (__src[0])
          {
            __src[1] = __src[0];
            operator delete(__src[0]);
          }
          if (v79) {
            nitro::nitro_function::nitro_function(v79);
          }
          if (v192) {
            nitro::nitro_function::nitro_function(v192);
          }
          v177.__r_.__value_.__r.__words[2] = 897988541;
          char v178 = 0;
          int v179 = 0;
          int v180 = 0;
          v177.__r_.__value_.__r.__words[0] = 1;
          v177.__r_.__value_.__l.__size_ = 1065353216;
          uint64_t v92 = *(void *)(a1 + 40);
          unint64_t v93 = a2[3].i32[2];
          *(void *)v193 = v93;
          *(void *)&long long lpsrc = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v92 + 56, v93, v193)[3];
          v94 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v92 + 184), (void *)lpsrc, (long long **)&lpsrc);
          long long v95 = *(_OWORD *)(v94 + 72);
          *(_OWORD *)v198 = *(_OWORD *)(v94 + 56);
          *(_OWORD *)&v198[16] = v95;
          v96 = (const void *)*((void *)v94 + 12);
          *(void *)&v198[32] = *((void *)v94 + 11);
          *(_OWORD *)__src = 0uLL;
          v200[0] = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__src, v96, *((void *)v94 + 13), (uint64_t)(*((void *)v94 + 13) - (void)v96) >> 2);
          switch(v8)
          {
            case 0:
              int v97 = *(_DWORD *)v198;
              break;
            case 1:
              int v97 = *(_DWORD *)&v198[4] * *(_DWORD *)v198;
              break;
            case 2:
              int v97 = *(_DWORD *)&v198[4] * *(_DWORD *)v198 * *(_DWORD *)&v198[8];
              break;
            case 3:
              int v97 = *(_DWORD *)&v198[4] * *(_DWORD *)v198 * *(_DWORD *)&v198[8] * *(_DWORD *)&v198[12];
              break;
            default:
              Espresso::throw_exception_selector<Espresso::invalid_argument_error>("L2-Norm Axis has to be within [0-3]");
          }
          *(float *)&v177.__r_.__value_.__r.__words[1] = 1.0 / (float)v97;
          std::string::operator=(&v185, &__p);
          if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v98 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v98 = v190.__r_.__value_.__l.__size_;
          }
          v99 = &lpsrc;
          std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v98 + 15);
          if (v204[7] < 0) {
            v99 = (long long *)lpsrc;
          }
          if (v98)
          {
            if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v100 = &v190;
            }
            else {
              v100 = (std::string *)v190.__r_.__value_.__r.__words[0];
            }
            memmove(v99, v100, v98);
          }
          strcpy((char *)v99 + v98, "__@ew_div_count");
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = lpsrc;
          __p.__r_.__value_.__r.__words[2] = *(void *)v204;
          uint64_t v101 = *(void *)(a1 + 40);
          uint64_t v103 = *(void *)(v101 + 16);
          v102 = *(std::__shared_weak_count **)(v101 + 24);
          uint64_t v175 = v103;
          v176 = v102;
          if (v102) {
            atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::abstract_engine_factory::shared(&v211);
          uint64_t v104 = v211.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&lpsrc, "elementwise");
          LODWORD(v209.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v175 + 8))(*(void *)(v175 + 8));
          Espresso::abstract_engine_factory::make_kernel_priv(v104, (uint64_t)&v175, (uint64_t)&lpsrc, (uint64_t)&v177, (int *)&v209);
          if (!*(void *)v193)
          {
            v105 = 0;
            goto LABEL_253;
          }
          if (!v105)
          {
LABEL_253:
            v106 = 0;
            goto LABEL_254;
          }
          v106 = *(std::__shared_weak_count **)&v193[8];
          if (*(void *)&v193[8]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v193[8] + 8), 1uLL, memory_order_relaxed);
          }
LABEL_254:
          if (*(void *)&v193[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v193[8]);
          }
          if ((v204[7] & 0x80000000) != 0) {
            operator delete((void *)lpsrc);
          }
          if (v211.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v211.__r_.__value_.__l.__size_);
          }
          v174[0] = v105;
          v174[1] = v106;
          if (v106) {
            atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&lpsrc, "elementwise");
          if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v107 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v107 = v188.__r_.__value_.__l.__size_;
          }
          v108 = v193;
          std::string::basic_string[abi:ne180100]((uint64_t)v193, v107 + 15);
          if (v193[23] < 0) {
            v108 = *(unsigned char **)v193;
          }
          if (v107)
          {
            if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v109 = &v188;
            }
            else {
              v109 = (std::string *)v188.__r_.__value_.__r.__words[0];
            }
            memmove(v108, v109, v107);
          }
          strcpy(&v108[v107], "__@ew_div_count");
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v209, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
          }
          else {
            std::string v209 = v185;
          }
          memset(&v211, 0, sizeof(v211));
          v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
          v207.__r_.__value_.__s.__data_[8] = 0;
          v211.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v211.__r_.__value_.__l.__size_ = v211.__r_.__value_.__r.__words[0];
          v211.__r_.__value_.__r.__words[2] = v211.__r_.__value_.__r.__words[0] + 24;
          v211.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v211.__r_.__value_.__r.__words[2], (long long *)&v209, (long long *)&v210, (std::string *)v211.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v196, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v196 = __p;
          }
          memset(&v207, 0, sizeof(v207));
          v191 = &v207;
          LOBYTE(v192) = 0;
          v207.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v207.__r_.__value_.__l.__size_ = v207.__r_.__value_.__r.__words[0];
          v207.__r_.__value_.__r.__words[2] = v207.__r_.__value_.__r.__words[0] + 24;
          v207.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v207.__r_.__value_.__r.__words[2], (long long *)&v196, (long long *)&v197, (std::string *)v207.__r_.__value_.__l.__data_);
          Espresso::single_match_state<Espresso::generic_l2_normalize_kernel>::add_kernel(a2, v174, (const std::string *)&lpsrc, (const std::string *)v193, (std::string **)&v211, (std::string **)&v207);
          v191 = &v207;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v191);
          if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v196.__r_.__value_.__l.__data_);
          }
          v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
          if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v209.__r_.__value_.__l.__data_);
          }
          if ((v193[23] & 0x80000000) != 0) {
            operator delete(*(void **)v193);
          }
          if ((v204[7] & 0x80000000) != 0) {
            operator delete((void *)lpsrc);
          }
          if (v106) {
            nitro::nitro_function::nitro_function(v106);
          }
          v110 = (uint64_t **)(*(void *)(a1 + 40) + 184);
          v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
          v111 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v110, &v185, (long long **)&v207);
          long long v112 = *(_OWORD *)(v111 + 72);
          *(_OWORD *)v193 = *(_OWORD *)(v111 + 56);
          *(_OWORD *)&v193[16] = v112;
          v113 = (const void *)*((void *)v111 + 12);
          unint64_t v194 = *((void *)v111 + 11);
          memset(v195, 0, sizeof(v195));
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v195, v113, *((void *)v111 + 13), (uint64_t)(*((void *)v111 + 13) - (void)v113) >> 2);
          memset(&v209, 0, sizeof(v209));
          v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
          v207.__r_.__value_.__s.__data_[8] = 0;
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
          v209.__r_.__value_.__l.__size_ = v209.__r_.__value_.__r.__words[0];
          v209.__r_.__value_.__r.__words[2] = v209.__r_.__value_.__r.__words[0] + 64;
          v209.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v209.__r_.__value_.__r.__words[2], (long long *)v193, (long long *)&v196, (uint64_t)v209.__r_.__value_.__l.__data_);
          (*(void (**)(std::string *__return_ptr, void *, std::string *))(*(void *)v105 + 64))(&v211, v105, &v209);
          uint64_t v114 = *(void *)(v211.__r_.__value_.__r.__words[0] + 32);
          long long v115 = *(_OWORD *)(v211.__r_.__value_.__r.__words[0] + 16);
          long long lpsrc = *(_OWORD *)v211.__r_.__value_.__l.__data_;
          *(_OWORD *)v204 = v115;
          *(void *)&v204[16] = v114;
          v205 = 0;
          long long v206 = 0uLL;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v205, *(const void **)(v211.__r_.__value_.__r.__words[0] + 40), *(void *)(v211.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(void *)(v211.__r_.__value_.__r.__words[0] + 48)- *(void *)(v211.__r_.__value_.__r.__words[0] + 40)) >> 2);
          v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
          v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
          if (v195[0])
          {
            v195[1] = v195[0];
            operator delete(v195[0]);
          }
          v116 = (uint64_t **)(*(void *)(a1 + 40) + 184);
          *(void *)v193 = &__p;
          v117 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v116, &__p, (long long **)v193);
          long long v118 = *(_OWORD *)v204;
          *(_OWORD *)(v117 + 56) = lpsrc;
          *(_OWORD *)(v117 + 72) = v118;
          *((void *)v117 + 11) = *(void *)&v204[16];
          if (v117 + 56 != (char *)&lpsrc) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v117 + 96, (char *)v205, v206, (uint64_t)(v206 - (void)v205) >> 2);
          }
          if (v205)
          {
            *(void *)&long long v206 = v205;
            operator delete(v205);
          }
          if (v106) {
            nitro::nitro_function::nitro_function(v106);
          }
          if (v176) {
            nitro::nitro_function::nitro_function(v176);
          }
          if (__src[0])
          {
            __src[1] = __src[0];
            operator delete(__src[0]);
          }
          *(void *)&v193[12] = 0x358637BD00000000;
          *(_DWORD *)&v193[20] = 0;
          v193[24] = 0;
          *(void **)((char *)v195 + 4) = 0;
          *(void *)v193 = 0;
          *(_DWORD *)&v193[8] = v7;
          std::string::operator=(&v185, &__p);
          if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v119 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v119 = v190.__r_.__value_.__l.__size_;
          }
          v120 = v198;
          std::string::basic_string[abi:ne180100]((uint64_t)v198, v119 + 13);
          if (v198[23] < 0) {
            v120 = *(unsigned char **)v198;
          }
          if (v119)
          {
            if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v121 = &v190;
            }
            else {
              v121 = (std::string *)v190.__r_.__value_.__r.__words[0];
            }
            memmove(v120, v121, v119);
          }
          strcpy(&v120[v119], "__@ew_add_eps");
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = *(std::string *)v198;
          uint64_t v122 = *(void *)(a1 + 40);
          v124 = *(void ***)(v122 + 16);
          v123 = *(std::__shared_weak_count **)(v122 + 24);
          v191 = (std::string *)v124;
          v192 = v123;
          if (v123) {
            atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::abstract_engine_factory::shared(&v177);
          uint64_t v125 = v177.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(v198, "elementwise");
          LODWORD(v211.__r_.__value_.__l.__data_) = (**(uint64_t (***)(void *))v191->__r_.__value_.__l.__size_)((void *)v191->__r_.__value_.__l.__size_);
          Espresso::abstract_engine_factory::make_kernel_priv(v125, (uint64_t)&v191, (uint64_t)v198, (uint64_t)v193, (int *)&v211);
          if (!(void)lpsrc)
          {
            v126 = 0;
            goto LABEL_319;
          }
          if (!v126)
          {
LABEL_319:
            v127 = 0;
            goto LABEL_320;
          }
          v127 = (std::__shared_weak_count *)*((void *)&lpsrc + 1);
          if (*((void *)&lpsrc + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&lpsrc + 1) + 8), 1uLL, memory_order_relaxed);
          }
LABEL_320:
          if (*((void *)&lpsrc + 1)) {
            nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&lpsrc + 1));
          }
          if ((v198[23] & 0x80000000) != 0) {
            operator delete(*(void **)v198);
          }
          if (v177.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v177.__r_.__value_.__l.__size_);
          }
          v173[0] = v126;
          v173[1] = v127;
          if (v127) {
            atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v198, "elementwise");
          if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v128 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v128 = v188.__r_.__value_.__l.__size_;
          }
          v129 = &lpsrc;
          std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v128 + 13);
          if (v204[7] < 0) {
            v129 = (long long *)lpsrc;
          }
          if (v128)
          {
            if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v130 = &v188;
            }
            else {
              v130 = (std::string *)v188.__r_.__value_.__r.__words[0];
            }
            memmove(v129, v130, v128);
          }
          strcpy((char *)v129 + v128, "__@ew_add_eps");
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v211, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
          }
          else {
            std::string v211 = v185;
          }
          memset(&v177, 0, sizeof(v177));
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
          v209.__r_.__value_.__s.__data_[8] = 0;
          v177.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v177.__r_.__value_.__l.__size_ = v177.__r_.__value_.__r.__words[0];
          v177.__r_.__value_.__r.__words[2] = v177.__r_.__value_.__r.__words[0] + 24;
          v177.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v177.__r_.__value_.__r.__words[2], (long long *)&v211, &v212, (std::string *)v177.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v207, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v207 = __p;
          }
          memset(&v209, 0, sizeof(v209));
          v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
          v196.__r_.__value_.__s.__data_[8] = 0;
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v209.__r_.__value_.__l.__size_ = v209.__r_.__value_.__r.__words[0];
          v209.__r_.__value_.__r.__words[2] = v209.__r_.__value_.__r.__words[0] + 24;
          v209.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v209.__r_.__value_.__r.__words[2], (long long *)&v207, (long long *)&v208, (std::string *)v209.__r_.__value_.__l.__data_);
          Espresso::single_match_state<Espresso::generic_l2_normalize_kernel>::add_kernel(a2, v173, (const std::string *)v198, (const std::string *)&lpsrc, (std::string **)&v177, (std::string **)&v209);
          v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
          if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v207.__r_.__value_.__l.__data_);
          }
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
          if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v211.__r_.__value_.__l.__data_);
          }
          if ((v204[7] & 0x80000000) != 0) {
            operator delete((void *)lpsrc);
          }
          if ((v198[23] & 0x80000000) != 0) {
            operator delete(*(void **)v198);
          }
          if (v127) {
            nitro::nitro_function::nitro_function(v127);
          }
          v131 = (uint64_t **)(*(void *)(a1 + 40) + 184);
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
          v132 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v131, &v185, (long long **)&v209);
          long long v133 = *(_OWORD *)(v132 + 72);
          long long lpsrc = *(_OWORD *)(v132 + 56);
          *(_OWORD *)v204 = v133;
          v134 = (const void *)*((void *)v132 + 12);
          *(void *)&v204[16] = *((void *)v132 + 11);
          v205 = 0;
          long long v206 = 0uLL;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v205, v134, *((void *)v132 + 13), (uint64_t)(*((void *)v132 + 13) - (void)v134) >> 2);
          memset(&v211, 0, sizeof(v211));
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
          v209.__r_.__value_.__s.__data_[8] = 0;
          v211.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
          v211.__r_.__value_.__l.__size_ = v211.__r_.__value_.__r.__words[0];
          v211.__r_.__value_.__r.__words[2] = v211.__r_.__value_.__r.__words[0] + 64;
          v211.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v211.__r_.__value_.__r.__words[2], &lpsrc, (long long *)&v207, (uint64_t)v211.__r_.__value_.__l.__data_);
          (*(void (**)(std::string *__return_ptr, void *, std::string *))(*(void *)v126 + 64))(&v177, v126, &v211);
          uint64_t v135 = *(void *)(v177.__r_.__value_.__r.__words[0] + 32);
          long long v136 = *(_OWORD *)(v177.__r_.__value_.__r.__words[0] + 16);
          *(_OWORD *)v198 = *(_OWORD *)v177.__r_.__value_.__l.__data_;
          *(_OWORD *)&v198[16] = v136;
          *(void *)&v198[32] = v135;
          *(_OWORD *)__src = 0uLL;
          v200[0] = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__src, *(const void **)(v177.__r_.__value_.__r.__words[0] + 40), *(void *)(v177.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(void *)(v177.__r_.__value_.__r.__words[0] + 48)- *(void *)(v177.__r_.__value_.__r.__words[0] + 40)) >> 2);
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
          if (v205)
          {
            *(void *)&long long v206 = v205;
            operator delete(v205);
          }
          v137 = (uint64_t **)(*(void *)(a1 + 40) + 184);
          *(void *)&long long lpsrc = &__p;
          v138 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v137, &__p, (long long **)&lpsrc);
          long long v139 = *(_OWORD *)&v198[16];
          *(_OWORD *)(v138 + 56) = *(_OWORD *)v198;
          *(_OWORD *)(v138 + 72) = v139;
          *((void *)v138 + 11) = *(void *)&v198[32];
          if (v138 + 56 != v198) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v138 + 96, (char *)__src[0], (uint64_t)__src[1], ((char *)__src[1] - (char *)__src[0]) >> 2);
          }
          if (__src[0])
          {
            __src[1] = __src[0];
            operator delete(__src[0]);
          }
          if (v127) {
            nitro::nitro_function::nitro_function(v127);
          }
          if (v192) {
            nitro::nitro_function::nitro_function(v192);
          }
          *(void *)&v193[16] = 897988541;
          v193[24] = 0;
          *(void **)((char *)v195 + 4) = 0;
          *(void *)v193 = 12;
          *(void *)&v193[8] = 1065353216;
          std::string::operator=(&v185, &__p);
          if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v140 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v140 = v190.__r_.__value_.__l.__size_;
          }
          v141 = v198;
          std::string::basic_string[abi:ne180100]((uint64_t)v198, v140 + 11);
          if (v198[23] < 0) {
            v141 = *(unsigned char **)v198;
          }
          if (v140)
          {
            if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v142 = &v190;
            }
            else {
              v142 = (std::string *)v190.__r_.__value_.__r.__words[0];
            }
            memmove(v141, v142, v140);
          }
          strcpy(&v141[v140], "__@ew_rsqrt");
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = *(std::string *)v198;
          uint64_t v143 = *(void *)(a1 + 40);
          v145 = *(void ***)(v143 + 16);
          v144 = *(std::__shared_weak_count **)(v143 + 24);
          v191 = (std::string *)v145;
          v192 = v144;
          if (v144) {
            atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::abstract_engine_factory::shared(&v177);
          uint64_t v146 = v177.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(v198, "elementwise");
          LODWORD(v211.__r_.__value_.__l.__data_) = (**(uint64_t (***)(void *))v191->__r_.__value_.__l.__size_)((void *)v191->__r_.__value_.__l.__size_);
          Espresso::abstract_engine_factory::make_kernel_priv(v146, (uint64_t)&v191, (uint64_t)v198, (uint64_t)v193, (int *)&v211);
          if (!(void)lpsrc)
          {
            v147 = 0;
            goto LABEL_383;
          }
          if (!v147)
          {
LABEL_383:
            v148 = 0;
            goto LABEL_384;
          }
          v148 = (std::__shared_weak_count *)*((void *)&lpsrc + 1);
          if (*((void *)&lpsrc + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&lpsrc + 1) + 8), 1uLL, memory_order_relaxed);
          }
LABEL_384:
          if (*((void *)&lpsrc + 1)) {
            nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&lpsrc + 1));
          }
          if ((v198[23] & 0x80000000) != 0) {
            operator delete(*(void **)v198);
          }
          if (v177.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v177.__r_.__value_.__l.__size_);
          }
          v172[0] = v147;
          v172[1] = v148;
          if (v148) {
            atomic_fetch_add_explicit(&v148->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v198, "elementwise");
          if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v149 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v149 = v188.__r_.__value_.__l.__size_;
          }
          v150 = &lpsrc;
          std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v149 + 11);
          if (v204[7] < 0) {
            v150 = (long long *)lpsrc;
          }
          if (v149)
          {
            if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v151 = &v188;
            }
            else {
              v151 = (std::string *)v188.__r_.__value_.__r.__words[0];
            }
            memmove(v150, v151, v149);
          }
          strcpy((char *)v150 + v149, "__@ew_rsqrt");
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v211, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
          }
          else {
            std::string v211 = v185;
          }
          memset(&v177, 0, sizeof(v177));
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
          v209.__r_.__value_.__s.__data_[8] = 0;
          v177.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v177.__r_.__value_.__l.__size_ = v177.__r_.__value_.__r.__words[0];
          v177.__r_.__value_.__r.__words[2] = v177.__r_.__value_.__r.__words[0] + 24;
          v177.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v177.__r_.__value_.__r.__words[2], (long long *)&v211, &v212, (std::string *)v177.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v207, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v207 = __p;
          }
          memset(&v209, 0, sizeof(v209));
          v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
          v196.__r_.__value_.__s.__data_[8] = 0;
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v209.__r_.__value_.__l.__size_ = v209.__r_.__value_.__r.__words[0];
          v209.__r_.__value_.__r.__words[2] = v209.__r_.__value_.__r.__words[0] + 24;
          v209.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v209.__r_.__value_.__r.__words[2], (long long *)&v207, (long long *)&v208, (std::string *)v209.__r_.__value_.__l.__data_);
          Espresso::single_match_state<Espresso::generic_l2_normalize_kernel>::add_kernel(a2, v172, (const std::string *)v198, (const std::string *)&lpsrc, (std::string **)&v177, (std::string **)&v209);
          v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
          if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v207.__r_.__value_.__l.__data_);
          }
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
          if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v211.__r_.__value_.__l.__data_);
          }
          if ((v204[7] & 0x80000000) != 0) {
            operator delete((void *)lpsrc);
          }
          if ((v198[23] & 0x80000000) != 0) {
            operator delete(*(void **)v198);
          }
          if (v148) {
            nitro::nitro_function::nitro_function(v148);
          }
          v152 = (uint64_t **)(*(void *)(a1 + 40) + 184);
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
          v153 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v152, &v185, (long long **)&v209);
          long long v154 = *(_OWORD *)(v153 + 72);
          long long lpsrc = *(_OWORD *)(v153 + 56);
          *(_OWORD *)v204 = v154;
          v155 = (const void *)*((void *)v153 + 12);
          *(void *)&v204[16] = *((void *)v153 + 11);
          v205 = 0;
          long long v206 = 0uLL;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v205, v155, *((void *)v153 + 13), (uint64_t)(*((void *)v153 + 13) - (void)v155) >> 2);
          memset(&v211, 0, sizeof(v211));
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
          v209.__r_.__value_.__s.__data_[8] = 0;
          v211.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
          v211.__r_.__value_.__l.__size_ = v211.__r_.__value_.__r.__words[0];
          v211.__r_.__value_.__r.__words[2] = v211.__r_.__value_.__r.__words[0] + 64;
          v211.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v211.__r_.__value_.__r.__words[2], &lpsrc, (long long *)&v207, (uint64_t)v211.__r_.__value_.__l.__data_);
          (*(void (**)(std::string *__return_ptr, void *, std::string *))(*(void *)v147 + 64))(&v177, v147, &v211);
          uint64_t v156 = *(void *)(v177.__r_.__value_.__r.__words[0] + 32);
          long long v157 = *(_OWORD *)(v177.__r_.__value_.__r.__words[0] + 16);
          *(_OWORD *)v198 = *(_OWORD *)v177.__r_.__value_.__l.__data_;
          *(_OWORD *)&v198[16] = v157;
          *(void *)&v198[32] = v156;
          *(_OWORD *)__src = 0uLL;
          v200[0] = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__src, *(const void **)(v177.__r_.__value_.__r.__words[0] + 40), *(void *)(v177.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(void *)(v177.__r_.__value_.__r.__words[0] + 48)- *(void *)(v177.__r_.__value_.__r.__words[0] + 40)) >> 2);
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
          if (v205)
          {
            *(void *)&long long v206 = v205;
            operator delete(v205);
          }
          v158 = (uint64_t **)(*(void *)(a1 + 40) + 184);
          *(void *)&long long lpsrc = &__p;
          v159 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v158, &__p, (long long **)&lpsrc);
          long long v160 = *(_OWORD *)&v198[16];
          *(_OWORD *)(v159 + 56) = *(_OWORD *)v198;
          *(_OWORD *)(v159 + 72) = v160;
          *((void *)v159 + 11) = *(void *)&v198[32];
          if (v159 + 56 != v198) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v159 + 96, (char *)__src[0], (uint64_t)__src[1], ((char *)__src[1] - (char *)__src[0]) >> 2);
          }
          if (__src[0])
          {
            __src[1] = __src[0];
            operator delete(__src[0]);
          }
          if (v148) {
            nitro::nitro_function::nitro_function(v148);
          }
          if (v192) {
            nitro::nitro_function::nitro_function(v192);
          }
          *(void *)&v198[16] = 897988541;
          v198[24] = 0;
          *(void **)((char *)__src + 4) = 0;
          *(void *)&v198[8] = 1065353216;
          *(void *)v198 = 1;
          std::string::operator=(&v185, &__p);
          std::string::operator=(&__p, &v190);
          uint64_t v161 = *(void *)(a1 + 40);
          v163 = *(void ***)(v161 + 16);
          v162 = *(std::__shared_weak_count **)(v161 + 24);
          v191 = (std::string *)v163;
          v192 = v162;
          if (v162) {
            atomic_fetch_add_explicit(&v162->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::abstract_engine_factory::shared(&v177);
          uint64_t v164 = v177.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&lpsrc, "elementwise");
          LODWORD(v211.__r_.__value_.__l.__data_) = (**(uint64_t (***)(void *))v191->__r_.__value_.__l.__size_)((void *)v191->__r_.__value_.__l.__size_);
          Espresso::abstract_engine_factory::make_kernel_priv(v164, (uint64_t)&v191, (uint64_t)&lpsrc, (uint64_t)v198, (int *)&v211);
          if (*(void *)v193)
          {
            if (v165)
            {
              v166 = *(std::__shared_weak_count **)&v193[8];
              if (*(void *)&v193[8]) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v193[8] + 8), 1uLL, memory_order_relaxed);
              }
              goto LABEL_436;
            }
          }
          else
          {
            v165 = 0;
          }
          v166 = 0;
LABEL_436:
          if (*(void *)&v193[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v193[8]);
          }
          if ((v204[7] & 0x80000000) != 0) {
            operator delete((void *)lpsrc);
          }
          if (v177.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v177.__r_.__value_.__l.__size_);
          }
          v171[0] = v165;
          v171[1] = v166;
          if (v166) {
            atomic_fetch_add_explicit(&v166->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v193, "elementwise");
          if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v167 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v167 = v188.__r_.__value_.__l.__size_;
          }
          v168 = &v177;
          std::string::basic_string[abi:ne180100]((uint64_t)&v177, v167 + 9);
          if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v168 = (std::string *)v177.__r_.__value_.__r.__words[0];
          }
          if (v167)
          {
            if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v169 = &v188;
            }
            else {
              v169 = (std::string *)v188.__r_.__value_.__r.__words[0];
            }
            memmove(v168, v169, v167);
          }
          strcpy((char *)v168 + v167, "__@x_mean");
          if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&lpsrc, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
          }
          else
          {
            long long lpsrc = *(_OWORD *)&v186.__r_.__value_.__l.__data_;
            *(void *)v204 = *((void *)&v186.__r_.__value_.__l + 2);
          }
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v204[8], v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v204[8] = *(_OWORD *)&v185.__r_.__value_.__l.__data_;
            v205 = (void *)v185.__r_.__value_.__r.__words[2];
          }
          memset(&v211, 0, sizeof(v211));
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
          v209.__r_.__value_.__s.__data_[8] = 0;
          v211.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
          v211.__r_.__value_.__l.__size_ = v211.__r_.__value_.__r.__words[0];
          v211.__r_.__value_.__r.__words[2] = v211.__r_.__value_.__r.__words[0] + 48;
          v211.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v211.__r_.__value_.__r.__words[2], &lpsrc, &v206, (std::string *)v211.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v207, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v207 = __p;
          }
          memset(&v209, 0, sizeof(v209));
          v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
          v196.__r_.__value_.__s.__data_[8] = 0;
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v209.__r_.__value_.__l.__size_ = v209.__r_.__value_.__r.__words[0];
          v209.__r_.__value_.__r.__words[2] = v209.__r_.__value_.__r.__words[0] + 24;
          v209.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v209.__r_.__value_.__r.__words[2], (long long *)&v207, (long long *)&v208, (std::string *)v209.__r_.__value_.__l.__data_);
          Espresso::single_match_state<Espresso::generic_l2_normalize_kernel>::add_kernel(a2, v171, (const std::string *)v193, &v177, (std::string **)&v211, (std::string **)&v209);
          v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
          if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v207.__r_.__value_.__l.__data_);
          }
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
          for (uint64_t k = 0; k != -48; k -= 24)
          {
            if (*((char *)&v205 + k + 7) < 0) {
              operator delete(*(void **)&v204[k + 8]);
            }
          }
          if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v177.__r_.__value_.__l.__data_);
          }
          if ((v193[23] & 0x80000000) != 0) {
            operator delete(*(void **)v193);
          }
          if (v166)
          {
            nitro::nitro_function::nitro_function(v166);
            nitro::nitro_function::nitro_function(v166);
          }
          if (v192) {
            nitro::nitro_function::nitro_function(v192);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v185.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v186.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v187.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v188.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v190.__r_.__value_.__l.__data_);
          }
          return;
        default:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("L2-Norm Axis has to be within [0-3]");
      }
    default:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("L2-Norm Axis has to be within [0-3]");
  }
}

void sub_19295EA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  *(void *)(v78 - 192) = v78 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 192));
  uint64_t v80 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x280] + v80 + 47) < 0) {
      operator delete(*(void **)((char *)&STACK[0x280] + v80 + 24));
    }
    v80 -= 24;
    if (v80 == -48)
    {
      if (a25 < 0) {
        operator delete(__p);
      }
      if (a77 < 0) {
        operator delete(a76);
      }
      if (v77)
      {
        nitro::nitro_function::nitro_function(v77);
        nitro::nitro_function::nitro_function(v77);
      }
      if (a75) {
        nitro::nitro_function::nitro_function(a75);
      }
      if (a41 < 0) {
        operator delete(a36);
      }
      if (a48 < 0) {
        operator delete(a43);
      }
      if (a54 < 0) {
        operator delete(a49);
      }
      if (a60 < 0) {
        operator delete(a55);
      }
      if (a67 < 0) {
        operator delete(a62);
      }
      if (a72 < 0) {
        operator delete(a69);
      }
      if (a74 < 0) {
        operator delete(a73);
      }
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::single_match_state<Espresso::generic_l2_normalize_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  __int32 v23 = 0;
  memset(v26, 0, sizeof(v26));
  unint64_t v12 = (char *)operator new(0xF8uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)unint64_t v12 = &unk_1EE389DF0;
  *((void *)v12 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((void *)v12 + 30) = 0;
  size_t v24 = v12 + 24;
  unint64_t v25 = (std::__shared_weak_count *)v12;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 12);
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = v14;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  else
  {
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = 0;
  }
  std::string::operator=((std::string *)(v24 + 16), a4);
  std::string::operator=((std::string *)(v24 + 40), a3);
  unint64_t v16 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  long long v17 = v24;
  *((_DWORD *)v24 + 2) = (**v16)(v16);
  uint64_t v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(void *)(v18 + 208));
    }
    else {
      std::string __p = *(std::string *)(v18 + 200);
    }
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v19) {
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(void *)v19 + 12);
    }
  }
  if (v26 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v26, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v26[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v26[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  __int32 v23 = a1[3].i32[2];
  unint64_t v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    uint64_t v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v23);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v23);
    uint64_t v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
}

void sub_19295F51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void ___ZN8Espresso17ANECompilerEngine7context18handle_cast_kernelEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v109 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = **(void **)(a1 + 32);
  if (*(void *)(a2->i64[0] + 8) != v3 && v3 != 0) {
    return;
  }
  int v6 = *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 320))(a2->i64[0]);
  uint64_t v7 = **(void **)(a1 + 40) + 96;
  unint64_t v8 = a2[3].i32[2];
  std::string __p = (void *)v8;
  unint64_t v9 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v8, &__p)[3];
  if (*((char *)v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    v99.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v10;
  }
  uint64_t v11 = **(void **)(a1 + 40) + 56;
  unint64_t v12 = a2[3].i32[2];
  std::string __p = (void *)v12;
  uint64_t v13 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, v12, &__p)[3];
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v13, *((void *)v13 + 1));
  }
  else
  {
    long long v14 = *v13;
    __str.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
  }
  long long v105 = 0u;
  long long v104 = 0u;
  long long v103 = 0u;
  LODWORD(__p) = a2[3].i32[2];
  long long v102 = 0uLL;
  unint64_t v15 = a2[2].u64[1];
  if (v15 >= a2[3].i64[0])
  {
    uint64_t v16 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&__p);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)&__p);
    uint64_t v16 = v15 + 72;
    a2[2].i64[1] = v15 + 72;
  }
  a2[2].i64[1] = v16;
  lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
  lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
  if (*((void *)&v102 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v102 + 1));
  }
  uint64_t v17 = *(void *)(a1 + 48);
  std::string __p = &__str;
  uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (unsigned __int8 *)&__str, (long long **)&__p);
  uint64_t v19 = **(void **)(a1 + 40);
  if (*((void *)v18 + 6) - *((void *)v18 + 5) <= 8uLL
    && (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v19 + 240), &__str)|| !std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v19 + 264), &v99)))
  {
    uint64_t v24 = *(void *)(a1 + 48);
    std::string __p = &v99;
    unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, (unsigned __int8 *)&v99, (long long **)&__p);
    if (*((void *)v25 + 6) - *((void *)v25 + 5) > 8uLL
      || std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(**(void **)(a1 + 40) + 240), &__str))
    {
      uint64_t v26 = *(void *)(a1 + 48);
      std::string __p = &v99;
      uint64_t v27 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, (unsigned __int8 *)&v99, (long long **)&__p);
      unint64_t v28 = (char *)*((void *)v27 + 5);
      uint64_t v29 = (char *)*((void *)v27 + 6);
      if (v28 == v29) {
        goto LABEL_50;
      }
      while (1)
      {
        uint64_t v30 = **(void **)(a1 + 40) + 56;
        std::string __p = v28;
        uint64_t v31 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v30, (unint64_t *)v28, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
        uint64_t v32 = v31[3];
        uint64_t v33 = v31[4];
        while (v32 != v33)
        {
          uint64_t v34 = *(unsigned __int8 *)(v32 + 23);
          if ((v34 & 0x80u) == 0) {
            uint64_t v35 = *(unsigned __int8 *)(v32 + 23);
          }
          else {
            uint64_t v35 = *(void *)(v32 + 8);
          }
          std::string::size_type size = HIBYTE(v99.__r_.__value_.__r.__words[2]);
          if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v99.__r_.__value_.__l.__size_;
          }
          if (v35 == size)
          {
            if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v37 = &v99;
            }
            else {
              long long v37 = (std::string *)v99.__r_.__value_.__r.__words[0];
            }
            if ((v34 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v32, v37, *(void *)(v32 + 8))) {
                goto LABEL_48;
              }
LABEL_47:
              std::string::operator=((std::string *)v32, &__str);
              goto LABEL_48;
            }
            if (!*(unsigned char *)(v32 + 23)) {
              goto LABEL_47;
            }
            uint64_t v38 = 0;
            while (*(unsigned __int8 *)(v32 + v38) == v37->__r_.__value_.__s.__data_[v38])
            {
              if (v34 == ++v38) {
                goto LABEL_47;
              }
            }
          }
LABEL_48:
          v32 += 24;
        }
        v28 += 8;
        if (v28 == v29)
        {
LABEL_50:
          uint64_t v39 = **(void **)(a1 + 40);
          uint64_t v40 = (uint64_t **)(v39 + 352);
          if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v39 + 360), &__str))
          {
            std::string __p = &__str;
            long long v41 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v40, &__str, (uint64_t)&std::piecewise_construct, (long long **)&__p);
            goto LABEL_133;
          }
          std::string __p = &__str;
          uint64_t v62 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v40, &__str, (uint64_t)&std::piecewise_construct, (long long **)&__p);
          *((_DWORD *)v62 + 14) = 1065353216;
          *(void *)(v62 + 60) = 0xFFFFFFFF00000000;
          *((_DWORD *)v62 + 17) = 1;
          long long v64 = v62 + 72;
          uint64_t v63 = (void *)*((void *)v62 + 9);
          if (v63)
          {
            *((void *)v62 + 10) = v63;
            operator delete(v63);
            *long long v64 = 0;
            v64[1] = 0;
            v64[2] = 0;
          }
          *long long v64 = 0;
          v64[1] = 0;
          v64[2] = 0;
          uint64_t v65 = *(uint64_t **)(a1 + 40);
          uint64_t v66 = *v65;
          if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(*v65 + 360), &v99))
          {
            std::string __p = &v99;
            float v67 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v66 + 352), &v99, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 14);
            uint64_t v68 = (uint64_t **)(**(void **)(a1 + 40) + 352);
            std::string __p = &v99;
            int v69 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v68, &v99, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 15);
            uint64_t v66 = **(void **)(a1 + 40);
          }
          else
          {
            int v69 = 0;
            float v67 = 1.0;
          }
          std::string __p = &__str;
          long long v41 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v66 + 352), &__str, (uint64_t)&std::piecewise_construct, (long long **)&__p);
LABEL_132:
          *((float *)v41 + 14) = v67;
          *((_DWORD *)v41 + 15) = v69;
          goto LABEL_133;
        }
      }
    }
    lpsrc.__r_.__value_.__r.__words[0] = 0;
    uint64_t v70 = *(void *)(a1 + 56);
    std::string __p = &__str;
    lpsrc.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v70, (uint64_t)&__str, (uint64_t)&std::piecewise_construct, (long long **)&__p)[5];
    uint64_t v71 = **(void **)(a1 + 40) + 96;
    std::string __p = &lpsrc;
    v72 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v71, (unint64_t *)&lpsrc, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
    uint64_t v73 = v72[3];
    uint64_t v74 = v72[4];
    if (v73 == v74)
    {
LABEL_128:
      uint64_t v80 = **(void **)(a1 + 40);
      v81 = (uint64_t **)(v80 + 352);
      if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v80 + 360), &v99))
      {
        std::string __p = &v99;
        uint64_t v82 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v81, &v99, (uint64_t)&std::piecewise_construct, (long long **)&__p);
        *((_DWORD *)v82 + 14) = 1065353216;
        *(void *)(v82 + 60) = 0xFFFFFFFF00000000;
        *((_DWORD *)v82 + 17) = 1;
        v84 = v82 + 72;
        uint64_t v83 = (void *)*((void *)v82 + 9);
        if (v83)
        {
          *((void *)v82 + 10) = v83;
          operator delete(v83);
          void *v84 = 0;
          v84[1] = 0;
          v84[2] = 0;
        }
        void *v84 = 0;
        v84[1] = 0;
        v84[2] = 0;
        long long v85 = *(uint64_t **)(a1 + 40);
        uint64_t v86 = *v85;
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(*v85 + 360), &__str))
        {
          std::string __p = &__str;
          float v67 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v86 + 352), &__str, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 14);
          uint64_t v87 = (uint64_t **)(**(void **)(a1 + 40) + 352);
          std::string __p = &__str;
          int v69 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v87, &__str, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 15);
          uint64_t v86 = **(void **)(a1 + 40);
        }
        else
        {
          int v69 = 0;
          float v67 = 1.0;
        }
        std::string __p = &v99;
        long long v41 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v86 + 352), &v99, (uint64_t)&std::piecewise_construct, (long long **)&__p);
        goto LABEL_132;
      }
      std::string __p = &v99;
      long long v41 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v81, &v99, (uint64_t)&std::piecewise_construct, (long long **)&__p);
LABEL_133:
      *((_DWORD *)v41 + 16) = v6;
      goto LABEL_134;
    }
    while (1)
    {
      uint64_t v75 = *(unsigned __int8 *)(v73 + 23);
      if ((v75 & 0x80u) == 0) {
        uint64_t v76 = *(unsigned __int8 *)(v73 + 23);
      }
      else {
        uint64_t v76 = *(void *)(v73 + 8);
      }
      std::string::size_type v77 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v77 = __str.__r_.__value_.__l.__size_;
      }
      if (v76 != v77) {
        goto LABEL_127;
      }
      uint64_t v78 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v75 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*(const void **)v73, v78, *(void *)(v73 + 8))) {
        goto LABEL_126;
      }
LABEL_127:
      v73 += 24;
      if (v73 == v74) {
        goto LABEL_128;
      }
    }
    if (*(unsigned char *)(v73 + 23))
    {
      uint64_t v79 = 0;
      while (*(unsigned __int8 *)(v73 + v79) == v78->__r_.__value_.__s.__data_[v79])
      {
        if (v75 == ++v79) {
          goto LABEL_126;
        }
      }
      goto LABEL_127;
    }
LABEL_126:
    std::string::operator=((std::string *)v73, &v99);
    goto LABEL_127;
  }
  int v97 = 0;
  unint64_t v20 = *(std::__shared_weak_count **)(v19 + 24);
  uint64_t v95 = *(void *)(v19 + 16);
  v96 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_engine_factory::shared(&v94);
  uint64_t v21 = v94.__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "copy");
  LODWORD(v91) = (***(uint64_t (****)(void))(v95 + 8))(*(void *)(v95 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v21, (uint64_t)&v95, (uint64_t)&__p, (uint64_t)&v97, (int *)&v91);
  if (lpsrc.__r_.__value_.__r.__words[0])
  {
    if (v22)
    {
      __int32 v23 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
      if (lpsrc.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(lpsrc.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      __int32 v23 = 0;
    }
  }
  else
  {
    __int32 v23 = 0;
    uint64_t v22 = 0;
  }
  if (lpsrc.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v102) < 0) {
    operator delete(__p);
  }
  if (v94.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v94.__r_.__value_.__l.__size_);
  }
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v94, "copy");
  uint64_t v42 = a2[1].i64[0];
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v108, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else {
    std::string v108 = __str;
  }
  long long v91 = 0;
  uint64_t v92 = 0;
  unint64_t v93 = 0;
  std::string __p = &v91;
  LOBYTE(v102) = 0;
  long long v91 = (std::string *)operator new(0x18uLL);
  uint64_t v92 = v91;
  unint64_t v93 = v91 + 1;
  uint64_t v92 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v93, (long long *)&v108, &v109, v91);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v106, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  }
  else {
    std::string v106 = v99;
  }
  long long v88 = 0;
  v89 = 0;
  v90 = 0;
  std::string __p = &v88;
  LOBYTE(v102) = 0;
  long long v88 = (std::string *)operator new(0x18uLL);
  v89 = v88;
  v90 = v88 + 1;
  v89 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v90, (long long *)&v106, (long long *)&v107, v88);
  LODWORD(__p) = 0;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v43 = (char *)operator new(0xF8uLL);
  *((void *)v43 + 1) = 0;
  *((void *)v43 + 2) = 0;
  *(void *)long long v43 = &unk_1EE389DF0;
  *((void *)v43 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v43 + 40) = 0u;
  *(_OWORD *)(v43 + 56) = 0u;
  *(_OWORD *)(v43 + 72) = 0u;
  *(_OWORD *)(v43 + 88) = 0u;
  *(_OWORD *)(v43 + 104) = 0u;
  *(_OWORD *)(v43 + 120) = 0u;
  *(_OWORD *)(v43 + 136) = 0u;
  *(_OWORD *)(v43 + 152) = 0u;
  *(_OWORD *)(v43 + 161) = 0u;
  *((_OWORD *)v43 + 13) = 0u;
  *((_OWORD *)v43 + 14) = 0u;
  *((void *)v43 + 30) = 0;
  *(void *)&long long v102 = v43 + 24;
  *((void *)&v102 + 1) = v43;
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v44 = (std::__shared_weak_count *)*((void *)v43 + 12);
    *((void *)v43 + 11) = v22;
    *((void *)v43 + 12) = v23;
    if (v44) {
      nitro::nitro_function::nitro_function(v44);
    }
  }
  else
  {
    *((void *)v43 + 11) = v22;
    *((void *)v43 + 12) = 0;
  }
  std::string::operator=((std::string *)(v102 + 16), (const std::string *)(v42 + 16));
  std::string::operator=((std::string *)(v102 + 40), &v94);
  int v45 = (***(uint64_t (****)(void))(v22[1] + 8))(*(void *)(v22[1] + 8));
  uint64_t v46 = v102;
  *(_DWORD *)(v102 + 8) = v45;
  uint64_t v47 = a2[1].i64[0];
  if (v47)
  {
    *(_DWORD *)(v46 + 12) = *(_DWORD *)(v47 + 12);
    if (*(char *)(v47 + 223) < 0) {
      std::string::__init_copy_ctor_external(&lpsrc, *(const std::string::value_type **)(v47 + 200), *(void *)(v47 + 208));
    }
    else {
      std::string lpsrc = *(std::string *)(v47 + 200);
    }
    std::string::operator=((std::string *)(v46 + 200), &lpsrc);
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v48 = *(void *)(a2[4].i64[0] + 32);
    if (*(void *)(a2[4].i64[0] + 40) != v48) {
      *(_DWORD *)(v46 + 12) = *(_DWORD *)(*(void *)v48 + 12);
    }
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v103, v91, v92, 0xAAAAAAAAAAAAAAABLL * (((char *)v92 - (char *)v91) >> 3));
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v104 + 8, v88, v89, 0xAAAAAAAAAAAAAAABLL * (((char *)v89 - (char *)v88) >> 3));
  LODWORD(__p) = a2[3].i32[2];
  unint64_t v49 = a2[2].u64[1];
  if (v49 >= a2[3].i64[0])
  {
    uint64_t v50 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&__p);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)&__p);
    uint64_t v50 = v49 + 72;
    a2[2].i64[1] = v49 + 72;
  }
  a2[2].i64[1] = v50;
  lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
  lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
  if (*((void *)&v102 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v102 + 1));
  }
  std::string __p = &v88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  std::string __p = &v91;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v108.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  uint64_t v51 = **(void **)(a1 + 40);
  long long v52 = (uint64_t **)(v51 + 352);
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v51 + 360), &v99))
  {
    std::string __p = &v99;
    long long v53 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v52, &v99, (uint64_t)&std::piecewise_construct, (long long **)&__p);
  }
  else
  {
    std::string __p = &v99;
    long long v54 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v52, &v99, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    *((_DWORD *)v54 + 14) = 1065353216;
    *(void *)(v54 + 60) = 0xFFFFFFFF00000000;
    *((_DWORD *)v54 + 17) = 1;
    uint64_t v56 = v54 + 72;
    std::string v55 = (void *)*((void *)v54 + 9);
    if (v55)
    {
      *((void *)v54 + 10) = v55;
      operator delete(v55);
      *uint64_t v56 = 0;
      v56[1] = 0;
      v56[2] = 0;
    }
    *uint64_t v56 = 0;
    v56[1] = 0;
    v56[2] = 0;
    long long v57 = *(uint64_t **)(a1 + 40);
    uint64_t v58 = *v57;
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(*v57 + 360), &__str))
    {
      std::string __p = &__str;
      float v59 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v58 + 352), &__str, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 14);
      int64_t v60 = (uint64_t **)(**(void **)(a1 + 40) + 352);
      std::string __p = &__str;
      int v61 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v60, &__str, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 15);
      uint64_t v58 = **(void **)(a1 + 40);
    }
    else
    {
      int v61 = 0;
      float v59 = 1.0;
    }
    std::string __p = &v99;
    long long v53 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v58 + 352), &v99, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    *((float *)v53 + 14) = v59;
    *((_DWORD *)v53 + 15) = v61;
  }
  *((_DWORD *)v53 + 16) = v6;
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (v96) {
    nitro::nitro_function::nitro_function(v96);
  }
LABEL_134:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
}

void sub_1929602C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

__n128 __copy_helper_block_ea8_32c82_ZTSKZN8Espresso17ANECompilerEngine7context18handle_cast_kernelEPNS_3netEPS1_E3__0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 32);
  long long v3 = *(_OWORD *)(a2 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v3;
  return result;
}

void Espresso::ANECompilerEngine::context::~context(id *this)
{
  Espresso::abstract_context::~abstract_context(this);

  JUMPOUT(0x192FF16B0);
}

void *Espresso::ANECompilerEngine::context::get_device_model_name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "ANE Compiler");
}

double Espresso::ANECompilerEngine::context::begin_batch@<D0>(Espresso::ANECompilerEngine::context *this@<X0>, void *a2@<X8>)
{
  __int32 v4 = (char *)operator new(0xA0uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)__int32 v4 = &unk_1EE385780;
  double result = 0.0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  v4[64] = 1;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *((_WORD *)v4 + 60) = 256;
  *((void *)v4 + 16) = 0;
  *((void *)v4 + 17) = 0;
  *((void *)v4 + 3) = &unk_1EE3480D8;
  *((void *)v4 + 18) = this;
  *((void *)v4 + 19) = 0;
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::batch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385780;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_61@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x230uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE3852B0;
  long long v7 = *(_OWORD *)(a2 + 16);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v7;
  uint64_t v13 = *(void *)(a2 + 32);
  Espresso::ANECompilerEngine::space_to_batch_kernel::space_to_batch_kernel((uint64_t)(v6 + 3), a1, (uint64_t)v12);
  unint64_t v8 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v10 = *(void *)(*a1 + 8);
  uint64_t v11 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 43), (uint64_t)&v10);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929606D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void **)a2;
  if (*(void *)a2)
  {
    {
      uint64_t v5 = *(void *)(a2 + 8);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      int v6 = *(std::__shared_weak_count **)(a1 + 200);
      *(void *)(a1 + 192) = v2;
      *(void *)(a1 + 200) = v5;
      if (v6)
      {
        nitro::nitro_function::nitro_function(v6);
      }
    }
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::space_to_batch_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::space_to_batch_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3852B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::space_to_batch_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3852B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_60@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE385668;
  Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::mix_sequence_repeat_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  uint64_t v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929608F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_sequence_repeat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_sequence_repeat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385668;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_sequence_repeat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_59@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x240uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE3856D8;
  Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::mix_non_maximum_suppression_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  uint64_t v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 45), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192960A68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3856D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3856D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_58@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE385588;
  Espresso::ANECompilerEngine::space_to_depth_kernel::space_to_depth_kernel((uint64_t)(v6 + 3), a1, *(void *)a2, *(_DWORD *)(a2 + 8));
  v6[3] = &unk_1EE346ED8;
  v6[40] = &unk_1EE347038;
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  uint64_t v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 40), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192960C18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_space_to_depth_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_space_to_depth_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385588;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_space_to_depth_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_57@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE3856A0;
  Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::mix_furthest_point_sampling_kernel((uint64_t)(v6 + 3), a1, *(void *)a2, *(_DWORD *)(a2 + 8));
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  uint64_t v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 40), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192960D90(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3856A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3856A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_56@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x298uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE385048;
  Espresso::ANECompilerEngine::mix_squeeze_kernel::mix_squeeze_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  uint64_t v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 56), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192960F04(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_squeeze_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_squeeze_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385048;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_squeeze_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_55@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x290uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE385390;
  Espresso::ANECompilerEngine::mix_expand_dims_kernel::mix_expand_dims_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  uint64_t v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 55), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192961078(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_expand_dims_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_expand_dims_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385390;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_expand_dims_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_54@<Q0>(uint64_t *a1@<X1>, __int16 *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE385470;
  Espresso::ANECompilerEngine::mix_batch_matmul_kernel::mix_batch_matmul_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  uint64_t v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929611EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_batch_matmul_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385470;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_batch_matmul_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_53@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = (char *)operator new(0x368uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE385518;
  Espresso::ANECompilerEngine::inner_product_kernel::inner_product_kernel((uint64_t)(v6 + 24), a1, a2);
  *((void *)v6 + 3) = &unk_1EE346A08;
  *((void *)v6 + 71) = &unk_1EE346C38;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 376) = v7;
  *((_DWORD *)v6 + 114) = *(_DWORD *)(a2 + 128);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v6 + 424) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v6 + 440) = v8;
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 408) = v9;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 344) = v10;
  uint64_t v11 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v13 = *(void *)(*a1 + 8);
  long long v14 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 568), (uint64_t)&v13);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929613C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_inner_product_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385518;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_52@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x2A8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE3850B8;
  Espresso::ANECompilerEngine::mix_deconv3d_kernel::mix_deconv3d_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 56), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192961538(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_deconv3d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_deconv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3850B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_deconv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3850B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_51@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE3854A8;
  Espresso::ANECompilerEngine::mix_l2_normalize_kernel::mix_l2_normalize_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 40), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929616AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_l2_normalize_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3854A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_l2_normalize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3854A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_50@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384FA0;
  Espresso::ANECompilerEngine::flatten_kernel::flatten_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE342EB8;
  v6[39] = &unk_1EE343018;
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192961858(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_flatten_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384FA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_flatten_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384FA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_49@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x228uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384C20;
  Espresso::ANECompilerEngine::crop_kernel::crop_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE340600;
  v6[40] = &unk_1EE340760;
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 40), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192961A04(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_crop_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384C20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_48@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x2A8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384E18;
  Espresso::ANECompilerEngine::mix_conv3d_kernel::mix_conv3d_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 56), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192961B78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_conv3d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_conv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384E18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_conv3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384E18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_47@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x248uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384E88;
  Espresso::ANECompilerEngine::mix_pool3d_kernel::mix_pool3d_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 46), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192961CEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_pool3d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_pool3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384E88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_pool3d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384E88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_46@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE385278;
  Espresso::ANECompilerEngine::mix_softmax_nd_kernel::mix_softmax_nd_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192961E60(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_softmax_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385278;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_45@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = (char *)operator new(0x228uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = &unk_1EE385010;
  Espresso::ANECompilerEngine::softmax_kernel::softmax_kernel((uint64_t)(v8 + 24), a1, a3, (uint64_t)a2);
  *((void *)v8 + 3) = &unk_1EE3432B8;
  *((void *)v8 + 42) = &unk_1EE343418;
  *((_OWORD *)v8 + 19) = *a2;
  *(_OWORD *)(v8 + 316) = *(_OWORD *)((char *)a2 + 12);
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v11 = *(void *)(*a1 + 8);
  unint64_t v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 336), (uint64_t)&v11);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192962028(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_softmax_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385010;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_44@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x2A0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384C58;
  Espresso::ANECompilerEngine::pool_kernel::pool_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE340800;
  v6[57] = &unk_1EE3409A0;
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 57), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929621D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_pool_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384C58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_43@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x290uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE385358;
  Espresso::ANECompilerEngine::elementwise_kernel::elementwise_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE3459F8;
  v6[45] = &unk_1EE345B68;
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 45), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192962380(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385358;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_42@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x238uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE3854E0;
  Espresso::ANECompilerEngine::mix_reshape_like_kernel::mix_reshape_like_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 44), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929624F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reshape_like_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reshape_like_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3854E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reshape_like_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3854E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_41@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x230uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384FD8;
  Espresso::ANECompilerEngine::reshape_kernel::reshape_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE3430B8;
  v6[43] = &unk_1EE343218;
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 43), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929626A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reshape_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384FD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_reshape_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384FD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_40@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x238uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384EC0;
  Espresso::ANECompilerEngine::reduce_kernel::reduce_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE342578;
  v6[44] = &unk_1EE3426D8;
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 44), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19296284C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_39@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x238uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE385198;
  Espresso::ANECompilerEngine::broadcast_kernel::broadcast_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v8[3] = &unk_1EE344788;
  v8[43] = &unk_1EE3448E8;
  long long v9 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v9;
  *((unsigned char *)v8 + 336) = *(unsigned char *)(a2 + 32);
  long long v10 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v12 = *(void *)(*a1 + 8);
  uint64_t v13 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 43), (uint64_t)&v12);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192962974(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_broadcast_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_broadcast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385198;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_broadcast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_38@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = (char *)operator new(0x298uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE385240;
  Espresso::ANECompilerEngine::activation_kernel::activation_kernel((uint64_t)(v6 + 24), a1, a2);
  *((void *)v6 + 3) = &unk_1EE344D88;
  *((void *)v6 + 52) = &unk_1EE344F50;
  *(_OWORD *)(v6 + 648) = 0u;
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 416), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192962B2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_activation_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385240;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_37@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x240uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE385630;
  Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::mix_instancenorm_1d_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 45), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192962CA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385630;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_36@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE3850F0;
  Espresso::ANECompilerEngine::mix_stack_nd_kernel::mix_stack_nd_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192962E14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_stack_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_stack_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3850F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_stack_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3850F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_35@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, uint64_t a3@<X3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x230uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE384C90;
  Espresso::ANECompilerEngine::mix_tile_kernel::mix_tile_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v11 = *(void *)(*a1 + 8);
  uint64_t v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 41), (uint64_t)&v11);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192962F90(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_tile_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384C90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_34@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE3852E8;
  Espresso::ANECompilerEngine::stir_gather_nd_kernel::stir_gather_nd_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 40), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192963104(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_gather_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3852E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_gather_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3852E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_33@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x228uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE3851D0;
  Espresso::ANECompilerEngine::stir_resample_kernel::stir_resample_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 42), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192963278(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_resample_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_resample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3851D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_resample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3851D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE385710;
  Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel::stir_resize_nearest_neighbor_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 40), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929633EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385710;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_resize_nearest_neighbor_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x220uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE385748;
  Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel::stir_spatial_transformer_affine_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 41), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192963560(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385748;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_spatial_transformer_affine_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x228uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE385438;
  Espresso::ANECompilerEngine::mix_array_gather_kernel::mix_array_gather_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 42), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929636D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_array_gather_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_array_gather_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385438;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_array_gather_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x220uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384E50;
  Espresso::ANECompilerEngine::mix_gather_kernel::mix_gather_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 41), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192963848(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x270uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE3855C0;
  Espresso::ANECompilerEngine::general_slice_kernel::general_slice_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v8[3] = &unk_1EE3470D8;
  v8[51] = &unk_1EE347238;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v11 = *(void *)(*a1 + 8);
  uint64_t v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 51), (uint64_t)&v11);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192963960(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_general_slice_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3855C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_general_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3855C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x220uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384EF8;
  Espresso::ANECompilerEngine::slice_kernel::slice_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE342778;
  v6[41] = &unk_1EE3428D8;
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 41), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192963B0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_slice_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384EF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::stir_slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384EF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x258uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE3855F8;
  Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::mix_crop_and_resize_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 48), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192963C80(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3855F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3855F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<Q0>(uint64_t *a1@<X1>, int *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE385080;
  Espresso::ANECompilerEngine::chop_argsort_kernel::chop_argsort_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192963DF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double Espresso::ANECompilerEngine::chop_argsort_kernel::chop_argsort_kernel(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(unsigned char *)(v5 + 284) = 1;
  *(void *)uint64_t v5 = &unk_1EE3581D8;
  int v6 = *a3;
  *(unsigned char *)(v5 + 284) = *((unsigned char *)a3 + 4);
  *(_DWORD *)(v5 + 280) = v6;
  char v7 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(unsigned char *)(v5 + 344) = 0;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(unsigned char *)(v5 + 416) = 0;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(unsigned char *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(unsigned char *)(v5 + 476) = 0;
  *(void *)(v5 + 480) = 0;
  *(void *)(v5 + 488) = 0;
  *(unsigned char *)(v5 + 496) = v7;
  *(void *)uint64_t v5 = &unk_1EE3436B8;
  *(void *)(v5 + 288) = &unk_1EE343818;
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::chop_argsort_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::chop_argsort_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385080;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::chop_argsort_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384DA8;
  Espresso::ANECompilerEngine::mix_topk_kernel::mix_topk_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &unk_1EE341898;
  v6[40] = &unk_1EE3419F8;
  char v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 40), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192964090(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::chop_topk_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::chop_topk_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384DA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::chop_topk_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384DA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x230uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384DE0;
  Espresso::ANECompilerEngine::transpose_kernel::transpose_kernel((uint64_t)(v6 + 3), a1, a2);
  char v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 41), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192964204(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<Q0>(uint64_t *a1@<X1>, int *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384BE8;
  Espresso::ANECompilerEngine::degamma_kernel::degamma_kernel((uint64_t)(v6 + 3), a1, *a2);
  char v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929642DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::degamma_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::degamma_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384BE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::degamma_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384BE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384CC8;
  Espresso::ANECompilerEngine::plane_rw_kernel::plane_rw_kernel((uint64_t)(v6 + 3), a1, a2);
  char v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192964450(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::plane_rw_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::plane_rw_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384CC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::plane_rw_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384CC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x2B8uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE385550;
  Espresso::ANECompilerEngine::tunneled_ane_unit_kernel::tunneled_ane_unit_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v11 = *(void *)(*a1 + 8);
  uint64_t v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 60), (uint64_t)&v11);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1929645CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tunneled_ane_unit_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tunneled_ane_unit_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385550;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tunneled_ane_unit_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x320uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE385400;
  Espresso::ANECompilerEngine::tunneled_ane_op_kernel::tunneled_ane_op_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v11 = *(void *)(*a1 + 8);
  uint64_t v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 73), (uint64_t)&v11);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192964748(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tunneled_ane_op_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tunneled_ane_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385400;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tunneled_ane_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<Q0>(uint64_t *a1@<X1>, int *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE385208;
  Espresso::ANECompilerEngine::general_concat_kernel::general_concat_kernel((uint64_t)(v6 + 3), a1, a2);
  char v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929648BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::general_concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385208;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::general_concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x230uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384A60;
  Espresso::ANECompilerEngine::fill_kernel::fill_kernel((uint64_t)(v6 + 3), a1, a2);
  char v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 43), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192964A30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::fill_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384A60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::fill_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<Q0>(uint64_t *a1@<X1>, const std::string *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x268uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE384B78;
  Espresso::ANECompilerEngine::einsum_kernel::einsum_kernel((char *)v6 + 24, a1, a2);
  char v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)v6 + 400, (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192964BA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::einsum_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::einsum_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384B78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::einsum_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<Q0>(uint64_t *a1@<X1>, const void *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x318uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE3853C8;
  Espresso::ANECompilerEngine::tensor_zero_pad_kernel::tensor_zero_pad_kernel((uint64_t)(v6 + 3), a1, a2);
  char v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 72), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192964D18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tensor_zero_pad_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tensor_zero_pad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3853C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tensor_zero_pad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3853C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x270uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE385320;
  Espresso::ANECompilerEngine::general_padding_kernel::general_padding_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v11 = *(void *)(*a1 + 8);
  uint64_t v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 48), (uint64_t)&v11);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192964E94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::general_padding_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385320;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE3849F0;
  Espresso::ANECompilerEngine::cast_kernel::cast_kernel((uint64_t)(v6 + 3), a1, a2);
  char v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192965008(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::cast_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::cast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3849F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::cast_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3849F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x290uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384B40;
  Espresso::ANECompilerEngine::dev_op_kernel::dev_op_kernel((uint64_t)(v6 + 3), a1, a2);
  char v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 55), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19296517C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::dev_op_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384B40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::dev_op_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384B40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<Q0>(uint64_t *a1@<X1>, const void *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x410uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE384D00;
  Espresso::ANECompilerEngine::split_nd_kernel::split_nd_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v11 = *(void *)(*a1 + 8);
  uint64_t v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 103), (uint64_t)&v11);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1929652F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::split_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384D00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::split_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384D00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x258uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384AD0;
  Espresso::ANECompilerEngine::split_kernel::split_kernel((uint64_t)(v6 + 3), a1, a2);
  char v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 45), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19296546C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::split_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<D0>(uint64_t *a1@<X1>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::cf_end_kernel_cpu,std::allocator<Espresso::cf_end_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_end_params_t const&,void>((uint64_t *)&v4, a1);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384A28;
  Espresso::ANECompilerEngine::copy_kernel::copy_kernel((uint64_t)(v6 + 3), a1, a2);
  char v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 39), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192965650(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::copy_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::copy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384A28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::copy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x270uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE385160;
  Espresso::ANECompilerEngine::load_constant_kernel::load_constant_kernel(v8 + 3, a1, a3, a2);
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v11 = *(void *)(*a1 + 8);
  uint64_t v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 51), (uint64_t)&v11);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1929657CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::load_constant_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::load_constant_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385160;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::load_constant_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x268uLL);
  v8[1] = 0;
  v8[2] = 0;
  *long long v8 = &unk_1EE384D38;
  Espresso::ANECompilerEngine::upsample_kernel::upsample_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v11 = *(void *)(*a1 + 8);
  uint64_t v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v8 + 47), (uint64_t)&v11);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  result.n128_u64[0] = (unint64_t)(v8 + 3);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192965948(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::upsample_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384D38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x290uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384D70;
  Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_kernel((uint64_t)(v6 + 3), a1, a2);
  char v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 53), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192965ABC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::batchnorm_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::batchnorm_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384D70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::batchnorm_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x348uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE385128;
  Espresso::ANECompilerEngine::deconvolution_kernel::deconvolution_kernel(v6 + 3, a1, a2);
  char v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 73), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192965C30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::deconvolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::deconvolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385128;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::deconvolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x248uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384B08;
  Espresso::ANECompilerEngine::concat_kernel::concat_kernel((uint64_t)(v6 + 3), a1, a2);
  char v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 46), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192965DA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384B08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384B08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso17ANECompilerEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x348uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384F30;
  Espresso::ANECompilerEngine::convolution_kernel::convolution_kernel(v6 + 3, a1, a2);
  char v7 = *(std::__shared_weak_count **)(*a1 + 16);
  uint64_t v9 = *(void *)(*a1 + 8);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_kernel::set_ane_compiler_engine((uint64_t)(v6 + 73), (uint64_t)&v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192965F18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::engine::~engine(Espresso::ANECompilerEngine::engine *this)
{
  *(void *)this = &unk_1EE348130;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)this + 88);
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
  *(void *)this = &unk_1EE332290;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;

  *(void *)this = &unk_1EE348130;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)this + 88);
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
  *(void *)this = &unk_1EE332290;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

void Espresso::ANECompilerEngine::engine::post_check_valid_kernels_hook(Espresso::ANECompilerEngine::engine *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (*((void *)this + 14))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(*((void **)this + 13));
    *((void *)this + 13) = 0;
    uint64_t v3 = *((void *)this + 12);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*((void *)this + 11) + 8 * i) = 0;
    }
    *((void *)this + 14) = 0;
  }

  std::mutex::unlock(v2);
}

__n128 Espresso::ANECompilerEngine::engine::create_context@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  long long v4 = operator new(0xA8uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1EE3857F0;
  uint64_t v5 = Espresso::abstract_context::abstract_context((uint64_t)(v4 + 3), a1);
  v4[3] = &unk_1EE348188;
  *((unsigned char *)v4 + 96) = 1;
  *((unsigned char *)v4 + 80) = 1;
  *((unsigned char *)v4 + 148) = 1;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_192966148(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3857F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::context>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3857F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 Espresso::ANECompilerEngine::engine::make_abstract_blob_container@<Q0>(void *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0xF0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE384BB0;
  result.n128_u64[0] = Espresso::ANECompilerEngine::blob_container::blob_container((uint64_t)(v6 + 3), a1, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

uint64_t std::__shared_ptr_pointer<void *,int (*)(void *),std::allocator<void>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x8000000192DD9EA9)) {
    return a1 + 32;
  }
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<void *,int (*)(void *),std::allocator<void>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void ___ZN8Espresso17ANECompilerEngine37current_ane_arch_with_subtype_variantEv_block_invoke()
{
  id v2 = [MEMORY[0x1E4F4E038] aneSubTypeVariant];
  uint64_t v0 = [v2 uppercaseString];
  v1 = (void *)Espresso::ANECompilerEngine::current_ane_arch_with_subtype_variant(void)::aneSubtypeStrVariant;
  Espresso::ANECompilerEngine::current_ane_arch_with_subtype_variant(void)::aneSubtypeStrVariant = v0;
}

void sub_192966354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::CVAEngine::blob_container::~blob_container(Espresso::CVAEngine::blob_container *this)
{
  Espresso::HXEngine::blob_container::~blob_container(this);

  JUMPOUT(0x192FF16B0);
}

CVPixelBufferRef Espresso::CVAEngine::blob_container::force_allocate(CVPixelBufferRef this, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, BOOL a7, unsigned int a8)
{
  if (!*((void *)this + 21))
  {
    CVPixelBufferRef v8 = this;
    this = Espresso::HXEngine::H10ISPCreateCVBuffer((Espresso::HXEngine *)(*((_DWORD *)this + 4) * *((_DWORD *)this + 2)), *((_DWORD *)this + 3), 10, a4, a5, a6, a7, a8, v9, HIDWORD(v9), v10, v11);
    *((void *)v8 + 21) = this;
  }
  return this;
}

BOOL Espresso::zephyr::graph_t::remove_node(Espresso::zephyr::graph_t *this, Espresso::zephyr::node_t *a2)
{
  uint64_t v5 = (uint64_t *)((char *)this + 96);
  long long v4 = (uint64_t *)*((void *)this + 12);
  uint64_t v6 = std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>((uint64_t)v4, (unint64_t *)a2);
  if (v4)
  {
    char v7 = v5;
    CVPixelBufferRef v8 = v4;
    do
    {
      uint64_t v9 = (void *)v8[4];
      if (v9) {
        uint64_t v9 = (void *)*v9;
      }
      if (a2) {
        unint64_t v10 = *(void *)a2;
      }
      else {
        unint64_t v10 = 0;
      }
      BOOL v11 = (unint64_t)v9 >= v10;
      if ((unint64_t)v9 >= v10) {
        uint64_t v12 = (uint64_t **)v8;
      }
      else {
        uint64_t v12 = (uint64_t **)(v8 + 1);
      }
      if (v11) {
        char v7 = v8;
      }
      CVPixelBufferRef v8 = *v12;
    }
    while (*v12);
    if (v7 != v5)
    {
      if (a2) {
        unint64_t v13 = *(void *)a2;
      }
      else {
        unint64_t v13 = 0;
      }
      long long v14 = (void *)v7[4];
      if (v14) {
        long long v14 = (void *)*v14;
      }
      if (v13 >= (unint64_t)v14)
      {
        unint64_t v15 = (uint64_t *)v7[1];
        if (v15)
        {
          do
          {
            uint64_t v16 = v15;
            unint64_t v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
        else
        {
          uint64_t v17 = v7;
          do
          {
            uint64_t v16 = (uint64_t *)v17[2];
            BOOL v18 = *v16 == (void)v17;
            uint64_t v17 = v16;
          }
          while (!v18);
        }
        if (*((uint64_t **)this + 11) == v7) {
          *((void *)this + 11) = v16;
        }
        --*((void *)this + 13);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v4, v7);
        operator delete(v7);
      }
    }
  }
  while (1)
  {
    uint64_t v19 = *((void *)a2 + 15);
    uint64_t v20 = *((void *)a2 + 16);
    if (v19 == v20) {
      break;
    }
    Espresso::zephyr::node_t::erase_input_at(a2, ((v20 - v19) >> 3) - 1);
  }
  uint64_t v22 = *((void *)a2 + 12);
  uint64_t v21 = *((void *)a2 + 13);
  while (v22 != v21)
  {
    uint64_t v24 = *(void *)(v21 - 8);
    v21 -= 8;
    uint64_t v23 = v24;
    *((void *)a2 + 13) = v21;
    if (*(Espresso::zephyr::node_t **)(v24 + 80) == a2) {
      *(void *)(v23 + 80) = 0;
    }
    uint64_t v22 = *((void *)a2 + 12);
  }
  std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__erase_unique<Espresso::zephyr::node_t *>((uint64_t *)a2 + 7, (unint64_t)this);
  return v6 != 0;
}

uint64_t std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(uint64_t result, unint64_t *a2)
{
  if (result)
  {
    id v2 = (void *)result;
    __n128 result = 1;
    do
    {
      if (a2) {
        unint64_t v3 = *a2;
      }
      else {
        unint64_t v3 = 0;
      }
      long long v4 = (void *)v2[4];
      if (!v4 || (long long v4 = (void *)*v4, v3 >= (unint64_t)v4))
      {
        if (a2) {
          unint64_t v5 = *a2;
        }
        else {
          unint64_t v5 = 0;
        }
        if ((unint64_t)v4 >= v5) {
          return result;
        }
        ++v2;
      }
      id v2 = (void *)*v2;
    }
    while (v2);
    return 0;
  }
  return result;
}

void Espresso::zephyr::graph_t::insert_node(unint64_t this, Espresso::zephyr::node_t *a2)
{
  unint64_t v5 = (uint64_t **)(this + 88);
  uint64_t v6 = (uint64_t **)std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__find_equal<Espresso::zephyr::value_t *>(this + 88, &v28, (unint64_t *)a2);
  if (!*v6)
  {
    char v7 = v6;
    CVPixelBufferRef v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = (uint64_t)a2;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v5, v28, v7, v8);
  }
  uint64_t v9 = (uint64_t *)((char *)a2 + 56);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (((8 * this) + 8) ^ HIDWORD(this));
  unint64_t v11 = 0x9DDFEA08EB382D69 * (HIDWORD(this) ^ (v10 >> 47) ^ v10);
  unint64_t v12 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
  unint64_t v13 = *((void *)a2 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v2 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
      if (v12 >= v13) {
        unint64_t v2 = v12 % v13;
      }
    }
    else
    {
      unint64_t v2 = v12 & (v13 - 1);
    }
    unint64_t v15 = *(void **)(*v9 + 8 * v2);
    if (v15)
    {
      for (uint64_t i = (void *)*v15; i; uint64_t i = (void *)*i)
      {
        unint64_t v17 = i[1];
        if (v17 == v12)
        {
          if (i[2] == this) {
            return;
          }
        }
        else
        {
          if (v14.u32[0] > 1uLL)
          {
            if (v17 >= v13) {
              v17 %= v13;
            }
          }
          else
          {
            v17 &= v13 - 1;
          }
          if (v17 != v2) {
            break;
          }
        }
      }
    }
  }
  BOOL v18 = operator new(0x18uLL);
  *BOOL v18 = 0;
  v18[1] = v12;
  v18[2] = this;
  float v19 = (float)(unint64_t)(*((void *)a2 + 10) + 1);
  float v20 = *((float *)a2 + 22);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    BOOL v21 = 1;
    if (v13 >= 3) {
      BOOL v21 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v13);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)a2 + 56, v24);
    unint64_t v13 = *((void *)a2 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13) {
        unint64_t v2 = v12 % v13;
      }
      else {
        unint64_t v2 = v12;
      }
    }
    else
    {
      unint64_t v2 = (v13 - 1) & v12;
    }
  }
  uint64_t v25 = *v9;
  uint64_t v26 = *(void **)(*v9 + 8 * v2);
  if (v26)
  {
    *BOOL v18 = *v26;
LABEL_40:
    *uint64_t v26 = v18;
    goto LABEL_41;
  }
  *BOOL v18 = *((void *)a2 + 9);
  *((void *)a2 + 9) = v18;
  *(void *)(v25 + 8 * v2) = (char *)a2 + 72;
  if (*v18)
  {
    unint64_t v27 = *(void *)(*v18 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v27 >= v13) {
        v27 %= v13;
      }
    }
    else
    {
      v27 &= v13 - 1;
    }
    uint64_t v26 = (void *)(*v9 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*((void *)a2 + 10);
}

void sub_1929668DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void Espresso::zephyr::graph_t::~graph_t(Espresso::zephyr::graph_t *this)
{
  Espresso::zephyr::graph_t::~graph_t(this);

  JUMPOUT(0x192FF16B0);
}

{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  uint64_t v7;

  *(void *)this = &unk_1EE36EEA8;
  unint64_t v2 = (char *)*((void *)this + 11);
  unint64_t v3 = (char *)this + 96;
  if (v2 != (char *)this + 96)
  {
    do
    {
      std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__erase_unique<Espresso::zephyr::node_t *>((uint64_t *)(*((void *)v2 + 4) + 56), (unint64_t)this);
      long long v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          long long v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (char *)*((void *)v2 + 2);
          uint64_t v6 = *(void *)v5 == (void)v2;
          unint64_t v2 = v5;
        }
        while (!v6);
      }
      unint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  std::__tree<int>::destroy(*((void **)this + 12));
  std::__tree<int>::destroy(*((void **)this + 9));
  std::__tree<int>::destroy(*((void **)this + 6));
  char v7 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
}

void *Espresso::zephyr::graph_t::graph_t(void *result, uint64_t a2)
{
  unint64_t v2 = *(atomic_ullong **)(a2 + 24);
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  unint64_t add = atomic_fetch_add(v2, 1uLL);
  uint64_t *result = &unk_1EE36EEA8;
  result[1] = add;
  result[6] = 0;
  result[4] = a2;
  result[5] = result + 6;
  result[9] = 0;
  result[7] = 0;
  result[8] = result + 9;
  result[13] = 0;
  result[12] = 0;
  result[10] = 0;
  result[11] = result + 12;
  return result;
}

{
  atomic_ullong *v2;
  unint64_t add;

  unint64_t v2 = *(atomic_ullong **)(a2 + 24);
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  unint64_t add = atomic_fetch_add(v2, 1uLL);
  uint64_t *result = &unk_1EE36EEA8;
  result[1] = add;
  result[6] = 0;
  result[4] = a2;
  result[5] = result + 6;
  result[9] = 0;
  result[7] = 0;
  result[8] = result + 9;
  result[13] = 0;
  result[12] = 0;
  result[10] = 0;
  result[11] = result + 12;
  return result;
}

void *Espresso::zephyr::graph_t::live_inputs(Espresso::zephyr::graph_t *this)
{
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = (uint64_t *)&v17;
  unint64_t v2 = (uint64_t *)*((void *)this + 11);
  unint64_t v3 = (uint64_t *)((char *)this + 96);
  if (v2 != (uint64_t *)((char *)this + 96))
  {
    do
    {
      uint64_t v4 = v2[4];
      unint64_t v5 = *(uint64_t **)(v4 + 120);
      uint64_t v6 = *(uint64_t **)(v4 + 128);
      while (v5 != v6)
      {
        uint64_t v7 = *v5;
        uint64_t v19 = v7;
        if (!std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(*v3, *(unint64_t **)(v7 + 80)))std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__emplace_unique_key_args<Espresso::zephyr::value_t *,Espresso::zephyr::value_t * const&>(&v16, (unint64_t *)v7, &v19); {
        ++v5;
        }
      }
      CVPixelBufferRef v8 = (uint64_t *)v2[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          CVPixelBufferRef v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v2[2];
          BOOL v10 = *v9 == (void)v2;
          unint64_t v2 = v9;
        }
        while (!v10);
      }
      unint64_t v2 = v9;
    }
    while (v9 != v3);
  }
  unint64_t v11 = (void *)((char *)this + 48);
  std::__tree<int>::destroy(*((void **)this + 6));
  unint64_t v12 = v17;
  *((void *)this + 5) = v16;
  unint64_t v13 = (void *)((char *)this + 40);
  *unint64_t v11 = v12;
  uint64_t v14 = v18;
  v13[2] = v18;
  if (v14)
  {
    _OWORD v12[2] = v11;
    uint64_t v16 = (uint64_t *)&v17;
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    unint64_t v12 = 0;
  }
  else
  {
    *unint64_t v13 = v11;
  }
  std::__tree<int>::destroy(v12);
  return v13;
}

void sub_192966BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void *Espresso::zephyr::graph_t::live_outputs(Espresso::zephyr::graph_t *this)
{
  float v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = (uint64_t *)&v20;
  unint64_t v2 = (uint64_t *)*((void *)this + 11);
  unint64_t v3 = (uint64_t *)((char *)this + 96);
  if (v2 != (uint64_t *)((char *)this + 96))
  {
    do
    {
      uint64_t v4 = v2[4];
      unint64_t v5 = *(unint64_t ***)(v4 + 96);
      uint64_t v6 = *(unint64_t ***)(v4 + 104);
      while (v5 != v6)
      {
        uint64_t v7 = *v5;
        unint64_t v22 = v7;
        CVPixelBufferRef v8 = (unint64_t **)v7[7];
        uint64_t v9 = (unint64_t **)v7[8];
        if (v8 != v9)
        {
          uint64_t v10 = *v3;
          while (std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(v10, *v8))
          {
            v8 += 2;
            if (v8 == v9) {
              goto LABEL_10;
            }
          }
          std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__emplace_unique_key_args<Espresso::zephyr::value_t *,Espresso::zephyr::value_t * const&>(&v19, v7, (uint64_t *)&v22);
        }
LABEL_10:
        ++v5;
      }
      unint64_t v11 = (uint64_t *)v2[1];
      if (v11)
      {
        do
        {
          unint64_t v12 = v11;
          unint64_t v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          unint64_t v12 = (uint64_t *)v2[2];
          BOOL v13 = *v12 == (void)v2;
          unint64_t v2 = v12;
        }
        while (!v13);
      }
      unint64_t v2 = v12;
    }
    while (v12 != v3);
  }
  uint64_t v14 = (void *)((char *)this + 72);
  std::__tree<int>::destroy(*((void **)this + 9));
  unint64_t v15 = v20;
  *((void *)this + 8) = v19;
  uint64_t v16 = (void *)((char *)this + 64);
  *uint64_t v14 = v15;
  uint64_t v17 = v21;
  v16[2] = v21;
  if (v17)
  {
    v15[2] = v14;
    uint64_t v19 = (uint64_t *)&v20;
    float v20 = 0;
    uint64_t v21 = 0;
    unint64_t v15 = 0;
  }
  else
  {
    *uint64_t v16 = v14;
  }
  std::__tree<int>::destroy(v15);
  return v16;
}

void sub_192966D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void Espresso::zephyr::graph_t::create_topologically_ordered_block(Espresso::zephyr::graph_t *this@<X0>, void *a2@<X8>)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  std::allocate_shared[abi:ne180100]<Espresso::zephyr::ordered_block_t,std::allocator<Espresso::zephyr::ordered_block_t>,Espresso::zephyr::es_function_t *,void>(a2, *((void *)this + 4));
  uint64_t v4 = (Espresso::zephyr::graph_t *)*((void *)this + 11);
  if (v4 != (Espresso::zephyr::graph_t *)((char *)this + 96))
  {
    do
    {
      uint64_t v5 = *((void *)v4 + 4);
      v10[0] = &unk_1EE37E4D8;
      v10[1] = a2;
      v10[3] = v10;
      v9[0] = &unk_1EE37E530;
      v9[1] = a2;
      v9[3] = v9;
      Espresso::zephyr::node_def_dfs(v5, (uint64_t)v10, (uint64_t)v9);
      std::__function::__value_func<void ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v9);
      std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v10);
      uint64_t v6 = (Espresso::zephyr::graph_t *)*((void *)v4 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(Espresso::zephyr::graph_t **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (Espresso::zephyr::graph_t *)*((void *)v4 + 2);
          BOOL v8 = *(void *)v7 == (void)v4;
          uint64_t v4 = v7;
        }
        while (!v8);
      }
      uint64_t v4 = v7;
    }
    while (v7 != (Espresso::zephyr::graph_t *)((char *)this + 96));
  }
}

void sub_192966E88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__function::__value_func<void ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1>,void ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1>,void ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK8Espresso6zephyr7graph_t34create_topologically_ordered_blockEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1>,void ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(***(void ***)(a1 + 8) + 16))(**(void **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1>,void ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37E530;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1>,void ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37E530;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_1>,void ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void *std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK8Espresso6zephyr7graph_t34create_topologically_ordered_blockEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, unint64_t **a2)
{
  return std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(*(void *)(**(void **)(a1 + 8) + 96), *a2) == 0;
}

uint64_t std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37E4D8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE37E4D8;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0,std::allocator<Espresso::zephyr::graph_t::create_topologically_ordered_block(void)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

uint64_t Espresso::MPSGraphEngine::Kernels::softmax_kernel::is_valid_for_engine(unsigned __int8 *a1, int64x2_t **a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) - *(void *)a3 == 64 && *(void *)(a3 + 32) - *(void *)(a3 + 24) == 64)
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v17, *(const Espresso::layer_shape **)a3, 0);
    BOOL v8 = v18 > 3 && (a1[304] | a1[306]) == 0 && a1[305] != 0 && a1[307] == 0;
    uint64_t v9 = v8;
    if (!v8)
    {
      uint64_t v10 = *a2;
      unint64_t v11 = a2[1];
      v16[0] = v10;
      v16[1] = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v14, "[Dispatch::MPSGraph::softmax_kernel] unsupported configuration");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v14, a3, 0);
      Espresso::emit_kernel_validation_warning(v16, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      if (v22) {
        nitro::nitro_function::nitro_function(v22);
      }
      size_t v24 = (void **)v21;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v24);
      size_t v24 = (void **)v20;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      if (v11) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11);
      }
    }
  }
  else
  {
    unint64_t v12 = a2[1];
    v23[0] = *a2;
    v23[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v17, "[Dispatch::MPSGraph::softmax_kernel] unsupported: layer supports 1 input and 1 output only");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v17, a3, 0);
    Espresso::emit_kernel_validation_warning(v23, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    v14[0] = v21;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
    v14[0] = v20;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
    if (v12) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v12);
    }
    return 0;
  }
  return v9;
}

void sub_19296732C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a24);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::softmax_kernel::~softmax_kernel(Espresso::MPSGraphEngine::Kernels::softmax_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void __assign_helper_atomic_property__54(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void *__copy_helper_atomic_property__53(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  void *result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __assign_helper_atomic_property__11929(uint64_t *a1, uint64_t **a2)
{
  if (a1 != (uint64_t *)a2)
  {
    uint64_t v4 = *a2;
    uint64_t v3 = (char *)a2[1];
    uint64_t v5 = v3 - (char *)*a2;
    unint64_t v6 = v5 >> 4;
    BOOL v8 = a1 + 2;
    uint64_t v7 = a1[2];
    uint64_t v9 = (void *)*a1;
    if (v5 >> 4 > (unint64_t)((v7 - *a1) >> 4))
    {
      if (v9)
      {
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100](a1);
        operator delete((void *)*a1);
        uint64_t v7 = 0;
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      if (v5 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v10 = v7 >> 3;
      if (v7 >> 3 <= v6) {
        uint64_t v10 = v5 >> 4;
      }
      if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      std::vector<loopkit_rt_dimension_t>::__vallocate[abi:ne180100](a1, v11);
      unint64_t v12 = (void *)a1[1];
      uint64_t v13 = (uint64_t)v8;
      uint64_t v14 = v4;
      goto LABEL_14;
    }
    unint64_t v15 = (a1[1] - (uint64_t)v9) >> 4;
    if (v15 < v6)
    {
      uint64_t v16 = &v4[2 * v15];
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *>(*a2, v16, v9);
      unint64_t v12 = (void *)a1[1];
      uint64_t v13 = (uint64_t)v8;
      uint64_t v14 = v16;
LABEL_14:
      a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<unsigned char>>,std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>(v13, v14, v3, v12);
      return;
    }
    uint64_t v17 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *>(*a2, a2[1], v9);
    for (uint64_t i = (void *)a1[1]; i != v17; i -= 2)
    {
      uint64_t v19 = (std::__shared_weak_count *)*(i - 1);
      if (v19) {
        nitro::nitro_function::nitro_function(v19);
      }
    }
    a1[1] = (uint64_t)v17;
  }
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<unsigned char>>,std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  for (__n128 result = a4; a2 != a3; a2 += 2)
  {
    uint64_t v5 = a2[1];
    void *result = *a2;
    result[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    result += 2;
  }
  return result;
}

void *__copy_helper_atomic_property__11932(void *result, uint64_t a2)
{
  void *result = 0;
  result[1] = 0;
  result[2] = 0;
  uint64_t v2 = *(void **)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3 != *(void **)a2)
  {
    uint64_t v4 = result;
    std::vector<loopkit_rt_dimension_t>::__vallocate[abi:ne180100](result, ((uint64_t)v3 - *(void *)a2) >> 4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<unsigned char>>,std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>((uint64_t)(v4 + 2), v2, v3, (void *)v4[1]);
    v4[1] = result;
  }
  return result;
}

void sub_192967724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_192967954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }

  _Unwind_Resume(a1);
}

void sub_192967C38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192967D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1929680B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }

  _Unwind_Resume(a1);
}

void sub_1929689D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  _Unwind_Resume(a1);
}

void sub_192968C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_32c46_ZTSNSt3__110shared_ptrIN8Espresso8blob_cpuEEE(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t __copy_helper_block_ea8_32c46_ZTSNSt3__110shared_ptrIN8Espresso8blob_cpuEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_192968DF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::write_blob_storage_out_v1::~write_blob_storage_out_v1(Espresso::write_blob_storage_out_v1 *this)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

BOOL Espresso::V9Engine::blob_container::__copy_from(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v7, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, a2, &v7);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v5 != 0;
}

void sub_192968EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MetalLowmemEngine::blob_container::unsafe_opaque_raw_pointer(Espresso::MetalLowmemEngine::blob_container *this)
{
  return *((void *)this + 21);
}

void Espresso::V9Engine::blob_container::__copy_from_host(int32x2_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (const void *)a1[9];
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  BOOL v8 = v7;
  uint64_t v9 = (std::__shared_weak_count *)a1[10];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!*(void *)a2
  {
    long long v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v44, "Espresso: wrong_batch_type");
    v44->__vftable = (std::runtime_error_vtbl *)&unk_1EE33E418;
  }
  unint64_t v11 = v10;
  unint64_t v12 = *(std::__shared_weak_count **)(a2 + 8);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v13 = *(_OWORD *)a3;
  uint64_t v14 = a3[1];
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v15 = v10[22];
  uint64_t v16 = (_OWORD *)v10[21];
  if ((unint64_t)v16 >= v15)
  {
    long long v46 = v13;
    uint64_t v18 = v10[20];
    uint64_t v19 = ((uint64_t)v16 - v18) >> 4;
    if ((unint64_t)(v19 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = v15 - v18;
    uint64_t v21 = v20 >> 3;
    if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
      uint64_t v21 = v19 + 1;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v21;
    }
    unint64_t v58 = (unint64_t)(v11 + 22);
    unint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
    size_t v24 = &v23[16 * v19];
    long long v54 = v23;
    std::string v55 = v24;
    long long v57 = &v23[16 * v25];
    *(_OWORD *)size_t v24 = v46;
    uint64_t v56 = v24 + 16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v11 + 20, &v54);
    uint64_t v17 = (_OWORD *)v11[21];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v54);
  }
  else
  {
    *uint64_t v16 = v13;
    uint64_t v17 = v16 + 1;
    v10[21] = v17;
  }
  v11[21] = v17;
  int v26 = a1[2].i32[0];
  __int32 v27 = a1[2].i32[1];
  int v28 = v26 - 1;
  if (v26 < 1) {
    int v28 = v26 + 2;
  }
  unsigned int v29 = (v28 & 0xFFFFFFFC) + 4;
  __int32 v30 = a1[1].i32[1];
  LODWORD(v54) = a1[1].i32[0];
  HIDWORD(v54) = v30;
  __int32 v31 = a1[3].i32[0];
  LODWORD(v55) = v26;
  HIDWORD(v55) = v31 * v27;
  LODWORD(v56) = 1;
  HIDWORD(v56) = v54;
  LODWORD(v57) = v30 * v54;
  HIDWORD(v57) = v30 * v54 * v26;
  unint64_t v58 = __PAIR64__(a1[31].i32[1], v29);
  __int32 v32 = a1[32].i32[1];
  int v59 = 1;
  __int32 v60 = v32;
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v53, (uint64_t)v11);
  id v33 = v53[0];
  if ((*(unsigned int (**)(int32x2_t *))(*(void *)a1 + 32))(a1) != 1)
  {
    int v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v45, "not impl");
    __cxa_throw(v45, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v34 = [v8[20] kernelForFunction:"v9_host_io_float_to_half" cacheString:0 withConstants:0];
  [v33 setComputePipelineState:v34];
  uint64_t v51 = v8;
  long long v52 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<float,4>> const>((uint64_t)&v51, v11, a3);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  objc_msgSend(v33, "setBuffer:offset:atIndex:", v35, 0, 0, v46);
  [v33 setBuffer:*(void *)&a1[20] offset:0 atIndex:1];
  [v33 setBytes:&v54 length:48 atIndex:2];
  int v36 = a1[2].i32[1] * v29 * a1[3].i32[0];
  int v38 = v36 - 1;
  BOOL v37 = v36 < 1;
  int v39 = v36 + 2;
  if (!v37) {
    int v39 = v38;
  }
  int32x2_t v40 = vadd_s32(a1[1], (int32x2_t)-1);
  int32x2_t v41 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v40, (uint32x2_t)vcltz_s32(v40), 0x1EuLL), 2uLL);
  *(void *)&long long v42 = v41.i32[0];
  *((void *)&v42 + 1) = v41.i32[1];
  long long v49 = v42;
  uint64_t v50 = (v39 >> 2) + 1;
  int64x2_t v47 = vdupq_n_s64(4uLL);
  uint64_t v48 = 4;
  [v33 dispatchThreadgroups:&v49 threadsPerThreadgroup:&v47];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v53);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1929693D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  __cxa_free_exception(v23);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a20);
  if (v21)
  {
    nitro::nitro_function::nitro_function(v21);
    if (!v20) {
      goto LABEL_7;
    }
  }
  else if (!v20)
  {
LABEL_7:
    _Unwind_Resume(a1);
  }
  nitro::nitro_function::nitro_function(v20);
  goto LABEL_7;
}

void Espresso::V9Engine::blob_container::__copy_to_host(int32x2_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (const void *)a1[9];
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  BOOL v8 = v7;
  uint64_t v9 = (std::__shared_weak_count *)a1[10];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!*(void *)a2
  {
    int v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v45, "Espresso: wrong_batch_type");
    v45->__vftable = (std::runtime_error_vtbl *)&unk_1EE33E418;
  }
  unint64_t v11 = v10;
  unint64_t v12 = *(std::__shared_weak_count **)(a2 + 8);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *a3;
  if (!*a3)
  {
    (*(void (**)(long long *__return_ptr, int32x2_t *))(*(void *)a1 + 56))(&v54, a1);
    long long v14 = v54;
    long long v54 = 0uLL;
    unint64_t v15 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v14;
    if (v15)
    {
      nitro::nitro_function::nitro_function(v15);
      if (*((void *)&v54 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v54 + 1));
      }
    }
    uint64_t v13 = *a3;
  }
  uint64_t v16 = a3[1];
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v17 = v11[22];
  uint64_t v18 = (uint64_t *)v11[21];
  if ((unint64_t)v18 >= v17)
  {
    uint64_t v20 = v11[20];
    uint64_t v21 = ((uint64_t)v18 - v20) >> 4;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = v17 - v20;
    if (v23 >> 3 > v22) {
      unint64_t v22 = v23 >> 3;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    long long v57 = v11 + 22;
    uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v24);
    int v26 = (uint64_t *)&v25[16 * v21];
    *(void *)&long long v54 = v25;
    *((void *)&v54 + 1) = v26;
    uint64_t v56 = &v25[16 * v27];
    *int v26 = v13;
    v26[1] = v16;
    unint64_t v55 = (unint64_t)(v26 + 2);
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v11 + 20, &v54);
    uint64_t v19 = (void *)v11[21];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v54);
  }
  else
  {
    *uint64_t v18 = v13;
    v18[1] = v16;
    uint64_t v19 = v18 + 2;
    v11[21] = v18 + 2;
  }
  v11[21] = v19;
  int v28 = a1[2].i32[0];
  __int32 v29 = a1[2].i32[1];
  int v30 = v28 - 1;
  if (v28 < 1) {
    int v30 = v28 + 2;
  }
  unsigned int v31 = (v30 & 0xFFFFFFFC) + 4;
  __int32 v32 = a1[1].i32[1];
  LODWORD(v54) = a1[1].i32[0];
  *(void *)((char *)&v54 + 4) = __PAIR64__(v28, v32);
  HIDWORD(v54) = a1[3].i32[0] * v29;
  unint64_t v55 = __PAIR64__(a1[31].i32[1], v31);
  __int32 v33 = a1[32].i32[1];
  LODWORD(v56) = 1;
  HIDWORD(v56) = v33;
  LODWORD(v57) = 1;
  HIDWORD(v57) = v54;
  int v58 = v32 * v54;
  int v59 = v32 * v54 * v28;
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v53, (uint64_t)v11);
  id v34 = v53[0];
  if ((*(unsigned int (**)(int32x2_t *))(*(void *)a1 + 32))(a1) != 1)
  {
    long long v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "not impl");
    __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v35 = [v8[20] kernelForFunction:"v9_host_io_half_to_float" cacheString:0 withConstants:0];
  [v34 setComputePipelineState:v35];
  uint64_t v51 = v8;
  long long v52 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v36 = Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<float,4>>>((uint64_t)&v51, v11, a3);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  [v34 setBuffer:*(void *)&a1[20] offset:0 atIndex:0];
  [v34 setBuffer:v36 offset:0 atIndex:1];
  [v34 setBytes:&v54 length:48 atIndex:2];
  int v37 = a1[2].i32[1] * v31 * a1[3].i32[0];
  int v39 = v37 - 1;
  BOOL v38 = v37 < 1;
  int v40 = v37 + 2;
  if (!v38) {
    int v40 = v39;
  }
  int32x2_t v41 = vadd_s32(a1[1], (int32x2_t)-1);
  int32x2_t v42 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v41, (uint32x2_t)vcltz_s32(v41), 0x1EuLL), 2uLL);
  *(void *)&long long v43 = v42.i32[0];
  *((void *)&v43 + 1) = v42.i32[1];
  long long v49 = v43;
  uint64_t v50 = (v40 >> 2) + 1;
  int64x2_t v47 = vdupq_n_s64(4uLL);
  uint64_t v48 = 4;
  [v34 dispatchThreadgroups:&v49 threadsPerThreadgroup:&v47];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v53);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1929699B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v20)
  {
    nitro::nitro_function::nitro_function(v20);
    if (!v19) {
      goto LABEL_6;
    }
  }
  else if (!v19)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  nitro::nitro_function::nitro_function(v19);
  goto LABEL_6;
}

uint64_t Espresso::V9Engine::blob_container::compute_path(Espresso::V9Engine::blob_container *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t Espresso::V9Engine::blob_container::platform(Espresso::V9Engine::blob_container *this)
{
  return (***(uint64_t (****)(void))(*((void *)this + 9) + 8))(*(void *)(*((void *)this + 9) + 8));
}

void Espresso::V9Engine::blob_container::resize(uint64_t a1, const Espresso::layer_shape *a2, uint64_t *a3)
{
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v8 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = v6;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *a3;
  if (!*a3)
  {
    unint64_t v11 = 0;
    goto LABEL_10;
  }
  unint64_t v11 = v10;
  if (!v10)
  {
LABEL_10:
    std::string lpsrc = 0;
    unint64_t v93 = 0;
    BOOL v92 = 0;
    goto LABEL_11;
  }
  BOOL v92 = *((unsigned char *)v10 + 88) != 0;
  std::string lpsrc = v10[13];
  unint64_t v12 = v10[14];
  if (v12)
  {
    unint64_t v93 = v10[14];
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v93 = 0;
  }
LABEL_11:
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  int v13 = *(_DWORD *)(a1 + 8);
  int v14 = *(_DWORD *)(a1 + 12);
  int v15 = *(_DWORD *)(a1 + 16);
  int v16 = *(_DWORD *)(a1 + 20);
  int v17 = *(_DWORD *)(a1 + 24);
  int v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if (v9 && *(unsigned char *)(v9 + 8)) {
    int v19 = *(_DWORD *)(v9 + 12);
  }
  uint64_t v21 = (void **)(a1 + 160);
  uint64_t v20 = *(void *)(a1 + 160);
  *(_DWORD *)(a1 + 200) = v19;
  if (v20 || (unint64_t v22 = *(void **)(a1 + 168)) != 0)
  {
    Espresso::on_dealloc((Espresso *)a1, v18);
    unint64_t v22 = *(void **)(a1 + 168);
  }
  *(void *)(a1 + 168) = 0;

  uint64_t v23 = *(void **)(a1 + 264);
  *(void *)(a1 + 264) = 0;

  unint64_t v24 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = 0;

  int v25 = v17 * v16;
  if (v25 * v13 * v14 * v15)
  {
    uint64_t v26 = 4;
    if (v19 == 1) {
      uint64_t v26 = 2;
    }
    *(void *)(a1 + 208) = v26;
    uint64_t v27 = *(const void **)(a1 + 72);
    if (!v27
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    int v28 = *(std::__shared_weak_count **)(a1 + 80);
    if (v28 {
      && (atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed),
    }
          (uint64_t v27 = *(const void **)(a1 + 72)) == 0)
    {
      __int32 v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v60, "Espresso: wrong_context_type");
      v60->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    int v30 = *(std::__shared_weak_count **)(a1 + 80);
    if (v30)
    {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      id v31 = v29[18];
      nitro::nitro_function::nitro_function(v30);
    }
    else
    {
      id v31 = v29[18];
    }
    int v32 = *(_DWORD *)(a1 + 16);
    int v33 = *(_DWORD *)(a1 + 12);
    int v35 = v32 - 1;
    BOOL v34 = v32 < 1;
    int v36 = v32 + 2;
    if (!v34) {
      int v36 = v35;
    }
    uint64_t v37 = ((uint64_t)v36 >> 2) + 1;
    unint64_t v38 = *(void *)(a1 + 208);
    int v39 = 4 * v37 * v38;
    int v40 = v39 * *(_DWORD *)(a1 + 8);
    int v41 = v40 - 1;
    BOOL v34 = v40 < 1;
    int v42 = v40 + 62;
    if (!v34) {
      int v42 = v41;
    }
    signed int v43 = (v42 & 0xFFFFFFC0) + 64;
    *(_DWORD *)(a1 + 232) = v39;
    *(_DWORD *)(a1 + 236) = v43;
    unint64_t v44 = v43;
    unint64_t v45 = v33 * (uint64_t)v43;
    *(_DWORD *)(a1 + 240) = v38;
    *(_DWORD *)(a1 + 244) = v45;
    *(_DWORD *)(a1 + 256) = (int)v38 / v38;
    *(_DWORD *)(a1 + 248) = v39 / v38;
    *(_DWORD *)(a1 + 252) = v44 / v38;
    *(_DWORD *)(a1 + 260) = v45 / v38;
    long long v46 = (std::__shared_weak_count *)((int)v45 * v25);
    if (v92)
    {
      v11[12] = v46;
    }
    else
    {
      if (lpsrc)
      {
        if (v47)
        {
          uint64_t v48 = v93;
          if (v93) {
            atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          NSLog(&cfstr_TodoErrorAlias.isa, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/Spectre/V9/v9_blob_container.mm", 103);
          uint64_t v48 = 0;
        }
        objc_storeStrong((id *)(a1 + 160), v47[20]);
        if (v48) {
          nitro::nitro_function::nitro_function(v48);
        }
      }
      if (!*v21)
      {
        Espresso::on_alloc((Espresso *)a1, v46);
        uint64_t v49 = [v31 newBufferWithLength:v46 options:32];
        uint64_t v50 = *v21;
        *uint64_t v21 = (void *)v49;
      }
      int v51 = *(_DWORD *)(a1 + 236);
      *(_DWORD *)(a1 + 204) = v51;
      if ((v51 & 0x3F) == 0)
      {
        long long v52 = objc_opt_new();
        [v52 setHeight:*(int *)(a1 + 12) * (uint64_t)v25];
        [v52 setWidth:*(int *)(a1 + 8) * (uint64_t)(int)v37];
        [v52 setPixelFormat:115];
        [v52 setUsage:3];
        [v52 setTextureType:2];
        [v52 setResourceOptions:32];
        uint64_t v53 = [*(id *)(a1 + 160) newTextureWithDescriptor:v52 offset:0 bytesPerRow:*(int *)(a1 + 204)];
        long long v54 = *(void **)(a1 + 168);
        *(void *)(a1 + 168) = v53;

        if (!*(void *)(a1 + 168))
        {
          int v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v96, [v52 width]);
          uint64_t v62 = std::string::insert(&v96, 0, "Error creating texture ");
          long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          v97.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          long long v64 = std::string::append(&v97, "/");
          long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
          v98.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v65;
          v64->__r_.__value_.__l.__size_ = 0;
          v64->__r_.__value_.__r.__words[2] = 0;
          v64->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v95, [v52 height]);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v66 = &v95;
          }
          else {
            uint64_t v66 = (std::string *)v95.__r_.__value_.__r.__words[0];
          }
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v95.__r_.__value_.__l.__size_;
          }
          uint64_t v68 = std::string::append(&v98, (const std::string::value_type *)v66, size);
          long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
          v99.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v69;
          v68->__r_.__value_.__l.__size_ = 0;
          v68->__r_.__value_.__r.__words[2] = 0;
          v68->__r_.__value_.__r.__words[0] = 0;
          uint64_t v70 = std::string::append(&v99, "/");
          long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
          v100.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v71;
          v70->__r_.__value_.__l.__size_ = 0;
          v70->__r_.__value_.__r.__words[2] = 0;
          v70->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v94, *(_DWORD *)(a1 + 204));
          if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v72 = &v94;
          }
          else {
            v72 = (std::string *)v94.__r_.__value_.__r.__words[0];
          }
          if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v73 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v73 = v94.__r_.__value_.__l.__size_;
          }
          uint64_t v74 = std::string::append(&v100, (const std::string::value_type *)v72, v73);
          long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
          v101.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v75;
          v74->__r_.__value_.__l.__size_ = 0;
          v74->__r_.__value_.__r.__words[2] = 0;
          v74->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v61, &v101);
          __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if ((v37 & 1) == 0)
        {
          unint64_t v55 = objc_opt_new();

          [v55 setHeight:*(int *)(a1 + 12) * (uint64_t)v25];
          if ((int)v37 >= 0) {
            int v56 = v37;
          }
          else {
            int v56 = v37 + 1;
          }
          [v55 setWidth:*(int *)(a1 + 8) * (uint64_t)(v56 >> 1)];
          [v55 setPixelFormat:125];
          [v55 setUsage:3];
          [v55 setTextureType:2];
          [v55 setResourceOptions:32];
          uint64_t v57 = [*(id *)(a1 + 160) newTextureWithDescriptor:v55 offset:0 bytesPerRow:*(int *)(a1 + 204)];
          int v58 = *(void **)(a1 + 264);
          *(void *)(a1 + 264) = v57;

          if (!*(void *)(a1 + 264))
          {
            uint64_t v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string(&v96, [v55 width]);
            std::string::size_type v77 = std::string::insert(&v96, 0, "Error creating texture ");
            long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
            v97.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v78;
            v77->__r_.__value_.__l.__size_ = 0;
            v77->__r_.__value_.__r.__words[2] = 0;
            v77->__r_.__value_.__r.__words[0] = 0;
            uint64_t v79 = std::string::append(&v97, "/");
            long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
            v98.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v80;
            v79->__r_.__value_.__l.__size_ = 0;
            v79->__r_.__value_.__r.__words[2] = 0;
            v79->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v95, [v55 height]);
            if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v81 = &v95;
            }
            else {
              v81 = (std::string *)v95.__r_.__value_.__r.__words[0];
            }
            if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v82 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v82 = v95.__r_.__value_.__l.__size_;
            }
            uint64_t v83 = std::string::append(&v98, (const std::string::value_type *)v81, v82);
            long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
            v99.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v84;
            v83->__r_.__value_.__l.__size_ = 0;
            v83->__r_.__value_.__r.__words[2] = 0;
            v83->__r_.__value_.__r.__words[0] = 0;
            long long v85 = std::string::append(&v99, "/");
            long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
            v100.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v86;
            v85->__r_.__value_.__l.__size_ = 0;
            v85->__r_.__value_.__r.__words[2] = 0;
            v85->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v94, *(_DWORD *)(a1 + 204));
            if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v87 = &v94;
            }
            else {
              uint64_t v87 = (std::string *)v94.__r_.__value_.__r.__words[0];
            }
            if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v88 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v88 = v94.__r_.__value_.__l.__size_;
            }
            v89 = std::string::append(&v100, (const std::string::value_type *)v87, v88);
            long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
            v101.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v90;
            v89->__r_.__value_.__l.__size_ = 0;
            v89->__r_.__value_.__r.__words[2] = 0;
            v89->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v76, &v101);
            __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          long long v52 = v55;
        }
      }
    }

    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
  }
  else if (v92)
  {
    v11[12] = 0;
  }
  if (v93)
  {
    nitro::nitro_function::nitro_function(v93);
  }
}

void sub_19296A40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (*(char *)(v56 - 105) < 0) {
    operator delete(*(void **)(v56 - 128));
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v56 - 137) < 0) {
    operator delete(*(void **)(v56 - 160));
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a31 < 0)
  {
    operator delete(a26);
    if ((v51 & 1) == 0)
    {
LABEL_20:

      if (v52) {
        nitro::nitro_function::nitro_function(v52);
      }
      if (a13) {
        nitro::nitro_function::nitro_function(a13);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v51)
  {
    goto LABEL_20;
  }
  __cxa_free_exception(v54);
  goto LABEL_20;
}

void Espresso::V9Engine::blob_container::~blob_container(id *this, void *a2)
{
  Espresso::V9Engine::blob_container::~blob_container(this, a2);

  JUMPOUT(0x192FF16B0);
}

{
  void *v3;
  uint64_t vars8;

  *this = &unk_1EE36FAF8;
  Espresso::on_dealloc((Espresso *)this, a2);

  Espresso::MetalLowmemEngine::blob_container::~blob_container(this, v3);
}

void cast_kernel_qsim::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  uint64_t v4 = a4[1];
  if (v4 - *a4 != a3[1] - *a3) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("cast_kernel_qsim: mismatching input blobs");
  }
  if (v4 != v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      BOOL v8 = *(const void **)(v5 + v6);
      if (!v8) {
        break;
      }
      if (!v9) {
        goto LABEL_9;
      }
      uint64_t v10 = *(std::__shared_weak_count **)(v5 + v6 + 8);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
LABEL_10:
      uint64_t v11 = *a3;
      unint64_t v12 = *(const void **)(*a3 + v6);
      if (v12)
      {
        if (v13)
        {
          int v14 = *(std::__shared_weak_count **)(v11 + v6 + 8);
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_16;
        }
      }
      else
      {
        int v13 = 0;
      }
      int v14 = 0;
LABEL_16:
      unsigned int v15 = *(_DWORD *)(a1 + 280);
      if (v15 >= 3 && v15 != 4) {
        Espresso::throw_exception_selector<Espresso::not_implemented_error>("cast_kernel_qsim missing mode");
      }
      if (v13[56] != v15) {
        v13[56] = v15;
      }
      Espresso::abstract_blob_container::shape((char *)v44, (uint64_t)v13);
      Espresso::abstract_blob_container::shape(v40, (uint64_t)v13);
      Espresso::abstract_blob_container::shape(v36, (uint64_t)v13);
      Espresso::abstract_blob_container::shape(v32, (uint64_t)v13);
      Espresso::abstract_blob_container::shape(v28, (uint64_t)v13);
      int v17 = (std::__shared_weak_count *)operator new(0x60uLL);
      v17->__shared_owners_ = 0;
      v17->__shared_weak_owners_ = 0;
      v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3899C8;
      int v18 = v44[0];
      int v19 = v41;
      uint64_t v20 = v37;
      uint64_t v21 = v33;
      uint64_t v22 = v29;
      v17[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BF10;
      *(_OWORD *)&v17[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v17[3].__shared_owners_ = 0u;
      LODWORD(v17[1].__shared_owners_) = v18;
      HIDWORD(v17[1].__shared_owners_) = v19;
      LODWORD(v17[1].__shared_weak_owners_) = v20;
      HIDWORD(v17[1].__shared_weak_owners_) = v21;
      uint64_t v23 = (Espresso *)(4 * v18 * (uint64_t)v19 * v20 * v21 * v22);
      unint64_t v24 = (std::__shared_weak_count_vtbl *)Espresso::kern_alloc_uninitialized(v23);
      bzero(v24, (size_t)v23);
      v17[2].__vftable = v24;
      LOBYTE(v17[2].__shared_owners_) = 1;
      int64x2_t v47 = v17 + 1;
      uint64_t v48 = v17;
      if (__p)
      {
        id v31 = __p;
        operator delete(__p);
      }
      if (v34)
      {
        int v35 = v34;
        operator delete(v34);
      }
      if (v38)
      {
        int v39 = v38;
        operator delete(v38);
      }
      if (v42)
      {
        signed int v43 = v42;
        operator delete(v42);
      }
      if (v45)
      {
        long long v46 = v45;
        operator delete(v45);
      }
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v9, &v47, 1.0);
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v13, (uint64_t)&v47, 1.0);
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v14) {
        nitro::nitro_function::nitro_function(v14);
      }
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      ++v7;
      uint64_t v5 = *a4;
      v6 += 16;
      if (v7 >= (a4[1] - *a4) >> 4) {
        return;
      }
    }
    uint64_t v9 = 0;
LABEL_9:
    uint64_t v10 = 0;
    goto LABEL_10;
  }
}

void sub_19296AA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42)
{
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::QuantSimEngine::blob_container::copy_to_fp32(uint64_t a1, void *a2, float a3)
{
  if (!*a2)
  {
    int v6 = *(_DWORD *)(a1 + 24);
    if (v6 <= 1) {
      int v6 = 1;
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&src, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), v6 * *(_DWORD *)(a1 + 20));
    unint64_t v7 = (std::__shared_weak_count *)a2[1];
    *(_OWORD *)a2 = *(_OWORD *)&src.data;
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
  }
  float __B = 1.0 / a3;
  switch(*(_DWORD *)(a1 + 224))
  {
    case 0:
      uint64_t v8 = 0;
      uint64_t v9 = *(void **)(*a2 + 24);
      uint64_t v10 = *(const void **)(*(void *)(a1 + 160) + 24);
      uint64_t v11 = *(int *)(*a2 + 8);
      do
      {
        v11 *= *(int *)(*a2 + 12 + v8);
        v8 += 4;
      }
      while (v8 != 12);
      memcpy(v9, v10, 4 * v11);
      return;
    case 1:
      uint64_t v26 = 0;
      uint64_t v27 = *(void *)(a1 + 176);
      int v28 = *(void **)(v27 + 24);
      int v29 = *(void **)(*a2 + 24);
      vImagePixelCount v30 = *(int *)(v27 + 8);
      uint64_t v31 = v27 + 12;
      do
      {
        v30 *= *(int *)(v31 + v26);
        v26 += 4;
      }
      while (v26 != 12);
      src.data = v28;
      src.height = 1;
      src.width = v30;
      src.rowBytes = 2 * v30;
      dest.data = v29;
      dest.height = 1;
      dest.width = v30;
      dest.rowBytes = 4 * v30;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      return;
    case 2:
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 208);
      int v14 = *(const char **)(v13 + 24);
      vDSP_Length v15 = *(int *)(v13 + 8);
      uint64_t v16 = v13 + 12;
      do
      {
        v15 *= *(int *)(v16 + v12);
        v12 += 4;
      }
      while (v12 != 12);
      vDSP_vflt8(v14, 1, *(float **)(*a2 + 24), 1, v15);
      uint64_t v17 = 0;
      int v18 = *(float **)(*a2 + 24);
      vDSP_Length v19 = *(int *)(*a2 + 8);
      do
      {
        v19 *= *(int *)(*a2 + 12 + v17);
        v17 += 4;
      }
      while (v17 != 12);
      goto LABEL_21;
    case 4:
      uint64_t v20 = 0;
      uint64_t v21 = *(void *)(a1 + 192);
      uint64_t v22 = *(const unsigned __int8 **)(v21 + 24);
      vDSP_Length v23 = *(int *)(v21 + 8);
      uint64_t v24 = v21 + 12;
      do
      {
        v23 *= *(int *)(v24 + v20);
        v20 += 4;
      }
      while (v20 != 12);
      vDSP_vfltu8(v22, 1, *(float **)(*a2 + 24), 1, v23);
      uint64_t v25 = 0;
      int v18 = *(float **)(*a2 + 24);
      vDSP_Length v19 = *(int *)(*a2 + 8);
      do
      {
        v19 *= *(int *)(*a2 + 12 + v25);
        v25 += 4;
      }
      while (v25 != 12);
LABEL_21:
      vDSP_vsmul(v18, 1, &__B, v18, 1, v19);
      return;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::invalid_argument_error::invalid_argument_error(exception);
  }
}

void sub_19296ADB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__int16 Espresso::QuantSimEngine::blob_container::copy_from_fp32@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float _S0@<S0>)
{
  float __B = _S0;
  switch(*(_DWORD *)(a1 + 224))
  {
    case 0:
      uint64_t v5 = 0;
      int v6 = *(void **)(*(void *)(a1 + 160) + 24);
      unint64_t v7 = *(const void **)(*(void *)a2 + 24);
      uint64_t v8 = *(int *)(*(void *)a2 + 8);
      do
      {
        v8 *= *(int *)(*(void *)a2 + 12 + v5);
        v5 += 4;
      }
      while (v5 != 12);
      memcpy(v6, v7, 4 * v8);
      return LOWORD(_S0);
    case 1:
      uint64_t v35 = 0;
      int v36 = *(float **)(*(void *)a2 + 24);
      uint64_t v37 = *(void *)(a1 + 176);
      unint64_t v38 = *(_WORD **)(v37 + 24);
      uint64_t v39 = *(int *)(v37 + 8);
      uint64_t v40 = v37 + 12;
      do
      {
        v39 *= *(int *)(v40 + v35);
        v35 += 4;
      }
      while (v35 != 12);
      for (; v39; --v39)
      {
        float v41 = *v36++;
        _S0 = v41;
        __asm { FCVT            H0, S0 }
        *v38++ = LOWORD(_S0);
      }
      return LOWORD(_S0);
    case 2:
      int v9 = *(_DWORD *)(a1 + 24);
      if (v9 <= 1) {
        int v9 = 1;
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&v50, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), v9 * *(_DWORD *)(a1 + 20));
      uint64_t v10 = 0;
      uint64_t v11 = v50;
      uint64_t v12 = *(int *)(v50 + 8);
      do
      {
        v12 *= *(int *)(v50 + 12 + v10);
        v10 += 4;
      }
      while (v10 != 12);
      memcpy(*(void **)(v50 + 24), *(const void **)(*(void *)a2 + 24), 4 * v12);
      uint64_t v13 = 0;
      vDSP_Length v14 = *(int *)(*(void *)a2 + 8);
      do
      {
        v14 *= *(int *)(*(void *)a2 + 12 + v13);
        v13 += 4;
      }
      while (v13 != 12);
      vDSP_vsmul(*(const float **)(v11 + 24), 1, &__B, *(float **)(v11 + 24), 1, v14);
      uint64_t v15 = 0;
      int v48 = 1123942400;
      float v49 = -128.0;
      vDSP_Length v16 = *(int *)(v11 + 8);
      do
      {
        v16 *= *(int *)(v11 + 12 + v15);
        v15 += 4;
      }
      while (v15 != 12);
      vDSP_vclip(*(const float **)(v11 + 24), 1, &v49, (const float *)&v48, *(float **)(v11 + 24), 1, v16);
      uint64_t v17 = 0;
      uint64_t v18 = *(void *)(a1 + 208);
      vDSP_Length v19 = *(char **)(v18 + 24);
      vDSP_Length v20 = *(int *)(v18 + 8);
      uint64_t v21 = v18 + 12;
      do
      {
        v20 *= *(int *)(v21 + v17);
        v17 += 4;
      }
      while (v17 != 12);
      vDSP_vfixr8(*(const float **)(v11 + 24), 1, v19, 1, v20);
      goto LABEL_29;
    case 4:
      int v22 = *(_DWORD *)(a1 + 24);
      if (v22 <= 1) {
        int v22 = 1;
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&v50, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), v22 * *(_DWORD *)(a1 + 20));
      uint64_t v23 = 0;
      uint64_t v24 = v50;
      uint64_t v25 = *(int *)(v50 + 8);
      do
      {
        v25 *= *(int *)(v50 + 12 + v23);
        v23 += 4;
      }
      while (v23 != 12);
      memcpy(*(void **)(v50 + 24), *(const void **)(*(void *)a2 + 24), 4 * v25);
      uint64_t v26 = 0;
      vDSP_Length v27 = *(int *)(*(void *)a2 + 8);
      do
      {
        v27 *= *(int *)(*(void *)a2 + 12 + v26);
        v26 += 4;
      }
      while (v26 != 12);
      vDSP_vsmul(*(const float **)(v24 + 24), 1, &__B, *(float **)(v24 + 24), 1, v27);
      uint64_t v28 = 0;
      int v48 = 1132396544;
      float v49 = 0.0;
      vDSP_Length v29 = *(int *)(v24 + 8);
      do
      {
        v29 *= *(int *)(v24 + 12 + v28);
        v28 += 4;
      }
      while (v28 != 12);
      vDSP_vclip(*(const float **)(v24 + 24), 1, &v49, (const float *)&v48, *(float **)(v24 + 24), 1, v29);
      uint64_t v30 = 0;
      uint64_t v31 = *(void *)(a1 + 192);
      int v32 = *(unsigned __int8 **)(v31 + 24);
      vDSP_Length v33 = *(int *)(v31 + 8);
      uint64_t v34 = v31 + 12;
      do
      {
        v33 *= *(int *)(v34 + v30);
        v30 += 4;
      }
      while (v30 != 12);
      vDSP_vfixru8(*(const float **)(v24 + 24), 1, v32, 1, v33);
LABEL_29:
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      return LOWORD(_S0);
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::invalid_argument_error::invalid_argument_error(exception);
  }
}

void sub_19296B148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void cast_kernel_qsim::~cast_kernel_qsim(cast_kernel_qsim *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::QuantSimEngine::context::supports_custom_compute_path_for_blob(uint64_t a1, _DWORD *a2)
{
  return (*a2 < 0xFu) & (0x17u >> *a2);
}

void Espresso::QuantSimEngine::context::network_transform_pre_allocation(Espresso::QuantSimEngine::context *this, Espresso::net *a2)
{
  unint64_t v36 = 0;
  uint64_t v2 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) == v2) {
    return;
  }
  unint64_t v5 = 0;
  uint64_t v31 = (uint64_t **)((char *)a2 + 352);
  int v6 = (char *)a2 + 56;
  do
  {
    uint64_t v7 = *(void *)(v2 + 16 * v5);
    uint64_t v8 = *(Espresso::QuantSimEngine::context ***)(v7 + 64);
    if (this && v8[1] != this) {
      goto LABEL_24;
    }
    if (!v9) {
      goto LABEL_24;
    }
    uint64_t v10 = *(std::__shared_weak_count **)(v7 + 72);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (*(uint64_t (**)(void *))(*(void *)v9 + 320))(v9);
    *(void *)&long long v32 = &v36;
    uint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v6, &v36, (uint64_t)&std::piecewise_construct, (uint64_t **)&v32);
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a2 + 45), (void *)v12[3]))
    {
      uint64_t v37 = &v36;
      uint64_t v37 = (unint64_t *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v6, &v36, (uint64_t)&std::piecewise_construct, (uint64_t **)&v37)[3];
      uint64_t v13 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, v37, (uint64_t)&std::piecewise_construct, (long long **)&v37);
      long long v32 = *(_OWORD *)(v13 + 56);
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      std::string __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v13 + 9), *((void *)v13 + 10), (uint64_t)(*((void *)v13 + 10) - *((void *)v13 + 9)) >> 2);
      float v14 = *(float *)&v32;
      if (__p)
      {
        uint64_t v34 = __p;
        operator delete(__p);
      }
    }
    else
    {
      float v14 = 1.0;
    }
    if (*(_DWORD *)v11 <= 0x22u && ((1 << *(_DWORD *)v11) & 0x400000075) != 0)
    {
      *(void *)&long long v32 = &v36;
      vDSP_Length v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v6, &v36, (uint64_t)&std::piecewise_construct, (uint64_t **)&v32);
      if (v16[4] - v16[3] != 24) {
        goto LABEL_22;
      }
      uint64_t v17 = (float *)(v11 + 8);
      goto LABEL_18;
    }
    if (*(_DWORD *)v11 == 119)
    {
      *(void *)&long long v32 = &v36;
      uint64_t v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v6, &v36, (uint64_t)&std::piecewise_construct, (uint64_t **)&v32);
      if (v18[4] - v18[3] == 24)
      {
        *(float *)(v11 + 8) = v14 * *(float *)(v11 + 8);
        uint64_t v17 = (float *)(v11 + 12);
LABEL_18:
        float *v17 = v14 * *v17;
      }
    }
LABEL_22:
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
LABEL_24:
    unint64_t v5 = v36 + 1;
    unint64_t v36 = v5;
    uint64_t v2 = *((void *)a2 + 4);
    uint64_t v19 = *((void *)a2 + 5);
  }
  while (v5 < (v19 - v2) >> 4);
  unint64_t v36 = 0;
  if (v19 != v2)
  {
    unint64_t v20 = 0;
    do
    {
      uint64_t v21 = *(void *)(v2 + 16 * v20);
      int v22 = *(Espresso::QuantSimEngine::context ***)(v21 + 64);
      if (!this || v22[1] == this)
      {
        if (v23)
        {
          uint64_t v24 = *(std::__shared_weak_count **)(v21 + 72);
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v23 + 384))(v23);
          if (*(_DWORD *)v25 == 14)
          {
            *(void *)&long long v32 = &v36;
            uint64_t v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 56, &v36, (uint64_t)&std::piecewise_construct, (uint64_t **)&v32);
            if (v26[4] - v26[3] == 24)
            {
              *(void *)&long long v32 = &v36;
              vDSP_Length v27 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 56, &v36, (uint64_t)&std::piecewise_construct, (uint64_t **)&v32);
              if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a2 + 45), (void *)v27[3]))
              {
                uint64_t v37 = &v36;
                uint64_t v37 = (unint64_t *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 56, &v36, (uint64_t)&std::piecewise_construct, (uint64_t **)&v37)[3];
                uint64_t v28 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v37, (uint64_t)&std::piecewise_construct, (long long **)&v37);
                long long v32 = *(_OWORD *)(v28 + 56);
                uint64_t v34 = 0;
                uint64_t v35 = 0;
                std::string __p = 0;
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v28 + 9), *((void *)v28 + 10), (uint64_t)(*((void *)v28 + 10) - *((void *)v28 + 9)) >> 2);
                float v29 = *(float *)&v32;
                if (__p)
                {
                  uint64_t v34 = __p;
                  float v30 = *(float *)&v32;
                  operator delete(__p);
                  float v29 = v30;
                }
              }
              else
              {
                float v29 = 1.0;
              }
              *(float32x2_t *)(v25 + 4) = vmul_n_f32(*(float32x2_t *)(v25 + 4), v29);
            }
          }
          if (v24) {
            nitro::nitro_function::nitro_function(v24);
          }
        }
      }
      unint64_t v20 = v36 + 1;
      unint64_t v36 = v20;
      uint64_t v2 = *((void *)a2 + 4);
    }
    while (v20 < (*((void *)a2 + 5) - v2) >> 4);
  }
}

void sub_19296B688(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::QuantSimEngine::context::~context(Espresso::QuantSimEngine::context *this)
{
  Espresso::context_cpu::~context_cpu(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::QuantSimEngine::blob_container::__copy_from(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v7, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, a2, &v7);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v5 != 0;
}

void sub_19296B77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

double Espresso::QuantSimEngine::blob_container::__copy_from_host(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = Espresso::QuantSimEngine::blob_container::copy_from_fp32(a1, a3, *(float *)(a1 + 112));
  return result;
}

void Espresso::QuantSimEngine::blob_container::__copy_to_host(uint64_t a1, uint64_t a2, void *a3)
{
}

uint64_t Espresso::QuantSimEngine::blob_container::compute_path(Espresso::QuantSimEngine::blob_container *this)
{
  return *((unsigned int *)this + 56);
}

uint64_t Espresso::QuantSimEngine::blob_container::platform(Espresso::QuantSimEngine::blob_container *this)
{
  return 0;
}

void Espresso::QuantSimEngine::blob_container::resize(uint64_t a1, const Espresso::layer_shape *a2)
{
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 168);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 200);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  int v6 = *(std::__shared_weak_count **)(a1 + 216);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  int v7 = *(_DWORD *)(a1 + 8);
  int v8 = *(_DWORD *)(a1 + 12);
  uint64_t v9 = *(int *)(a1 + 16);
  uint64_t v10 = *(int *)(a1 + 20);
  uint64_t v11 = *(int *)(a1 + 24);
  if (v8 * (uint64_t)v7 * v9 * v10 * v11)
  {
    switch(*(_DWORD *)(a1 + 224))
    {
      case 0:
        if ((int)v11 <= 1) {
          LODWORD(v11) = 1;
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v14, v7, v8, v9, v11 * v10);
        uint64_t v12 = *(std::__shared_weak_count **)(a1 + 168);
        *(_OWORD *)(a1 + 160) = v14;
        if (!v12) {
          return;
        }
        goto LABEL_22;
      case 1:
        if ((int)v11 <= 1) {
          LODWORD(v11) = 1;
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(&v14, v7, v8, v9, v11 * v10);
        uint64_t v12 = *(std::__shared_weak_count **)(a1 + 184);
        *(_OWORD *)(a1 + 176) = v14;
        if (!v12) {
          return;
        }
        goto LABEL_22;
      case 2:
        if ((int)v11 <= 1) {
          LODWORD(v11) = 1;
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,4>,std::allocator<Espresso::blob<signed char,4>>,int &,int &,int &,int &,void>(&v14, v7, v8, v9, v11 * v10);
        uint64_t v12 = *(std::__shared_weak_count **)(a1 + 216);
        *(_OWORD *)(a1 + 208) = v14;
        if (!v12) {
          return;
        }
        goto LABEL_22;
      case 4:
        if ((int)v11 <= 1) {
          LODWORD(v11) = 1;
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,void>(&v14, v7, v8, v9, v11 * v10);
        uint64_t v12 = *(std::__shared_weak_count **)(a1 + 200);
        *(_OWORD *)(a1 + 192) = v14;
        if (v12) {
LABEL_22:
        }
          nitro::nitro_function::nitro_function(v12);
        break;
      default:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
        Espresso::invalid_argument_error::invalid_argument_error(exception);
    }
  }
}

void sub_19296B944(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::QuantSimEngine::blob_container::~blob_container(Espresso::QuantSimEngine::blob_container *this)
{
  *(void *)this = &unk_1EE331A28;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  Espresso::abstract_blob_container::~abstract_blob_container(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE331A28;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  Espresso::abstract_blob_container::~abstract_blob_container(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_94@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE380380;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &unk_1EE320DC8;
  v6[38] = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19296BB14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<cast_kernel_qsim>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<cast_kernel_qsim>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380380;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<cast_kernel_qsim>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380380;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_93@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::loopkit_kernel_cpu,std::allocator<Espresso::loopkit_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::loopkit_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_92@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_91@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_90@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  int v8 = operator new(0x160uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)int v8 = &unk_1EE3801F8;
  Espresso::furthest_point_sampling_kernel_cpu::furthest_point_sampling_kernel_cpu((uint64_t)v8 + 24, a1, a3, a2);
  *((void *)v8 + 3) = &unk_1EE320320;
  *((_OWORD *)v8 + 20) = 0u;
  *((_OWORD *)v8 + 21) = 0u;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v8 + 41);
    *((void *)v8 + 40) = v9;
    *((void *)v8 + 41) = v10;
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
  }
  else
  {
    *((void *)v8 + 40) = v9;
    *((void *)v8 + 41) = 0;
  }
  result.n128_u64[0] = (unint64_t)v8 + 24;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_19296BD4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::furthest_point_sampling_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_furthest_point_sampling_kernel::kernel_type_str(Espresso::generic_furthest_point_sampling_kernel *this)
{
  return "furthest_point_sampling";
}

BOOL wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 312);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    uint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 40);
    *(_OWORD *)(v7 + 312) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      vDSP_Length v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v20 = &v43;
      }
      else {
        unint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      int v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        uint64_t v24 = (const std::string::value_type *)v41;
      }
      else {
        uint64_t v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      uint64_t v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      uint64_t v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        float v30 = (const std::string::value_type *)v39;
      }
      else {
        float v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      long long v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v34 = &v38;
      }
      else {
        uint64_t v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      unint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_19296C0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 304);
  v57[0] = *(void *)(a1 + 296);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 304);
  v56[0] = *(void *)(a1 + 296);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        uint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::furthest_point_sampling_kernel_cpu::__launch(v53, v10, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 312);
  if (v23)
  {
    uint64_t v24 = *(std::__shared_weak_count **)(v53 + 320);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    long long v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 304);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19296C834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    uint64_t v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        uint64_t v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19296CB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>(uint64_t a1, int a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("post scale dim != 1 or channel size: %zu / %d", a1, a2);
}

void wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE320320;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE320320;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3801F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::furthest_point_sampling_kernel_cpu,Espresso::furthest_point_sampling_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3801F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_89@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = (char *)operator new(0x1D8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE380268;
  Espresso::kernel_with_uniforms_<Espresso::fused_inner_product_grad_params_t,Espresso::base_kernel>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  long long v7 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v6 + 25) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v6 + 26) = v7;
  *(void *)(v6 + 431) = *(void *)(a2 + 127);
  long long v8 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 22) = v8;
  long long v9 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v6 + 23) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v6 + 24) = v9;
  long long v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v10;
  *((void *)v6 + 3) = &unk_1EE3205D0;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  if (v12)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)v6 + 56);
    *((void *)v6 + 55) = v11;
    *((void *)v6 + 56) = v12;
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  else
  {
    *((void *)v6 + 55) = v11;
    *((void *)v6 + 56) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19296CEA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::fused_inner_product_grad_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_fused_inner_product_grad_kernel::kernel_type_str(Espresso::generic_fused_inner_product_grad_kernel *this)
{
  return "fused_inner_product_grad";
}

BOOL wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  long long v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v7 + 55);
    *((_OWORD *)v7 + 27) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 54);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 54) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_19296D234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 424);
  v23[0] = *(void *)(a1 + 416);
  v23[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>::convert_layer_data_to_fp32(v23, v25, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(void *)(a1 + 416);
  std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 424);
  v22[0] = v9;
  v22[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>::convert_layer_data_to_fp32(v22, v24, *a3, a3[1], 0, 0);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        float __B = *(float *)&(*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v25[0] + 16 * v12;
        unint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, &__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("fused_inner_product_grad: Layer supposed to be unpacked on CPU engine");
}

void sub_19296D640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  *(void *)(v19 - 72) = &a14;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 72));
  a14 = (void **)&a17;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      long long v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        std::string::size_type v32 = v24;
        long long v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      std::string::size_type v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19296D93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE3205D0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE3205D0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380268;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::fused_inner_product_grad_kernel_cpu,Espresso::fused_inner_product_grad_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_88@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x200uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE3801C0;
  Espresso::fused_convolution_grad_kernel_cpu::fused_convolution_grad_kernel_cpu((uint64_t)v6 + 24, a1, v7, a2);
  *((void *)v6 + 3) = &unk_1EE3201C8;
  *((_OWORD *)v6 + 30) = 0u;
  *((_OWORD *)v6 + 31) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    std::string::size_type v10 = (std::__shared_weak_count *)*((void *)v6 + 61);
    *((void *)v6 + 60) = v8;
    *((void *)v6 + 61) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 60) = v8;
    *((void *)v6 + 61) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19296DC1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::fused_convolution_grad_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_fused_convolution_grad_kernel::kernel_type_str(Espresso::generic_fused_convolution_grad_kernel *this)
{
  return "fused_convolution_grad";
}

BOOL wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = (std::string::size_type *)(v7 + 472);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 60);
    *(_OWORD *)(v7 + 472) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        long long v30 = (const std::string::value_type *)v39;
      }
      else {
        long long v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      std::string::size_type v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v34 = &v38;
      }
      else {
        long long v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      std::string::size_type v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_19296DFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 464);
  v23[0] = *(void *)(a1 + 456);
  v23[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>::convert_layer_data_to_fp32(v23, v25, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(void *)(a1 + 456);
  std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 464);
  v22[0] = v9;
  v22[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>::convert_layer_data_to_fp32(v22, v24, *a3, a3[1], 0, 0);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        float __B = *(float *)&(*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v25[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, &__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("fused_convolution_grad: Layer supposed to be unpacked on CPU engine");
}

void sub_19296E3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  *(void *)(v19 - 72) = &a14;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 72));
  a14 = (void **)&a17;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      long long v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        long long v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        std::string::size_type v35 = v26;
        long long v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        std::string::size_type v32 = v24;
        long long v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      std::string::size_type v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19296E6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE3201C8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 60);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 58);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE3201C8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 60);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 58);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3801C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::fused_convolution_grad_kernel_cpu,Espresso::fused_convolution_grad_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3801C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_87@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = (char *)operator new(0x198uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE380070;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31F8D8;
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((void *)v6 + 45) = 0;
  *((void *)v6 + 46) = 0;
  long long v7 = a2[1];
  *(_OWORD *)(v6 + 328) = *a2;
  *(_OWORD *)(v6 + 344) = v7;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    std::string::size_type v10 = (std::__shared_weak_count *)*((void *)v6 + 48);
    *((void *)v6 + 47) = v8;
    *((void *)v6 + 48) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 47) = v8;
    *((void *)v6 + 48) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19296E9AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::static_dequantize_params_t,Espresso::abstract_kernel_with_named_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

const char *Espresso::generic_static_dequantize_kernel::kernel_type_str(Espresso::generic_static_dequantize_kernel *this)
{
  return "static_dequantize";
}

BOOL wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>::supports_weight_key(uint64_t a1, unsigned __int8 **a2)
{
  int v2 = a2;
  if (Espresso::generic_static_dequantize_kernel::supports_weight_key(a1, a2)) {
    return 1;
  }
  int v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (v2[1] != (unsigned __int8 *)10) {
      return 0;
    }
    int v2 = (unsigned __int8 **)*v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *v2 == (unsigned __int8 *)0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, unsigned __int8 **a3, const void *a4, size_t a5)
{
  long long v7 = a3;
  __n128 result = Espresso::generic_static_dequantize_kernel::__set_weight_raw_blob((void *)a1, a2, a3, a4, a5);
  int v10 = *((char *)v7 + 23);
  if (v10 < 0)
  {
    if (v7[1] != (unsigned __int8 *)10) {
      return result;
    }
    long long v7 = (unsigned __int8 **)*v7;
  }
  else if (v10 != 10)
  {
    return result;
  }
  if (*v7 == (unsigned __int8 *)0x6163735F74736F70 && *((_WORD *)v7 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v54, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v12 = v54.__r_.__value_.__r.__words[0];
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 376);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
    if (v13)
    {
      nitro::nitro_function::nitro_function(v13);
      std::string::size_type v14 = *(void *)(a1 + 368);
    }
    else
    {
      std::string::size_type v14 = v12;
    }
    if (a5 != 4 * *(int *)(v14 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v17 = a5;
      uint64_t v18 = exception;
      std::to_string(&v47, v17);
      uint64_t v19 = std::string::insert(&v47, 0, "Unexpected size s=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      uint64_t v21 = std::string::append(&v48, "/blob=");
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v46, 4 * *(int *)(*(void *)(a1 + 368) + 8));
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &v46;
      }
      else {
        uint64_t v23 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v46.__r_.__value_.__l.__size_;
      }
      uint64_t v25 = std::string::append(&v49, (const std::string::value_type *)v23, size);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, " @ ");
      if ((v45 & 0x80u) == 0) {
        long long v27 = (const std::string::value_type *)v44;
      }
      else {
        long long v27 = (const std::string::value_type *)v44[0];
      }
      if ((v45 & 0x80u) == 0) {
        std::string::size_type v28 = v45;
      }
      else {
        std::string::size_type v28 = v44[1];
      }
      uint64_t v29 = std::string::append(&v50, v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v31 = std::string::append(&v51, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, ":");
      if ((v43 & 0x80u) == 0) {
        long long v33 = (const std::string::value_type *)v42;
      }
      else {
        long long v33 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v34 = v43;
      }
      else {
        std::string::size_type v34 = v42[1];
      }
      std::string::size_type v35 = std::string::append(&v52, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v41, 197);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v37 = &v41;
      }
      else {
        long long v37 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = v41.__r_.__value_.__l.__size_;
      }
      std::string v39 = std::string::append(&v53, (const std::string::value_type *)v37, v38);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v18, &v54);
      __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::__shared_count v15 = *(void **)(v14 + 16);
    return memcpy(v15, a4, a5);
  }
  return result;
}

void sub_19296ED70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void Espresso::abstract_kernel_with_named_weights<Espresso::static_dequantize_params_t>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
}

void wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 360);
  v57[0] = *(void *)(a1 + 352);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 360);
  v56[0] = *(void *)(a1 + 352);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        unint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::static_dequantize_kernel_cpu::__launch(v53, v10, (uint64_t **)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 368);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 376);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      long long v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 360);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19296F4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    uint64_t v8 = a3;
    long long v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19296F840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>::~wrapper_kernel(Espresso::generic_static_dequantize_kernel *this)
{
  *(void *)this = &unk_1EE31F8D8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_static_dequantize_kernel::~generic_static_dequantize_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31F8D8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_static_dequantize_kernel::~generic_static_dequantize_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380070;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::static_dequantize_kernel_cpu,Espresso::static_dequantize_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_86@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x160uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE37FF20;
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  *((void *)v6 + 38) = *(void *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  *((void *)v6 + 3) = &unk_1EE31F068;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 41);
    *((void *)v6 + 40) = v7;
    *((void *)v6 + 41) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 40) = v7;
    *((void *)v6 + 41) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19296FB2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::static_quantize_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_static_quantize_kernel::kernel_type_str(Espresso::generic_static_quantize_kernel *this)
{
  return "static_quantize";
}

BOOL wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 312);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 40);
    *(_OWORD *)(v7 + 312) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      long long v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_19296FEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 304);
  v57[0] = *(void *)(a1 + 296);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 304);
  v56[0] = *(void *)(a1 + 296);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        std::string::size_type v13 = &v59[0][2 * v12];
        std::__shared_count v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::static_quantize_kernel_cpu::__launch(v53, v10, (uint64_t **)v58, v59);
  uint64_t v23 = *(void *)(v53 + 312);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 320);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      long long v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 304);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192970614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    long long v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_192970958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31F068;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31F068;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FF20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::static_quantize_kernel_cpu,Espresso::static_quantize_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FF20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_85@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = (char *)operator new(0x170uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE37FC80;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 19) = *a2;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)((char *)a2 + 12);
  *((void *)v6 + 3) = &unk_1EE31E008;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 43);
    *((void *)v6 + 42) = v7;
    *((void *)v6 + 43) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 42) = v7;
    *((void *)v6 + 43) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192970C48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::slice_update_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_slice_update_kernel::kernel_type_str(Espresso::generic_slice_update_kernel *this)
{
  return "slice_update";
}

BOOL wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 328);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 42);
    *(_OWORD *)(v7 + 328) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      long long v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_192970FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 320);
  v57[0] = *(void *)(a1 + 312);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 320);
  v56[0] = *(void *)(a1 + 312);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        std::string::size_type v13 = &v59[0][2 * v12];
        std::__shared_count v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::slice_update_kernel_cpu::__launch((unsigned int *)v53, v10, (uint64_t)v58, v59);
  uint64_t v23 = *(void *)(v53 + 328);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 336);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      long long v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 320);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192971730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    long long v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_192971A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31E008;
  int v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31E008;
  int v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FC80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::slice_update_kernel_cpu,Espresso::slice_update_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FC80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_84@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = (char *)operator new(0x1B8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE37F4D8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31AF90;
  *((void *)v6 + 48) = 0;
  *((void *)v6 + 49) = 0;
  *((void *)v6 + 50) = 0;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *((_DWORD *)v6 + 76) = *(_DWORD *)a2;
  v6[308] = *(unsigned char *)(a2 + 4);
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 52);
    *((void *)v6 + 51) = v7;
    *((void *)v6 + 52) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 51) = v7;
    *((void *)v6 + 52) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192971D74(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 51);
    *((_OWORD *)v7 + 25) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 50);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 50) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929720F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 392);
  v57[0] = *(void *)(a1 + 384);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 392);
  v56[0] = *(void *)(a1 + 384);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        unint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::argsort_kernel_cpu::__launch(v53, v10, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 400);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 408);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 392);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192972848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_192972B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31AF90;
  int v2 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE34D448;
  int v4 = (void *)*((void *)this + 39);
  if (v4)
  {
    *((void *)this + 40) = v4;
    operator delete(v4);
  }
  long long v5 = (void *)*((void *)this + 36);
  if (v5)
  {
    *((void *)this + 37) = v5;
    operator delete(v5);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE31AF90;
  int v2 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE34D448;
  int v4 = (void *)*((void *)this + 39);
  if (v4)
  {
    *((void *)this + 40) = v4;
    operator delete(v4);
  }
  long long v5 = (void *)*((void *)this + 36);
  if (v5)
  {
    *((void *)this + 37) = v5;
    operator delete(v5);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F4D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::argsort_kernel_cpu,Espresso::argsort_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F4D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_83@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = (char *)operator new(0x200uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE37F388;
  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 54) = 0;
  *((void *)v6 + 55) = 0;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 408) = v7;
  *((_DWORD *)v6 + 106) = *(_DWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 344) = v8;
  long long v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 376) = v9;
  *((void *)v6 + 3) = &unk_1EE31A6F8;
  *((_OWORD *)v6 + 30) = 0u;
  *((_OWORD *)v6 + 31) = 0u;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  if (v11)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v6 + 61);
    *((void *)v6 + 60) = v10;
    *((void *)v6 + 61) = v11;
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
  }
  else
  {
    *((void *)v6 + 60) = v10;
    *((void *)v6 + 61) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192972F08(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::conv3d_kernel_cpu_base<Espresso::generic_conv3d_kernel>::get_weights@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 448);
  *a2 = *(void *)(result + 440);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t Espresso::conv3d_kernel_cpu_base<Espresso::generic_conv3d_kernel>::get_biases@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 432);
  *a2 = *(void *)(result + 424);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void Espresso::conv3d_kernel_cpu_base<Espresso::generic_conv3d_kernel>::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 448);
  *(void *)(a1 + 440) = v3;
  *(void *)(a1 + 448) = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::conv3d_kernel_cpu_base<Espresso::generic_conv3d_kernel>::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  int v6 = *(std::__shared_weak_count **)(a1 + 432);
  *(void *)(a1 + 424) = v5;
  *(void *)(a1 + 432) = v4;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  *(_DWORD *)(a1 + 304) = *a2 != 0;
}

uint64_t Espresso::conv3d_kernel_cpu_base<Espresso::generic_conv3d_kernel>::num_weights_blob(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 304)) {
    return 2;
  }
  else {
    return 1;
  }
}

void Espresso::conv3d_kernel_cpu_base<Espresso::generic_conv3d_kernel>::get_weights_blob(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 == 1)
  {
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,1>>>((uint64_t *)&v4, a1 + 1, a1 + 53);
    goto LABEL_5;
  }
  if (!a2)
  {
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,5>>>((uint64_t *)&v4, a1 + 1, a1 + 55);
LABEL_5:
    *(_OWORD *)a3 = v4;
    return;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
}

void Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,5>>>(uint64_t *a1, void *a2, uint64_t *a3)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>(a1, a2);
  uint64_t v5 = *a1;
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  long long v8 = *(std::__shared_weak_count **)(v5 + 232);
  *(void *)(v5 + 224) = v7;
  *(void *)(v5 + 232) = v6;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  long long v9 = operator new(0x60uLL);
  v9[1] = 0;
  v9[2] = 0;
  *long long v9 = &unk_1EE3899C8;
  uint64_t v10 = (char *)(v9 + 3);
  v9[3] = &unk_1EE36BF10;
  void v9[4] = 0;
  v9[5] = 0;
  v9[6] = 0;
  *((unsigned char *)v9 + 56) = 0;
  *((_OWORD *)v9 + 4) = 0u;
  *((_OWORD *)v9 + 5) = 0u;
  uint64_t v11 = *(std::__shared_weak_count **)(v5 + 168);
  *(void *)(v5 + 160) = v9 + 3;
  *(void *)(v5 + 168) = v9;
  if (v11)
  {
    nitro::nitro_function::nitro_function(v11);
    uint64_t v10 = *(char **)(v5 + 160);
  }
  uint64_t v12 = 0;
  *(void *)&long long v13 = 0x100000001;
  *((void *)&v13 + 1) = 0x100000001;
  *(_OWORD *)(v10 + 8) = v13;
  uint64_t v14 = *a3;
  uint64_t v15 = *a3 + 8;
  do
  {
    *(_DWORD *)&v10[v12 + 8] = *(_DWORD *)(v15 + v12);
    v12 += 4;
  }
  while (v12 != 16);
  uint64_t v16 = 0;
  *((_DWORD *)v10 + 5) = 1;
  unint64_t v17 = *(int *)(v14 + 8);
  do
  {
    v17 *= *(int *)(v14 + 12 + v16);
    v16 += 4;
  }
  while (v16 != 16);
  uint64_t v18 = 0;
  int v19 = *((_DWORD *)v10 + 2);
  unint64_t v20 = v19;
  do
  {
    v20 *= *(int *)&v10[v18 + 12];
    v18 += 4;
  }
  while (v18 != 12);
  *((_DWORD *)v10 + 5) = v17 / v20;
  *(_DWORD *)(v5 + 8) = v19;
  *(_DWORD *)(v5 + 12) = *((_DWORD *)v10 + 3);
  *(_DWORD *)(v5 + 16) = *((_DWORD *)v10 + 4);
  *(_DWORD *)(v5 + 20) = *((_DWORD *)v10 + 5);
  *(_DWORD *)(v5 + 24) = 1;
  *((void *)v10 + 3) = *(void *)(v14 + 32);
  v10[32] = 0;
}

void sub_1929731CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,1>>>(uint64_t *a1, void *a2, void *a3)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>(a1, a2);
  uint64_t v5 = *a1;
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  long long v8 = *(std::__shared_weak_count **)(v5 + 232);
  *(void *)(v5 + 224) = v7;
  *(void *)(v5 + 232) = v6;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  long long v9 = operator new(0x60uLL);
  v9[1] = 0;
  v9[2] = 0;
  *long long v9 = &unk_1EE3899C8;
  uint64_t v10 = (char *)(v9 + 3);
  v9[3] = &unk_1EE36BF10;
  void v9[4] = 0;
  v9[5] = 0;
  v9[6] = 0;
  *((unsigned char *)v9 + 56) = 0;
  *((_OWORD *)v9 + 4) = 0u;
  *((_OWORD *)v9 + 5) = 0u;
  uint64_t v11 = *(std::__shared_weak_count **)(v5 + 168);
  *(void *)(v5 + 160) = v9 + 3;
  *(void *)(v5 + 168) = v9;
  if (v11)
  {
    nitro::nitro_function::nitro_function(v11);
    uint64_t v10 = *(char **)(v5 + 160);
  }
  result.n128_u64[0] = 0x100000001;
  result.n128_u64[1] = 0x100000001;
  *(__n128 *)(v10 + 8) = result;
  uint64_t v13 = *a3;
  int v14 = *(_DWORD *)(*a3 + 8);
  *((_DWORD *)v10 + 2) = v14;
  *(_DWORD *)(v5 + 8) = v14;
  *(_DWORD *)(v5 + 12) = *((_DWORD *)v10 + 3);
  *(_DWORD *)(v5 + 16) = *((_DWORD *)v10 + 4);
  *(_DWORD *)(v5 + 20) = *((_DWORD *)v10 + 5);
  *(_DWORD *)(v5 + 24) = 1;
  *((void *)v10 + 3) = *(void *)(v13 + 16);
  v10[32] = 0;
  return result;
}

void sub_1929732EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>::supports_weight_key(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = a2[23];
  if (((char)a2[23] & 0x80000000) == 0)
  {
    if (v2 == 1)
    {
      int v5 = *a2;
      return v5 == 87 || v5 == 98;
    }
    if (v2 != 10) {
      return 0;
    }
    return *(void *)a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
  }
  if (*((void *)a2 + 1) != 1)
  {
    if (*((void *)a2 + 1) != 10) {
      return 0;
    }
    goto LABEL_15;
  }
  int v3 = **(unsigned __int8 **)a2;
  BOOL result = 1;
  if (v3 != 87 && v3 != 98)
  {
    BOOL result = 0;
    if ((v2 & 0x80) != 0 && *((void *)a2 + 1) == 10)
    {
LABEL_15:
      a2 = *(unsigned __int8 **)a2;
      return *(void *)a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
    }
  }
  return result;
}

void wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, const std::string::value_type **a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  long long v8 = a3;
  Espresso::conv3d_kernel_cpu::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  int v10 = *((char *)v8 + 23);
  if (v10 < 0)
  {
    if (v8[1] != (const std::string::value_type *)10) {
      return;
    }
    long long v8 = (const std::string::value_type **)*v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*v8 == (const std::string::value_type *)0x6163735F74736F70 && *((_WORD *)v8 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v53, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v12 = a1 + 472;
    std::string::size_type v13 = v53.__r_.__value_.__r.__words[0];
    int v14 = *(std::__shared_weak_count **)(a1 + 480);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
    if (v14)
    {
      nitro::nitro_function::nitro_function(v14);
      std::string::size_type v15 = *(void *)v12;
    }
    else
    {
      std::string::size_type v15 = v13;
    }
    if (a5 != 4 * *(int *)(v15 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v46, a5);
      uint64_t v18 = std::string::insert(&v46, 0, "Unexpected size s=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      unint64_t v20 = std::string::append(&v47, "/blob=");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v45, 4 * *(int *)(*(void *)v12 + 8));
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v22 = &v45;
      }
      else {
        unint64_t v22 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v45.__r_.__value_.__l.__size_;
      }
      long long v24 = std::string::append(&v48, (const std::string::value_type *)v22, size);
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v43, " @ ");
      if ((v44 & 0x80u) == 0) {
        std::string::size_type v26 = (const std::string::value_type *)v43;
      }
      else {
        std::string::size_type v26 = (const std::string::value_type *)v43[0];
      }
      if ((v44 & 0x80u) == 0) {
        std::string::size_type v27 = v44;
      }
      else {
        std::string::size_type v27 = v43[1];
      }
      std::__shared_count v28 = std::string::append(&v49, v26, v27);
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      uint64_t v30 = std::string::append(&v50, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, ":");
      if ((v42 & 0x80u) == 0) {
        vDSP_Length v32 = (const std::string::value_type *)v41;
      }
      else {
        vDSP_Length v32 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v33 = v42;
      }
      else {
        std::string::size_type v33 = v41[1];
      }
      int v34 = std::string::append(&v51, v32, v33);
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v40, 197);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v36 = &v40;
      }
      else {
        uint64_t v36 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v37 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v37 = v40.__r_.__value_.__l.__size_;
      }
      std::__shared_count v38 = std::string::append(&v52, (const std::string::value_type *)v36, v37);
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v53);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v16 = *(void **)(v15 + 16);
    memcpy(v16, a4, a5);
  }
}

void sub_1929736D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void Espresso::conv3d_kernel_cpu_base<Espresso::generic_conv3d_kernel>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
  int v3 = *(std::__shared_weak_count **)(a1 + 448);
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  long long v8 = *(std::__shared_weak_count **)(a1 + 464);
  v57[0] = *(void *)(a1 + 456);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  long long v9 = *(std::__shared_weak_count **)(a1 + 464);
  v56[0] = *(void *)(a1 + 456);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::string::size_type v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        unint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::conv3d_kernel_cpu::__launch((int *)v53, v10, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 472);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 480);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        std::string::size_type v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    std::string::size_type v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      long long v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 464);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192973E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    long long v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      int v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        long long v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      long long v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929741C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>::~wrapper_kernel(Espresso::generic_conv3d_kernel *this)
{
  *(void *)this = &unk_1EE31A6F8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 60);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 58);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE3578B8;
  long long v4 = (std::__shared_weak_count *)*((void *)this + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE31A6F8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 60);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 58);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE3578B8;
  long long v4 = (std::__shared_weak_count *)*((void *)this + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F388;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::conv3d_kernel_cpu,Espresso::conv3d_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_82@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x190uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F468;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  long long v7 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v7;
  *((_OWORD *)v6 + 21) = a2[2];
  *(_OWORD *)(v6 + 348) = *(_OWORD *)((char *)a2 + 44);
  *((void *)v6 + 3) = &unk_1EE31ACE0;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 47);
    *((void *)v6 + 46) = v8;
    *((void *)v6 + 47) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 46) = v8;
    *((void *)v6 + 47) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192974530(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::pool3d_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_pool3d_kernel::kernel_type_str(Espresso::generic_pool3d_kernel *this)
{
  return "pool3d";
}

BOOL wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  long long v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 360);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 46);
    *(_OWORD *)(v7 + 360) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_1929748C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 352);
  v57[0] = *(void *)(a1 + 344);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 352);
  v56[0] = *(void *)(a1 + 344);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::pool3d_kernel_cpu::__launch(v53, v10, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 360);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 368);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 352);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19297501C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      int v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_192975360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31ACE0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31ACE0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F468;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::pool3d_kernel_cpu,Espresso::pool3d_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_81@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  int v8 = (char *)operator new(0x228uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)int v8 = &unk_1EE37FDD0;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 38) = v8 + 312;
  *((void *)v8 + 39) = 0;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *((_DWORD *)v8 + 94) = 1065353216;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((_DWORD *)v8 + 104) = 1065353216;
  *((_DWORD *)v8 + 85) = a3;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  uint64_t v9 = *a2;
  v8[336] = *((unsigned char *)a2 + 8);
  *((void *)v8 + 40) = 0;
  *((void *)v8 + 41) = v9;
  *((void *)v8 + 3) = &unk_1EE31E818;
  *(_OWORD *)(v8 + 520) = 0u;
  *(_OWORD *)(v8 + 536) = 0u;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  if (v11)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v8 + 66);
    *((void *)v8 + 65) = v10;
    *((void *)v8 + 66) = v11;
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
  }
  else
  {
    *((void *)v8 + 65) = v10;
    *((void *)v8 + 66) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192975684(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>::supports_weight_key(uint64_t a1, _DWORD *a2)
{
  int v2 = a2;
  if (Espresso::self_attention_kernel_cpu::supports_weight_key(a1, a2)) {
    return 1;
  }
  int v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (*((void *)v2 + 1) != 10) {
      return 0;
    }
    int v2 = *(_DWORD **)v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *(void *)v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

void wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  int v8 = a3;
  Espresso::self_attention_kernel_cpu::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  int v10 = *((char *)v8 + 23);
  if (v10 < 0)
  {
    if (v8[1] != 10) {
      return;
    }
    int v8 = (uint64_t *)*v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*v8 == 0x6163735F74736F70 && *((_WORD *)v8 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v54, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v12 = v54.__r_.__value_.__r.__words[0];
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 520);
    *(_OWORD *)(a1 + 512) = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
    if (v13)
    {
      nitro::nitro_function::nitro_function(v13);
      std::string::size_type v14 = *(void *)(a1 + 512);
    }
    else
    {
      std::string::size_type v14 = v12;
    }
    if (a5 != 4 * *(int *)(v14 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v17 = a5;
      uint64_t v18 = exception;
      std::to_string(&v47, v17);
      uint64_t v19 = std::string::insert(&v47, 0, "Unexpected size s=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      uint64_t v21 = std::string::append(&v48, "/blob=");
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v46, 4 * *(int *)(*(void *)(a1 + 512) + 8));
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &v46;
      }
      else {
        uint64_t v23 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v46.__r_.__value_.__l.__size_;
      }
      uint64_t v25 = std::string::append(&v49, (const std::string::value_type *)v23, size);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, " @ ");
      if ((v45 & 0x80u) == 0) {
        long long v27 = (const std::string::value_type *)v44;
      }
      else {
        long long v27 = (const std::string::value_type *)v44[0];
      }
      if ((v45 & 0x80u) == 0) {
        std::string::size_type v28 = v45;
      }
      else {
        std::string::size_type v28 = v44[1];
      }
      uint64_t v29 = std::string::append(&v50, v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v31 = std::string::append(&v51, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, ":");
      if ((v43 & 0x80u) == 0) {
        uint64_t v33 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v33 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v34 = v43;
      }
      else {
        std::string::size_type v34 = v42[1];
      }
      int v35 = std::string::append(&v52, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v41, 197);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v37 = &v41;
      }
      else {
        unint64_t v37 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = v41.__r_.__value_.__l.__size_;
      }
      uint64_t v39 = std::string::append(&v53, (const std::string::value_type *)v37, v38);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v18, &v54);
      __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::__shared_count v15 = *(void **)(v14 + 16);
    memcpy(v15, a4, a5);
  }
}

void sub_192975A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 504);
  v23[0] = *(void *)(a1 + 496);
  v23[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>::convert_layer_data_to_fp32(v23, v25, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(void *)(a1 + 496);
  int v10 = *(std::__shared_weak_count **)(a1 + 504);
  v22[0] = v9;
  v22[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>::convert_layer_data_to_fp32(v22, v24, *a3, a3[1], 0, 0);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        float __B = *(float *)&(*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v25[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        unint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, &__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("self_attention: Layer supposed to be unpacked on CPU engine");
}

void sub_192975E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  *(void *)(v19 - 72) = &a14;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 72));
  a14 = (void **)&a17;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    long long v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      long long v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        long long v32 = v24;
        std::string::size_type v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      long long v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19297613C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>::~wrapper_kernel(a1);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE31E818;
  int v2 = (std::__shared_weak_count *)*((void *)a1 + 65);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)a1 + 63);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)a1 = &unk_1EE35DC58;
  int v4 = (std::__shared_weak_count *)*((void *)a1 + 61);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)a1 + 59);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 57);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  BOOL v7 = (std::__shared_weak_count *)*((void *)a1 + 55);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  int v8 = (std::__shared_weak_count *)*((void *)a1 + 53);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)a1 + 51);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }

  Espresso::composed_kernel_with_named_weights<Espresso::self_attention_params_t>::~composed_kernel_with_named_weights(a1);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FDD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::self_attention_kernel_cpu,Espresso::self_attention_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FDD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_80@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  int v8 = (char *)operator new(0x208uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)int v8 = &unk_1EE3800A8;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 38) = v8 + 312;
  *((void *)v8 + 39) = 0;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *((_DWORD *)v8 + 94) = 1065353216;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((_DWORD *)v8 + 104) = 1065353216;
  *((_DWORD *)v8 + 85) = a3;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  uint64_t v9 = *a2;
  *((void *)v8 + 40) = 0;
  *((void *)v8 + 41) = v9;
  *((_DWORD *)v8 + 84) = *((_DWORD *)a2 + 2);
  *((void *)v8 + 3) = &unk_1EE31FA70;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  if (v11)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v8 + 62);
    *((void *)v8 + 61) = v10;
    *((void *)v8 + 62) = v11;
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
  }
  else
  {
    *((void *)v8 + 61) = v10;
    *((void *)v8 + 62) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192976478(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>::supports_weight_key(uint64_t a1, unsigned __int8 **a2)
{
  int v2 = a2;
  if (Espresso::bahdanau_attention_kernel_cpu::supports_weight_key(a1, a2)) {
    return 1;
  }
  int v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (v2[1] != (unsigned __int8 *)10) {
      return 0;
    }
    int v2 = (unsigned __int8 **)*v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *v2 == (unsigned __int8 *)0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

void wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, char *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  int v8 = a3;
  Espresso::bahdanau_attention_kernel_cpu::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  int v10 = v8[23];
  if (v10 < 0)
  {
    if (*((void *)v8 + 1) != 10) {
      return;
    }
    int v8 = *(char **)v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*(void *)v8 == 0x6163735F74736F70 && *((_WORD *)v8 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v54, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v12 = v54.__r_.__value_.__r.__words[0];
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 488);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
    if (v13)
    {
      nitro::nitro_function::nitro_function(v13);
      std::string::size_type v14 = *(void *)(a1 + 480);
    }
    else
    {
      std::string::size_type v14 = v12;
    }
    if (a5 != 4 * *(int *)(v14 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v17 = a5;
      uint64_t v18 = exception;
      std::to_string(&v47, v17);
      uint64_t v19 = std::string::insert(&v47, 0, "Unexpected size s=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      uint64_t v21 = std::string::append(&v48, "/blob=");
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v46, 4 * *(int *)(*(void *)(a1 + 480) + 8));
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &v46;
      }
      else {
        uint64_t v23 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v46.__r_.__value_.__l.__size_;
      }
      uint64_t v25 = std::string::append(&v49, (const std::string::value_type *)v23, size);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, " @ ");
      if ((v45 & 0x80u) == 0) {
        long long v27 = (const std::string::value_type *)v44;
      }
      else {
        long long v27 = (const std::string::value_type *)v44[0];
      }
      if ((v45 & 0x80u) == 0) {
        std::string::size_type v28 = v45;
      }
      else {
        std::string::size_type v28 = v44[1];
      }
      uint64_t v29 = std::string::append(&v50, v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v31 = std::string::append(&v51, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, ":");
      if ((v43 & 0x80u) == 0) {
        uint64_t v33 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v33 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v34 = v43;
      }
      else {
        std::string::size_type v34 = v42[1];
      }
      int v35 = std::string::append(&v52, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v41, 197);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v37 = &v41;
      }
      else {
        unint64_t v37 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = v41.__r_.__value_.__l.__size_;
      }
      uint64_t v39 = std::string::append(&v53, (const std::string::value_type *)v37, v38);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v18, &v54);
      __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::__shared_count v15 = *(void **)(v14 + 16);
    memcpy(v15, a4, a5);
  }
}

void sub_192976828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 472);
  v23[0] = *(void *)(a1 + 464);
  v23[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>::convert_layer_data_to_fp32(v23, v25, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(void *)(a1 + 464);
  int v10 = *(std::__shared_weak_count **)(a1 + 472);
  v22[0] = v9;
  v22[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>::convert_layer_data_to_fp32(v22, v24, *a3, a3[1], 0, 0);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        float __B = *(float *)&(*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v25[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        unint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, &__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("bahdanau_attention: Layer supposed to be unpacked on CPU engine");
}

void sub_192976C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  *(void *)(v19 - 72) = &a14;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 72));
  a14 = (void **)&a17;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    long long v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      long long v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        long long v32 = v24;
        std::string::size_type v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      long long v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_192976F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>::~wrapper_kernel(Espresso::base_kernel *a1)
{
  wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>::~wrapper_kernel(a1);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE31FA70;
  int v2 = (std::__shared_weak_count *)*((void *)a1 + 61);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)a1 + 59);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)a1 = &unk_1EE364068;
  int v4 = (std::__shared_weak_count *)*((void *)a1 + 57);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)a1 + 55);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 53);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  BOOL v7 = (std::__shared_weak_count *)*((void *)a1 + 51);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }

  Espresso::composed_kernel_with_named_weights<Espresso::bahdanau_attention_params_t>::~composed_kernel_with_named_weights(a1);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3800A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::bahdanau_attention_kernel_cpu,Espresso::bahdanau_attention_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3800A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_79@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x160uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE380038;
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  long long v7 = *a2;
  *((void *)v6 + 3) = &unk_1EE31F780;
  *((_OWORD *)v6 + 19) = v7;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    int v10 = (std::__shared_weak_count *)*((void *)v6 + 41);
    *((void *)v6 + 40) = v8;
    *((void *)v6 + 41) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 40) = v8;
    *((void *)v6 + 41) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192977220(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  long long v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    int v10 = (std::string::size_type *)(v7 + 312);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 40);
    *(_OWORD *)(v7 + 312) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      long long v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        long long v30 = (const std::string::value_type *)v39;
      }
      else {
        long long v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      long long v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v34 = &v38;
      }
      else {
        std::string::size_type v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      long long v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_19297759C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 304);
  v57[0] = *(void *)(a1 + 296);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 304);
  v56[0] = *(void *)(a1 + 296);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        std::string::size_type v13 = &v59[0][2 * v12];
        std::__shared_count v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::local_correlation_kernel_cpu::__launch((_DWORD *)v53, v10, (uint64_t)v58, v59);
  uint64_t v23 = *(void *)(v53 + 312);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 320);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      long long v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 304);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192977CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    long long v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_192978038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31F780;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31F780;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380038;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::local_correlation_kernel_cpu,Espresso::local_correlation_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_78@<Q0>(uint64_t *a1@<X1>, int *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x158uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FD60;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  int v7 = *a2;
  *((void *)v6 + 3) = &unk_1EE31E568;
  *((_DWORD *)v6 + 76) = v7;
  *((_WORD *)v6 + 154) = *((_WORD *)a2 + 2);
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 40);
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192978328(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  int v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 39);
    *((_OWORD *)v7 + 19) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 38);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 38) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929786A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 296);
  v57[0] = *(void *)(a1 + 288);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 296);
  v56[0] = *(void *)(a1 + 288);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        std::string::size_type v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::grid_sampling_kernel_cpu::__launch(v53, v10, (uint64_t)v58, v59);
  uint64_t v23 = *(void *)(v53 + 304);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 312);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 296);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192978DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_192979140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31E568;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31E568;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FD60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::grid_sampling_kernel_cpu,Espresso::grid_sampling_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FD60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_77@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x1C0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE380188;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE320020;
  *((void *)v6 + 38) = v6 + 312;
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 43) = 0;
  *((void *)v6 + 44) = 0;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  uint64_t v7 = *a2;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 41) = v7;
  *((_DWORD *)v6 + 84) = *((_DWORD *)a2 + 2);
  *((_OWORD *)v6 + 26) = 0u;
  *((_OWORD *)v6 + 27) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 53);
    *((void *)v6 + 52) = v8;
    *((void *)v6 + 53) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 52) = v8;
    *((void *)v6 + 53) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192979450(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::sparse_inner_product_params_t,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

const char *Espresso::generic_sparse_inner_product_kernel::kernel_type_str(Espresso::generic_sparse_inner_product_kernel *this)
{
  return "sparse_inner_product";
}

BOOL wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = a2;
  if (Espresso::sparse_inner_product_kernel_cpu::supports_weight_key(a1, a2)) {
    return 1;
  }
  int v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (v2[1] != 10) {
      return 0;
    }
    int v2 = (uint64_t *)*v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

void wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, const char *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = a3;
  Espresso::sparse_inner_product_kernel_cpu::__set_weight_raw_blob(a1, a2, a3, (uint64_t)a4, a5);
  int v9 = v7[23];
  if (v9 < 0)
  {
    if (*((void *)v7 + 1) != 10) {
      return;
    }
    uint64_t v7 = *(const char **)v7;
  }
  else if (v9 != 10)
  {
    return;
  }
  if (*(void *)v7 == 0x6163735F74736F70 && *((_WORD *)v7 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v11 = a1 + 408;
    std::string::size_type v12 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v13 = *(std::__shared_weak_count **)(a1 + 416);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v13)
    {
      nitro::nitro_function::nitro_function(v13);
      std::string::size_type v14 = *(void *)v11;
    }
    else
    {
      std::string::size_type v14 = v12;
    }
    if (a5 != 4 * *(int *)(v14 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v45, a5);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*(void *)v11 + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v52);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::__shared_count v15 = *(void **)(v14 + 16);
    memcpy(v15, a4, a5);
  }
}

void sub_192979814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void Espresso::abstract_kernel_with_weights<Espresso::sparse_inner_product_params_t>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
}

void wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 400);
  v57[0] = *(void *)(a1 + 392);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  int v9 = *(std::__shared_weak_count **)(a1 + 400);
  v56[0] = *(void *)(a1 + 392);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::sparse_inner_product_kernel_cpu::__launch(v53, v10, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 408);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 416);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 400);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192979FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    uint64_t v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19297A2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>::~wrapper_kernel(Espresso::generic_sparse_inner_product_kernel *this)
{
  *(void *)this = &unk_1EE320020;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE367420;
  int v4 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  Espresso::generic_sparse_inner_product_kernel::~generic_sparse_inner_product_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE320020;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE367420;
  int v4 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }

  Espresso::generic_sparse_inner_product_kernel::~generic_sparse_inner_product_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380188;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::sparse_inner_product_kernel_cpu,Espresso::sparse_inner_product_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_76@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x218uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F3F8;
  Espresso::dev_op_kernel_cpu::dev_op_kernel_cpu((uint64_t)(v6 + 24), a1, v7, a2);
  *((void *)v6 + 3) = &unk_1EE31AA30;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 64);
    *((void *)v6 + 63) = v8;
    *((void *)v6 + 64) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 63) = v8;
    *((void *)v6 + 64) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19297A648(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v7 + 63);
    *((_OWORD *)v7 + 31) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 62);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 62) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_19297A9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 488);
  v57[0] = *(void *)(a1 + 480);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 488);
  v56[0] = *(void *)(a1 + 480);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = (Espresso::dev_op_kernel_cpu *)a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        unint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  unint64_t v22 = v53;
  Espresso::dev_op_kernel_cpu::__launch(v53, v10, v58, v59);
  uint64_t v23 = *((void *)v53 + 62);
  if (v23)
  {
    long long v24 = (std::__shared_weak_count *)*((void *)v53 + 63);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    unint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = (std::__shared_weak_count *)*((void *)v22 + 61);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19297B11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19297B460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>::~wrapper_kernel(Espresso::dev_op_kernel_cpu *this)
{
  *(void *)this = &unk_1EE31AA30;
  int v2 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::dev_op_kernel_cpu::~dev_op_kernel_cpu(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31AA30;
  int v2 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::dev_op_kernel_cpu::~dev_op_kernel_cpu(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F3F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::dev_op_kernel_cpu,Espresso::dev_op_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F3F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_75@<Q0>(uint64_t *a1@<X1>, __int16 *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x158uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F3C0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  __int16 v7 = *a2;
  *((void *)v6 + 3) = &unk_1EE31A8D8;
  *((_WORD *)v6 + 152) = v7;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 40);
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19297B748(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cumsum_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_cumsum_kernel::kernel_type_str(Espresso::generic_cumsum_kernel *this)
{
  return "cumsum";
}

BOOL wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  __int16 v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v7 + 39);
    *((_OWORD *)v7 + 19) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 38);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 38) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_19297BAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 296);
  v57[0] = *(void *)(a1 + 288);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 296);
  v56[0] = *(void *)(a1 + 288);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::cumsum_kernel_cpu::__launch(v53, v10, (uint64_t)v58, v59);
  uint64_t v23 = *(void *)(v53 + 304);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 312);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 296);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19297C230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19297C574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31A8D8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31A8D8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F3C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cumsum_kernel_cpu,Espresso::cumsum_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F3C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_74@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x160uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F698;
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  long long v7 = *a2;
  *((void *)v6 + 3) = &unk_1EE31BAB0;
  *((_OWORD *)v6 + 19) = v7;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 41);
    *((void *)v6 + 40) = v8;
    *((void *)v6 + 41) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 40) = v8;
    *((void *)v6 + 41) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19297C858(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  long long v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 312);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 40);
    *(_OWORD *)(v7 + 312) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_19297CBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 304);
  v57[0] = *(void *)(a1 + 296);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 304);
  v56[0] = *(void *)(a1 + 296);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        std::string::size_type v13 = &v59[0][2 * v12];
        std::__shared_count v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::one_hot_kernel_cpu::__launch(v53, a2, (uint64_t **)v58, v59);
  uint64_t v23 = *(void *)(v53 + 312);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 320);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 304);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19297D334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19297D678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31BAB0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31BAB0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F698;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::one_hot_kernel_cpu,Espresso::one_hot_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_73@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  int v4 = (char *)operator new(0x158uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)int v4 = &unk_1EE380118;
  Espresso::base_kernel::base_kernel((uint64_t)(v4 + 24), a1);
  *((void *)v4 + 3) = &unk_1EE31FD70;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    long long v7 = (std::__shared_weak_count *)*((void *)v4 + 40);
    *((void *)v4 + 39) = v5;
    *((void *)v4 + 40) = v6;
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
  }
  else
  {
    *((void *)v4 + 39) = v5;
    *((void *)v4 + 40) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v4 + 24);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_19297D94C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::precompiled_segment_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_precompiled_segment_kernel::kernel_type_str(Espresso::generic_precompiled_segment_kernel *this)
{
  return "precompiled_segment";
}

BOOL wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  long long v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 39);
    *((_OWORD *)v7 + 19) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 38);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 38) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_19297DCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v58, 0, sizeof(v58));
  memset(v57, 0, sizeof(v57));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 296);
  v56[0] = *(void *)(a1 + 288);
  v56[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>::convert_layer_data_to_fp32(v56, v58, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 296);
  v55[0] = *(void *)(a1 + 288);
  v55[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>::convert_layer_data_to_fp32(v55, v57, *a3, a3[1], 0, 0);
  uint64_t v52 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v11 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v10[2 * v11]->__on_zero_shared_weak)(v10[2 * v11])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v11]->__on_zero_shared_weak)((*a4)[2 * v11]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v11][4].__shared_weak_owners_;
        uint64_t v12 = v58[0] + 16 * v11;
        std::string::size_type v14 = *(std::__shared_weak_count **)(v12 + 8);
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = *((void *)v13 + 20);
        unint64_t v16 = (std::__shared_weak_count *)*((void *)v13 + 21);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = 0;
        long long v18 = *(float **)(v15 + 24);
        vDSP_Length v19 = *(int *)(v15 + 8);
        uint64_t v20 = v15 + 12;
        do
        {
          v19 *= *(int *)(v20 + v17);
          v17 += 4;
        }
        while (v17 != 12);
        vDSP_vsmul(v18, 1, (const float *)&__B, v18, 1, v19);
        if (v16) {
          nitro::nitro_function::nitro_function(v16);
        }
        if (v14) {
          nitro::nitro_function::nitro_function(v14);
        }
      }
      ++v11;
      std::string::size_type v10 = *a4;
    }
    while (v11 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v21 = v52;
  uint64_t v22 = *(void *)(v52 + 304);
  if (v22)
  {
    uint64_t v23 = *(std::__shared_weak_count **)(v52 + 312);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v24 = v57[0];
    if (*v57[0])
    {
      if (v25)
      {
        std::string::size_type v26 = (std::__shared_weak_count *)v24[1];
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v25 = 0;
    }
    std::string::size_type v26 = 0;
LABEL_37:
    std::string v51 = v26;
    LODWORD(v27) = *(_DWORD *)(v22 + 8);
    if (v27 == 1)
    {
      uint64_t v28 = 0;
      uint64_t v29 = *((void *)v25 + 20);
      long long v30 = *(float **)(v29 + 24);
      vDSP_Length v31 = *(int *)(v29 + 8);
      uint64_t v32 = v29 + 12;
      do
      {
        v31 *= *(int *)(v32 + v28);
        v28 += 4;
      }
      while (v28 != 12);
      vDSP_vsmul(v30, 1, *(const float **)(v22 + 16), v30, 1, v31);
    }
    else
    {
      int v33 = v25[4];
      if (v27 != v33) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v27, v33);
      }
      int v34 = v25[5];
      if (v34)
      {
        uint64_t v35 = 0;
        unint64_t v36 = 0;
        vDSP_Length v37 = v25[2] * (uint64_t)v25[3];
        vDSP_Length v53 = 4 * (int)v27 * v37;
        do
        {
          if (v27)
          {
            uint64_t v38 = 0;
            unint64_t v39 = 0;
            uint64_t v40 = v35;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v25 + 20) + 24) + v40), 1, (const float *)(*(void *)(v22 + 16) + v38), (float *)(*(void *)(*((void *)v25 + 20) + 24) + v40), 1, v37);
              ++v39;
              unint64_t v27 = v25[4];
              v38 += 4;
              v40 += 4 * v37;
            }
            while (v39 < v27);
            int v34 = v25[5];
          }
          ++v36;
          v35 += v53;
        }
        while (v36 < v34);
      }
    }
    if (v51) {
      nitro::nitro_function::nitro_function(v51);
    }
    uint64_t v21 = v52;
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
  }
  unsigned __int8 v41 = *(std::__shared_weak_count **)(v21 + 296);
  if (v41) {
    atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v54 = v41;
  unsigned __int8 v42 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    do
    {
      std::string v45 = v42[v43];
      if (v45)
      {
        if (v46)
        {
          std::string v47 = v42[v43 + 1];
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v46 = 0;
      }
      std::string v47 = 0;
LABEL_63:
      std::string v48 = v57[0];
      std::string v49 = v57[0][v43];
      if (v49
      {
        std::string v50 = (std::__shared_weak_count *)v48[v43 + 1];
        if (v50) {
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v50 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v46, (uint64_t)v49 + 160, 1.0);
      if (v50) {
        nitro::nitro_function::nitro_function(v50);
      }
      if (v47) {
        nitro::nitro_function::nitro_function(v47);
      }
      ++v44;
      unsigned __int8 v42 = *a3;
      v43 += 2;
    }
    while (v44 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  float __B = v57;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v57[0] = (void **)v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v57);
}

void sub_19297E424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      uint64_t v12 = *v8;
      unint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      long long v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        vDSP_Length v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        uint64_t v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        vDSP_Length v31 = v23;
        uint64_t v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        long long v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        long long v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    uint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      vDSP_Length v31 = 0;
      uint64_t v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19297E768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31FD70;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31FD70;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380118;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::precompiled_segment_kernel_cpu,Espresso::precompiled_segment_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_72@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  int v4 = operator new(0x170uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)int v4 = &unk_1EE37F660;
  Espresso::base_kernel::base_kernel((uint64_t)v4 + 24, a1);
  *((void *)v4 + 39) = 0;
  *((void *)v4 + 40) = 0;
  *((void *)v4 + 41) = 0;
  *((void *)v4 + 3) = &unk_1EE31B958;
  *((_OWORD *)v4 + 21) = 0u;
  *((_OWORD *)v4 + 22) = 0u;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    BOOL v7 = (std::__shared_weak_count *)*((void *)v4 + 43);
    *((void *)v4 + 42) = v5;
    *((void *)v4 + 43) = v6;
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
  }
  else
  {
    *((void *)v4 + 42) = v5;
    *((void *)v4 + 43) = 0;
  }
  result.n128_u64[0] = (unint64_t)v4 + 24;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_19297EA40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::nonzero_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_nonzero_kernel::kernel_type_str(Espresso::generic_nonzero_kernel *this)
{
  return "nonzero";
}

uint64_t Espresso::generic_nonzero_kernel::has_dynamic_top_shape(Espresso::generic_nonzero_kernel *this)
{
  return 1;
}

BOOL wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  BOOL v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = (std::string::size_type *)(v7 + 328);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    uint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 42);
    *(_OWORD *)(v7 + 328) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      long long v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        long long v30 = (const std::string::value_type *)v39;
      }
      else {
        long long v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      uint64_t v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      unint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_19297EDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 320);
  v57[0] = *(void *)(a1 + 312);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 320);
  v56[0] = *(void *)(a1 + 312);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  vDSP_Length v53 = (void *)a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        std::string::size_type v13 = &v59[0][2 * v12];
        std::__shared_count v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  unint64_t v22 = v53;
  Espresso::nonzero_kernel_cpu::__launch(v53, v10, (uint64_t **)v58, v59);
  uint64_t v23 = v53[41];
  if (v23)
  {
    long long v24 = (std::__shared_weak_count *)v53[42];
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    uint64_t v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    unint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = (std::__shared_weak_count *)v22[40];
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19297F530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19297F874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31B958;
  int v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE34E6C0;
  int v4 = (void *)*((void *)this + 36);
  if (v4)
  {
    *((void *)this + 37) = v4;
    operator delete(v4);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE31B958;
  int v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE34E6C0;
  int v4 = (void *)*((void *)this + 36);
  if (v4)
  {
    *((void *)this + 37) = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F660;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::nonzero_kernel_cpu,Espresso::nonzero_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_71@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x178uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FA18;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31D0D0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 41) = 0;
  *((void *)v6 + 42) = 0;
  *((void *)v6 + 38) = *a2;
  *(void *)(v6 + 310) = *(void *)((char *)a2 + 6);
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 44);
    *((void *)v6 + 43) = v7;
    *((void *)v6 + 44) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 43) = v7;
    *((void *)v6 + 44) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19297FBC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 43);
    *((_OWORD *)v7 + 21) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 42);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 42) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_19297FF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 328);
  v57[0] = *(void *)(a1 + 320);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 328);
  v56[0] = *(void *)(a1 + 320);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        unint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::scatter_nd_kernel_cpu::__launch(v53, v10, (uint64_t)v58, (Espresso::layer_data *)v59);
  uint64_t v23 = *(void *)(v53 + 336);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 344);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 328);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19298069C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929809E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31D0D0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE356F30;
  int v4 = (void *)*((void *)this + 37);
  if (v4)
  {
    *((void *)this + 38) = v4;
    operator delete(v4);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE31D0D0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE356F30;
  int v4 = (void *)*((void *)this + 37);
  if (v4)
  {
    *((void *)this + 38) = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FA18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::scatter_nd_kernel_cpu,Espresso::scatter_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FA18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_70@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x178uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F900;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31C9D0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 41) = 0;
  *((void *)v6 + 42) = 0;
  *((void *)v6 + 38) = *a2;
  *(void *)(v6 + 310) = *(void *)((char *)a2 + 6);
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 44);
    *((void *)v6 + 43) = v7;
    *((void *)v6 + 44) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 43) = v7;
    *((void *)v6 + 44) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192980D34(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 43);
    *((_OWORD *)v7 + 21) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 42);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 42) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929810B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 328);
  v57[0] = *(void *)(a1 + 320);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 328);
  v56[0] = *(void *)(a1 + 320);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::gather_nd_kernel_cpu::__launch(v53, v10, (uint64_t **)v58, v59);
  uint64_t v23 = *(void *)(v53 + 336);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 344);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 328);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192981808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_192981B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31C9D0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE351158;
  int v4 = (void *)*((void *)this + 37);
  if (v4)
  {
    *((void *)this + 38) = v4;
    operator delete(v4);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE31C9D0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE351158;
  int v4 = (void *)*((void *)this + 37);
  if (v4)
  {
    *((void *)this + 38) = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F900;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::gather_nd_kernel_cpu,Espresso::gather_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_69@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x218uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE380230;
  Espresso::non_maximum_suppression_kernel_cpu::non_maximum_suppression_kernel_cpu((uint64_t)(v6 + 24), a1, v7, a2);
  *((void *)v6 + 3) = &unk_1EE320478;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 64);
    *((void *)v6 + 63) = v8;
    *((void *)v6 + 64) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 63) = v8;
    *((void *)v6 + 64) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192981E88(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::non_maximum_suppression_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_non_maximum_suppression_kernel::kernel_type_str(Espresso::generic_non_maximum_suppression_kernel *this)
{
  return "non_maximum_suppression";
}

BOOL wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 63);
    *((_OWORD *)v7 + 31) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 62);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 62) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_192982218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 488);
  v57[0] = *(void *)(a1 + 480);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 488);
  v56[0] = *(void *)(a1 + 480);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::non_maximum_suppression_kernel_cpu::__launch(v53, v10, (uint64_t **)v58, v59);
  uint64_t v23 = *(void *)(v53 + 496);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 504);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 488);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192982970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_192982CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>::~wrapper_kernel(Espresso::non_maximum_suppression_kernel_cpu *this)
{
  *(void *)this = &unk_1EE320478;
  int v2 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::non_maximum_suppression_kernel_cpu::~non_maximum_suppression_kernel_cpu(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE320478;
  int v2 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::non_maximum_suppression_kernel_cpu::~non_maximum_suppression_kernel_cpu(this);
}

void Espresso::non_maximum_suppression_kernel_cpu::~non_maximum_suppression_kernel_cpu(Espresso::non_maximum_suppression_kernel_cpu *this)
{
  *(void *)this = &unk_1EE3694D8;
  int v2 = (void *)*((void *)this + 57);
  if (v2)
  {
    *((void *)this + 58) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 54);
  if (v3)
  {
    *((void *)this + 55) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 51);
  if (v4)
  {
    *((void *)this + 52) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 48);
  if (v5)
  {
    *((void *)this + 49) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 45);
  if (v6)
  {
    *((void *)this + 46) = v6;
    operator delete(v6);
  }
  BOOL v7 = (void *)*((void *)this + 42);
  if (v7)
  {
    *((void *)this + 43) = v7;
    operator delete(v7);
  }

  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(this);
}

{
  uint64_t vars8;

  Espresso::non_maximum_suppression_kernel_cpu::~non_maximum_suppression_kernel_cpu(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380230;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::non_maximum_suppression_kernel_cpu,Espresso::non_maximum_suppression_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380230;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_68@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x160uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F040;
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  long long v7 = *a2;
  *((void *)v6 + 3) = &unk_1EE319250;
  *((_OWORD *)v6 + 19) = v7;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 41);
    *((void *)v6 + 40) = v8;
    *((void *)v6 + 41) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 40) = v8;
    *((void *)v6 + 41) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192983048(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  long long v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 312);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 40);
    *(_OWORD *)(v7 + 312) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_1929833C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 304);
  v57[0] = *(void *)(a1 + 296);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 304);
  v56[0] = *(void *)(a1 + 296);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::adam_kernel_cpu::__launch(v53, v10, v58, v59);
  uint64_t v23 = *(void *)(v53 + 312);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 320);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 304);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192983B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_192983E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE319250;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE319250;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F040;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::adam_kernel_cpu,Espresso::adam_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_67@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x160uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F008;
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  *((void *)v6 + 38) = *(void *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  *((void *)v6 + 3) = &unk_1EE3190F8;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 41);
    *((void *)v6 + 40) = v7;
    *((void *)v6 + 41) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 40) = v7;
    *((void *)v6 + 41) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19298414C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 312);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 40);
    *(_OWORD *)(v7 + 312) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_1929844C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 304);
  v57[0] = *(void *)(a1 + 296);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 304);
  v56[0] = *(void *)(a1 + 296);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::sgd_kernel_cpu::__launch(v53, v10, v58, v59);
  uint64_t v23 = *(void *)(v53 + 312);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 320);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 304);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192984C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_192984F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE3190F8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE3190F8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F008;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::sgd_kernel_cpu,Espresso::sgd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F008;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_66@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x160uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FCF0;
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  *((void *)v6 + 38) = *(void *)a2;
  *((unsigned char *)v6 + 312) = *(unsigned char *)(a2 + 8);
  *((void *)v6 + 3) = &unk_1EE31E2B8;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 41);
    *((void *)v6 + 40) = v7;
    *((void *)v6 + 41) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 40) = v7;
    *((void *)v6 + 41) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192985250(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cross_entropy_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_cross_entropy_kernel::kernel_type_str(Espresso::generic_cross_entropy_kernel *this)
{
  return "cross_entropy";
}

BOOL wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 312);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 40);
    *(_OWORD *)(v7 + 312) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_1929855E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 304);
  v57[0] = *(void *)(a1 + 296);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 304);
  v56[0] = *(void *)(a1 + 296);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::cross_entropy_kernel_cpu::__launch(v53, v10, (uint64_t **)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 312);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 320);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 304);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192985D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19298607C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31E2B8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31E2B8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FCF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cross_entropy_kernel_cpu,Espresso::cross_entropy_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FCF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_65@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x158uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FBD8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  uint64_t v7 = *a2;
  *((void *)v6 + 3) = &unk_1EE31DC00;
  *((void *)v6 + 38) = v7;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 40);
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192986364(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::reverse_seq_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_reverse_seq_kernel::kernel_type_str(Espresso::generic_reverse_seq_kernel *this)
{
  return "reverse_seq";
}

BOOL wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 39);
    *((_OWORD *)v7 + 19) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 38);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 38) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929866F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 296);
  v57[0] = *(void *)(a1 + 288);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 296);
  v56[0] = *(void *)(a1 + 288);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::reverse_seq_kernel_cpu::__launch(v53, v10, (uint64_t)v58, v59);
  uint64_t v23 = *(void *)(v53 + 304);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 312);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 296);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192986E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_192987190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31DC00;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31DC00;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FBD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::reverse_seq_kernel_cpu,Espresso::reverse_seq_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FBD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_64@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x160uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FEE8;
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  *((void *)v6 + 38) = *(void *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  *((void *)v6 + 3) = &unk_1EE31EF10;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 41);
    *((void *)v6 + 40) = v7;
    *((void *)v6 + 41) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 40) = v7;
    *((void *)v6 + 41) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19298747C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::sliding_windows_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_sliding_windows_kernel::kernel_type_str(Espresso::generic_sliding_windows_kernel *this)
{
  return "sliding_windows";
}

BOOL wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 312);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 40);
    *(_OWORD *)(v7 + 312) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_19298780C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 304);
  v57[0] = *(void *)(a1 + 296);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 304);
  v56[0] = *(void *)(a1 + 296);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::sliding_windows_kernel_cpu::__launch((_DWORD *)v53, v10, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 312);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 320);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 304);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192987F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929882A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31EF10;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31EF10;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FEE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::sliding_windows_kernel_cpu,Espresso::sliding_windows_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FEE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_63@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x170uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FA50;
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 41) = 0;
  *((_DWORD *)v6 + 76) = *a2;
  *((void *)v6 + 3) = &unk_1EE31D228;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 43);
    *((void *)v6 + 42) = v7;
    *((void *)v6 + 43) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 42) = v7;
    *((void *)v6 + 43) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192988594(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 328);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 42);
    *(_OWORD *)(v7 + 328) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_192988910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 320);
  v57[0] = *(void *)(a1 + 312);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 320);
  v56[0] = *(void *)(a1 + 312);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        std::string::size_type v13 = &v59[0][2 * v12];
        std::__shared_count v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::softmax_nd_kernel_cpu::__launch(v53, v10, (uint64_t **)v58, v59);
  uint64_t v23 = *(void *)(v53 + 328);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 336);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 320);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192989068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929893AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31D228;
  int v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE3570C8;
  int v4 = (void *)*((void *)this + 36);
  if (v4)
  {
    *((void *)this + 37) = v4;
    operator delete(v4);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE31D228;
  int v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE3570C8;
  int v4 = (void *)*((void *)this + 36);
  if (v4)
  {
    *((void *)this + 37) = v4;
    operator delete(v4);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FA50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::softmax_nd_kernel_cpu,Espresso::softmax_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FA50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_62@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x188uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F2A8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31A178;
  long long v7 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 88) = *(_DWORD *)(a2 + 48);
  *((_OWORD *)v6 + 20) = v7;
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 46);
    *((void *)v6 + 45) = v8;
    *((void *)v6 + 46) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 45) = v8;
    *((void *)v6 + 46) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19298970C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  long long v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 45);
    *((_OWORD *)v7 + 22) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 44);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 44) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_192989A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 344);
  v57[0] = *(void *)(a1 + 336);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 344);
  v56[0] = *(void *)(a1 + 336);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        std::string::size_type v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::split_kernel_cpu::__launch(v53, v10, (uint64_t **)v58, v59);
  uint64_t v23 = *(void *)(v53 + 352);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 360);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 344);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19298A1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19298A524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31A178;
  int v2 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31A178;
  int v2 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F2A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::split_kernel_cpu,Espresso::split_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F2A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_61@<Q0>(uint64_t *a1@<X1>, const void *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x388uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F7B0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *(_OWORD *)(v6 + 840) = 0u;
  *(_OWORD *)(v6 + 856) = 0u;
  *(_OWORD *)(v6 + 824) = 0u;
  memcpy(v6 + 304, a2, 0x208uLL);
  *((void *)v6 + 3) = &unk_1EE31C168;
  *(_OWORD *)(v6 + 872) = 0u;
  *(_OWORD *)(v6 + 888) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 110);
    *((void *)v6 + 109) = v7;
    *((void *)v6 + 110) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 109) = v7;
    *((void *)v6 + 110) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19298A824(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 109);
    *((_OWORD *)v7 + 54) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 108);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 108) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_19298ABA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 856);
  v57[0] = *(void *)(a1 + 848);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 856);
  v56[0] = *(void *)(a1 + 848);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        unint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::split_nd_kernel_cpu::__launch(v53, v10, (uint64_t *)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 864);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 872);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 856);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19298B300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19298B644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31C168;
  int v2 = (std::__shared_weak_count *)*((void *)this + 109);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 107);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE350298;
  int v4 = (void *)*((void *)this + 103);
  if (v4)
  {
    *((void *)this + 104) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 100);
  if (v5)
  {
    *((void *)this + 101) = v5;
    operator delete(v5);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE31C168;
  int v2 = (std::__shared_weak_count *)*((void *)this + 109);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 107);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE350298;
  int v4 = (void *)*((void *)this + 103);
  if (v4)
  {
    *((void *)this + 104) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 100);
  if (v5)
  {
    *((void *)this + 101) = v5;
    operator delete(v5);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F7B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::split_nd_kernel_cpu,Espresso::split_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F7B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_60@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x1A0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F7E8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31C2C0;
  *((void *)v6 + 47) = 0;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *((_DWORD *)v6 + 76) = *a2;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 49);
    *((void *)v6 + 48) = v7;
    *((void *)v6 + 49) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 48) = v7;
    *((void *)v6 + 49) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19298B9BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::stack_nd_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_stack_nd_kernel::kernel_type_str(Espresso::generic_stack_nd_kernel *this)
{
  return "stack_nd";
}

BOOL wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 376);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 48);
    *(_OWORD *)(v7 + 376) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_19298BD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 368);
  v57[0] = *(void *)(a1 + 360);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 368);
  v56[0] = *(void *)(a1 + 360);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::stack_nd_kernel_cpu::__launch(v53, v10, (uint64_t)v58, v59);
  uint64_t v23 = *(void *)(v53 + 376);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 384);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 368);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19298C4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19298C7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>::~wrapper_kernel(uint64_t a1)
{
  *(void *)a1 = &unk_1EE31C2C0;
  int v2 = *(std::__shared_weak_count **)(a1 + 384);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 368);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)a1 = &unk_1EE3503F0;
  int v4 = *(void **)(a1 + 336);
  if (v4)
  {
    *(void *)(a1 + 344) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(void *)(a1 + 320) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void **)(a1 + 288);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v6);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void *v4;
  void *v5;
  void **v6;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE31C2C0;
  int v2 = *(std::__shared_weak_count **)(a1 + 384);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 368);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)a1 = &unk_1EE3503F0;
  int v4 = *(void **)(a1 + 336);
  if (v4)
  {
    *(void *)(a1 + 344) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(void *)(a1 + 320) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void **)(a1 + 288);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v6);

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F7E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::stack_nd_kernel_cpu,Espresso::stack_nd_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F7E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_59@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x248uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FD28;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  long long v7 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v6 + 23) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v6 + 24) = v7;
  *((_DWORD *)v6 + 100) = *(_DWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v8;
  long long v9 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 22) = v9;
  *((void *)v6 + 3) = &unk_1EE31E410;
  *(_OWORD *)(v6 + 552) = 0u;
  *(_OWORD *)(v6 + 568) = 0u;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  if (v11)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v6 + 70);
    *((void *)v6 + 69) = v10;
    *((void *)v6 + 70) = v11;
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
  }
  else
  {
    *((void *)v6 + 69) = v10;
    *((void *)v6 + 70) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19298CBA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  long long v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v7 + 69);
    *((_OWORD *)v7 + 34) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 68);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 68) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_19298CF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  long long v9 = *(std::__shared_weak_count **)(a1 + 536);
  v57[0] = *(void *)(a1 + 528);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 536);
  v56[0] = *(void *)(a1 + 528);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::general_slice_kernel_cpu::__launch(v53, a2, (uint64_t **)v58, v59);
  uint64_t v23 = *(void *)(v53 + 544);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 552);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 536);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19298D68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19298D9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>::~wrapper_kernel(Espresso::general_slice_kernel_cpu *this)
{
  *(void *)this = &unk_1EE31E410;
  int v2 = (std::__shared_weak_count *)*((void *)this + 69);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 67);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::general_slice_kernel_cpu::~general_slice_kernel_cpu(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31E410;
  int v2 = (std::__shared_weak_count *)*((void *)this + 69);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 67);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::general_slice_kernel_cpu::~general_slice_kernel_cpu(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FD28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_slice_kernel_cpu,Espresso::general_slice_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FD28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_58@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x1B0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FA88;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31D380;
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 86) = *(_DWORD *)(a2 + 16);
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    long long v9 = (std::__shared_weak_count *)*((void *)v6 + 51);
    *((void *)v6 + 50) = v7;
    *((void *)v6 + 51) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 50) = v7;
    *((void *)v6 + 51) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19298DCF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::transplant_kernel_cpu::get_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 352);
  *a2 = *(void *)(this + 344);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::transplant_kernel_cpu::get_weights_blob(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

BOOL wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  if (Espresso::generic_transplant_kernel::supports_weight_key(a1, a2)) {
    return 1;
  }
  int v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (v2[1] != 10) {
      return 0;
    }
    uint64_t v2 = (uint64_t *)*v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

void wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5, void *a6)
{
  uint64_t v8 = a3;
  Espresso::generic_transplant_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  int v10 = *((char *)v8 + 23);
  if (v10 < 0)
  {
    if (v8[1] != 10) {
      return;
    }
    uint64_t v8 = (uint64_t *)*v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*v8 == 0x6163735F74736F70 && *((_WORD *)v8 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v53, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v12 = a1 + 392;
    std::string::size_type v13 = v53.__r_.__value_.__r.__words[0];
    std::string::size_type v14 = *(std::__shared_weak_count **)(a1 + 400);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
    if (v14)
    {
      nitro::nitro_function::nitro_function(v14);
      std::string::size_type v15 = *(void *)v12;
    }
    else
    {
      std::string::size_type v15 = v13;
    }
    if (a5 != 4 * *(int *)(v15 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v46, a5);
      uint64_t v18 = std::string::insert(&v46, 0, "Unexpected size s=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      uint64_t v20 = std::string::append(&v47, "/blob=");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v45, 4 * *(int *)(*(void *)v12 + 8));
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v22 = &v45;
      }
      else {
        unint64_t v22 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v45.__r_.__value_.__l.__size_;
      }
      long long v24 = std::string::append(&v48, (const std::string::value_type *)v22, size);
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v43, " @ ");
      if ((v44 & 0x80u) == 0) {
        std::string::size_type v26 = (const std::string::value_type *)v43;
      }
      else {
        std::string::size_type v26 = (const std::string::value_type *)v43[0];
      }
      if ((v44 & 0x80u) == 0) {
        std::string::size_type v27 = v44;
      }
      else {
        std::string::size_type v27 = v43[1];
      }
      std::__shared_count v28 = std::string::append(&v49, v26, v27);
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      uint64_t v30 = std::string::append(&v50, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, ":");
      if ((v42 & 0x80u) == 0) {
        vDSP_Length v32 = (const std::string::value_type *)v41;
      }
      else {
        vDSP_Length v32 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v33 = v42;
      }
      else {
        std::string::size_type v33 = v41[1];
      }
      int v34 = std::string::append(&v51, v32, v33);
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v40, 197);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v36 = &v40;
      }
      else {
        uint64_t v36 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v37 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v37 = v40.__r_.__value_.__l.__size_;
      }
      std::__shared_count v38 = std::string::append(&v52, (const std::string::value_type *)v36, v37);
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v53);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v16 = *(void **)(v15 + 16);
    memcpy(v16, a4, a5);
  }
}

void sub_19298E0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 384);
  v57[0] = *(void *)(a1 + 376);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  long long v9 = *(std::__shared_weak_count **)(a1 + 384);
  v56[0] = *(void *)(a1 + 376);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        std::string::size_type v13 = &v59[0][2 * v12];
        std::string::size_type v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::transplant_kernel_cpu::__launch(v53, v10, (uint64_t)v58, v59);
  uint64_t v23 = *(void *)(v53 + 392);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 400);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        std::string::size_type v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    std::string::size_type v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      long long v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 384);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19298E81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    uint64_t v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        long long v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      long long v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19298EB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>::~wrapper_kernel(Espresso::generic_transplant_kernel *this)
{
  *(void *)this = &unk_1EE31D380;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_transplant_kernel::~generic_transplant_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31D380;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_transplant_kernel::~generic_transplant_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FA88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::transplant_kernel_cpu,Espresso::transplant_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FA88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_57@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x218uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F510;
  Espresso::builtin_kernel_cpu::builtin_kernel_cpu((uint64_t)(v6 + 24), a1, a2);
  *((void *)v6 + 3) = &unk_1EE31B0E8;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    long long v9 = (std::__shared_weak_count *)*((void *)v6 + 64);
    *((void *)v6 + 63) = v7;
    *((void *)v6 + 64) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 63) = v7;
    *((void *)v6 + 64) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19298EE44(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::builtin_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_builtin_kernel::kernel_type_str(Espresso::generic_builtin_kernel *this)
{
  return "builtin";
}

BOOL wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v7 + 63);
    *((_OWORD *)v7 + 31) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 62);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 62) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      std::string::size_type v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        long long v31 = (const std::string::value_type *)v40;
      }
      else {
        long long v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_19298F1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>::__launch(uint64_t a1, const char *a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  long long v9 = *(std::__shared_weak_count **)(a1 + 488);
  v57[0] = *(void *)(a1 + 480);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 488);
  v56[0] = *(void *)(a1 + 480);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = (std::__shared_weak_count *)a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        std::string::size_type v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  unint64_t v22 = v53;
  Espresso::builtin_kernel_cpu::__launch(v53, a2, v58, v59);
  uint64_t shared_weak_owners = v53[20].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    long long v24 = (std::__shared_weak_count *)v53[21].__vftable;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        std::string::size_type v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    std::string::size_type v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(shared_weak_owners + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      long long v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(shared_weak_owners + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(shared_weak_owners + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    unint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  shared_owners = (std::__shared_weak_count *)v22[20].__shared_owners_;
  if (shared_owners) {
    atomic_fetch_add_explicit(&shared_owners->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = shared_owners;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19298F934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        long long v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      long long v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19298FC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>::~wrapper_kernel(Espresso::generic_builtin_kernel *this)
{
  *(void *)this = &unk_1EE31B0E8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE34D5A0;
  int v4 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::generic_builtin_kernel::~generic_builtin_kernel((void **)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE31B0E8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE34D5A0;
  int v4 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  Espresso::generic_builtin_kernel::~generic_builtin_kernel((void **)this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F510;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::builtin_kernel_cpu,Espresso::builtin_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_56@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x190uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F9E0;
  Espresso::gumbel_max_kernel_cpu::gumbel_max_kernel_cpu((uint64_t)v6 + 24, a1, v7, a2);
  *((void *)v6 + 3) = &unk_1EE31CF78;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    std::string::size_type v10 = (std::__shared_weak_count *)*((void *)v6 + 47);
    *((void *)v6 + 46) = v8;
    *((void *)v6 + 47) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 46) = v8;
    *((void *)v6 + 47) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19298FFA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::gumbel_max_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_gumbel_max_kernel::kernel_type_str(Espresso::generic_gumbel_max_kernel *this)
{
  return "gumbel_max";
}

BOOL wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = (std::string::size_type *)(v7 + 360);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 46);
    *(_OWORD *)(v7 + 360) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_192990338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 352);
  v57[0] = *(void *)(a1 + 344);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 352);
  v56[0] = *(void *)(a1 + 344);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::gumbel_max_kernel_cpu::__launch(v53, v10, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 360);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 368);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 352);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192990A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_192990DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31CF78;
  int v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE354FF0;
  int v4 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE31CF78;
  int v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE354FF0;
  int v4 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F9E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::gumbel_max_kernel_cpu,Espresso::gumbel_max_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F9E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_55@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  int v4 = operator new(0x170uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)int v4 = &unk_1EE37FE78;
  Espresso::base_kernel::base_kernel((uint64_t)v4 + 24, a1);
  *((void *)v4 + 39) = 0;
  *((void *)v4 + 40) = 0;
  *((void *)v4 + 41) = 0;
  *((void *)v4 + 3) = &unk_1EE31EC60;
  *((_OWORD *)v4 + 21) = 0u;
  *((_OWORD *)v4 + 22) = 0u;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    BOOL v7 = (std::__shared_weak_count *)*((void *)v4 + 43);
    *((void *)v4 + 42) = v5;
    *((void *)v4 + 43) = v6;
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
  }
  else
  {
    *((void *)v4 + 42) = v5;
    *((void *)v4 + 43) = 0;
  }
  result.n128_u64[0] = (unint64_t)v4 + 24;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1929910FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::phi_virtual_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_phi_virtual_kernel::kernel_type_str(Espresso::generic_phi_virtual_kernel *this)
{
  return "phi_virtual";
}

BOOL wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  BOOL v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 328);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 42);
    *(_OWORD *)(v7 + 328) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_19299148C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 320);
  v57[0] = *(void *)(a1 + 312);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 320);
  v56[0] = *(void *)(a1 + 312);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::generic_phi_virtual_kernel::__launch(v53, v10, v58, v59);
  uint64_t v23 = *(void *)(v53 + 328);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 336);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 320);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192991BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_192991F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>::~wrapper_kernel(Espresso::generic_phi_virtual_kernel *this)
{
  *(void *)this = &unk_1EE31EC60;
  int v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_phi_virtual_kernel::~generic_phi_virtual_kernel((void **)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31EC60;
  int v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_phi_virtual_kernel::~generic_phi_virtual_kernel((void **)this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FE78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::generic_phi_virtual_kernel,Espresso::phi_virtual_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FE78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_54@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x188uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FEB0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31EDB8;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 46);
    *((void *)v6 + 45) = v7;
    *((void *)v6 + 46) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 45) = v7;
    *((void *)v6 + 46) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192992220(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = a2;
  if (Espresso::generic_instancenorm_1d_kernel::supports_weight_key(a1, a2)) {
    return 1;
  }
  int v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (v2[1] != 10) {
      return 0;
    }
    int v2 = (uint64_t *)*v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = a3;
  __n128 result = Espresso::generic_instancenorm_1d_kernel::__set_weight_raw_blob((void *)a1, a2, a3, a4, a5);
  int v10 = *((char *)v7 + 23);
  if (v10 < 0)
  {
    if (v7[1] != 10) {
      return result;
    }
    uint64_t v7 = (uint64_t *)*v7;
  }
  else if (v10 != 10)
  {
    return result;
  }
  if (*v7 == 0x6163735F74736F70 && *((_WORD *)v7 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v54, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v12 = v54.__r_.__value_.__r.__words[0];
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 360);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
    if (v13)
    {
      nitro::nitro_function::nitro_function(v13);
      std::string::size_type v14 = *(void *)(a1 + 352);
    }
    else
    {
      std::string::size_type v14 = v12;
    }
    if (a5 != 4 * *(int *)(v14 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v17 = a5;
      uint64_t v18 = exception;
      std::to_string(&v47, v17);
      uint64_t v19 = std::string::insert(&v47, 0, "Unexpected size s=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      uint64_t v21 = std::string::append(&v48, "/blob=");
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v46, 4 * *(int *)(*(void *)(a1 + 352) + 8));
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &v46;
      }
      else {
        uint64_t v23 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v46.__r_.__value_.__l.__size_;
      }
      uint64_t v25 = std::string::append(&v49, (const std::string::value_type *)v23, size);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, " @ ");
      if ((v45 & 0x80u) == 0) {
        long long v27 = (const std::string::value_type *)v44;
      }
      else {
        long long v27 = (const std::string::value_type *)v44[0];
      }
      if ((v45 & 0x80u) == 0) {
        std::string::size_type v28 = v45;
      }
      else {
        std::string::size_type v28 = v44[1];
      }
      uint64_t v29 = std::string::append(&v50, v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v31 = std::string::append(&v51, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, ":");
      if ((v43 & 0x80u) == 0) {
        uint64_t v33 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v33 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v34 = v43;
      }
      else {
        std::string::size_type v34 = v42[1];
      }
      int v35 = std::string::append(&v52, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v41, 197);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v37 = &v41;
      }
      else {
        unint64_t v37 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = v41.__r_.__value_.__l.__size_;
      }
      uint64_t v39 = std::string::append(&v53, (const std::string::value_type *)v37, v38);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v18, &v54);
      __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::__shared_count v15 = *(void **)(v14 + 16);
    return memcpy(v15, a4, a5);
  }
  return result;
}

void sub_1929925D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 344);
  v57[0] = *(void *)(a1 + 336);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 344);
  v56[0] = *(void *)(a1 + 336);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        unint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::instancenorm_1d_kernel_cpu::__launch(v53, v10, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 352);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 360);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      long long v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 344);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192992D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    uint64_t v8 = a3;
    long long v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19299306C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>::~wrapper_kernel(Espresso::generic_instancenorm_1d_kernel *this)
{
  *(void *)this = &unk_1EE31EDB8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31EDB8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FEB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::instancenorm_1d_kernel_cpu,Espresso::instancenorm_1d_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FEB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_53@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x158uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FBA0;
  Espresso::multinomial_kernel_cpu::multinomial_kernel_cpu((uint64_t)(v6 + 24), a1, v7, a2);
  *((void *)v6 + 3) = &unk_1EE31DAA8;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 40);
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192993350(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::multinomial_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_multinomial_kernel::kernel_type_str(Espresso::generic_multinomial_kernel *this)
{
  return "multinomial";
}

BOOL wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 39);
    *((_OWORD *)v7 + 19) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 38);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      unint64_t v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 38) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929936E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 296);
  v57[0] = *(void *)(a1 + 288);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 296);
  v56[0] = *(void *)(a1 + 288);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        unint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        unint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::multinomial_kernel_cpu::__launch(v53, v10, (uint64_t **)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 304);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 312);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 296);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192993E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19299417C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31DAA8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31DAA8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FBA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::multinomial_kernel_cpu,Espresso::multinomial_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FBA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_52@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x170uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FC10;
  *(_OWORD *)std::string::size_type v11 = *a2;
  *(_OWORD *)&v11[12] = *(_OWORD *)((char *)a2 + 12);
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 19) = *(_OWORD *)v11;
  *(_OWORD *)(v6 + 313) = *(_OWORD *)&v11[9];
  *((void *)v6 + 3) = &unk_1EE31DD58;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 43);
    *((void *)v6 + 42) = v7;
    *((void *)v6 + 43) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 42) = v7;
    *((void *)v6 + 43) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192994484(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 328);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 42);
    *(_OWORD *)(v7 + 328) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_192994800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 320);
  v57[0] = *(void *)(a1 + 312);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 320);
  v56[0] = *(void *)(a1 + 312);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        std::string::size_type v13 = &v59[0][2 * v12];
        std::__shared_count v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::array_gather_kernel_cpu::__launch(v53, v10, (uint64_t)v58, v59);
  uint64_t v23 = *(void *)(v53 + 328);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 336);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 320);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192994F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19299529C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31DD58;
  int v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31DD58;
  int v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FC10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::array_gather_kernel_cpu,Espresso::array_gather_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FC10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_51@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x1D8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FAF8;
  long long v17 = a2[6];
  long long v18 = a2[7];
  uint64_t v19 = *((void *)a2 + 16);
  long long v13 = a2[2];
  long long v14 = a2[3];
  long long v15 = a2[4];
  long long v16 = a2[5];
  long long v11 = *a2;
  long long v12 = a2[1];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 25) = v17;
  *((_OWORD *)v6 + 26) = v18;
  *((void *)v6 + 54) = v19;
  *((_OWORD *)v6 + 21) = v13;
  *((_OWORD *)v6 + 22) = v14;
  *((_OWORD *)v6 + 23) = v15;
  *((_OWORD *)v6 + 24) = v16;
  *((_OWORD *)v6 + 19) = v11;
  *((_OWORD *)v6 + 20) = v12;
  *((void *)v6 + 3) = &unk_1EE31D6A0;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 56);
    *((void *)v6 + 55) = v7;
    *((void *)v6 + 56) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 55) = v7;
    *((void *)v6 + 56) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929955D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    long long v11 = (std::__shared_weak_count *)*((void *)v7 + 55);
    *((_OWORD *)v7 + 27) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 54);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      long long v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 54) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_192995950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v58, 0, sizeof(v58));
  memset(v57, 0, sizeof(v57));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 424);
  v56[0] = *(void *)(a1 + 416);
  v56[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>::convert_layer_data_to_fp32(v56, v58, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 424);
  v55[0] = *(void *)(a1 + 416);
  v55[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>::convert_layer_data_to_fp32(v55, v57, *a3, a3[1], 0, 0);
  uint64_t v52 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v11 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v10[2 * v11]->__on_zero_shared_weak)(v10[2 * v11])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v11]->__on_zero_shared_weak)((*a4)[2 * v11]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v11][4].__shared_weak_owners_;
        uint64_t v12 = v58[0] + 16 * v11;
        long long v14 = *(std::__shared_weak_count **)(v12 + 8);
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = *((void *)v13 + 20);
        long long v16 = (std::__shared_weak_count *)*((void *)v13 + 21);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = 0;
        long long v18 = *(float **)(v15 + 24);
        vDSP_Length v19 = *(int *)(v15 + 8);
        uint64_t v20 = v15 + 12;
        do
        {
          v19 *= *(int *)(v20 + v17);
          v17 += 4;
        }
        while (v17 != 12);
        vDSP_vsmul(v18, 1, (const float *)&__B, v18, 1, v19);
        if (v16) {
          nitro::nitro_function::nitro_function(v16);
        }
        if (v14) {
          nitro::nitro_function::nitro_function(v14);
        }
      }
      ++v11;
      std::string::size_type v10 = *a4;
    }
    while (v11 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  Espresso::copy_kernel_cpu::__compute((uint64_t *)v57, v58);
  uint64_t v21 = v52;
  uint64_t v22 = *(void *)(v52 + 432);
  if (v22)
  {
    uint64_t v23 = *(std::__shared_weak_count **)(v52 + 440);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v24 = v57[0];
    if (*v57[0])
    {
      if (v25)
      {
        std::string::size_type v26 = (std::__shared_weak_count *)v24[1];
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v25 = 0;
    }
    std::string::size_type v26 = 0;
LABEL_37:
    std::string v51 = v26;
    LODWORD(v27) = *(_DWORD *)(v22 + 8);
    if (v27 == 1)
    {
      uint64_t v28 = 0;
      uint64_t v29 = *((void *)v25 + 20);
      long long v30 = *(float **)(v29 + 24);
      vDSP_Length v31 = *(int *)(v29 + 8);
      uint64_t v32 = v29 + 12;
      do
      {
        v31 *= *(int *)(v32 + v28);
        v28 += 4;
      }
      while (v28 != 12);
      vDSP_vsmul(v30, 1, *(const float **)(v22 + 16), v30, 1, v31);
    }
    else
    {
      int v33 = v25[4];
      if (v27 != v33) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v27, v33);
      }
      int v34 = v25[5];
      if (v34)
      {
        uint64_t v35 = 0;
        unint64_t v36 = 0;
        vDSP_Length v37 = v25[2] * (uint64_t)v25[3];
        vDSP_Length v53 = 4 * (int)v27 * v37;
        do
        {
          if (v27)
          {
            uint64_t v38 = 0;
            unint64_t v39 = 0;
            uint64_t v40 = v35;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v25 + 20) + 24) + v40), 1, (const float *)(*(void *)(v22 + 16) + v38), (float *)(*(void *)(*((void *)v25 + 20) + 24) + v40), 1, v37);
              ++v39;
              unint64_t v27 = v25[4];
              v38 += 4;
              v40 += 4 * v37;
            }
            while (v39 < v27);
            int v34 = v25[5];
          }
          ++v36;
          v35 += v53;
        }
        while (v36 < v34);
      }
    }
    if (v51) {
      nitro::nitro_function::nitro_function(v51);
    }
    uint64_t v21 = v52;
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
  }
  unsigned __int8 v41 = *(std::__shared_weak_count **)(v21 + 424);
  if (v41) {
    atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v54 = v41;
  unsigned __int8 v42 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    do
    {
      std::string v45 = v42[v43];
      if (v45)
      {
        if (v46)
        {
          std::string v47 = v42[v43 + 1];
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v46 = 0;
      }
      std::string v47 = 0;
LABEL_63:
      std::string v48 = v57[0];
      std::string v49 = v57[0][v43];
      if (v49
      {
        std::string v50 = (std::__shared_weak_count *)v48[v43 + 1];
        if (v50) {
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v50 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v46, (uint64_t)v49 + 160, 1.0);
      if (v50) {
        nitro::nitro_function::nitro_function(v50);
      }
      if (v47) {
        nitro::nitro_function::nitro_function(v47);
      }
      ++v44;
      unsigned __int8 v42 = *a3;
      v43 += 2;
    }
    while (v44 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  float __B = v57;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v57[0] = (void **)v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v57);
}

void sub_1929960A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      uint64_t v12 = *v8;
      unint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      long long v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      long long v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        vDSP_Length v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        uint64_t v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        vDSP_Length v31 = v23;
        uint64_t v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        long long v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        long long v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    uint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      vDSP_Length v31 = 0;
      uint64_t v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929963E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31D6A0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31D6A0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FAF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::expand_dims_kernel_cpu,Espresso::expand_dims_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FAF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_50@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x1E0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F778;
  long long v17 = a2[6];
  long long v18 = a2[7];
  long long v19 = a2[8];
  long long v13 = a2[2];
  long long v14 = a2[3];
  long long v15 = a2[4];
  long long v16 = a2[5];
  long long v11 = *a2;
  long long v12 = a2[1];
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  *((_OWORD *)v6 + 25) = v17;
  *((_OWORD *)v6 + 26) = v18;
  *((_OWORD *)v6 + 21) = v13;
  *((_OWORD *)v6 + 22) = v14;
  *((_OWORD *)v6 + 23) = v15;
  *((_OWORD *)v6 + 24) = v16;
  *((_OWORD *)v6 + 19) = v11;
  *((_OWORD *)v6 + 20) = v12;
  *((void *)v6 + 3) = &unk_1EE31C010;
  *((_OWORD *)v6 + 27) = v19;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 57);
    *((void *)v6 + 56) = v7;
    *((void *)v6 + 57) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 56) = v7;
    *((void *)v6 + 57) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19299671C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = (std::string::size_type *)(v7 + 440);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    long long v12 = (std::__shared_weak_count *)*((void *)v7 + 56);
    *(_OWORD *)(v7 + 440) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      long long v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      long long v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        long long v30 = (const std::string::value_type *)v39;
      }
      else {
        long long v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      uint64_t v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      unint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_192996A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v58, 0, sizeof(v58));
  memset(v57, 0, sizeof(v57));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 432);
  v56[0] = *(void *)(a1 + 424);
  v56[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>::convert_layer_data_to_fp32(v56, v58, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 432);
  v55[0] = *(void *)(a1 + 424);
  v55[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>::convert_layer_data_to_fp32(v55, v57, *a3, a3[1], 0, 0);
  uint64_t v52 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v11 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v10[2 * v11]->__on_zero_shared_weak)(v10[2 * v11])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v11]->__on_zero_shared_weak)((*a4)[2 * v11]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v11][4].__shared_weak_owners_;
        uint64_t v12 = v58[0] + 16 * v11;
        long long v14 = *(std::__shared_weak_count **)(v12 + 8);
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = *((void *)v13 + 20);
        long long v16 = (std::__shared_weak_count *)*((void *)v13 + 21);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = 0;
        long long v18 = *(float **)(v15 + 24);
        vDSP_Length v19 = *(int *)(v15 + 8);
        uint64_t v20 = v15 + 12;
        do
        {
          v19 *= *(int *)(v20 + v17);
          v17 += 4;
        }
        while (v17 != 12);
        vDSP_vsmul(v18, 1, (const float *)&__B, v18, 1, v19);
        if (v16) {
          nitro::nitro_function::nitro_function(v16);
        }
        if (v14) {
          nitro::nitro_function::nitro_function(v14);
        }
      }
      ++v11;
      std::string::size_type v10 = *a4;
    }
    while (v11 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  Espresso::copy_kernel_cpu::__compute((uint64_t *)v57, v58);
  uint64_t v21 = v52;
  uint64_t v22 = *(void *)(v52 + 440);
  if (v22)
  {
    long long v23 = *(std::__shared_weak_count **)(v52 + 448);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v24 = v57[0];
    if (*v57[0])
    {
      if (v25)
      {
        std::string::size_type v26 = (std::__shared_weak_count *)v24[1];
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v25 = 0;
    }
    std::string::size_type v26 = 0;
LABEL_37:
    std::string v51 = v26;
    LODWORD(v27) = *(_DWORD *)(v22 + 8);
    if (v27 == 1)
    {
      uint64_t v28 = 0;
      uint64_t v29 = *((void *)v25 + 20);
      long long v30 = *(float **)(v29 + 24);
      vDSP_Length v31 = *(int *)(v29 + 8);
      uint64_t v32 = v29 + 12;
      do
      {
        v31 *= *(int *)(v32 + v28);
        v28 += 4;
      }
      while (v28 != 12);
      vDSP_vsmul(v30, 1, *(const float **)(v22 + 16), v30, 1, v31);
    }
    else
    {
      int v33 = v25[4];
      if (v27 != v33) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v27, v33);
      }
      int v34 = v25[5];
      if (v34)
      {
        uint64_t v35 = 0;
        unint64_t v36 = 0;
        vDSP_Length v37 = v25[2] * (uint64_t)v25[3];
        vDSP_Length v53 = 4 * (int)v27 * v37;
        do
        {
          if (v27)
          {
            uint64_t v38 = 0;
            unint64_t v39 = 0;
            uint64_t v40 = v35;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v25 + 20) + 24) + v40), 1, (const float *)(*(void *)(v22 + 16) + v38), (float *)(*(void *)(*((void *)v25 + 20) + 24) + v40), 1, v37);
              ++v39;
              unint64_t v27 = v25[4];
              v38 += 4;
              v40 += 4 * v37;
            }
            while (v39 < v27);
            int v34 = v25[5];
          }
          ++v36;
          v35 += v53;
        }
        while (v36 < v34);
      }
    }
    if (v51) {
      nitro::nitro_function::nitro_function(v51);
    }
    uint64_t v21 = v52;
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
  }
  unsigned __int8 v41 = *(std::__shared_weak_count **)(v21 + 432);
  if (v41) {
    atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v54 = v41;
  unsigned __int8 v42 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    do
    {
      std::string v45 = v42[v43];
      if (v45)
      {
        if (v46)
        {
          std::string v47 = v42[v43 + 1];
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v46 = 0;
      }
      std::string v47 = 0;
LABEL_63:
      std::string v48 = v57[0];
      std::string v49 = v57[0][v43];
      if (v49
      {
        std::string v50 = (std::__shared_weak_count *)v48[v43 + 1];
        if (v50) {
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v50 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v46, (uint64_t)v49 + 160, 1.0);
      if (v50) {
        nitro::nitro_function::nitro_function(v50);
      }
      if (v47) {
        nitro::nitro_function::nitro_function(v47);
      }
      ++v44;
      unsigned __int8 v42 = *a3;
      v43 += 2;
    }
    while (v44 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  float __B = v57;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v57[0] = (void **)v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v57);
}

void sub_1929971EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      uint64_t v12 = *v8;
      unint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      long long v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        vDSP_Length v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        uint64_t v35 = v26;
        long long v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        vDSP_Length v31 = v23;
        uint64_t v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        long long v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        long long v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    uint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      vDSP_Length v31 = 0;
      uint64_t v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_192997530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31C010;
  int v2 = (std::__shared_weak_count *)*((void *)this + 56);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31C010;
  int v2 = (std::__shared_weak_count *)*((void *)this + 56);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F778;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::squeeze_kernel_cpu,Espresso::squeeze_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_49@<Q0>(uint64_t *a1@<X1>, const void *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x260uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FF58;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  memcpy(v6 + 304, a2, 0x109uLL);
  *((void *)v6 + 3) = &unk_1EE31F1C0;
  *((_OWORD *)v6 + 36) = 0u;
  *((_OWORD *)v6 + 37) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 73);
    *((void *)v6 + 72) = v7;
    *((void *)v6 + 73) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 72) = v7;
    *((void *)v6 + 73) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192997824(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = (std::string::size_type *)(v7 + 568);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    uint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 72);
    *(_OWORD *)(v7 + 568) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      long long v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        long long v30 = (const std::string::value_type *)v39;
      }
      else {
        long long v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      uint64_t v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      unint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_192997BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 560);
  v57[0] = *(void *)(a1 + 552);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 560);
  v56[0] = *(void *)(a1 + 552);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::tensor_zero_pad_kernel_cpu::__launch(v53, v10, (uint64_t **)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 568);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 576);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    uint64_t v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 560);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_192998300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_192998644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31F1C0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 70);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31F1C0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 70);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FF58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::tensor_zero_pad_kernel_cpu,Espresso::tensor_zero_pad_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FF58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_48@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x178uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F0E8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE319658;
  long long v7 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  v6[336] = *(unsigned char *)(a2 + 32);
  *((_OWORD *)v6 + 20) = v7;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 44);
    *((void *)v6 + 43) = v8;
    *((void *)v6 + 44) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 43) = v8;
    *((void *)v6 + 44) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192998940(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  long long v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 43);
    *((_OWORD *)v7 + 21) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 42);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 42) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_192998CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 328);
  v57[0] = *(void *)(a1 + 320);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 328);
  v56[0] = *(void *)(a1 + 320);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        unint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::fill_kernel_cpu::__launch(v53, a2, (uint64_t **)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 336);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 344);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 328);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19299941C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_192999760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE319658;
  int v2 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE319658;
  int v2 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F0E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::fill_kernel_cpu,Espresso::fill_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F0E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_47@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x168uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FFC8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31F478;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 42);
    *((void *)v6 + 41) = v7;
    *((void *)v6 + 42) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 41) = v7;
    *((void *)v6 + 42) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192999A54(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 41);
    *((_OWORD *)v7 + 20) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 40);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 40) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_192999DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 312);
  v57[0] = *(void *)(a1 + 304);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 312);
  v56[0] = *(void *)(a1 + 304);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::matrix_band_part_kernel_cpu::__launch(v53, v10, (uint64_t)v58, v59);
  uint64_t v23 = *(void *)(v53 + 320);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 328);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 312);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19299A528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19299A86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31F478;
  int v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31F478;
  int v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FFC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::matrix_band_part_kernel_cpu,Espresso::matrix_band_part_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FFC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_46@<Q0>(uint64_t *a1@<X1>, unsigned __int16 *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x158uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FC48;
  int v7 = *((unsigned __int8 *)a2 + 2);
  LODWORD(a2) = *a2;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31DEB0;
  v6[306] = (a2 | (v7 << 16)) >> 16;
  *((_WORD *)v6 + 152) = (_WORD)a2;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 40);
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19299AB64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  int v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 39);
    *((_OWORD *)v7 + 19) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 38);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 38) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_19299AEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 296);
  v57[0] = *(void *)(a1 + 288);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 296);
  v56[0] = *(void *)(a1 + 288);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::batch_matmul_kernel_cpu::__launch((unsigned char *)v53, v10, (uint64_t)v58, v59);
  uint64_t v23 = *(void *)(v53 + 304);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 312);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 296);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19299B638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19299B97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31DEB0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31DEB0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FC48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::batch_matmul_kernel_cpu,Espresso::batch_matmul_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FC48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_45@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x160uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F238;
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  *((void *)v6 + 38) = v7;
  *((_DWORD *)v6 + 78) = v8;
  *((void *)v6 + 3) = &unk_1EE319EC8;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v6 + 41);
    *((void *)v6 + 40) = v9;
    *((void *)v6 + 41) = v10;
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
  }
  else
  {
    *((void *)v6 + 40) = v9;
    *((void *)v6 + 41) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19299BC70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::range_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_range_kernel::kernel_type_str(Espresso::generic_range_kernel *this)
{
  return "range";
}

BOOL Espresso::generic_range_kernel::has_dynamic_top_shape(Espresso::generic_range_kernel *this, uint64_t a2)
{
  return a2 != 0;
}

BOOL wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 312);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 40);
    *(_OWORD *)(v7 + 312) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_19299C00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 304);
  v57[0] = *(void *)(a1 + 296);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 304);
  v56[0] = *(void *)(a1 + 296);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::range_kernel_cpu::__launch(v53, a2, (uint64_t **)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 312);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 320);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 304);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19299C76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19299CAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE319EC8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE319EC8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F238;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::range_kernel_cpu,Espresso::range_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_44@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x190uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FB68;
  Espresso::load_random_kernel_cpu::load_random_kernel_cpu((uint64_t)v6 + 24, a1, v7, a2);
  *((void *)v6 + 3) = &unk_1EE31D950;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 47);
    *((void *)v6 + 46) = v8;
    *((void *)v6 + 47) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 46) = v8;
    *((void *)v6 + 47) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19299CD90(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::load_random_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_load_random_kernel::kernel_type_str(Espresso::generic_load_random_kernel *this)
{
  return "load_random";
}

BOOL Espresso::generic_load_random_kernel::has_dynamic_top_shape(Espresso::generic_load_random_kernel *this, uint64_t a2)
{
  return a2 && *((unsigned char *)this + 324) != 0;
}

BOOL wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 360);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 46);
    *(_OWORD *)(v7 + 360) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_19299D13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 352);
  v57[0] = *(void *)(a1 + 344);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 352);
  v56[0] = *(void *)(a1 + 344);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::load_random_kernel_cpu::__launch(v53, a2, (uint64_t **)v58, v59);
  uint64_t v23 = *(void *)(v53 + 360);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 368);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 352);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19299D89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19299DBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31D950;
  int v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE359970;
  int v4 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE31D950;
  int v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE359970;
  int v4 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FB68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::load_random_kernel_cpu,Espresso::load_random_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FB68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_43@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x168uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F708;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31BD60;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *(void *)(v6 + 319) = *(void *)(a2 + 15);
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 42);
    *((void *)v6 + 41) = v7;
    *((void *)v6 + 42) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 41) = v7;
    *((void *)v6 + 42) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19299DF24(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::scatter_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_scatter_kernel::kernel_type_str(Espresso::generic_scatter_kernel *this)
{
  return "scatter";
}

BOOL wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 41);
    *((_OWORD *)v7 + 20) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 40);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 40) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_19299E2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 312);
  v57[0] = *(void *)(a1 + 304);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 312);
  v56[0] = *(void *)(a1 + 304);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        unint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::scatter_kernel_cpu::__launch(v53, a2, (uint64_t **)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 320);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 328);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 312);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_19299EA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19299ED58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31BD60;
  int v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31BD60;
  int v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F708;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::scatter_kernel_cpu,Espresso::scatter_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F708;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_42@<D0>(uint64_t *a1@<X1>, int *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>,std::allocator<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::allocate_shared[abi:ne180100]<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>,std::allocator<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>(void *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = (char *)operator new(0x158uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F078;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  int v7 = *a3;
  *((void *)v6 + 3) = &unk_1EE3193A8;
  *((_DWORD *)v6 + 76) = v7;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    std::string::size_type v10 = (std::__shared_weak_count *)*((void *)v6 + 40);
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = 0;
  }
  *a1 = v6 + 24;
  a1[1] = v6;
}

void sub_19299F070(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  int v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 39);
    *((_OWORD *)v7 + 19) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 38);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 38) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_19299F3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v58, 0, sizeof(v58));
  memset(v57, 0, sizeof(v57));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 296);
  v56[0] = *(void *)(a1 + 288);
  v56[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>::convert_layer_data_to_fp32(v56, v58, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 296);
  v55[0] = *(void *)(a1 + 288);
  v55[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>::convert_layer_data_to_fp32(v55, v57, *a3, a3[1], 0, 0);
  uint64_t v52 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v11 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v10[2 * v11]->__on_zero_shared_weak)(v10[2 * v11])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v11]->__on_zero_shared_weak)((*a4)[2 * v11]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v11][4].__shared_weak_owners_;
        uint64_t v12 = v58[0] + 16 * v11;
        long long v14 = *(std::__shared_weak_count **)(v12 + 8);
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = *((void *)v13 + 20);
        unint64_t v16 = (std::__shared_weak_count *)*((void *)v13 + 21);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = 0;
        long long v18 = *(float **)(v15 + 24);
        vDSP_Length v19 = *(int *)(v15 + 8);
        uint64_t v20 = v15 + 12;
        do
        {
          v19 *= *(int *)(v20 + v17);
          v17 += 4;
        }
        while (v17 != 12);
        vDSP_vsmul(v18, 1, (const float *)&__B, v18, 1, v19);
        if (v16) {
          nitro::nitro_function::nitro_function(v16);
        }
        if (v14) {
          nitro::nitro_function::nitro_function(v14);
        }
      }
      ++v11;
      std::string::size_type v10 = *a4;
    }
    while (v11 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  Espresso::copy_kernel_cpu::__compute((uint64_t *)v57, v58);
  uint64_t v21 = v52;
  uint64_t v22 = *(void *)(v52 + 304);
  if (v22)
  {
    uint64_t v23 = *(std::__shared_weak_count **)(v52 + 312);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v24 = v57[0];
    if (*v57[0])
    {
      if (v25)
      {
        std::string::size_type v26 = (std::__shared_weak_count *)v24[1];
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v25 = 0;
    }
    std::string::size_type v26 = 0;
LABEL_37:
    std::string v51 = v26;
    LODWORD(v27) = *(_DWORD *)(v22 + 8);
    if (v27 == 1)
    {
      uint64_t v28 = 0;
      uint64_t v29 = *((void *)v25 + 20);
      long long v30 = *(float **)(v29 + 24);
      vDSP_Length v31 = *(int *)(v29 + 8);
      uint64_t v32 = v29 + 12;
      do
      {
        v31 *= *(int *)(v32 + v28);
        v28 += 4;
      }
      while (v28 != 12);
      vDSP_vsmul(v30, 1, *(const float **)(v22 + 16), v30, 1, v31);
    }
    else
    {
      int v33 = v25[4];
      if (v27 != v33) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v27, v33);
      }
      int v34 = v25[5];
      if (v34)
      {
        uint64_t v35 = 0;
        unint64_t v36 = 0;
        vDSP_Length v37 = v25[2] * (uint64_t)v25[3];
        vDSP_Length v53 = 4 * (int)v27 * v37;
        do
        {
          if (v27)
          {
            uint64_t v38 = 0;
            unint64_t v39 = 0;
            uint64_t v40 = v35;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v25 + 20) + 24) + v40), 1, (const float *)(*(void *)(v22 + 16) + v38), (float *)(*(void *)(*((void *)v25 + 20) + 24) + v40), 1, v37);
              ++v39;
              unint64_t v27 = v25[4];
              v38 += 4;
              v40 += 4 * v37;
            }
            while (v39 < v27);
            int v34 = v25[5];
          }
          ++v36;
          v35 += v53;
        }
        while (v36 < v34);
      }
    }
    if (v51) {
      nitro::nitro_function::nitro_function(v51);
    }
    uint64_t v21 = v52;
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
  }
  unsigned __int8 v41 = *(std::__shared_weak_count **)(v21 + 296);
  if (v41) {
    atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v54 = v41;
  unsigned __int8 v42 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    do
    {
      std::string v45 = v42[v43];
      if (v45)
      {
        if (v46)
        {
          std::string v47 = v42[v43 + 1];
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v46 = 0;
      }
      std::string v47 = 0;
LABEL_63:
      std::string v48 = v57[0];
      std::string v49 = v57[0][v43];
      if (v49
      {
        std::string v50 = (std::__shared_weak_count *)v48[v43 + 1];
        if (v50) {
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v50 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v46, (uint64_t)v49 + 160, 1.0);
      if (v50) {
        nitro::nitro_function::nitro_function(v50);
      }
      if (v47) {
        nitro::nitro_function::nitro_function(v47);
      }
      ++v44;
      unsigned __int8 v42 = *a3;
      v43 += 2;
    }
    while (v44 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  float __B = v57;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v57[0] = (void **)v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v57);
}

void sub_19299FB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      uint64_t v12 = *v8;
      unint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      long long v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        vDSP_Length v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        uint64_t v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        vDSP_Length v31 = v23;
        uint64_t v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        long long v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        long long v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    uint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      vDSP_Length v31 = 0;
      uint64_t v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_19299FE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE3193A8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE3193A8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F078;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_41@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  int v4 = operator new(0x180uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)int v4 = &unk_1EE37F580;
  Espresso::generic_cf_else_kernel::generic_cf_else_kernel((void *)v4 + 3, a1);
  *((void *)v4 + 3) = &unk_1EE31B398;
  *((void *)v4 + 39) = &unk_1EE31B4F0;
  *((_OWORD *)v4 + 22) = 0u;
  *((_OWORD *)v4 + 23) = 0u;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    BOOL v7 = (std::__shared_weak_count *)*((void *)v4 + 45);
    *((void *)v4 + 44) = v5;
    *((void *)v4 + 45) = v6;
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
  }
  else
  {
    *((void *)v4 + 44) = v5;
    *((void *)v4 + 45) = 0;
  }
  result.n128_u64[0] = (unint64_t)v4 + 24;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1929A0174(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>::~wrapper_kernel(void *a1)
{
  int v2 = (Espresso::generic_cf_else_kernel *)(a1 - 36);
  *(a1 - 36) = &unk_1EE31B398;
  *a1 = &unk_1EE31B4F0;
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::generic_cf_else_kernel::~generic_cf_else_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_cf_else_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  int v2 = (Espresso::generic_cf_else_kernel *)(a1 - 36);
  *(a1 - 36) = &unk_1EE31B398;
  *a1 = &unk_1EE31B4F0;
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  Espresso::generic_cf_else_kernel::~generic_cf_else_kernel(v2);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_else_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_cf_else_kernel::kernel_type_str(Espresso::generic_cf_else_kernel *this)
{
  return "cf_else";
}

BOOL wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  BOOL v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = (std::string::size_type *)(v7 + 344);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    uint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 44);
    *(_OWORD *)(v7 + 344) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      long long v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        long long v30 = (const std::string::value_type *)v39;
      }
      else {
        long long v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      uint64_t v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      unint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_1929A0628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void Espresso::generic_cf_else_kernel::top_shapes_for_bottom_shapes(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 336);
  v57[0] = *(void *)(a1 + 328);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 336);
  v56[0] = *(void *)(a1 + 328);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::cf_else_kernel_cpu::__launch(v53, a2);
  uint64_t v23 = *(void *)(v53 + 344);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 352);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    uint64_t v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 336);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929A0D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929A10D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>::~wrapper_kernel(Espresso::generic_cf_else_kernel *this)
{
  *(void *)this = &unk_1EE31B398;
  *((void *)this + 36) = &unk_1EE31B4F0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_cf_else_kernel::~generic_cf_else_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31B398;
  *((void *)this + 36) = &unk_1EE31B4F0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_cf_else_kernel::~generic_cf_else_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F580;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_else_kernel_cpu,Espresso::cf_else_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_40@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  int v4 = (char *)operator new(0x180uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)int v4 = &unk_1EE37F2E0;
  Espresso::base_kernel::base_kernel((uint64_t)(v4 + 24), a1);
  *((void *)v4 + 3) = &unk_1EE31A2D0;
  v4[305] = 0;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *((void *)v4 + 43) = 0;
  *((_OWORD *)v4 + 22) = 0u;
  *((_OWORD *)v4 + 23) = 0u;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    BOOL v7 = (std::__shared_weak_count *)*((void *)v4 + 45);
    *((void *)v4 + 44) = v5;
    *((void *)v4 + 45) = v6;
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
  }
  else
  {
    *((void *)v4 + 44) = v5;
    *((void *)v4 + 45) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v4 + 24);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1929A13FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_end_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_cf_end_kernel::kernel_type_str(Espresso::generic_cf_end_kernel *this)
{
  return "cf_end";
}

BOOL wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  BOOL v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = (std::string::size_type *)(v7 + 344);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 44);
    *(_OWORD *)(v7 + 344) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_1929A178C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

uint64_t Espresso::generic_cf_end_kernel::number_of_top_blobs(Espresso::generic_cf_end_kernel *this)
{
  return 0;
}

void Espresso::generic_cf_end_kernel::top_shapes_for_bottom_shapes(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 336);
  v57[0] = *(void *)(a1 + 328);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 336);
  v56[0] = *(void *)(a1 + 328);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::cf_end_kernel_cpu::__launch(v53, a2);
  uint64_t v23 = *(void *)(v53 + 344);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 352);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    uint64_t v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 336);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929A1EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929A223C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>::~wrapper_kernel(Espresso::generic_cf_end_kernel *this)
{
  *(void *)this = &unk_1EE31A2D0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_cf_end_kernel::~generic_cf_end_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31A2D0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_cf_end_kernel::~generic_cf_end_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F2E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_end_kernel_cpu,Espresso::cf_end_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F2E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_39@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  BOOL v8 = (char *)operator new(0x1C0uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)BOOL v8 = &unk_1EE37F318;
  uint64_t v9 = *a2;
  Espresso::generic_cf_for_kernel::generic_cf_for_kernel((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 48) = 0;
  *((void *)v8 + 49) = 0;
  *((_DWORD *)v8 + 100) = a3;
  *(void *)(v8 + 404) = 0;
  *((void *)v8 + 3) = &unk_1EE31A428;
  *((void *)v8 + 38) = v9;
  *((void *)v8 + 39) = &unk_1EE31A580;
  *((_OWORD *)v8 + 26) = 0u;
  *((_OWORD *)v8 + 27) = 0u;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  if (v11)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v8 + 53);
    *((void *)v8 + 52) = v10;
    *((void *)v8 + 53) = v11;
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
  }
  else
  {
    *((void *)v8 + 52) = v10;
    *((void *)v8 + 53) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1929A2550(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>::~wrapper_kernel(void *a1)
{
  int v2 = (Espresso::generic_cf_for_kernel *)(a1 - 36);
  *(a1 - 36) = &unk_1EE31A428;
  *a1 = &unk_1EE31A580;
  int v3 = (std::__shared_weak_count *)a1[16];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[14];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  *(void *)int v2 = &unk_1EE34C408;
  *a1 = &unk_1EE34C560;
  uint64_t v5 = (std::__shared_weak_count *)a1[10];
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  Espresso::generic_cf_for_kernel::~generic_cf_for_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_cf_for_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  int v2 = (Espresso::generic_cf_for_kernel *)(a1 - 36);
  *(a1 - 36) = &unk_1EE31A428;
  *a1 = &unk_1EE31A580;
  int v3 = (std::__shared_weak_count *)a1[16];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[14];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  *(void *)int v2 = &unk_1EE34C408;
  *a1 = &unk_1EE34C560;
  uint64_t v5 = (std::__shared_weak_count *)a1[10];
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  Espresso::generic_cf_for_kernel::~generic_cf_for_kernel(v2);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_for_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_cf_for_kernel::kernel_type_str(Espresso::generic_cf_for_kernel *this)
{
  return "cf_for";
}

BOOL wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  BOOL v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 408);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 52);
    *(_OWORD *)(v7 + 408) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_1929A2A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 400);
  v57[0] = *(void *)(a1 + 392);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 400);
  v56[0] = *(void *)(a1 + 392);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::cf_for_kernel_cpu::__launch(v53, a2, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 408);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 416);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    uint64_t v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 400);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929A31EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929A3530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>::~wrapper_kernel(Espresso::generic_cf_for_kernel *this)
{
  *(void *)this = &unk_1EE31A428;
  *((void *)this + 36) = &unk_1EE31A580;
  int v2 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE34C408;
  *((void *)this + 36) = &unk_1EE34C560;
  int v4 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::generic_cf_for_kernel::~generic_cf_for_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE31A428;
  *((void *)this + 36) = &unk_1EE31A580;
  int v2 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE34C408;
  *((void *)this + 36) = &unk_1EE34C560;
  int v4 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  Espresso::generic_cf_for_kernel::~generic_cf_for_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F318;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_for_kernel_cpu,Espresso::cf_for_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_38@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x180uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F5F0;
  LODWORD(a2) = *a2;
  Espresso::generic_cf_loop_kernel::generic_cf_loop_kernel((void *)v6 + 3, a1);
  *((_DWORD *)v6 + 76) = a2;
  *((void *)v6 + 3) = &unk_1EE31B688;
  *((void *)v6 + 39) = &unk_1EE31B7E0;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 45);
    *((void *)v6 + 44) = v7;
    *((void *)v6 + 45) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 44) = v7;
    *((void *)v6 + 45) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929A38FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>::~wrapper_kernel(void *a1)
{
  int v2 = (Espresso::generic_cf_loop_kernel *)(a1 - 36);
  *(a1 - 36) = &unk_1EE31B688;
  *a1 = &unk_1EE31B7E0;
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::generic_cf_loop_kernel::~generic_cf_loop_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_cf_loop_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  int v2 = (Espresso::generic_cf_loop_kernel *)(a1 - 36);
  *(a1 - 36) = &unk_1EE31B688;
  *a1 = &unk_1EE31B7E0;
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  Espresso::generic_cf_loop_kernel::~generic_cf_loop_kernel(v2);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_loop_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_cf_loop_kernel::kernel_type_str(Espresso::generic_cf_loop_kernel *this)
{
  return "cf_loop";
}

BOOL wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 344);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 44);
    *(_OWORD *)(v7 + 344) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_1929A3DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void Espresso::generic_cf_loop_kernel::top_shapes_for_bottom_shapes(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v60, 0, sizeof(v60));
  memset(v59, 0, sizeof(v59));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 336);
  v58[0] = *(void *)(a1 + 328);
  v58[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>::convert_layer_data_to_fp32(v58, v60, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 336);
  v57[0] = *(void *)(a1 + 328);
  v57[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>::convert_layer_data_to_fp32(v57, v59, *a3, a3[1], 0, 0);
  uint64_t v54 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  unint64_t v12 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v13 = 0;
    do
    {
      if (!v8)
      {
        if (!((unsigned int (*)(std::__shared_weak_count *))v12[2 * v13]->__on_zero_shared_weak)(v12[2 * v13])
          || (uint64_t v11 = ((uint64_t (*)(std::__shared_weak_count *))(*a4)[2 * v13]->__on_zero_shared_weak)((*a4)[2 * v13]),
              v11 == 1))
        {
          LODWORD(__B) = (*a4)[2 * v13][4].__shared_weak_owners_;
          uint64_t v14 = v60[0] + 16 * v13;
          unint64_t v16 = *(std::__shared_weak_count **)(v14 + 8);
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v17 = *((void *)v15 + 20);
          uint64_t v18 = (std::__shared_weak_count *)*((void *)v15 + 21);
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v19 = 0;
          uint64_t v20 = *(float **)(v17 + 24);
          vDSP_Length v21 = *(int *)(v17 + 8);
          uint64_t v22 = v17 + 12;
          do
          {
            v21 *= *(int *)(v22 + v19);
            v19 += 4;
          }
          while (v19 != 12);
          vDSP_vsmul(v20, 1, (const float *)&__B, v20, 1, v21);
          if (v18) {
            nitro::nitro_function::nitro_function(v18);
          }
          if (v16) {
            nitro::nitro_function::nitro_function(v16);
          }
        }
      }
      ++v13;
      unint64_t v12 = *a4;
    }
    while (v13 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  Espresso::cf_loop_kernel_cpu::__launch(v11, a2);
  uint64_t v23 = v54;
  uint64_t v24 = *(void *)(v54 + 344);
  if (v24)
  {
    std::string::size_type v25 = *(std::__shared_weak_count **)(v54 + 352);
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v26 = v59[0];
    if (*v59[0])
    {
      if (v27)
      {
        std::__shared_count v28 = (std::__shared_weak_count *)v26[1];
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      long long v27 = 0;
    }
    std::__shared_count v28 = 0;
LABEL_37:
    uint64_t v53 = v28;
    LODWORD(v29) = *(_DWORD *)(v24 + 8);
    if (v29 == 1)
    {
      uint64_t v30 = 0;
      uint64_t v31 = *((void *)v27 + 20);
      vDSP_Length v32 = *(float **)(v31 + 24);
      vDSP_Length v33 = *(int *)(v31 + 8);
      uint64_t v34 = v31 + 12;
      do
      {
        v33 *= *(int *)(v34 + v30);
        v30 += 4;
      }
      while (v30 != 12);
      vDSP_vsmul(v32, 1, *(const float **)(v24 + 16), v32, 1, v33);
    }
    else
    {
      int v35 = v27[4];
      if (v29 != v35) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v29, v35);
      }
      int v36 = v27[5];
      if (v36)
      {
        uint64_t v37 = 0;
        unint64_t v38 = 0;
        vDSP_Length v39 = v27[2] * (uint64_t)v27[3];
        vDSP_Length v55 = 4 * (int)v29 * v39;
        do
        {
          if (v29)
          {
            uint64_t v40 = 0;
            unint64_t v41 = 0;
            uint64_t v42 = v37;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v27 + 20) + 24) + v42), 1, (const float *)(*(void *)(v24 + 16) + v40), (float *)(*(void *)(*((void *)v27 + 20) + 24) + v42), 1, v39);
              ++v41;
              unint64_t v29 = v27[4];
              v40 += 4;
              v42 += 4 * v39;
            }
            while (v41 < v29);
            int v36 = v27[5];
          }
          ++v38;
          v37 += v55;
        }
        while (v38 < v36);
      }
    }
    if (v53) {
      nitro::nitro_function::nitro_function(v53);
    }
    uint64_t v23 = v54;
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
  }
  std::string v43 = *(std::__shared_weak_count **)(v23 + 336);
  if (v43) {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v56 = v43;
  std::string v44 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v45 = 0;
    unint64_t v46 = 0;
    do
    {
      std::string v47 = v44[v45];
      if (v47)
      {
        if (v48)
        {
          std::string v49 = v44[v45 + 1];
          if (v49) {
            atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v48 = 0;
      }
      std::string v49 = 0;
LABEL_63:
      std::string v50 = v59[0];
      std::string v51 = v59[0][v45];
      if (v51
      {
        uint64_t v52 = (std::__shared_weak_count *)v50[v45 + 1];
        if (v52) {
          atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v52 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v48, (uint64_t)v51 + 160, 1.0);
      if (v52) {
        nitro::nitro_function::nitro_function(v52);
      }
      if (v49) {
        nitro::nitro_function::nitro_function(v49);
      }
      ++v46;
      std::string v44 = *a3;
      v45 += 2;
    }
    while (v46 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  float __B = v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v59[0] = (void **)v60;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v59);
}

void sub_1929A4514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      unint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        uint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      uint64_t v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        uint64_t v24 = (std::__shared_weak_count *)&v23[16 * v19];
        uint64_t v31 = v23;
        vDSP_Length v32 = v24;
        uint64_t v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      uint64_t v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929A4858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>::~wrapper_kernel(Espresso::generic_cf_loop_kernel *this)
{
  *(void *)this = &unk_1EE31B688;
  *((void *)this + 36) = &unk_1EE31B7E0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_cf_loop_kernel::~generic_cf_loop_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31B688;
  *((void *)this + 36) = &unk_1EE31B7E0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_cf_loop_kernel::~generic_cf_loop_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F5F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_loop_kernel_cpu,Espresso::cf_loop_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F5F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_37@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  int v4 = operator new(0x180uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)int v4 = &unk_1EE37F200;
  Espresso::generic_cf_if_kernel::generic_cf_if_kernel((void *)v4 + 3, a1);
  *((void *)v4 + 3) = &unk_1EE319D50;
  *((void *)v4 + 39) = &unk_1EE319EA8;
  *((_OWORD *)v4 + 22) = 0u;
  *((_OWORD *)v4 + 23) = 0u;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 + 45);
    *((void *)v4 + 44) = v5;
    *((void *)v4 + 45) = v6;
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
  }
  else
  {
    *((void *)v4 + 44) = v5;
    *((void *)v4 + 45) = 0;
  }
  result.n128_u64[0] = (unint64_t)v4 + 24;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1929A4B88(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>::~wrapper_kernel(void *a1)
{
  int v2 = (Espresso::generic_cf_if_kernel *)(a1 - 36);
  *(a1 - 36) = &unk_1EE319D50;
  *a1 = &unk_1EE319EA8;
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::generic_cf_if_kernel::~generic_cf_if_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_cf_if_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  int v2 = (Espresso::generic_cf_if_kernel *)(a1 - 36);
  *(a1 - 36) = &unk_1EE319D50;
  *a1 = &unk_1EE319EA8;
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  Espresso::generic_cf_if_kernel::~generic_cf_if_kernel(v2);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_if_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_cf_if_kernel::kernel_type_str(Espresso::generic_cf_if_kernel *this)
{
  return "cf_if";
}

BOOL wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 344);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 44);
    *(_OWORD *)(v7 + 344) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        uint64_t v24 = (const std::string::value_type *)v41;
      }
      else {
        uint64_t v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v34 = &v38;
      }
      else {
        uint64_t v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      int v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_1929A503C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

uint64_t Espresso::generic_cf_if_kernel::number_of_top_blobs(Espresso::generic_cf_if_kernel *this)
{
  return 0;
}

void Espresso::generic_cf_if_kernel::top_shapes_for_bottom_shapes(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>::__launch(uint64_t a1, uint64_t *a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v60, 0, sizeof(v60));
  memset(v59, 0, sizeof(v59));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 336);
  v58[0] = *(void *)(a1 + 328);
  v58[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>::convert_layer_data_to_fp32(v58, v60, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 336);
  v57[0] = *(void *)(a1 + 328);
  v57[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>::convert_layer_data_to_fp32(v57, v59, *a3, a3[1], 0, 0);
  uint64_t v54 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  unint64_t v12 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v13 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v12[2 * v13]->__on_zero_shared_weak)(v12[2 * v13])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v13]->__on_zero_shared_weak)((*a4)[2 * v13]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v13][4].__shared_weak_owners_;
        uint64_t v14 = (const void **)&v60[0][2 * v13];
        unint64_t v16 = (std::__shared_weak_count *)v14[1];
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = *((void *)v15 + 20);
        uint64_t v18 = (std::__shared_weak_count *)*((void *)v15 + 21);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v19 = 0;
        uint64_t v20 = *(float **)(v17 + 24);
        vDSP_Length v21 = *(int *)(v17 + 8);
        uint64_t v22 = v17 + 12;
        do
        {
          v21 *= *(int *)(v22 + v19);
          v19 += 4;
        }
        while (v19 != 12);
        vDSP_vsmul(v20, 1, (const float *)&__B, v20, 1, v21);
        if (v18) {
          nitro::nitro_function::nitro_function(v18);
        }
        if (v16) {
          nitro::nitro_function::nitro_function(v16);
        }
      }
      ++v13;
      unint64_t v12 = *a4;
    }
    while (v13 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v23 = v54;
  Espresso::cf_if_kernel_cpu::__launch(v54, a2, v11, v60);
  uint64_t v24 = *(void *)(v54 + 344);
  if (v24)
  {
    std::string::size_type v25 = *(std::__shared_weak_count **)(v54 + 352);
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v26 = v59[0];
    if (*v59[0])
    {
      if (v27)
      {
        std::__shared_count v28 = (std::__shared_weak_count *)v26[1];
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      long long v27 = 0;
    }
    std::__shared_count v28 = 0;
LABEL_37:
    uint64_t v53 = v28;
    LODWORD(v29) = *(_DWORD *)(v24 + 8);
    if (v29 == 1)
    {
      uint64_t v30 = 0;
      uint64_t v31 = *((void *)v27 + 20);
      vDSP_Length v32 = *(float **)(v31 + 24);
      vDSP_Length v33 = *(int *)(v31 + 8);
      uint64_t v34 = v31 + 12;
      do
      {
        v33 *= *(int *)(v34 + v30);
        v30 += 4;
      }
      while (v30 != 12);
      vDSP_vsmul(v32, 1, *(const float **)(v24 + 16), v32, 1, v33);
    }
    else
    {
      int v35 = v27[4];
      if (v29 != v35) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v29, v35);
      }
      int v36 = v27[5];
      if (v36)
      {
        uint64_t v37 = 0;
        unint64_t v38 = 0;
        vDSP_Length v39 = v27[2] * (uint64_t)v27[3];
        vDSP_Length v55 = 4 * (int)v29 * v39;
        do
        {
          if (v29)
          {
            uint64_t v40 = 0;
            unint64_t v41 = 0;
            uint64_t v42 = v37;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v27 + 20) + 24) + v42), 1, (const float *)(*(void *)(v24 + 16) + v40), (float *)(*(void *)(*((void *)v27 + 20) + 24) + v42), 1, v39);
              ++v41;
              unint64_t v29 = v27[4];
              v40 += 4;
              v42 += 4 * v39;
            }
            while (v41 < v29);
            int v36 = v27[5];
          }
          ++v38;
          v37 += v55;
        }
        while (v38 < v36);
      }
    }
    if (v53) {
      nitro::nitro_function::nitro_function(v53);
    }
    uint64_t v23 = v54;
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
  }
  std::string v43 = *(std::__shared_weak_count **)(v23 + 336);
  if (v43) {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v56 = v43;
  std::string v44 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v45 = 0;
    unint64_t v46 = 0;
    do
    {
      std::string v47 = v44[v45];
      if (v47)
      {
        if (v48)
        {
          std::string v49 = v44[v45 + 1];
          if (v49) {
            atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v48 = 0;
      }
      std::string v49 = 0;
LABEL_63:
      std::string v50 = v59[0];
      std::string v51 = v59[0][v45];
      if (v51
      {
        uint64_t v52 = (std::__shared_weak_count *)v50[v45 + 1];
        if (v52) {
          atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v52 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v48, (uint64_t)v51 + 160, 1.0);
      if (v52) {
        nitro::nitro_function::nitro_function(v52);
      }
      if (v49) {
        nitro::nitro_function::nitro_function(v49);
      }
      ++v46;
      std::string v44 = *a3;
      v45 += 2;
    }
    while (v46 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  float __B = v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v59[0] = (void **)v60;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v59);
}

void sub_1929A57AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      unint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        uint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      uint64_t v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        uint64_t v24 = (std::__shared_weak_count *)&v23[16 * v19];
        uint64_t v31 = v23;
        vDSP_Length v32 = v24;
        uint64_t v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      uint64_t v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929A5AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>::~wrapper_kernel(Espresso::generic_cf_if_kernel *this)
{
  *(void *)this = &unk_1EE319D50;
  *((void *)this + 36) = &unk_1EE319EA8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_cf_if_kernel::~generic_cf_if_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE319D50;
  *((void *)this + 36) = &unk_1EE319EA8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_cf_if_kernel::~generic_cf_if_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F200;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_if_kernel_cpu,Espresso::cf_if_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_36@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x188uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FCB8;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  long long v12 = *(_OWORD *)(a2 + 24);
  long long v13 = *(_OWORD *)(a2 + 40);
  Espresso::store_global_kernel_cpu::store_global_kernel_cpu((uint64_t)(v6 + 24), a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)v6 + 3) = &unk_1EE31E160;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 46);
    *((void *)v6 + 45) = v7;
    *((void *)v6 + 46) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 45) = v7;
    *((void *)v6 + 46) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929A5E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::store_global_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_store_global_kernel::kernel_type_str(Espresso::generic_store_global_kernel *this)
{
  return "store_global";
}

BOOL wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v7 + 45);
    *((_OWORD *)v7 + 22) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 44);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      uint64_t v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 44) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        uint64_t v31 = (const std::string::value_type *)v40;
      }
      else {
        uint64_t v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      vDSP_Length v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      uint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929A620C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void Espresso::generic_store_global_kernel::top_shapes_for_bottom_shapes(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v60, 0, sizeof(v60));
  memset(v59, 0, sizeof(v59));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 344);
  v58[0] = *(void *)(a1 + 336);
  v58[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>::convert_layer_data_to_fp32(v58, v60, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 344);
  v57[0] = *(void *)(a1 + 336);
  v57[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>::convert_layer_data_to_fp32(v57, v59, *a3, a3[1], 0, 0);
  uint64_t v54 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::string::size_type v12 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v13 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v12[2 * v13]->__on_zero_shared_weak)(v12[2 * v13])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v13]->__on_zero_shared_weak)((*a4)[2 * v13]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v13][4].__shared_weak_owners_;
        uint64_t v14 = &v60[0][2 * v13];
        unint64_t v16 = (std::__shared_weak_count *)v14[1];
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = *((void *)v15 + 20);
        long long v18 = (std::__shared_weak_count *)*((void *)v15 + 21);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v19 = 0;
        long long v20 = *(float **)(v17 + 24);
        vDSP_Length v21 = *(int *)(v17 + 8);
        uint64_t v22 = v17 + 12;
        do
        {
          v21 *= *(int *)(v22 + v19);
          v19 += 4;
        }
        while (v19 != 12);
        vDSP_vsmul(v20, 1, (const float *)&__B, v20, 1, v21);
        if (v18) {
          nitro::nitro_function::nitro_function(v18);
        }
        if (v16) {
          nitro::nitro_function::nitro_function(v16);
        }
      }
      ++v13;
      std::string::size_type v12 = *a4;
    }
    while (v13 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v23 = v54;
  Espresso::store_global_kernel_cpu::__launch(v54, a2, v11, v60);
  uint64_t v24 = *(void *)(v54 + 352);
  if (v24)
  {
    uint64_t v25 = *(std::__shared_weak_count **)(v54 + 360);
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v26 = v59[0];
    if (*v59[0])
    {
      if (v27)
      {
        long long v28 = (std::__shared_weak_count *)v26[1];
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      long long v27 = 0;
    }
    long long v28 = 0;
LABEL_37:
    uint64_t v53 = v28;
    LODWORD(v29) = *(_DWORD *)(v24 + 8);
    if (v29 == 1)
    {
      uint64_t v30 = 0;
      uint64_t v31 = *((void *)v27 + 20);
      std::string::size_type v32 = *(float **)(v31 + 24);
      vDSP_Length v33 = *(int *)(v31 + 8);
      uint64_t v34 = v31 + 12;
      do
      {
        v33 *= *(int *)(v34 + v30);
        v30 += 4;
      }
      while (v30 != 12);
      vDSP_vsmul(v32, 1, *(const float **)(v24 + 16), v32, 1, v33);
    }
    else
    {
      int v35 = v27[4];
      if (v29 != v35) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v29, v35);
      }
      int v36 = v27[5];
      if (v36)
      {
        uint64_t v37 = 0;
        unint64_t v38 = 0;
        vDSP_Length v39 = v27[2] * (uint64_t)v27[3];
        vDSP_Length v55 = 4 * (int)v29 * v39;
        do
        {
          if (v29)
          {
            uint64_t v40 = 0;
            unint64_t v41 = 0;
            uint64_t v42 = v37;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v27 + 20) + 24) + v42), 1, (const float *)(*(void *)(v24 + 16) + v40), (float *)(*(void *)(*((void *)v27 + 20) + 24) + v42), 1, v39);
              ++v41;
              unint64_t v29 = v27[4];
              v40 += 4;
              v42 += 4 * v39;
            }
            while (v41 < v29);
            int v36 = v27[5];
          }
          ++v38;
          v37 += v55;
        }
        while (v38 < v36);
      }
    }
    if (v53) {
      nitro::nitro_function::nitro_function(v53);
    }
    uint64_t v23 = v54;
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
  }
  unsigned __int8 v43 = *(std::__shared_weak_count **)(v23 + 344);
  if (v43) {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v56 = v43;
  std::string v44 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v45 = 0;
    unint64_t v46 = 0;
    do
    {
      std::string v47 = v44[v45];
      if (v47)
      {
        if (v48)
        {
          std::string v49 = v44[v45 + 1];
          if (v49) {
            atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v48 = 0;
      }
      std::string v49 = 0;
LABEL_63:
      std::string v50 = v59[0];
      std::string v51 = v59[0][v45];
      if (v51
      {
        std::string v52 = (std::__shared_weak_count *)v50[v45 + 1];
        if (v52) {
          atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v52 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v48, (uint64_t)v51 + 160, 1.0);
      if (v52) {
        nitro::nitro_function::nitro_function(v52);
      }
      if (v49) {
        nitro::nitro_function::nitro_function(v49);
      }
      ++v46;
      std::string v44 = *a3;
      v45 += 2;
    }
    while (v46 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  float __B = v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v59[0] = (void **)v60;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v59);
}

void sub_1929A6974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      std::string::size_type v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      unint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        uint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      uint64_t v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        uint64_t v24 = (std::__shared_weak_count *)&v23[16 * v19];
        uint64_t v31 = v23;
        std::string::size_type v32 = v24;
        uint64_t v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        long long v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        long long v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    std::string::size_type v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::string::size_type v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      uint64_t v31 = 0;
      std::string::size_type v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929A6CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>::~wrapper_kernel(Espresso::generic_store_global_kernel *this)
{
  *(void *)this = &unk_1EE31E160;
  int v2 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_store_global_kernel::~generic_store_global_kernel((void **)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31E160;
  int v2 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_store_global_kernel::~generic_store_global_kernel((void **)this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FCB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::store_global_kernel_cpu,Espresso::store_global_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FCB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_35@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x198uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FB30;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  long long v12 = *(_OWORD *)(a2 + 24);
  long long v13 = *(_OWORD *)(a2 + 40);
  Espresso::load_global_kernel_cpu::load_global_kernel_cpu((uint64_t)(v6 + 24), a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)v6 + 3) = &unk_1EE31D7F8;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 48);
    *((void *)v6 + 47) = v7;
    *((void *)v6 + 48) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 47) = v7;
    *((void *)v6 + 48) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929A6FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::load_global_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_load_global_kernel::kernel_type_str(Espresso::generic_load_global_kernel *this)
{
  return "load_global";
}

BOOL wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v7 + 47);
    *((_OWORD *)v7 + 23) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 46);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      uint64_t v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 46) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        uint64_t v31 = (const std::string::value_type *)v40;
      }
      else {
        uint64_t v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      vDSP_Length v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      uint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929A7394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 360);
  v57[0] = *(void *)(a1 + 352);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 360);
  v56[0] = *(void *)(a1 + 352);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        unint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        uint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::load_global_kernel_cpu::__launch(v53, a2, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 368);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 376);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      uint64_t v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v22 + 360);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929A7AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      uint64_t v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        uint64_t v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      uint64_t v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929A7E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>::~wrapper_kernel(Espresso::generic_load_global_kernel *this)
{
  *(void *)this = &unk_1EE31D7F8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_load_global_kernel::~generic_load_global_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31D7F8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_load_global_kernel::~generic_load_global_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FB30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::load_global_kernel_cpu,Espresso::load_global_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FB30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_34@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x1B0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE3800E0;
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  long long v7 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v7;
  *((void *)v6 + 3) = &unk_1EE31FC08;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    std::string::size_type v10 = (std::__shared_weak_count *)*((void *)v6 + 51);
    *((void *)v6 + 50) = v8;
    *((void *)v6 + 51) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 50) = v8;
    *((void *)v6 + 51) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929A8124(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::dynamic_dequantize_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_dynamic_dequantize_kernel::kernel_type_str(Espresso::generic_dynamic_dequantize_kernel *this)
{
  return "dynamic_dequantize";
}

BOOL wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = a2;
  if (Espresso::generic_dynamic_dequantize_kernel::supports_weight_key(a1, a2)) {
    return 1;
  }
  int v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (v2[1] != 10) {
      return 0;
    }
    int v2 = (uint64_t *)*v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, unsigned char *a3, const void *a4, unint64_t a5)
{
  long long v7 = a3;
  __n128 result = Espresso::generic_dynamic_dequantize_kernel::__set_weight_raw_blob((char *)a1, a2, a3, a4, a5);
  int v10 = (char)v7[23];
  if (v10 < 0)
  {
    if (*((void *)v7 + 1) != 10) {
      return result;
    }
    long long v7 = *(unsigned char **)v7;
  }
  else if (v10 != 10)
  {
    return result;
  }
  if (*(void *)v7 == 0x6163735F74736F70 && *((_WORD *)v7 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v53, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    unint64_t v12 = (std::string::size_type *)(a1 + 392);
    std::string::size_type v13 = v53.__r_.__value_.__r.__words[0];
    uint64_t v14 = *(std::__shared_weak_count **)(a1 + 400);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
    if (v14)
    {
      nitro::nitro_function::nitro_function(v14);
      std::string::size_type v15 = *v12;
    }
    else
    {
      std::string::size_type v15 = v13;
    }
    if (a5 != 4 * *(int *)(v15 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v46, a5);
      uint64_t v18 = std::string::insert(&v46, 0, "Unexpected size s=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      uint64_t v20 = std::string::append(&v47, "/blob=");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v45, 4 * *(int *)(*v12 + 8));
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v22 = &v45;
      }
      else {
        unint64_t v22 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v45.__r_.__value_.__l.__size_;
      }
      long long v24 = std::string::append(&v48, (const std::string::value_type *)v22, size);
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v43, " @ ");
      if ((v44 & 0x80u) == 0) {
        std::string::size_type v26 = (const std::string::value_type *)v43;
      }
      else {
        std::string::size_type v26 = (const std::string::value_type *)v43[0];
      }
      if ((v44 & 0x80u) == 0) {
        std::string::size_type v27 = v44;
      }
      else {
        std::string::size_type v27 = v43[1];
      }
      std::__shared_count v28 = std::string::append(&v49, v26, v27);
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      uint64_t v30 = std::string::append(&v50, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, ":");
      if ((v42 & 0x80u) == 0) {
        vDSP_Length v32 = (const std::string::value_type *)v41;
      }
      else {
        vDSP_Length v32 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v33 = v42;
      }
      else {
        std::string::size_type v33 = v41[1];
      }
      int v34 = std::string::append(&v51, v32, v33);
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v40, 197);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v36 = &v40;
      }
      else {
        uint64_t v36 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v37 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v37 = v40.__r_.__value_.__l.__size_;
      }
      std::__shared_count v38 = std::string::append(&v52, (const std::string::value_type *)v36, v37);
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v53);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v16 = *(void **)(v15 + 16);
    return (char *)memcpy(v16, a4, a5);
  }
  return result;
}

void sub_1929A84E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 384);
  v57[0] = *(void *)(a1 + 376);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  int v10 = *(std::__shared_weak_count **)(a1 + 384);
  v56[0] = *(void *)(a1 + 376);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::string::size_type v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        uint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::dynamic_dequantize_kernel_cpu::__launch(v53, a2, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 392);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 400);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        std::string::size_type v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    std::string::size_type v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      long long v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 384);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929A8C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      uint64_t v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        long long v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      long long v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929A8F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>::~wrapper_kernel(Espresso::generic_dynamic_dequantize_kernel *this)
{
  *(void *)this = &unk_1EE31FC08;
  int v2 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_dynamic_dequantize_kernel::~generic_dynamic_dequantize_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31FC08;
  int v2 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_dynamic_dequantize_kernel::~generic_dynamic_dequantize_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3800E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::dynamic_dequantize_kernel_cpu,Espresso::dynamic_dequantize_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3800E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_33@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x158uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FF90;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  uint64_t v7 = *a2;
  *((void *)v6 + 3) = &unk_1EE31F318;
  *((void *)v6 + 38) = v7;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    int v10 = (std::__shared_weak_count *)*((void *)v6 + 40);
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929A9274(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::dynamic_quantize_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_dynamic_quantize_kernel::kernel_type_str(Espresso::generic_dynamic_quantize_kernel *this)
{
  return "dynamic_quantize";
}

BOOL wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v7 + 39);
    *((_OWORD *)v7 + 19) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 38);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      uint64_t v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 38) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      std::string::size_type v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        long long v31 = (const std::string::value_type *)v40;
      }
      else {
        long long v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929A9604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 296);
  v57[0] = *(void *)(a1 + 288);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 296);
  v56[0] = *(void *)(a1 + 288);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        uint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::dynamic_quantize_kernel_cpu::__launch((_DWORD *)v53, a2, (uint64_t **)v58, v59);
  uint64_t v23 = *(void *)(v53 + 304);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 312);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        std::string::size_type v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    std::string::size_type v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      long long v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 296);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929A9D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      uint64_t v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        long long v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      long long v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929AA0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31F318;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31F318;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FF90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::dynamic_quantize_kernel_cpu,Espresso::dynamic_quantize_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FF90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x158uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F1C8;
  uint64_t v7 = *a2;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE319BF8;
  v6[308] = BYTE4(v7);
  *((_DWORD *)v6 + 76) = v7;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    std::string::size_type v10 = (std::__shared_weak_count *)*((void *)v6 + 40);
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929AA398(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::alloc_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_alloc_kernel::kernel_type_str(Espresso::generic_alloc_kernel *this)
{
  return "alloc";
}

uint64_t Espresso::generic_alloc_kernel::has_dynamic_top_shape(Espresso::generic_alloc_kernel *this)
{
  return *((unsigned __int8 *)this + 284);
}

BOOL wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v7 + 39);
    *((_OWORD *)v7 + 19) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 38);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      uint64_t v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 38) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      std::string::size_type v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        long long v31 = (const std::string::value_type *)v40;
      }
      else {
        long long v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929AA730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void Espresso::generic_alloc_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v14 + 1) = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 284))
  {
    uint64_t v13 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v11 = 0u;
    *(void *)&long long v4 = 0x100000001;
    *((void *)&v4 + 1) = 0x100000001;
    long long v9 = v4;
    unint64_t v10 = 0xFFFFFFFF00000001;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t v5 = (char *)operator new(0x40uLL);
    *a3 = v5;
    a3[1] = v5;
    a3[2] = v5 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v9, &v14, (uint64_t)v5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v6 = a2[1];
    unint64_t v7 = ((char *)v6 - (char *)*a2) >> 6;
    int v8 = *a2;
    std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a3, v8, v6, v7);
  }
}

void sub_1929AA9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  *(void *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>::__launch(uint64_t a1, uint64_t *a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  long long v9 = *(std::__shared_weak_count **)(a1 + 296);
  v57[0] = *(void *)(a1 + 288);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  unint64_t v10 = *(std::__shared_weak_count **)(a1 + 296);
  v56[0] = *(void *)(a1 + 288);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  long long v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        uint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      long long v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::alloc_kernel_cpu::__launch(v53, a2, (uint64_t **)v58, v59);
  uint64_t v23 = *(void *)(v53 + 304);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 312);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        std::string::size_type v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    std::string::size_type v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      long long v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 296);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929AAFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      long long v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        long long v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      long long v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929AB338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE319BF8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE319BF8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F1C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::alloc_kernel_cpu,Espresso::alloc_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F1C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<D0>(uint64_t *a1@<X1>, int *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>,std::allocator<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_concat_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::allocate_shared[abi:ne180100]<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>,std::allocator<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_concat_params_t const&,void>(void *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = (char *)operator new(0x158uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FD98;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  int v7 = *a3;
  *((void *)v6 + 3) = &unk_1EE31E6C0;
  *((_DWORD *)v6 + 76) = v7;
  *((_WORD *)v6 + 154) = *((_WORD *)a3 + 2);
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    unint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 40);
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = 0;
  }
  *a1 = v6 + 24;
  a1[1] = v6;
}

void sub_1929AB658(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  int v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    long long v11 = (std::__shared_weak_count *)*((void *)v7 + 39);
    *((_OWORD *)v7 + 19) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 38);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      uint64_t v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 38) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      std::string::size_type v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        long long v31 = (const std::string::value_type *)v40;
      }
      else {
        long long v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929AB9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 296);
  v57[0] = *(void *)(a1 + 288);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 296);
  v56[0] = *(void *)(a1 + 288);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  long long v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        uint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      long long v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::general_concat_kernel_cpu::__launch(v53, v10, (uint64_t)v58, v59);
  uint64_t v23 = *(void *)(v53 + 304);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 312);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        std::string::size_type v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    std::string::size_type v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      long long v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 296);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929AC12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      long long v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        long long v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      long long v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929AC470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31E6C0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31E6C0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FD98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FD98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x168uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F430;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31AB88;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 42);
    *((void *)v6 + 41) = v7;
    *((void *)v6 + 42) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 41) = v7;
    *((void *)v6 + 42) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929AC764(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    long long v11 = (std::__shared_weak_count *)*((void *)v7 + 41);
    *((_OWORD *)v7 + 20) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 40);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      uint64_t v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 40) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      std::string::size_type v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        long long v31 = (const std::string::value_type *)v40;
      }
      else {
        long long v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929ACAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 312);
  v57[0] = *(void *)(a1 + 304);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 312);
  v56[0] = *(void *)(a1 + 304);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  long long v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        uint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      long long v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::gather_kernel_cpu::__launch((_DWORD *)v53, v10, (uint64_t **)v58, v59);
  uint64_t v23 = *(void *)(v53 + 320);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 328);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        std::string::size_type v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    std::string::size_type v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      long long v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 312);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929AD238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      long long v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        long long v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      long long v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929AD57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31AB88;
  int v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31AB88;
  int v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F430;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::gather_kernel_cpu,Espresso::gather_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x160uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F190;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 38) = *a2;
  *(void *)(v6 + 311) = *(void *)((char *)a2 + 7);
  *((void *)v6 + 3) = &unk_1EE319AA0;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 41);
    *((void *)v6 + 40) = v7;
    *((void *)v6 + 41) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 40) = v7;
    *((void *)v6 + 41) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929AD86C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 312);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 40);
    *(_OWORD *)(v7 + 312) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_1929ADBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 304);
  v57[0] = *(void *)(a1 + 296);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 304);
  v56[0] = *(void *)(a1 + 296);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        std::string::size_type v13 = &v59[0][2 * v12];
        std::__shared_count v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::topk_kernel_cpu::__launch(v53, a2, (uint64_t **)v58, v59);
  uint64_t v23 = *(void *)(v53 + 312);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 320);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 304);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929AE348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929AE68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE319AA0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE319AA0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F190;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::topk_kernel_cpu,Espresso::topk_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x158uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F938;
  uint64_t v7 = *a2;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31CB28;
  *((void *)v6 + 38) = v7;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 40);
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929AE974(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::get_shape_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_get_shape_kernel::kernel_type_str(Espresso::generic_get_shape_kernel *this)
{
  return "get_shape";
}

BOOL wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 39);
    *((_OWORD *)v7 + 19) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 38);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 38) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929AED04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 296);
  v57[0] = *(void *)(a1 + 288);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 296);
  v56[0] = *(void *)(a1 + 288);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        std::string::size_type v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::get_shape_kernel_cpu::__launch(v53, v10, (uint64_t **)v58, v59);
  uint64_t v23 = *(void *)(v53 + 304);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 312);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 296);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929AF45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      long long v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929AF7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31CB28;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31CB28;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F938;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::get_shape_kernel_cpu,Espresso::get_shape_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  long long v4 = (char *)operator new(0x158uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)long long v4 = &unk_1EE37F8C8;
  Espresso::base_kernel::base_kernel((uint64_t)(v4 + 24), a1);
  *((void *)v4 + 3) = &unk_1EE31C878;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    BOOL v7 = (std::__shared_weak_count *)*((void *)v4 + 40);
    *((void *)v4 + 39) = v5;
    *((void *)v4 + 40) = v6;
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
  }
  else
  {
    *((void *)v4 + 39) = v5;
    *((void *)v4 + 40) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v4 + 24);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1929AFA74(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_return_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_cf_return_kernel::kernel_type_str(Espresso::generic_cf_return_kernel *this)
{
  return "cf_return";
}

BOOL wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  BOOL v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 39);
    *((_OWORD *)v7 + 19) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 38);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 38) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929AFE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void Espresso::generic_cf_return_kernel::top_shapes_for_bottom_shapes(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>::__launch(uint64_t a1, void *a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v61, 0, sizeof(v61));
  memset(v60, 0, sizeof(v60));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 296);
  v59[0] = *(void *)(a1 + 288);
  v59[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>::convert_layer_data_to_fp32(v59, v61, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 296);
  v58[0] = *(void *)(a1 + 288);
  v58[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>::convert_layer_data_to_fp32(v58, v60, *a3, a3[1], 0, 0);
  uint64_t v55 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::string::size_type v13 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v14 = 0;
    do
    {
      if (!v8)
      {
        if (!((unsigned int (*)(std::__shared_weak_count *))v13[2 * v14]->__on_zero_shared_weak)(v13[2 * v14])
          || (uint64_t v11 = ((uint64_t (*)(std::__shared_weak_count *))(*a4)[2 * v14]->__on_zero_shared_weak)((*a4)[2 * v14]),
              v11 == 1))
        {
          LODWORD(__B) = (*a4)[2 * v14][4].__shared_weak_owners_;
          unint64_t v15 = &v61[0][2 * v14];
          long long v17 = (std::__shared_weak_count *)v15[1];
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v18 = *((void *)v16 + 20);
          uint64_t v19 = (std::__shared_weak_count *)*((void *)v16 + 21);
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v20 = 0;
          uint64_t v21 = *(float **)(v18 + 24);
          vDSP_Length v22 = *(int *)(v18 + 8);
          uint64_t v23 = v18 + 12;
          do
          {
            v22 *= *(int *)(v23 + v20);
            v20 += 4;
          }
          while (v20 != 12);
          vDSP_vsmul(v21, 1, (const float *)&__B, v21, 1, v22);
          if (v19) {
            nitro::nitro_function::nitro_function(v19);
          }
          if (v17) {
            nitro::nitro_function::nitro_function(v17);
          }
        }
      }
      ++v14;
      std::string::size_type v13 = *a4;
    }
    while (v14 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  Espresso::cf_return_kernel_cpu::__launch(v11, a2, v12, v61);
  uint64_t v24 = v55;
  uint64_t v25 = *(void *)(v55 + 304);
  if (v25)
  {
    std::string::size_type v26 = *(std::__shared_weak_count **)(v55 + 312);
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v27 = v60[0];
    if (*v60[0])
    {
      if (v28)
      {
        uint64_t v29 = (std::__shared_weak_count *)v27[1];
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      long long v28 = 0;
    }
    uint64_t v29 = 0;
LABEL_37:
    vDSP_Length v54 = v29;
    LODWORD(v30) = *(_DWORD *)(v25 + 8);
    if (v30 == 1)
    {
      uint64_t v31 = 0;
      uint64_t v32 = *((void *)v28 + 20);
      uint64_t v33 = *(float **)(v32 + 24);
      vDSP_Length v34 = *(int *)(v32 + 8);
      uint64_t v35 = v32 + 12;
      do
      {
        v34 *= *(int *)(v35 + v31);
        v31 += 4;
      }
      while (v31 != 12);
      vDSP_vsmul(v33, 1, *(const float **)(v25 + 16), v33, 1, v34);
    }
    else
    {
      int v36 = v28[4];
      if (v30 != v36) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v30, v36);
      }
      int v37 = v28[5];
      if (v37)
      {
        uint64_t v38 = 0;
        unint64_t v39 = 0;
        vDSP_Length v40 = v28[2] * (uint64_t)v28[3];
        vDSP_Length v56 = 4 * (int)v30 * v40;
        do
        {
          if (v30)
          {
            uint64_t v41 = 0;
            unint64_t v42 = 0;
            uint64_t v43 = v38;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v28 + 20) + 24) + v43), 1, (const float *)(*(void *)(v25 + 16) + v41), (float *)(*(void *)(*((void *)v28 + 20) + 24) + v43), 1, v40);
              ++v42;
              unint64_t v30 = v28[4];
              v41 += 4;
              v43 += 4 * v40;
            }
            while (v42 < v30);
            int v37 = v28[5];
          }
          ++v39;
          v38 += v56;
        }
        while (v39 < v37);
      }
    }
    if (v54) {
      nitro::nitro_function::nitro_function(v54);
    }
    uint64_t v24 = v55;
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
  }
  std::string v44 = *(std::__shared_weak_count **)(v24 + 296);
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v57 = v44;
  std::string v45 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v46 = 0;
    unint64_t v47 = 0;
    do
    {
      std::string v48 = v45[v46];
      if (v48)
      {
        if (v49)
        {
          std::string v50 = v45[v46 + 1];
          if (v50) {
            atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v49 = 0;
      }
      std::string v50 = 0;
LABEL_63:
      std::string v51 = v60[0];
      std::string v52 = v60[0][v46];
      if (v52
      {
        uint64_t v53 = (std::__shared_weak_count *)v51[v46 + 1];
        if (v53) {
          atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v53 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v49, (uint64_t)v52 + 160, 1.0);
      if (v53) {
        nitro::nitro_function::nitro_function(v53);
      }
      if (v50) {
        nitro::nitro_function::nitro_function(v50);
      }
      ++v47;
      std::string v45 = *a3;
      v46 += 2;
    }
    while (v47 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v57) {
    nitro::nitro_function::nitro_function(v57);
  }
  float __B = v60;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v60[0] = (void **)v61;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v60);
}

void sub_1929B056C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      uint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      unint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        int v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      unint64_t v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        uint64_t v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        uint64_t v24 = (std::__shared_weak_count *)&v23[16 * v19];
        uint64_t v31 = v23;
        uint64_t v32 = v24;
        vDSP_Length v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    uint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929B08B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31C878;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31C878;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F8C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_return_kernel_cpu,Espresso::cf_return_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F8C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x178uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F548;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  Espresso::cf_call_kernel_cpu::cf_call_kernel_cpu((void *)v6 + 3, a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)v6 + 3) = &unk_1EE31B240;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 44);
    *((void *)v6 + 43) = v7;
    *((void *)v6 + 44) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 43) = v7;
    *((void *)v6 + 44) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929B0BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_call_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_cf_call_kernel::kernel_type_str(Espresso::generic_cf_call_kernel *this)
{
  return "cf_call";
}

BOOL wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v7 + 43);
    *((_OWORD *)v7 + 21) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 42);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 42) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        uint64_t v31 = (const std::string::value_type *)v40;
      }
      else {
        uint64_t v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v35 = &v39;
      }
      else {
        uint64_t v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      int v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929B0F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>::__launch(uint64_t a1, void *a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 328);
  v57[0] = *(void *)(a1 + 320);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 328);
  v56[0] = *(void *)(a1 + 320);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        unint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::cf_call_kernel_cpu::__launch(v53, a2, (uint64_t *)v58, v59);
  uint64_t v23 = *(void *)(v53 + 336);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 344);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      uint64_t v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unint64_t v42 = *(std::__shared_weak_count **)(v22 + 328);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929B16D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      unint64_t v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        uint64_t v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      uint64_t v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929B1A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>::~wrapper_kernel(Espresso::generic_cf_call_kernel *this)
{
  *(void *)this = &unk_1EE31B240;
  int v2 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_cf_call_kernel::~generic_cf_call_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31B240;
  int v2 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_cf_call_kernel::~generic_cf_call_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F548;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_call_kernel_cpu,Espresso::cf_call_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x180uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F5B8;
  LODWORD(a2) = *a2;
  Espresso::generic_cf_jump_kernel::generic_cf_jump_kernel((void *)v6 + 3, a1);
  *((_DWORD *)v6 + 76) = a2;
  *((void *)v6 + 3) = &unk_1EE31B510;
  *((void *)v6 + 39) = &unk_1EE31B668;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 45);
    *((void *)v6 + 44) = v7;
    *((void *)v6 + 45) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 44) = v7;
    *((void *)v6 + 45) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929B1D1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>::~wrapper_kernel(void *a1)
{
  int v2 = (Espresso::generic_cf_jump_kernel *)(a1 - 36);
  *(a1 - 36) = &unk_1EE31B510;
  *a1 = &unk_1EE31B668;
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::generic_cf_jump_kernel::~generic_cf_jump_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_cf_jump_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  int v2 = (Espresso::generic_cf_jump_kernel *)(a1 - 36);
  *(a1 - 36) = &unk_1EE31B510;
  *a1 = &unk_1EE31B668;
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  Espresso::generic_cf_jump_kernel::~generic_cf_jump_kernel(v2);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_jump_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_cf_jump_kernel::kernel_type_str(Espresso::generic_cf_jump_kernel *this)
{
  return "cf_jump";
}

BOOL wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = (std::string::size_type *)(v7 + 344);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 44);
    *(_OWORD *)(v7 + 344) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_1929B21D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 336);
  v57[0] = *(void *)(a1 + 328);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 336);
  v56[0] = *(void *)(a1 + 328);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::cf_jump_kernel_cpu::__launch(v53, a2);
  uint64_t v23 = *(void *)(v53 + 344);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 352);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 336);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929B2928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      unint64_t v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929B2C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>::~wrapper_kernel(Espresso::generic_cf_jump_kernel *this)
{
  *(void *)this = &unk_1EE31B510;
  *((void *)this + 36) = &unk_1EE31B668;
  int v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_cf_jump_kernel::~generic_cf_jump_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31B510;
  *((void *)this + 36) = &unk_1EE31B668;
  int v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_cf_jump_kernel::~generic_cf_jump_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F5B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_jump_kernel_cpu,Espresso::cf_jump_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F5B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x188uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F890;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v11 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string __p = *(std::string *)(a2 + 24);
  }
  int v13 = *(_DWORD *)(a2 + 48);
  Espresso::cf_branch_kernel_cpu::cf_branch_kernel_cpu((uint64_t)(v6 + 24), a1, (uint64_t)&v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  *((void *)v6 + 3) = &unk_1EE31C720;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 46);
    *((void *)v6 + 45) = v7;
    *((void *)v6 + 46) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 45) = v7;
    *((void *)v6 + 46) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929B3018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cf_branch_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

const char *Espresso::generic_cf_branch_kernel::kernel_type_str(Espresso::generic_cf_branch_kernel *this)
{
  return "cf_branch";
}

BOOL wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string v11 = (std::__shared_weak_count *)*((void *)v7 + 45);
    *((_OWORD *)v7 + 22) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 44);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 44) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929B33D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>::__launch(uint64_t a1, uint64_t *a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v60, 0, sizeof(v60));
  memset(v59, 0, sizeof(v59));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 344);
  v58[0] = *(void *)(a1 + 336);
  v58[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>::convert_layer_data_to_fp32(v58, v60, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 344);
  v57[0] = *(void *)(a1 + 336);
  v57[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>::convert_layer_data_to_fp32(v57, v59, *a3, a3[1], 0, 0);
  uint64_t v54 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::string::size_type v12 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v13 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v12[2 * v13]->__on_zero_shared_weak)(v12[2 * v13])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v13]->__on_zero_shared_weak)((*a4)[2 * v13]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v13][4].__shared_weak_owners_;
        uint64_t v14 = v60[0] + 16 * v13;
        unint64_t v16 = *(std::__shared_weak_count **)(v14 + 8);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = *((void *)v15 + 20);
        long long v18 = (std::__shared_weak_count *)*((void *)v15 + 21);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v19 = 0;
        long long v20 = *(float **)(v17 + 24);
        vDSP_Length v21 = *(int *)(v17 + 8);
        uint64_t v22 = v17 + 12;
        do
        {
          v21 *= *(int *)(v22 + v19);
          v19 += 4;
        }
        while (v19 != 12);
        vDSP_vsmul(v20, 1, (const float *)&__B, v20, 1, v21);
        if (v18) {
          nitro::nitro_function::nitro_function(v18);
        }
        if (v16) {
          nitro::nitro_function::nitro_function(v16);
        }
      }
      ++v13;
      std::string::size_type v12 = *a4;
    }
    while (v13 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v23 = v54;
  Espresso::cf_branch_kernel_cpu::__launch(v54, a2, v11, v60);
  uint64_t v24 = *(void *)(v54 + 352);
  if (v24)
  {
    uint64_t v25 = *(std::__shared_weak_count **)(v54 + 360);
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v26 = v59[0];
    if (*v59[0])
    {
      if (v27)
      {
        long long v28 = (std::__shared_weak_count *)v26[1];
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      long long v27 = 0;
    }
    long long v28 = 0;
LABEL_37:
    uint64_t v53 = v28;
    LODWORD(v29) = *(_DWORD *)(v24 + 8);
    if (v29 == 1)
    {
      uint64_t v30 = 0;
      uint64_t v31 = *((void *)v27 + 20);
      std::string::size_type v32 = *(float **)(v31 + 24);
      vDSP_Length v33 = *(int *)(v31 + 8);
      uint64_t v34 = v31 + 12;
      do
      {
        v33 *= *(int *)(v34 + v30);
        v30 += 4;
      }
      while (v30 != 12);
      vDSP_vsmul(v32, 1, *(const float **)(v24 + 16), v32, 1, v33);
    }
    else
    {
      int v35 = v27[4];
      if (v29 != v35) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v29, v35);
      }
      int v36 = v27[5];
      if (v36)
      {
        uint64_t v37 = 0;
        unint64_t v38 = 0;
        vDSP_Length v39 = v27[2] * (uint64_t)v27[3];
        vDSP_Length v55 = 4 * (int)v29 * v39;
        do
        {
          if (v29)
          {
            uint64_t v40 = 0;
            unint64_t v41 = 0;
            uint64_t v42 = v37;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v27 + 20) + 24) + v42), 1, (const float *)(*(void *)(v24 + 16) + v40), (float *)(*(void *)(*((void *)v27 + 20) + 24) + v42), 1, v39);
              ++v41;
              unint64_t v29 = v27[4];
              v40 += 4;
              v42 += 4 * v39;
            }
            while (v41 < v29);
            int v36 = v27[5];
          }
          ++v38;
          v37 += v55;
        }
        while (v38 < v36);
      }
    }
    if (v53) {
      nitro::nitro_function::nitro_function(v53);
    }
    uint64_t v23 = v54;
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
  }
  unsigned __int8 v43 = *(std::__shared_weak_count **)(v23 + 344);
  if (v43) {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v56 = v43;
  std::string v44 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v45 = 0;
    unint64_t v46 = 0;
    do
    {
      std::string v47 = v44[v45];
      if (v47)
      {
        if (v48)
        {
          std::string v49 = v44[v45 + 1];
          if (v49) {
            atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v48 = 0;
      }
      std::string v49 = 0;
LABEL_63:
      std::string v50 = v59[0];
      std::string v51 = v59[0][v45];
      if (v51
      {
        std::string v52 = (std::__shared_weak_count *)v50[v45 + 1];
        if (v52) {
          atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v52 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v48, (uint64_t)v51 + 160, 1.0);
      if (v52) {
        nitro::nitro_function::nitro_function(v52);
      }
      if (v49) {
        nitro::nitro_function::nitro_function(v49);
      }
      ++v46;
      std::string v44 = *a3;
      v45 += 2;
    }
    while (v46 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  float __B = v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v59[0] = (void **)v60;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v59);
}

void sub_1929B3B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      std::string::size_type v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      unint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        uint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      uint64_t v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        uint64_t v24 = (std::__shared_weak_count *)&v23[16 * v19];
        uint64_t v31 = v23;
        std::string::size_type v32 = v24;
        uint64_t v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        long long v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        long long v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    std::string::size_type v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::string::size_type v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      uint64_t v31 = 0;
      std::string::size_type v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929B3E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>::~wrapper_kernel(Espresso::generic_cf_branch_kernel *this)
{
  *(void *)this = &unk_1EE31C720;
  int v2 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_cf_branch_kernel::~generic_cf_branch_kernel((void **)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31C720;
  int v2 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_cf_branch_kernel::~generic_cf_branch_kernel((void **)this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F890;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::cf_branch_kernel_cpu,Espresso::cf_branch_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x168uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE380150;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31FEC8;
  *((void *)v6 + 40) = *(void *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 42);
    *((void *)v6 + 41) = v7;
    *((void *)v6 + 42) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 41) = v7;
    *((void *)v6 + 42) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929B416C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v7 + 41);
    *((_OWORD *)v7 + 20) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 40);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      uint64_t v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 40) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        uint64_t v31 = (const std::string::value_type *)v40;
      }
      else {
        uint64_t v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      vDSP_Length v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      uint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929B44E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 312);
  v57[0] = *(void *)(a1 + 304);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 312);
  v56[0] = *(void *)(a1 + 304);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        unint64_t v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        uint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::spatial_transformer_kernel_cpu::__launch(v53, v10, v58, v59);
  uint64_t v23 = *(void *)(v53 + 320);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 328);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      uint64_t v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v22 + 312);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929B4C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      unint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      uint64_t v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        uint64_t v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      uint64_t v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929B4F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31FEC8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31FEC8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380150;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::spatial_transformer_kernel_cpu,Espresso::spatial_transformer_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x1A8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE380000;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31F5D0;
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((void *)v6 + 43) = 0;
  *((void *)v6 + 44) = 0;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 328) = *a2;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 50);
    *((void *)v6 + 49) = v7;
    *((void *)v6 + 50) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 49) = v7;
    *((void *)v6 + 50) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929B5280(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::generic_quantized_gather_kernel::get_f16_weights(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_quantized_gather_kernel::get_weights(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::generic_quantized_gather_kernel::get_biases(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::quantized_gather_params_t,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

const char *Espresso::generic_quantized_gather_kernel::kernel_type_str(Espresso::generic_quantized_gather_kernel *this)
{
  return "quantized_gather";
}

uint64_t wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>::supports_weight_key()
{
  return 1;
}

void wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  uint64_t v8 = a3;
  Espresso::quantized_gather_kernel_cpu::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  int v10 = *((char *)v8 + 23);
  if (v10 < 0)
  {
    if (v8[1] != 10) {
      return;
    }
    uint64_t v8 = (uint64_t *)*v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*v8 == 0x6163735F74736F70 && *((_WORD *)v8 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v54, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v12 = v54.__r_.__value_.__r.__words[0];
    unint64_t v13 = *(std::__shared_weak_count **)(a1 + 392);
    *(_OWORD *)(a1 + 384) = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
    if (v13)
    {
      nitro::nitro_function::nitro_function(v13);
      std::string::size_type v14 = *(void *)(a1 + 384);
    }
    else
    {
      std::string::size_type v14 = v12;
    }
    if (a5 != 4 * *(int *)(v14 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v17 = a5;
      uint64_t v18 = exception;
      std::to_string(&v47, v17);
      uint64_t v19 = std::string::insert(&v47, 0, "Unexpected size s=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      uint64_t v21 = std::string::append(&v48, "/blob=");
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v46, 4 * *(int *)(*(void *)(a1 + 384) + 8));
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &v46;
      }
      else {
        uint64_t v23 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v46.__r_.__value_.__l.__size_;
      }
      uint64_t v25 = std::string::append(&v49, (const std::string::value_type *)v23, size);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, " @ ");
      if ((v45 & 0x80u) == 0) {
        long long v27 = (const std::string::value_type *)v44;
      }
      else {
        long long v27 = (const std::string::value_type *)v44[0];
      }
      if ((v45 & 0x80u) == 0) {
        std::string::size_type v28 = v45;
      }
      else {
        std::string::size_type v28 = v44[1];
      }
      uint64_t v29 = std::string::append(&v50, v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      uint64_t v31 = std::string::append(&v51, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, ":");
      if ((v43 & 0x80u) == 0) {
        uint64_t v33 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v33 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v34 = v43;
      }
      else {
        std::string::size_type v34 = v42[1];
      }
      int v35 = std::string::append(&v52, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v41, 197);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v37 = &v41;
      }
      else {
        unint64_t v37 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = v41.__r_.__value_.__l.__size_;
      }
      uint64_t v39 = std::string::append(&v53, (const std::string::value_type *)v37, v38);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v18, &v54);
      __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::__shared_count v15 = *(void **)(v14 + 16);
    memcpy(v15, a4, a5);
  }
}

void sub_1929B55E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void Espresso::abstract_kernel_with_weights<Espresso::quantized_gather_params_t>::clear_weights(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = v2;
}

void wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 376);
  v57[0] = *(void *)(a1 + 368);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 376);
  v56[0] = *(void *)(a1 + 368);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        unint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::quantized_gather_kernel_cpu::__launch(v53, v10, (uint64_t **)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 384);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 392);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      long long v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      uint64_t v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v22 + 376);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929B5D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    uint64_t v8 = a3;
    long long v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        uint64_t v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      uint64_t v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929B60B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>::~wrapper_kernel(Espresso::generic_quantized_gather_kernel *this)
{
  *(void *)this = &unk_1EE31F5D0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE3613B8;
  long long v4 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  Espresso::generic_quantized_gather_kernel::~generic_quantized_gather_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE31F5D0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE3613B8;
  long long v4 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  Espresso::generic_quantized_gather_kernel::~generic_quantized_gather_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380000;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::quantized_gather_kernel_cpu,Espresso::quantized_gather_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x168uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F158;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE319948;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 42);
    *((void *)v6 + 41) = v7;
    *((void *)v6 + 42) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 41) = v7;
    *((void *)v6 + 42) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929B640C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v7 + 41);
    *((_OWORD *)v7 + 20) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 40);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      unint64_t v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 40) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        uint64_t v31 = (const std::string::value_type *)v40;
      }
      else {
        uint64_t v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929B6788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 312);
  v57[0] = *(void *)(a1 + 304);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 312);
  v56[0] = *(void *)(a1 + 304);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        unint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::tile_kernel_cpu::__launch(v53, a2, (uint64_t **)v58, v59);
  uint64_t v23 = *(void *)(v53 + 320);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 328);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      uint64_t v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v22 + 312);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929B6EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        uint64_t v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      uint64_t v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929B722C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE319948;
  int v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE319948;
  int v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F158;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::tile_kernel_cpu,Espresso::tile_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x168uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F970;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31CC80;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 42);
    *((void *)v6 + 41) = v7;
    *((void *)v6 + 42) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 41) = v7;
    *((void *)v6 + 42) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929B7520(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v7 + 41);
    *((_OWORD *)v7 + 20) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 40);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      unint64_t v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 40) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        uint64_t v31 = (const std::string::value_type *)v40;
      }
      else {
        uint64_t v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929B789C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 312);
  v57[0] = *(void *)(a1 + 304);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 312);
  v56[0] = *(void *)(a1 + 304);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        unint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::transpose_kernel_cpu::__launch((int *)v53, v10, (uint64_t)v58, v59);
  uint64_t v23 = *(void *)(v53 + 320);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 328);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      uint64_t v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v22 + 312);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929B7FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        uint64_t v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      uint64_t v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929B8338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31CC80;
  int v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31CC80;
  int v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F970;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::transpose_kernel_cpu,Espresso::transpose_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<D0>(uint64_t *a1@<X1>, int *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>,std::allocator<wrapper_kernel<Espresso::general_concat_kernel_cpu,Espresso::general_concat_params_t>>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_concat_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<D0>(uint64_t *a1@<X1>, int *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>,std::allocator<wrapper_kernel<Espresso::copy_kernel_cpu,Espresso::copy_params_t>>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x180uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F4A0;
  long long v11 = *a2;
  *(_OWORD *)unint64_t v12 = a2[1];
  *(_OWORD *)&v12[12] = *(long long *)((char *)a2 + 28);
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 19) = v11;
  *((_OWORD *)v6 + 20) = *(_OWORD *)v12;
  *(_OWORD *)(v6 + 329) = *(_OWORD *)&v12[9];
  *((void *)v6 + 3) = &unk_1EE31AE38;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 45);
    *((void *)v6 + 44) = v7;
    *((void *)v6 + 45) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 44) = v7;
    *((void *)v6 + 45) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929B86B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 344);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 44);
    *(_OWORD *)(v7 + 344) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_1929B8A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 336);
  v57[0] = *(void *)(a1 + 328);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 336);
  v56[0] = *(void *)(a1 + 328);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        std::string::size_type v13 = &v59[0][2 * v12];
        std::__shared_count v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::reduce_kernel_cpu::__launch(v53, v10, (uint64_t)v58, v59);
  uint64_t v23 = *(void *)(v53 + 344);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 352);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 336);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929B9184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929B94C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31AE38;
  int v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31AE38;
  int v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F4A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::reduce_kernel_cpu,Espresso::reduce_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F4A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x160uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F0B0;
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  long long v7 = *a2;
  *((void *)v6 + 3) = &unk_1EE319500;
  *((_OWORD *)v6 + 19) = v7;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 41);
    *((void *)v6 + 40) = v8;
    *((void *)v6 + 41) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 40) = v8;
    *((void *)v6 + 41) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929B97AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  long long v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 312);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 40);
    *(_OWORD *)(v7 + 312) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_1929B9B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 304);
  v57[0] = *(void *)(a1 + 296);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 304);
  v56[0] = *(void *)(a1 + 296);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::crop_kernel_cpu::__launch(v53, v10, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 312);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 320);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 304);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929BA280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929BA5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE319500;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE319500;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F0B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::crop_kernel_cpu,Espresso::crop_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F0B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x168uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F270;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31A020;
  *((void *)v6 + 40) = *(void *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 42);
    *((void *)v6 + 41) = v7;
    *((void *)v6 + 42) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 41) = v7;
    *((void *)v6 + 42) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929BA8B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 41);
    *((_OWORD *)v7 + 20) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 40);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 40) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929BAC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 312);
  v57[0] = *(void *)(a1 + 304);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 312);
  v56[0] = *(void *)(a1 + 304);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        unint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::slice_kernel_cpu::__launch(v53, v10, (uint64_t **)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 320);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 328);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 312);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929BB38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929BB6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31A020;
  int v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31A020;
  int v2 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F270;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::slice_kernel_cpu,Espresso::slice_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x160uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FE08;
  Espresso::base_kernel::base_kernel((uint64_t)v6 + 24, a1);
  *((void *)v6 + 38) = *(void *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  *((void *)v6 + 3) = &unk_1EE31E9B0;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 41);
    *((void *)v6 + 40) = v7;
    *((void *)v6 + 41) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 40) = v7;
    *((void *)v6 + 41) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929BB9BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 312);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 40);
    *(_OWORD *)(v7 + 312) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_1929BBD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 304);
  v57[0] = *(void *)(a1 + 296);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 304);
  v56[0] = *(void *)(a1 + 296);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        std::string::size_type v13 = &v59[0][2 * v12];
        std::__shared_count v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::space_to_depth_kernel_cpu::__launch((_DWORD *)v53, v10, (uint64_t **)v58, v59);
  uint64_t v23 = *(void *)(v53 + 312);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 320);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 304);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929BC490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      std::string::size_type v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929BC7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31E9B0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31E9B0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FE08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::space_to_depth_kernel_cpu,Espresso::space_to_depth_params_t>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FE08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x198uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F820;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31C418;
  long long v7 = *a2;
  *((_OWORD *)v6 + 20) = a2[1];
  long long v8 = a2[3];
  *((_OWORD *)v6 + 21) = a2[2];
  *((_OWORD *)v6 + 22) = v8;
  *((void *)v6 + 46) = *((void *)a2 + 8);
  *((_OWORD *)v6 + 19) = v7;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v6 + 48);
    *((void *)v6 + 47) = v9;
    *((void *)v6 + 48) = v10;
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
  }
  else
  {
    *((void *)v6 + 47) = v9;
    *((void *)v6 + 48) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929BCAE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  long long v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 47);
    *((_OWORD *)v7 + 23) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 46);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 46) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929BCE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 360);
  v57[0] = *(void *)(a1 + 352);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 360);
  v56[0] = *(void *)(a1 + 352);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        unint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::upsample_kernel_cpu::__launch(v53, v10, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 368);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 376);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 360);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929BD5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929BD8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31C418;
  int v2 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31C418;
  int v2 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F820;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::upsample_kernel_cpu,Espresso::upsample_kernel_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x1A0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FE40;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  long long v7 = a2[3];
  *((_OWORD *)v6 + 21) = a2[2];
  *((_OWORD *)v6 + 22) = v7;
  *(_OWORD *)(v6 + 364) = *(_OWORD *)((char *)a2 + 60);
  long long v8 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v8;
  *((void *)v6 + 3) = &unk_1EE31EB08;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v6 + 49);
    *((void *)v6 + 48) = v9;
    *((void *)v6 + 49) = v10;
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
  }
  else
  {
    *((void *)v6 + 48) = v9;
    *((void *)v6 + 49) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929BDBF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  long long v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v10 = (std::string::size_type *)(v7 + 376);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 48);
    *(_OWORD *)(v7 + 376) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_1929BDF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 368);
  v57[0] = *(void *)(a1 + 360);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 368);
  v56[0] = *(void *)(a1 + 360);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::general_padding_kernel_cpu::__launch(v53, v10, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 376);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 384);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 368);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929BE6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929BEA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31EB08;
  int v2 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31EB08;
  int v2 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FE40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::general_padding_kernel_cpu,Espresso::general_padding_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FE40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x1D8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F858;
  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31C570;
  *((void *)v6 + 51) = 0;
  *((void *)v6 + 52) = 0;
  *((void *)v6 + 53) = 0;
  *((void *)v6 + 54) = 0;
  long long v7 = a2[3];
  *(_OWORD *)(v6 + 360) = a2[2];
  *(_OWORD *)(v6 + 376) = v7;
  long long v8 = a2[1];
  *(_OWORD *)(v6 + 328) = *a2;
  *(_OWORD *)(v6 + 344) = v8;
  *(_OWORD *)(v6 + 388) = *(_OWORD *)((char *)a2 + 60);
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v6 + 56);
    *((void *)v6 + 55) = v9;
    *((void *)v6 + 56) = v10;
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
  }
  else
  {
    *((void *)v6 + 55) = v9;
    *((void *)v6 + 56) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929BED10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>::supports_weight_key(uint64_t a1, void *a2)
{
  int v2 = a2;
  if (Espresso::generic_batchnorm_kernel::supports_weight_key(a1, a2)) {
    return 1;
  }
  int v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (v2[1] != 10) {
      return 0;
    }
    int v2 = (void *)*v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

void wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  uint64_t v8 = a3;
  Espresso::generic_batchnorm_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  int v10 = *(char *)(v8 + 23);
  if (v10 < 0)
  {
    if (*(void *)(v8 + 8) != 10) {
      return;
    }
    uint64_t v8 = *(void *)v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*(void *)v8 == 0x6163735F74736F70 && *(_WORD *)(v8 + 8) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v54, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v12 = v54.__r_.__value_.__r.__words[0];
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 440);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
    if (v13)
    {
      nitro::nitro_function::nitro_function(v13);
      std::string::size_type v14 = *(void *)(a1 + 432);
    }
    else
    {
      std::string::size_type v14 = v12;
    }
    if (a5 != 4 * *(int *)(v14 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v17 = a5;
      uint64_t v18 = exception;
      std::to_string(&v47, v17);
      uint64_t v19 = std::string::insert(&v47, 0, "Unexpected size s=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      uint64_t v21 = std::string::append(&v48, "/blob=");
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v46, 4 * *(int *)(*(void *)(a1 + 432) + 8));
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &v46;
      }
      else {
        uint64_t v23 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v46.__r_.__value_.__l.__size_;
      }
      uint64_t v25 = std::string::append(&v49, (const std::string::value_type *)v23, size);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, " @ ");
      if ((v45 & 0x80u) == 0) {
        long long v27 = (const std::string::value_type *)v44;
      }
      else {
        long long v27 = (const std::string::value_type *)v44[0];
      }
      if ((v45 & 0x80u) == 0) {
        std::string::size_type v28 = v45;
      }
      else {
        std::string::size_type v28 = v44[1];
      }
      uint64_t v29 = std::string::append(&v50, v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v31 = std::string::append(&v51, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, ":");
      if ((v43 & 0x80u) == 0) {
        uint64_t v33 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v33 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v34 = v43;
      }
      else {
        std::string::size_type v34 = v42[1];
      }
      int v35 = std::string::append(&v52, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v41, 197);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v37 = &v41;
      }
      else {
        unint64_t v37 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = v41.__r_.__value_.__l.__size_;
      }
      uint64_t v39 = std::string::append(&v53, (const std::string::value_type *)v37, v38);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v18, &v54);
      __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::__shared_count v15 = *(void **)(v14 + 16);
    memcpy(v15, a4, a5);
  }
}

void sub_1929BF0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 424);
  v57[0] = *(void *)(a1 + 416);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 424);
  v56[0] = *(void *)(a1 + 416);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        unint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::batchnorm_kernel_cpu::__launch(v53, v10, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 432);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 440);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      long long v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 424);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929BF818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    uint64_t v8 = a3;
    long long v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929BFB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>::~wrapper_kernel(Espresso::generic_batchnorm_kernel *this)
{
  *(void *)this = &unk_1EE31C570;
  int v2 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE3507D8;
  int v4 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE31C570;
  int v2 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE3507D8;
  int v4 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F858;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::batchnorm_kernel_cpu,Espresso::batchnorm_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x1E0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F9A8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31CDD8;
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((_OWORD *)v6 + 27) = 0u;
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 344) = v7;
  *((_DWORD *)v6 + 90) = *(_DWORD *)(a2 + 32);
  *((void *)v6 + 46) = 0;
  *((void *)v6 + 47) = 0;
  *((_OWORD *)v6 + 29) = 0u;
  *((_OWORD *)v6 + 28) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 57);
    *((void *)v6 + 56) = v8;
    *((void *)v6 + 57) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 56) = v8;
    *((void *)v6 + 57) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929BFED8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>::supports_weight_key(uint64_t a1, void *a2)
{
  int v2 = a2;
  if (Espresso::generic_activation_kernel::supports_weight_key(a1, a2)) {
    return 1;
  }
  int v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (v2[1] != 10) {
      return 0;
    }
    int v2 = (void *)*v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  long long v7 = a3;
  __n128 result = Espresso::generic_activation_kernel::__set_weight_raw_blob((char *)a1, a2, a3, a4, a5);
  int v10 = *((char *)v7 + 23);
  if (v10 < 0)
  {
    if (v7[1] != 10) {
      return result;
    }
    long long v7 = (uint64_t *)*v7;
  }
  else if (v10 != 10)
  {
    return result;
  }
  if (*v7 == 0x6163735F74736F70 && *((_WORD *)v7 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v53, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    unint64_t v12 = (std::string::size_type *)(a1 + 440);
    std::string::size_type v13 = v53.__r_.__value_.__r.__words[0];
    std::string::size_type v14 = *(std::__shared_weak_count **)(a1 + 448);
    *(_OWORD *)(a1 + 440) = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
    if (v14)
    {
      nitro::nitro_function::nitro_function(v14);
      std::string::size_type v15 = *v12;
    }
    else
    {
      std::string::size_type v15 = v13;
    }
    if (a5 != 4 * *(int *)(v15 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v46, a5);
      uint64_t v18 = std::string::insert(&v46, 0, "Unexpected size s=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      uint64_t v20 = std::string::append(&v47, "/blob=");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v45, 4 * *(int *)(*v12 + 8));
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v22 = &v45;
      }
      else {
        unint64_t v22 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v45.__r_.__value_.__l.__size_;
      }
      long long v24 = std::string::append(&v48, (const std::string::value_type *)v22, size);
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v43, " @ ");
      if ((v44 & 0x80u) == 0) {
        long long v26 = (const std::string::value_type *)v43;
      }
      else {
        long long v26 = (const std::string::value_type *)v43[0];
      }
      if ((v44 & 0x80u) == 0) {
        std::string::size_type v27 = v44;
      }
      else {
        std::string::size_type v27 = v43[1];
      }
      std::__shared_count v28 = std::string::append(&v49, v26, v27);
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      uint64_t v30 = std::string::append(&v50, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, ":");
      if ((v42 & 0x80u) == 0) {
        vDSP_Length v32 = (const std::string::value_type *)v41;
      }
      else {
        vDSP_Length v32 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v33 = v42;
      }
      else {
        std::string::size_type v33 = v41[1];
      }
      int v34 = std::string::append(&v51, v32, v33);
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v40, 197);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v36 = &v40;
      }
      else {
        uint64_t v36 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v37 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v37 = v40.__r_.__value_.__l.__size_;
      }
      std::__shared_count v38 = std::string::append(&v52, (const std::string::value_type *)v36, v37);
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v53);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v16 = *(void **)(v15 + 16);
    return (char *)memcpy(v16, a4, a5);
  }
  return result;
}

void sub_1929C0288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 432);
  v57[0] = *(void *)(a1 + 424);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 432);
  v56[0] = *(void *)(a1 + 424);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::string::size_type v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        unint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::activation_kernel_cpu::__launch(v53, v10, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 440);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 448);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        std::string::size_type v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      long long v26 = 0;
    }
    std::string::size_type v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      long long v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 432);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929C09E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    uint64_t v8 = a3;
    long long v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        long long v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      long long v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929C0D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>::~wrapper_kernel(Espresso::generic_activation_kernel *this)
{
  *(void *)this = &unk_1EE31CDD8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 56);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE353E58;
  int v4 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE31CDD8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 56);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE353E58;
  int v4 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F9A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::activation_kernel_cpu,Espresso::activation_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F9A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x178uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F6D0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31BC08;
  long long v7 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((void *)v6 + 42) = *(void *)(a2 + 32);
  *((_OWORD *)v6 + 20) = v7;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 44);
    *((void *)v6 + 43) = v8;
    *((void *)v6 + 44) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 43) = v8;
    *((void *)v6 + 44) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929C1088(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  long long v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 43);
    *((_OWORD *)v7 + 21) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 42);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      unint64_t v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 42) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      std::string::size_type v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        long long v31 = (const std::string::value_type *)v40;
      }
      else {
        long long v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929C1404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 328);
  v57[0] = *(void *)(a1 + 320);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v10 = *(std::__shared_weak_count **)(a1 + 328);
  v56[0] = *(void *)(a1 + 320);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        unint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::reshape_kernel_cpu::__launch(v53, a2, (uint64_t **)v58, v59);
  uint64_t v23 = *(void *)(v53 + 336);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 344);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        std::string::size_type v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    std::string::size_type v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      long long v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 328);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929C1B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        long long v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      long long v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929C1EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31BC08;
  int v2 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31BC08;
  int v2 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F6D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::reshape_kernel_cpu,Espresso::reshape_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F6D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x190uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F350;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  long long v7 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v7;
  *((_OWORD *)v6 + 21) = a2[2];
  *(_OWORD *)(v6 + 349) = *(_OWORD *)((char *)a2 + 45);
  *((void *)v6 + 3) = &unk_1EE31A5A0;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    std::string::size_type v10 = (std::__shared_weak_count *)*((void *)v6 + 47);
    *((void *)v6 + 46) = v8;
    *((void *)v6 + 47) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 46) = v8;
    *((void *)v6 + 47) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929C21A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

char *wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>::__set_weight_raw_blob(char *result, uint64_t a2, uint64_t *a3, const void *a4, unint64_t a5)
{
  long long v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = (std::string::size_type *)(v7 + 360);
    std::string::size_type v11 = v51.__r_.__value_.__r.__words[0];
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 46);
    *(_OWORD *)(v7 + 360) = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      std::string::size_type v13 = *v10;
    }
    else
    {
      std::string::size_type v13 = v11;
    }
    if (a5 != 4 * *(int *)(v13 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v44, a5);
      unint64_t v16 = std::string::insert(&v44, 0, "Unexpected size s=");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v45, "/blob=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, 4 * *(int *)(*v10 + 8));
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = &v43;
      }
      else {
        uint64_t v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      unint64_t v22 = std::string::append(&v46, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, " @ ");
      if ((v42 & 0x80u) == 0) {
        long long v24 = (const std::string::value_type *)v41;
      }
      else {
        long long v24 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v25 = v42;
      }
      else {
        std::string::size_type v25 = v41[1];
      }
      std::string::size_type v26 = std::string::append(&v47, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::__shared_count v28 = std::string::append(&v48, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, ":");
      if ((v40 & 0x80u) == 0) {
        uint64_t v30 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v30 = (const std::string::value_type *)v39[0];
      }
      if ((v40 & 0x80u) == 0) {
        std::string::size_type v31 = v40;
      }
      else {
        std::string::size_type v31 = v39[1];
      }
      vDSP_Length v32 = std::string::append(&v49, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v38, 197);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v38;
      }
      else {
        int v34 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v38.__r_.__value_.__l.__size_;
      }
      uint64_t v36 = std::string::append(&v50, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string::size_type v14 = *(void **)(v13 + 16);
    return (char *)memcpy(v14, a4, a5);
  }
  return result;
}

void sub_1929C251C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 352);
  v57[0] = *(void *)(a1 + 344);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 352);
  v56[0] = *(void *)(a1 + 344);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        std::__shared_count v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::concat_kernel_cpu::__launch(v53, v10, (uint64_t **)v58, v59);
  uint64_t v23 = *(void *)(v53 + 360);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 368);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 352);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  std::string v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929C2C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929C2FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31A5A0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31A5A0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F350;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::concat_kernel_cpu,Espresso::concat_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x188uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F740;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31BEB8;
  *((_DWORD *)v6 + 83) = 0;
  *((void *)v6 + 43) = 0;
  *((void *)v6 + 44) = 0;
  *((void *)v6 + 42) = 0;
  *((_OWORD *)v6 + 19) = *a2;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)((char *)a2 + 12);
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 46);
    *((void *)v6 + 45) = v7;
    *((void *)v6 + 46) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 45) = v7;
    *((void *)v6 + 46) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929C32B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void Espresso::softmax_kernel_cpu::__reset_temporal_state(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 320);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

void *wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 45);
    *((_OWORD *)v7 + 22) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 44);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 44) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929C364C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 344);
  v57[0] = *(void *)(a1 + 336);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 344);
  v56[0] = *(void *)(a1 + 336);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = &v59[0][2 * v12];
        unint64_t v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::softmax_kernel_cpu::__launch(v53, v10, (uint64_t)v58, v59);
  uint64_t v23 = *(void *)(v53 + 352);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 360);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 344);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929C3DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929C40E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31BEB8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE34ECE0;
  int v4 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE31BEB8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE34ECE0;
  int v4 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F740;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::softmax_kernel_cpu,Espresso::softmax_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x158uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F628;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  uint64_t v7 = *a2;
  *((void *)v6 + 3) = &unk_1EE31B800;
  *((void *)v6 + 38) = v7;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 40);
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 39) = v8;
    *((void *)v6 + 40) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929C4420(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 39);
    *((_OWORD *)v7 + 19) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 38);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 38) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929C479C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 296);
  v57[0] = *(void *)(a1 + 288);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 296);
  v56[0] = *(void *)(a1 + 288);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        unint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::flatten_kernel_cpu::__launch(v53, v10, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 304);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 312);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 296);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929C4EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929C5238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31B800;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31B800;
  int v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F628;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::flatten_kernel_cpu,Espresso::flatten_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37F628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x188uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37FAC0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE31D548;
  long long v7 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 88) = *(_DWORD *)(a2 + 48);
  *((_OWORD *)v6 + 20) = v7;
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 46);
    *((void *)v6 + 45) = v8;
    *((void *)v6 + 46) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 45) = v8;
    *((void *)v6 + 46) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929C5540(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  long long v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)v7 + 45);
    *((_OWORD *)v7 + 22) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 44);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      long long v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 44) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      long long v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v31 = (const std::string::value_type *)v40;
      }
      else {
        std::string::size_type v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v35 = &v39;
      }
      else {
        int v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929C58BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 344);
  v57[0] = *(void *)(a1 + 336);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 344);
  v56[0] = *(void *)(a1 + 336);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string::size_type v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        unint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      std::string::size_type v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::elementwise_kernel_cpu::__launch(v53, v10, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 352);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 360);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        long long v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    long long v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  unsigned __int8 v42 = *(std::__shared_weak_count **)(v22 + 344);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929C6014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      std::string::size_type v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929C6358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>::~wrapper_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE31D548;
  int v2 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE31D548;
  int v2 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FAC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<Espresso::elementwise_kernel_cpu,Espresso::elementwise_params>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37FAC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x450uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37EFD0;
  Espresso::inner_product_kernel_cpu::inner_product_kernel_cpu((uint64_t)v6 + 24, a1, v7, a2);
  *((_OWORD *)v6 + 66) = 0u;
  *((_OWORD *)v6 + 65) = 0u;
  *((_OWORD *)v6 + 63) = 0u;
  *((_OWORD *)v6 + 64) = 0u;
  *((_OWORD *)v6 + 61) = 0u;
  *((_OWORD *)v6 + 62) = 0u;
  *((void *)v6 + 3) = &unk_1EE318E80;
  *((_OWORD *)v6 + 67) = 0u;
  *((_OWORD *)v6 + 68) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 135);
    *((void *)v6 + 134) = v8;
    *((void *)v6 + 135) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 134) = v8;
    *((void *)v6 + 135) = 0;
  }
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929C6654(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>::supports_weight_key(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>::supports_weight_key(a1, a2))return 1; {
  int v4 = *(char *)(v2 + 23);
  }
  if (v4 < 0)
  {
    if (*(void *)(v2 + 8) != 10) {
      return 0;
    }
    uint64_t v2 = *(void *)v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *(void *)v2 == 0x6163735F74736F70 && *(_WORD *)(v2 + 8) == 25964;
}

uint64_t wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>::supports_weight_key(uint64_t a1, uint64_t a2)
{
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    int v2 = *(unsigned __int8 *)(a2 + 23);
    HIDWORD(v3) = v2;
    LODWORD(v3) = (v2 << 24) - 0x4000000;
    switch((v3 >> 25))
    {
      case 0u:
        if (*(_DWORD *)a2 == 944987991) {
          return 1;
        }
        if (v2 == 8) {
          goto LABEL_14;
        }
        if (v2 == 18) {
          goto LABEL_17;
        }
        if (v2 != 10) {
          return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
        }
LABEL_7:
        if (*(void *)a2 == 0x6163735F74736F70 && *(_WORD *)(a2 + 8) == 25964) {
          return 1;
        }
        if (v2 == 18) {
          goto LABEL_17;
        }
        uint64_t v5 = a2;
        if (v2 == 10) {
          goto LABEL_46;
        }
        if (v2 != 8) {
          return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
        }
LABEL_14:
        if (*(void *)a2 == 0x736169625F656E61) {
          return 1;
        }
        uint64_t v5 = a2;
        if (v2 == 10) {
          goto LABEL_46;
        }
        if (v2 != 18) {
          return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
        }
LABEL_17:
        if (*(void *)a2 == 0x5F6363615F656E61
          && *(void *)(a2 + 8) == 0x6968735F73616962
          && *(_WORD *)(a2 + 16) == 29798)
        {
          return 1;
        }
        uint64_t v5 = a2;
        if (v2 != 10) {
          return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
        }
        goto LABEL_46;
      case 2u:
        goto LABEL_14;
      case 3u:
        goto LABEL_7;
      case 7u:
        goto LABEL_17;
      default:
        return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
    }
  }
  uint64_t v8 = *(void *)(a2 + 8);
  *((void *)&v9 + 1) = v8;
  *(void *)&long long v9 = v8 - 4;
  switch((unint64_t)(v9 >> 1))
  {
    case 0uLL:
      if (**(_DWORD **)a2 != 944987991) {
        return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
      }
      return 1;
    case 2uLL:
      goto LABEL_34;
    case 3uLL:
      if (**(void **)a2 == 0x6163735F74736F70 && *(_WORD *)(*(void *)a2 + 8) == 25964) {
        return 1;
      }
      if (v8 != 8) {
        goto LABEL_35;
      }
LABEL_34:
      if (**(void **)a2 == 0x736169625F656E61) {
        return 1;
      }
LABEL_35:
      if (v8 == 10) {
        goto LABEL_45;
      }
      if (v8 != 18) {
        return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
      }
LABEL_37:
      if (**(void **)a2 == 0x5F6363615F656E61
        && *(void *)(*(void *)a2 + 8) == 0x6968735F73616962
        && *(_WORD *)(*(void *)a2 + 16) == 29798)
      {
        return 1;
      }
      if (v8 != 10) {
        return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
      }
LABEL_45:
      uint64_t v5 = *(void *)a2;
LABEL_46:
      uint64_t v13 = *(void *)v5;
      int v14 = *(unsigned __int16 *)(v5 + 8);
      if (v13 == 0x61727478655F7868 && v14 == 26207) {
        return 1;
      }
      else {
        return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
      }
    case 7uLL:
      goto LABEL_37;
    default:
      return Espresso::inner_product_kernel_cpu::supports_weight_key(a1, a2);
  }
}

void wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>::__set_weights_finalize(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 544);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 552);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2)
  {
    if (*(void *)(a1 + 968)) {
      goto LABEL_45;
    }
    if (!*(void *)(a1 + 984))
    {
      if (*(void *)(a1 + 952))
      {
        uint64_t v11 = *(void *)(a1 + 1000);
        if (v11)
        {
          float v12 = **(float **)(v11 + 16);
          uint64_t v13 = *(std::__shared_weak_count **)(a1 + 960);
          v22[0] = *(void *)(a1 + 952);
          v22[1] = v13;
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v21[0] = v2;
          v21[1] = (uint64_t)v3;
          if (v3) {
            atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::ane_style_post_scale_bias((uint64_t)v22, v21, (uint64_t)&v23, v12);
          if (v3) {
            nitro::nitro_function::nitro_function(v3);
          }
          if (v13) {
            nitro::nitro_function::nitro_function(v13);
          }
          std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v20, 1, 1, 1, 1);
          uint64_t v14 = v20;
          std::__shared_count v15 = *(std::__shared_weak_count **)(a1 + 992);
          *(_OWORD *)(a1 + 984) = v20;
          if (v15)
          {
            nitro::nitro_function::nitro_function(v15);
            uint64_t v16 = *(void *)(a1 + 984);
          }
          else
          {
            uint64_t v16 = v14;
          }
          **(_DWORD **)(v16 + 16) = v27;
          uint64_t v18 = v25;
          long long v17 = v26;
          if (v26) {
            atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)(a1 + 968) = v18;
          uint64_t v19 = *(std::__shared_weak_count **)(a1 + 976);
          *(void *)(a1 + 976) = v17;
          if (v19) {
            nitro::nitro_function::nitro_function(v19);
          }
          if (v26) {
            nitro::nitro_function::nitro_function(v26);
          }
          if (v24) {
            nitro::nitro_function::nitro_function(v24);
          }
          if (*(void *)(a1 + 968))
          {
LABEL_45:
            if (*(void *)(a1 + 984))
            {
              uint64_t v4 = *(void *)(a1 + 952);
              if (v4)
              {
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v23, *(_DWORD *)(v4 + 8), 1, 1, 1);
                uint64_t v5 = v23;
                if (*(_DWORD *)(v23 + 8))
                {
                  unint64_t v6 = 0;
                  do
                  {
                    double v7 = *(float *)(*(void *)(*(void *)(a1 + 968) + 16) + 4 * v6);
                    float v8 = ldexp(1.0, **(_DWORD **)(*(void *)(a1 + 984) + 16)) * v7;
                    *(float *)(*(void *)(v5 + 16) + 4 * v6++) = v8;
                  }
                  while (v6 < *(unsigned int *)(v5 + 8));
                }
                long long v9 = v24;
                if (v24) {
                  atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                *(void *)(a1 + 1032) = v5;
                uint64_t v10 = *(std::__shared_weak_count **)(a1 + 1040);
                *(void *)(a1 + 1040) = v9;
                if (v10) {
                  nitro::nitro_function::nitro_function(v10);
                }
                if (v9) {
                  nitro::nitro_function::nitro_function(v9);
                }
              }
            }
          }
        }
      }
    }
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

void sub_1929C6BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  Espresso::dropout_augment_lowmem::ret_t::~ret_t((Espresso::dropout_augment_lowmem::ret_t *)va);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  _Unwind_Resume(a1);
}

void sub_1929C6C0C()
{
  if (!v0) {
    JUMPOUT(0x1929C6BE8);
  }
  JUMPOUT(0x1929C6BE0);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, unint64_t a5, uint64_t *a6)
{
  uint64_t v8 = a3;
  wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  int v10 = *(char *)(v8 + 23);
  if (v10 < 0)
  {
    if (*(void *)(v8 + 8) != 10) {
      return;
    }
    uint64_t v8 = *(void *)v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*(void *)v8 == 0x6163735F74736F70 && *(_WORD *)(v8 + 8) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v53, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    uint64_t v12 = a1 + 1064;
    std::string::size_type v13 = v53.__r_.__value_.__r.__words[0];
    uint64_t v14 = *(std::__shared_weak_count **)(a1 + 1072);
    *(_OWORD *)(a1 + 1064) = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
    if (v14)
    {
      nitro::nitro_function::nitro_function(v14);
      std::string::size_type v15 = *(void *)v12;
    }
    else
    {
      std::string::size_type v15 = v13;
    }
    if (a5 != 4 * *(int *)(v15 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v46, a5);
      uint64_t v18 = std::string::insert(&v46, 0, "Unexpected size s=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      long long v20 = std::string::append(&v47, "/blob=");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v45, 4 * *(int *)(*(void *)v12 + 8));
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v22 = &v45;
      }
      else {
        unint64_t v22 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v45.__r_.__value_.__l.__size_;
      }
      long long v24 = std::string::append(&v48, (const std::string::value_type *)v22, size);
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v43, " @ ");
      if ((v44 & 0x80u) == 0) {
        std::string::size_type v26 = (const std::string::value_type *)v43;
      }
      else {
        std::string::size_type v26 = (const std::string::value_type *)v43[0];
      }
      if ((v44 & 0x80u) == 0) {
        std::string::size_type v27 = v44;
      }
      else {
        std::string::size_type v27 = v43[1];
      }
      std::__shared_count v28 = std::string::append(&v49, v26, v27);
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      uint64_t v30 = std::string::append(&v50, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v41, ":");
      if ((v42 & 0x80u) == 0) {
        vDSP_Length v32 = (const std::string::value_type *)v41;
      }
      else {
        vDSP_Length v32 = (const std::string::value_type *)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v33 = v42;
      }
      else {
        std::string::size_type v33 = v41[1];
      }
      int v34 = std::string::append(&v51, v32, v33);
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v40, 197);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v36 = &v40;
      }
      else {
        uint64_t v36 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v37 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v37 = v40.__r_.__value_.__l.__size_;
      }
      std::__shared_count v38 = std::string::append(&v52, (const std::string::value_type *)v36, v37);
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v53);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v16 = *(void **)(v15 + 16);
    memcpy(v16, a4, a5);
  }
}

void sub_1929C6F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, unint64_t a5, uint64_t *a6)
{
  unint64_t v6 = a5;
  double v7 = a4;
  long long v9 = (_OWORD *)(a1 + 952);
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    int v10 = *(unsigned __int8 *)(a3 + 23);
    HIDWORD(v11) = v10;
    LODWORD(v11) = (v10 << 24) - 0x4000000;
    switch((v11 >> 25))
    {
      case 0u:
        if (*(_DWORD *)a3 == 944987991) {
          goto LABEL_28;
        }
        if (v10 == 8) {
          goto LABEL_14;
        }
        if (v10 == 18) {
          goto LABEL_17;
        }
        if (v10 != 10) {
          goto LABEL_55;
        }
LABEL_7:
        if (*(void *)a3 == 0x6163735F74736F70 && *(_WORD *)(a3 + 8) == 25964) {
          goto LABEL_62;
        }
        if (v10 == 18) {
          goto LABEL_17;
        }
        uint64_t v13 = a3;
        if (v10 == 10) {
          goto LABEL_51;
        }
        if (v10 != 8) {
          goto LABEL_55;
        }
LABEL_14:
        if (*(void *)a3 == 0x736169625F656E61) {
          goto LABEL_58;
        }
        uint64_t v13 = a3;
        if (v10 == 10) {
          goto LABEL_51;
        }
        if (v10 != 18) {
          goto LABEL_55;
        }
LABEL_17:
        if (*(void *)a3 == 0x5F6363615F656E61
          && *(void *)(a3 + 8) == 0x6968735F73616962
          && *(_WORD *)(a3 + 16) == 29798)
        {
          goto LABEL_60;
        }
        uint64_t v13 = a3;
        if (v10 != 10) {
          goto LABEL_55;
        }
        goto LABEL_51;
      case 2u:
        goto LABEL_14;
      case 3u:
        goto LABEL_7;
      case 7u:
        goto LABEL_17;
      default:
        goto LABEL_55;
    }
  }
  uint64_t v16 = *(void *)(a3 + 8);
  *((void *)&v17 + 1) = v16;
  *(void *)&long long v17 = v16 - 4;
  switch((unint64_t)(v17 >> 1))
  {
    case 0uLL:
      if (**(_DWORD **)a3 != 944987991) {
        goto LABEL_55;
      }
LABEL_28:
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&v144, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), 1, 1);
      uint64_t v18 = *(std::__shared_weak_count **)(a1 + 1024);
      void v9[4] = *(_OWORD *)&v144.__r_.__value_.__l.__data_;
      if (v18) {
        nitro::nitro_function::nitro_function(v18);
      }
      if (v6)
      {
        long long v19 = *(float **)(*((void *)v9 + 8) + 16);
        do
        {
          int v20 = *v7++;
          *v19++ = (float)v20;
          --v6;
        }
        while (v6);
      }
      return;
    case 2uLL:
      goto LABEL_39;
    case 3uLL:
      if (**(void **)a3 == 0x6163735F74736F70 && *(_WORD *)(*(void *)a3 + 8) == 25964)
      {
LABEL_62:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v144, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        std::string::size_type v32 = v144.__r_.__value_.__r.__words[0];
        std::string::size_type v33 = *(std::__shared_weak_count **)(a1 + 960);
        *long long v9 = *(_OWORD *)&v144.__r_.__value_.__l.__data_;
        if (v33)
        {
          nitro::nitro_function::nitro_function(v33);
          std::string::size_type v29 = *(void *)v9;
        }
        else
        {
          std::string::size_type v29 = v32;
        }
        if (v6 != 4 * *(int *)(v29 + 8))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v137, v6);
          uint64_t v83 = std::string::insert(&v137, 0, "Unexpected size s=");
          long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
          v138.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v84;
          v83->__r_.__value_.__l.__size_ = 0;
          v83->__r_.__value_.__r.__words[2] = 0;
          v83->__r_.__value_.__r.__words[0] = 0;
          long long v85 = std::string::append(&v138, "/blob=");
          long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
          v139.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v86;
          v85->__r_.__value_.__l.__size_ = 0;
          v85->__r_.__value_.__r.__words[2] = 0;
          v85->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v136, 4 * *(int *)(*(void *)v9 + 8));
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v87 = &v136;
          }
          else {
            uint64_t v87 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v136.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v136.__r_.__value_.__l.__size_;
          }
          v89 = std::string::append(&v139, (const std::string::value_type *)v87, size);
          long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          v140.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v133, " @ ");
          if ((v135 & 0x80u) == 0) {
            long long v91 = (const std::string::value_type *)&v133;
          }
          else {
            long long v91 = v133;
          }
          if ((v135 & 0x80u) == 0) {
            std::string::size_type v92 = v135;
          }
          else {
            std::string::size_type v92 = v134;
          }
          unint64_t v93 = std::string::append(&v140, v91, v92);
          long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
          v141.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v94;
          v93->__r_.__value_.__l.__size_ = 0;
          v93->__r_.__value_.__r.__words[2] = 0;
          v93->__r_.__value_.__r.__words[0] = 0;
          std::string v95 = std::string::append(&v141, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
          v142.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v96;
          v95->__r_.__value_.__l.__size_ = 0;
          v95->__r_.__value_.__r.__words[2] = 0;
          v95->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v130, ":");
          if ((v132 & 0x80u) == 0) {
            std::string v97 = (const std::string::value_type *)&v130;
          }
          else {
            std::string v97 = v130;
          }
          if ((v132 & 0x80u) == 0) {
            std::string::size_type v98 = v132;
          }
          else {
            std::string::size_type v98 = v131;
          }
          std::string v99 = std::string::append(&v142, v97, v98);
          long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
          v143.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v100;
          v99->__r_.__value_.__l.__size_ = 0;
          v99->__r_.__value_.__r.__words[2] = 0;
          v99->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v129, 123);
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v101 = &v129;
          }
          else {
            std::string v101 = (std::string *)v129.__r_.__value_.__r.__words[0];
          }
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v102 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v102 = v129.__r_.__value_.__l.__size_;
          }
          long long v103 = std::string::append(&v143, (const std::string::value_type *)v101, v102);
          long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
          v144.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v104;
          v103->__r_.__value_.__l.__size_ = 0;
          v103->__r_.__value_.__r.__words[2] = 0;
          v103->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &v144);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        goto LABEL_149;
      }
      if (v16 != 8) {
        goto LABEL_40;
      }
LABEL_39:
      if (**(void **)a3 == 0x736169625F656E61)
      {
LABEL_58:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v144, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        std::string::size_type v27 = v144.__r_.__value_.__r.__words[0];
        std::__shared_count v28 = *(std::__shared_weak_count **)(a1 + 976);
        v9[1] = *(_OWORD *)&v144.__r_.__value_.__l.__data_;
        if (v28)
        {
          nitro::nitro_function::nitro_function(v28);
          std::string::size_type v29 = *((void *)v9 + 2);
        }
        else
        {
          std::string::size_type v29 = v27;
        }
        if (v6 != 4 * *(int *)(v29 + 8))
        {
          uint64_t v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v137, v6);
          std::string::size_type v37 = std::string::insert(&v137, 0, "Unexpected size s=");
          long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
          v138.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v38;
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          long long v39 = std::string::append(&v138, "/blob=");
          long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v139.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v136, 4 * *(int *)(*((void *)v9 + 2) + 8));
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v41 = &v136;
          }
          else {
            uint64_t v41 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v42 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v42 = v136.__r_.__value_.__l.__size_;
          }
          unsigned __int8 v43 = std::string::append(&v139, (const std::string::value_type *)v41, v42);
          long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v140.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v133, " @ ");
          if ((v135 & 0x80u) == 0) {
            std::string v45 = (const std::string::value_type *)&v133;
          }
          else {
            std::string v45 = v133;
          }
          if ((v135 & 0x80u) == 0) {
            std::string::size_type v46 = v135;
          }
          else {
            std::string::size_type v46 = v134;
          }
          std::string v47 = std::string::append(&v140, v45, v46);
          long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v141.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          std::string v49 = std::string::append(&v141, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          v142.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v50;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v130, ":");
          if ((v132 & 0x80u) == 0) {
            std::string v51 = (const std::string::value_type *)&v130;
          }
          else {
            std::string v51 = v130;
          }
          if ((v132 & 0x80u) == 0) {
            std::string::size_type v52 = v132;
          }
          else {
            std::string::size_type v52 = v131;
          }
          std::string v53 = std::string::append(&v142, v51, v52);
          long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          v143.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v129, 127);
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            vDSP_Length v55 = &v129;
          }
          else {
            vDSP_Length v55 = (std::string *)v129.__r_.__value_.__r.__words[0];
          }
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v56 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v56 = v129.__r_.__value_.__l.__size_;
          }
          uint64_t v57 = std::string::append(&v143, (const std::string::value_type *)v55, v56);
          long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          v144.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v58;
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v36, &v144);
          __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        goto LABEL_149;
      }
LABEL_40:
      if (v16 == 10) {
        goto LABEL_50;
      }
      if (v16 != 18) {
        goto LABEL_55;
      }
LABEL_42:
      if (**(void **)a3 == 0x5F6363615F656E61
        && *(void *)(*(void *)a3 + 8) == 0x6968735F73616962
        && *(_WORD *)(*(void *)a3 + 16) == 29798)
      {
LABEL_60:
        std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v144, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        std::string::size_type v30 = v144.__r_.__value_.__r.__words[0];
        long long v31 = *(std::__shared_weak_count **)(a1 + 992);
        v9[2] = *(_OWORD *)&v144.__r_.__value_.__l.__data_;
        if (v31)
        {
          nitro::nitro_function::nitro_function(v31);
          std::string::size_type v29 = *((void *)v9 + 4);
        }
        else
        {
          std::string::size_type v29 = v30;
        }
        if (v6 != 4 * *(int *)(v29 + 8))
        {
          int v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v137, v6);
          int v60 = std::string::insert(&v137, 0, "Unexpected size s=");
          long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
          v138.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v61;
          v60->__r_.__value_.__l.__size_ = 0;
          v60->__r_.__value_.__r.__words[2] = 0;
          v60->__r_.__value_.__r.__words[0] = 0;
          uint64_t v62 = std::string::append(&v138, "/blob=");
          long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          v139.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v136, 4 * *(int *)(*((void *)v9 + 4) + 8));
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v64 = &v136;
          }
          else {
            long long v64 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v65 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v65 = v136.__r_.__value_.__l.__size_;
          }
          uint64_t v66 = std::string::append(&v139, (const std::string::value_type *)v64, v65);
          long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
          v140.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v67;
          v66->__r_.__value_.__l.__size_ = 0;
          v66->__r_.__value_.__r.__words[2] = 0;
          v66->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v133, " @ ");
          if ((v135 & 0x80u) == 0) {
            uint64_t v68 = (const std::string::value_type *)&v133;
          }
          else {
            uint64_t v68 = v133;
          }
          if ((v135 & 0x80u) == 0) {
            std::string::size_type v69 = v135;
          }
          else {
            std::string::size_type v69 = v134;
          }
          uint64_t v70 = std::string::append(&v140, v68, v69);
          long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
          v141.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v71;
          v70->__r_.__value_.__l.__size_ = 0;
          v70->__r_.__value_.__r.__words[2] = 0;
          v70->__r_.__value_.__r.__words[0] = 0;
          v72 = std::string::append(&v141, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
          v142.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v73;
          v72->__r_.__value_.__l.__size_ = 0;
          v72->__r_.__value_.__r.__words[2] = 0;
          v72->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v130, ":");
          if ((v132 & 0x80u) == 0) {
            uint64_t v74 = (const std::string::value_type *)&v130;
          }
          else {
            uint64_t v74 = v130;
          }
          if ((v132 & 0x80u) == 0) {
            std::string::size_type v75 = v132;
          }
          else {
            std::string::size_type v75 = v131;
          }
          uint64_t v76 = std::string::append(&v142, v74, v75);
          long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          v143.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v129, 131);
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v78 = &v129;
          }
          else {
            long long v78 = (std::string *)v129.__r_.__value_.__r.__words[0];
          }
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v79 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v79 = v129.__r_.__value_.__l.__size_;
          }
          long long v80 = std::string::append(&v143, (const std::string::value_type *)v78, v79);
          long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
          v144.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v81;
          v80->__r_.__value_.__l.__size_ = 0;
          v80->__r_.__value_.__r.__words[2] = 0;
          v80->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v59, &v144);
          __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      else
      {
        if (v16 != 10)
        {
LABEL_55:
          Espresso::inner_product_kernel_cpu::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
          return;
        }
LABEL_50:
        uint64_t v13 = *(void *)a3;
LABEL_51:
        uint64_t v24 = *(void *)v13;
        int v25 = *(unsigned __int16 *)(v13 + 8);
        if (v24 != 0x61727478655F7868 || v25 != 26207) {
          goto LABEL_55;
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v144, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        std::string::size_type v34 = v144.__r_.__value_.__r.__words[0];
        long long v35 = *(std::__shared_weak_count **)(a1 + 1008);
        v9[3] = *(_OWORD *)&v144.__r_.__value_.__l.__data_;
        if (v35)
        {
          nitro::nitro_function::nitro_function(v35);
          std::string::size_type v29 = *((void *)v9 + 6);
        }
        else
        {
          std::string::size_type v29 = v34;
        }
        if (v6 != 4 * *(int *)(v29 + 8))
        {
          std::string v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v137, v6);
          uint64_t v107 = std::string::insert(&v137, 0, "Unexpected size s=");
          long long v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
          v138.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v108;
          v107->__r_.__value_.__l.__size_ = 0;
          v107->__r_.__value_.__r.__words[2] = 0;
          v107->__r_.__value_.__r.__words[0] = 0;
          long long v109 = std::string::append(&v138, "/blob=");
          long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
          v139.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v110;
          v109->__r_.__value_.__l.__size_ = 0;
          v109->__r_.__value_.__r.__words[2] = 0;
          v109->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v136, 4 * *(int *)(*((void *)v9 + 6) + 8));
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v111 = &v136;
          }
          else {
            v111 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v112 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v112 = v136.__r_.__value_.__l.__size_;
          }
          v113 = std::string::append(&v139, (const std::string::value_type *)v111, v112);
          long long v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
          v140.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v114;
          v113->__r_.__value_.__l.__size_ = 0;
          v113->__r_.__value_.__r.__words[2] = 0;
          v113->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v133, " @ ");
          if ((v135 & 0x80u) == 0) {
            long long v115 = (const std::string::value_type *)&v133;
          }
          else {
            long long v115 = v133;
          }
          if ((v135 & 0x80u) == 0) {
            std::string::size_type v116 = v135;
          }
          else {
            std::string::size_type v116 = v134;
          }
          v117 = std::string::append(&v140, v115, v116);
          long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
          v141.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v118;
          v117->__r_.__value_.__l.__size_ = 0;
          v117->__r_.__value_.__r.__words[2] = 0;
          v117->__r_.__value_.__r.__words[0] = 0;
          size_t v119 = std::string::append(&v141, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
          v142.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v120;
          v119->__r_.__value_.__l.__size_ = 0;
          v119->__r_.__value_.__r.__words[2] = 0;
          v119->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v130, ":");
          if ((v132 & 0x80u) == 0) {
            v121 = (const std::string::value_type *)&v130;
          }
          else {
            v121 = v130;
          }
          if ((v132 & 0x80u) == 0) {
            std::string::size_type v122 = v132;
          }
          else {
            std::string::size_type v122 = v131;
          }
          v123 = std::string::append(&v142, v121, v122);
          long long v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
          v143.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v124;
          v123->__r_.__value_.__l.__size_ = 0;
          v123->__r_.__value_.__r.__words[2] = 0;
          v123->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v129, 135);
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v125 = &v129;
          }
          else {
            uint64_t v125 = (std::string *)v129.__r_.__value_.__r.__words[0];
          }
          if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v126 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v126 = v129.__r_.__value_.__l.__size_;
          }
          v127 = std::string::append(&v143, (const std::string::value_type *)v125, v126);
          long long v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
          v144.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v128;
          v127->__r_.__value_.__l.__size_ = 0;
          v127->__r_.__value_.__r.__words[2] = 0;
          v127->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v106, &v144);
          __cxa_throw(v106, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
LABEL_149:
      long long v105 = *(void **)(v29 + 16);
      memcpy(v105, v7, v6);
      return;
    case 7uLL:
      goto LABEL_42;
    default:
      goto LABEL_55;
  }
}

void sub_1929C7D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (v60) {
    __cxa_free_exception(v59);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  long long v9 = *(std::__shared_weak_count **)(a1 + 1056);
  v57[0] = *(void *)(a1 + 1048);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  int v10 = *(std::__shared_weak_count **)(a1 + 1056);
  v56[0] = *(void *)(a1 + 1048);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  std::string v53 = (void *)a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  unint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = &v59[0][2 * v12];
        std::string::size_type v15 = (std::__shared_weak_count *)v13[1];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        long long v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        long long v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      unint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  unint64_t v22 = v53;
  wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>::__launch(v53, a2, (uint64_t)v58, v59);
  uint64_t v23 = v53[133];
  if (v23)
  {
    uint64_t v24 = (std::__shared_weak_count *)v53[134];
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        std::string::size_type v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    std::string::size_type v27 = 0;
LABEL_37:
    std::string::size_type v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      long long v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    unint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  std::string::size_type v42 = (std::__shared_weak_count *)v22[132];
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  vDSP_Length v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string::size_type v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          long long v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      long long v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      long long v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929C8544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      unint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      uint64_t v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        uint64_t v24 = (std::__shared_weak_count *)&v23[16 * v19];
        long long v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      long long v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929C8888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>::__launch(void *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v8 = a1[70];
  long long v9 = (std::__shared_weak_count *)a1[71];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a1[86];
  unint64_t v11 = (std::__shared_weak_count *)a1[87];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = a1[68];
  uint64_t v13 = (std::__shared_weak_count *)a1[69];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = a1[127];
  if (v14)
  {
    std::__shared_count v15 = (std::__shared_weak_count *)a1[87];
    *((_OWORD *)a1 + 43) = 0u;
    if (v15)
    {
      nitro::nitro_function::nitro_function(v15);
      uint64_t v14 = a1[127];
    }
    uint64_t v16 = a1[128];
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    a1[70] = v14;
    long long v17 = (std::__shared_weak_count *)a1[71];
    a1[71] = v16;
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
  }
  if (a1[129])
  {
    uint64_t v26 = a2;
    uint64_t v18 = a3;
    uint64_t v19 = a4;
    uint64_t v20 = v8;
    uint64_t v21 = v10;
    uint64_t v22 = v12;
    uint64_t v23 = (std::__shared_weak_count *)a1[130];
    v28[0] = a1[129];
    v28[1] = (uint64_t)v23;
    if (v23)
    {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      Espresso::inner_product_kernel_cpu::set_biases((uint64_t)a1, v28);
      nitro::nitro_function::nitro_function(v23);
    }
    else
    {
      Espresso::inner_product_kernel_cpu::set_biases((uint64_t)a1, v28);
    }
    uint64_t v12 = v22;
    uint64_t v10 = v21;
    uint64_t v8 = v20;
    a4 = v19;
    a3 = v18;
    a2 = v26;
  }
  Espresso::inner_product_kernel_cpu::__launch((uint64_t)a1, a2, a3, a4);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a1[70] = v8;
  uint64_t v24 = (std::__shared_weak_count *)a1[71];
  a1[71] = v9;
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a1[86] = v10;
  uint64_t v25 = (std::__shared_weak_count *)a1[87];
  a1[87] = v11;
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  v27[0] = v12;
  v27[1] = (uint64_t)v13;
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::inner_product_kernel_cpu::set_biases((uint64_t)a1, v27);
    nitro::nitro_function::nitro_function(v13);
    nitro::nitro_function::nitro_function(v13);
    if (!v11) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  Espresso::inner_product_kernel_cpu::set_biases((uint64_t)a1, v27);
  if (v11) {
LABEL_29:
  }
    nitro::nitro_function::nitro_function(v11);
LABEL_30:
  if (v9)
  {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1929C8B50(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_5;
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>::~wrapper_kernel(Espresso::inner_product_kernel_cpu *a1)
{
  wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>::~wrapper_kernel(a1);

  JUMPOUT(0x192FF16B0);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>::~wrapper_kernel(Espresso::inner_product_kernel_cpu *this)
{
  *(void *)this = &unk_1EE318E80;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 134);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 132);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE3221E0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 130);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 128);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 126);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  double v7 = (std::__shared_weak_count *)*((void *)this + 124);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 122);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  long long v9 = (std::__shared_weak_count *)*((void *)this + 120);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }

  Espresso::inner_product_kernel_cpu::~inner_product_kernel_cpu(this);
}

void wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>::~wrapper_kernel_with_weights(Espresso::inner_product_kernel_cpu *this)
{
  *(void *)this = &unk_1EE3221E0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 130);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 128);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 126);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 124);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 122);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  double v7 = (std::__shared_weak_count *)*((void *)this + 120);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  Espresso::inner_product_kernel_cpu::~inner_product_kernel_cpu(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EE3221E0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 130);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 128);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 126);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 124);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 122);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  double v7 = (std::__shared_weak_count *)*((void *)this + 120);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }

  Espresso::inner_product_kernel_cpu::~inner_product_kernel_cpu(this);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37EFD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::inner_product_kernel_cpu,Espresso::inner_product_uniforms>,Espresso::inner_product_uniforms>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37EFD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  unint64_t v6 = (char *)operator new(0x308uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unint64_t v6 = &unk_1EE37EF98;
  Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights((void *)v6 + 3, a1);
  *((void *)v6 + 72) = 0;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  *(_OWORD *)(v6 + 632) = 0u;
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 408) = v7;
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v6 + 456) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v6 + 472) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v6 + 424) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v6 + 440) = v9;
  *(void *)(v6 + 485) = *(void *)(a2 + 157);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 344) = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 376) = v11;
  uint64_t v12 = *a1;
  v6[492] = *(unsigned char *)(*a1 + 125);
  *(_OWORD *)(v6 + 648) = 0u;
  *(_OWORD *)(v6 + 664) = 0u;
  *(_OWORD *)(v6 + 680) = 0u;
  *(_OWORD *)(v6 + 696) = 0u;
  *(_OWORD *)(v6 + 712) = 0u;
  *(_OWORD *)(v6 + 728) = 0u;
  *((void *)v6 + 3) = &unk_1EE318C00;
  *(_OWORD *)(v6 + 744) = 0u;
  *(_OWORD *)(v6 + 760) = 0u;
  uint64_t v13 = a1[1];
  if (v13)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    uint64_t v14 = (std::__shared_weak_count *)*((void *)v6 + 94);
    *((void *)v6 + 93) = v12;
    *((void *)v6 + 94) = v13;
    if (v14) {
      nitro::nitro_function::nitro_function(v14);
    }
  }
  else
  {
    *((void *)v6 + 93) = v12;
    *((void *)v6 + 94) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929C8FAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::get_f16_weights@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 600);
  *a2 = *(void *)(result + 592);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::get_weights@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 584);
  *a2 = *(void *)(result + 576);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::get_biases@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 568);
  *a2 = *(void *)(result + 560);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::set_weights(uint64_t a1, void *a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v4 = *(_DWORD *)(a1 + 420);
  if (v4 <= 1) {
    int v4 = 1;
  }
  Espresso::unshuffle_from_gpu_conv_weights(v6, *(_DWORD *)(a1 + 344), (*(_DWORD *)(a1 + 348) - 1) / v4 + 1, (uint64_t *)&v7);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 584);
  *(_OWORD *)(a1 + 576) = v7;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void sub_1929C90CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::num_weights_blob(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 336)) {
    return 2;
  }
  else {
    return 1;
  }
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::get_weights_blob(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 == 1)
  {
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,1>>>((uint64_t *)&v4, a1 + 1, a1 + 70);
    goto LABEL_5;
  }
  if (!a2)
  {
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,4>>>((uint64_t *)&v4, a1 + 1, a1 + 72);
LABEL_5:
    *(_OWORD *)a3 = v4;
    return;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
}

void Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,4>>>(uint64_t *a1, void *a2, uint64_t *a3)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>(a1, a2);
  uint64_t v5 = *a1;
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  long long v8 = *(std::__shared_weak_count **)(v5 + 232);
  *(void *)(v5 + 224) = v7;
  *(void *)(v5 + 232) = v6;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  long long v9 = operator new(0x60uLL);
  v9[1] = 0;
  v9[2] = 0;
  *long long v9 = &unk_1EE3899C8;
  long long v10 = (char *)(v9 + 3);
  v9[3] = &unk_1EE36BF10;
  void v9[4] = 0;
  v9[5] = 0;
  v9[6] = 0;
  *((unsigned char *)v9 + 56) = 0;
  *((_OWORD *)v9 + 4) = 0u;
  *((_OWORD *)v9 + 5) = 0u;
  long long v11 = *(std::__shared_weak_count **)(v5 + 168);
  *(void *)(v5 + 160) = v9 + 3;
  *(void *)(v5 + 168) = v9;
  if (v11)
  {
    nitro::nitro_function::nitro_function(v11);
    long long v10 = *(char **)(v5 + 160);
  }
  uint64_t v12 = 0;
  *(void *)&long long v13 = 0x100000001;
  *((void *)&v13 + 1) = 0x100000001;
  *(_OWORD *)(v10 + 8) = v13;
  uint64_t v14 = *a3;
  uint64_t v15 = *a3 + 8;
  do
  {
    *(_DWORD *)&v10[v12 + 8] = *(_DWORD *)(v15 + v12);
    v12 += 4;
  }
  while (v12 != 16);
  *(_DWORD *)(v5 + 8) = *((_DWORD *)v10 + 2);
  *(_DWORD *)(v5 + 12) = *((_DWORD *)v10 + 3);
  *(_DWORD *)(v5 + 16) = *((_DWORD *)v10 + 4);
  *(_DWORD *)(v5 + 20) = *((_DWORD *)v10 + 5);
  *(_DWORD *)(v5 + 24) = 1;
  *((void *)v10 + 3) = *(void *)(v14 + 24);
  v10[32] = 0;
}

void sub_1929C9284(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::supports_weight_key(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = a2;
  if (wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::supports_weight_key(a1, a2))
  {
    return 1;
  }
  int v4 = *((char *)v2 + 23);
  if (v4 < 0)
  {
    if (*((void *)v2 + 1) != 10) {
      return 0;
    }
    uint64_t v2 = *(_DWORD **)v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *(void *)v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

BOOL wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::supports_weight_key(uint64_t a1, _DWORD *a2)
{
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    int v3 = *((unsigned __int8 *)a2 + 23);
    HIDWORD(v4) = v3;
    LODWORD(v4) = (v3 << 24) - 0x4000000;
    switch((v4 >> 25))
    {
      case 0u:
        if (*a2 == 944987991) {
          return 1;
        }
        if (v3 == 8) {
          goto LABEL_14;
        }
        if (v3 == 18) {
          goto LABEL_17;
        }
        if (v3 != 10) {
          goto LABEL_50;
        }
LABEL_7:
        if (*(void *)a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964) {
          return 1;
        }
        if (v3 == 18) {
          goto LABEL_17;
        }
        uint64_t v6 = a2;
        if (v3 == 10) {
          goto LABEL_46;
        }
        if (v3 != 8) {
          goto LABEL_50;
        }
LABEL_14:
        if (*(void *)a2 == 0x736169625F656E61) {
          return 1;
        }
        uint64_t v6 = a2;
        if (v3 == 10) {
          goto LABEL_46;
        }
        if (v3 != 18) {
          goto LABEL_50;
        }
LABEL_17:
        if (*(void *)a2 == 0x5F6363615F656E61
          && *((void *)a2 + 1) == 0x6968735F73616962
          && *((_WORD *)a2 + 8) == 29798)
        {
          return 1;
        }
        uint64_t v6 = a2;
        if (v3 != 10) {
          goto LABEL_50;
        }
        goto LABEL_46;
      case 2u:
        goto LABEL_14;
      case 3u:
        goto LABEL_7;
      case 7u:
        goto LABEL_17;
      default:
        goto LABEL_50;
    }
  }
  uint64_t v9 = *((void *)a2 + 1);
  *((void *)&v10 + 1) = v9;
  *(void *)&long long v10 = v9 - 4;
  switch((unint64_t)(v10 >> 1))
  {
    case 0uLL:
      if (**(_DWORD **)a2 != 944987991) {
        goto LABEL_50;
      }
      return 1;
    case 2uLL:
      goto LABEL_34;
    case 3uLL:
      if (**(void **)a2 == 0x6163735F74736F70 && *(_WORD *)(*(void *)a2 + 8) == 25964) {
        return 1;
      }
      if (v9 != 8) {
        goto LABEL_35;
      }
LABEL_34:
      if (**(void **)a2 == 0x736169625F656E61) {
        return 1;
      }
LABEL_35:
      if (v9 == 10) {
        goto LABEL_45;
      }
      if (v9 != 18) {
        goto LABEL_50;
      }
LABEL_37:
      if (**(void **)a2 == 0x5F6363615F656E61
        && *(void *)(*(void *)a2 + 8) == 0x6968735F73616962
        && *(_WORD *)(*(void *)a2 + 16) == 29798)
      {
        return 1;
      }
      if (v9 != 10) {
        goto LABEL_50;
      }
LABEL_45:
      uint64_t v6 = *(_DWORD **)a2;
LABEL_46:
      uint64_t v14 = *(void *)v6;
      int v15 = *((unsigned __int16 *)v6 + 4);
      if (v14 == 0x61727478655F7868 && v15 == 26207) {
        return 1;
      }
LABEL_50:
      if (Espresso::generic_convolution_kernel::supports_weight_key(a1, a2)) {
        return 1;
      }
      return Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1);
    case 7uLL:
      goto LABEL_37;
    default:
      goto LABEL_50;
  }
}

void wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::__set_weights_finalize(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 560);
  int v3 = *(std::__shared_weak_count **)(a1 + 568);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2)
  {
    if (*(void *)(a1 + 640)) {
      goto LABEL_45;
    }
    if (!*(void *)(a1 + 656))
    {
      if (*(void *)(a1 + 624))
      {
        uint64_t v11 = *(void *)(a1 + 672);
        if (v11)
        {
          float v12 = **(float **)(v11 + 16);
          long long v13 = *(std::__shared_weak_count **)(a1 + 632);
          v22[0] = *(void *)(a1 + 624);
          v22[1] = v13;
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v21[0] = v2;
          v21[1] = (uint64_t)v3;
          if (v3) {
            atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::ane_style_post_scale_bias((uint64_t)v22, v21, (uint64_t)&v23, v12);
          if (v3) {
            nitro::nitro_function::nitro_function(v3);
          }
          if (v13) {
            nitro::nitro_function::nitro_function(v13);
          }
          std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v20, 1, 1, 1, 1);
          uint64_t v14 = v20;
          int v15 = *(std::__shared_weak_count **)(a1 + 664);
          *(_OWORD *)(a1 + 656) = v20;
          if (v15)
          {
            nitro::nitro_function::nitro_function(v15);
            uint64_t v16 = *(void *)(a1 + 656);
          }
          else
          {
            uint64_t v16 = v14;
          }
          **(_DWORD **)(v16 + 16) = v27;
          uint64_t v18 = v25;
          long long v17 = v26;
          if (v26) {
            atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)(a1 + 640) = v18;
          uint64_t v19 = *(std::__shared_weak_count **)(a1 + 648);
          *(void *)(a1 + 648) = v17;
          if (v19) {
            nitro::nitro_function::nitro_function(v19);
          }
          if (v26) {
            nitro::nitro_function::nitro_function(v26);
          }
          if (v24) {
            nitro::nitro_function::nitro_function(v24);
          }
          if (*(void *)(a1 + 640))
          {
LABEL_45:
            if (*(void *)(a1 + 656))
            {
              uint64_t v4 = *(void *)(a1 + 624);
              if (v4)
              {
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v23, *(_DWORD *)(v4 + 8), 1, 1, 1);
                uint64_t v5 = v23;
                if (*(_DWORD *)(v23 + 8))
                {
                  unint64_t v6 = 0;
                  do
                  {
                    double v7 = *(float *)(*(void *)(*(void *)(a1 + 640) + 16) + 4 * v6);
                    float v8 = ldexp(1.0, **(_DWORD **)(*(void *)(a1 + 656) + 16)) * v7;
                    *(float *)(*(void *)(v5 + 16) + 4 * v6++) = v8;
                  }
                  while (v6 < *(unsigned int *)(v5 + 8));
                }
                uint64_t v9 = v24;
                if (v24) {
                  atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                *(void *)(a1 + 704) = v5;
                long long v10 = *(std::__shared_weak_count **)(a1 + 712);
                *(void *)(a1 + 712) = v9;
                if (v10) {
                  nitro::nitro_function::nitro_function(v10);
                }
                if (v9) {
                  nitro::nitro_function::nitro_function(v9);
                }
              }
            }
          }
        }
      }
    }
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

void sub_1929C9830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  Espresso::dropout_augment_lowmem::ret_t::~ret_t((Espresso::dropout_augment_lowmem::ret_t *)va);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  _Unwind_Resume(a1);
}

void sub_1929C9880()
{
  if (!v0) {
    JUMPOUT(0x1929C985CLL);
  }
  JUMPOUT(0x1929C9854);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::__set_weight_raw_blob(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, char *a4, unint64_t a5, uint64_t *a6)
{
  float v8 = a3;
  wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::__set_weight_raw_blob((std::__shared_weak_count **)a1, a2, a3, a4, a5, a6);
  int v10 = (char)v8[23];
  if (v10 < 0)
  {
    if (*((void *)v8 + 1) != 10) {
      return;
    }
    float v8 = *(unsigned __int8 **)v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*(void *)v8 == 0x6163735F74736F70 && *((_WORD *)v8 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v54, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v12 = v54.__r_.__value_.__r.__words[0];
    long long v13 = *(std::__shared_weak_count **)(a1 + 744);
    *(_OWORD *)(a1 + 736) = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
    if (v13)
    {
      nitro::nitro_function::nitro_function(v13);
      std::string::size_type v14 = *(void *)(a1 + 736);
    }
    else
    {
      std::string::size_type v14 = v12;
    }
    if (a5 != 4 * *(int *)(v14 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v17 = a5;
      uint64_t v18 = exception;
      std::to_string(&v47, v17);
      uint64_t v19 = std::string::insert(&v47, 0, "Unexpected size s=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      uint64_t v21 = std::string::append(&v48, "/blob=");
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v46, 4 * *(int *)(*(void *)(a1 + 736) + 8));
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &v46;
      }
      else {
        uint64_t v23 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v46.__r_.__value_.__l.__size_;
      }
      uint64_t v25 = std::string::append(&v49, (const std::string::value_type *)v23, size);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, " @ ");
      if ((v45 & 0x80u) == 0) {
        int v27 = (const std::string::value_type *)v44;
      }
      else {
        int v27 = (const std::string::value_type *)v44[0];
      }
      if ((v45 & 0x80u) == 0) {
        std::string::size_type v28 = v45;
      }
      else {
        std::string::size_type v28 = v44[1];
      }
      uint64_t v29 = std::string::append(&v50, v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      long long v31 = std::string::append(&v51, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, ":");
      if ((v43 & 0x80u) == 0) {
        uint64_t v33 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v33 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v34 = v43;
      }
      else {
        std::string::size_type v34 = v42[1];
      }
      int v35 = std::string::append(&v52, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v41, 197);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v37 = &v41;
      }
      else {
        unint64_t v37 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = v41.__r_.__value_.__l.__size_;
      }
      uint64_t v39 = std::string::append(&v53, (const std::string::value_type *)v37, v38);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v18, &v54);
      __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v15 = *(void **)(v14 + 16);
    memcpy(v15, a4, a5);
  }
}

void sub_1929C9BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::__set_weight_raw_blob(std::__shared_weak_count **this, uint64_t *a2, unsigned __int8 *a3, char *a4, unint64_t a5, uint64_t *a6)
{
  size_t v6 = a5;
  double v7 = a4;
  if (((char)a3[23] & 0x80000000) == 0)
  {
    int v9 = a3[23];
    HIDWORD(v10) = v9;
    LODWORD(v10) = (v9 << 24) - 0x4000000;
    switch((v10 >> 25))
    {
      case 0u:
        if (*(_DWORD *)a3 == 944987991) {
          goto LABEL_28;
        }
        if (v9 == 8) {
          goto LABEL_14;
        }
        if (v9 == 18) {
          goto LABEL_17;
        }
        if (v9 != 10) {
          goto LABEL_55;
        }
LABEL_7:
        if (*(void *)a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964) {
          goto LABEL_62;
        }
        if (v9 == 18) {
          goto LABEL_17;
        }
        std::string::size_type v12 = a3;
        if (v9 == 10) {
          goto LABEL_51;
        }
        if (v9 != 8) {
          goto LABEL_55;
        }
LABEL_14:
        if (*(void *)a3 == 0x736169625F656E61) {
          goto LABEL_58;
        }
        std::string::size_type v12 = a3;
        if (v9 == 10) {
          goto LABEL_51;
        }
        if (v9 != 18) {
          goto LABEL_55;
        }
LABEL_17:
        if (*(void *)a3 == 0x5F6363615F656E61
          && *((void *)a3 + 1) == 0x6968735F73616962
          && *((_WORD *)a3 + 8) == 29798)
        {
          goto LABEL_60;
        }
        std::string::size_type v12 = a3;
        if (v9 != 10) {
          goto LABEL_55;
        }
        goto LABEL_51;
      case 2u:
        goto LABEL_14;
      case 3u:
        goto LABEL_7;
      case 7u:
        goto LABEL_17;
      default:
        goto LABEL_55;
    }
  }
  uint64_t v15 = *((void *)a3 + 1);
  *((void *)&v16 + 1) = v15;
  *(void *)&long long v16 = v15 - 4;
  switch((unint64_t)(v16 >> 1))
  {
    case 0uLL:
      if (**(_DWORD **)a3 != 944987991) {
        goto LABEL_55;
      }
LABEL_28:
      Espresso::generic_deconvolution_kernel::create_weights_blob((Espresso::generic_deconvolution_kernel *)this, &v151);
      unint64_t v17 = this[87];
      *((_OWORD *)this + 43) = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
      if (v17) {
        nitro::nitro_function::nitro_function(v17);
      }
      if (v6)
      {
        uint64_t v18 = (float *)this[86][1].__vftable;
        do
        {
          int v19 = *v7++;
          *v18++ = (float)v19;
          --v6;
        }
        while (v6);
      }
      return;
    case 2uLL:
      goto LABEL_39;
    case 3uLL:
      if (**(void **)a3 == 0x6163735F74736F70 && *(_WORD *)(*(void *)a3 + 8) == 25964)
      {
LABEL_62:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v151, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        std::string::size_type v31 = v151.__r_.__value_.__r.__words[0];
        long long v32 = this[79];
        *((_OWORD *)this + 39) = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
        if (v32)
        {
          nitro::nitro_function::nitro_function(v32);
          std::string::size_type v28 = (std::string::size_type)this[78];
        }
        else
        {
          std::string::size_type v28 = v31;
        }
        if (v6 != 4 * *(int *)(v28 + 8))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          unint64_t v86 = v6;
          uint64_t v87 = exception;
          std::to_string(&v144, v86);
          std::string::size_type v88 = std::string::insert(&v144, 0, "Unexpected size s=");
          long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
          v145.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v89;
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          v88->__r_.__value_.__r.__words[0] = 0;
          long long v90 = std::string::append(&v145, "/blob=");
          long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
          v146.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v91;
          v90->__r_.__value_.__l.__size_ = 0;
          v90->__r_.__value_.__r.__words[2] = 0;
          v90->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v143, 4 * SLODWORD(this[78]->__shared_owners_));
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v92 = &v143;
          }
          else {
            std::string::size_type v92 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v143.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v143.__r_.__value_.__l.__size_;
          }
          long long v94 = std::string::append(&v146, (const std::string::value_type *)v92, size);
          long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v95;
          v94->__r_.__value_.__l.__size_ = 0;
          v94->__r_.__value_.__r.__words[2] = 0;
          v94->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v140, " @ ");
          if ((v142 & 0x80u) == 0) {
            long long v96 = (const std::string::value_type *)&v140;
          }
          else {
            long long v96 = v140;
          }
          if ((v142 & 0x80u) == 0) {
            std::string::size_type v97 = v142;
          }
          else {
            std::string::size_type v97 = v141;
          }
          std::string::size_type v98 = std::string::append(&v147, v96, v97);
          long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v99;
          v98->__r_.__value_.__l.__size_ = 0;
          v98->__r_.__value_.__r.__words[2] = 0;
          v98->__r_.__value_.__r.__words[0] = 0;
          long long v100 = std::string::append(&v148, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v101;
          v100->__r_.__value_.__l.__size_ = 0;
          v100->__r_.__value_.__r.__words[2] = 0;
          v100->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v137, ":");
          if ((v139 & 0x80u) == 0) {
            std::string::size_type v102 = (const std::string::value_type *)&v137;
          }
          else {
            std::string::size_type v102 = v137;
          }
          if ((v139 & 0x80u) == 0) {
            std::string::size_type v103 = v139;
          }
          else {
            std::string::size_type v103 = v138;
          }
          long long v104 = std::string::append(&v149, v102, v103);
          long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v105;
          v104->__r_.__value_.__l.__size_ = 0;
          v104->__r_.__value_.__r.__words[2] = 0;
          v104->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v136, 123);
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v106 = &v136;
          }
          else {
            std::string v106 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v107 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v107 = v136.__r_.__value_.__l.__size_;
          }
          long long v108 = std::string::append(&v150, (const std::string::value_type *)v106, v107);
          long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v109;
          v108->__r_.__value_.__l.__size_ = 0;
          v108->__r_.__value_.__r.__words[2] = 0;
          v108->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v87, &v151);
          __cxa_throw(v87, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        goto LABEL_149;
      }
      if (v15 != 8) {
        goto LABEL_40;
      }
LABEL_39:
      if (**(void **)a3 == 0x736169625F656E61)
      {
LABEL_58:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v151, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        std::string::size_type v26 = v151.__r_.__value_.__r.__words[0];
        int v27 = this[81];
        *((_OWORD *)this + 40) = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
        if (v27)
        {
          nitro::nitro_function::nitro_function(v27);
          std::string::size_type v28 = (std::string::size_type)this[80];
        }
        else
        {
          std::string::size_type v28 = v26;
        }
        if (v6 != 4 * *(int *)(v28 + 8))
        {
          int v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          unint64_t v36 = v6;
          unint64_t v37 = v35;
          std::to_string(&v144, v36);
          std::string::size_type v38 = std::string::insert(&v144, 0, "Unexpected size s=");
          long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
          v145.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v39;
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          long long v40 = std::string::append(&v145, "/blob=");
          long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
          v146.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v41;
          v40->__r_.__value_.__l.__size_ = 0;
          v40->__r_.__value_.__r.__words[2] = 0;
          v40->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v143, 4 * SLODWORD(this[80]->__shared_owners_));
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v42 = &v143;
          }
          else {
            std::string::size_type v42 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v43 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v43 = v143.__r_.__value_.__l.__size_;
          }
          uint64_t v44 = std::string::append(&v146, (const std::string::value_type *)v42, v43);
          long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v140, " @ ");
          if ((v142 & 0x80u) == 0) {
            std::string v46 = (const std::string::value_type *)&v140;
          }
          else {
            std::string v46 = v140;
          }
          if ((v142 & 0x80u) == 0) {
            std::string::size_type v47 = v142;
          }
          else {
            std::string::size_type v47 = v141;
          }
          std::string v48 = std::string::append(&v147, v46, v47);
          long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          std::string v50 = std::string::append(&v148, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v137, ":");
          if ((v139 & 0x80u) == 0) {
            std::string v52 = (const std::string::value_type *)&v137;
          }
          else {
            std::string v52 = v137;
          }
          if ((v139 & 0x80u) == 0) {
            std::string::size_type v53 = v139;
          }
          else {
            std::string::size_type v53 = v138;
          }
          std::string v54 = std::string::append(&v149, v52, v53);
          long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v55;
          v54->__r_.__value_.__l.__size_ = 0;
          v54->__r_.__value_.__r.__words[2] = 0;
          v54->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v136, 127);
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v56 = &v136;
          }
          else {
            std::string::size_type v56 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v57 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v57 = v136.__r_.__value_.__l.__size_;
          }
          long long v58 = std::string::append(&v150, (const std::string::value_type *)v56, v57);
          long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v37, &v151);
          __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        goto LABEL_149;
      }
LABEL_40:
      if (v15 == 10) {
        goto LABEL_50;
      }
      if (v15 != 18) {
        goto LABEL_55;
      }
LABEL_42:
      if (**(void **)a3 == 0x5F6363615F656E61
        && *(void *)(*(void *)a3 + 8) == 0x6968735F73616962
        && *(_WORD *)(*(void *)a3 + 16) == 29798)
      {
LABEL_60:
        std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v151, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        std::string::size_type v29 = v151.__r_.__value_.__r.__words[0];
        long long v30 = this[83];
        *((_OWORD *)this + 41) = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
        if (v30)
        {
          nitro::nitro_function::nitro_function(v30);
          std::string::size_type v28 = (std::string::size_type)this[82];
        }
        else
        {
          std::string::size_type v28 = v29;
        }
        if (v6 != 4 * *(int *)(v28 + 8))
        {
          int v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          unint64_t v61 = v6;
          uint64_t v62 = v60;
          std::to_string(&v144, v61);
          long long v63 = std::string::insert(&v144, 0, "Unexpected size s=");
          long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
          v145.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v64;
          v63->__r_.__value_.__l.__size_ = 0;
          v63->__r_.__value_.__r.__words[2] = 0;
          v63->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v65 = std::string::append(&v145, "/blob=");
          long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          v146.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v66;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v143, 4 * SLODWORD(this[82]->__shared_owners_));
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v67 = &v143;
          }
          else {
            long long v67 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v68 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v68 = v143.__r_.__value_.__l.__size_;
          }
          std::string::size_type v69 = std::string::append(&v146, (const std::string::value_type *)v67, v68);
          long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v70;
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v140, " @ ");
          if ((v142 & 0x80u) == 0) {
            long long v71 = (const std::string::value_type *)&v140;
          }
          else {
            long long v71 = v140;
          }
          if ((v142 & 0x80u) == 0) {
            std::string::size_type v72 = v142;
          }
          else {
            std::string::size_type v72 = v141;
          }
          long long v73 = std::string::append(&v147, v71, v72);
          long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v74;
          v73->__r_.__value_.__l.__size_ = 0;
          v73->__r_.__value_.__r.__words[2] = 0;
          v73->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v75 = std::string::append(&v148, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v76;
          v75->__r_.__value_.__l.__size_ = 0;
          v75->__r_.__value_.__r.__words[2] = 0;
          v75->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v137, ":");
          if ((v139 & 0x80u) == 0) {
            long long v77 = (const std::string::value_type *)&v137;
          }
          else {
            long long v77 = v137;
          }
          if ((v139 & 0x80u) == 0) {
            std::string::size_type v78 = v139;
          }
          else {
            std::string::size_type v78 = v138;
          }
          std::string::size_type v79 = std::string::append(&v149, v77, v78);
          long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v80;
          v79->__r_.__value_.__l.__size_ = 0;
          v79->__r_.__value_.__r.__words[2] = 0;
          v79->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v136, 131);
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v81 = &v136;
          }
          else {
            long long v81 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v82 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v82 = v136.__r_.__value_.__l.__size_;
          }
          uint64_t v83 = std::string::append(&v150, (const std::string::value_type *)v81, v82);
          long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v84;
          v83->__r_.__value_.__l.__size_ = 0;
          v83->__r_.__value_.__r.__words[2] = 0;
          v83->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v62, &v151);
          __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      else
      {
        if (v15 != 10)
        {
LABEL_55:
          Espresso::deconvolution_kernel_cpu::__set_weight_raw_blob((uint64_t *)this, a2, a3, a4, a5, a6);
          return;
        }
LABEL_50:
        std::string::size_type v12 = *(unsigned __int8 **)a3;
LABEL_51:
        uint64_t v23 = *(void *)v12;
        int v24 = *((unsigned __int16 *)v12 + 4);
        if (v23 != 0x61727478655F7868 || v24 != 26207) {
          goto LABEL_55;
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v151, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        std::string::size_type v33 = v151.__r_.__value_.__r.__words[0];
        std::string::size_type v34 = this[85];
        *((_OWORD *)this + 42) = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
        if (v34)
        {
          nitro::nitro_function::nitro_function(v34);
          std::string::size_type v28 = (std::string::size_type)this[84];
        }
        else
        {
          std::string::size_type v28 = v33;
        }
        if (v6 != 4 * *(int *)(v28 + 8))
        {
          v111 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          unint64_t v112 = v6;
          v113 = v111;
          std::to_string(&v144, v112);
          long long v114 = std::string::insert(&v144, 0, "Unexpected size s=");
          long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
          v145.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v115;
          v114->__r_.__value_.__l.__size_ = 0;
          v114->__r_.__value_.__r.__words[2] = 0;
          v114->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v116 = std::string::append(&v145, "/blob=");
          long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
          v146.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v117;
          v116->__r_.__value_.__l.__size_ = 0;
          v116->__r_.__value_.__r.__words[2] = 0;
          v116->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v143, 4 * SLODWORD(this[84]->__shared_owners_));
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v118 = &v143;
          }
          else {
            long long v118 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v119 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v119 = v143.__r_.__value_.__l.__size_;
          }
          long long v120 = std::string::append(&v146, (const std::string::value_type *)v118, v119);
          long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v121;
          v120->__r_.__value_.__l.__size_ = 0;
          v120->__r_.__value_.__r.__words[2] = 0;
          v120->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v140, " @ ");
          if ((v142 & 0x80u) == 0) {
            std::string::size_type v122 = (const std::string::value_type *)&v140;
          }
          else {
            std::string::size_type v122 = v140;
          }
          if ((v142 & 0x80u) == 0) {
            std::string::size_type v123 = v142;
          }
          else {
            std::string::size_type v123 = v141;
          }
          long long v124 = std::string::append(&v147, v122, v123);
          long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v125;
          v124->__r_.__value_.__l.__size_ = 0;
          v124->__r_.__value_.__r.__words[2] = 0;
          v124->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v126 = std::string::append(&v148, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v127;
          v126->__r_.__value_.__l.__size_ = 0;
          v126->__r_.__value_.__r.__words[2] = 0;
          v126->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v137, ":");
          if ((v139 & 0x80u) == 0) {
            long long v128 = (const std::string::value_type *)&v137;
          }
          else {
            long long v128 = v137;
          }
          if ((v139 & 0x80u) == 0) {
            std::string::size_type v129 = v139;
          }
          else {
            std::string::size_type v129 = v138;
          }
          v130 = std::string::append(&v149, v128, v129);
          long long v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v131;
          v130->__r_.__value_.__l.__size_ = 0;
          v130->__r_.__value_.__r.__words[2] = 0;
          v130->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v136, 135);
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned __int8 v132 = &v136;
          }
          else {
            unsigned __int8 v132 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v133 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v133 = v136.__r_.__value_.__l.__size_;
          }
          std::string::size_type v134 = std::string::append(&v150, (const std::string::value_type *)v132, v133);
          long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v135;
          v134->__r_.__value_.__l.__size_ = 0;
          v134->__r_.__value_.__r.__words[2] = 0;
          v134->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v113, &v151);
          __cxa_throw(v113, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
LABEL_149:
      long long v110 = *(void **)(v28 + 16);
      memcpy(v110, v7, v6);
      return;
    case 7uLL:
      goto LABEL_42;
    default:
      goto LABEL_55;
  }
}

void sub_1929CA97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (v60) {
    __cxa_free_exception(v59);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::share_weights(void *a1, const void **a2)
{
  Espresso::generic_convolution_kernel::share_weights(a1, a2);
  if (*a2)
  {
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = v4[72];
      uint64_t v7 = v4[73];
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      a1[72] = v6;
      float v8 = (std::__shared_weak_count *)a1[73];
      a1[73] = v7;
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      uint64_t v9 = v5[70];
      uint64_t v10 = v5[71];
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      a1[70] = v9;
      uint64_t v11 = (std::__shared_weak_count *)a1[71];
      a1[71] = v10;
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      uint64_t v12 = v5[74];
      uint64_t v13 = v5[75];
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      a1[74] = v12;
      std::string::size_type v14 = (std::__shared_weak_count *)a1[75];
      a1[75] = v13;
      if (v14)
      {
        nitro::nitro_function::nitro_function(v14);
      }
    }
  }
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 728);
  v57[0] = *(void *)(a1 + 720);
  v57[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 728);
  v56[0] = *(void *)(a1 + 720);
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  std::string::size_type v53 = (void *)a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        uint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        unint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        int v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      uint64_t v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  long long v22 = v53;
  wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::__launch(v53, a2, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = v53[92];
  if (v23)
  {
    int v24 = (std::__shared_weak_count *)v53[93];
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        int v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    int v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      std::string::size_type v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    long long v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  std::string::size_type v42 = (std::__shared_weak_count *)v22[91];
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v55 = v42;
  std::string::size_type v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string::size_type v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      long long v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        long long v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        long long v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      std::string::size_type v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929CB2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        int v24 = (std::__shared_weak_count *)&v23[16 * v19];
        std::string::size_type v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      std::string::size_type v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929CB610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::__launch(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1[72];
  BOOL v8 = (std::__shared_weak_count *)a1[73];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = a1[74];
  uint64_t v10 = (std::__shared_weak_count *)a1[75];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = a1[70];
  unint64_t v12 = (std::__shared_weak_count *)a1[71];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a1[86];
  if (v13)
  {
    std::string::size_type v14 = (std::__shared_weak_count *)a1[75];
    *((_OWORD *)a1 + 37) = 0u;
    if (v14)
    {
      nitro::nitro_function::nitro_function(v14);
      uint64_t v13 = a1[86];
    }
    uint64_t v15 = a1[87];
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    a1[72] = v13;
    unint64_t v16 = (std::__shared_weak_count *)a1[73];
    a1[73] = v15;
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
  }
  if (a1[88])
  {
    unint64_t v17 = (std::__shared_weak_count *)a1[89];
    v21[0] = a1[88];
    v21[1] = (uint64_t)v17;
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::set_biases((uint64_t)a1, v21);
      nitro::nitro_function::nitro_function(v17);
    }
    else
    {
      Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::set_biases((uint64_t)a1, v21);
    }
  }
  Espresso::deconvolution_kernel_cpu::__launch(a1, a2, a3, a4);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a1[72] = v7;
  uint64_t v18 = (std::__shared_weak_count *)a1[73];
  a1[73] = v8;
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a1[74] = v9;
  uint64_t v19 = (std::__shared_weak_count *)a1[75];
  a1[75] = v10;
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  v20[0] = v11;
  v20[1] = (uint64_t)v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::set_biases((uint64_t)a1, v20);
    nitro::nitro_function::nitro_function(v12);
    nitro::nitro_function::nitro_function(v12);
    if (!v10) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::set_biases((uint64_t)a1, v20);
  if (v10) {
LABEL_28:
  }
    nitro::nitro_function::nitro_function(v10);
LABEL_29:
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_1929CB8A0(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_5;
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::~wrapper_kernel(Espresso::generic_convolution_kernel *this)
{
  *(void *)this = &unk_1EE318C00;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 93);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::~wrapper_kernel_with_weights(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE318C00;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 93);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::~wrapper_kernel_with_weights(this);
}

void wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::~wrapper_kernel_with_weights(Espresso::generic_convolution_kernel *this)
{
  *(void *)this = &unk_1EE321F60;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 89);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 87);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 85);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 83);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 79);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  *(void *)this = &unk_1EE35B870;
  BOOL v8 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  *(void *)this = &unk_1EE360338;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::clear_weights(uint64_t a1)
{
  Espresso::generic_convolution_kernel::clear_weights((Espresso::generic_convolution_kernel *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 584);
  long long v3 = 0uLL;
  *(_OWORD *)(a1 + 576) = 0u;
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
    long long v3 = 0uLL;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 600);
  *(_OWORD *)(a1 + 592) = v3;
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
  }
}

void wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::~wrapper_kernel_with_weights(Espresso::generic_convolution_kernel *a1)
{
  wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>::~wrapper_kernel_with_weights(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37EF98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::deconvolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37EF98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x318uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37EF60;
  Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights((void *)v6 + 3, a1);
  *((void *)v6 + 72) = 0;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  *(_OWORD *)(v6 + 632) = 0u;
  *(_OWORD *)(v6 + 648) = 0u;
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 408) = v7;
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v6 + 456) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v6 + 472) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v6 + 424) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v6 + 440) = v9;
  *(void *)(v6 + 485) = *(void *)(a2 + 157);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 344) = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 376) = v11;
  uint64_t v12 = *a1;
  v6[492] = *(unsigned char *)(*a1 + 125);
  *(_OWORD *)(v6 + 664) = 0u;
  *(_OWORD *)(v6 + 680) = 0u;
  *(_OWORD *)(v6 + 696) = 0u;
  *(_OWORD *)(v6 + 712) = 0u;
  *(_OWORD *)(v6 + 728) = 0u;
  *(_OWORD *)(v6 + 744) = 0u;
  *((void *)v6 + 3) = &unk_1EE318980;
  *(_OWORD *)(v6 + 760) = 0u;
  *(_OWORD *)(v6 + 776) = 0u;
  uint64_t v13 = a1[1];
  if (v13)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    std::string::size_type v14 = (std::__shared_weak_count *)*((void *)v6 + 96);
    *((void *)v6 + 95) = v12;
    *((void *)v6 + 96) = v13;
    if (v14) {
      nitro::nitro_function::nitro_function(v14);
    }
  }
  else
  {
    *((void *)v6 + 95) = v12;
    *((void *)v6 + 96) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929CBD40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::get_f16_weights@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 600);
  *a2 = *(void *)(result + 592);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 592) = v2;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 600);
  *(void *)(a1 + 600) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::get_weights@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 584);
  *a2 = *(void *)(result + 576);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::get_biases@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 568);
  *a2 = *(void *)(result + 560);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::set_weights(uint64_t a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v4 = *(_DWORD *)(a1 + 420);
  if (v4 <= 1) {
    int v4 = 1;
  }
  Espresso::unshuffle_from_gpu_conv_weights(v6, *(_DWORD *)(a1 + 344), (*(_DWORD *)(a1 + 348) - 1) / v4 + 1, (uint64_t *)&v7);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 584);
  *(_OWORD *)(a1 + 576) = v7;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

void sub_1929CBE90(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 576) = v2;
  int v4 = *(std::__shared_weak_count **)(a1 + 584);
  *(void *)(a1 + 584) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 560) = v5;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 568);
  *(void *)(a1 + 568) = v4;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  *(_DWORD *)(a1 + 336) = *a2 != 0;
}

uint64_t Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::num_weights_blob(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 336)) {
    return 2;
  }
  else {
    return 1;
  }
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::get_weights_blob(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 == 1)
  {
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,1>>>((uint64_t *)&v4, a1 + 1, a1 + 70);
    goto LABEL_5;
  }
  if (!a2)
  {
    Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,4>>>((uint64_t *)&v4, a1 + 1, a1 + 72);
LABEL_5:
    *(_OWORD *)a3 = v4;
    return;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
}

BOOL wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::supports_weight_key(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = a2;
  if (wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::supports_weight_key(a1, a2))return 1; {
  int v4 = *((char *)v2 + 23);
  }
  if (v4 < 0)
  {
    if (*((void *)v2 + 1) != 10) {
      return 0;
    }
    uint64_t v2 = *(_DWORD **)v2;
  }
  else if (v4 != 10)
  {
    return 0;
  }
  return *(void *)v2 == 0x6163735F74736F70 && *((_WORD *)v2 + 4) == 25964;
}

uint64_t wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::supports_weight_key(uint64_t a1, _DWORD *a2)
{
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    int v3 = *((unsigned __int8 *)a2 + 23);
    HIDWORD(v4) = v3;
    LODWORD(v4) = (v3 << 24) - 0x4000000;
    switch((v4 >> 25))
    {
      case 0u:
        if (*a2 == 944987991) {
          return 1;
        }
        if (v3 == 8) {
          goto LABEL_14;
        }
        if (v3 == 18) {
          goto LABEL_17;
        }
        if (v3 != 10) {
          goto LABEL_50;
        }
LABEL_7:
        if (*(void *)a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964) {
          return 1;
        }
        if (v3 == 18) {
          goto LABEL_17;
        }
        uint64_t v6 = a2;
        if (v3 == 10) {
          goto LABEL_46;
        }
        if (v3 != 8) {
          goto LABEL_50;
        }
LABEL_14:
        if (*(void *)a2 == 0x736169625F656E61) {
          return 1;
        }
        uint64_t v6 = a2;
        if (v3 == 10) {
          goto LABEL_46;
        }
        if (v3 != 18) {
          goto LABEL_50;
        }
LABEL_17:
        if (*(void *)a2 == 0x5F6363615F656E61
          && *((void *)a2 + 1) == 0x6968735F73616962
          && *((_WORD *)a2 + 8) == 29798)
        {
          return 1;
        }
        uint64_t v6 = a2;
        if (v3 != 10) {
          goto LABEL_50;
        }
        goto LABEL_46;
      case 2u:
        goto LABEL_14;
      case 3u:
        goto LABEL_7;
      case 7u:
        goto LABEL_17;
      default:
        goto LABEL_50;
    }
  }
  uint64_t v9 = *((void *)a2 + 1);
  *((void *)&v10 + 1) = v9;
  *(void *)&long long v10 = v9 - 4;
  switch((unint64_t)(v10 >> 1))
  {
    case 0uLL:
      if (**(_DWORD **)a2 != 944987991) {
        goto LABEL_50;
      }
      return 1;
    case 2uLL:
      goto LABEL_34;
    case 3uLL:
      if (**(void **)a2 == 0x6163735F74736F70 && *(_WORD *)(*(void *)a2 + 8) == 25964) {
        return 1;
      }
      if (v9 != 8) {
        goto LABEL_35;
      }
LABEL_34:
      if (**(void **)a2 == 0x736169625F656E61) {
        return 1;
      }
LABEL_35:
      if (v9 == 10) {
        goto LABEL_45;
      }
      if (v9 != 18) {
        goto LABEL_50;
      }
LABEL_37:
      if (**(void **)a2 == 0x5F6363615F656E61
        && *(void *)(*(void *)a2 + 8) == 0x6968735F73616962
        && *(_WORD *)(*(void *)a2 + 16) == 29798)
      {
        return 1;
      }
      if (v9 != 10) {
        goto LABEL_50;
      }
LABEL_45:
      uint64_t v6 = *(_DWORD **)a2;
LABEL_46:
      uint64_t v14 = *(void *)v6;
      int v15 = *((unsigned __int16 *)v6 + 4);
      if (v14 == 0x61727478655F7868 && v15 == 26207) {
        return 1;
      }
LABEL_50:
      BOOL v17 = Espresso::generic_convolution_kernel::supports_weight_key(a1, a2);
      return v17 | Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 0);
    case 7uLL:
      goto LABEL_37;
    default:
      goto LABEL_50;
  }
}

void wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::__set_weights_finalize(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 560);
  int v3 = *(std::__shared_weak_count **)(a1 + 568);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2)
  {
    if (*(void *)(a1 + 656)) {
      goto LABEL_45;
    }
    if (!*(void *)(a1 + 672))
    {
      if (*(void *)(a1 + 640))
      {
        uint64_t v11 = *(void *)(a1 + 688);
        if (v11)
        {
          float v12 = **(float **)(v11 + 16);
          uint64_t v13 = *(std::__shared_weak_count **)(a1 + 648);
          v22[0] = *(void *)(a1 + 640);
          v22[1] = v13;
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v21[0] = v2;
          v21[1] = (uint64_t)v3;
          if (v3) {
            atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::ane_style_post_scale_bias((uint64_t)v22, v21, (uint64_t)&v23, v12);
          if (v3) {
            nitro::nitro_function::nitro_function(v3);
          }
          if (v13) {
            nitro::nitro_function::nitro_function(v13);
          }
          std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v20, 1, 1, 1, 1);
          uint64_t v14 = v20;
          int v15 = *(std::__shared_weak_count **)(a1 + 680);
          *(_OWORD *)(a1 + 672) = v20;
          if (v15)
          {
            nitro::nitro_function::nitro_function(v15);
            uint64_t v16 = *(void *)(a1 + 672);
          }
          else
          {
            uint64_t v16 = v14;
          }
          **(_DWORD **)(v16 + 16) = v27;
          uint64_t v18 = v25;
          BOOL v17 = v26;
          if (v26) {
            atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)(a1 + 656) = v18;
          uint64_t v19 = *(std::__shared_weak_count **)(a1 + 664);
          *(void *)(a1 + 664) = v17;
          if (v19) {
            nitro::nitro_function::nitro_function(v19);
          }
          if (v26) {
            nitro::nitro_function::nitro_function(v26);
          }
          if (v24) {
            nitro::nitro_function::nitro_function(v24);
          }
          if (*(void *)(a1 + 656))
          {
LABEL_45:
            if (*(void *)(a1 + 672))
            {
              uint64_t v4 = *(void *)(a1 + 640);
              if (v4)
              {
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v23, *(_DWORD *)(v4 + 8), 1, 1, 1);
                uint64_t v5 = v23;
                if (*(_DWORD *)(v23 + 8))
                {
                  unint64_t v6 = 0;
                  do
                  {
                    double v7 = *(float *)(*(void *)(*(void *)(a1 + 656) + 16) + 4 * v6);
                    float v8 = ldexp(1.0, **(_DWORD **)(*(void *)(a1 + 672) + 16)) * v7;
                    *(float *)(*(void *)(v5 + 16) + 4 * v6++) = v8;
                  }
                  while (v6 < *(unsigned int *)(v5 + 8));
                }
                uint64_t v9 = v24;
                if (v24) {
                  atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                *(void *)(a1 + 720) = v5;
                long long v10 = *(std::__shared_weak_count **)(a1 + 728);
                *(void *)(a1 + 728) = v9;
                if (v10) {
                  nitro::nitro_function::nitro_function(v10);
                }
                if (v9) {
                  nitro::nitro_function::nitro_function(v9);
                }
              }
            }
          }
        }
      }
    }
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

void sub_1929CC534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  Espresso::dropout_augment_lowmem::ret_t::~ret_t((Espresso::dropout_augment_lowmem::ret_t *)va);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  _Unwind_Resume(a1);
}

void sub_1929CC584()
{
  if (!v0) {
    JUMPOUT(0x1929CC560);
  }
  JUMPOUT(0x1929CC558);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::__set_weight_raw_blob(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, char *a4, unint64_t a5, uint64_t *a6)
{
  float v8 = a3;
  wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::__set_weight_raw_blob((std::__shared_weak_count **)a1, a2, a3, a4, a5, a6);
  int v10 = (char)v8[23];
  if (v10 < 0)
  {
    if (*((void *)v8 + 1) != 10) {
      return;
    }
    float v8 = *(unsigned __int8 **)v8;
  }
  else if (v10 != 10)
  {
    return;
  }
  if (*(void *)v8 == 0x6163735F74736F70 && *((_WORD *)v8 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v54, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v12 = v54.__r_.__value_.__r.__words[0];
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 760);
    *(_OWORD *)(a1 + 752) = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
    if (v13)
    {
      nitro::nitro_function::nitro_function(v13);
      std::string::size_type v14 = *(void *)(a1 + 752);
    }
    else
    {
      std::string::size_type v14 = v12;
    }
    if (a5 != 4 * *(int *)(v14 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v17 = a5;
      uint64_t v18 = exception;
      std::to_string(&v47, v17);
      uint64_t v19 = std::string::insert(&v47, 0, "Unexpected size s=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      uint64_t v21 = std::string::append(&v48, "/blob=");
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v46, 4 * *(int *)(*(void *)(a1 + 752) + 8));
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &v46;
      }
      else {
        uint64_t v23 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v46.__r_.__value_.__l.__size_;
      }
      uint64_t v25 = std::string::append(&v49, (const std::string::value_type *)v23, size);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, " @ ");
      if ((v45 & 0x80u) == 0) {
        int v27 = (const std::string::value_type *)v44;
      }
      else {
        int v27 = (const std::string::value_type *)v44[0];
      }
      if ((v45 & 0x80u) == 0) {
        std::string::size_type v28 = v45;
      }
      else {
        std::string::size_type v28 = v44[1];
      }
      uint64_t v29 = std::string::append(&v50, v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v31 = std::string::append(&v51, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, ":");
      if ((v43 & 0x80u) == 0) {
        uint64_t v33 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v33 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v34 = v43;
      }
      else {
        std::string::size_type v34 = v42[1];
      }
      int v35 = std::string::append(&v52, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v41, 197);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v37 = &v41;
      }
      else {
        unint64_t v37 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = v41.__r_.__value_.__l.__size_;
      }
      uint64_t v39 = std::string::append(&v53, (const std::string::value_type *)v37, v38);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v18, &v54);
      __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v15 = *(void **)(v14 + 16);
    memcpy(v15, a4, a5);
  }
}

void sub_1929CC8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::__set_weight_raw_blob(std::__shared_weak_count **this, uint64_t *a2, unsigned __int8 *a3, char *a4, unint64_t a5, uint64_t *a6)
{
  size_t v6 = a5;
  double v7 = a4;
  if (((char)a3[23] & 0x80000000) == 0)
  {
    int v9 = a3[23];
    HIDWORD(v10) = v9;
    LODWORD(v10) = (v9 << 24) - 0x4000000;
    switch((v10 >> 25))
    {
      case 0u:
        if (*(_DWORD *)a3 == 944987991) {
          goto LABEL_28;
        }
        if (v9 == 8) {
          goto LABEL_14;
        }
        if (v9 == 18) {
          goto LABEL_17;
        }
        if (v9 != 10) {
          goto LABEL_55;
        }
LABEL_7:
        if (*(void *)a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964) {
          goto LABEL_62;
        }
        if (v9 == 18) {
          goto LABEL_17;
        }
        std::string::size_type v12 = a3;
        if (v9 == 10) {
          goto LABEL_51;
        }
        if (v9 != 8) {
          goto LABEL_55;
        }
LABEL_14:
        if (*(void *)a3 == 0x736169625F656E61) {
          goto LABEL_58;
        }
        std::string::size_type v12 = a3;
        if (v9 == 10) {
          goto LABEL_51;
        }
        if (v9 != 18) {
          goto LABEL_55;
        }
LABEL_17:
        if (*(void *)a3 == 0x5F6363615F656E61
          && *((void *)a3 + 1) == 0x6968735F73616962
          && *((_WORD *)a3 + 8) == 29798)
        {
          goto LABEL_60;
        }
        std::string::size_type v12 = a3;
        if (v9 != 10) {
          goto LABEL_55;
        }
        goto LABEL_51;
      case 2u:
        goto LABEL_14;
      case 3u:
        goto LABEL_7;
      case 7u:
        goto LABEL_17;
      default:
        goto LABEL_55;
    }
  }
  uint64_t v15 = *((void *)a3 + 1);
  *((void *)&v16 + 1) = v15;
  *(void *)&long long v16 = v15 - 4;
  switch((unint64_t)(v16 >> 1))
  {
    case 0uLL:
      if (**(_DWORD **)a3 != 944987991) {
        goto LABEL_55;
      }
LABEL_28:
      Espresso::generic_convolution_kernel::create_weights_blob((Espresso::generic_convolution_kernel *)this, &v151);
      unint64_t v17 = this[89];
      *((_OWORD *)this + 44) = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
      if (v17) {
        nitro::nitro_function::nitro_function(v17);
      }
      if (v6)
      {
        uint64_t v18 = (float *)this[88][1].__vftable;
        do
        {
          int v19 = *v7++;
          *v18++ = (float)v19;
          --v6;
        }
        while (v6);
      }
      return;
    case 2uLL:
      goto LABEL_39;
    case 3uLL:
      if (**(void **)a3 == 0x6163735F74736F70 && *(_WORD *)(*(void *)a3 + 8) == 25964)
      {
LABEL_62:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v151, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        std::string::size_type v31 = v151.__r_.__value_.__r.__words[0];
        long long v32 = this[81];
        *((_OWORD *)this + 40) = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
        if (v32)
        {
          nitro::nitro_function::nitro_function(v32);
          std::string::size_type v28 = (std::string::size_type)this[80];
        }
        else
        {
          std::string::size_type v28 = v31;
        }
        if (v6 != 4 * *(int *)(v28 + 8))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          unint64_t v86 = v6;
          uint64_t v87 = exception;
          std::to_string(&v144, v86);
          std::string::size_type v88 = std::string::insert(&v144, 0, "Unexpected size s=");
          long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
          v145.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v89;
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          v88->__r_.__value_.__r.__words[0] = 0;
          long long v90 = std::string::append(&v145, "/blob=");
          long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
          v146.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v91;
          v90->__r_.__value_.__l.__size_ = 0;
          v90->__r_.__value_.__r.__words[2] = 0;
          v90->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v143, 4 * SLODWORD(this[80]->__shared_owners_));
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v92 = &v143;
          }
          else {
            std::string::size_type v92 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v143.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v143.__r_.__value_.__l.__size_;
          }
          long long v94 = std::string::append(&v146, (const std::string::value_type *)v92, size);
          long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v95;
          v94->__r_.__value_.__l.__size_ = 0;
          v94->__r_.__value_.__r.__words[2] = 0;
          v94->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v140, " @ ");
          if ((v142 & 0x80u) == 0) {
            long long v96 = (const std::string::value_type *)&v140;
          }
          else {
            long long v96 = v140;
          }
          if ((v142 & 0x80u) == 0) {
            std::string::size_type v97 = v142;
          }
          else {
            std::string::size_type v97 = v141;
          }
          std::string::size_type v98 = std::string::append(&v147, v96, v97);
          long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v99;
          v98->__r_.__value_.__l.__size_ = 0;
          v98->__r_.__value_.__r.__words[2] = 0;
          v98->__r_.__value_.__r.__words[0] = 0;
          long long v100 = std::string::append(&v148, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v101;
          v100->__r_.__value_.__l.__size_ = 0;
          v100->__r_.__value_.__r.__words[2] = 0;
          v100->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v137, ":");
          if ((v139 & 0x80u) == 0) {
            std::string::size_type v102 = (const std::string::value_type *)&v137;
          }
          else {
            std::string::size_type v102 = v137;
          }
          if ((v139 & 0x80u) == 0) {
            std::string::size_type v103 = v139;
          }
          else {
            std::string::size_type v103 = v138;
          }
          long long v104 = std::string::append(&v149, v102, v103);
          long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v105;
          v104->__r_.__value_.__l.__size_ = 0;
          v104->__r_.__value_.__r.__words[2] = 0;
          v104->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v136, 123);
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v106 = &v136;
          }
          else {
            std::string v106 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v107 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v107 = v136.__r_.__value_.__l.__size_;
          }
          long long v108 = std::string::append(&v150, (const std::string::value_type *)v106, v107);
          long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v109;
          v108->__r_.__value_.__l.__size_ = 0;
          v108->__r_.__value_.__r.__words[2] = 0;
          v108->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v87, &v151);
          __cxa_throw(v87, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        goto LABEL_149;
      }
      if (v15 != 8) {
        goto LABEL_40;
      }
LABEL_39:
      if (**(void **)a3 == 0x736169625F656E61)
      {
LABEL_58:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v151, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        std::string::size_type v26 = v151.__r_.__value_.__r.__words[0];
        int v27 = this[83];
        *((_OWORD *)this + 41) = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
        if (v27)
        {
          nitro::nitro_function::nitro_function(v27);
          std::string::size_type v28 = (std::string::size_type)this[82];
        }
        else
        {
          std::string::size_type v28 = v26;
        }
        if (v6 != 4 * *(int *)(v28 + 8))
        {
          int v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          unint64_t v36 = v6;
          unint64_t v37 = v35;
          std::to_string(&v144, v36);
          std::string::size_type v38 = std::string::insert(&v144, 0, "Unexpected size s=");
          long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
          v145.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v39;
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          long long v40 = std::string::append(&v145, "/blob=");
          long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
          v146.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v41;
          v40->__r_.__value_.__l.__size_ = 0;
          v40->__r_.__value_.__r.__words[2] = 0;
          v40->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v143, 4 * SLODWORD(this[82]->__shared_owners_));
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v42 = &v143;
          }
          else {
            std::string::size_type v42 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v43 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v43 = v143.__r_.__value_.__l.__size_;
          }
          uint64_t v44 = std::string::append(&v146, (const std::string::value_type *)v42, v43);
          long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v140, " @ ");
          if ((v142 & 0x80u) == 0) {
            std::string v46 = (const std::string::value_type *)&v140;
          }
          else {
            std::string v46 = v140;
          }
          if ((v142 & 0x80u) == 0) {
            std::string::size_type v47 = v142;
          }
          else {
            std::string::size_type v47 = v141;
          }
          std::string v48 = std::string::append(&v147, v46, v47);
          long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          std::string v50 = std::string::append(&v148, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v137, ":");
          if ((v139 & 0x80u) == 0) {
            std::string v52 = (const std::string::value_type *)&v137;
          }
          else {
            std::string v52 = v137;
          }
          if ((v139 & 0x80u) == 0) {
            std::string::size_type v53 = v139;
          }
          else {
            std::string::size_type v53 = v138;
          }
          std::string v54 = std::string::append(&v149, v52, v53);
          long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v55;
          v54->__r_.__value_.__l.__size_ = 0;
          v54->__r_.__value_.__r.__words[2] = 0;
          v54->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v136, 127);
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v56 = &v136;
          }
          else {
            std::string::size_type v56 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v57 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v57 = v136.__r_.__value_.__l.__size_;
          }
          long long v58 = std::string::append(&v150, (const std::string::value_type *)v56, v57);
          long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v37, &v151);
          __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        goto LABEL_149;
      }
LABEL_40:
      if (v15 == 10) {
        goto LABEL_50;
      }
      if (v15 != 18) {
        goto LABEL_55;
      }
LABEL_42:
      if (**(void **)a3 == 0x5F6363615F656E61
        && *(void *)(*(void *)a3 + 8) == 0x6968735F73616962
        && *(_WORD *)(*(void *)a3 + 16) == 29798)
      {
LABEL_60:
        std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v151, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        std::string::size_type v29 = v151.__r_.__value_.__r.__words[0];
        long long v30 = this[85];
        *((_OWORD *)this + 42) = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
        if (v30)
        {
          nitro::nitro_function::nitro_function(v30);
          std::string::size_type v28 = (std::string::size_type)this[84];
        }
        else
        {
          std::string::size_type v28 = v29;
        }
        if (v6 != 4 * *(int *)(v28 + 8))
        {
          int v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          unint64_t v61 = v6;
          uint64_t v62 = v60;
          std::to_string(&v144, v61);
          long long v63 = std::string::insert(&v144, 0, "Unexpected size s=");
          long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
          v145.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v64;
          v63->__r_.__value_.__l.__size_ = 0;
          v63->__r_.__value_.__r.__words[2] = 0;
          v63->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v65 = std::string::append(&v145, "/blob=");
          long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          v146.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v66;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v143, 4 * SLODWORD(this[84]->__shared_owners_));
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v67 = &v143;
          }
          else {
            long long v67 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v68 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v68 = v143.__r_.__value_.__l.__size_;
          }
          std::string::size_type v69 = std::string::append(&v146, (const std::string::value_type *)v67, v68);
          long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v70;
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v140, " @ ");
          if ((v142 & 0x80u) == 0) {
            long long v71 = (const std::string::value_type *)&v140;
          }
          else {
            long long v71 = v140;
          }
          if ((v142 & 0x80u) == 0) {
            std::string::size_type v72 = v142;
          }
          else {
            std::string::size_type v72 = v141;
          }
          long long v73 = std::string::append(&v147, v71, v72);
          long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v74;
          v73->__r_.__value_.__l.__size_ = 0;
          v73->__r_.__value_.__r.__words[2] = 0;
          v73->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v75 = std::string::append(&v148, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v76;
          v75->__r_.__value_.__l.__size_ = 0;
          v75->__r_.__value_.__r.__words[2] = 0;
          v75->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v137, ":");
          if ((v139 & 0x80u) == 0) {
            long long v77 = (const std::string::value_type *)&v137;
          }
          else {
            long long v77 = v137;
          }
          if ((v139 & 0x80u) == 0) {
            std::string::size_type v78 = v139;
          }
          else {
            std::string::size_type v78 = v138;
          }
          std::string::size_type v79 = std::string::append(&v149, v77, v78);
          long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v80;
          v79->__r_.__value_.__l.__size_ = 0;
          v79->__r_.__value_.__r.__words[2] = 0;
          v79->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v136, 131);
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v81 = &v136;
          }
          else {
            long long v81 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v82 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v82 = v136.__r_.__value_.__l.__size_;
          }
          uint64_t v83 = std::string::append(&v150, (const std::string::value_type *)v81, v82);
          long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v84;
          v83->__r_.__value_.__l.__size_ = 0;
          v83->__r_.__value_.__r.__words[2] = 0;
          v83->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v62, &v151);
          __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      else
      {
        if (v15 != 10)
        {
LABEL_55:
          Espresso::convolution_kernel_cpu::__set_weight_raw_blob((uint64_t *)this, a2, a3, a4, a5, a6);
          return;
        }
LABEL_50:
        std::string::size_type v12 = *(unsigned __int8 **)a3;
LABEL_51:
        uint64_t v23 = *(void *)v12;
        int v24 = *((unsigned __int16 *)v12 + 4);
        if (v23 != 0x61727478655F7868 || v24 != 26207) {
          goto LABEL_55;
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v151, (unint64_t)(int)a5 >> 2, 1, 1, 1);
        std::string::size_type v33 = v151.__r_.__value_.__r.__words[0];
        std::string::size_type v34 = this[87];
        *((_OWORD *)this + 43) = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
        if (v34)
        {
          nitro::nitro_function::nitro_function(v34);
          std::string::size_type v28 = (std::string::size_type)this[86];
        }
        else
        {
          std::string::size_type v28 = v33;
        }
        if (v6 != 4 * *(int *)(v28 + 8))
        {
          v111 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          unint64_t v112 = v6;
          v113 = v111;
          std::to_string(&v144, v112);
          long long v114 = std::string::insert(&v144, 0, "Unexpected size s=");
          long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
          v145.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v115;
          v114->__r_.__value_.__l.__size_ = 0;
          v114->__r_.__value_.__r.__words[2] = 0;
          v114->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v116 = std::string::append(&v145, "/blob=");
          long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
          v146.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v117;
          v116->__r_.__value_.__l.__size_ = 0;
          v116->__r_.__value_.__r.__words[2] = 0;
          v116->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v143, 4 * SLODWORD(this[86]->__shared_owners_));
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v118 = &v143;
          }
          else {
            long long v118 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v119 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v119 = v143.__r_.__value_.__l.__size_;
          }
          long long v120 = std::string::append(&v146, (const std::string::value_type *)v118, v119);
          long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v121;
          v120->__r_.__value_.__l.__size_ = 0;
          v120->__r_.__value_.__r.__words[2] = 0;
          v120->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v140, " @ ");
          if ((v142 & 0x80u) == 0) {
            std::string::size_type v122 = (const std::string::value_type *)&v140;
          }
          else {
            std::string::size_type v122 = v140;
          }
          if ((v142 & 0x80u) == 0) {
            std::string::size_type v123 = v142;
          }
          else {
            std::string::size_type v123 = v141;
          }
          long long v124 = std::string::append(&v147, v122, v123);
          long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v125;
          v124->__r_.__value_.__l.__size_ = 0;
          v124->__r_.__value_.__r.__words[2] = 0;
          v124->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v126 = std::string::append(&v148, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
          long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v127;
          v126->__r_.__value_.__l.__size_ = 0;
          v126->__r_.__value_.__r.__words[2] = 0;
          v126->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v137, ":");
          if ((v139 & 0x80u) == 0) {
            long long v128 = (const std::string::value_type *)&v137;
          }
          else {
            long long v128 = v137;
          }
          if ((v139 & 0x80u) == 0) {
            std::string::size_type v129 = v139;
          }
          else {
            std::string::size_type v129 = v138;
          }
          v130 = std::string::append(&v149, v128, v129);
          long long v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
          v150.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v131;
          v130->__r_.__value_.__l.__size_ = 0;
          v130->__r_.__value_.__r.__words[2] = 0;
          v130->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v136, 135);
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned __int8 v132 = &v136;
          }
          else {
            unsigned __int8 v132 = (std::string *)v136.__r_.__value_.__r.__words[0];
          }
          if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v133 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v133 = v136.__r_.__value_.__l.__size_;
          }
          std::string::size_type v134 = std::string::append(&v150, (const std::string::value_type *)v132, v133);
          long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
          v151.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v135;
          v134->__r_.__value_.__l.__size_ = 0;
          v134->__r_.__value_.__r.__words[2] = 0;
          v134->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v113, &v151);
          __cxa_throw(v113, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
LABEL_149:
      long long v110 = *(void **)(v28 + 16);
      memcpy(v110, v7, v6);
      return;
    case 7uLL:
      goto LABEL_42;
    default:
      goto LABEL_55;
  }
}

void sub_1929CD680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (v60) {
    __cxa_free_exception(v59);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::share_weights(void *a1, const void **a2)
{
  Espresso::generic_convolution_kernel::share_weights(a1, a2);
  if (*a2)
  {
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = v4[72];
      uint64_t v7 = v4[73];
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      a1[72] = v6;
      float v8 = (std::__shared_weak_count *)a1[73];
      a1[73] = v7;
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      uint64_t v9 = v5[70];
      uint64_t v10 = v5[71];
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      a1[70] = v9;
      uint64_t v11 = (std::__shared_weak_count *)a1[71];
      a1[71] = v10;
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      uint64_t v12 = v5[74];
      uint64_t v13 = v5[75];
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      a1[74] = v12;
      std::string::size_type v14 = (std::__shared_weak_count *)a1[75];
      a1[75] = v13;
      if (v14)
      {
        nitro::nitro_function::nitro_function(v14);
      }
    }
  }
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v62, 0, sizeof(v62));
  memset(v61, 0, sizeof(v61));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v8 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 744);
  v60[0] = *(void *)(a1 + 736);
  v60[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::convert_layer_data_to_fp32(v60, v62, *a4, a4[1], 1, v8);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 744);
  v59[0] = *(void *)(a1 + 736);
  v59[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::convert_layer_data_to_fp32(v59, v61, *a3, a3[1], 0, 0);
  std::string::size_type v56 = (__n128 *)a1;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::string::size_type v14 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v15 = 0;
    do
    {
      if (!v8
        && (!((unsigned int (*)(std::__shared_weak_count *))v14[2 * v15]->__on_zero_shared_weak)(v14[2 * v15])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v15]->__on_zero_shared_weak)((*a4)[2 * v15]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v15][4].__shared_weak_owners_;
        uint64_t v16 = v62[0] + 16 * v15;
        uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v19 = *((void *)v17 + 20);
        long long v20 = (std::__shared_weak_count *)*((void *)v17 + 21);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = 0;
        long long v22 = *(float **)(v19 + 24);
        vDSP_Length v23 = *(int *)(v19 + 8);
        uint64_t v24 = v19 + 12;
        do
        {
          v23 *= *(int *)(v24 + v21);
          v21 += 4;
        }
        while (v21 != 12);
        vDSP_vsmul(v22, 1, (const float *)&__B, v22, 1, v23);
        if (v20) {
          nitro::nitro_function::nitro_function(v20);
        }
        if (v18) {
          nitro::nitro_function::nitro_function(v18);
        }
      }
      ++v15;
      std::string::size_type v14 = *a4;
    }
    while (v15 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v25 = v56;
  wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::__launch(v56, a2, (uint64_t)v61, (uint64_t)v62, v11, v12, v13);
  unint64_t v26 = v56[47].n128_u64[0];
  if (v26)
  {
    int v27 = (std::__shared_weak_count *)v56[47].n128_u64[1];
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v28 = v61[0];
    if (*v61[0])
    {
      if (v29)
      {
        long long v30 = (std::__shared_weak_count *)v28[1];
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v29 = 0;
    }
    long long v30 = 0;
LABEL_37:
    long long v55 = v30;
    LODWORD(v31) = *(_DWORD *)(v26 + 8);
    if (v31 == 1)
    {
      uint64_t v32 = 0;
      uint64_t v33 = *((void *)v29 + 20);
      std::string::size_type v34 = *(float **)(v33 + 24);
      vDSP_Length v35 = *(int *)(v33 + 8);
      uint64_t v36 = v33 + 12;
      do
      {
        v35 *= *(int *)(v36 + v32);
        v32 += 4;
      }
      while (v32 != 12);
      vDSP_vsmul(v34, 1, *(const float **)(v26 + 16), v34, 1, v35);
    }
    else
    {
      int v37 = v29[4];
      if (v31 != v37) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v31, v37);
      }
      int v38 = v29[5];
      if (v38)
      {
        uint64_t v39 = 0;
        unint64_t v40 = 0;
        vDSP_Length v41 = v29[2] * (uint64_t)v29[3];
        vDSP_Length v57 = 4 * (int)v31 * v41;
        do
        {
          if (v31)
          {
            uint64_t v42 = 0;
            unint64_t v43 = 0;
            uint64_t v44 = v39;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v29 + 20) + 24) + v44), 1, (const float *)(*(void *)(v26 + 16) + v42), (float *)(*(void *)(*((void *)v29 + 20) + 24) + v44), 1, v41);
              ++v43;
              unint64_t v31 = v29[4];
              v42 += 4;
              v44 += 4 * v41;
            }
            while (v43 < v31);
            int v38 = v29[5];
          }
          ++v40;
          v39 += v57;
        }
        while (v40 < v38);
      }
    }
    if (v55) {
      nitro::nitro_function::nitro_function(v55);
    }
    uint64_t v25 = v56;
    if (v27) {
      nitro::nitro_function::nitro_function(v27);
    }
  }
  long long v45 = (std::__shared_weak_count *)v25[46].n128_u64[1];
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v58 = v45;
  std::string v46 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v47 = 0;
    unint64_t v48 = 0;
    do
    {
      long long v49 = v46[v47];
      if (v49)
      {
        if (v50)
        {
          long long v51 = v46[v47 + 1];
          if (v51) {
            atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v50 = 0;
      }
      long long v51 = 0;
LABEL_63:
      std::string v52 = v61[0];
      std::string::size_type v53 = v61[0][v47];
      if (v53
      {
        std::string v54 = (std::__shared_weak_count *)v52[v47 + 1];
        if (v54) {
          atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v54 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v50, (uint64_t)v53 + 160, 1.0);
      if (v54) {
        nitro::nitro_function::nitro_function(v54);
      }
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      ++v48;
      std::string v46 = *a3;
      v47 += 2;
    }
    while (v48 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }
  float __B = v61;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v61[0] = (void **)v62;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v61);
}

void sub_1929CDFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    BOOL v8 = a3;
    unint64_t v26 = a2 + 2;
    while (1)
    {
      double v12 = *v8;
      __n128 v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      float v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      long long v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        int v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      std::string::size_type v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        vDSP_Length v35 = v26;
        vDSP_Length v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        uint64_t v24 = (std::__shared_weak_count *)&v23[16 * v19];
        unint64_t v31 = v23;
        uint64_t v32 = v24;
        std::string::size_type v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    double v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      double v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      unint64_t v31 = 0;
      uint64_t v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}

void sub_1929CE314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 88);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::__launch(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, double a6, float a7)
{
  unint64_t v10 = a1[36].n128_u64[0];
  __n128 v11 = (std::__shared_weak_count *)a1[36].n128_u64[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v12 = a1[37].n128_u64[0];
  float v13 = (std::__shared_weak_count *)a1[37].n128_u64[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = a1[35].n128_i64[0];
  std::__shared_count v15 = (std::__shared_weak_count *)a1[35].n128_u64[1];
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v16 = a1[44].n128_u64[0];
  if (v16)
  {
    unint64_t v17 = (std::__shared_weak_count *)a1[37].n128_u64[1];
    a5 = 0uLL;
    a1[37] = 0u;
    if (v17)
    {
      nitro::nitro_function::nitro_function(v17);
      unint64_t v16 = a1[44].n128_u64[0];
    }
    unint64_t v18 = a1[44].n128_u64[1];
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    a1[36].n128_u64[0] = v16;
    uint64_t v19 = (std::__shared_weak_count *)a1[36].n128_u64[1];
    a1[36].n128_u64[1] = v18;
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
  }
  if (a1[45].n128_u64[0])
  {
    uint64_t v20 = (std::__shared_weak_count *)a1[45].n128_u64[1];
    v24[0] = a1[45].n128_i64[0];
    v24[1] = (uint64_t)v20;
    if (v20)
    {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::set_biases((uint64_t)a1, v24);
      nitro::nitro_function::nitro_function(v20);
    }
    else
    {
      Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::set_biases((uint64_t)a1, v24);
    }
  }
  Espresso::convolution_kernel_cpu::__launch(a1, a5, a6, a7, a2, a3, a4);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a1[36].n128_u64[0] = v10;
  uint64_t v21 = (std::__shared_weak_count *)a1[36].n128_u64[1];
  a1[36].n128_u64[1] = (unint64_t)v11;
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a1[37].n128_u64[0] = v12;
  unint64_t v22 = (std::__shared_weak_count *)a1[37].n128_u64[1];
  a1[37].n128_u64[1] = (unint64_t)v13;
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  v23[0] = v14;
  v23[1] = (uint64_t)v15;
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::set_biases((uint64_t)a1, v23);
    nitro::nitro_function::nitro_function(v15);
    nitro::nitro_function::nitro_function(v15);
    if (!v13) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::set_biases((uint64_t)a1, v23);
  if (v13) {
LABEL_28:
  }
    nitro::nitro_function::nitro_function(v13);
LABEL_29:
  if (v11)
  {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_1929CE5A4(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_5;
}

void wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>::~wrapper_kernel(Espresso::generic_convolution_kernel *this)
{
  *(void *)this = &unk_1EE318980;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 95);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 93);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::~wrapper_kernel_with_weights(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE318980;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 95);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 93);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::~wrapper_kernel_with_weights(this);
}

void wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::~wrapper_kernel_with_weights(Espresso::generic_convolution_kernel *this)
{
  *(void *)this = &unk_1EE321CE0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 89);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 87);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 85);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 83);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  *(void *)this = &unk_1EE357C78;
  BOOL v8 = (std::__shared_weak_count *)*((void *)this + 79);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  *(void *)this = &unk_1EE3600B8;
  unint64_t v10 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  __n128 v11 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  unint64_t v12 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_convolution_kernel>::clear_weights(uint64_t a1)
{
  Espresso::generic_convolution_kernel::clear_weights((Espresso::generic_convolution_kernel *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 584);
  long long v3 = 0uLL;
  *(_OWORD *)(a1 + 576) = 0u;
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
    long long v3 = 0uLL;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 600);
  *(_OWORD *)(a1 + 592) = v3;
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
  }
}

void wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::~wrapper_kernel_with_weights(Espresso::generic_convolution_kernel *a1)
{
  wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>::~wrapper_kernel_with_weights(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37EF60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<wrapper_kernel<wrapper_kernel_with_weights<Espresso::convolution_kernel_cpu,Espresso::convolution_uniforms>,Espresso::convolution_uniforms>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE37EF60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 ___ZN8Espresso14QuantSimEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x1E8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE37F120;
  Espresso::pool_kernel_cpu::pool_kernel_cpu((uint64_t)(v6 + 24), a1, v7, a2);
  *((void *)v6 + 3) = &unk_1EE3197B0;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    unint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 58);
    *((void *)v6 + 57) = v8;
    *((void *)v6 + 58) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  else
  {
    *((void *)v6 + 57) = v8;
    *((void *)v6 + 58) = 0;
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1929CE9EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 < 0)
  {
    if (a2[1] != 10) {
      return 0;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (v2 != 10)
  {
    return 0;
  }
  return *a2 == 0x6163735F74736F70 && *((_WORD *)a2 + 4) == 25964;
}

void *wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>::__set_weight_raw_blob(void *result, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  uint64_t v7 = result;
  int v8 = *((char *)a3 + 23);
  if (v8 < 0)
  {
    if (a3[1] != 10) {
      return result;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v8 != 10)
  {
    return result;
  }
  if (*a3 == 0x6163735F74736F70 && *((_WORD *)a3 + 4) == 25964)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v52, (unint64_t)(int)a5 >> 2, 1, 1, 1);
    std::string::size_type v10 = v52.__r_.__value_.__r.__words[0];
    __n128 v11 = (std::__shared_weak_count *)*((void *)v7 + 57);
    *((_OWORD *)v7 + 28) = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    if (v11)
    {
      nitro::nitro_function::nitro_function(v11);
      std::string::size_type v12 = *((void *)v7 + 56);
    }
    else
    {
      std::string::size_type v12 = v10;
    }
    if (a5 != 4 * *(int *)(v12 + 8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      unint64_t v15 = a5;
      unint64_t v16 = exception;
      std::to_string(&v45, v15);
      unint64_t v17 = std::string::insert(&v45, 0, "Unexpected size s=");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v46, "/blob=");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, 4 * *(int *)(*((void *)v7 + 56) + 8));
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v44;
      }
      else {
        uint64_t v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v47, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v42, " @ ");
      if ((v43 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v25 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v26 = v43;
      }
      else {
        std::string::size_type v26 = v42[1];
      }
      int v27 = std::string::append(&v48, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANESimEngine/QuantSimEngine.mm");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v40, ":");
      if ((v41 & 0x80u) == 0) {
        unint64_t v31 = (const std::string::value_type *)v40;
      }
      else {
        unint64_t v31 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v32 = v41;
      }
      else {
        std::string::size_type v32 = v40[1];
      }
      uint64_t v33 = std::string::append(&v50, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, 197);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        vDSP_Length v35 = &v39;
      }
      else {
        vDSP_Length v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v39.__r_.__value_.__l.__size_;
      }
      int v37 = std::string::append(&v51, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v52);
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    float v13 = *(void **)(v12 + 16);
    return memcpy(v13, a4, a5);
  }
  return result;
}

void sub_1929CED68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 57) < 0) {
    operator delete(*(void **)(v61 - 80));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0) {
LABEL_28:
    }
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

void wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>::__launch(uint64_t a1, uint64_t a2, std::__shared_weak_count ***a3, std::__shared_weak_count ***a4)
{
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  if (((unsigned int (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3)) {
    BOOL v7 = ((uint64_t (*)(std::__shared_weak_count *))(**a3)->__on_zero_shared_weak)(**a3) == 1;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 440);
  v57[0] = *(void *)(a1 + 432);
  v57[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>::convert_layer_data_to_fp32(v57, v59, *a4, a4[1], 1, v7);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 440);
  v56[0] = *(void *)(a1 + 432);
  v56[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>::convert_layer_data_to_fp32(v56, v58, *a3, a3[1], 0, 0);
  uint64_t v53 = a1;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  __n128 v11 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v12 = 0;
    do
    {
      if (!v7
        && (!((unsigned int (*)(std::__shared_weak_count *))v11[2 * v12]->__on_zero_shared_weak)(v11[2 * v12])
         || ((unsigned int (*)(std::__shared_weak_count *))(*a4)[2 * v12]->__on_zero_shared_weak)((*a4)[2 * v12]) == 1))
      {
        LODWORD(__B) = (*a4)[2 * v12][4].__shared_weak_owners_;
        uint64_t v13 = v59[0] + 16 * v12;
        unint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((void *)v14 + 20);
        unint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 21);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(float **)(v16 + 24);
        vDSP_Length v20 = *(int *)(v16 + 8);
        uint64_t v21 = v16 + 12;
        do
        {
          v20 *= *(int *)(v21 + v18);
          v18 += 4;
        }
        while (v18 != 12);
        vDSP_vsmul(v19, 1, (const float *)&__B, v19, 1, v20);
        if (v17) {
          nitro::nitro_function::nitro_function(v17);
        }
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
      }
      ++v12;
      __n128 v11 = *a4;
    }
    while (v12 < ((char *)a4[1] - (char *)*a4) >> 4);
  }
  uint64_t v22 = v53;
  Espresso::pool_kernel_cpu::__launch(v53, v10, (uint64_t)v58, (uint64_t)v59);
  uint64_t v23 = *(void *)(v53 + 448);
  if (v23)
  {
    long long v24 = *(std::__shared_weak_count **)(v53 + 456);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v58[0];
    if (*v58[0])
    {
      if (v26)
      {
        int v27 = (std::__shared_weak_count *)v25[1];
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
    }
    else
    {
      std::string::size_type v26 = 0;
    }
    int v27 = 0;
LABEL_37:
    std::string v52 = v27;
    LODWORD(v28) = *(_DWORD *)(v23 + 8);
    if (v28 == 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *((void *)v26 + 20);
      unint64_t v31 = *(float **)(v30 + 24);
      vDSP_Length v32 = *(int *)(v30 + 8);
      uint64_t v33 = v30 + 12;
      do
      {
        v32 *= *(int *)(v33 + v29);
        v29 += 4;
      }
      while (v29 != 12);
      vDSP_vsmul(v31, 1, *(const float **)(v23 + 16), v31, 1, v32);
    }
    else
    {
      int v34 = v26[4];
      if (v28 != v34) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,int &>((int)v28, v34);
      }
      int v35 = v26[5];
      if (v35)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        vDSP_Length v38 = v26[2] * (uint64_t)v26[3];
        vDSP_Length v54 = 4 * (int)v28 * v38;
        do
        {
          if (v28)
          {
            uint64_t v39 = 0;
            unint64_t v40 = 0;
            uint64_t v41 = v36;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, (const float *)(*(void *)(v23 + 16) + v39), (float *)(*(void *)(*((void *)v26 + 20) + 24) + v41), 1, v38);
              ++v40;
              unint64_t v28 = v26[4];
              v39 += 4;
              v41 += 4 * v38;
            }
            while (v40 < v28);
            int v35 = v26[5];
          }
          ++v37;
          v36 += v54;
        }
        while (v37 < v35);
      }
    }
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    uint64_t v22 = v53;
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v22 + 440);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v55 = v42;
  unsigned __int8 v43 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    do
    {
      std::string v46 = v43[v44];
      if (v46)
      {
        if (v47)
        {
          std::string v48 = v43[v44 + 1];
          if (v48) {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_63;
        }
      }
      else
      {
        std::string v47 = 0;
      }
      std::string v48 = 0;
LABEL_63:
      std::string v49 = v58[0];
      std::string v50 = v58[0][v44];
      if (v50
      {
        std::string v51 = (std::__shared_weak_count *)v49[v44 + 1];
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        std::string v51 = 0;
      }
      Espresso::QuantSimEngine::blob_container::copy_from_fp32((uint64_t)v47, (uint64_t)v50 + 160, 1.0);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v45;
      unsigned __int8 v43 = *a3;
      v44 += 2;
    }
    while (v45 < ((char *)a3[1] - (char *)*a3) >> 4);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  float __B = v58;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__B);
  v58[0] = (void **)v59;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v58);
}

void sub_1929CF4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  *(void *)(v21 - 88) = &a18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a18 = (void **)&a21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void wrapper_kernel<Espresso::pool_kernel_cpu,Espresso::pool_params>::convert_layer_data_to_fp32(void *a1, void *a2, std::__shared_weak_count **a3, std::__shared_weak_count **a4, int a5, int a6)
{
  if (a3 != a4)
  {
    int v8 = a3;
    std::string::size_type v26 = a2 + 2;
    while (1)
    {
      unint64_t v12 = *v8;
      __n128 v11 = v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v38, a1);
      uint64_t v13 = v38.__vftable;
      Espresso::abstract_blob_container::shape((char *)&v31, (uint64_t)v12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      (*((void (**)(std::__shared_count_vtbl *, char **, uint64_t *))v13->~__shared_count + 2))(v13, &v31, &v29);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      if (__p)
      {
        unint64_t v37 = __p;
        operator delete(__p);
      }
      if (v12) {
        break;
      }
      uint64_t v14 = 0;
      if (a5) {
        goto LABEL_16;
      }
LABEL_20:
      std::__shared_count v15 = v38;
      if (v38.__shared_owners_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v17 = (std::__shared_count *)a2[1];
      unint64_t v16 = a2[2];
      if ((unint64_t)v17 >= v16)
      {
        std::__shared_count v28 = v15;
        uint64_t v19 = ((uint64_t)v17 - *a2) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v16 - *a2;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        int v35 = v26;
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v22);
        long long v24 = (std::__shared_weak_count *)&v23[16 * v19];
        unint64_t v31 = v23;
        vDSP_Length v32 = v24;
        int v34 = &v23[16 * v25];
        v24->std::__shared_count = v28;
        p_uint64_t shared_weak_owners = &v24->__shared_weak_owners_;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a2, &v31);
        uint64_t v18 = (std::__shared_count *)a2[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        std::__shared_count *v17 = v15;
        uint64_t v18 = v17 + 1;
        a2[1] = v18;
      }
      a2[1] = v18;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v38.__shared_owners_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38.__shared_owners_);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      v8 += 2;
      if (v8 == a4) {
        return;
      }
    }
    unint64_t v12 = 0;
    if (v11 && v14)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v12 = v11;
    }
    if (!a5) {
      goto LABEL_20;
    }
LABEL_16:
    if (a6)
    {
      unint64_t v31 = 0;
      vDSP_Length v32 = 0;
      (*(void (**)(void *, char **, void (__cdecl **)(std::__shared_count *__hidden)))(*(void *)v14 + 40))(v14, &v31, &v13[6].__on_zero_shared);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      Espresso::QuantSimEngine::blob_container::copy_to_fp32((uint64_t)v14, &v13[6].__on_zero_shared, 1.0);
    }
    goto LABEL_20;
  }
}