void nitro::flexible_type_impl::gt_operator::operator()(double,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 141, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        v5 = v10;
      }
      else {
        v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925EA344(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925EA358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925EA350);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        v10 = __p;
      }
      else {
        v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925EA600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925EA788(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925EA79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925EA794);
}

void nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"t.num_elem()", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned __int8 v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 157, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        v17 = __p;
      }
      else {
        v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925EAAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11gt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_(_DWORD *a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v36, (uint64_t)a2);
      v42 = &v62;
      nitro::ndarray<int>::ndarray(&v43, &v36);
      BOOL v3 = _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(a1, (uint64_t)&v42);
      if (v47)
      {
        v48 = v47;
        operator delete(v47);
      }
      if (v45)
      {
        v46 = v45;
        operator delete(v45);
      }
      v4 = v44;
      if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      if (v38)
      {
        v39 = v38;
        operator delete(v38);
      }
      uint64_t v5 = v37;
      if (!v37) {
        return v3;
      }
      goto LABEL_53;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v49, (uint64_t)a2);
      v55 = &v62;
      nitro::ndarray<unsigned char>::ndarray(&v56, &v49);
      BOOL v3 = _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(a1, (uint64_t)&v55);
      if (v60)
      {
        v61 = v60;
        operator delete(v60);
      }
      if (v58)
      {
        v59 = v58;
        operator delete(v58);
      }
      v7 = v57;
      if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v53)
      {
        v54 = v53;
        operator delete(v53);
      }
      if (v51)
      {
        v52 = v51;
        operator delete(v51);
      }
      uint64_t v5 = v50;
      if (!v50) {
        return v3;
      }
      goto LABEL_53;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v10, (uint64_t)a2);
      v16 = &v62;
      nitro::ndarray<float>::ndarray(&v17, &v10);
      BOOL v3 = _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_(a1, (uint64_t)&v16);
      if (__p)
      {
        std::locale v22 = __p;
        operator delete(__p);
      }
      if (v19)
      {
        unsigned __int8 v20 = v19;
        operator delete(v19);
      }
      v8 = v18;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v14)
      {
        std::locale v15 = v14;
        operator delete(v14);
      }
      if (v12)
      {
        unsigned __int8 v13 = v12;
        operator delete(v12);
      }
      uint64_t v5 = v11;
      if (v11) {
        goto LABEL_53;
      }
      return v3;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v23, (uint64_t)a2);
      v29 = &v62;
      nitro::ndarray<half>::ndarray(&v30, &v23);
      BOOL v3 = _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(a1, (uint64_t)&v29);
      if (v34)
      {
        v35 = v34;
        operator delete(v34);
      }
      if (v32)
      {
        v33 = v32;
        operator delete(v32);
      }
      v6 = v31;
      if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      uint64_t v5 = v24;
      if (!v24) {
        return v3;
      }
LABEL_53:
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      return v3;
    default:
      _ZZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11gt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_ENKUlvE_clEv();
  }
}

void sub_1925EAED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)va1);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925EAEF8(_Unwind_Exception *a1)
{
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v1 - 120));
  nitro::ndarray<float>::~ndarray((void *)(v1 - 192));
  _Unwind_Resume(a1);
}

void sub_1925EAF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

void sub_1925EAF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 157, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      uint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925EB0D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925EB0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925EB0DCLL);
}

BOOL _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(_DWORD *a1, uint64_t a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v18, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v18);
      if (v22)
      {
        uint64_t v23 = v22;
        operator delete(v22);
      }
      if (v20)
      {
        uint64_t v21 = v20;
        operator delete(v20);
      }
      v4 = v19;
      if (!v19) {
        return v3;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v24, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v24);
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v4 = v25;
      if (!v25) {
        return v3;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v6, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v6);
      if (v10)
      {
        uint64_t v11 = v10;
        operator delete(v10);
      }
      if (v8)
      {
        uint64_t v9 = v8;
        operator delete(v8);
      }
      v4 = v7;
      if (v7) {
        goto LABEL_25;
      }
      return v3;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v12, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v12);
      if (__p)
      {
        uint64_t v17 = __p;
        operator delete(__p);
      }
      if (v14)
      {
        std::locale v15 = v14;
        operator delete(v14);
      }
      v4 = v13;
      if (!v13) {
        return v3;
      }
LABEL_25:
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return v3;
    default:
      _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv();
  }
}

void sub_1925EB2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925EB2D8(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1925EB2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925EB300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

BOOL _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(_DWORD *a1, uint64_t a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v18, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v18);
      if (v22)
      {
        uint64_t v23 = v22;
        operator delete(v22);
      }
      if (v20)
      {
        uint64_t v21 = v20;
        operator delete(v20);
      }
      v4 = v19;
      if (!v19) {
        return v3;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v24, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v24);
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v4 = v25;
      if (!v25) {
        return v3;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v6, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v6);
      if (v10)
      {
        uint64_t v11 = v10;
        operator delete(v10);
      }
      if (v8)
      {
        uint64_t v9 = v8;
        operator delete(v8);
      }
      v4 = v7;
      if (v7) {
        goto LABEL_25;
      }
      return v3;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v12, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v12);
      if (__p)
      {
        uint64_t v17 = __p;
        operator delete(__p);
      }
      if (v14)
      {
        std::locale v15 = v14;
        operator delete(v14);
      }
      v4 = v13;
      if (!v13) {
        return v3;
      }
LABEL_25:
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return v3;
    default:
      _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv();
  }
}

void sub_1925EB4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925EB510(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1925EB524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925EB538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

BOOL _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(_DWORD *a1, uint64_t a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v18, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v18);
      if (v22)
      {
        uint64_t v23 = v22;
        operator delete(v22);
      }
      if (v20)
      {
        uint64_t v21 = v20;
        operator delete(v20);
      }
      v4 = v19;
      if (!v19) {
        return v3;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v24, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v24);
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v4 = v25;
      if (!v25) {
        return v3;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v6, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v6);
      if (v10)
      {
        uint64_t v11 = v10;
        operator delete(v10);
      }
      if (v8)
      {
        uint64_t v9 = v8;
        operator delete(v8);
      }
      v4 = v7;
      if (v7) {
        goto LABEL_25;
      }
      return v3;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v12, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v12);
      if (__p)
      {
        uint64_t v17 = __p;
        operator delete(__p);
      }
      if (v14)
      {
        std::locale v15 = v14;
        operator delete(v14);
      }
      v4 = v13;
      if (!v13) {
        return v3;
      }
LABEL_25:
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return v3;
    default:
      _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv();
  }
}

void sub_1925EB734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925EB748(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1925EB75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925EB770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

BOOL _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_(_DWORD *a1, uint64_t a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v18, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v18);
      if (v22)
      {
        uint64_t v23 = v22;
        operator delete(v22);
      }
      if (v20)
      {
        uint64_t v21 = v20;
        operator delete(v20);
      }
      v4 = v19;
      if (!v19) {
        return v3;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v24, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v24);
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v4 = v25;
      if (!v25) {
        return v3;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v6, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v6);
      if (v10)
      {
        uint64_t v11 = v10;
        operator delete(v10);
      }
      if (v8)
      {
        uint64_t v9 = v8;
        operator delete(v8);
      }
      v4 = v7;
      if (v7) {
        goto LABEL_25;
      }
      return v3;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v12, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v12);
      if (__p)
      {
        uint64_t v17 = __p;
        operator delete(__p);
      }
      if (v14)
      {
        std::locale v15 = v14;
        operator delete(v14);
      }
      v4 = v13;
      if (!v13) {
        return v3;
      }
LABEL_25:
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return v3;
    default:
      _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_ENKUlvE_clEv();
  }
}

void sub_1925EB96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925EB980(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1925EB994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925EB9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void _ZZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11gt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 190, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11gt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925EBC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<unsigned char>::ndarray(&v15, a2);
  nitro::ndarray<unsigned char>::ndarray(&v8, (void *)(a1 + 8));
  unsigned int v3 = *(unsigned __int8 *)(v15 + v21);
  unsigned int v4 = *(unsigned __int8 *)(v8 + v14);
  if (__p)
  {
    unsigned __int8 v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    unsigned __int8 v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v3 > v4;
}

void sub_1925EBDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<int>::ndarray(&v15, a2);
  nitro::ndarray<unsigned char>::ndarray(&v8, (void *)(a1 + 8));
  int v3 = *(_DWORD *)(v15 + 4 * v21);
  int v4 = *(unsigned __int8 *)(v8 + v14);
  if (__p)
  {
    unsigned __int8 v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    unsigned __int8 v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v3 > v4;
}

void sub_1925EBF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<half>::ndarray(&v20, a2);
  nitro::ndarray<unsigned char>::ndarray(&v13, (void *)(a1 + 8));
  _H8 = *(_WORD *)(v20 + 2 * v26);
  unsigned int v4 = *(unsigned __int8 *)(v13 + v19);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  uint64_t v5 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  uint64_t v6 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  __asm { FCVT            S0, H8 }
  return _S0 > (float)v4;
}

void sub_1925EC078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<float>::ndarray(&v15, a2);
  nitro::ndarray<unsigned char>::ndarray(&v8, (void *)(a1 + 8));
  float v3 = *(float *)(v15 + 4 * v21);
  unsigned int v4 = *(unsigned __int8 *)(v8 + v14);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v3 > (float)v4;
}

void sub_1925EC1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  float v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925EC464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      float v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unsigned int v4 = __p;
      }
      else {
        unsigned int v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925EC5EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925EC600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925EC5F8);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<unsigned char>::ndarray(&v15, a2);
  nitro::ndarray<int>::ndarray(&v8, (void *)(a1 + 8));
  int v3 = *(unsigned __int8 *)(v15 + v21);
  int v4 = *(_DWORD *)(v8 + 4 * v14);
  if (__p)
  {
    unsigned __int8 v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v4 < v3;
}

void sub_1925EC750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<int>::ndarray(&v15, a2);
  nitro::ndarray<int>::ndarray(&v8, (void *)(a1 + 8));
  int v3 = *(_DWORD *)(v15 + 4 * v21);
  int v4 = *(_DWORD *)(v8 + 4 * v14);
  if (__p)
  {
    unsigned __int8 v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v3 > v4;
}

void sub_1925EC898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<half>::ndarray(&v20, a2);
  nitro::ndarray<int>::ndarray(&v13, (void *)(a1 + 8));
  _H8 = *(_WORD *)(v20 + 2 * v26);
  int v4 = *(_DWORD *)(v13 + 4 * v19);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  uint64_t v5 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  uint64_t v6 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  __asm { FCVT            S0, H8 }
  return _S0 > (float)v4;
}

void sub_1925EC9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<float>::ndarray(&v15, a2);
  nitro::ndarray<int>::ndarray(&v8, (void *)(a1 + 8));
  float v3 = *(float *)(v15 + 4 * v21);
  int v4 = *(_DWORD *)(v8 + 4 * v14);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v3 > (float)v4;
}

void sub_1925ECB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  float v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925ECDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      float v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        int v4 = __p;
      }
      else {
        int v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925ECF5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925ECF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925ECF68);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<unsigned char>::ndarray(&v20, a2);
  nitro::ndarray<half>::ndarray(&v13, (void *)(a1 + 8));
  unsigned int v3 = *(unsigned __int8 *)(v20 + v26);
  _H8 = *(_WORD *)(v13 + 2 * v19);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  uint64_t v5 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  uint64_t v6 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  __asm { FCVT            S1, H8 }
  return (float)v3 > _S1;
}

void sub_1925ED0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<int>::ndarray(&v20, a2);
  nitro::ndarray<half>::ndarray(&v13, (void *)(a1 + 8));
  int v3 = *(_DWORD *)(v20 + 4 * v26);
  _H8 = *(_WORD *)(v13 + 2 * v19);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  uint64_t v5 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  uint64_t v6 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  __asm { FCVT            S1, H8 }
  return (float)v3 > _S1;
}

void sub_1925ED218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<half>::ndarray(&v15, a2);
  nitro::ndarray<half>::ndarray(&v8, (void *)(a1 + 8));
  short float v3 = *(short float *)(v15 + 2 * v21);
  short float v4 = *(short float *)(v8 + 2 * v14);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v3 > v4;
}

void sub_1925ED360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<float>::ndarray(&v20, a2);
  nitro::ndarray<half>::ndarray(&v13, (void *)(a1 + 8));
  float v3 = *(float *)(v20 + 4 * v26);
  _H9 = *(_WORD *)(v13 + 2 * v19);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  uint64_t v5 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  uint64_t v6 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  __asm { FCVT            S0, H9 }
  return v3 > _S0;
}

void sub_1925ED4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  float v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  short float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925ED74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      float v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        short float v4 = __p;
      }
      else {
        short float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925ED8D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925ED8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925ED8E0);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<unsigned char>::ndarray(&v15, a2);
  nitro::ndarray<float>::ndarray(&v8, (void *)(a1 + 8));
  unsigned int v3 = *(unsigned __int8 *)(v15 + v21);
  float v4 = *(float *)(v8 + 4 * v14);
  if (__p)
  {
    unsigned __int8 v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v4 < (float)v3;
}

void sub_1925EDA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<int>::ndarray(&v15, a2);
  nitro::ndarray<float>::ndarray(&v8, (void *)(a1 + 8));
  int v3 = *(_DWORD *)(v15 + 4 * v21);
  float v4 = *(float *)(v8 + 4 * v14);
  if (__p)
  {
    unsigned __int8 v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v4 < (float)v3;
}

void sub_1925EDB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<half>::ndarray(&v20, a2);
  nitro::ndarray<float>::ndarray(&v13, (void *)(a1 + 8));
  _H8 = *(_WORD *)(v20 + 2 * v26);
  float v4 = *(float *)(v13 + 4 * v19);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  uint64_t v5 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  uint64_t v6 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  __asm { FCVT            S0, H8 }
  return v4 < _S0;
}

void sub_1925EDCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<float>::ndarray(&v15, a2);
  nitro::ndarray<float>::ndarray(&v8, (void *)(a1 + 8));
  float v3 = *(float *)(v15 + 4 * v21);
  float v4 = *(float *)(v8 + 4 * v14);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v3 > v4;
}

void sub_1925EDE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  float v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925EE0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      float v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925EE244(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925EE258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925EE250);
}

void _ZZZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11gt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 190, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      float v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925EE3BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925EE3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925EE3C8);
}

BOOL nitro::flexible_type_impl::gt_operator::operator()(__n128 a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = *a3;
  if (a3[1] == *a3)
  {
    uint64_t v8 = 0;
    return (unint64_t)v8 > a4[1] - *a4;
  }
  else
  {
    unint64_t v7 = 0;
    while (v7 < (uint64_t)(a4[1] - *a4) >> 4)
    {
      uint64_t v9 = 16 * v7;
      uint64_t v10 = v5 + 16 * v7;
      uint64_t v11 = *a4 + 16 * v7;
      switch(*(unsigned char *)(v11 + 8))
      {
        case 1:
          switch(*(unsigned char *)(v10 + 8))
          {
            case 1:
              a1.n128_u64[0] = *(void *)v10;
              if (*(double *)v10 > *(double *)v11) {
                return 1;
              }
              goto LABEL_54;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_53;
            case 6:
            case 8:
              goto LABEL_221;
            case 9:
              unint64_t v87 = *(void *)v10;
              double v88 = *(double *)v11;
              uint64_t v196 = 0;
              v90 = *(char **)(v87 + 32);
              v89 = *(char **)(v87 + 40);
              if (v89 == v90 || !*(void *)(v87 + 16)) {
                goto LABEL_159;
              }
              unint64_t v91 = v89 - v90 - 8;
              if (v91 < 8)
              {
                uint64_t v92 = 1;
                v93 = *(char **)(v87 + 32);
                do
                {
LABEL_157:
                  uint64_t v150 = *(void *)v93;
                  v93 += 8;
                  v92 *= v150;
                }
                while (v93 != v89);
                goto LABEL_158;
              }
              uint64_t v145 = (v91 >> 3) + 1;
              v93 = &v90[8 * (v145 & 0x3FFFFFFFFFFFFFFELL)];
              v146 = v90 + 8;
              uint64_t v147 = v145 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v148 = 1;
              uint64_t v149 = 1;
              do
              {
                v148 *= *(v146 - 1);
                v149 *= *v146;
                v146 += 2;
                v147 -= 2;
              }
              while (v147);
              uint64_t v92 = v149 * v148;
              if (v145 != (v145 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_157;
              }
LABEL_158:
              uint64_t v196 = v92;
              if (v92 != 1)
              {
LABEL_159:
                v195 = &v196;
                nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v87 + 8), v88))
              {
                return 1;
              }
              goto LABEL_54;
            default:
              a1.n128_u64[0] = *(void *)v11;
              if (*(double *)v11 < (double)*(uint64_t *)v10) {
                return 1;
              }
              goto LABEL_54;
          }
        case 2:
          if (*(unsigned char *)(v10 + 8) != 2) {
            goto LABEL_53;
          }
          double v31 = *(double *)v11;
          unint64_t v32 = *(void *)v10;
          v35 = *(const void **)(v32 + 8);
          unint64_t v33 = v32 + 8;
          v34 = v35;
          int v36 = *(char *)(v33 + 23);
          v39 = *(const void **)(*(void *)&v31 + 8);
          uint64_t v37 = *(void *)&v31 + 8;
          v38 = v39;
          int v40 = *(char *)(v37 + 23);
          if (v40 >= 0) {
            size_t v41 = *(unsigned __int8 *)(v37 + 23);
          }
          else {
            size_t v41 = *(void *)(v37 + 8);
          }
          if (v40 >= 0) {
            v42 = (const void *)v37;
          }
          else {
            v42 = v38;
          }
          if (v36 >= 0) {
            size_t v43 = *(unsigned __int8 *)(v33 + 23);
          }
          else {
            size_t v43 = *(void *)(v33 + 8);
          }
          if (v36 >= 0) {
            v44 = (const void *)v33;
          }
          else {
            v44 = v34;
          }
          if (v43 >= v41) {
            size_t v45 = v41;
          }
          else {
            size_t v45 = v43;
          }
          int v46 = memcmp(v42, v44, v45);
          BOOL v47 = v41 < v43;
          if (v46) {
            BOOL v47 = v46 < 0;
          }
          if (v47) {
            return 1;
          }
          break;
        case 3:
          if (*(unsigned char *)(v10 + 8) != 3) {
            goto LABEL_53;
          }
          uint64_t v14 = *(void *)v10 + 8;
          uint64_t v12 = *(unint64_t **)v14;
          uint64_t v13 = *(void *)(v14 + 8);
          uint64_t v16 = *(void *)v11 + 8;
          std::locale v15 = *(double **)v16;
          unint64_t v17 = (uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 3;
          uint64_t v19 = v13 - (void)v12;
          BOOL v18 = v19 == 0;
          unint64_t v20 = v19 >> 3;
          if (v18) {
            goto LABEL_23;
          }
          if (v20 <= 1) {
            uint64_t v21 = 1;
          }
          else {
            uint64_t v21 = v20;
          }
          unint64_t v22 = v17;
          do
          {
            if (!v22) {
              return 1;
            }
            a1.n128_u64[0] = *v12;
            if (*(double *)v12 > *v15) {
              return 1;
            }
            if (*(double *)v12 < *v15) {
              goto LABEL_54;
            }
            --v22;
            ++v12;
            ++v15;
            --v21;
          }
          while (v21);
LABEL_23:
          if (v20 > v17) {
            return 1;
          }
          break;
        case 4:
          if (*(unsigned char *)(v10 + 8) != 4) {
            goto LABEL_53;
          }
          if (nitro::flexible_type_impl::gt_operator::operator()(&v194, *(void *)v10 + 8, *(void *)v11 + 8)) {
            return 1;
          }
          break;
        case 5:
        case 7:
LABEL_53:
          nitro::flexible_type_fail(0);
          break;
        case 6:
        case 8:
LABEL_221:
          __break(1u);
          JUMPOUT(0x1925EEFD8);
        case 9:
          uint64_t v23 = *(void **)v11;
          uint64_t v24 = v23 + 1;
          switch(*(unsigned char *)(v10 + 8))
          {
            case 1:
              unint64_t v94 = *(void *)v10;
              uint64_t v196 = 0;
              v96 = (char *)v23[4];
              v95 = (char *)v23[5];
              v97 = (char *)(v95 - v96);
              if (v95 == v96 || !v23[2]) {
                goto LABEL_167;
              }
              if ((unint64_t)(v97 - 8) < 8)
              {
                uint64_t v98 = 1;
                v99 = (char *)v23[4];
                do
                {
LABEL_165:
                  uint64_t v156 = *(void *)v99;
                  v99 += 8;
                  v98 *= v156;
                }
                while (v99 != v95);
                goto LABEL_166;
              }
              unint64_t v151 = ((unint64_t)(v97 - 8) >> 3) + 1;
              v99 = &v96[8 * (v151 & 0x3FFFFFFFFFFFFFFELL)];
              v152 = v96 + 8;
              uint64_t v153 = v151 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v154 = 1;
              uint64_t v155 = 1;
              do
              {
                v154 *= *(v152 - 1);
                v155 *= *v152;
                v152 += 2;
                v153 -= 2;
              }
              while (v153);
              uint64_t v98 = v155 * v154;
              if (v151 != (v151 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_165;
              }
LABEL_166:
              uint64_t v196 = v98;
              if (v98 != 1)
              {
LABEL_167:
                v195 = &v196;
                nitro::flexible_type_impl::gt_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v24, *(double *)&v94))
              {
                return 1;
              }
              goto LABEL_54;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_53;
            case 6:
            case 8:
              goto LABEL_221;
            case 9:
              unint64_t v100 = *(void *)v10;
              uint64_t v196 = 0;
              v102 = (char *)v23[4];
              v101 = (char *)v23[5];
              v103 = (char *)(v101 - v102);
              if (v101 == v102 || !v23[2]) {
                goto LABEL_175;
              }
              if ((unint64_t)(v103 - 8) < 8)
              {
                uint64_t v104 = 1;
                v105 = (char *)v23[4];
                do
                {
LABEL_173:
                  uint64_t v162 = *(void *)v105;
                  v105 += 8;
                  v104 *= v162;
                }
                while (v105 != v101);
                goto LABEL_174;
              }
              unint64_t v157 = ((unint64_t)(v103 - 8) >> 3) + 1;
              v105 = &v102[8 * (v157 & 0x3FFFFFFFFFFFFFFELL)];
              v158 = v102 + 8;
              uint64_t v159 = v157 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v160 = 1;
              uint64_t v161 = 1;
              do
              {
                v160 *= *(v158 - 1);
                v161 *= *v158;
                v158 += 2;
                v159 -= 2;
              }
              while (v159);
              uint64_t v104 = v161 * v160;
              if (v157 != (v157 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_173;
              }
LABEL_174:
              uint64_t v196 = v104;
              if (v104 != 1)
              {
LABEL_175:
                v195 = &v196;
                nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11gt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_((_DWORD *)(v100 + 8), v24))
              {
                return 1;
              }
              goto LABEL_54;
            default:
              uint64_t v25 = *(void *)v10;
              uint64_t v196 = 0;
              v27 = (char *)v23[4];
              uint64_t v26 = (char *)v23[5];
              v28 = (char *)(v26 - v27);
              if (v26 == v27 || !v23[2]) {
                goto LABEL_143;
              }
              if ((unint64_t)(v28 - 8) < 8)
              {
                uint64_t v29 = 1;
                uint64_t v30 = (char *)v23[4];
                do
                {
LABEL_141:
                  uint64_t v138 = *(void *)v30;
                  v30 += 8;
                  v29 *= v138;
                }
                while (v30 != v26);
                goto LABEL_142;
              }
              unint64_t v133 = ((unint64_t)(v28 - 8) >> 3) + 1;
              uint64_t v30 = &v27[8 * (v133 & 0x3FFFFFFFFFFFFFFELL)];
              v134 = v27 + 8;
              uint64_t v135 = v133 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v136 = 1;
              uint64_t v137 = 1;
              do
              {
                v136 *= *(v134 - 1);
                v137 *= *v134;
                v134 += 2;
                v135 -= 2;
              }
              while (v135);
              uint64_t v29 = v137 * v136;
              if (v133 != (v133 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_141;
              }
LABEL_142:
              uint64_t v196 = v29;
              if (v29 != 1)
              {
LABEL_143:
                v195 = &v196;
                nitro::flexible_type_impl::gt_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v24, v25))
              {
                return 1;
              }
              goto LABEL_54;
          }
        default:
          switch(*(unsigned char *)(v10 + 8))
          {
            case 1:
              a1.n128_u64[0] = *(void *)v10;
              if (*(double *)v10 > (double)*(uint64_t *)v11) {
                return 1;
              }
              goto LABEL_54;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_53;
            case 6:
            case 8:
              goto LABEL_221;
            case 9:
              unint64_t v80 = *(void *)v10;
              double v81 = *(double *)v11;
              uint64_t v196 = 0;
              v83 = *(char **)(v80 + 32);
              v82 = *(char **)(v80 + 40);
              if (v82 == v83 || !*(void *)(v80 + 16)) {
                goto LABEL_151;
              }
              unint64_t v84 = v82 - v83 - 8;
              if (v84 < 8)
              {
                uint64_t v85 = 1;
                v86 = *(char **)(v80 + 32);
                do
                {
LABEL_149:
                  uint64_t v144 = *(void *)v86;
                  v86 += 8;
                  v85 *= v144;
                }
                while (v86 != v82);
                goto LABEL_150;
              }
              uint64_t v139 = (v84 >> 3) + 1;
              v86 = &v83[8 * (v139 & 0x3FFFFFFFFFFFFFFELL)];
              v140 = v83 + 8;
              uint64_t v141 = v139 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v142 = 1;
              uint64_t v143 = 1;
              do
              {
                v142 *= *(v140 - 1);
                v143 *= *v140;
                v140 += 2;
                v141 -= 2;
              }
              while (v141);
              uint64_t v85 = v143 * v142;
              if (v139 != (v139 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_149;
              }
LABEL_150:
              uint64_t v196 = v85;
              if (v85 != 1)
              {
LABEL_151:
                v195 = &v196;
                nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v80 + 8), *(uint64_t *)&v81))
              {
                return 1;
              }
              break;
            default:
              if (*(void *)v10 > *(void *)v11) {
                return 1;
              }
              goto LABEL_54;
          }
          break;
      }
LABEL_54:
      v48 = (unsigned char *)(*a3 + v9);
      uint64_t v49 = *a4 + v9;
      switch(*(unsigned char *)(v49 + 8))
      {
        case 1:
          switch(v48[8])
          {
            case 1:
              a1.n128_u64[0] = *(void *)v48;
              double v106 = *(double *)v49;
              goto LABEL_124;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_3;
            case 6:
            case 8:
              goto LABEL_221;
            case 9:
              unint64_t v114 = *(void *)v48;
              double v115 = *(double *)v49;
              uint64_t v196 = 0;
              v117 = *(char **)(v114 + 32);
              v116 = *(char **)(v114 + 40);
              if (v116 == v117 || !*(void *)(v114 + 16)) {
                goto LABEL_199;
              }
              unint64_t v118 = v116 - v117 - 8;
              if (v118 < 8)
              {
                uint64_t v119 = 1;
                v120 = *(char **)(v114 + 32);
                do
                {
LABEL_197:
                  uint64_t v180 = *(void *)v120;
                  v120 += 8;
                  v119 *= v180;
                }
                while (v120 != v116);
                goto LABEL_198;
              }
              uint64_t v175 = (v118 >> 3) + 1;
              v120 = &v117[8 * (v175 & 0x3FFFFFFFFFFFFFFELL)];
              v176 = v117 + 8;
              uint64_t v177 = v175 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v178 = 1;
              uint64_t v179 = 1;
              do
              {
                v178 *= *(v176 - 1);
                v179 *= *v176;
                v176 += 2;
                v177 -= 2;
              }
              while (v177);
              uint64_t v119 = v179 * v178;
              if (v175 != (v175 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_197;
              }
LABEL_198:
              uint64_t v196 = v119;
              if (v119 != 1)
              {
LABEL_199:
                v195 = &v196;
                nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v114 + 8), v115))
              {
                return 0;
              }
              goto LABEL_4;
            default:
              a1.n128_u64[0] = *(void *)v49;
              if (*(double *)v49 > (double)*(uint64_t *)v48) {
                return 0;
              }
              goto LABEL_4;
          }
        case 2:
          if (v48[8] != 2) {
            goto LABEL_3;
          }
          unint64_t v58 = *(void *)v48;
          if (*(char *)(v58 + 31) < 0)
          {
            v59 = *(const void **)(v58 + 8);
            size_t v60 = *(void *)(v58 + 16);
          }
          else
          {
            v59 = (const void *)(v58 + 8);
            size_t v60 = *(unsigned __int8 *)(v58 + 31);
          }
          double v70 = *(double *)v49;
          v71 = (const void *)(*(void *)&v70 + 8);
          size_t v72 = *(unsigned __int8 *)(*(void *)&v70 + 31);
          v74 = *(const void **)(*(void *)&v70 + 8);
          size_t v73 = *(void *)(*(void *)&v70 + 16);
          if ((v72 & 0x80u) == 0) {
            size_t v75 = v72;
          }
          else {
            size_t v75 = v73;
          }
          if ((v72 & 0x80u) == 0) {
            v76 = v71;
          }
          else {
            v76 = v74;
          }
          if (v75 >= v60) {
            size_t v77 = v60;
          }
          else {
            size_t v77 = v75;
          }
          int v78 = memcmp(v59, v76, v77);
          BOOL v79 = v60 < v75;
          if (v78) {
            BOOL v79 = v78 < 0;
          }
          if (v79) {
            return 0;
          }
          goto LABEL_4;
        case 3:
          if (v48[8] != 3) {
            goto LABEL_3;
          }
          double v61 = *(double *)v49;
          char v62 = *(unint64_t **)(*(void *)v48 + 8);
          uint64_t v63 = *(void *)(*(void *)v48 + 16);
          v64 = *(double **)(*(void *)&v61 + 8);
          unint64_t v65 = (uint64_t)(*(void *)(*(void *)&v61 + 16) - (void)v64) >> 3;
          uint64_t v66 = v63 - (void)v62;
          BOOL v18 = v66 == 0;
          unint64_t v67 = v66 >> 3;
          if (v18) {
            goto LABEL_79;
          }
          if (v67 <= 1) {
            uint64_t v68 = 1;
          }
          else {
            uint64_t v68 = v67;
          }
          unint64_t v69 = v65;
          do
          {
            if (!v69) {
              goto LABEL_4;
            }
            a1.n128_u64[0] = *v62;
            if (*(double *)v62 > *v64) {
              goto LABEL_4;
            }
            if (*(double *)v62 < *v64) {
              return 0;
            }
            --v69;
            ++v62;
            ++v64;
            --v68;
          }
          while (v68);
LABEL_79:
          if (v67 < v65) {
            return 0;
          }
          goto LABEL_4;
        case 4:
          if (v48[8] != 4) {
            goto LABEL_3;
          }
          if (nitro::flexible_type_impl::lt_operator::operator()(&v194, *(void *)v48 + 8, *(void *)v49 + 8, a1))return 0; {
          goto LABEL_4;
          }
        case 5:
        case 7:
LABEL_3:
          nitro::flexible_type_fail(0);
          goto LABEL_4;
        case 6:
        case 8:
          goto LABEL_221;
        case 9:
          v50 = *(void **)v49;
          v51 = (_DWORD *)(*(void *)v49 + 8);
          switch(v48[8])
          {
            case 1:
              double v121 = *(double *)v48;
              uint64_t v196 = 0;
              v123 = (char *)v50[4];
              v122 = (char *)v50[5];
              if (v122 == v123 || !v50[2]) {
                goto LABEL_207;
              }
              unint64_t v124 = v122 - v123 - 8;
              if (v124 < 8)
              {
                uint64_t v125 = 1;
                v126 = (char *)v50[4];
                do
                {
LABEL_205:
                  uint64_t v186 = *(void *)v126;
                  v126 += 8;
                  v125 *= v186;
                }
                while (v126 != v122);
                goto LABEL_206;
              }
              uint64_t v181 = (v124 >> 3) + 1;
              v126 = &v123[8 * (v181 & 0x3FFFFFFFFFFFFFFELL)];
              v182 = v123 + 8;
              uint64_t v183 = v181 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v184 = 1;
              uint64_t v185 = 1;
              do
              {
                v184 *= *(v182 - 1);
                v185 *= *v182;
                v182 += 2;
                v183 -= 2;
              }
              while (v183);
              uint64_t v125 = v185 * v184;
              if (v181 != (v181 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_205;
              }
LABEL_206:
              uint64_t v196 = v125;
              if (v125 != 1)
              {
LABEL_207:
                v195 = &v196;
                nitro::flexible_type_impl::lt_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v51, v121))
              {
                return 0;
              }
              goto LABEL_4;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_3;
            case 6:
            case 8:
              goto LABEL_221;
            case 9:
              uint64_t v127 = *(void *)v48;
              uint64_t v196 = 0;
              v129 = (char *)v50[4];
              v128 = (char *)v50[5];
              if (v128 == v129 || !v50[2]) {
                goto LABEL_215;
              }
              unint64_t v130 = v128 - v129 - 8;
              if (v130 < 8)
              {
                uint64_t v131 = 1;
                v132 = (char *)v50[4];
                do
                {
LABEL_213:
                  uint64_t v192 = *(void *)v132;
                  v132 += 8;
                  v131 *= v192;
                }
                while (v132 != v128);
                goto LABEL_214;
              }
              uint64_t v187 = (v130 >> 3) + 1;
              v132 = &v129[8 * (v187 & 0x3FFFFFFFFFFFFFFELL)];
              v188 = v129 + 8;
              uint64_t v189 = v187 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v190 = 1;
              uint64_t v191 = 1;
              do
              {
                v190 *= *(v188 - 1);
                v191 *= *v188;
                v188 += 2;
                v189 -= 2;
              }
              while (v189);
              uint64_t v131 = v191 * v190;
              if (v187 != (v187 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_213;
              }
LABEL_214:
              uint64_t v196 = v131;
              if (v131 != 1)
              {
LABEL_215:
                v195 = &v196;
                nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11lt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_((_DWORD *)(v127 + 8), v51))
              {
                return 0;
              }
              goto LABEL_4;
            default:
              uint64_t v52 = *(void *)v48;
              uint64_t v196 = 0;
              v54 = (char *)v50[4];
              v53 = (char *)v50[5];
              if (v53 == v54 || !v50[2]) {
                goto LABEL_183;
              }
              unint64_t v55 = v53 - v54 - 8;
              if (v55 < 8)
              {
                uint64_t v56 = 1;
                v57 = (char *)v50[4];
                do
                {
LABEL_181:
                  uint64_t v168 = *(void *)v57;
                  v57 += 8;
                  v56 *= v168;
                }
                while (v57 != v53);
                goto LABEL_182;
              }
              uint64_t v163 = (v55 >> 3) + 1;
              v57 = &v54[8 * (v163 & 0x3FFFFFFFFFFFFFFELL)];
              v164 = v54 + 8;
              uint64_t v165 = v163 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v166 = 1;
              uint64_t v167 = 1;
              do
              {
                v166 *= *(v164 - 1);
                v167 *= *v164;
                v164 += 2;
                v165 -= 2;
              }
              while (v165);
              uint64_t v56 = v167 * v166;
              if (v163 != (v163 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_181;
              }
LABEL_182:
              uint64_t v196 = v56;
              if (v56 != 1)
              {
LABEL_183:
                v195 = &v196;
                nitro::flexible_type_impl::lt_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v51, v52))
              {
                return 0;
              }
              goto LABEL_4;
          }
        default:
          switch(v48[8])
          {
            case 1:
              a1.n128_u64[0] = *(void *)v48;
              double v106 = (double)*(uint64_t *)v49;
LABEL_124:
              if (a1.n128_f64[0] < v106) {
                return 0;
              }
              goto LABEL_4;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_3;
            case 6:
            case 8:
              goto LABEL_221;
            case 9:
              uint64_t v107 = *(void *)v48;
              double v108 = *(double *)v49;
              uint64_t v196 = 0;
              v110 = *(char **)(v107 + 32);
              v109 = *(char **)(v107 + 40);
              if (v109 == v110 || !*(void *)(v107 + 16)) {
                goto LABEL_191;
              }
              unint64_t v111 = v109 - v110 - 8;
              if (v111 < 8)
              {
                uint64_t v112 = 1;
                v113 = *(char **)(v107 + 32);
                do
                {
LABEL_189:
                  uint64_t v174 = *(void *)v113;
                  v113 += 8;
                  v112 *= v174;
                }
                while (v113 != v109);
                goto LABEL_190;
              }
              uint64_t v169 = (v111 >> 3) + 1;
              v113 = &v110[8 * (v169 & 0x3FFFFFFFFFFFFFFELL)];
              v170 = v110 + 8;
              uint64_t v171 = v169 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v172 = 1;
              uint64_t v173 = 1;
              do
              {
                v172 *= *(v170 - 1);
                v173 *= *v170;
                v170 += 2;
                v171 -= 2;
              }
              while (v171);
              uint64_t v112 = v173 * v172;
              if (v169 != (v169 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_189;
              }
LABEL_190:
              uint64_t v196 = v112;
              if (v112 != 1)
              {
LABEL_191:
                v195 = &v196;
                nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v107 + 8), *(uint64_t *)&v108))
              {
                return 0;
              }
LABEL_4:
              ++v7;
              uint64_t v5 = *a3;
              uint64_t v8 = a3[1] - *a3;
              if (v7 >= v8 >> 4) {
                return (unint64_t)v8 > a4[1] - *a4;
              }
              break;
            default:
              if (*(void *)v48 < *(void *)v49) {
                return 0;
              }
              goto LABEL_4;
          }
          break;
      }
    }
    return 1;
  }
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8::$_8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    unint64_t v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *uint64_t v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  return a1;
}

void sub_1925EF30C(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A490;
  v2 = a1 + 1;
  float v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A490;
  v2 = a1 + 1;
  float v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  void *v2 = &unk_1EE37A490;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8::$_8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925EF5F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A490;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8::$_8((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v85);
  if (v85[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  nitro::impl::delayed_variable::operator()(a1 + 80, (uint64_t)v82);
  if (v82[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  switch(v84)
  {
    case 1:
      switch(v87)
      {
        case 1:
          double v28 = v86;
          double v29 = v83;
          goto LABEL_54;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_45;
        case 6:
        case 8:
          goto LABEL_114;
        case 9:
          int v36 = *(char **)(*(void *)&v86 + 32);
          v35 = *(char **)(*(void *)&v86 + 40);
          if (v35 == v36 || !*(void *)(*(void *)&v86 + 16))
          {
            uint64_t v81 = 0;
            goto LABEL_76;
          }
          unint64_t v37 = v35 - v36 - 8;
          if (v37 >= 8)
          {
            uint64_t v63 = (v37 >> 3) + 1;
            v39 = &v36[8 * (v63 & 0x3FFFFFFFFFFFFFFELL)];
            v64 = v36 + 8;
            uint64_t v65 = 1;
            uint64_t v66 = v63 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v67 = 1;
            do
            {
              v65 *= *(v64 - 1);
              v67 *= *v64;
              v64 += 2;
              v66 -= 2;
            }
            while (v66);
            uint64_t v38 = v67 * v65;
            if (v63 == (v63 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_97:
              uint64_t v81 = v38;
              if (v38 == 1)
              {
                BOOL v56 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(*(void *)&v86 + 8), v83);
                goto LABEL_111;
              }
LABEL_76:
              nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v38 = 1;
            v39 = *(char **)(*(void *)&v86 + 32);
          }
          do
          {
            uint64_t v68 = *(void *)v39;
            v39 += 8;
            v38 *= v68;
          }
          while (v39 != v35);
          goto LABEL_97;
        default:
          BOOL v6 = v83 < (double)*(uint64_t *)&v86;
          goto LABEL_46;
      }
    case 2:
      if (v87 != 2) {
        goto LABEL_45;
      }
      int v19 = *(char *)(*(void *)&v86 + 31);
      int v20 = *(char *)(*(void *)&v83 + 31);
      if (v20 >= 0) {
        size_t v21 = *(unsigned __int8 *)(*(void *)&v83 + 31);
      }
      else {
        size_t v21 = *(void *)(*(void *)&v83 + 16);
      }
      if (v20 >= 0) {
        unint64_t v22 = (const void *)(*(void *)&v83 + 8);
      }
      else {
        unint64_t v22 = *(const void **)(*(void *)&v83 + 8);
      }
      if (v19 >= 0) {
        size_t v23 = *(unsigned __int8 *)(*(void *)&v86 + 31);
      }
      else {
        size_t v23 = *(void *)(*(void *)&v86 + 16);
      }
      if (v19 >= 0) {
        uint64_t v24 = (const void *)(*(void *)&v86 + 8);
      }
      else {
        uint64_t v24 = *(const void **)(*(void *)&v86 + 8);
      }
      if (v23 >= v21) {
        size_t v25 = v21;
      }
      else {
        size_t v25 = v23;
      }
      int v26 = memcmp(v22, v24, v25);
      if (v26) {
        BOOL v6 = v26 < 0;
      }
      else {
        BOOL v6 = v21 < v23;
      }
      goto LABEL_46;
    case 3:
      if (v87 != 3) {
        goto LABEL_45;
      }
      int v13 = *(double **)(*(void *)&v86 + 8);
      uint64_t v14 = *(double **)(*(void *)&v83 + 8);
      unint64_t v15 = (uint64_t)(*(void *)(*(void *)&v83 + 16) - (void)v14) >> 3;
      unint64_t v16 = (uint64_t)(*(void *)(*(void *)&v86 + 16) - (void)v13) >> 3;
      if (*(double **)(*(void *)&v86 + 16) == v13) {
        goto LABEL_23;
      }
      if (v16 <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = (uint64_t)(*(void *)(*(void *)&v86 + 16) - (void)v13) >> 3;
      }
      uint64_t v18 = (uint64_t)(*(void *)(*(void *)&v83 + 16) - (void)v14) >> 3;
      while (2)
      {
        if (v18 && *v13 <= *v14)
        {
          if (*v13 >= *v14)
          {
            ++v14;
            ++v13;
            --v18;
            if (!--v17)
            {
LABEL_23:
              BOOL v6 = v16 > v15;
              goto LABEL_46;
            }
            continue;
          }
          BOOL v6 = 0;
        }
        else
        {
          BOOL v6 = 1;
        }
        goto LABEL_46;
      }
    case 4:
      if (v87 != 4) {
        goto LABEL_45;
      }
      BOOL v6 = nitro::flexible_type_impl::gt_operator::operator()(v4, (uint64_t)&v81, (uint64_t *)(*(void *)&v86 + 8), (void *)(*(void *)&v83 + 8));
      goto LABEL_46;
    case 5:
    case 7:
LABEL_45:
      nitro::flexible_type_fail(0);
      BOOL v6 = 0;
      goto LABEL_46;
    case 6:
    case 8:
LABEL_114:
      __break(1u);
      return;
    case 9:
      unint64_t v7 = (_DWORD *)(*(void *)&v83 + 8);
      switch(v87)
      {
        case 1:
          size_t v41 = *(char **)(*(void *)&v83 + 32);
          int v40 = *(char **)(*(void *)&v83 + 40);
          v42 = (char *)(v40 - v41);
          if (v40 == v41 || !*(void *)(*(void *)&v83 + 16))
          {
            uint64_t v81 = 0;
            goto LABEL_78;
          }
          if ((unint64_t)(v42 - 8) >= 8)
          {
            unint64_t v69 = ((unint64_t)(v42 - 8) >> 3) + 1;
            v44 = &v41[8 * (v69 & 0x3FFFFFFFFFFFFFFELL)];
            double v70 = v41 + 8;
            uint64_t v71 = 1;
            uint64_t v72 = v69 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v73 = 1;
            do
            {
              v71 *= *(v70 - 1);
              v73 *= *v70;
              v70 += 2;
              v72 -= 2;
            }
            while (v72);
            uint64_t v43 = v73 * v71;
            if (v69 == (v69 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_103:
              uint64_t v81 = v43;
              if (v43 == 1)
              {
                BOOL v56 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v7, v86);
                goto LABEL_111;
              }
LABEL_78:
              nitro::flexible_type_impl::gt_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v43 = 1;
            v44 = *(char **)(*(void *)&v83 + 32);
          }
          do
          {
            uint64_t v74 = *(void *)v44;
            v44 += 8;
            v43 *= v74;
          }
          while (v44 != v40);
          goto LABEL_103;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_45;
        case 6:
        case 8:
          goto LABEL_114;
        case 9:
          int v46 = *(char **)(*(void *)&v83 + 32);
          size_t v45 = *(char **)(*(void *)&v83 + 40);
          BOOL v47 = (char *)(v45 - v46);
          if (v45 == v46 || !*(void *)(*(void *)&v83 + 16))
          {
            uint64_t v81 = 0;
            goto LABEL_80;
          }
          if ((unint64_t)(v47 - 8) >= 8)
          {
            unint64_t v75 = ((unint64_t)(v47 - 8) >> 3) + 1;
            uint64_t v49 = &v46[8 * (v75 & 0x3FFFFFFFFFFFFFFELL)];
            v76 = v46 + 8;
            uint64_t v77 = 1;
            uint64_t v78 = v75 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v79 = 1;
            do
            {
              v77 *= *(v76 - 1);
              v79 *= *v76;
              v76 += 2;
              v78 -= 2;
            }
            while (v78);
            uint64_t v48 = v79 * v77;
            if (v75 == (v75 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_109:
              uint64_t v81 = v48;
              if (v48 == 1)
              {
                BOOL v56 = _ZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11gt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_((_DWORD *)(*(void *)&v86 + 8), v7);
                goto LABEL_111;
              }
LABEL_80:
              nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v48 = 1;
            uint64_t v49 = *(char **)(*(void *)&v83 + 32);
          }
          do
          {
            uint64_t v80 = *(void *)v49;
            v49 += 8;
            v48 *= v80;
          }
          while (v49 != v45);
          goto LABEL_109;
        default:
          uint64_t v9 = *(char **)(*(void *)&v83 + 32);
          int v8 = *(char **)(*(void *)&v83 + 40);
          uint64_t v10 = (char *)(v8 - v9);
          if (v8 == v9 || !*(void *)(*(void *)&v83 + 16))
          {
            uint64_t v81 = 0;
            goto LABEL_72;
          }
          if ((unint64_t)(v10 - 8) < 8)
          {
            uint64_t v11 = 1;
            uint64_t v12 = *(char **)(*(void *)&v83 + 32);
            do
            {
LABEL_84:
              uint64_t v55 = *(void *)v12;
              v12 += 8;
              v11 *= v55;
            }
            while (v12 != v8);
            goto LABEL_85;
          }
          unint64_t v50 = ((unint64_t)(v10 - 8) >> 3) + 1;
          uint64_t v12 = &v9[8 * (v50 & 0x3FFFFFFFFFFFFFFELL)];
          v51 = v9 + 8;
          uint64_t v52 = 1;
          uint64_t v53 = v50 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v54 = 1;
          do
          {
            v52 *= *(v51 - 1);
            v54 *= *v51;
            v51 += 2;
            v53 -= 2;
          }
          while (v53);
          uint64_t v11 = v54 * v52;
          if (v50 != (v50 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_84;
          }
LABEL_85:
          uint64_t v81 = v11;
          if (v11 != 1) {
LABEL_72:
          }
            nitro::flexible_type_impl::gt_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
          BOOL v56 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v7, *(uint64_t *)&v86);
LABEL_111:
          BOOL v6 = v56;
LABEL_46:
          BOOL v27 = v6;
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v82);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v85);
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          *(void *)(a2 + 16) = v27;
          *(unsigned char *)(a2 + 24) = 0;
          return;
      }
    default:
      switch(v87)
      {
        case 1:
          double v28 = v86;
          double v29 = (double)*(uint64_t *)&v83;
LABEL_54:
          BOOL v5 = v28 <= v29;
          goto LABEL_55;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_45;
        case 6:
        case 8:
          goto LABEL_114;
        case 9:
          double v31 = *(char **)(*(void *)&v86 + 32);
          uint64_t v30 = *(char **)(*(void *)&v86 + 40);
          if (v30 == v31 || !*(void *)(*(void *)&v86 + 16))
          {
            uint64_t v81 = 0;
            goto LABEL_74;
          }
          unint64_t v32 = v30 - v31 - 8;
          if (v32 >= 8)
          {
            uint64_t v57 = (v32 >> 3) + 1;
            v34 = &v31[8 * (v57 & 0x3FFFFFFFFFFFFFFELL)];
            unint64_t v58 = v31 + 8;
            uint64_t v59 = 1;
            uint64_t v60 = v57 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v61 = 1;
            do
            {
              v59 *= *(v58 - 1);
              v61 *= *v58;
              v58 += 2;
              v60 -= 2;
            }
            while (v60);
            uint64_t v33 = v61 * v59;
            if (v57 == (v57 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_91:
              uint64_t v81 = v33;
              if (v33 == 1)
              {
                BOOL v56 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(*(void *)&v86 + 8), *(uint64_t *)&v83);
                goto LABEL_111;
              }
LABEL_74:
              nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v33 = 1;
            v34 = *(char **)(*(void *)&v86 + 32);
          }
          do
          {
            uint64_t v62 = *(void *)v34;
            v34 += 8;
            v33 *= v62;
          }
          while (v34 != v30);
          goto LABEL_91;
        default:
          BOOL v5 = *(void *)&v86 <= *(void *)&v83;
LABEL_55:
          BOOL v6 = !v5;
          goto LABEL_46;
      }
  }
}

void sub_1925EFD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_8"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_8" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_8")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_8" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9::$_9(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  BOOL v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    unint64_t v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *uint64_t v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  return a1;
}

void sub_1925F0024(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A4E8;
  v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A4E8;
  v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  void *v2 = &unk_1EE37A4E8;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9::$_9((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925F030C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A4E8;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9::$_9((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v154);
  if (v154[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  nitro::impl::delayed_variable::operator()(a1 + 80, (uint64_t)v151);
  if (v151[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  switch(v153)
  {
    case 1:
      switch(v156)
      {
        case 1:
          if (*(double *)&v155 >= *(double *)&v152) {
            goto LABEL_34;
          }
          goto LABEL_181;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_33;
        case 6:
        case 8:
          goto LABEL_210;
        case 9:
          uint64_t v150 = 0;
          uint64_t v62 = *(char **)(v155 + 32);
          uint64_t v61 = *(char **)(v155 + 40);
          if (v61 == v62 || !*(void *)(v155 + 16)) {
            goto LABEL_164;
          }
          unint64_t v63 = v61 - v62 - 8;
          if (v63 < 8)
          {
            uint64_t v64 = 1;
            uint64_t v65 = *(char **)(v155 + 32);
            do
            {
LABEL_162:
              uint64_t v109 = *(void *)v65;
              v65 += 8;
              v64 *= v109;
            }
            while (v65 != v61);
            goto LABEL_163;
          }
          uint64_t v104 = (v63 >> 3) + 1;
          uint64_t v65 = &v62[8 * (v104 & 0x3FFFFFFFFFFFFFFELL)];
          v105 = v62 + 8;
          uint64_t v106 = 1;
          uint64_t v107 = v104 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v108 = 1;
          do
          {
            v106 *= *(v105 - 1);
            v108 *= *v105;
            v105 += 2;
            v107 -= 2;
          }
          while (v107);
          uint64_t v64 = v108 * v106;
          if (v104 != (v104 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_162;
          }
LABEL_163:
          uint64_t v150 = v64;
          if (v64 != 1)
          {
LABEL_164:
            uint64_t v149 = &v150;
            nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
          }
          BOOL v97 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v155 + 8), *(double *)&v152);
          break;
        default:
          if (*(double *)&v152 <= (double)v155) {
            goto LABEL_34;
          }
          goto LABEL_181;
      }
      goto LABEL_180;
    case 2:
      if (v156 != 2) {
        goto LABEL_33;
      }
      char v17 = *(unsigned char *)(v152 + 31);
      if (*(char *)(v155 + 31) < 0)
      {
        uint64_t v18 = *(const void **)(v155 + 8);
        size_t v19 = *(void *)(v155 + 16);
      }
      else
      {
        uint64_t v18 = (const void *)(v155 + 8);
        size_t v19 = *(unsigned __int8 *)(v155 + 31);
      }
      if (v17 >= 0) {
        size_t v41 = *(unsigned __int8 *)(v152 + 31);
      }
      else {
        size_t v41 = *(void *)(v152 + 16);
      }
      if (v17 >= 0) {
        v42 = (const void *)(v152 + 8);
      }
      else {
        v42 = *(const void **)(v152 + 8);
      }
      if (v41 >= v19) {
        size_t v43 = v19;
      }
      else {
        size_t v43 = v41;
      }
      int v44 = memcmp(v18, v42, v43);
      BOOL v45 = v19 < v41;
      if (v44) {
        BOOL v45 = v44 < 0;
      }
      if (!v45) {
        break;
      }
      goto LABEL_181;
    case 3:
      if (v156 != 3) {
        goto LABEL_33;
      }
      uint64_t v11 = *(double **)(v155 + 8);
      uint64_t v12 = *(double **)(v152 + 8);
      unint64_t v13 = (uint64_t)(*(void *)(v152 + 16) - (void)v12) >> 3;
      unint64_t v14 = (uint64_t)(*(void *)(v155 + 16) - (void)v11) >> 3;
      if (*(double **)(v155 + 16) == v11) {
        goto LABEL_25;
      }
      if (v14 <= 1) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = (uint64_t)(*(void *)(v155 + 16) - (void)v11) >> 3;
      }
      uint64_t v16 = (uint64_t)(*(void *)(v152 + 16) - (void)v12) >> 3;
      do
      {
        if (!v16 || *v11 > *v12) {
          goto LABEL_34;
        }
        if (*v11 < *v12) {
          goto LABEL_181;
        }
        ++v12;
        ++v11;
        --v16;
        --v15;
      }
      while (v15);
LABEL_25:
      if (v14 >= v13) {
        break;
      }
      goto LABEL_181;
    case 4:
      if (v156 != 4) {
        goto LABEL_33;
      }
      if (!nitro::flexible_type_impl::lt_operator::operator()(v4, (uint64_t)&v148, (uint64_t *)(v155 + 8), (void *)(v152 + 8)))break; {
      goto LABEL_181;
      }
    case 5:
    case 7:
LABEL_33:
      nitro::flexible_type_fail(0);
      break;
    case 6:
    case 8:
LABEL_210:
      __break(1u);
LABEL_211:
      JUMPOUT(0);
    case 9:
      uint64_t v5 = (_DWORD *)(v152 + 8);
      switch(v156)
      {
        case 1:
          uint64_t v150 = 0;
          uint64_t v67 = *(char **)(v152 + 32);
          uint64_t v66 = *(char **)(v152 + 40);
          uint64_t v68 = (char *)(v66 - v67);
          if (v66 == v67 || !*(void *)(v152 + 16)) {
            goto LABEL_171;
          }
          if ((unint64_t)(v68 - 8) < 8)
          {
            uint64_t v69 = 1;
            double v70 = *(char **)(v152 + 32);
            do
            {
LABEL_169:
              uint64_t v115 = *(void *)v70;
              v70 += 8;
              v69 *= v115;
            }
            while (v70 != v66);
            goto LABEL_170;
          }
          unint64_t v110 = ((unint64_t)(v68 - 8) >> 3) + 1;
          double v70 = &v67[8 * (v110 & 0x3FFFFFFFFFFFFFFELL)];
          unint64_t v111 = v67 + 8;
          uint64_t v112 = 1;
          uint64_t v113 = v110 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v114 = 1;
          do
          {
            v112 *= *(v111 - 1);
            v114 *= *v111;
            v111 += 2;
            v113 -= 2;
          }
          while (v113);
          uint64_t v69 = v114 * v112;
          if (v110 != (v110 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_169;
          }
LABEL_170:
          uint64_t v150 = v69;
          if (v69 != 1)
          {
LABEL_171:
            uint64_t v149 = &v150;
            nitro::flexible_type_impl::lt_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
          }
          BOOL v97 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v5, *(double *)&v155);
          goto LABEL_180;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_33;
        case 6:
        case 8:
          goto LABEL_210;
        case 9:
          uint64_t v150 = 0;
          uint64_t v72 = *(char **)(v152 + 32);
          uint64_t v71 = *(char **)(v152 + 40);
          uint64_t v73 = (char *)(v71 - v72);
          if (v71 == v72 || !*(void *)(v152 + 16)) {
            goto LABEL_178;
          }
          if ((unint64_t)(v73 - 8) < 8)
          {
            uint64_t v74 = 1;
            unint64_t v75 = *(char **)(v152 + 32);
            do
            {
LABEL_176:
              uint64_t v121 = *(void *)v75;
              v75 += 8;
              v74 *= v121;
            }
            while (v75 != v71);
            goto LABEL_177;
          }
          unint64_t v116 = ((unint64_t)(v73 - 8) >> 3) + 1;
          unint64_t v75 = &v72[8 * (v116 & 0x3FFFFFFFFFFFFFFELL)];
          v117 = v72 + 8;
          uint64_t v118 = 1;
          uint64_t v119 = v116 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v120 = 1;
          do
          {
            v118 *= *(v117 - 1);
            v120 *= *v117;
            v117 += 2;
            v119 -= 2;
          }
          while (v119);
          uint64_t v74 = v120 * v118;
          if (v116 != (v116 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_176;
          }
LABEL_177:
          uint64_t v150 = v74;
          if (v74 != 1)
          {
LABEL_178:
            uint64_t v149 = &v150;
            nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
          }
          BOOL v97 = _ZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11lt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_((_DWORD *)(v155 + 8), v5);
          goto LABEL_180;
        default:
          uint64_t v150 = 0;
          unint64_t v7 = *(char **)(v152 + 32);
          BOOL v6 = *(char **)(v152 + 40);
          int v8 = (char *)(v6 - v7);
          if (v6 == v7 || !*(void *)(v152 + 16)) {
            goto LABEL_150;
          }
          if ((unint64_t)(v8 - 8) < 8)
          {
            uint64_t v9 = 1;
            uint64_t v10 = *(char **)(v152 + 32);
            do
            {
LABEL_148:
              uint64_t v96 = *(void *)v10;
              v10 += 8;
              v9 *= v96;
            }
            while (v10 != v6);
            goto LABEL_149;
          }
          unint64_t v91 = ((unint64_t)(v8 - 8) >> 3) + 1;
          uint64_t v10 = &v7[8 * (v91 & 0x3FFFFFFFFFFFFFFELL)];
          uint64_t v92 = v7 + 8;
          uint64_t v93 = 1;
          uint64_t v94 = v91 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v95 = 1;
          do
          {
            v93 *= *(v92 - 1);
            v95 *= *v92;
            v92 += 2;
            v94 -= 2;
          }
          while (v94);
          uint64_t v9 = v95 * v93;
          if (v91 != (v91 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_148;
          }
LABEL_149:
          uint64_t v150 = v9;
          if (v9 != 1)
          {
LABEL_150:
            uint64_t v149 = &v150;
            nitro::flexible_type_impl::lt_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
          }
          BOOL v97 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v5, v155);
          break;
      }
      goto LABEL_180;
    default:
      switch(v156)
      {
        case 1:
          if (*(double *)&v155 >= (double)v152) {
            goto LABEL_34;
          }
          goto LABEL_181;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_33;
        case 6:
        case 8:
          goto LABEL_210;
        case 9:
          uint64_t v150 = 0;
          uint64_t v57 = *(char **)(v155 + 32);
          BOOL v56 = *(char **)(v155 + 40);
          if (v56 == v57 || !*(void *)(v155 + 16)) {
            goto LABEL_157;
          }
          unint64_t v58 = v56 - v57 - 8;
          if (v58 < 8)
          {
            uint64_t v59 = 1;
            uint64_t v60 = *(char **)(v155 + 32);
            do
            {
LABEL_155:
              uint64_t v103 = *(void *)v60;
              v60 += 8;
              v59 *= v103;
            }
            while (v60 != v56);
            goto LABEL_156;
          }
          uint64_t v98 = (v58 >> 3) + 1;
          uint64_t v60 = &v57[8 * (v98 & 0x3FFFFFFFFFFFFFFELL)];
          v99 = v57 + 8;
          uint64_t v100 = 1;
          uint64_t v101 = v98 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v102 = 1;
          do
          {
            v100 *= *(v99 - 1);
            v102 *= *v99;
            v99 += 2;
            v101 -= 2;
          }
          while (v101);
          uint64_t v59 = v102 * v100;
          if (v98 != (v98 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_155;
          }
LABEL_156:
          uint64_t v150 = v59;
          if (v59 != 1)
          {
LABEL_157:
            uint64_t v149 = &v150;
            nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
          }
          BOOL v97 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v155 + 8), v152);
LABEL_180:
          if (v97)
          {
LABEL_181:
            unsigned int v20 = 1;
            goto LABEL_207;
          }
          break;
        default:
          if (v155 < v152) {
            goto LABEL_181;
          }
          goto LABEL_34;
      }
      break;
  }
LABEL_34:
  switch(v153)
  {
    case 0:
      unsigned int v20 = 0;
      switch(v156)
      {
        case 1:
          uint64_t v39 = v155;
          uint64_t v40 = v152;
          goto LABEL_117;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_207;
        case 6:
        case 8:
          goto LABEL_210;
        case 9:
          uint64_t v77 = *(char **)(v155 + 32);
          v76 = *(char **)(v155 + 40);
          if (v76 == v77 || !*(void *)(v155 + 16))
          {
            uint64_t v150 = 0;
            goto LABEL_138;
          }
          unint64_t v78 = v76 - v77 - 8;
          if (v78 >= 8)
          {
            uint64_t v129 = (v78 >> 3) + 1;
            uint64_t v80 = &v77[8 * (v129 & 0x3FFFFFFFFFFFFFFELL)];
            unint64_t v130 = v77 + 8;
            uint64_t v131 = 1;
            uint64_t v132 = v129 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v133 = 1;
            do
            {
              v131 *= *(v130 - 1);
              v133 *= *v130;
              v130 += 2;
              v132 -= 2;
            }
            while (v132);
            uint64_t v79 = v133 * v131;
            if (v129 == (v129 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_192:
              uint64_t v150 = v79;
              if (v79 == 1)
              {
                BOOL v128 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v155 + 8), v152);
                goto LABEL_206;
              }
LABEL_138:
              uint64_t v149 = &v150;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v79 = 1;
            uint64_t v80 = *(char **)(v155 + 32);
          }
          do
          {
            uint64_t v134 = *(void *)v80;
            v80 += 8;
            v79 *= v134;
          }
          while (v80 != v76);
          goto LABEL_192;
        default:
          BOOL v21 = v155 == v152;
          goto LABEL_63;
      }
    case 1:
      unsigned int v20 = 0;
      switch(v156)
      {
        case 1:
          unsigned int v20 = *(double *)&v155 == *(double *)&v152;
          goto LABEL_207;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_207;
        case 6:
        case 8:
          goto LABEL_210;
        case 9:
          char v87 = *(char **)(v155 + 32);
          double v86 = *(char **)(v155 + 40);
          if (v86 == v87 || !*(void *)(v155 + 16))
          {
            uint64_t v150 = 0;
            goto LABEL_142;
          }
          unint64_t v88 = v86 - v87 - 8;
          if (v88 >= 8)
          {
            uint64_t v141 = (v88 >> 3) + 1;
            v90 = &v87[8 * (v141 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v142 = v87 + 8;
            uint64_t v143 = 1;
            uint64_t v144 = v141 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v145 = 1;
            do
            {
              v143 *= *(v142 - 1);
              v145 *= *v142;
              v142 += 2;
              v144 -= 2;
            }
            while (v144);
            uint64_t v89 = v145 * v143;
            if (v141 == (v141 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_204:
              uint64_t v150 = v89;
              if (v89 == 1)
              {
                BOOL v128 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v155 + 8), *(double *)&v152);
                goto LABEL_206;
              }
LABEL_142:
              uint64_t v149 = &v150;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v89 = 1;
            v90 = *(char **)(v155 + 32);
          }
          do
          {
            uint64_t v146 = *(void *)v90;
            v90 += 8;
            v89 *= v146;
          }
          while (v90 != v86);
          goto LABEL_204;
        default:
          uint64_t v39 = v152;
          uint64_t v40 = v155;
LABEL_117:
          BOOL v21 = *(double *)&v39 == (double)v40;
          goto LABEL_63;
      }
    case 2:
      if (v156 != 2) {
        goto LABEL_95;
      }
      if (*(char *)(v155 + 31) < 0) {
        size_t v38 = *(void *)(v155 + 16);
      }
      else {
        size_t v38 = *(unsigned __int8 *)(v155 + 31);
      }
      uint64_t v46 = *(unsigned __int8 *)(v152 + 31);
      if ((*(char *)(v152 + 31) & 0x80000000) == 0)
      {
        if (v38 == v46) {
          goto LABEL_83;
        }
LABEL_95:
        unsigned int v20 = 0;
        goto LABEL_207;
      }
      if (v38 != *(void *)(v152 + 16)) {
        goto LABEL_95;
      }
LABEL_83:
      BOOL v47 = (void *)(v155 + 8);
      if ((*(unsigned char *)(v155 + 31) & 0x80) == 0)
      {
        uint64_t v48 = (void *)(v152 + 8);
        if ((v46 & 0x80) == 0) {
          goto LABEL_85;
        }
LABEL_133:
        uint64_t v48 = (void *)*v48;
        if ((*(unsigned char *)(v155 + 31) & 0x80) == 0) {
          goto LABEL_86;
        }
LABEL_134:
        BOOL v21 = memcmp(v47, v48, v38) == 0;
LABEL_63:
        unsigned int v20 = v21;
        goto LABEL_207;
      }
      BOOL v47 = (void *)*v47;
      uint64_t v48 = (void *)(v152 + 8);
      if ((v46 & 0x80) != 0) {
        goto LABEL_133;
      }
LABEL_85:
      if ((*(unsigned char *)(v155 + 31) & 0x80) != 0) {
        goto LABEL_134;
      }
LABEL_86:
      if (!v38) {
        goto LABEL_181;
      }
      size_t v49 = v38 - 1;
      do
      {
        int v51 = *(unsigned __int8 *)v47;
        BOOL v47 = (void *)((char *)v47 + 1);
        int v50 = v51;
        int v53 = *(unsigned __int8 *)v48;
        uint64_t v48 = (void *)((char *)v48 + 1);
        int v52 = v53;
        BOOL v55 = v49-- != 0;
        unsigned int v20 = v50 == v52;
      }
      while (v50 == v52 && v55);
LABEL_207:
      uint64_t v147 = v20;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v151);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v154);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = v147;
      *(unsigned char *)(a2 + 24) = 0;
      return;
    case 3:
      if (v156 != 3) {
        goto LABEL_95;
      }
      size_t v23 = *(double **)(v155 + 8);
      unint64_t v22 = *(double **)(v155 + 16);
      unint64_t v24 = v22 - v23;
      size_t v25 = *(double **)(v152 + 8);
      if (v24 != (uint64_t)(*(void *)(v152 + 16) - (void)v25) >> 3) {
        goto LABEL_95;
      }
      if (v22 == v23) {
        goto LABEL_181;
      }
      if (v24 <= 1) {
        uint64_t v26 = 1;
      }
      else {
        uint64_t v26 = v22 - v23;
      }
      if (*v23 != *v25) {
        goto LABEL_95;
      }
      unint64_t v27 = 0;
      double v28 = v25 + 1;
      double v29 = v23 + 1;
      while (v26 - 1 != v27)
      {
        double v30 = v29[v27];
        double v31 = v28[v27++];
        if (v30 != v31) {
          goto LABEL_144;
        }
      }
      unint64_t v27 = v26;
LABEL_144:
      unsigned int v20 = v27 >= v24;
      goto LABEL_207;
    case 4:
      if (v156 != 4) {
        goto LABEL_95;
      }
      unsigned int v20 = nitro::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v150, (uint64_t *)(v155 + 8), (void *)(v152 + 8));
      goto LABEL_207;
    case 5:
      if (v156 != 5) {
        goto LABEL_95;
      }
      nitro::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v150, (uint64_t *)(v155 + 8), (uint64_t *)(v152 + 8));
      goto LABEL_207;
    case 6:
    case 8:
      goto LABEL_210;
    case 7:
      BOOL v21 = v156 == 7;
      goto LABEL_63;
    case 9:
      unint64_t v32 = (_DWORD *)(v152 + 8);
      unsigned int v20 = 0;
      switch(v156)
      {
        case 1:
          v82 = *(char **)(v152 + 32);
          uint64_t v81 = *(char **)(v152 + 40);
          double v83 = (char *)(v81 - v82);
          if (v81 == v82 || !*(void *)(v152 + 16))
          {
            uint64_t v150 = 0;
            goto LABEL_140;
          }
          if ((unint64_t)(v83 - 8) >= 8)
          {
            unint64_t v135 = ((unint64_t)(v83 - 8) >> 3) + 1;
            uint64_t v85 = &v82[8 * (v135 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v136 = v82 + 8;
            uint64_t v137 = 1;
            uint64_t v138 = v135 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v139 = 1;
            do
            {
              v137 *= *(v136 - 1);
              v139 *= *v136;
              v136 += 2;
              v138 -= 2;
            }
            while (v138);
            uint64_t v84 = v139 * v137;
            if (v135 == (v135 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_198:
              uint64_t v150 = v84;
              if (v84 == 1)
              {
                BOOL v128 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v32, *(double *)&v155);
                goto LABEL_206;
              }
LABEL_140:
              uint64_t v149 = &v150;
              nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v84 = 1;
            uint64_t v85 = *(char **)(v152 + 32);
          }
          do
          {
            uint64_t v140 = *(void *)v85;
            v85 += 8;
            v84 *= v140;
          }
          while (v85 != v81);
          goto LABEL_198;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_207;
        case 6:
        case 8:
          goto LABEL_210;
        case 9:
          unsigned int v20 = nitro::ndarray_container::operator==((_DWORD *)(v155 + 8), (_DWORD *)(v152 + 8));
          goto LABEL_207;
        default:
          v34 = *(char **)(v152 + 32);
          uint64_t v33 = *(char **)(v152 + 40);
          v35 = (char *)(v33 - v34);
          if (v33 == v34 || !*(void *)(v152 + 16))
          {
            uint64_t v150 = 0;
            goto LABEL_136;
          }
          if ((unint64_t)(v35 - 8) >= 8)
          {
            unint64_t v122 = ((unint64_t)(v35 - 8) >> 3) + 1;
            unint64_t v37 = &v34[8 * (v122 & 0x3FFFFFFFFFFFFFFELL)];
            v123 = v34 + 8;
            uint64_t v124 = 1;
            uint64_t v125 = v122 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v126 = 1;
            do
            {
              v124 *= *(v123 - 1);
              v126 *= *v123;
              v123 += 2;
              v125 -= 2;
            }
            while (v125);
            uint64_t v36 = v126 * v124;
            if (v122 == (v122 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_186:
              uint64_t v150 = v36;
              if (v36 == 1)
              {
                BOOL v128 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v32, v155);
LABEL_206:
                unsigned int v20 = v128;
                goto LABEL_207;
              }
LABEL_136:
              uint64_t v149 = &v150;
              nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v36 = 1;
            unint64_t v37 = *(char **)(v152 + 32);
          }
          do
          {
            uint64_t v127 = *(void *)v37;
            v37 += 8;
            v36 *= v127;
          }
          while (v37 != v33);
          goto LABEL_186;
      }
    default:
      goto LABEL_211;
  }
}

void sub_1925F0FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_9"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_9" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_9")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_9" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10::$_10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  BOOL v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    unint64_t v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *uint64_t v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  return a1;
}

void sub_1925F1370(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A540;
  v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A540;
  v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  void *v2 = &unk_1EE37A540;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10::$_10((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925F1658(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A540;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10::$_10((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v156);
  if (v156[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  nitro::impl::delayed_variable::operator()(a1 + 80, (uint64_t)v153);
  if (v153[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  switch(v155)
  {
    case 1:
      switch(v158)
      {
        case 1:
          double v56 = v157;
          double v57 = v154;
          goto LABEL_102;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_50;
        case 6:
        case 8:
          goto LABEL_210;
        case 9:
          uint64_t v152 = 0;
          uint64_t v64 = *(char **)(*(void *)&v157 + 32);
          unint64_t v63 = *(char **)(*(void *)&v157 + 40);
          if (v63 == v64 || !*(void *)(*(void *)&v157 + 16)) {
            goto LABEL_164;
          }
          unint64_t v65 = v63 - v64 - 8;
          if (v65 < 8)
          {
            uint64_t v66 = 1;
            uint64_t v67 = *(char **)(*(void *)&v157 + 32);
            do
            {
LABEL_162:
              uint64_t v111 = *(void *)v67;
              v67 += 8;
              v66 *= v111;
            }
            while (v67 != v63);
            goto LABEL_163;
          }
          uint64_t v106 = (v65 >> 3) + 1;
          uint64_t v67 = &v64[8 * (v106 & 0x3FFFFFFFFFFFFFFELL)];
          uint64_t v107 = v64 + 8;
          uint64_t v108 = 1;
          uint64_t v109 = v106 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v110 = 1;
          do
          {
            v108 *= *(v107 - 1);
            v110 *= *v107;
            v107 += 2;
            v109 -= 2;
          }
          while (v109);
          uint64_t v66 = v110 * v108;
          if (v106 != (v106 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_162;
          }
LABEL_163:
          uint64_t v152 = v66;
          if (v66 != 1)
          {
LABEL_164:
            unint64_t v151 = &v152;
            nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
          }
          BOOL v99 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(*(void *)&v157 + 8), v154);
          break;
        default:
          if (v154 < (double)*(uint64_t *)&v157) {
            goto LABEL_181;
          }
          goto LABEL_51;
      }
      goto LABEL_180;
    case 2:
      if (v158 != 2) {
        goto LABEL_50;
      }
      int v17 = *(char *)(*(void *)&v157 + 31);
      int v18 = *(char *)(*(void *)&v154 + 31);
      if (v18 >= 0) {
        size_t v19 = *(unsigned __int8 *)(*(void *)&v154 + 31);
      }
      else {
        size_t v19 = *(void *)(*(void *)&v154 + 16);
      }
      if (v18 >= 0) {
        unsigned int v20 = (const void *)(*(void *)&v154 + 8);
      }
      else {
        unsigned int v20 = *(const void **)(*(void *)&v154 + 8);
      }
      if (v17 >= 0) {
        size_t v21 = *(unsigned __int8 *)(*(void *)&v157 + 31);
      }
      else {
        size_t v21 = *(void *)(*(void *)&v157 + 16);
      }
      if (v17 >= 0) {
        unint64_t v22 = (const void *)(*(void *)&v157 + 8);
      }
      else {
        unint64_t v22 = *(const void **)(*(void *)&v157 + 8);
      }
      if (v21 >= v19) {
        size_t v23 = v19;
      }
      else {
        size_t v23 = v21;
      }
      int v24 = memcmp(v20, v22, v23);
      BOOL v25 = v19 < v21;
      if (v24) {
        BOOL v25 = v24 < 0;
      }
      if (v25) {
        goto LABEL_181;
      }
      break;
    case 3:
      if (v158 != 3) {
        goto LABEL_50;
      }
      uint64_t v11 = *(double **)(*(void *)&v157 + 8);
      uint64_t v12 = *(double **)(*(void *)&v154 + 8);
      unint64_t v13 = (uint64_t)(*(void *)(*(void *)&v154 + 16) - (void)v12) >> 3;
      unint64_t v14 = (uint64_t)(*(void *)(*(void *)&v157 + 16) - (void)v11) >> 3;
      if (*(double **)(*(void *)&v157 + 16) == v11) {
        goto LABEL_25;
      }
      if (v14 <= 1) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = (uint64_t)(*(void *)(*(void *)&v157 + 16) - (void)v11) >> 3;
      }
      uint64_t v16 = (uint64_t)(*(void *)(*(void *)&v154 + 16) - (void)v12) >> 3;
      do
      {
        if (!v16 || *v11 > *v12) {
          goto LABEL_181;
        }
        if (*v11 < *v12) {
          goto LABEL_51;
        }
        ++v12;
        ++v11;
        --v16;
        --v15;
      }
      while (v15);
LABEL_25:
      if (v14 > v13) {
        goto LABEL_181;
      }
      break;
    case 4:
      if (v158 != 4) {
        goto LABEL_50;
      }
      if (nitro::flexible_type_impl::gt_operator::operator()(v4, (uint64_t)&v150, (uint64_t *)(*(void *)&v157 + 8), (void *)(*(void *)&v154 + 8)))
      {
        goto LABEL_181;
      }
      break;
    case 5:
    case 7:
LABEL_50:
      nitro::flexible_type_fail(0);
      break;
    case 6:
    case 8:
LABEL_210:
      __break(1u);
LABEL_211:
      JUMPOUT(0);
    case 9:
      uint64_t v5 = (_DWORD *)(*(void *)&v154 + 8);
      switch(v158)
      {
        case 1:
          uint64_t v152 = 0;
          uint64_t v69 = *(char **)(*(void *)&v154 + 32);
          uint64_t v68 = *(char **)(*(void *)&v154 + 40);
          double v70 = (char *)(v68 - v69);
          if (v68 == v69 || !*(void *)(*(void *)&v154 + 16)) {
            goto LABEL_171;
          }
          if ((unint64_t)(v70 - 8) < 8)
          {
            uint64_t v71 = 1;
            uint64_t v72 = *(char **)(*(void *)&v154 + 32);
            do
            {
LABEL_169:
              uint64_t v117 = *(void *)v72;
              v72 += 8;
              v71 *= v117;
            }
            while (v72 != v68);
            goto LABEL_170;
          }
          unint64_t v112 = ((unint64_t)(v70 - 8) >> 3) + 1;
          uint64_t v72 = &v69[8 * (v112 & 0x3FFFFFFFFFFFFFFELL)];
          uint64_t v113 = v69 + 8;
          uint64_t v114 = 1;
          uint64_t v115 = v112 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v116 = 1;
          do
          {
            v114 *= *(v113 - 1);
            v116 *= *v113;
            v113 += 2;
            v115 -= 2;
          }
          while (v115);
          uint64_t v71 = v116 * v114;
          if (v112 != (v112 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_169;
          }
LABEL_170:
          uint64_t v152 = v71;
          if (v71 != 1)
          {
LABEL_171:
            unint64_t v151 = &v152;
            nitro::flexible_type_impl::gt_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
          }
          BOOL v99 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v5, v157);
          goto LABEL_180;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_50;
        case 6:
        case 8:
          goto LABEL_210;
        case 9:
          uint64_t v152 = 0;
          uint64_t v74 = *(char **)(*(void *)&v154 + 32);
          uint64_t v73 = *(char **)(*(void *)&v154 + 40);
          unint64_t v75 = (char *)(v73 - v74);
          if (v73 == v74 || !*(void *)(*(void *)&v154 + 16)) {
            goto LABEL_178;
          }
          if ((unint64_t)(v75 - 8) < 8)
          {
            uint64_t v76 = 1;
            uint64_t v77 = *(char **)(*(void *)&v154 + 32);
            do
            {
LABEL_176:
              uint64_t v123 = *(void *)v77;
              v77 += 8;
              v76 *= v123;
            }
            while (v77 != v73);
            goto LABEL_177;
          }
          unint64_t v118 = ((unint64_t)(v75 - 8) >> 3) + 1;
          uint64_t v77 = &v74[8 * (v118 & 0x3FFFFFFFFFFFFFFELL)];
          uint64_t v119 = v74 + 8;
          uint64_t v120 = 1;
          uint64_t v121 = v118 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v122 = 1;
          do
          {
            v120 *= *(v119 - 1);
            v122 *= *v119;
            v119 += 2;
            v121 -= 2;
          }
          while (v121);
          uint64_t v76 = v122 * v120;
          if (v118 != (v118 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_176;
          }
LABEL_177:
          uint64_t v152 = v76;
          if (v76 != 1)
          {
LABEL_178:
            unint64_t v151 = &v152;
            nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
          }
          BOOL v99 = _ZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11gt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_((_DWORD *)(*(void *)&v157 + 8), v5);
          goto LABEL_180;
        default:
          uint64_t v152 = 0;
          unint64_t v7 = *(char **)(*(void *)&v154 + 32);
          BOOL v6 = *(char **)(*(void *)&v154 + 40);
          int v8 = (char *)(v6 - v7);
          if (v6 == v7 || !*(void *)(*(void *)&v154 + 16)) {
            goto LABEL_150;
          }
          if ((unint64_t)(v8 - 8) < 8)
          {
            uint64_t v9 = 1;
            uint64_t v10 = *(char **)(*(void *)&v154 + 32);
            do
            {
LABEL_148:
              uint64_t v98 = *(void *)v10;
              v10 += 8;
              v9 *= v98;
            }
            while (v10 != v6);
            goto LABEL_149;
          }
          unint64_t v93 = ((unint64_t)(v8 - 8) >> 3) + 1;
          uint64_t v10 = &v7[8 * (v93 & 0x3FFFFFFFFFFFFFFELL)];
          uint64_t v94 = v7 + 8;
          uint64_t v95 = 1;
          uint64_t v96 = v93 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v97 = 1;
          do
          {
            v95 *= *(v94 - 1);
            v97 *= *v94;
            v94 += 2;
            v96 -= 2;
          }
          while (v96);
          uint64_t v9 = v97 * v95;
          if (v93 != (v93 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_148;
          }
LABEL_149:
          uint64_t v152 = v9;
          if (v9 != 1)
          {
LABEL_150:
            unint64_t v151 = &v152;
            nitro::flexible_type_impl::gt_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
          }
          BOOL v99 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v5, *(uint64_t *)&v157);
          break;
      }
      goto LABEL_180;
    default:
      switch(v158)
      {
        case 1:
          double v56 = v157;
          double v57 = (double)*(uint64_t *)&v154;
LABEL_102:
          if (v56 > v57) {
            goto LABEL_181;
          }
          goto LABEL_51;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_50;
        case 6:
        case 8:
          goto LABEL_210;
        case 9:
          uint64_t v152 = 0;
          uint64_t v59 = *(char **)(*(void *)&v157 + 32);
          unint64_t v58 = *(char **)(*(void *)&v157 + 40);
          if (v58 == v59 || !*(void *)(*(void *)&v157 + 16)) {
            goto LABEL_157;
          }
          unint64_t v60 = v58 - v59 - 8;
          if (v60 < 8)
          {
            uint64_t v61 = 1;
            uint64_t v62 = *(char **)(*(void *)&v157 + 32);
            do
            {
LABEL_155:
              uint64_t v105 = *(void *)v62;
              v62 += 8;
              v61 *= v105;
            }
            while (v62 != v58);
            goto LABEL_156;
          }
          uint64_t v100 = (v60 >> 3) + 1;
          uint64_t v62 = &v59[8 * (v100 & 0x3FFFFFFFFFFFFFFELL)];
          uint64_t v101 = v59 + 8;
          uint64_t v102 = 1;
          uint64_t v103 = v100 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v104 = 1;
          do
          {
            v102 *= *(v101 - 1);
            v104 *= *v101;
            v101 += 2;
            v103 -= 2;
          }
          while (v103);
          uint64_t v61 = v104 * v102;
          if (v100 != (v100 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_155;
          }
LABEL_156:
          uint64_t v152 = v61;
          if (v61 != 1)
          {
LABEL_157:
            unint64_t v151 = &v152;
            nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
          }
          BOOL v99 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(*(void *)&v157 + 8), *(uint64_t *)&v154);
LABEL_180:
          if (v99)
          {
LABEL_181:
            unsigned int v26 = 1;
            goto LABEL_207;
          }
          break;
        default:
          if (*(uint64_t *)&v157 > *(uint64_t *)&v154) {
            goto LABEL_181;
          }
          goto LABEL_51;
      }
      break;
  }
LABEL_51:
  switch(v155)
  {
    case 0:
      unsigned int v26 = 0;
      switch(v158)
      {
        case 1:
          *(double *)&uint64_t v43 = v157;
          uint64_t v44 = *(void *)&v154;
          goto LABEL_117;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_207;
        case 6:
        case 8:
          goto LABEL_210;
        case 9:
          uint64_t v79 = *(char **)(*(void *)&v157 + 32);
          unint64_t v78 = *(char **)(*(void *)&v157 + 40);
          if (v78 == v79 || !*(void *)(*(void *)&v157 + 16))
          {
            uint64_t v152 = 0;
            goto LABEL_138;
          }
          unint64_t v80 = v78 - v79 - 8;
          if (v80 >= 8)
          {
            uint64_t v131 = (v80 >> 3) + 1;
            v82 = &v79[8 * (v131 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v132 = v79 + 8;
            uint64_t v133 = 1;
            uint64_t v134 = v131 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v135 = 1;
            do
            {
              v133 *= *(v132 - 1);
              v135 *= *v132;
              v132 += 2;
              v134 -= 2;
            }
            while (v134);
            uint64_t v81 = v135 * v133;
            if (v131 == (v131 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_192:
              uint64_t v152 = v81;
              if (v81 == 1)
              {
                BOOL v130 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(*(void *)&v157 + 8), *(uint64_t *)&v154);
                goto LABEL_206;
              }
LABEL_138:
              unint64_t v151 = &v152;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v81 = 1;
            v82 = *(char **)(*(void *)&v157 + 32);
          }
          do
          {
            uint64_t v136 = *(void *)v82;
            v82 += 8;
            v81 *= v136;
          }
          while (v82 != v78);
          goto LABEL_192;
        default:
          unsigned int v26 = *(void *)&v157 == *(void *)&v154;
          goto LABEL_207;
      }
    case 1:
      unsigned int v26 = 0;
      switch(v158)
      {
        case 1:
          unsigned int v26 = v157 == v154;
          goto LABEL_207;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_207;
        case 6:
        case 8:
          goto LABEL_210;
        case 9:
          uint64_t v89 = *(char **)(*(void *)&v157 + 32);
          unint64_t v88 = *(char **)(*(void *)&v157 + 40);
          if (v88 == v89 || !*(void *)(*(void *)&v157 + 16))
          {
            uint64_t v152 = 0;
            goto LABEL_142;
          }
          unint64_t v90 = v88 - v89 - 8;
          if (v90 >= 8)
          {
            uint64_t v143 = (v90 >> 3) + 1;
            uint64_t v92 = &v89[8 * (v143 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v144 = v89 + 8;
            uint64_t v145 = 1;
            uint64_t v146 = v143 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v147 = 1;
            do
            {
              v145 *= *(v144 - 1);
              v147 *= *v144;
              v144 += 2;
              v146 -= 2;
            }
            while (v146);
            uint64_t v91 = v147 * v145;
            if (v143 == (v143 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_204:
              uint64_t v152 = v91;
              if (v91 == 1)
              {
                BOOL v130 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(*(void *)&v157 + 8), v154);
                goto LABEL_206;
              }
LABEL_142:
              unint64_t v151 = &v152;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v91 = 1;
            uint64_t v92 = *(char **)(*(void *)&v157 + 32);
          }
          do
          {
            uint64_t v148 = *(void *)v92;
            v92 += 8;
            v91 *= v148;
          }
          while (v92 != v88);
          goto LABEL_204;
        default:
          *(double *)&uint64_t v43 = v154;
          uint64_t v44 = *(void *)&v157;
LABEL_117:
          unsigned int v26 = *(double *)&v43 == (double)v44;
          goto LABEL_207;
      }
    case 2:
      if (v158 != 2) {
        goto LABEL_95;
      }
      if (*(char *)(*(void *)&v157 + 31) < 0) {
        size_t v45 = *(void *)(*(void *)&v157 + 16);
      }
      else {
        size_t v45 = *(unsigned __int8 *)(*(void *)&v157 + 31);
      }
      uint64_t v46 = *(unsigned __int8 *)(*(void *)&v154 + 31);
      if ((*(char *)(*(void *)&v154 + 31) & 0x80000000) == 0)
      {
        if (v45 == v46) {
          goto LABEL_83;
        }
LABEL_95:
        unsigned int v26 = 0;
        goto LABEL_207;
      }
      if (v45 != *(void *)(*(void *)&v154 + 16)) {
        goto LABEL_95;
      }
LABEL_83:
      BOOL v47 = (void *)(*(void *)&v157 + 8);
      if ((*(unsigned char *)(*(void *)&v157 + 31) & 0x80) == 0)
      {
        uint64_t v48 = (void *)(*(void *)&v154 + 8);
        if ((v46 & 0x80) == 0) {
          goto LABEL_85;
        }
LABEL_133:
        uint64_t v48 = (void *)*v48;
        if ((*(unsigned char *)(*(void *)&v157 + 31) & 0x80) == 0) {
          goto LABEL_86;
        }
LABEL_134:
        unsigned int v26 = memcmp(v47, v48, v45) == 0;
        goto LABEL_207;
      }
      BOOL v47 = (void *)*v47;
      uint64_t v48 = (void *)(*(void *)&v154 + 8);
      if ((v46 & 0x80) != 0) {
        goto LABEL_133;
      }
LABEL_85:
      if ((*(unsigned char *)(*(void *)&v157 + 31) & 0x80) != 0) {
        goto LABEL_134;
      }
LABEL_86:
      if (!v45) {
        goto LABEL_181;
      }
      size_t v49 = v45 - 1;
      do
      {
        int v51 = *(unsigned __int8 *)v47;
        BOOL v47 = (void *)((char *)v47 + 1);
        int v50 = v51;
        int v53 = *(unsigned __int8 *)v48;
        uint64_t v48 = (void *)((char *)v48 + 1);
        int v52 = v53;
        BOOL v55 = v49-- != 0;
        unsigned int v26 = v50 == v52;
      }
      while (v50 == v52 && v55);
LABEL_207:
      uint64_t v149 = v26;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v153);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v156);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = v149;
      *(unsigned char *)(a2 + 24) = 0;
      return;
    case 3:
      if (v158 != 3) {
        goto LABEL_95;
      }
      double v28 = *(double **)(*(void *)&v157 + 8);
      unint64_t v27 = *(double **)(*(void *)&v157 + 16);
      unint64_t v29 = v27 - v28;
      double v30 = *(double **)(*(void *)&v154 + 8);
      if (v29 != (uint64_t)(*(void *)(*(void *)&v154 + 16) - (void)v30) >> 3) {
        goto LABEL_95;
      }
      if (v27 == v28) {
        goto LABEL_181;
      }
      if (v29 <= 1) {
        uint64_t v31 = 1;
      }
      else {
        uint64_t v31 = v27 - v28;
      }
      if (*v28 != *v30) {
        goto LABEL_95;
      }
      unint64_t v32 = 0;
      uint64_t v33 = v30 + 1;
      v34 = v28 + 1;
      while (v31 - 1 != v32)
      {
        double v35 = v34[v32];
        double v36 = v33[v32++];
        if (v35 != v36) {
          goto LABEL_144;
        }
      }
      unint64_t v32 = v31;
LABEL_144:
      unsigned int v26 = v32 >= v29;
      goto LABEL_207;
    case 4:
      if (v158 != 4) {
        goto LABEL_95;
      }
      unsigned int v26 = nitro::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v152, (uint64_t *)(*(void *)&v157 + 8), (void *)(*(void *)&v154 + 8));
      goto LABEL_207;
    case 5:
      if (v158 != 5) {
        goto LABEL_95;
      }
      nitro::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v152, (uint64_t *)(*(void *)&v157 + 8), (uint64_t *)(*(void *)&v154 + 8));
      goto LABEL_207;
    case 6:
    case 8:
      goto LABEL_210;
    case 7:
      unsigned int v26 = v158 == 7;
      goto LABEL_207;
    case 9:
      unint64_t v37 = (_DWORD *)(*(void *)&v154 + 8);
      unsigned int v26 = 0;
      switch(v158)
      {
        case 1:
          uint64_t v84 = *(char **)(*(void *)&v154 + 32);
          double v83 = *(char **)(*(void *)&v154 + 40);
          uint64_t v85 = (char *)(v83 - v84);
          if (v83 == v84 || !*(void *)(*(void *)&v154 + 16))
          {
            uint64_t v152 = 0;
            goto LABEL_140;
          }
          if ((unint64_t)(v85 - 8) >= 8)
          {
            unint64_t v137 = ((unint64_t)(v85 - 8) >> 3) + 1;
            char v87 = &v84[8 * (v137 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v138 = v84 + 8;
            uint64_t v139 = 1;
            uint64_t v140 = v137 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v141 = 1;
            do
            {
              v139 *= *(v138 - 1);
              v141 *= *v138;
              v138 += 2;
              v140 -= 2;
            }
            while (v140);
            uint64_t v86 = v141 * v139;
            if (v137 == (v137 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_198:
              uint64_t v152 = v86;
              if (v86 == 1)
              {
                BOOL v130 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v37, v157);
                goto LABEL_206;
              }
LABEL_140:
              unint64_t v151 = &v152;
              nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v86 = 1;
            char v87 = *(char **)(*(void *)&v154 + 32);
          }
          do
          {
            uint64_t v142 = *(void *)v87;
            v87 += 8;
            v86 *= v142;
          }
          while (v87 != v83);
          goto LABEL_198;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_207;
        case 6:
        case 8:
          goto LABEL_210;
        case 9:
          unsigned int v26 = nitro::ndarray_container::operator==((_DWORD *)(*(void *)&v157 + 8), (_DWORD *)(*(void *)&v154 + 8));
          goto LABEL_207;
        default:
          uint64_t v39 = *(char **)(*(void *)&v154 + 32);
          size_t v38 = *(char **)(*(void *)&v154 + 40);
          uint64_t v40 = (char *)(v38 - v39);
          if (v38 == v39 || !*(void *)(*(void *)&v154 + 16))
          {
            uint64_t v152 = 0;
            goto LABEL_136;
          }
          if ((unint64_t)(v40 - 8) >= 8)
          {
            unint64_t v124 = ((unint64_t)(v40 - 8) >> 3) + 1;
            v42 = &v39[8 * (v124 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v125 = v39 + 8;
            uint64_t v126 = 1;
            uint64_t v127 = v124 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v128 = 1;
            do
            {
              v126 *= *(v125 - 1);
              v128 *= *v125;
              v125 += 2;
              v127 -= 2;
            }
            while (v127);
            uint64_t v41 = v128 * v126;
            if (v124 == (v124 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_186:
              uint64_t v152 = v41;
              if (v41 == 1)
              {
                BOOL v130 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v37, *(uint64_t *)&v157);
LABEL_206:
                unsigned int v26 = v130;
                goto LABEL_207;
              }
LABEL_136:
              unint64_t v151 = &v152;
              nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v41 = 1;
            v42 = *(char **)(*(void *)&v154 + 32);
          }
          do
          {
            uint64_t v129 = *(void *)v42;
            v42 += 8;
            v41 *= v129;
          }
          while (v42 != v38);
          goto LABEL_186;
      }
    default:
      goto LABEL_211;
  }
}

void sub_1925F22FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_10"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_10" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_10")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_10" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11::$_11(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  BOOL v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    unint64_t v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *uint64_t v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  return a1;
}

void sub_1925F26C4(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A598;
  v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A598;
  v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  void *v2 = &unk_1EE37A598;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11::$_11((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925F29AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A598;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11::$_11((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v8[2] = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v7);
  if (v7[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  if (nitro::flexible_type::is_zero((nitro::flexible_type *)v8))
  {
    uint64_t v4 = 0;
  }
  else
  {
    nitro::impl::delayed_variable::operator()(a1 + 80, (uint64_t)v5);
    if (v5[0]) {
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    }
    uint64_t v4 = nitro::flexible_type::is_zero((nitro::flexible_type *)&v6) ^ 1;
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v5);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v7);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 24) = 0;
}

void sub_1925F2B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_11"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_11" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_11")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_11" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12::$_12(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    uint64_t v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *uint64_t v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  return a1;
}

void sub_1925F2DA0(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A5F0;
  v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A5F0;
  v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  void *v2 = &unk_1EE37A5F0;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12::$_12((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925F3088(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A5F0;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12::$_12((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v8[2] = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v7);
  if (v7[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  if (nitro::flexible_type::is_zero((nitro::flexible_type *)v8))
  {
    nitro::impl::delayed_variable::operator()(a1 + 80, (uint64_t)v5);
    if (v5[0]) {
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    }
    uint64_t v4 = nitro::flexible_type::is_zero((nitro::flexible_type *)&v6) ^ 1;
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v5);
  }
  else
  {
    uint64_t v4 = 1;
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v7);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 24) = 0;
}

void sub_1925F31F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_12"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_12" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_12")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_12" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13::$_13(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    uint64_t v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *uint64_t v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  return a1;
}

void sub_1925F347C(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A648;
  v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A648;
  v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  void *v2 = &unk_1EE37A648;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13::$_13((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925F3764(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A648;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13::$_13((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v106);
  if (v106[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  uint64_t v109 = v107;
  unsigned __int8 v110 = v108;
  if (v108 - 2 < 4 || v108 == 9) {
    atomic_fetch_add(v107, 1uLL);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v106);
  nitro::impl::delayed_variable::operator()(a1 + 80, (uint64_t)v106);
  if (v106[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  uint64_t v5 = v107;
  unsigned int v6 = v108 - 2;
  switch(v108)
  {
    case 2u:
    case 3u:
    case 9u:
      atomic_fetch_add(v107, 1uLL);
      goto LABEL_11;
    case 4u:
      atomic_fetch_add(v107, 1uLL);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v106);
      BOOL v10 = std::__find_impl[abi:ne180100]<nitro::flexible_type const*,nitro::flexible_type const*,nitro::flexible_type,std::__identity>((unsigned char *)v5[1], (unsigned char *)v5[2], &v109) != (unsigned char *)v5[2];
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = v10;
      *(unsigned char *)(a2 + 24) = 0;
LABEL_22:
      if (atomic_fetch_add(v5, 0xFFFFFFFFFFFFFFFFLL) != 1 || v5 == 0) {
        goto LABEL_63;
      }
      atomic_ullong v12 = v5[1];
      if (!v12) {
        goto LABEL_49;
      }
      uint64_t v13 = v5[2];
      unint64_t v14 = (void *)v5[1];
      if (v13 != v12)
      {
        do
        {
          v13 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v5 + 3), v13);
        }
        while (v13 != v12);
        unint64_t v14 = (void *)v5[1];
      }
      void v5[2] = v12;
      goto LABEL_48;
    case 5u:
      atomic_fetch_add(v107, 1uLL);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v106);
      uint64_t v15 = (unsigned char *)v5[1];
      uint64_t v16 = (unsigned char *)v5[2];
      break;
    default:
LABEL_11:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v106);
      goto LABEL_12;
  }
  while (v15 != v16)
  {
    switch(v110)
    {
      case 1u:
        switch(v15[8])
        {
          case 1:
            double v57 = *(double *)v15;
            double v58 = *(double *)&v109;
            goto LABEL_156;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            goto LABEL_104;
          case 6:
          case 8:
            goto LABEL_198;
          case 9:
            double v74 = *(double *)v15;
            v106[0] = 0;
            uint64_t v76 = *(char **)(*(void *)&v74 + 32);
            unint64_t v75 = *(char **)(*(void *)&v74 + 40);
            if (v75 == v76 || !*(void *)(*(void *)&v74 + 16)) {
              goto LABEL_192;
            }
            unint64_t v77 = v75 - v76 - 8;
            if (v77 < 8)
            {
              uint64_t v78 = 1;
              uint64_t v79 = *(char **)(*(void *)&v74 + 32);
              do
              {
LABEL_190:
                uint64_t v103 = *(void *)v79;
                v79 += 8;
                v78 *= v103;
              }
              while (v79 != v75);
              goto LABEL_191;
            }
            uint64_t v98 = (v77 >> 3) + 1;
            uint64_t v79 = &v76[8 * (v98 & 0x3FFFFFFFFFFFFFFELL)];
            BOOL v99 = v76 + 8;
            uint64_t v100 = v98 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v101 = 1;
            uint64_t v102 = 1;
            do
            {
              v101 *= *(v99 - 1);
              v102 *= *v99;
              v99 += 2;
              v100 -= 2;
            }
            while (v100);
            uint64_t v78 = v102 * v101;
            if (v98 != (v98 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_190;
            }
LABEL_191:
            v106[0] = v78;
            if (v78 != 1)
            {
LABEL_192:
              uint64_t v105 = v106;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
            }
            int v43 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(*(void *)&v74 + 8), *(double *)&v109);
            break;
          default:
            double v57 = *(double *)&v109;
            double v58 = (double)*(uint64_t *)v15;
            goto LABEL_156;
        }
        goto LABEL_103;
      case 2u:
        if (v15[8] != 2) {
          goto LABEL_104;
        }
        double v55 = *(double *)v15;
        if (*(char *)(*(void *)v15 + 31) < 0) {
          size_t v56 = *(void *)(*(void *)&v55 + 16);
        }
        else {
          size_t v56 = *(unsigned __int8 *)(*(void *)v15 + 31);
        }
        uint64_t v59 = *((unsigned __int8 *)v109 + 31);
        if (*((char *)v109 + 31) < 0)
        {
          if (v56 != v109[2]) {
            goto LABEL_104;
          }
        }
        else if (v56 != v59)
        {
          goto LABEL_104;
        }
        unint64_t v60 = (unsigned __int8 *)(*(void *)&v55 + 8);
        if ((*(unsigned char *)(*(void *)v15 + 31) & 0x80) != 0)
        {
          unint64_t v60 = *(unsigned __int8 **)v60;
          uint64_t v61 = v109 + 1;
          if ((v59 & 0x80) == 0)
          {
LABEL_141:
            if ((*(unsigned char *)(*(void *)v15 + 31) & 0x80) == 0) {
              goto LABEL_142;
            }
            goto LABEL_164;
          }
        }
        else
        {
          uint64_t v61 = v109 + 1;
          if ((v59 & 0x80) == 0) {
            goto LABEL_141;
          }
        }
        uint64_t v61 = (atomic_ullong *)*v61;
        if ((*(unsigned char *)(*(void *)v15 + 31) & 0x80) == 0)
        {
LABEL_142:
          if (!v56) {
            goto LABEL_194;
          }
          while (*v60 == *(unsigned __int8 *)v61)
          {
            ++v60;
            uint64_t v61 = (atomic_ullong *)((char *)v61 + 1);
            if (!--v56) {
              goto LABEL_194;
            }
          }
          goto LABEL_104;
        }
LABEL_164:
        if (!memcmp(v60, v61, v56))
        {
LABEL_194:
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          *(void *)(a2 + 16) = 1;
          *(unsigned char *)(a2 + 24) = 0;
          if (v6 > 7) {
            goto LABEL_63;
          }
          goto LABEL_13;
        }
LABEL_104:
        v15 += 32;
        break;
      case 3u:
        if (v15[8] != 3) {
          goto LABEL_104;
        }
        uint64_t v44 = *(double **)(*(void *)v15 + 8);
        size_t v45 = *(double **)(*(void *)v15 + 16);
        unint64_t v46 = v45 - v44;
        BOOL v47 = (double *)v109[1];
        if (v46 != (v109[2] - (uint64_t)v47) >> 3) {
          goto LABEL_104;
        }
        if (v45 == v44) {
          goto LABEL_194;
        }
        if (v46 <= 1) {
          unint64_t v46 = 1;
        }
        while (*v44 == *v47)
        {
          ++v47;
          ++v44;
          if (!--v46) {
            goto LABEL_194;
          }
        }
        goto LABEL_104;
      case 4u:
        if (v15[8] != 4) {
          goto LABEL_104;
        }
        int v43 = nitro::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v104, (uint64_t *)(*(void *)v15 + 8), v109 + 1);
        goto LABEL_103;
      case 5u:
        if (v15[8] != 5) {
          goto LABEL_104;
        }
        nitro::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v104, (uint64_t *)(*(void *)v15 + 8), v109 + 1);
        goto LABEL_103;
      case 6u:
      case 8u:
LABEL_198:
        __break(1u);
        return;
      case 7u:
        if (v15[8] == 7) {
          goto LABEL_194;
        }
        goto LABEL_104;
      case 9u:
        uint64_t v48 = v109 + 1;
        switch(v15[8])
        {
          case 1:
            double v68 = *(double *)v15;
            v106[0] = 0;
            atomic_ullong v70 = v109[4];
            atomic_ullong v69 = v109[5];
            atomic_ullong v71 = v69 - v70;
            if (v69 == v70 || !v109[2]) {
              goto LABEL_185;
            }
            if ((unint64_t)(v71 - 8) < 8)
            {
              uint64_t v72 = 1;
              uint64_t v73 = (uint64_t *)v109[4];
              do
              {
LABEL_183:
                uint64_t v97 = *v73++;
                v72 *= v97;
              }
              while (v73 != (uint64_t *)v69);
              goto LABEL_184;
            }
            unint64_t v92 = ((unint64_t)(v71 - 8) >> 3) + 1;
            uint64_t v73 = (uint64_t *)(v70 + 8 * (v92 & 0x3FFFFFFFFFFFFFFELL));
            unint64_t v93 = (void *)(v70 + 8);
            uint64_t v94 = v92 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v95 = 1;
            uint64_t v96 = 1;
            do
            {
              v95 *= *(v93 - 1);
              v96 *= *v93;
              v93 += 2;
              v94 -= 2;
            }
            while (v94);
            uint64_t v72 = v96 * v95;
            if (v92 != (v92 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_183;
            }
LABEL_184:
            v106[0] = v72;
            if (v72 != 1)
            {
LABEL_185:
              uint64_t v105 = v106;
              nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
            int v43 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v48, v68);
            goto LABEL_103;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            goto LABEL_104;
          case 6:
          case 8:
            goto LABEL_198;
          case 9:
            int v43 = nitro::ndarray_container::operator==((_DWORD *)(*(void *)v15 + 8), (_DWORD *)v109 + 2);
            goto LABEL_103;
          default:
            uint64_t v49 = *(void *)v15;
            v106[0] = 0;
            atomic_ullong v51 = v109[4];
            atomic_ullong v50 = v109[5];
            atomic_ullong v52 = v50 - v51;
            if (v50 == v51 || !v109[2]) {
              goto LABEL_171;
            }
            if ((unint64_t)(v52 - 8) < 8)
            {
              uint64_t v53 = 1;
              uint64_t v54 = (uint64_t *)v109[4];
              do
              {
LABEL_169:
                uint64_t v85 = *v54++;
                v53 *= v85;
              }
              while (v54 != (uint64_t *)v50);
              goto LABEL_170;
            }
            unint64_t v80 = ((unint64_t)(v52 - 8) >> 3) + 1;
            uint64_t v54 = (uint64_t *)(v51 + 8 * (v80 & 0x3FFFFFFFFFFFFFFELL));
            uint64_t v81 = (void *)(v51 + 8);
            uint64_t v82 = v80 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v83 = 1;
            uint64_t v84 = 1;
            do
            {
              v83 *= *(v81 - 1);
              v84 *= *v81;
              v81 += 2;
              v82 -= 2;
            }
            while (v82);
            uint64_t v53 = v84 * v83;
            if (v80 != (v80 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_169;
            }
LABEL_170:
            v106[0] = v53;
            if (v53 != 1)
            {
LABEL_171:
              uint64_t v105 = v106;
              nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
            int v43 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v48, v49);
            break;
        }
        goto LABEL_103;
      default:
        switch(v15[8])
        {
          case 1:
            double v57 = *(double *)v15;
            double v58 = (double)(uint64_t)v109;
LABEL_156:
            if (v57 == v58) {
              goto LABEL_194;
            }
            goto LABEL_104;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            goto LABEL_104;
          case 6:
          case 8:
            goto LABEL_198;
          case 9:
            uint64_t v62 = *(void *)v15;
            v106[0] = 0;
            uint64_t v64 = *(char **)(v62 + 32);
            unint64_t v63 = *(char **)(v62 + 40);
            if (v63 == v64 || !*(void *)(v62 + 16)) {
              goto LABEL_178;
            }
            unint64_t v65 = v63 - v64 - 8;
            if (v65 < 8)
            {
              uint64_t v66 = 1;
              uint64_t v67 = *(char **)(v62 + 32);
              do
              {
LABEL_176:
                uint64_t v91 = *(void *)v67;
                v67 += 8;
                v66 *= v91;
              }
              while (v67 != v63);
              goto LABEL_177;
            }
            uint64_t v86 = (v65 >> 3) + 1;
            uint64_t v67 = &v64[8 * (v86 & 0x3FFFFFFFFFFFFFFELL)];
            char v87 = v64 + 8;
            uint64_t v88 = v86 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v89 = 1;
            uint64_t v90 = 1;
            do
            {
              v89 *= *(v87 - 1);
              v90 *= *v87;
              v87 += 2;
              v88 -= 2;
            }
            while (v88);
            uint64_t v66 = v90 * v89;
            if (v86 != (v86 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_176;
            }
LABEL_177:
            v106[0] = v66;
            if (v66 != 1)
            {
LABEL_178:
              uint64_t v105 = v106;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
            }
            int v43 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v62 + 8), (uint64_t)v109);
LABEL_103:
            if (v43) {
              goto LABEL_194;
            }
            break;
          default:
            if (*(atomic_ullong **)v15 == v109) {
              goto LABEL_194;
            }
            goto LABEL_104;
        }
        goto LABEL_104;
    }
  }
LABEL_12:
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
LABEL_13:
  switch(v6)
  {
    case 0u:
      if (atomic_fetch_add(v5, 0xFFFFFFFFFFFFFFFFLL) != 1 || v5 == 0) {
        goto LABEL_63;
      }
      if (*((char *)v5 + 31) < 0) {
        operator delete((void *)v5[1]);
      }
      int v8 = v5;
      uint64_t v9 = 0x1012C404EF22A49;
      goto LABEL_62;
    case 1u:
      if (atomic_fetch_add(v5, 0xFFFFFFFFFFFFFFFFLL) != 1 || v5 == 0) {
        goto LABEL_63;
      }
      int v18 = (void *)v5[1];
      if (v18)
      {
        void v5[2] = (atomic_ullong)v18;
        operator delete(v18);
      }
      int v8 = v5;
      uint64_t v9 = 0x1080C409938AC02;
      goto LABEL_62;
    case 2u:
      goto LABEL_22;
    case 3u:
      if (atomic_fetch_add(v5, 0xFFFFFFFFFFFFFFFFLL) != 1 || v5 == 0) {
        goto LABEL_63;
      }
      atomic_ullong v20 = v5[1];
      if (!v20) {
        goto LABEL_49;
      }
      uint64_t v21 = v5[2];
      unint64_t v22 = (void *)v5[1];
      if (v21 != v20)
      {
        do
          uint64_t v21 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v21 - 32);
        while (v21 != v20);
        unint64_t v22 = (void *)v5[1];
      }
      void v5[2] = v20;
      unint64_t v14 = v22;
      break;
    case 7u:
      if (atomic_fetch_add(v5, 0xFFFFFFFFFFFFFFFFLL) != 1 || v5 == 0) {
        goto LABEL_63;
      }
      int v24 = (void *)v5[7];
      if (v24)
      {
        v5[8] = (atomic_ullong)v24;
        operator delete(v24);
      }
      BOOL v25 = (void *)v5[4];
      if (v25)
      {
        v5[5] = (atomic_ullong)v25;
        operator delete(v25);
      }
      unsigned int v26 = (std::__shared_weak_count *)v5[3];
      if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      int v8 = v5;
      uint64_t v9 = 0x10B0C4002311774;
      goto LABEL_62;
    default:
      goto LABEL_63;
  }
LABEL_48:
  operator delete(v14);
LABEL_49:
  int v8 = v5;
  uint64_t v9 = 0x1020C405E66F15BLL;
LABEL_62:
  MEMORY[0x192FF16B0](v8, v9);
LABEL_63:
  switch(v110)
  {
    case 2u:
      if (atomic_fetch_add(v109, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v27 = v109;
        if (*(double *)&v109 != 0.0)
        {
          if (*((char *)v109 + 31) < 0) {
            operator delete((void *)v109[1]);
          }
          double v28 = v27;
          uint64_t v29 = 0x1012C404EF22A49;
          goto LABEL_100;
        }
      }
      break;
    case 3u:
      if (atomic_fetch_add(v109, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v34 = v109;
        if (*(double *)&v109 != 0.0)
        {
          double v35 = (void *)v109[1];
          if (v35)
          {
            v109[2] = (atomic_ullong)v35;
            operator delete(v35);
          }
          double v28 = v34;
          uint64_t v29 = 0x1080C409938AC02;
          goto LABEL_100;
        }
      }
      break;
    case 4u:
      if (atomic_fetch_add(v109, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v30 = v109;
        if (*(double *)&v109 != 0.0)
        {
          atomic_ullong v31 = v109[1];
          if (!v31) {
            goto LABEL_89;
          }
          uint64_t v32 = v109[2];
          uint64_t v33 = (void *)v109[1];
          if (v32 != v31)
          {
            do
            {
              v32 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v30 + 3), v32);
            }
            while (v32 != v31);
            uint64_t v33 = (void *)v30[1];
          }
          v30[2] = v31;
          goto LABEL_88;
        }
      }
      break;
    case 5u:
      if (atomic_fetch_add(v109, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v30 = v109;
        if (*(double *)&v109 != 0.0)
        {
          atomic_ullong v36 = v109[1];
          if (v36)
          {
            uint64_t v37 = v109[2];
            atomic_ullong v38 = v109[1];
            if (v37 != v36)
            {
              do
                uint64_t v37 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v37 - 32);
              while (v37 != v36);
              atomic_ullong v38 = v30[1];
            }
            v30[2] = v36;
            uint64_t v33 = (void *)v38;
LABEL_88:
            operator delete(v33);
          }
LABEL_89:
          double v28 = v30;
          uint64_t v29 = 0x1020C405E66F15BLL;
          goto LABEL_100;
        }
      }
      break;
    case 9u:
      if (atomic_fetch_add(v109, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v39 = v109;
        if (*(double *)&v109 != 0.0)
        {
          uint64_t v40 = (void *)v109[7];
          if (v40)
          {
            v109[8] = (atomic_ullong)v40;
            operator delete(v40);
          }
          uint64_t v41 = (void *)v39[4];
          if (v41)
          {
            v39[5] = (atomic_ullong)v41;
            operator delete(v41);
          }
          v42 = (std::__shared_weak_count *)v39[3];
          if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
          double v28 = v39;
          uint64_t v29 = 0x10B0C4002311774;
LABEL_100:
          MEMORY[0x192FF16B0](v28, v29);
        }
      }
      break;
    default:
      return;
  }
}

void sub_1925F42F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, atomic_ullong *a16, char a17)
{
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a12);
  switch(a17)
  {
    case 2:
      if (atomic_fetch_add(a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_40;
      }
      int v18 = a16;
      if (!a16) {
        goto LABEL_40;
      }
      if (*((char *)a16 + 31) < 0) {
        operator delete((void *)a16[1]);
      }
      size_t v19 = v18;
      uint64_t v20 = 0x1012C404EF22A49;
      goto LABEL_39;
    case 3:
      if (atomic_fetch_add(a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_40;
      }
      uint64_t v21 = a16;
      if (!a16) {
        goto LABEL_40;
      }
      unint64_t v22 = (void *)a16[1];
      if (v22)
      {
        a16[2] = (atomic_ullong)v22;
        operator delete(v22);
      }
      size_t v19 = v21;
      uint64_t v20 = 0x1080C409938AC02;
      goto LABEL_39;
    case 4:
      if (atomic_fetch_add(a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_40;
      }
      size_t v23 = a16;
      if (!a16) {
        goto LABEL_40;
      }
      atomic_ullong v24 = a16[1];
      if (!v24) {
        goto LABEL_27;
      }
      uint64_t v25 = a16[2];
      unsigned int v26 = (void *)a16[1];
      if (v25 != v24)
      {
        do
        {
          v25 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v23 + 3), v25);
        }
        while (v25 != v24);
        unsigned int v26 = (void *)v23[1];
      }
      v23[2] = v24;
      goto LABEL_26;
    case 5:
      if (atomic_fetch_add(a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_40;
      }
      size_t v23 = a16;
      if (!a16) {
        goto LABEL_40;
      }
      atomic_ullong v27 = a16[1];
      if (!v27) {
        goto LABEL_27;
      }
      uint64_t v28 = a16[2];
      atomic_ullong v29 = a16[1];
      if (v28 != v27)
      {
        do
          uint64_t v28 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v28 - 32);
        while (v28 != v27);
        atomic_ullong v29 = v23[1];
      }
      v23[2] = v27;
      unsigned int v26 = (void *)v29;
LABEL_26:
      operator delete(v26);
LABEL_27:
      size_t v19 = v23;
      uint64_t v20 = 0x1020C405E66F15BLL;
      goto LABEL_39;
    case 9:
      if (atomic_fetch_add(a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_40;
      }
      double v30 = a16;
      if (!a16) {
        goto LABEL_40;
      }
      atomic_ullong v31 = (void *)a16[7];
      if (v31)
      {
        a16[8] = (atomic_ullong)v31;
        operator delete(v31);
        uint64_t v32 = (void *)v30[4];
        if (!v32)
        {
LABEL_32:
          uint64_t v33 = (std::__shared_weak_count *)v30[3];
          if (!v33) {
            goto LABEL_38;
          }
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v32 = (void *)a16[4];
        if (!v32) {
          goto LABEL_32;
        }
      }
      v30[5] = (atomic_ullong)v32;
      operator delete(v32);
      uint64_t v33 = (std::__shared_weak_count *)v30[3];
      if (!v33)
      {
LABEL_38:
        size_t v19 = v30;
        uint64_t v20 = 0x10B0C4002311774;
LABEL_39:
        MEMORY[0x192FF16B0](v19, v20);
        _Unwind_Resume(a1);
      }
LABEL_36:
      if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      goto LABEL_38;
    default:
LABEL_40:
      _Unwind_Resume(a1);
      return;
  }
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_13"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_13" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_13")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_13" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

unsigned char *std::__find_impl[abi:ne180100]<nitro::flexible_type const*,nitro::flexible_type const*,nitro::flexible_type,std::__identity>(unsigned char *a1, unsigned char *a2, unsigned char *a3)
{
  unint64_t v3 = a1;
  if (a1 != a2)
  {
    while (2)
    {
      switch(a3[8])
      {
        case 1:
          switch(v3[8])
          {
            case 1:
              double v20 = *(double *)v3;
              double v21 = *(double *)a3;
              goto LABEL_57;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_4;
            case 6:
            case 8:
              goto LABEL_101;
            case 9:
              double v40 = *(double *)v3;
              double v41 = *(double *)a3;
              uint64_t v74 = 0;
              int v43 = *(char **)(*(void *)&v40 + 32);
              v42 = *(char **)(*(void *)&v40 + 40);
              if (v42 == v43 || !*(void *)(*(void *)&v40 + 16)) {
                goto LABEL_88;
              }
              unint64_t v44 = v42 - v43 - 8;
              if (v44 < 8)
              {
                uint64_t v45 = 1;
                unint64_t v46 = *(char **)(*(void *)&v40 + 32);
                do
                {
LABEL_86:
                  uint64_t v64 = *(void *)v46;
                  v46 += 8;
                  v45 *= v64;
                }
                while (v46 != v42);
                goto LABEL_87;
              }
              uint64_t v59 = (v44 >> 3) + 1;
              unint64_t v46 = &v43[8 * (v59 & 0x3FFFFFFFFFFFFFFELL)];
              unint64_t v60 = v43 + 8;
              uint64_t v61 = v59 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v62 = 1;
              uint64_t v63 = 1;
              do
              {
                v62 *= *(v60 - 1);
                v63 *= *v60;
                v60 += 2;
                v61 -= 2;
              }
              while (v61);
              uint64_t v45 = v63 * v62;
              if (v59 != (v59 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_86;
              }
LABEL_87:
              uint64_t v74 = v45;
              if (v45 != 1)
              {
LABEL_88:
                uint64_t v73 = &v74;
                nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(*(void *)&v40 + 8), v41))
              {
                return v3;
              }
              goto LABEL_4;
            default:
              double v20 = *(double *)a3;
              double v21 = (double)*(uint64_t *)v3;
              goto LABEL_57;
          }
        case 2:
          if (v3[8] != 2) {
            goto LABEL_4;
          }
          double v10 = *(double *)v3;
          if (*(char *)(*(void *)v3 + 31) < 0) {
            size_t v11 = *(void *)(*(void *)&v10 + 16);
          }
          else {
            size_t v11 = *(unsigned __int8 *)(*(void *)v3 + 31);
          }
          double v23 = *(double *)a3;
          uint64_t v24 = *(unsigned __int8 *)(*(void *)a3 + 31);
          if (*(char *)(*(void *)a3 + 31) < 0)
          {
            if (v11 != *(void *)(*(void *)&v23 + 16)) {
              goto LABEL_4;
            }
          }
          else if (v11 != v24)
          {
            goto LABEL_4;
          }
          uint64_t v25 = (unsigned __int8 *)(*(void *)&v10 + 8);
          if ((*(unsigned char *)(*(void *)v3 + 31) & 0x80) != 0)
          {
            uint64_t v25 = *(unsigned __int8 **)v25;
            unsigned int v26 = (unsigned __int8 *)(*(void *)&v23 + 8);
            if ((v24 & 0x80) == 0)
            {
LABEL_40:
              if ((*(unsigned char *)(*(void *)v3 + 31) & 0x80) == 0) {
                goto LABEL_41;
              }
              goto LABEL_65;
            }
          }
          else
          {
            unsigned int v26 = (unsigned __int8 *)(*(void *)&v23 + 8);
            if ((v24 & 0x80) == 0) {
              goto LABEL_40;
            }
          }
          unsigned int v26 = *(unsigned __int8 **)v26;
          if ((*(unsigned char *)(*(void *)v3 + 31) & 0x80) == 0)
          {
LABEL_41:
            if (!v11) {
              return v3;
            }
            while (*v25 == *v26)
            {
              ++v25;
              ++v26;
              if (!--v11) {
                return v3;
              }
            }
            goto LABEL_4;
          }
LABEL_65:
          if (!memcmp(v25, v26, v11)) {
            return v3;
          }
          goto LABEL_4;
        case 3:
          if (v3[8] != 3) {
            goto LABEL_4;
          }
          unsigned int v6 = *(double **)(*(void *)v3 + 8);
          uint64_t v7 = *(double **)(*(void *)v3 + 16);
          unint64_t v8 = v7 - v6;
          uint64_t v9 = *(double **)(*(void *)a3 + 8);
          if (v8 != (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v9) >> 3) {
            goto LABEL_4;
          }
          if (v7 == v6) {
            return v3;
          }
          if (v8 <= 1) {
            unint64_t v8 = 1;
          }
          while (*v6 == *v9)
          {
            ++v6;
            ++v9;
            if (!--v8) {
              return v3;
            }
          }
          goto LABEL_4;
        case 4:
          if (v3[8] == 4
            && nitro::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v72, (uint64_t *)(*(void *)v3 + 8), (void *)(*(void *)a3 + 8)))
          {
            return v3;
          }
          goto LABEL_4;
        case 5:
          if (v3[8] == 5)
          {
            nitro::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v72, (uint64_t *)(*(void *)v3 + 8), (uint64_t *)(*(void *)a3 + 8));
            if (v22) {
              return v3;
            }
          }
          goto LABEL_4;
        case 6:
        case 8:
LABEL_101:
          __break(1u);
          JUMPOUT(0x1925F4D00);
        case 7:
          if (v3[8] != 7) {
            goto LABEL_4;
          }
          return v3;
        case 9:
          atomic_ullong v12 = *(void **)a3;
          uint64_t v13 = (_DWORD *)(*(void *)a3 + 8);
          switch(v3[8])
          {
            case 1:
              double v34 = *(double *)v3;
              uint64_t v74 = 0;
              atomic_ullong v36 = (char *)v12[4];
              double v35 = (char *)v12[5];
              uint64_t v37 = (char *)(v35 - v36);
              if (v35 == v36 || !v12[2]) {
                goto LABEL_96;
              }
              if ((unint64_t)(v37 - 8) < 8)
              {
                uint64_t v38 = 1;
                uint64_t v39 = (char *)v12[4];
                do
                {
LABEL_94:
                  uint64_t v70 = *(void *)v39;
                  v39 += 8;
                  v38 *= v70;
                }
                while (v39 != v35);
                goto LABEL_95;
              }
              unint64_t v65 = ((unint64_t)(v37 - 8) >> 3) + 1;
              uint64_t v39 = &v36[8 * (v65 & 0x3FFFFFFFFFFFFFFELL)];
              uint64_t v66 = v36 + 8;
              uint64_t v67 = v65 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v68 = 1;
              uint64_t v69 = 1;
              do
              {
                v68 *= *(v66 - 1);
                v69 *= *v66;
                v66 += 2;
                v67 -= 2;
              }
              while (v67);
              uint64_t v38 = v69 * v68;
              if (v65 != (v65 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_94;
              }
LABEL_95:
              uint64_t v74 = v38;
              if (v38 != 1)
              {
LABEL_96:
                uint64_t v73 = &v74;
                nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v13, v34))
              {
                return v3;
              }
              goto LABEL_4;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_4;
            case 6:
            case 8:
              goto LABEL_101;
            case 9:
              if (nitro::ndarray_container::operator==((_DWORD *)(*(void *)v3 + 8), (_DWORD *)(*(void *)a3 + 8)))return v3; {
              goto LABEL_4;
              }
            default:
              uint64_t v14 = *(void *)v3;
              uint64_t v74 = 0;
              uint64_t v16 = (char *)v12[4];
              uint64_t v15 = (char *)v12[5];
              int v17 = (char *)(v15 - v16);
              if (v15 == v16 || !v12[2]) {
                goto LABEL_72;
              }
              if ((unint64_t)(v17 - 8) < 8)
              {
                uint64_t v18 = 1;
                size_t v19 = (char *)v12[4];
                do
                {
LABEL_70:
                  uint64_t v52 = *(void *)v19;
                  v19 += 8;
                  v18 *= v52;
                }
                while (v19 != v15);
                goto LABEL_71;
              }
              unint64_t v47 = ((unint64_t)(v17 - 8) >> 3) + 1;
              size_t v19 = &v16[8 * (v47 & 0x3FFFFFFFFFFFFFFELL)];
              uint64_t v48 = v16 + 8;
              uint64_t v49 = v47 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v50 = 1;
              uint64_t v51 = 1;
              do
              {
                v50 *= *(v48 - 1);
                v51 *= *v48;
                v48 += 2;
                v49 -= 2;
              }
              while (v49);
              uint64_t v18 = v51 * v50;
              if (v47 != (v47 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_70;
              }
LABEL_71:
              uint64_t v74 = v18;
              if (v18 != 1)
              {
LABEL_72:
                uint64_t v73 = &v74;
                nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v13, v14))
              {
                return v3;
              }
              goto LABEL_4;
          }
        default:
          switch(v3[8])
          {
            case 1:
              double v20 = *(double *)v3;
              double v21 = (double)*(uint64_t *)a3;
LABEL_57:
              if (v20 == v21) {
                return v3;
              }
              goto LABEL_4;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_4;
            case 6:
            case 8:
              goto LABEL_101;
            case 9:
              uint64_t v27 = *(void *)v3;
              uint64_t v28 = *(void *)a3;
              uint64_t v74 = 0;
              double v30 = *(char **)(v27 + 32);
              atomic_ullong v29 = *(char **)(v27 + 40);
              if (v29 == v30 || !*(void *)(v27 + 16)) {
                goto LABEL_80;
              }
              unint64_t v31 = v29 - v30 - 8;
              if (v31 < 8)
              {
                uint64_t v32 = 1;
                uint64_t v33 = *(char **)(v27 + 32);
                do
                {
LABEL_78:
                  uint64_t v58 = *(void *)v33;
                  v33 += 8;
                  v32 *= v58;
                }
                while (v33 != v29);
                goto LABEL_79;
              }
              uint64_t v53 = (v31 >> 3) + 1;
              uint64_t v33 = &v30[8 * (v53 & 0x3FFFFFFFFFFFFFFELL)];
              uint64_t v54 = v30 + 8;
              uint64_t v55 = v53 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v56 = 1;
              uint64_t v57 = 1;
              do
              {
                v56 *= *(v54 - 1);
                v57 *= *v54;
                v54 += 2;
                v55 -= 2;
              }
              while (v55);
              uint64_t v32 = v57 * v56;
              if (v53 != (v53 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_78;
              }
LABEL_79:
              uint64_t v74 = v32;
              if (v32 != 1)
              {
LABEL_80:
                uint64_t v73 = &v74;
                nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v27 + 8), v28))
              {
                return v3;
              }
LABEL_4:
              v3 += 16;
              if (v3 != a2) {
                continue;
              }
              unint64_t v3 = a2;
              break;
            default:
              if (*(void *)v3 == *(void *)a3) {
                return v3;
              }
              goto LABEL_4;
          }
          break;
      }
      break;
    }
  }
  return v3;
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A120;
  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A120;
  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  JUMPOUT(0x192FF16B0);
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  v2 = (char *)operator new(0x50uLL);
  *(void *)v2 = &unk_1EE37A120;
  unint64_t v3 = v2 + 8;
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    goto LABEL_4;
  }
  if (v4 != a1 + 8)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v4 + 16))(v4, v3);
LABEL_4:
    *((void *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((void *)v2 + 4) = v3;
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
LABEL_6:
  *((_WORD *)v2 + 20) = *(_WORD *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  *((void *)v2 + 6) = *(void *)(a1 + 48);
  *((void *)v2 + 7) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v2 + 8) = 0;
  v2[72] = 0;
  if (v2 != (char *)a1)
  {
    *((void *)v2 + 8) = *(void *)(a1 + 64);
    int v6 = *(unsigned __int8 *)(a1 + 72);
    v2[72] = v6;
    if ((v6 - 2) < 4 || v6 == 9) {
      atomic_fetch_add(*((atomic_ullong *volatile *)v2 + 8), 1uLL);
    }
  }
  return v2;
}

void sub_1925F5034(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37A120;
  uint64_t v4 = a2 + 8;
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      *(void *)(a2 + 32) = v4;
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v4);
      *(void *)(a2 + 32) = result;
    }
  }
  else
  {
    *(void *)(a2 + 32) = 0;
  }
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a2 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 64) = 0;
  uint64_t v7 = (atomic_ullong *volatile *)(a2 + 64);
  *(unsigned char *)(a2 + 72) = 0;
  if (a2 != a1)
  {
    unint64_t v8 = *(atomic_ullong **)(a1 + 64);
    *(unsigned char *)(a2 + 72) = *(unsigned char *)(a1 + 72);
    atomic_ullong *volatile *v7 = v8;
    int v9 = *(unsigned __int8 *)(a1 + 72);
    *(unsigned char *)(a2 + 72) = v9;
    if ((v9 - 2) < 4 || v9 == 9) {
      atomic_fetch_add(*v7, 1uLL);
    }
  }
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 48));
  uint64_t result = *(void *)(a1 + 32);
  if (result == v2)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 32);
    return v5(v2);
  }
  else if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v4();
  }
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  uint64_t v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v29);
  if (v29[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  unint64_t v3 = v30;
  int v4 = v31;
  switch(v31)
  {
    case 1u:
      unint64_t v3 = v30 ^ 0x8000000000000000;
      goto LABEL_15;
    case 2u:
      atomic_fetch_add((atomic_ullong *volatile)v30, 1uLL);
      if (*(void *)v3 != 1) {
        operator new();
      }
      nitro::flexible_type_fail(0);
      goto LABEL_22;
    case 3u:
      atomic_fetch_add((atomic_ullong *volatile)v30, 1uLL);
      uint64_t v5 = *(float64x2_t **)(v3 + 8);
      uint64_t v6 = *(void *)(v3 + 16) - (void)v5;
      if (!v6) {
        goto LABEL_22;
      }
      unint64_t v7 = v6 >> 3;
      if (v7 <= 1) {
        unint64_t v7 = 1;
      }
      if (v7 < 4)
      {
        unint64_t v8 = 0;
LABEL_20:
        unint64_t v12 = v7 - v8;
        uint64_t v13 = &v5->f64[v8];
        do
        {
          *uint64_t v13 = -*v13;
          ++v13;
          --v12;
        }
        while (v12);
        goto LABEL_22;
      }
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      int v9 = v5 + 1;
      unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        float64x2_t v11 = vnegq_f64(*v9);
        v9[-1] = vnegq_f64(v9[-1]);
        float64x2_t *v9 = v11;
        v9 += 2;
        v10 -= 4;
      }
      while (v10);
      if (v7 != v8) {
        goto LABEL_20;
      }
LABEL_22:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = v3;
      *(unsigned char *)(a2 + 24) = v4;
      atomic_fetch_add((atomic_ullong *volatile)v3, 1uLL);
LABEL_23:
      switch(v4)
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1 && v3 != 0)
          {
            uint64_t v15 = 0x1012C404EF22A49;
            if ((*(char *)(v3 + 31) & 0x80000000) == 0) {
              goto LABEL_55;
            }
            uint64_t v16 = *(void **)(v3 + 8);
            goto LABEL_54;
          }
          break;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1 && v3 != 0)
          {
            uint64_t v15 = 0x1080C409938AC02;
            uint64_t v16 = *(void **)(v3 + 8);
            if (!v16) {
              goto LABEL_55;
            }
            *(void *)(v3 + 16) = v16;
            goto LABEL_54;
          }
          break;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1 && v3 != 0)
          {
            uint64_t v15 = 0x1020C405E66F15BLL;
            uint64_t v18 = *(void *)(v3 + 8);
            if (!v18) {
              goto LABEL_55;
            }
            uint64_t v19 = *(void *)(v3 + 16);
            uint64_t v16 = *(void **)(v3 + 8);
            if (v19 != v18)
            {
              do
              {
                v19 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v3 + 24, v19);
              }
              while (v19 != v18);
              uint64_t v16 = *(void **)(v3 + 8);
            }
            *(void *)(v3 + 16) = v18;
            goto LABEL_54;
          }
          break;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1 && v3 != 0)
          {
            uint64_t v15 = 0x1020C405E66F15BLL;
            uint64_t v22 = *(void *)(v3 + 8);
            if (v22)
            {
              uint64_t v23 = *(void *)(v3 + 16);
              uint64_t v24 = *(void **)(v3 + 8);
              if (v23 != v22)
              {
                do
                  uint64_t v23 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v23 - 32);
                while (v23 != v22);
                uint64_t v24 = *(void **)(v3 + 8);
              }
              *(void *)(v3 + 16) = v22;
              uint64_t v16 = v24;
LABEL_54:
              operator delete(v16);
            }
            goto LABEL_55;
          }
          break;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v3, 0xFFFFFFFFFFFFFFFFLL) == 1 && v3 != 0)
          {
            unsigned int v26 = *(void **)(v3 + 56);
            if (v26)
            {
              *(void *)(v3 + 64) = v26;
              operator delete(v26);
            }
            uint64_t v27 = *(void **)(v3 + 32);
            if (v27)
            {
              *(void *)(v3 + 40) = v27;
              operator delete(v27);
            }
            uint64_t v15 = 0x10B0C4002311774;
            uint64_t v28 = *(std::__shared_weak_count **)(v3 + 24);
            if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
LABEL_55:
            MEMORY[0x192FF16B0](v3, v15);
          }
          break;
        default:
          break;
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v29);
      return;
    case 4u:
    case 5u:
      atomic_fetch_add((atomic_ullong *volatile)v30, 1uLL);
      nitro::flexible_type_fail(0);
      goto LABEL_22;
    case 6u:
    case 8u:
      __break(1u);
      return;
    case 7u:
      nitro::flexible_type_fail(0);
      goto LABEL_15;
    case 9u:
      atomic_fetch_add((atomic_ullong *volatile)v30, 1uLL);
      nitro::ndarray_container::negate((nitro::ndarray_container *)(v3 + 8));
      goto LABEL_22;
    default:
      unint64_t v3 = -v30;
LABEL_15:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = v3;
      *(unsigned char *)(a2 + 24) = v4;
      goto LABEL_23;
  }
}

void sub_1925F5724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir13UNARYOPERATOREE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir13UNARYOPERATOREE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir13UNARYOPERATOREE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir13UNARYOPERATOREE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A178;
  uint64_t v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A178;
  uint64_t v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  JUMPOUT(0x192FF16B0);
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v2 = &unk_1EE37A178;
  unint64_t v3 = v2 + 8;
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    goto LABEL_4;
  }
  if (v4 != a1 + 8)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v4 + 16))(v4, v3);
LABEL_4:
    *((void *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((void *)v2 + 4) = v3;
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
LABEL_6:
  *((_WORD *)v2 + 20) = *(_WORD *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  *((void *)v2 + 6) = *(void *)(a1 + 48);
  *((void *)v2 + 7) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v2 + 8) = 0;
  v2[72] = 0;
  if (v2 != (char *)a1)
  {
    *((void *)v2 + 8) = *(void *)(a1 + 64);
    int v6 = *(unsigned __int8 *)(a1 + 72);
    v2[72] = v6;
    if ((v6 - 2) < 4 || v6 == 9) {
      atomic_fetch_add(*((atomic_ullong *volatile *)v2 + 8), 1uLL);
    }
  }
  return v2;
}

void sub_1925F5B58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37A178;
  uint64_t v4 = a2 + 8;
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      *(void *)(a2 + 32) = v4;
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v4);
      *(void *)(a2 + 32) = result;
    }
  }
  else
  {
    *(void *)(a2 + 32) = 0;
  }
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a2 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 64) = 0;
  unint64_t v7 = (atomic_ullong *volatile *)(a2 + 64);
  *(unsigned char *)(a2 + 72) = 0;
  if (a2 != a1)
  {
    unint64_t v8 = *(atomic_ullong **)(a1 + 64);
    *(unsigned char *)(a2 + 72) = *(unsigned char *)(a1 + 72);
    atomic_ullong *volatile *v7 = v8;
    int v9 = *(unsigned __int8 *)(a1 + 72);
    *(unsigned char *)(a2 + 72) = v9;
    if ((v9 - 2) < 4 || v9 == 9) {
      atomic_fetch_add(*v7, 1uLL);
    }
  }
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 48));
  uint64_t result = *(void *)(a1 + 32);
  if (result == v2)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 32);
    return v5(v2);
  }
  else if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v4();
  }
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  uint64_t v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void v5[2] = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v4);
  if (v4[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  unsigned int is_zero = nitro::flexible_type::is_zero((nitro::flexible_type *)v5);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = is_zero;
  *(unsigned char *)(a2 + 24) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v4);
}

void sub_1925F5E7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir13UNARYOPERATOREE3$_1"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir13UNARYOPERATOREE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir13UNARYOPERATOREE3$_1")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir13UNARYOPERATOREE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A750;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    unint64_t v3 = (void *)a1[2];
    uint64_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        unint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v2;
        v6 -= 9;
      }
      while (!v7);
      uint64_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A750;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    unint64_t v3 = (void *)a1[2];
    uint64_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        unint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v2;
        v6 -= 9;
      }
      while (!v7);
      uint64_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  unint64_t v3 = operator new(0x30uLL);
  void *v3 = &unk_1EE37A750;
  std::vector<nitro::impl::delayed_variable>::vector(v3 + 1, v2);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(a1 + 32);
  return v3;
}

void sub_1925F6168(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(__n128 *a1, __n128 *a2)
{
  a2->n128_u64[0] = (unint64_t)&unk_1EE37A750;
  std::vector<nitro::impl::delayed_variable>::vector(&a2->n128_u64[1], &a1->n128_i64[1]);
  __n128 result = a1[2];
  a2[2] = result;
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  if (v1)
  {
    unint64_t v3 = *(void **)(a1 + 16);
    uint64_t v4 = *(void **)(a1 + 8);
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        unint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v1;
        v6 -= 9;
      }
      while (!v7);
      uint64_t v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v1;
    operator delete(v4);
  }
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    unint64_t v3 = (void *)__p[2];
    uint64_t v4 = (void *)__p[1];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        unint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v2;
        v6 -= 9;
      }
      while (!v7);
      uint64_t v4 = (void *)__p[1];
    }
    __p[2] = v2;
    operator delete(v4);
  }

  operator delete(__p);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v52 = 0;
  uint64_t v8 = v6 - v7;
  if (v8)
  {
    unint64_t v9 = 0x8E38E38E38E38E39 * (v8 >> 3);
    if (v9 >> 59) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = 0xC71C71C71C71C720 * (v8 >> 3);
    uint64_t v52 = operator new(v10);
    uint64_t v54 = (char *)v52 + 32 * v9;
    bzero(v52, 32 * v9);
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v53 = (char *)v52 + v10;
    do
    {
      nitro::impl::delayed_variable::operator()(v7 + v11, (uint64_t)v55);
      nitro::nitro_variable::operator=((uint64_t)v52 + v12, (long long *)v55);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v55);
      ++v13;
      uint64_t v7 = a1[1];
      v12 += 32;
      v11 += 72;
    }
    while (v13 < 0x8E38E38E38E38E39 * ((a1[2] - v7) >> 3));
  }
  uint64_t v14 = *(uint64_t ***)(a2 + 8);
  uint64_t v15 = v14[10];
  if (v15)
  {
    unint64_t v16 = a1[4];
    int v17 = v14[10];
    do
    {
      unint64_t v18 = v17[4];
      if (v16 >= v18)
      {
        if (v18 >= v16)
        {
          do
          {
            while (1)
            {
              uint64_t v19 = (uint64_t **)v15;
              unint64_t v20 = v15[4];
              if (v16 < v20) {
                break;
              }
              if (v20 >= v16)
              {
                uint64_t v40 = (uint64_t)v19[8];
                if (!v40) {
                  goto LABEL_55;
                }
                goto LABEL_47;
              }
              uint64_t v15 = v19[1];
              if (!v15)
              {
                double v21 = v19 + 1;
                goto LABEL_44;
              }
            }
            uint64_t v15 = *v19;
          }
          while (*v19);
          double v21 = v19;
LABEL_44:
          uint64_t v37 = (uint64_t *)operator new(0x48uLL);
          v37[4] = v16;
          v37[8] = 0;
          uint64_t *v37 = 0;
          v37[1] = 0;
          v37[2] = (uint64_t)v19;
          *double v21 = v37;
          uint64_t v38 = (uint64_t *)*v14[9];
          uint64_t v39 = v37;
          if (v38)
          {
            v14[9] = v38;
            uint64_t v39 = *v21;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v14[10], v39);
          v14[11] = (uint64_t *)((char *)v14[11] + 1);
          uint64_t v40 = v37[8];
          if (!v40) {
LABEL_55:
          }
            std::__throw_bad_function_call[abi:ne180100]();
LABEL_47:
          (*(void (**)(uint64_t, void **))(*(void *)v40 + 48))(v40, &v52);
          goto LABEL_48;
        }
        ++v17;
      }
      int v17 = (uint64_t *)*v17;
    }
    while (v17);
  }
  uint64_t v22 = v14[1];
  if (!v22)
  {
LABEL_56:
    if (*((int *)global_logger() + 169) <= 6)
    {
      unint64_t v44 = (file_logger *)global_logger();
      started = file_logger::start_stream(v44, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 273, 1);
      unint64_t v46 = pthread_getspecific(*((void *)started + 74));
      if (v46 && *((unsigned char *)v46 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46 + 2, (uint64_t)"function ", 9);
      }
      nitro::get_symbol_from_id((nitro *)a1[4], (uint64_t)v55);
      unint64_t v47 = (char *)pthread_getspecific(*((void *)started + 74));
      if (v47 && v47[280])
      {
        uint64_t v48 = v47 + 16;
        if ((v56 & 0x80u) == 0) {
          uint64_t v49 = v55;
        }
        else {
          uint64_t v49 = (void **)v55[0];
        }
        if ((v56 & 0x80u) == 0) {
          uint64_t v50 = v56;
        }
        else {
          uint64_t v50 = (uint64_t)v55[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
      }
      uint64_t v51 = pthread_getspecific(*((void *)started + 74));
      if (v51 && *((unsigned char *)v51 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51 + 2, (uint64_t)" not found", 10);
      }
      if ((char)v56 < 0) {
        operator delete(v55[0]);
      }
    }
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()();
  }
  unint64_t v23 = a1[4];
  uint64_t v24 = v14[1];
  while (1)
  {
    unint64_t v25 = v24[4];
    if (v23 >= v25) {
      break;
    }
LABEL_19:
    uint64_t v24 = (uint64_t *)*v24;
    if (!v24) {
      goto LABEL_56;
    }
  }
  if (v25 < v23)
  {
    ++v24;
    goto LABEL_19;
  }
  do
  {
    while (1)
    {
      unsigned int v26 = (uint64_t **)v22;
      unint64_t v27 = v22[4];
      if (v23 < v27) {
        break;
      }
      if (v27 >= v23)
      {
        atomic_ullong v29 = (char *)v26;
        goto LABEL_33;
      }
      uint64_t v22 = v26[1];
      if (!v22)
      {
        uint64_t v28 = v26 + 1;
        goto LABEL_29;
      }
    }
    uint64_t v22 = *v26;
  }
  while (*v26);
  uint64_t v28 = v26;
LABEL_29:
  atomic_ullong v29 = (char *)operator new(0x70uLL);
  *((void *)v29 + 4) = v23;
  *((void *)v29 + 13) = 0;
  *(_OWORD *)(v29 + 40) = 0u;
  *(_OWORD *)(v29 + 56) = 0u;
  *(_OWORD *)(v29 + 72) = 0u;
  *(_OWORD *)(v29 + 88) = 0u;
  *((_DWORD *)v29 + 26) = 1065353216;
  *(void *)atomic_ullong v29 = 0;
  *((void *)v29 + 1) = 0;
  *((void *)v29 + 2) = v26;
  std::__shared_weak_count *v28 = (uint64_t *)v29;
  uint64_t v30 = (uint64_t *)**v14;
  unsigned __int8 v31 = (uint64_t *)v29;
  if (v30)
  {
    *uint64_t v14 = v30;
    unsigned __int8 v31 = *v28;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v14[1], v31);
  v14[2] = (uint64_t *)((char *)v14[2] + 1);
LABEL_33:
  nitro::nitro_function::nitro_function((nitro::nitro_function *)v55, (const nitro::nitro_function *)(v29 + 40));
  nitro::nitro_function::run((uint64_t *)v55, (uint64_t *)&v52, *(unint64_t **)(a2 + 8), a3);
  uint64_t v32 = v59;
  if (v59)
  {
    do
    {
      uint64_t v33 = (void *)*v32;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v32 + 3));
      operator delete(v32);
      uint64_t v32 = v33;
    }
    while (v33);
  }
  double v34 = __p;
  __p = 0;
  if (v34) {
    operator delete(v34);
  }
  double v35 = v57;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  atomic_ullong v36 = (std::__shared_weak_count *)v55[1];
  if (v55[1] && !atomic_fetch_add((atomic_ullong *volatile)v55[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
LABEL_48:
  double v41 = (char *)v52;
  if (v52)
  {
    v42 = v53;
    int v43 = v52;
    if (v53 != v52)
    {
      do
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v42 - 32));
      while (v42 != v41);
      int v43 = v52;
    }
    uint64_t v53 = v41;
    operator delete(v43);
  }
}

void sub_1925F68DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (!a10) {
    _Unwind_Resume(exception_object);
  }
  unint64_t v25 = a11;
  unsigned int v26 = a10;
  if (a11 != a10)
  {
    do
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v25 - 32));
    while (v25 != a10);
    unsigned int v26 = a10;
  }
  operator delete(v26);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4CALLEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4CALLEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4CALLEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4CALLEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 274, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 274, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    int v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  unint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925F6C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::$_1(uint64_t a1, uint64_t a2)
{
  std::vector<nitro::impl::delayed_variable>::vector((void *)a1, (uint64_t *)a2);
  uint64_t v4 = *(void *)(a2 + 48);
  if (!v4) {
    goto LABEL_4;
  }
  if (v4 != a2 + 24)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
LABEL_4:
    *(void *)(a1 + 48) = v4;
    goto LABEL_6;
  }
  *(void *)(a1 + 48) = a1 + 24;
  (*(void (**)(void))(**(void **)(a2 + 48) + 24))(*(void *)(a2 + 48));
LABEL_6:
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 80) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 80);
  *(unsigned char *)(a1 + 88) = 0;
  if (a2 != a1)
  {
    uint64_t v7 = *(atomic_ullong **)(a2 + 80);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(unsigned char *)(a1 + 88) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

void sub_1925F6EA8(_Unwind_Exception *exception_object)
{
  if (*v1) {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::$_1((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A7A8;
  uint64_t v2 = a1 + 4;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 9));
  unint64_t v3 = (void *)a1[7];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = (char *)a1[1];
    if (!v4) {
      return a1;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = (char *)a1[1];
  if (v4)
  {
LABEL_7:
    uint64_t v5 = (char *)a1[2];
    uint64_t v6 = v4;
    if (v5 != v4)
    {
      uint64_t v7 = v5 - 72;
      int v8 = v5 - 72;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v8 + 40));
        uint64_t v10 = (char *)*((void *)v8 + 3);
        if (v8 == v10)
        {
          (*(void (**)(char *))(*(void *)v8 + 32))(v8);
        }
        else if (v10)
        {
          (*(void (**)(char *))(*(void *)v10 + 40))(v10);
        }
        v7 -= 72;
        BOOL v9 = v8 == v4;
        v8 -= 72;
      }
      while (!v9);
      uint64_t v6 = (char *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(a1);

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x70uLL);
  void *v2 = &unk_1EE37A7A8;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::$_1((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925F70B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A7A8;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::$_1((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void **a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()((uint64_t)(a1 + 4), (uint64_t)&v67);
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[1];
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v60 = 0;
  if (v6 != v7)
  {
    unint64_t v8 = 0x8E38E38E38E38E39 * ((v6 - v7) >> 3);
    if (v8 >> 59) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    size_t v9 = 0xC71C71C71C71C720 * ((v6 - v7) >> 3);
    uint64_t v60 = operator new(v9);
    uint64_t v62 = (char *)v60 + 32 * v8;
    bzero(v60, 32 * v8);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v61 = (char *)v60 + v9;
    do
    {
      nitro::impl::delayed_variable::operator()(v7 + v10, (uint64_t)&v63);
      nitro::nitro_variable::operator=((uint64_t)v60 + v11, &v63);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v63);
      ++v12;
      uint64_t v7 = a1[1];
      v11 += 32;
      v10 += 72;
    }
    while (v12 < 0x8E38E38E38E38E39 * ((a1[2] - v7) >> 3));
  }
  unint64_t v13 = v67;
  if (v67)
  {
    uint64_t v14 = v68;
    if (v68) {
      atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL has_member_function = nitro::nitro_instance::has_member_function(v13, a1[13]);
    BOOL v16 = has_member_function;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if (v16) {
        goto LABEL_11;
      }
    }
    else if (has_member_function)
    {
LABEL_11:
      int v17 = v67;
      if (!v67) {
        nitro::nitro_variable::instance(void)const::{lambda(void)#1}::operator()();
      }
      unint64_t v18 = v68;
      if (v68) {
        atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      nitro::nitro_instance::get_member_function(v17, a1[13], (nitro::nitro_function *)&v63);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      nitro::nitro_function::run((uint64_t *)&v63, (uint64_t *)&v60, *(unint64_t **)(a2 + 8), a3);
      uint64_t v19 = v66;
      if (v66)
      {
        do
        {
          unint64_t v20 = (void *)*v19;
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v19 + 3));
          operator delete(v19);
          uint64_t v19 = v20;
        }
        while (v20);
      }
      goto LABEL_57;
    }
  }
  uint64_t v21 = *(void *)(a2 + 8);
  uint64_t v22 = *(void **)(v21 + 80);
  if (v22)
  {
    unint64_t v23 = a1[13];
    do
    {
      unint64_t v24 = v22[4];
      if (v23 >= v24)
      {
        if (v24 >= v23)
        {
          std::vector<nitro::nitro_variable>::insert((char **)&v60, (uint64_t)v60, (uint64_t)&v67);
          uint64_t v25 = *(void *)(a2 + 8);
          unint64_t v27 = (uint64_t **)(v25 + 80);
          unsigned int v26 = *(uint64_t **)(v25 + 80);
          unint64_t v28 = a1[13];
          if (!v26)
          {
            atomic_ullong v29 = (uint64_t **)(v25 + 80);
            goto LABEL_34;
          }
          while (1)
          {
            while (1)
            {
              atomic_ullong v29 = (uint64_t **)v26;
              unint64_t v30 = v26[4];
              if (v28 >= v30) {
                break;
              }
              unsigned int v26 = *v29;
              unint64_t v27 = v29;
              if (!*v29) {
                goto LABEL_34;
              }
            }
            if (v30 >= v28) {
              break;
            }
            unsigned int v26 = v29[1];
            if (!v26)
            {
              unint64_t v27 = v29 + 1;
LABEL_34:
              unsigned __int8 v31 = (uint64_t *)operator new(0x48uLL);
              v31[4] = v28;
              v31[8] = 0;
              uint64_t *v31 = 0;
              v31[1] = 0;
              v31[2] = (uint64_t)v29;
              void *v27 = v31;
              uint64_t v32 = **(void **)(v25 + 72);
              uint64_t v33 = v31;
              if (v32)
              {
                *(void *)(v25 + 72) = v32;
                uint64_t v33 = *v27;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v25 + 80), v33);
              ++*(void *)(v25 + 88);
              uint64_t v34 = v31[8];
              if (v34)
              {
LABEL_37:
                (*(void (**)(uint64_t, void **))(*(void *)v34 + 48))(v34, &v60);
                goto LABEL_65;
              }
LABEL_72:
              std::__throw_bad_function_call[abi:ne180100]();
            }
          }
          uint64_t v34 = (uint64_t)v29[8];
          if (v34) {
            goto LABEL_37;
          }
          goto LABEL_72;
        }
        ++v22;
      }
      uint64_t v22 = (void *)*v22;
    }
    while (v22);
  }
  double v35 = *(void **)(v21 + 8);
  if (!v35)
  {
LABEL_74:
    if (*((int *)global_logger() + 169) <= 6)
    {
      uint64_t v55 = (file_logger *)global_logger();
      started = file_logger::start_stream(v55, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 311, 1);
      uint64_t v57 = pthread_getspecific(*((void *)started + 74));
      if (v57 && *((unsigned char *)v57 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57 + 2, (uint64_t)"function ", 9);
      }
      uint64_t v58 = pthread_getspecific(*((void *)started + 74));
      if (v58 && v58[280]) {
        std::ostream::operator<<();
      }
      uint64_t v59 = pthread_getspecific(*((void *)started + 74));
      if (v59 && *((unsigned char *)v59 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59 + 2, (uint64_t)" not found", 10);
      }
    }
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()();
  }
  unint64_t v36 = a1[13];
  while (1)
  {
    unint64_t v37 = v35[4];
    if (v36 < v37) {
      goto LABEL_41;
    }
    if (v37 >= v36) {
      break;
    }
    ++v35;
LABEL_41:
    double v35 = (void *)*v35;
    if (!v35) {
      goto LABEL_74;
    }
  }
  std::vector<nitro::nitro_variable>::insert((char **)&v60, (uint64_t)v60, (uint64_t)&v67);
  uint64_t v38 = *(uint64_t ***)(a2 + 8);
  uint64_t v40 = v38 + 1;
  uint64_t v39 = v38[1];
  unint64_t v41 = a1[13];
  if (v39)
  {
    while (1)
    {
      while (1)
      {
        v42 = (uint64_t **)v39;
        unint64_t v43 = v39[4];
        if (v41 >= v43) {
          break;
        }
        uint64_t v39 = *v42;
        uint64_t v40 = v42;
        if (!*v42) {
          goto LABEL_51;
        }
      }
      if (v43 >= v41) {
        break;
      }
      uint64_t v39 = v42[1];
      if (!v39)
      {
        uint64_t v40 = v42 + 1;
        goto LABEL_51;
      }
    }
    unint64_t v44 = (char *)v42;
  }
  else
  {
    v42 = v38 + 1;
LABEL_51:
    unint64_t v44 = (char *)operator new(0x70uLL);
    *((void *)v44 + 4) = v41;
    *((void *)v44 + 13) = 0;
    *(_OWORD *)(v44 + 40) = 0u;
    *(_OWORD *)(v44 + 56) = 0u;
    *(_OWORD *)(v44 + 72) = 0u;
    *(_OWORD *)(v44 + 88) = 0u;
    *((_DWORD *)v44 + 26) = 1065353216;
    *(void *)unint64_t v44 = 0;
    *((void *)v44 + 1) = 0;
    *((void *)v44 + 2) = v42;
    void *v40 = (uint64_t *)v44;
    uint64_t v45 = (uint64_t *)**v38;
    unint64_t v46 = (uint64_t *)v44;
    if (v45)
    {
      uint64_t *v38 = v45;
      unint64_t v46 = *v40;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v38[1], v46);
    v38[2] = (uint64_t *)((char *)v38[2] + 1);
  }
  nitro::nitro_function::nitro_function((nitro::nitro_function *)&v63, (const nitro::nitro_function *)(v44 + 40));
  nitro::nitro_function::run((uint64_t *)&v63, (uint64_t *)&v60, *(unint64_t **)(a2 + 8), a3);
  unint64_t v47 = v66;
  if (v66)
  {
    do
    {
      uint64_t v48 = (void *)*v47;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v47 + 3));
      operator delete(v47);
      unint64_t v47 = v48;
    }
    while (v48);
  }
LABEL_57:
  uint64_t v49 = __p;
  __p = 0;
  if (v49) {
    operator delete(v49);
  }
  uint64_t v50 = v64;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  uint64_t v51 = (std::__shared_weak_count *)*((void *)&v63 + 1);
  if (*((void *)&v63 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v63 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
LABEL_65:
  uint64_t v52 = (char *)v60;
  if (v60)
  {
    uint64_t v53 = v61;
    uint64_t v54 = v60;
    if (v61 != v60)
    {
      do
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v53 - 32));
      while (v53 != v52);
      uint64_t v54 = v60;
    }
    uint64_t v61 = v52;
    operator delete(v54);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v67);
}

void sub_1925F77D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (__p)
  {
    uint64_t v25 = a11;
    if (a11 == __p)
    {
      unsigned int v26 = __p;
    }
    else
    {
      do
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v25 - 32));
      while (v25 != __p);
      unsigned int v26 = __p;
    }
    operator delete(v26);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4CALLEE3$_1"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4CALLEE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4CALLEE3$_1")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4CALLEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](void **a1)
{
  uint64_t v2 = a1 + 3;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 8));
  unint64_t v3 = a1[6];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = (char *)*a1;
    if (!*a1) {
      return;
    }
    goto LABEL_5;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = (char *)*a1;
  if (*a1)
  {
LABEL_5:
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = v4;
    if (v5 != v4)
    {
      uint64_t v7 = v5 - 72;
      unint64_t v8 = v5 - 72;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v8 + 40));
        uint64_t v10 = (char *)*((void *)v8 + 3);
        if (v8 == v10)
        {
          (*(void (**)(char *))(*(void *)v8 + 32))(v8);
        }
        else if (v10)
        {
          (*(void (**)(char *))(*(void *)v10 + 40))(v10);
        }
        v7 -= 72;
        BOOL v9 = v8 == v4;
        v8 -= 72;
      }
      while (!v9);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
}

uint64_t *std::vector<nitro::nitro_variable>::insert(char **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = (uint64_t *)a3;
  uint64_t v5 = (uint64_t *)*a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 >> 5;
  BOOL v9 = (uint64_t *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFE0];
  unint64_t v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    unint64_t v16 = ((uint64_t)(v6 - (void)v5) >> 5) + 1;
    if (v16 >> 59) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v10 - (void)v5;
    if (v17 >> 4 > v16) {
      unint64_t v16 = v17 >> 4;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    unint64_t v44 = a1 + 2;
    if (v18)
    {
      if (v18 >> 59) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v19 = (char *)operator new(32 * v18);
    }
    else
    {
      uint64_t v19 = 0;
    }
    uint64_t v40 = (uint64_t *)v19;
    unint64_t v41 = &v19[32 * v8];
    v42 = (uint64_t *)v41;
    unint64_t v43 = &v19[32 * v18];
    std::__split_buffer<nitro::nitro_variable>::push_back[abi:ne180100]((uint64_t)&v40, (uint64_t)v3);
    uint64_t v25 = v41;
    unsigned int v26 = (uint64_t *)*a1;
    unint64_t v27 = v41;
    if (*a1 != (char *)v9)
    {
      uint64_t v28 = 0;
      do
      {
        atomic_ullong v29 = &v25[v28 * 8];
        unint64_t v30 = &v9[v28];
        *((_OWORD *)v29 - 2) = *(_OWORD *)&v9[v28 - 4];
        *(v30 - 4) = 0;
        *(v30 - 3) = 0;
        *((void *)v29 - 2) = 0;
        *(v29 - 8) = 0;
        uint64_t v31 = v9[v28 - 2];
        *(v29 - 8) = v9[v28 - 1];
        *((void *)v29 - 2) = v31;
        *(v29 - 8) = v9[v28 - 1];
        *((unsigned char *)v30 - 8) = 0;
        v28 -= 4;
      }
      while (&v9[v28] != v26);
      unint64_t v27 = &v25[v28 * 8];
    }
    unint64_t v41 = v27;
    uint64_t v32 = (uint64_t *)a1[1];
    uint64_t v33 = v42;
    if (v32 != v9)
    {
      do
      {
        *(_OWORD *)uint64_t v33 = *(_OWORD *)v9;
        uint64_t *v9 = 0;
        v9[1] = 0;
        v33[2] = 0;
        *((unsigned char *)v33 + 24) = 0;
        uint64_t v34 = v9[2];
        *((unsigned char *)v33 + 24) = *((unsigned char *)v9 + 24);
        v33[2] = v34;
        *((unsigned char *)v33 + 24) = *((unsigned char *)v9 + 24);
        *((unsigned char *)v9 + 24) = 0;
        v33 += 4;
        v9 += 4;
      }
      while (v9 != v32);
      unint64_t v27 = v41;
      BOOL v9 = (uint64_t *)a1[1];
    }
    double v35 = (uint64_t *)*a1;
    *a1 = v27;
    a1[1] = (char *)v33;
    unint64_t v36 = a1[2];
    a1[2] = v43;
    v42 = v9;
    unint64_t v43 = v36;
    uint64_t v40 = v35;
    unint64_t v41 = (char *)v35;
    if (v9 != v35)
    {
      do
      {
        v42 = v9 - 4;
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v9 - 4));
        BOOL v9 = v42;
      }
      while (v42 != v35);
      BOOL v9 = v40;
    }
    if (v9) {
      operator delete(v9);
    }
    return (uint64_t *)v25;
  }
  else if (v9 == (uint64_t *)v6)
  {
    uint64_t *v9 = *(void *)a3;
    uint64_t v20 = *(void *)(a3 + 8);
    v9[1] = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = &v5[4 * v8];
    v21[2] = 0;
    uint64_t v22 = v21 + 2;
    *((unsigned char *)v22 + 8) = 0;
    if (v9 != (uint64_t *)a3)
    {
      uint64_t v23 = *(void *)(a3 + 16);
      *((unsigned char *)v22 + 8) = *(unsigned char *)(a3 + 24);
      *uint64_t v22 = v23;
      int v24 = *(unsigned __int8 *)(a3 + 24);
      *((unsigned char *)v22 + 8) = v24;
      if ((v24 - 2) < 4 || v24 == 9) {
        atomic_fetch_add((atomic_ullong *volatile)*v22, 1uLL);
      }
    }
    a1[1] = (char *)(v9 + 4);
  }
  else
  {
    uint64_t v11 = v9 + 4;
    uint64_t v12 = v6 - 32;
    if (v6 < 0x20)
    {
      uint64_t v14 = a1[1];
    }
    else
    {
      unint64_t v13 = v6 - 32;
      uint64_t v14 = a1[1];
      do
      {
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
        *(void *)unint64_t v13 = 0;
        *(void *)(v13 + 8) = 0;
        *((void *)v14 + 2) = 0;
        v14[24] = 0;
        uint64_t v15 = *(void *)(v13 + 16);
        v14[24] = *(unsigned char *)(v13 + 24);
        *((void *)v14 + 2) = v15;
        v14[24] = *(unsigned char *)(v13 + 24);
        *(unsigned char *)(v13 + 24) = 0;
        v14 += 32;
        v13 += 32;
      }
      while (v13 < v6);
    }
    a1[1] = v14;
    if ((void *)v6 != v11)
    {
      uint64_t v37 = 32 * ((uint64_t)(v6 - (void)v11) >> 5);
      uint64_t v38 = (uint64_t)&v5[4 * v8 - 4];
      do
      {
        nitro::nitro_variable::operator=(v12, (long long *)(v38 + v37));
        v12 -= 32;
        v37 -= 32;
      }
      while (v37);
    }
    if (v9 <= v3) {
      v3 += 4 * (a1[1] > (char *)v3);
    }
    nitro::nitro_variable::operator=((uint64_t)v9, v3);
  }
  return v9;
}

void sub_1925F7E0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nitro::nitro_variable>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 312, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        BOOL v9 = __p;
      }
      else {
        BOOL v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 312, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  unint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925F8070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void std::__split_buffer<nitro::nitro_variable>::push_back[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4 != *(void **)(a1 + 24)) {
    goto LABEL_22;
  }
  unint64_t v6 = *(unsigned char **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v12 = ((char *)v4 - v6) >> 4;
    if (v4 == (void *)v6) {
      unint64_t v12 = 1;
    }
    if (v12 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v13 = v12 >> 2;
    uint64_t v14 = 32 * v12;
    uint64_t v15 = (char *)operator new(32 * v12);
    uint64_t v16 = &v15[32 * v13];
    uint64_t v17 = &v15[v14];
    if (v4 == (void *)v5)
    {
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = v17;
      if (!v6) {
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v18 = (char *)v4 + (void)v16 - v5;
      uint64_t v19 = 32 * v13;
      do
      {
        uint64_t v20 = &v15[v19];
        *(_OWORD *)uint64_t v20 = *(_OWORD *)v5;
        *(void *)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        *((void *)v20 + 2) = *(void *)(v5 + 16);
        v20[24] = *(unsigned char *)(v5 + 24);
        *(unsigned char *)(v5 + 24) = 0;
        v19 += 32;
        v5 += 32;
      }
      while (v20 + 32 != v18);
      unint64_t v6 = *(unsigned char **)a1;
      unsigned __int8 v21 = *(nitro::nitro_variable **)(a1 + 8);
      uint64_t v22 = *(nitro::nitro_variable **)(a1 + 16);
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v18;
      *(void *)(a1 + 24) = v17;
      while (v22 != v21)
      {
        uint64_t v22 = (nitro::nitro_variable *)((char *)v22 - 32);
        nitro::nitro_variable::~nitro_variable(v22);
      }
      if (!v6) {
        goto LABEL_19;
      }
    }
    operator delete(v6);
LABEL_19:
    uint64_t v4 = *(void **)(a1 + 16);
    goto LABEL_22;
  }
  uint64_t v7 = (uint64_t)(v5 - *(void *)a1) >> 5;
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if ((void *)v5 == v4)
  {
    uint64_t v11 = (void *)(v5 - 32 * v9);
  }
  else
  {
    do
    {
      nitro::nitro_variable::operator=(v5 + 32 * v10, (long long *)v5);
      v5 += 32;
    }
    while ((void *)v5 != v4);
    uint64_t v4 = *(void **)(a1 + 8);
    uint64_t v11 = (void *)(v5 + 32 * v10);
  }
  *(void *)(a1 + 8) = &v4[4 * v10];
  *(void *)(a1 + 16) = v11;
  uint64_t v4 = v11;
LABEL_22:
  uint64_t v23 = *(void *)(a2 + 8);
  void *v4 = *(void *)a2;
  v4[1] = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  void v4[2] = 0;
  unsigned __int8 v24 = (atomic_ullong *volatile *)(v4 + 2);
  *((unsigned char *)v4 + 24) = 0;
  if (v4 != (void *)a2)
  {
    uint64_t v25 = *(atomic_ullong **)(a2 + 16);
    *((unsigned char *)v4 + 24) = *(unsigned char *)(a2 + 24);
    atomic_ullong *volatile *v24 = v25;
    int v26 = *(unsigned __int8 *)(a2 + 24);
    *((unsigned char *)v4 + 24) = v26;
    if ((v26 - 2) < 4 || v26 == 9) {
      atomic_fetch_add(*v24, 1uLL);
    }
  }
  *(void *)(a1 + 16) += 32;
}

uint64_t std::__split_buffer<nitro::nitro_variable>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE37A0C8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    uint64_t v2 = *(char **)(a1 + 8);
    if (!v2) {
      return a1;
    }
  }
  else
  {
    uint64_t v2 = *(char **)(a1 + 8);
    if (!v2) {
      return a1;
    }
  }
  uint64_t v3 = *(char **)(a1 + 16);
  uint64_t v4 = v2;
  if (v3 != v2)
  {
    unint64_t v5 = v3 - 72;
    unint64_t v6 = v3 - 72;
    do
    {
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 40));
      uint64_t v8 = (char *)*((void *)v6 + 3);
      if (v6 == v8)
      {
        (*(void (**)(char *))(*(void *)v6 + 32))(v6);
      }
      else if (v8)
      {
        (*(void (**)(char *))(*(void *)v8 + 40))(v8);
      }
      v5 -= 72;
      BOOL v7 = v6 == v2;
      v6 -= 72;
    }
    while (!v7);
    uint64_t v4 = *(char **)(a1 + 8);
  }
  *(void *)(a1 + 16) = v2;
  operator delete(v4);
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE37A0C8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    uint64_t v2 = *(char **)(a1 + 8);
    if (!v2) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v2 = *(char **)(a1 + 8);
    if (!v2) {
      goto LABEL_14;
    }
  }
  uint64_t v3 = *(char **)(a1 + 16);
  uint64_t v4 = v2;
  if (v3 != v2)
  {
    unint64_t v5 = v3 - 72;
    unint64_t v6 = v3 - 72;
    do
    {
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 40));
      uint64_t v8 = (char *)*((void *)v6 + 3);
      if (v6 == v8)
      {
        (*(void (**)(char *))(*(void *)v6 + 32))(v6);
      }
      else if (v8)
      {
        (*(void (**)(char *))(*(void *)v8 + 40))(v8);
      }
      v5 -= 72;
      BOOL v7 = v6 == v2;
      v6 -= 72;
    }
    while (!v7);
    uint64_t v4 = *(char **)(a1 + 8);
  }
  *(void *)(a1 + 16) = v2;
  operator delete(v4);
LABEL_14:

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  void *v2 = &unk_1EE37A0C8;
  std::__compressed_pair_elem<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_1925F8670(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A0C8;
  return std::__compressed_pair_elem<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0 const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v65 = 0;
  uint64_t v66 = 0;
  __p = 0;
  uint64_t v8 = v6 - v7;
  if (v8)
  {
    unint64_t v9 = 0x8E38E38E38E38E39 * (v8 >> 3);
    if (v9 >> 59) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = 0xC71C71C71C71C720 * (v8 >> 3);
    __p = operator new(v10);
    uint64_t v66 = (char *)__p + 32 * v9;
    bzero(__p, 32 * v9);
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    unint64_t v65 = (char *)__p + v10;
    do
    {
      nitro::impl::delayed_variable::operator()(v7 + v11, (uint64_t)v72);
      nitro::nitro_variable::operator=((uint64_t)__p + v12, v72);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v72);
      ++v13;
      uint64_t v7 = *(void *)(a1 + 8);
      v12 += 32;
      v11 += 72;
    }
    while (v13 < 0x8E38E38E38E38E39 * ((*(void *)(a1 + 16) - v7) >> 3));
  }
  uint64_t v14 = *(void *)(a2 + 8);
  uint64_t v15 = *(uint64_t ***)(v14 + 32);
  if (!v15)
  {
LABEL_40:
    if (*((int *)global_logger() + 169) <= 6)
    {
      uint64_t v34 = (file_logger *)global_logger();
      started = file_logger::start_stream(v34, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 333, 1);
      unint64_t v36 = pthread_getspecific(*((void *)started + 74));
      if (v36 && *((unsigned char *)v36 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36 + 2, (uint64_t)"class ", 6);
      }
      if (*(char *)(a1 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
      }
      else {
        std::string v63 = *(std::string *)(a1 + 32);
      }
      uint64_t v37 = (char *)pthread_getspecific(*((void *)started + 74));
      if (v37 && v37[280])
      {
        uint64_t v38 = v37 + 16;
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v39 = &v63;
        }
        else {
          uint64_t v39 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v63.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, size);
      }
      unint64_t v41 = pthread_getspecific(*((void *)started + 74));
      if (v41 && *((unsigned char *)v41 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41 + 2, (uint64_t)" not found", 10);
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v72);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Check failed (", 14);
    unint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)":", 1);
    unint64_t v44 = (void *)std::ostream::operator<<();
    uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"): ", 3);
    unint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"false", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
    unint64_t v47 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
    std::locale::~locale(&v69);
    std::ostream::put();
    std::ostream::flush();
    if (*((int *)global_logger() + 169) <= 6)
    {
      uint64_t v48 = (file_logger *)global_logger();
      uint64_t v49 = file_logger::start_stream(v48, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 334, 1);
      std::stringbuf::str();
      uint64_t v50 = (char *)pthread_getspecific(*((void *)v49 + 74));
      if (v50 && v50[280])
      {
        uint64_t v51 = v50 + 16;
        if ((v68 & 0x80u) == 0) {
          uint64_t v52 = v67;
        }
        else {
          uint64_t v52 = (void **)v67[0];
        }
        if ((v68 & 0x80u) == 0) {
          uint64_t v53 = v68;
        }
        else {
          uint64_t v53 = (uint64_t)v67[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
      }
      if ((char)v68 < 0) {
        operator delete(v67[0]);
      }
    }
    __print_back_trace();
    if (*((int *)global_logger() + 169) <= 6)
    {
      uint64_t v54 = (file_logger *)global_logger();
      uint64_t v55 = file_logger::start_stream(v54, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 334, 1);
      std::stringbuf::str();
      unsigned __int8 v56 = (char *)pthread_getspecific(*((void *)v55 + 74));
      if (v56 && v56[280])
      {
        uint64_t v57 = v56 + 16;
        if ((v71 & 0x80u) == 0) {
          locale = &v69;
        }
        else {
          locale = v69.__locale_;
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v59 = v71;
        }
        else {
          uint64_t v59 = v70;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)locale, v59);
      }
      uint64_t v60 = pthread_getspecific(*((void *)v55 + 74));
      if (v60)
      {
        if (*((unsigned char *)v60 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60 + 2, (uint64_t)"\n", 1);
          file_logger::stream_flush(v55);
          if (*((_DWORD *)v55 + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
          }
        }
      }
      if ((char)v71 < 0) {
        operator delete(v69.__locale_);
      }
    }
    uint64_t v61 = __cxa_allocate_exception(0x18uLL);
    std::stringbuf::str();
  }
  uint64_t v16 = (uint64_t **)(v14 + 24);
  int v17 = *(char *)(a1 + 55);
  if (v17 >= 0) {
    size_t v18 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    size_t v18 = *(void *)(a1 + 40);
  }
  if (v17 >= 0) {
    uint64_t v19 = (const void *)(a1 + 32);
  }
  else {
    uint64_t v19 = *(const void **)(a1 + 32);
  }
  while (1)
  {
    int v20 = *((char *)v15 + 55);
    if (v20 >= 0) {
      size_t v21 = *((unsigned __int8 *)v15 + 55);
    }
    else {
      size_t v21 = (size_t)v15[5];
    }
    if (v20 >= 0) {
      uint64_t v22 = (uint64_t *)(v15 + 4);
    }
    else {
      uint64_t v22 = v15[4];
    }
    if (v21 >= v18) {
      size_t v23 = v18;
    }
    else {
      size_t v23 = v21;
    }
    int v24 = memcmp(v19, v22, v23);
    BOOL v25 = v18 < v21;
    if (v24) {
      BOOL v25 = v24 < 0;
    }
    if (v25) {
      goto LABEL_13;
    }
    int v26 = memcmp(v22, v19, v23);
    BOOL v27 = v21 < v18;
    if (v26) {
      BOOL v27 = v26 < 0;
    }
    if (!v27) {
      break;
    }
    ++v15;
LABEL_13:
    uint64_t v15 = (uint64_t **)*v15;
    if (!v15) {
      goto LABEL_40;
    }
  }
  v69.__locale_ = (std::locale::__imp *)(a1 + 32);
  uint64_t v28 = std::__tree<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, (const void **)(a1 + 32), (uint64_t)&std::piecewise_construct, (long long **)&v69);
  nitro::nitro_class::make_instance(v28[7], (uint64_t *)&__p, (nitro::nitro_instance **)v72);
  uint64_t v29 = *((void *)&v72[0] + 1);
  *(void *)a3 = *(void *)&v72[0];
  *(void *)(a3 + 8) = v29;
  if (v29)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
    unint64_t v30 = (std::__shared_weak_count *)*((void *)&v72[0] + 1);
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 24) = 0;
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  else
  {
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  uint64_t v31 = (char *)__p;
  if (__p)
  {
    uint64_t v32 = v65;
    uint64_t v33 = __p;
    if (v65 != __p)
    {
      do
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v32 - 32));
      while (v32 != v31);
      uint64_t v33 = __p;
    }
    unint64_t v65 = v31;
    operator delete(v33);
  }
}

void sub_1925F8D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char *a16, char *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  a31 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a31 + *(void *)(a31 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a32 = MEMORY[0x1E4FBA470] + 16;
  if (a45 < 0) {
    operator delete(a40);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a48);
  if (!a16) {
    _Unwind_Resume(a1);
  }
  uint64_t v49 = a17;
  uint64_t v50 = a16;
  if (a17 != a16)
  {
    do
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v49 - 32));
    while (v49 != a16);
    uint64_t v50 = a16;
  }
  operator delete(v50);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir10MAKEOBJECTEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir10MAKEOBJECTEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir10MAKEOBJECTEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir10MAKEOBJECTEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void *std::__compressed_pair_elem<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0 const&,0ul>(void *a1, uint64_t a2)
{
  uint64_t v4 = (std::string *)(std::vector<nitro::impl::delayed_variable>::vector(a1, (uint64_t *)a2) + 3);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_1925F900C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::$_1((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    uint64_t v2 = *(char **)a1;
    if (!*(void *)a1) {
      return;
    }
  }
  else
  {
    uint64_t v2 = *(char **)a1;
    if (!*(void *)a1) {
      return;
    }
  }
  unint64_t v3 = *(char **)(a1 + 8);
  uint64_t v4 = v2;
  if (v3 != v2)
  {
    long long v5 = v3 - 72;
    uint64_t v6 = v3 - 72;
    do
    {
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 40));
      uint64_t v8 = (char *)*((void *)v6 + 3);
      if (v6 == v8)
      {
        (*(void (**)(char *))(*(void *)v6 + 32))(v6);
      }
      else if (v8)
      {
        (*(void (**)(char *))(*(void *)v8 + 40))(v8);
      }
      v5 -= 72;
      BOOL v7 = v6 == v2;
      v6 -= 72;
    }
    while (!v7);
    uint64_t v4 = *(char **)a1;
  }
  *(void *)(a1 + 8) = v2;

  operator delete(v4);
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  BOOL v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      size_t v10 = a2;
    }
    else {
      size_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v6;
        uint64_t v14 = (const void *)v6[4];
        uint64_t v12 = v6 + 4;
        unint64_t v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          int v17 = v12;
        }
        else {
          int v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        uint64_t v6 = *v11;
        BOOL v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      uint64_t v6 = v11[1];
      if (!v6)
      {
        BOOL v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v11 = a1 + 1;
LABEL_27:
    size_t v23 = operator new(0x48uLL);
    int v24 = (std::string *)(v23 + 4);
    BOOL v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      v23[6] = *((void *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    v23[7] = 0;
    v23[8] = 0;
    *size_t v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    char *v7 = v23;
    BOOL v27 = (uint64_t *)**a1;
    uint64_t v28 = v23;
    if (v27)
    {
      *a1 = v27;
      uint64_t v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_1925F92BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    BOOL v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *uint64_t v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  return a1;
}

void sub_1925F94C4(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A9B8;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A9B8;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x98uLL);
  void *v2 = &unk_1EE37A9B8;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0::$_0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925F97AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A9B8;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0::$_0((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

double std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 8;
  ++*(void *)(a2 + 24);
  uint64_t v5 = a1 + 80;
  while (2)
  {
    nitro::impl::delayed_variable::operator()(v4, (uint64_t)v49);
    if (v49[0]) {
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()();
    }
    switch(v51)
    {
      case 0:
        uint64_t v6 = *(void *)&v50;
        goto LABEL_22;
      case 1:
        uint64_t v6 = (uint64_t)v50;
        goto LABEL_22;
      case 2:
        double v7 = v50;
        size_t __idx = 0;
        int v8 = (const char *)(*(void *)&v50 + 8);
        if (*(char *)(*(void *)&v50 + 31) < 0) {
          int v8 = *(const char **)(*(void *)&v50 + 8);
        }
        size_t v9 = strlen(v8);
        if (v9 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v10 = v9;
        if (v9 >= 0x17)
        {
          uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9 | 7) != 0x17) {
            uint64_t v12 = v9 | 7;
          }
          uint64_t v13 = v12 + 1;
          p_dst = (std::string *)operator new(v12 + 1);
          __dst.__r_.__value_.__l.__size_ = v10;
          __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v9;
          p_dst = &__dst;
          if (!v9) {
            goto LABEL_16;
          }
        }
        memmove(p_dst, v8, v10);
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v10] = 0;
        uint64_t v6 = std::stoll(&__dst, &__idx, 10);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (*(char *)(*(void *)&v7 + 31) < 0)
        {
          if (__idx != *(void *)(*(void *)&v7 + 16))
          {
LABEL_52:
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            BOOL v27 = std::string::append(&v45, " cannot be interpreted as an integer");
            long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v28;
            v27->__r_.__value_.__l.__size_ = 0;
            v27->__r_.__value_.__r.__words[2] = 0;
            v27->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__dst);
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
        else if (__idx != *(unsigned __int8 *)(*(void *)&v7 + 31))
        {
          goto LABEL_52;
        }
LABEL_22:
        if (v6)
        {
          nitro::impl::delayed_variable::operator()(v5, (uint64_t)v48);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v48);
          if (!(*(unsigned __int8 *)(a2 + 16) | *(unsigned __int8 *)(a2 + 17)))
          {
            nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v49);
            continue;
          }
        }
LABEL_49:
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v49);
        double result = 0.0;
        *a3 = 0u;
        a3[1] = 0u;
        --*(void *)(a2 + 24);
        return result;
      case 3:
        unint64_t v43 = 0;
        unint64_t v44 = 0;
        v42 = 0;
        int v15 = *(unsigned char **)(*(void *)&v50 + 8);
        uint64_t v14 = *(unsigned char **)(*(void *)&v50 + 16);
        int64_t v16 = v14 - v15;
        if (v14 == v15)
        {
          int v17 = 0;
        }
        else
        {
          if (v16 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int v17 = (char *)operator new(v14 - v15);
          v42 = v17;
          unint64_t v44 = &v17[8 * (v16 >> 3)];
          memcpy(v17, v15, v16);
          unint64_t v43 = v44;
        }
        nitro::flexible_type_fail(0);
        if (!v17) {
          goto LABEL_49;
        }
        BOOL v20 = v17;
        goto LABEL_48;
      case 4:
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v33 = 0;
        std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&v33, *(void **)(*(void *)&v50 + 8), *(void **)(*(void *)&v50 + 16), (uint64_t)(*(void *)(*(void *)&v50 + 16) - *(void *)(*(void *)&v50 + 8)) >> 4);
        nitro::flexible_type_fail(0);
        size_t v18 = v33;
        if (!v33) {
          goto LABEL_49;
        }
        uint64_t v19 = v34;
        BOOL v20 = v33;
        if ((void *)v34 != v33)
        {
          do
          {
            v19 -= 16;
            std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v35, v19);
          }
          while ((void *)v19 != v18);
          BOOL v20 = v33;
        }
        uint64_t v34 = (uint64_t)v18;
        goto LABEL_48;
      case 5:
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        unint64_t v30 = 0;
        std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&v30, *(char **)(*(void *)&v50 + 8), *(char **)(*(void *)&v50 + 16), (uint64_t)(*(void *)(*(void *)&v50 + 16) - *(void *)(*(void *)&v50 + 8)) >> 5);
        nitro::flexible_type_fail(0);
        uint64_t v22 = (uint64_t)v30;
        if (!v30) {
          goto LABEL_49;
        }
        uint64_t v23 = v31;
        int v24 = v30;
        if ((void *)v31 != v30)
        {
          do
            uint64_t v23 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v23 - 32);
          while (v23 != v22);
          int v24 = v30;
        }
        uint64_t v31 = v22;
        BOOL v20 = v24;
LABEL_48:
        operator delete(v20);
        goto LABEL_49;
      case 6:
      case 8:
        __break(1u);
        goto LABEL_55;
      case 7:
        goto LABEL_49;
      case 9:
        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v36, (const nitro::ndarray_container *)(*(void *)&v50 + 8));
        nitro::flexible_type_fail(0);
        if (__p)
        {
          unint64_t v41 = __p;
          operator delete(__p);
        }
        if (v38)
        {
          uint64_t v39 = v38;
          operator delete(v38);
        }
        int v21 = v37;
        if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        goto LABEL_49;
      default:
LABEL_55:
        JUMPOUT(0);
    }
  }
}

void sub_1925F9C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (v42) {
    operator delete(v42);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v43 - 128));
  --*(void *)(v41 + 24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5WHILEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5WHILEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5WHILEEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5WHILEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"cond.is_value()", 15);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 348, 1);
    std::stringbuf::str();
    double v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      int v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        size_t v9 = __p;
      }
      else {
        size_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 348, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        int v15 = v23;
      }
      else {
        int v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    int v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  size_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925FA0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    double v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_15;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_15:
    *(void *)(a1 + 96) = v9;
    goto LABEL_17;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void, uint64_t))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96), a1 + 72);
LABEL_17:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *uint64_t v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  uint64_t v14 = *(void *)(a2 + 168);
  if (!v14) {
    goto LABEL_26;
  }
  if (v14 != a2 + 144)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
LABEL_26:
    *(void *)(a1 + 168) = v14;
    goto LABEL_28;
  }
  *(void *)(a1 + 168) = a1 + 144;
  (*(void (**)(void, uint64_t))(**(void **)(a2 + 168) + 24))(*(void *)(a2 + 168), a1 + 144);
LABEL_28:
  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  uint64_t v15 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 200) = 0;
  uint64_t v16 = (atomic_ullong *volatile *)(a1 + 200);
  *(unsigned char *)(a1 + 208) = 0;
  if (a2 != a1)
  {
    int v17 = *(atomic_ullong **)(a2 + 200);
    *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
    atomic_ullong *volatile *v16 = v17;
    int v18 = *(unsigned __int8 *)(a2 + 208);
    *(unsigned char *)(a1 + 208) = v18;
    if ((v18 - 2) < 4 || v18 == 9) {
      atomic_fetch_add(*v16, 1uLL);
    }
  }
  uint64_t v19 = *(void *)(a2 + 240);
  if (!v19) {
    goto LABEL_37;
  }
  if (v19 != a2 + 216)
  {
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
LABEL_37:
    *(void *)(a1 + 240) = v19;
    goto LABEL_39;
  }
  *(void *)(a1 + 240) = a1 + 216;
  (*(void (**)(void))(**(void **)(a2 + 240) + 24))(*(void *)(a2 + 240));
LABEL_39:
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  uint64_t v20 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  if (a2 != a1)
  {
    uint64_t v21 = *(void *)(a2 + 272);
    *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
    *(void *)(a1 + 272) = v21;
    int v22 = *(unsigned __int8 *)(a2 + 280);
    *(unsigned char *)(a1 + 280) = v22;
    if ((v22 - 2) < 4 || v22 == 9) {
      atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 272), 1uLL);
    }
  }
  return a1;
}

void sub_1925FA5A4(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v6);
  uint64_t v8 = v1[21];
  if (v8 == v5)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v5);
  }
  else if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  }
  nitro::nitro_variable::~nitro_variable(v4);
  uint64_t v9 = v1[12];
  if (v9 == v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  }
  else if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
  }
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v10 = (void *)v1[3];
  if (v10 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
    _Unwind_Resume(a1);
  }
  if (v10) {
    (*(void (**)(void *))(*v10 + 40))(v10);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A6F8;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::~$_0(a1 + 1);
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A6F8;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::~$_0(a1 + 1);

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x128uLL);
  void *v2 = &unk_1EE37A6F8;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::$_0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925FA7D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A6F8;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::$_0((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::~$_0((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::~$_0(a1 + 1);

  operator delete(a1);
}

double std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v55);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v55);
  ++*(void *)(a2 + 24);
  uint64_t v5 = a1 + 80;
  uint64_t v6 = a1 + 224;
  uint64_t v7 = a1 + 152;
  while (2)
  {
    nitro::impl::delayed_variable::operator()(v5, (uint64_t)v52);
    if (v52[0]) {
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()();
    }
    switch(v54)
    {
      case 0:
        if (v53 == 0.0) {
          goto LABEL_51;
        }
        goto LABEL_25;
      case 1:
        if (!(uint64_t)v53) {
          goto LABEL_51;
        }
        goto LABEL_25;
      case 2:
        double v8 = v53;
        size_t __idx = 0;
        uint64_t v9 = (const char *)(*(void *)&v53 + 8);
        if (*(char *)(*(void *)&v53 + 31) < 0) {
          uint64_t v9 = *(const char **)(*(void *)&v53 + 8);
        }
        size_t v10 = strlen(v9);
        if (v10 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v11 = v10;
        if (v10 >= 0x17)
        {
          uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17) {
            uint64_t v13 = v10 | 7;
          }
          uint64_t v14 = v13 + 1;
          p_dst = (std::string *)operator new(v13 + 1);
          __dst.__r_.__value_.__l.__size_ = v11;
          __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10;
          p_dst = &__dst;
          if (!v10) {
            goto LABEL_18;
          }
        }
        memmove(p_dst, v9, v11);
LABEL_18:
        p_dst->__r_.__value_.__s.__data_[v11] = 0;
        uint64_t v15 = std::stoll(&__dst, &__idx, 10);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (*(char *)(*(void *)&v8 + 31) < 0)
        {
          if (__idx != *(void *)(*(void *)&v8 + 16))
          {
LABEL_54:
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            uint64_t v29 = std::string::append(&v47, " cannot be interpreted as an integer");
            long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v30;
            v29->__r_.__value_.__l.__size_ = 0;
            v29->__r_.__value_.__r.__words[2] = 0;
            v29->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__dst);
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
        else if (__idx != *(unsigned __int8 *)(*(void *)&v8 + 31))
        {
          goto LABEL_54;
        }
        if (!v15) {
          goto LABEL_51;
        }
LABEL_25:
        nitro::impl::delayed_variable::operator()(v6, (uint64_t)v51);
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v51);
        if (!(*(unsigned __int8 *)(a2 + 16) | *(unsigned __int8 *)(a2 + 17)))
        {
          nitro::impl::delayed_variable::operator()(v7, (uint64_t)v50);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v50);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v52);
          continue;
        }
LABEL_51:
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v52);
        double result = 0.0;
        *a3 = 0u;
        a3[1] = 0u;
        --*(void *)(a2 + 24);
        return result;
      case 3:
        std::string v45 = 0;
        unint64_t v46 = 0;
        unint64_t v44 = 0;
        int v17 = *(unsigned char **)(*(void *)&v53 + 8);
        uint64_t v16 = *(unsigned char **)(*(void *)&v53 + 16);
        int64_t v18 = v16 - v17;
        if (v16 == v17)
        {
          uint64_t v19 = 0;
        }
        else
        {
          if (v18 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = (char *)operator new(v16 - v17);
          unint64_t v44 = v19;
          unint64_t v46 = &v19[8 * (v18 >> 3)];
          memcpy(v19, v17, v18);
          std::string v45 = v46;
        }
        nitro::flexible_type_fail(0);
        if (!v19) {
          goto LABEL_51;
        }
        int v22 = v19;
        goto LABEL_50;
      case 4:
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v35 = 0;
        std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&v35, *(void **)(*(void *)&v53 + 8), *(void **)(*(void *)&v53 + 16), (uint64_t)(*(void *)(*(void *)&v53 + 16) - *(void *)(*(void *)&v53 + 8)) >> 4);
        nitro::flexible_type_fail(0);
        uint64_t v20 = v35;
        if (!v35) {
          goto LABEL_51;
        }
        uint64_t v21 = v36;
        int v22 = v35;
        if ((void *)v36 != v35)
        {
          do
          {
            v21 -= 16;
            std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v37, v21);
          }
          while ((void *)v21 != v20);
          int v22 = v35;
        }
        uint64_t v36 = (uint64_t)v20;
        goto LABEL_50;
      case 5:
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v32 = 0;
        std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&v32, *(char **)(*(void *)&v53 + 8), *(char **)(*(void *)&v53 + 16), (uint64_t)(*(void *)(*(void *)&v53 + 16) - *(void *)(*(void *)&v53 + 8)) >> 5);
        nitro::flexible_type_fail(0);
        uint64_t v24 = (uint64_t)v32;
        if (!v32) {
          goto LABEL_51;
        }
        uint64_t v25 = v33;
        long long v26 = v32;
        if ((void *)v33 != v32)
        {
          do
            uint64_t v25 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v25 - 32);
          while (v25 != v24);
          long long v26 = v32;
        }
        uint64_t v33 = v24;
        int v22 = v26;
LABEL_50:
        operator delete(v22);
        goto LABEL_51;
      case 6:
      case 8:
        __break(1u);
        goto LABEL_57;
      case 7:
        goto LABEL_51;
      case 9:
        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v38, (const nitro::ndarray_container *)(*(void *)&v53 + 8));
        nitro::flexible_type_fail(0);
        if (__p)
        {
          uint64_t v43 = __p;
          operator delete(__p);
        }
        if (v40)
        {
          uint64_t v41 = v40;
          operator delete(v40);
        }
        uint64_t v23 = v39;
        if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        goto LABEL_51;
      default:
LABEL_57:
        JUMPOUT(0);
    }
  }
}

void sub_1925FACFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (v42) {
    operator delete(v42);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v43 - 160));
  --*(void *)(v41 + 24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir3FOREE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir3FOREE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir3FOREE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir3FOREE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"cond.is_value()", 15);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 372, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      double v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 372, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    int v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  int64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925FB114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    uint64_t v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  std::string::size_type v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *std::string::size_type v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  return a1;
}

void sub_1925FB440(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37AC20;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37AC20;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xA0uLL);
  void *v2 = &unk_1EE37AC20;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0::$_0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925FB728(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37AC20;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0::$_0((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v57);
  if (v57[0]) {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()();
  }
  ++*(void *)(a2 + 24);
  if (v59 == 5)
  {
    uint64_t v14 = *(void *)(v58 + 8);
    uint64_t v15 = *(void *)(v58 + 16);
    if (v14 != v15)
    {
      uint64_t v16 = (void *)(a1 + 152);
      uint64_t v17 = a1 + 80;
      do
      {
        long long v60 = 0uLL;
        unsigned __int8 v62 = 0;
        uint64_t v61 = 0;
        if ((atomic_ullong **)v14 != &v61)
        {
          int64_t v18 = *(atomic_ullong **)v14;
          uint64_t v61 = *(atomic_ullong **)v14;
          unsigned __int8 v62 = *(unsigned char *)(v14 + 8);
          if (v62 - 2 < 4 || v62 == 9) {
            atomic_fetch_add(v18, 1uLL);
          }
        }
        uint64_t v20 = *(void *)a2;
        __p[0] = v16;
        unsigned __int8 v21 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v20, (unint64_t *)v16, (uint64_t)&std::piecewise_construct, (void **)__p);
        nitro::nitro_variable::operator=((uint64_t)(v21 + 24), &v60);
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v60);
        nitro::impl::delayed_variable::operator()(v17, (uint64_t)&v54);
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v54);
        if (*(unsigned char *)(a2 + 16)) {
          break;
        }
        if (*(unsigned char *)(a2 + 17)) {
          break;
        }
        v14 += 32;
      }
      while (v14 != v15);
    }
  }
  else
  {
    if (v59 != 4)
    {
      if (*((int *)global_logger() + 169) <= 6)
      {
        int v22 = (file_logger *)global_logger();
        started = file_logger::start_stream(v22, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 413, 1);
        unsigned __int8 v24 = (pthread_key_t *)started;
        if ((unint64_t)v59 > 9) {
          uint64_t v25 = "undefined";
        }
        else {
          uint64_t v25 = off_1E5746BE8[v59];
        }
        long long v26 = (char *)pthread_getspecific(*((void *)started + 74));
        if (v26)
        {
          if (v26[280])
          {
            BOOL v27 = v26 + 16;
            size_t v28 = strlen(v25);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v25, v28);
            size_t v29 = strlen(v25);
            if (v29)
            {
              if (v25[v29 - 1] == 10) {
                file_logger::stream_flush((file_logger *)v24);
              }
            }
          }
        }
        long long v30 = pthread_getspecific(v24[74]);
        if (v30 && *((unsigned char *)v30 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)" is not an iterable type\n", 25);
          file_logger::stream_flush((file_logger *)v24);
        }
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v60);
      uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"Check failed (", 14);
      uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)":", 1);
      uint64_t v33 = (void *)std::ostream::operator<<();
      uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"): ", 3);
      uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"false", 5);
      std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24)));
      uint64_t v36 = std::locale::use_facet(&v54, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
      std::locale::~locale(&v54);
      std::ostream::put();
      std::ostream::flush();
      if (*((int *)global_logger() + 169) <= 6)
      {
        uint64_t v37 = (file_logger *)global_logger();
        uint64_t v38 = file_logger::start_stream(v37, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 414, 1);
        std::stringbuf::str();
        uint64_t v39 = (char *)pthread_getspecific(*((void *)v38 + 74));
        if (v39 && v39[280])
        {
          uint64_t v40 = v39 + 16;
          if ((v53 & 0x80u) == 0) {
            uint64_t v41 = __p;
          }
          else {
            uint64_t v41 = (void **)__p[0];
          }
          if ((v53 & 0x80u) == 0) {
            uint64_t v42 = v53;
          }
          else {
            uint64_t v42 = (uint64_t)__p[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
        }
        if ((char)v53 < 0) {
          operator delete(__p[0]);
        }
      }
      __print_back_trace();
      if (*((int *)global_logger() + 169) <= 6)
      {
        uint64_t v43 = (file_logger *)global_logger();
        unint64_t v44 = file_logger::start_stream(v43, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 414, 1);
        std::stringbuf::str();
        std::string v45 = (char *)pthread_getspecific(*((void *)v44 + 74));
        if (v45 && v45[280])
        {
          unint64_t v46 = v45 + 16;
          if ((v56 & 0x80u) == 0) {
            locale = &v54;
          }
          else {
            locale = v54.__locale_;
          }
          if ((v56 & 0x80u) == 0) {
            uint64_t v48 = v56;
          }
          else {
            uint64_t v48 = v55;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)locale, v48);
        }
        uint64_t v49 = pthread_getspecific(*((void *)v44 + 74));
        if (v49)
        {
          if (*((unsigned char *)v49 + 280))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49 + 2, (uint64_t)"\n", 1);
            file_logger::stream_flush(v44);
            if (*((_DWORD *)v44 + 150) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              void *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
            }
          }
        }
        if ((char)v56 < 0) {
          operator delete(v54.__locale_);
        }
      }
      double v50 = __cxa_allocate_exception(0x18uLL);
      std::stringbuf::str();
    }
    uint64_t v6 = *(void *)(v58 + 8);
    uint64_t v7 = *(void *)(v58 + 16);
    if (v6 != v7)
    {
      int v8 = (void *)(a1 + 152);
      uint64_t v9 = a1 + 80;
      do
      {
        long long v60 = 0uLL;
        unsigned __int8 v62 = 0;
        uint64_t v61 = 0;
        if ((atomic_ullong **)v6 != &v61)
        {
          uint64_t v10 = *(atomic_ullong **)v6;
          uint64_t v61 = *(atomic_ullong **)v6;
          unsigned __int8 v62 = *(unsigned char *)(v6 + 8);
          if (v62 - 2 < 4 || v62 == 9) {
            atomic_fetch_add(v10, 1uLL);
          }
        }
        uint64_t v12 = *(void *)a2;
        __p[0] = v8;
        int v13 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v12, (unint64_t *)v8, (uint64_t)&std::piecewise_construct, (void **)__p);
        nitro::nitro_variable::operator=((uint64_t)(v13 + 24), &v60);
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v60);
        nitro::impl::delayed_variable::operator()(v9, (uint64_t)&v54);
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v54);
        if (*(unsigned char *)(a2 + 16)) {
          break;
        }
        if (*(unsigned char *)(a2 + 17)) {
          break;
        }
        v6 += 16;
      }
      while (v6 != v7);
    }
  }
  *a3 = 0u;
  a3[1] = 0u;
  --*(void *)(a2 + 24);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v57);
}

void sub_1925FBDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  a27 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a27 + *(void *)(a27 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a28 = MEMORY[0x1E4FBA470] + 16;
  if (a41 < 0) {
    operator delete(a36);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a44);
  --*(void *)(v44 + 24);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a23);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir7FOREACHEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir7FOREACHEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir7FOREACHEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir7FOREACHEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"iterator.is_value()", 19);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 393, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      int v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 393, 1);
    std::stringbuf::str();
    int v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  int64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925FC1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    uint64_t v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_15;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_15:
    *(void *)(a1 + 96) = v9;
    goto LABEL_17;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void, uint64_t))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96), a1 + 72);
LABEL_17:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  std::string::size_type v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *std::string::size_type v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  uint64_t v14 = *(void *)(a2 + 168);
  if (!v14) {
    goto LABEL_26;
  }
  if (v14 != a2 + 144)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
LABEL_26:
    *(void *)(a1 + 168) = v14;
    goto LABEL_28;
  }
  *(void *)(a1 + 168) = a1 + 144;
  (*(void (**)(void))(**(void **)(a2 + 168) + 24))(*(void *)(a2 + 168));
LABEL_28:
  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  uint64_t v15 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 200) = 0;
  uint64_t v16 = (atomic_ullong *volatile *)(a1 + 200);
  *(unsigned char *)(a1 + 208) = 0;
  if (a2 != a1)
  {
    uint64_t v17 = *(atomic_ullong **)(a2 + 200);
    *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
    atomic_ullong *volatile *v16 = v17;
    int v18 = *(unsigned __int8 *)(a2 + 208);
    *(unsigned char *)(a1 + 208) = v18;
    if ((v18 - 2) < 4 || v18 == 9) {
      atomic_fetch_add(*v16, 1uLL);
    }
  }
  return a1;
}

void sub_1925FC5EC(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v4);
  uint64_t v6 = v1[12];
  if (v6 == v3)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v3);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v7 = (void *)v1[3];
  if (v7 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
    _Unwind_Resume(a1);
  }
  if (v7) {
    (*(void (**)(void *))(*v7 + 40))(v7);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A6A0;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::~$_0(a1 + 1);
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A6A0;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::~$_0(a1 + 1);

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xE0uLL);
  void *v2 = &unk_1EE37A6A0;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::$_0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925FC7B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A6A0;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::$_0((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::~$_0((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::~$_0(a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v5);
  if (v5[0]) {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()();
  }
  if (nitro::flexible_type_converter<int>::get((uint64_t)v4, v6)) {
    nitro::impl::delayed_variable::operator()(a1 + 80, (uint64_t)v4);
  }
  else {
    nitro::impl::delayed_variable::operator()(a1 + 152, (uint64_t)v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v4);
  *a2 = 0u;
  a2[1] = 0u;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v5);
}

void sub_1925FC90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir2IFEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir2IFEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir2IFEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir2IFEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"cond.is_value()", 15);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 428, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      int v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 428, 1);
    std::stringbuf::str();
    int v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  int v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925FCBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    uint64_t v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  std::string::size_type v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *std::string::size_type v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  return a1;
}

void sub_1925FCF04(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37ACD0;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37ACD0;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x98uLL);
  void *v2 = &unk_1EE37ACD0;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0::$_0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925FD1EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37ACD0;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0::$_0((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v131);
  nitro::impl::delayed_variable::operator()(a1 + 80, (uint64_t)v128);
  if (v131[0]) {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()();
  }
  if (v128[0]) {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#2}::operator()();
  }
  if (v133 != 5)
  {
    if (v133 == 4)
    {
      uint64_t v4 = v132;
      uint64_t v5 = 0;
      switch(v130)
      {
        case 1:
          uint64_t v5 = (uint64_t)v129;
          goto LABEL_152;
        case 2:
          uint64_t v74 = *(void *)&v129;
          size_t __idx = 0;
          unint64_t v75 = (const char *)(*(void *)&v129 + 8);
          if (*(char *)(*(void *)&v129 + 31) < 0) {
            unint64_t v75 = *(const char **)(*(void *)&v129 + 8);
          }
          size_t v76 = strlen(v75);
          if (v76 >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          std::string::size_type v77 = v76;
          if (v76 >= 0x17)
          {
            uint64_t v96 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v76 | 7) != 0x17) {
              uint64_t v96 = v76 | 7;
            }
            uint64_t v97 = v96 + 1;
            uint64_t v78 = (std::string *)operator new(v96 + 1);
            v121.__r_.__value_.__l.__size_ = v77;
            v121.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
            v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
          }
          else
          {
            *((unsigned char *)&v121.__r_.__value_.__s + 23) = v76;
            uint64_t v78 = &v121;
            if (!v76) {
              goto LABEL_141;
            }
          }
          memmove(v78, v75, v77);
LABEL_141:
          v78->__r_.__value_.__s.__data_[v77] = 0;
          uint64_t v5 = std::stoll(&v121, &__idx, 10);
          if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v121.__r_.__value_.__l.__data_);
          }
          if (*(char *)(v74 + 31) < 0) {
            uint64_t v98 = *(void *)(v74 + 16);
          }
          else {
            uint64_t v98 = *(unsigned __int8 *)(v74 + 31);
          }
          if (__idx != v98)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            uint64_t v119 = std::string::append(&v126, " cannot be interpreted as an integer");
            long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
            v121.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v120;
            v119->__r_.__value_.__l.__size_ = 0;
            v119->__r_.__value_.__r.__words[2] = 0;
            v119->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &v121);
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
LABEL_152:
          uint64_t v99 = *(void *)(v4 + 8) + 16 * v5;
          uint64_t v100 = *(void *)v99;
          int v101 = *(unsigned __int8 *)(v99 + 8);
          if ((v101 - 2) < 4 || v101 == 9)
          {
            atomic_fetch_add((atomic_ullong *volatile)v100, 1uLL);
            *(void *)a2 = 0;
            *(void *)(a2 + 8) = 0;
            *(void *)(a2 + 16) = v100;
            *(unsigned char *)(a2 + 24) = v101;
            atomic_fetch_add((atomic_ullong *volatile)v100, 1uLL);
          }
          else
          {
            *(void *)a2 = 0;
            *(void *)(a2 + 8) = 0;
            *(void *)(a2 + 16) = v100;
            *(unsigned char *)(a2 + 24) = v101;
            if ((v101 - 2) > 7) {
              goto LABEL_101;
            }
          }
          switch(v101)
          {
            case 2:
              if (atomic_fetch_add((atomic_ullong *volatile)v100, 0xFFFFFFFFFFFFFFFFLL) == 1 && v100 != 0)
              {
                if (*(char *)(v100 + 31) < 0) {
                  operator delete(*(void **)(v100 + 8));
                }
                MEMORY[0x192FF16B0](v100, 0x1012C404EF22A49);
              }
              break;
            case 3:
              if (atomic_fetch_add((atomic_ullong *volatile)v100, 0xFFFFFFFFFFFFFFFFLL) == 1 && v100 != 0)
              {
                uint64_t v105 = *(void **)(v100 + 8);
                if (v105)
                {
                  *(void *)(v100 + 16) = v105;
                  operator delete(v105);
                }
                MEMORY[0x192FF16B0](v100, 0x1080C409938AC02);
              }
              break;
            case 4:
              if (atomic_fetch_add((atomic_ullong *volatile)v100, 0xFFFFFFFFFFFFFFFFLL) == 1 && v100 != 0)
              {
                uint64_t v107 = *(void *)(v100 + 8);
                if (!v107) {
                  goto LABEL_194;
                }
                uint64_t v108 = *(void *)(v100 + 16);
                uint64_t v109 = *(void **)(v100 + 8);
                if (v108 != v107)
                {
                  do
                  {
                    v108 -= 16;
                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v100 + 24, v108);
                  }
                  while (v108 != v107);
                  uint64_t v109 = *(void **)(v100 + 8);
                }
                *(void *)(v100 + 16) = v107;
                goto LABEL_193;
              }
              break;
            case 5:
              if (atomic_fetch_add((atomic_ullong *volatile)v100, 0xFFFFFFFFFFFFFFFFLL) == 1 && v100 != 0)
              {
                uint64_t v111 = *(void *)(v100 + 8);
                if (v111)
                {
                  uint64_t v112 = *(void *)(v100 + 16);
                  uint64_t v113 = *(void **)(v100 + 8);
                  if (v112 != v111)
                  {
                    do
                      uint64_t v112 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v112 - 32);
                    while (v112 != v111);
                    uint64_t v113 = *(void **)(v100 + 8);
                  }
                  *(void *)(v100 + 16) = v111;
                  uint64_t v109 = v113;
LABEL_193:
                  operator delete(v109);
                }
LABEL_194:
                MEMORY[0x192FF16B0](v100, 0x1020C405E66F15BLL);
              }
              break;
            case 9:
              if (atomic_fetch_add((atomic_ullong *volatile)v100, 0xFFFFFFFFFFFFFFFFLL) == 1 && v100 != 0)
              {
                uint64_t v115 = *(void **)(v100 + 56);
                if (v115)
                {
                  *(void *)(v100 + 64) = v115;
                  operator delete(v115);
                }
                uint64_t v116 = *(void **)(v100 + 32);
                if (v116)
                {
                  *(void *)(v100 + 40) = v116;
                  operator delete(v116);
                }
                uint64_t v117 = *(std::__shared_weak_count **)(v100 + 24);
                if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                  std::__shared_weak_count::__release_weak(v117);
                }
                MEMORY[0x192FF16B0](v100, 0x10B0C4002311774);
              }
              break;
            default:
              goto LABEL_101;
          }
          break;
        case 3:
          memset(&v121, 0, sizeof(v121));
          unint64_t v80 = *(unsigned char **)(*(void *)&v129 + 8);
          uint64_t v79 = *(unsigned char **)(*(void *)&v129 + 16);
          int64_t v81 = v79 - v80;
          if (v79 == v80)
          {
            uint64_t v82 = 0;
          }
          else
          {
            if (v81 < 0) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v82 = operator new(v79 - v80);
            v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
            v121.__r_.__value_.__r.__words[2] = (std::string::size_type)v82 + 8 * (v81 >> 3);
            memcpy(v82, v80, v81);
            v121.__r_.__value_.__l.__size_ = v121.__r_.__value_.__r.__words[2];
          }
          nitro::flexible_type_fail(0);
          if (!v82) {
            goto LABEL_149;
          }
          uint64_t v85 = v82;
          goto LABEL_148;
        case 4:
          memset(&v121, 0, sizeof(v121));
          std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&v121, *(void **)(*(void *)&v129 + 8), *(void **)(*(void *)&v129 + 16), (uint64_t)(*(void *)(*(void *)&v129 + 16) - *(void *)(*(void *)&v129 + 8)) >> 4);
          nitro::flexible_type_fail(0);
          std::string::size_type v83 = v121.__r_.__value_.__r.__words[0];
          if (!v121.__r_.__value_.__r.__words[0]) {
            goto LABEL_149;
          }
          std::string::size_type size = v121.__r_.__value_.__l.__size_;
          uint64_t v85 = (void *)v121.__r_.__value_.__r.__words[0];
          if (v121.__r_.__value_.__l.__size_ != v121.__r_.__value_.__r.__words[0])
          {
            do
            {
              size -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v121.__r_.__value_.__r.__words[2], size);
            }
            while (size != v83);
            uint64_t v85 = (void *)v121.__r_.__value_.__r.__words[0];
          }
          v121.__r_.__value_.__l.__size_ = v83;
          goto LABEL_148;
        case 5:
          memset(&v121, 0, sizeof(v121));
          std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&v121, *(char **)(*(void *)&v129 + 8), *(char **)(*(void *)&v129 + 16), (uint64_t)(*(void *)(*(void *)&v129 + 16) - *(void *)(*(void *)&v129 + 8)) >> 5);
          nitro::flexible_type_fail(0);
          std::string::size_type v86 = v121.__r_.__value_.__r.__words[0];
          if (!v121.__r_.__value_.__r.__words[0]) {
            goto LABEL_149;
          }
          std::string::size_type v87 = v121.__r_.__value_.__l.__size_;
          std::string::size_type v88 = v121.__r_.__value_.__r.__words[0];
          if (v121.__r_.__value_.__l.__size_ != v121.__r_.__value_.__r.__words[0])
          {
            do
              std::string::size_type v87 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v87 - 32);
            while (v87 != v86);
            std::string::size_type v88 = v121.__r_.__value_.__r.__words[0];
          }
          v121.__r_.__value_.__l.__size_ = v86;
          uint64_t v85 = (void *)v88;
LABEL_148:
          operator delete(v85);
          uint64_t v5 = 0;
          goto LABEL_152;
        case 6:
        case 8:
          goto LABEL_212;
        case 7:
          goto LABEL_152;
        case 9:
          nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v121, (const nitro::ndarray_container *)(*(void *)&v129 + 8));
          nitro::flexible_type_fail(0);
          if (__p)
          {
            uint64_t v125 = __p;
            operator delete(__p);
          }
          if (v122)
          {
            uint64_t v123 = v122;
            operator delete(v122);
          }
          uint64_t v89 = (std::__shared_weak_count *)v121.__r_.__value_.__r.__words[2];
          if (!v121.__r_.__value_.__r.__words[2]
            || atomic_fetch_add((atomic_ullong *volatile)(v121.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
LABEL_149:
            uint64_t v5 = 0;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
            uint64_t v5 = 0;
          }
          goto LABEL_152;
        default:
          uint64_t v5 = *(void *)&v129;
          goto LABEL_152;
      }
      goto LABEL_101;
    }
    goto LABEL_100;
  }
  uint64_t v6 = v132;
  uint64_t v7 = *(void *)(v132 + 8);
  if (*(void *)(v132 + 16) == v7)
  {
LABEL_100:
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    goto LABEL_101;
  }
  unint64_t v8 = 0;
  while (2)
  {
    uint64_t v10 = (unsigned char *)(v7 + 32 * v8);
    switch(v130)
    {
      case 1:
        switch(v10[8])
        {
          case 1:
            double v27 = *(double *)v10;
            double v28 = v129;
            goto LABEL_62;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            goto LABEL_11;
          case 6:
          case 8:
            goto LABEL_212;
          case 9:
            double v44 = *(double *)v10;
            v121.__r_.__value_.__r.__words[0] = 0;
            unint64_t v46 = *(char **)(*(void *)&v44 + 32);
            std::string v45 = *(char **)(*(void *)&v44 + 40);
            if (v45 == v46 || !*(void *)(*(void *)&v44 + 16)) {
              goto LABEL_98;
            }
            unint64_t v47 = v45 - v46 - 8;
            if (v47 < 8)
            {
              std::string::size_type v48 = 1;
              uint64_t v49 = *(char **)(*(void *)&v44 + 32);
              do
              {
LABEL_96:
                uint64_t v73 = *(void *)v49;
                v49 += 8;
                v48 *= v73;
              }
              while (v49 != v45);
              goto LABEL_97;
            }
            uint64_t v68 = (v47 >> 3) + 1;
            uint64_t v49 = &v46[8 * (v68 & 0x3FFFFFFFFFFFFFFELL)];
            std::locale v69 = v46 + 8;
            uint64_t v70 = v68 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v71 = 1;
            uint64_t v72 = 1;
            do
            {
              v71 *= *(v69 - 1);
              v72 *= *v69;
              v69 += 2;
              v70 -= 2;
            }
            while (v70);
            std::string::size_type v48 = v72 * v71;
            if (v68 != (v68 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_96;
            }
LABEL_97:
            v121.__r_.__value_.__r.__words[0] = v48;
            if (v48 != 1)
            {
LABEL_98:
              v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
            }
            int v9 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(*(void *)&v44 + 8), v129);
            break;
          default:
            double v27 = v129;
            double v28 = (double)*(uint64_t *)v10;
            goto LABEL_62;
        }
        goto LABEL_10;
      case 2:
        if (v10[8] != 2) {
          goto LABEL_11;
        }
        double v16 = *(double *)v10;
        int v17 = *(char *)(*(void *)v10 + 31);
        size_t v18 = *(unsigned __int8 *)(*(void *)v10 + 31);
        if (v17 < 0) {
          size_t v19 = *(void *)(*(void *)&v16 + 16);
        }
        else {
          size_t v19 = v18;
        }
        uint64_t v29 = *(unsigned __int8 *)(*(void *)&v129 + 31);
        if (*(char *)(*(void *)&v129 + 31) < 0)
        {
          if (v19 != *(void *)(*(void *)&v129 + 16)) {
            goto LABEL_11;
          }
        }
        else if (v19 != v29)
        {
          goto LABEL_11;
        }
        long long v30 = (unsigned __int8 *)(*(void *)&v16 + 8);
        if ((v18 & 0x80) != 0)
        {
          long long v30 = *(unsigned __int8 **)v30;
          uint64_t v31 = (unsigned __int8 *)(*(void *)&v129 + 8);
          if ((v29 & 0x80) == 0)
          {
LABEL_47:
            if ((v18 & 0x80) != 0) {
              goto LABEL_70;
            }
            goto LABEL_48;
          }
        }
        else
        {
          uint64_t v31 = (unsigned __int8 *)(*(void *)&v129 + 8);
          if ((v29 & 0x80) == 0) {
            goto LABEL_47;
          }
        }
        uint64_t v31 = *(unsigned __int8 **)v31;
        if ((v18 & 0x80) == 0)
        {
LABEL_48:
          if (!v19) {
            goto LABEL_130;
          }
          while (*v30 == *v31)
          {
            ++v30;
            ++v31;
            if (!--v19) {
              goto LABEL_130;
            }
          }
LABEL_11:
          ++v8;
          uint64_t v7 = *(void *)(v6 + 8);
          if (v8 >= (*(void *)(v6 + 16) - v7) >> 5) {
            goto LABEL_100;
          }
          continue;
        }
LABEL_70:
        if (memcmp(v30, v31, v19)) {
          goto LABEL_11;
        }
LABEL_129:
        uint64_t v7 = *(void *)(v6 + 8);
LABEL_130:
        *(void *)(a2 + 16) = 0;
        uint64_t v90 = (atomic_ullong *volatile *)(a2 + 16);
        uint64_t v91 = v7 + 32 * v8;
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        if (a2 != v91)
        {
          unint64_t v93 = *(atomic_ullong **)(v91 + 16);
          uint64_t v92 = v91 + 16;
          *(unsigned char *)(a2 + 24) = *(unsigned char *)(v92 + 8);
          atomic_ullong *volatile *v90 = v93;
          int v94 = *(unsigned __int8 *)(v92 + 8);
          *(unsigned char *)(a2 + 24) = v94;
          if ((v94 - 2) < 4 || v94 == 9) {
            atomic_fetch_add(*v90, 1uLL);
          }
        }
LABEL_101:
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v128);
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v131);
        return;
      case 3:
        if (v10[8] != 3) {
          goto LABEL_11;
        }
        uint64_t v13 = *(void *)v10 + 8;
        std::string::size_type v11 = *(double **)v13;
        uint64_t v12 = *(double **)(v13 + 8);
        unint64_t v14 = ((uint64_t)v12 - *(void *)v13) >> 3;
        uint64_t v15 = *(double **)(*(void *)&v129 + 8);
        if (v14 != (uint64_t)(*(void *)(*(void *)&v129 + 16) - (void)v15) >> 3) {
          goto LABEL_11;
        }
        if (v12 == v11) {
          goto LABEL_130;
        }
        if (v14 <= 1) {
          unint64_t v14 = 1;
        }
        while (*v11 == *v15)
        {
          ++v15;
          ++v11;
          if (!--v14) {
            goto LABEL_130;
          }
        }
        goto LABEL_11;
      case 4:
        if (v10[8] != 4) {
          goto LABEL_11;
        }
        int v9 = nitro::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__idx, (uint64_t *)(*(void *)v10 + 8), (void *)(*(void *)&v129 + 8));
        goto LABEL_10;
      case 5:
        if (v10[8] != 5) {
          goto LABEL_11;
        }
        nitro::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__idx, (uint64_t *)(*(void *)v10 + 8), (uint64_t *)(*(void *)&v129 + 8));
        goto LABEL_10;
      case 6:
      case 8:
LABEL_212:
        __break(1u);
        return;
      case 7:
        if (v10[8] == 7) {
          goto LABEL_130;
        }
        goto LABEL_11;
      case 9:
        uint64_t v20 = (_DWORD *)(*(void *)&v129 + 8);
        switch(v10[8])
        {
          case 1:
            double v38 = *(double *)v10;
            v121.__r_.__value_.__r.__words[0] = 0;
            uint64_t v40 = *(char **)(*(void *)&v129 + 32);
            uint64_t v39 = *(char **)(*(void *)&v129 + 40);
            if (v39 == v40 || !*(void *)(*(void *)&v129 + 16)) {
              goto LABEL_91;
            }
            unint64_t v41 = v39 - v40 - 8;
            if (v41 < 8)
            {
              std::string::size_type v42 = 1;
              uint64_t v43 = *(char **)(*(void *)&v129 + 32);
              do
              {
LABEL_89:
                uint64_t v67 = *(void *)v43;
                v43 += 8;
                v42 *= v67;
              }
              while (v43 != v39);
              goto LABEL_90;
            }
            uint64_t v62 = (v41 >> 3) + 1;
            uint64_t v43 = &v40[8 * (v62 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v63 = v40 + 8;
            uint64_t v64 = v62 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v65 = 1;
            uint64_t v66 = 1;
            do
            {
              v65 *= *(v63 - 1);
              v66 *= *v63;
              v63 += 2;
              v64 -= 2;
            }
            while (v64);
            std::string::size_type v42 = v66 * v65;
            if (v62 != (v62 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_89;
            }
LABEL_90:
            v121.__r_.__value_.__r.__words[0] = v42;
            if (v42 != 1)
            {
LABEL_91:
              v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
              nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
            int v9 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v20, v38);
            goto LABEL_10;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            goto LABEL_11;
          case 6:
          case 8:
            goto LABEL_212;
          case 9:
            int v9 = nitro::ndarray_container::operator==((_DWORD *)(*(void *)v10 + 8), (_DWORD *)(*(void *)&v129 + 8));
            goto LABEL_10;
          default:
            uint64_t v21 = *(void *)v10;
            v121.__r_.__value_.__r.__words[0] = 0;
            uint64_t v23 = *(char **)(*(void *)&v129 + 32);
            int v22 = *(char **)(*(void *)&v129 + 40);
            if (v22 == v23 || !*(void *)(*(void *)&v129 + 16)) {
              goto LABEL_77;
            }
            unint64_t v24 = v22 - v23 - 8;
            if (v24 < 8)
            {
              std::string::size_type v25 = 1;
              long long v26 = *(char **)(*(void *)&v129 + 32);
              do
              {
LABEL_75:
                uint64_t v55 = *(void *)v26;
                v26 += 8;
                v25 *= v55;
              }
              while (v26 != v22);
              goto LABEL_76;
            }
            uint64_t v50 = (v24 >> 3) + 1;
            long long v26 = &v23[8 * (v50 & 0x3FFFFFFFFFFFFFFELL)];
            char v51 = v23 + 8;
            uint64_t v52 = v50 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v53 = 1;
            uint64_t v54 = 1;
            do
            {
              v53 *= *(v51 - 1);
              v54 *= *v51;
              v51 += 2;
              v52 -= 2;
            }
            while (v52);
            std::string::size_type v25 = v54 * v53;
            if (v50 != (v50 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_75;
            }
LABEL_76:
            v121.__r_.__value_.__r.__words[0] = v25;
            if (v25 != 1)
            {
LABEL_77:
              v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
              nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
            int v9 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v20, v21);
            break;
        }
        goto LABEL_10;
      default:
        switch(v10[8])
        {
          case 1:
            double v27 = *(double *)v10;
            double v28 = (double)*(uint64_t *)&v129;
LABEL_62:
            if (v27 == v28) {
              goto LABEL_129;
            }
            goto LABEL_11;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            goto LABEL_11;
          case 6:
          case 8:
            goto LABEL_212;
          case 9:
            uint64_t v32 = *(void *)v10;
            v121.__r_.__value_.__r.__words[0] = 0;
            uint64_t v34 = *(char **)(v32 + 32);
            uint64_t v33 = *(char **)(v32 + 40);
            if (v33 == v34 || !*(void *)(v32 + 16)) {
              goto LABEL_84;
            }
            unint64_t v35 = v33 - v34 - 8;
            if (v35 < 8)
            {
              std::string::size_type v36 = 1;
              uint64_t v37 = *(char **)(v32 + 32);
              do
              {
LABEL_82:
                uint64_t v61 = *(void *)v37;
                v37 += 8;
                v36 *= v61;
              }
              while (v37 != v33);
              goto LABEL_83;
            }
            uint64_t v56 = (v35 >> 3) + 1;
            uint64_t v37 = &v34[8 * (v56 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v57 = v34 + 8;
            uint64_t v58 = v56 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v59 = 1;
            uint64_t v60 = 1;
            do
            {
              v59 *= *(v57 - 1);
              v60 *= *v57;
              v57 += 2;
              v58 -= 2;
            }
            while (v58);
            std::string::size_type v36 = v60 * v59;
            if (v56 != (v56 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_82;
            }
LABEL_83:
            v121.__r_.__value_.__r.__words[0] = v36;
            if (v36 != 1)
            {
LABEL_84:
              v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
            }
            int v9 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v32 + 8), *(uint64_t *)&v129);
LABEL_10:
            if (v9) {
              goto LABEL_129;
            }
            break;
          default:
            if (*(void *)v10 == *(void *)&v129) {
              goto LABEL_129;
            }
            goto LABEL_11;
        }
        goto LABEL_11;
    }
  }
}

void sub_1925FDEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a30);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v32 - 136));
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v31);
  goto LABEL_8;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8INDEXGETEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8INDEXGETEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8INDEXGETEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8INDEXGETEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"leftvar.is_value()", 18);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 445, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      unint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        int v9 = __p;
      }
      else {
        int v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 445, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    int v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  size_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925FE3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"idxvar.is_value()", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 446, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      unint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        int v9 = __p;
      }
      else {
        int v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 446, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    int v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  size_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925FE73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v5 = *(void *)(a2 + 56);
  if (!v5) {
    goto LABEL_9;
  }
  if (v5 != a2 + 32)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
LABEL_9:
    *(void *)(a1 + 56) = v5;
    goto LABEL_11;
  }
  *(void *)(a1 + 56) = a1 + 32;
  (*(void (**)(void, uint64_t))(**(void **)(a2 + 56) + 24))(*(void *)(a2 + 56), a1 + 32);
LABEL_11:
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 88) = 0;
  uint64_t v7 = (atomic_ullong *volatile *)(a1 + 88);
  *(unsigned char *)(a1 + 96) = 0;
  if (a2 != a1)
  {
    unint64_t v8 = *(atomic_ullong **)(a2 + 88);
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
    atomic_ullong *volatile *v7 = v8;
    int v9 = *(unsigned __int8 *)(a2 + 96);
    *(unsigned char *)(a1 + 96) = v9;
    if ((v9 - 2) < 4 || v9 == 9) {
      atomic_fetch_add(*v7, 1uLL);
    }
  }
  uint64_t v10 = *(void *)(a2 + 128);
  if (!v10) {
    goto LABEL_20;
  }
  if (v10 != a2 + 104)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
LABEL_20:
    *(void *)(a1 + 128) = v10;
    goto LABEL_22;
  }
  *(void *)(a1 + 128) = a1 + 104;
  (*(void (**)(void))(**(void **)(a2 + 128) + 24))(*(void *)(a2 + 128));
LABEL_22:
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 160) = 0;
  uint64_t v12 = (atomic_ullong *volatile *)(a1 + 160);
  *(unsigned char *)(a1 + 168) = 0;
  if (a2 != a1)
  {
    uint64_t v13 = *(atomic_ullong **)(a2 + 160);
    *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
    atomic_ullong *volatile *v12 = v13;
    int v14 = *(unsigned __int8 *)(a2 + 168);
    *(unsigned char *)(a1 + 168) = v14;
    if ((v14 - 2) < 4 || v14 == 9) {
      atomic_fetch_add(*v12, 1uLL);
    }
  }
  return a1;
}

void sub_1925FEAD0(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v3);
  uint64_t v5 = v1[7];
  if (v5 == v2)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v2);
  }
  else if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
  uint64_t v6 = (void *)v1[3];
  if (v6 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
    _Unwind_Resume(a1);
  }
  if (v6) {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37AD28;
  uint64_t v2 = a1 + 14;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 19));
  unint64_t v3 = (void *)a1[17];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  uint64_t v5 = (void *)a1[8];
  if (v5 == a1 + 5)
  {
    (*(void (**)(void *))(a1[5] + 32))(a1 + 5);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6 == v4)
  {
    (*(void (**)(void *))(*v4 + 32))(a1 + 1);
  }
  else if (v6)
  {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(a1);

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xB8uLL);
  void *v2 = &unk_1EE37AD28;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::$_0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925FEDA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37AD28;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::$_0((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  nitro::impl::delayed_variable::operator()(a1 + 40, (uint64_t)v144);
  nitro::impl::delayed_variable::operator()(a1 + 112, (uint64_t)v141);
  if (*(void *)v5) {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()();
  }
  if (v144[0]) {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#2}::operator()();
  }
  if (v141[0]) {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#3}::operator()();
  }
  int v7 = *(unsigned __int8 *)(v5 + 24);
  if (v7 != 5)
  {
    if (v7 == 4)
    {
      uint64_t v8 = *(void *)(v5 + 16);
      uint64_t v9 = 0;
      switch(v146)
      {
        case 1u:
          uint64_t v9 = (uint64_t)*(double *)&v145;
          goto LABEL_202;
        case 2u:
          int64_t v81 = v145;
          size_t __idx = 0;
          uint64_t v82 = (const char *)(v145 + 1);
          if (*((char *)v145 + 31) < 0) {
            uint64_t v82 = (const char *)v145[1];
          }
          size_t v83 = strlen(v82);
          if (v83 >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          std::string::size_type v84 = v83;
          if (v83 >= 0x17)
          {
            uint64_t v102 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v83 | 7) != 0x17) {
              uint64_t v102 = v83 | 7;
            }
            uint64_t v103 = v102 + 1;
            p_dst = (std::string *)operator new(v102 + 1);
            __dst.__r_.__value_.__l.__size_ = v84;
            __dst.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v83;
            p_dst = &__dst;
            if (!v83) {
              goto LABEL_157;
            }
          }
          memmove(p_dst, v82, v84);
LABEL_157:
          p_dst->__r_.__value_.__s.__data_[v84] = 0;
          uint64_t v9 = std::stoll(&__dst, &__idx, 10);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (*((char *)v81 + 31) < 0) {
            atomic_ullong v104 = v81[2];
          }
          else {
            atomic_ullong v104 = *((unsigned __int8 *)v81 + 31);
          }
          if (__idx != v104)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            unint64_t v137 = std::string::append(&v139, " cannot be interpreted as an integer");
            long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v137->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v138;
            v137->__r_.__value_.__l.__size_ = 0;
            v137->__r_.__value_.__r.__words[2] = 0;
            v137->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__dst);
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
LABEL_202:
          uint64_t v98 = *(void *)(v8 + 8) + 16 * v9;
          if (&v142 != (atomic_ullong **)v98)
          {
            switch(*(unsigned char *)(v98 + 8))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v98, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v119 = *(atomic_ullong *volatile *)v98;
                  if (!*(void *)v98) {
                    goto LABEL_241;
                  }
                  if (*((char *)v119 + 31) < 0) {
                    operator delete((void *)v119[1]);
                  }
                  atomic_ullong *volatile v120 = v119;
                  uint64_t v121 = 0x1012C404EF22A49;
                  goto LABEL_240;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v98, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v122 = *(atomic_ullong *volatile *)v98;
                  if (!*(void *)v98) {
                    goto LABEL_241;
                  }
                  uint64_t v123 = (void *)v122[1];
                  if (v123)
                  {
                    v122[2] = (atomic_ullong)v123;
                    operator delete(v123);
                  }
                  atomic_ullong *volatile v120 = v122;
                  uint64_t v121 = 0x1080C409938AC02;
                  goto LABEL_240;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v98, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v124 = *(atomic_ullong *volatile *)v98;
                  if (!*(void *)v98) {
                    goto LABEL_241;
                  }
                  atomic_ullong v125 = v124[1];
                  if (v125)
                  {
                    uint64_t v126 = v124[2];
                    uint64_t v127 = (void *)v124[1];
                    if (v126 != v125)
                    {
                      do
                      {
                        v126 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v124 + 3), v126);
                      }
                      while (v126 != v125);
                      uint64_t v127 = (void *)v124[1];
                    }
                    v124[2] = v125;
                    goto LABEL_228;
                  }
                  goto LABEL_229;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v98, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v124 = *(atomic_ullong *volatile *)v98;
                  if (!*(void *)v98) {
                    goto LABEL_241;
                  }
                  atomic_ullong v128 = v124[1];
                  if (v128)
                  {
                    uint64_t v129 = v124[2];
                    char v130 = (void *)v124[1];
                    if (v129 != v128)
                    {
                      do
                        uint64_t v129 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v129 - 32);
                      while (v129 != v128);
                      char v130 = (void *)v124[1];
                    }
                    v124[2] = v128;
                    uint64_t v127 = v130;
LABEL_228:
                    operator delete(v127);
                  }
LABEL_229:
                  atomic_ullong *volatile v120 = v124;
                  uint64_t v121 = 0x1020C405E66F15BLL;
                  goto LABEL_240;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v98, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v131 = *(atomic_ullong *volatile *)v98;
                  if (*(void *)v98)
                  {
                    uint64_t v132 = (void *)v131[7];
                    if (v132)
                    {
                      v131[8] = (atomic_ullong)v132;
                      operator delete(v132);
                    }
                    char v133 = (void *)v131[4];
                    if (v133)
                    {
                      v131[5] = (atomic_ullong)v133;
                      operator delete(v133);
                    }
                    uint64_t v134 = (std::__shared_weak_count *)v131[3];
                    if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                      std::__shared_weak_count::__release_weak(v134);
                    }
                    atomic_ullong *volatile v120 = v131;
                    uint64_t v121 = 0x10B0C4002311774;
LABEL_240:
                    MEMORY[0x192FF16B0](v120, v121);
                  }
LABEL_241:
                  *(void *)uint64_t v98 = 0;
                }
                break;
              default:
                break;
            }
            uint64_t v135 = v142;
            *(unsigned char *)(v98 + 8) = v143;
            *(void *)uint64_t v98 = v135;
            LODWORD(v135) = v143;
            *(unsigned char *)(v98 + 8) = v143;
            switch((int)v135)
            {
              case 2:
              case 3:
              case 4:
              case 5:
              case 9:
                goto LABEL_243;
              default:
                goto LABEL_244;
            }
          }
          break;
        case 3u:
          memset(&__dst, 0, sizeof(__dst));
          std::string::size_type v87 = (const void *)v145[1];
          atomic_ullong v86 = v145[2];
          int64_t v88 = v86 - (void)v87;
          if ((const void *)v86 == v87)
          {
            uint64_t v89 = 0;
          }
          else
          {
            if (v88 < 0) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v89 = operator new(v86 - (void)v87);
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
            __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v89 + 8 * (v88 >> 3);
            memcpy(v89, v87, v88);
            __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v89 + 8 * (v88 >> 3);
          }
          nitro::flexible_type_fail(0);
          if (!v89) {
            goto LABEL_199;
          }
          uint64_t v92 = v89;
          goto LABEL_198;
        case 4u:
          memset(&__dst, 0, sizeof(__dst));
          std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&__dst, (void *)v145[1], (void *)v145[2], (v145[2] - v145[1]) >> 4);
          nitro::flexible_type_fail(0);
          std::string::size_type v90 = __dst.__r_.__value_.__r.__words[0];
          if (!__dst.__r_.__value_.__r.__words[0]) {
            goto LABEL_199;
          }
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
          uint64_t v92 = (void *)__dst.__r_.__value_.__r.__words[0];
          if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
          {
            do
            {
              size -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&__dst.__r_.__value_.__r.__words[2], size);
            }
            while (size != v90);
            uint64_t v92 = (void *)__dst.__r_.__value_.__r.__words[0];
          }
          __dst.__r_.__value_.__l.__size_ = v90;
          goto LABEL_198;
        case 5u:
          memset(&__dst, 0, sizeof(__dst));
          std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__dst, (char *)v145[1], (char *)v145[2], (v145[2] - v145[1]) >> 5);
          nitro::flexible_type_fail(0);
          std::string::size_type v93 = __dst.__r_.__value_.__r.__words[0];
          if (!__dst.__r_.__value_.__r.__words[0]) {
            goto LABEL_199;
          }
          std::string::size_type v94 = __dst.__r_.__value_.__l.__size_;
          std::string::size_type v95 = __dst.__r_.__value_.__r.__words[0];
          if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
          {
            do
              std::string::size_type v94 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v94 - 32);
            while (v94 != v93);
            std::string::size_type v95 = __dst.__r_.__value_.__r.__words[0];
          }
          __dst.__r_.__value_.__l.__size_ = v93;
          uint64_t v92 = (void *)v95;
LABEL_198:
          operator delete(v92);
          uint64_t v9 = 0;
          goto LABEL_202;
        case 6u:
        case 8u:
          goto LABEL_252;
        case 7u:
          goto LABEL_202;
        case 9u:
          nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(v145 + 1));
          nitro::flexible_type_fail(0);
          if (__p)
          {
            unint64_t v151 = __p;
            operator delete(__p);
          }
          if (v148)
          {
            uint64_t v149 = v148;
            operator delete(v148);
          }
          uint64_t v96 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
          if (!__dst.__r_.__value_.__r.__words[2]
            || atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
LABEL_199:
            uint64_t v9 = 0;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
            uint64_t v9 = 0;
          }
          goto LABEL_202;
        default:
          uint64_t v9 = (uint64_t)v145;
          goto LABEL_202;
      }
    }
    goto LABEL_244;
  }
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = *(void *)(v10 + 8);
  if (*(void *)(v10 + 16) == v11)
  {
LABEL_102:
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
    __dst.__r_.__value_.__s.__data_[8] = v146;
    if (v146 - 2 < 4 || v146 == 9) {
      atomic_fetch_add(v145, 1uLL);
    }
    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v142;
    LOBYTE(v148) = v143;
    if (v143 - 2 < 4 || v143 == 9) {
      atomic_fetch_add(v142, 1uLL);
    }
    unint64_t v79 = *(void *)(v10 + 16);
    if (v79 >= *(void *)(v10 + 24))
    {
      unint64_t v80 = std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__push_back_slow_path<std::pair<nitro::flexible_type,nitro::flexible_type>>((void **)(v10 + 8), (uint64_t)&__dst);
    }
    else
    {
      *(void *)unint64_t v79 = __dst.__r_.__value_.__r.__words[0];
      *(unsigned char *)(v79 + 8) = __dst.__r_.__value_.__s.__data_[8];
      __dst.__r_.__value_.__s.__data_[8] = 0;
      *(void *)(v79 + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
      *(unsigned char *)(v79 + 24) = (_BYTE)v148;
      LOBYTE(v148) = 0;
      unint64_t v80 = (char *)(v79 + 32);
    }
    *(void *)(v10 + 16) = v80;
    std::pair<nitro::flexible_type,nitro::flexible_type>::~pair((uint64_t)&__dst);
    goto LABEL_244;
  }
  unint64_t v12 = 0;
  while (2)
  {
    int v14 = (unsigned char *)(v11 + 32 * v12);
    switch(v146)
    {
      case 1u:
        switch(v14[8])
        {
          case 1:
            v6.n128_u64[0] = *(void *)v14;
            double v27 = *(double *)&v145;
            goto LABEL_64;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            goto LABEL_13;
          case 6:
          case 8:
            goto LABEL_252;
          case 9:
            uint64_t v47 = *(void *)v14;
            __dst.__r_.__value_.__r.__words[0] = 0;
            uint64_t v49 = *(char **)(v47 + 32);
            std::string::size_type v48 = *(char **)(v47 + 40);
            if (v48 == v49 || !*(void *)(v47 + 16)) {
              goto LABEL_100;
            }
            unint64_t v50 = v48 - v49 - 8;
            if (v50 < 8)
            {
              std::string::size_type v51 = 1;
              uint64_t v52 = *(char **)(v47 + 32);
              do
              {
LABEL_98:
                uint64_t v76 = *(void *)v52;
                v52 += 8;
                v51 *= v76;
              }
              while (v52 != v48);
              goto LABEL_99;
            }
            uint64_t v71 = (v50 >> 3) + 1;
            uint64_t v52 = &v49[8 * (v71 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v72 = v49 + 8;
            uint64_t v73 = v71 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v74 = 1;
            uint64_t v75 = 1;
            do
            {
              v74 *= *(v72 - 1);
              v75 *= *v72;
              v72 += 2;
              v73 -= 2;
            }
            while (v73);
            std::string::size_type v51 = v75 * v74;
            if (v71 != (v71 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_98;
            }
LABEL_99:
            __dst.__r_.__value_.__r.__words[0] = v51;
            if (v51 != 1)
            {
LABEL_100:
              v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
            }
            int v13 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v47 + 8), *(double *)&v145);
            break;
          default:
            v6.n128_u64[0] = (unint64_t)v145;
            double v27 = (double)*(uint64_t *)v14;
            goto LABEL_64;
        }
        goto LABEL_12;
      case 2u:
        if (v14[8] != 2) {
          goto LABEL_13;
        }
        uint64_t v28 = *(void *)v14;
        int v29 = *(char *)(*(void *)v14 + 31);
        size_t v30 = *(unsigned __int8 *)(*(void *)v14 + 31);
        if (v29 < 0) {
          size_t v31 = *(void *)(v28 + 16);
        }
        else {
          size_t v31 = v30;
        }
        uint64_t v32 = *((unsigned __int8 *)v145 + 31);
        if (*((char *)v145 + 31) < 0)
        {
          if (v31 != v145[2]) {
            goto LABEL_13;
          }
        }
        else if (v31 != v32)
        {
          goto LABEL_13;
        }
        uint64_t v33 = (unsigned __int8 *)(v28 + 8);
        if ((v30 & 0x80) != 0)
        {
          uint64_t v33 = *(unsigned __int8 **)v33;
          uint64_t v34 = v145 + 1;
          if ((v32 & 0x80) == 0)
          {
LABEL_49:
            if ((v30 & 0x80) != 0) {
              goto LABEL_72;
            }
            goto LABEL_50;
          }
        }
        else
        {
          uint64_t v34 = v145 + 1;
          if ((v32 & 0x80) == 0) {
            goto LABEL_49;
          }
        }
        uint64_t v34 = (atomic_ullong *)*v34;
        if ((v30 & 0x80) == 0)
        {
LABEL_50:
          if (!v31) {
            goto LABEL_146;
          }
          while (*v33 == *(unsigned __int8 *)v34)
          {
            ++v33;
            uint64_t v34 = (atomic_ullong *)((char *)v34 + 1);
            if (!--v31) {
              goto LABEL_146;
            }
          }
LABEL_13:
          ++v12;
          uint64_t v11 = *(void *)(v10 + 8);
          if (v12 >= (*(void *)(v10 + 16) - v11) >> 5) {
            goto LABEL_102;
          }
          continue;
        }
LABEL_72:
        if (memcmp(v33, v34, v31)) {
          goto LABEL_13;
        }
LABEL_145:
        uint64_t v11 = *(void *)(v10 + 8);
LABEL_146:
        uint64_t v97 = v11 + 32 * v12;
        uint64_t v98 = v97 + 16;
        if (&v142 != (atomic_ullong **)(v97 + 16))
        {
          switch(*(unsigned char *)(v97 + 24))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v98, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v99 = *(atomic_ullong *volatile *)v98;
                if (!*(void *)v98) {
                  goto LABEL_193;
                }
                if (*((char *)v99 + 31) < 0) {
                  operator delete((void *)v99[1]);
                }
                atomic_ullong *volatile v100 = v99;
                uint64_t v101 = 0x1012C404EF22A49;
                goto LABEL_192;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v98, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v109 = *(atomic_ullong *volatile *)v98;
                if (!*(void *)v98) {
                  goto LABEL_193;
                }
                unsigned __int8 v110 = (void *)v109[1];
                if (v110)
                {
                  v109[2] = (atomic_ullong)v110;
                  operator delete(v110);
                }
                atomic_ullong *volatile v100 = v109;
                uint64_t v101 = 0x1080C409938AC02;
                goto LABEL_192;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v98, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v105 = *(atomic_ullong *volatile *)v98;
                if (!*(void *)v98) {
                  goto LABEL_193;
                }
                atomic_ullong v106 = v105[1];
                if (v106)
                {
                  uint64_t v107 = v105[2];
                  uint64_t v108 = (void *)v105[1];
                  if (v107 != v106)
                  {
                    do
                    {
                      v107 -= 16;
                      std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v105 + 3), v107);
                    }
                    while (v107 != v106);
                    uint64_t v108 = (void *)v105[1];
                  }
                  v105[2] = v106;
                  goto LABEL_180;
                }
                goto LABEL_181;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v98, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v105 = *(atomic_ullong *volatile *)v98;
                if (!*(void *)v98) {
                  goto LABEL_193;
                }
                atomic_ullong v111 = v105[1];
                if (v111)
                {
                  uint64_t v112 = v105[2];
                  uint64_t v113 = (void *)v105[1];
                  if (v112 != v111)
                  {
                    do
                      uint64_t v112 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v112 - 32);
                    while (v112 != v111);
                    uint64_t v113 = (void *)v105[1];
                  }
                  v105[2] = v111;
                  uint64_t v108 = v113;
LABEL_180:
                  operator delete(v108);
                }
LABEL_181:
                atomic_ullong *volatile v100 = v105;
                uint64_t v101 = 0x1020C405E66F15BLL;
                goto LABEL_192;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v98, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v114 = *(atomic_ullong *volatile *)v98;
                if (*(void *)v98)
                {
                  uint64_t v115 = (void *)v114[7];
                  if (v115)
                  {
                    v114[8] = (atomic_ullong)v115;
                    operator delete(v115);
                  }
                  uint64_t v116 = (void *)v114[4];
                  if (v116)
                  {
                    v114[5] = (atomic_ullong)v116;
                    operator delete(v116);
                  }
                  uint64_t v117 = (std::__shared_weak_count *)v114[3];
                  if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *, __n128))v117->__on_zero_shared)(v117, v6);
                    std::__shared_weak_count::__release_weak(v117);
                  }
                  atomic_ullong *volatile v100 = v114;
                  uint64_t v101 = 0x10B0C4002311774;
LABEL_192:
                  MEMORY[0x192FF16B0](v100, v101, v6);
                }
LABEL_193:
                *(void *)uint64_t v98 = 0;
              }
              break;
            default:
              break;
          }
          unint64_t v118 = v142;
          *(unsigned char *)(v98 + 8) = v143;
          *(void *)uint64_t v98 = v118;
          LODWORD(v118) = v143;
          *(unsigned char *)(v98 + 8) = v143;
          switch((int)v118)
          {
            case 2:
            case 3:
            case 4:
            case 5:
            case 9:
LABEL_243:
              atomic_fetch_add(*(atomic_ullong *volatile *)v98, 1uLL);
              break;
            default:
              break;
          }
        }
LABEL_244:
        *a2 = 0u;
        a2[1] = 0u;
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v141);
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v144);
        return;
      case 3u:
        if (v14[8] != 3) {
          goto LABEL_13;
        }
        uint64_t v17 = *(void *)v14 + 8;
        uint64_t v15 = *(unint64_t **)v17;
        uint64_t v16 = *(unint64_t **)(v17 + 8);
        unint64_t v18 = ((uint64_t)v16 - *(void *)v17) >> 3;
        size_t v19 = (double *)v145[1];
        if (v18 != (v145[2] - (uint64_t)v19) >> 3) {
          goto LABEL_13;
        }
        if (v16 == v15) {
          goto LABEL_146;
        }
        if (v18 <= 1) {
          unint64_t v18 = 1;
        }
        while (1)
        {
          v6.n128_u64[0] = *v15;
          if (*(double *)v15 != *v19) {
            goto LABEL_13;
          }
          ++v19;
          ++v15;
          if (!--v18) {
            goto LABEL_146;
          }
        }
      case 4u:
        if (v14[8] != 4) {
          goto LABEL_13;
        }
        int v13 = nitro::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__idx, (uint64_t *)(*(void *)v14 + 8), v145 + 1);
        goto LABEL_12;
      case 5u:
        if (v14[8] != 5) {
          goto LABEL_13;
        }
        nitro::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__idx, (uint64_t *)(*(void *)v14 + 8), v145 + 1);
        goto LABEL_12;
      case 6u:
      case 8u:
LABEL_252:
        __break(1u);
        return;
      case 7u:
        if (v14[8] == 7) {
          goto LABEL_146;
        }
        goto LABEL_13;
      case 9u:
        uint64_t v20 = v145 + 1;
        switch(v14[8])
        {
          case 1:
            double v41 = *(double *)v14;
            __dst.__r_.__value_.__r.__words[0] = 0;
            atomic_ullong v43 = v145[4];
            atomic_ullong v42 = v145[5];
            if (v42 == v43 || !v145[2]) {
              goto LABEL_93;
            }
            unint64_t v44 = v42 - v43 - 8;
            if (v44 < 8)
            {
              std::string::size_type v45 = 1;
              unint64_t v46 = (uint64_t *)v145[4];
              do
              {
LABEL_91:
                uint64_t v70 = *v46++;
                v45 *= v70;
              }
              while (v46 != (uint64_t *)v42);
              goto LABEL_92;
            }
            uint64_t v65 = (v44 >> 3) + 1;
            unint64_t v46 = (uint64_t *)(v43 + 8 * (v65 & 0x3FFFFFFFFFFFFFFELL));
            uint64_t v66 = (void *)(v43 + 8);
            uint64_t v67 = v65 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v68 = 1;
            uint64_t v69 = 1;
            do
            {
              v68 *= *(v66 - 1);
              v69 *= *v66;
              v66 += 2;
              v67 -= 2;
            }
            while (v67);
            std::string::size_type v45 = v69 * v68;
            if (v65 != (v65 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_91;
            }
LABEL_92:
            __dst.__r_.__value_.__r.__words[0] = v45;
            if (v45 != 1)
            {
LABEL_93:
              v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
              nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
            int v13 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v20, v41);
            goto LABEL_12;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            goto LABEL_13;
          case 6:
          case 8:
            goto LABEL_252;
          case 9:
            int v13 = nitro::ndarray_container::operator==((_DWORD *)(*(void *)v14 + 8), (_DWORD *)v145 + 2);
            goto LABEL_12;
          default:
            uint64_t v21 = *(void *)v14;
            __dst.__r_.__value_.__r.__words[0] = 0;
            atomic_ullong v23 = v145[4];
            atomic_ullong v22 = v145[5];
            if (v22 == v23 || !v145[2]) {
              goto LABEL_79;
            }
            unint64_t v24 = v22 - v23 - 8;
            if (v24 < 8)
            {
              std::string::size_type v25 = 1;
              long long v26 = (uint64_t *)v145[4];
              do
              {
LABEL_77:
                uint64_t v58 = *v26++;
                v25 *= v58;
              }
              while (v26 != (uint64_t *)v22);
              goto LABEL_78;
            }
            uint64_t v53 = (v24 >> 3) + 1;
            long long v26 = (uint64_t *)(v23 + 8 * (v53 & 0x3FFFFFFFFFFFFFFELL));
            uint64_t v54 = (void *)(v23 + 8);
            uint64_t v55 = v53 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v56 = 1;
            uint64_t v57 = 1;
            do
            {
              v56 *= *(v54 - 1);
              v57 *= *v54;
              v54 += 2;
              v55 -= 2;
            }
            while (v55);
            std::string::size_type v25 = v57 * v56;
            if (v53 != (v53 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_77;
            }
LABEL_78:
            __dst.__r_.__value_.__r.__words[0] = v25;
            if (v25 != 1)
            {
LABEL_79:
              v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
              nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
            int v13 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v20, v21);
            break;
        }
        goto LABEL_12;
      default:
        switch(v14[8])
        {
          case 1:
            v6.n128_u64[0] = *(void *)v14;
            double v27 = (double)(uint64_t)v145;
LABEL_64:
            if (v6.n128_f64[0] == v27) {
              goto LABEL_145;
            }
            goto LABEL_13;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
            goto LABEL_13;
          case 6:
          case 8:
            goto LABEL_252;
          case 9:
            uint64_t v35 = *(void *)v14;
            __dst.__r_.__value_.__r.__words[0] = 0;
            uint64_t v37 = *(char **)(v35 + 32);
            std::string::size_type v36 = *(char **)(v35 + 40);
            if (v36 == v37 || !*(void *)(v35 + 16)) {
              goto LABEL_86;
            }
            unint64_t v38 = v36 - v37 - 8;
            if (v38 < 8)
            {
              std::string::size_type v39 = 1;
              uint64_t v40 = *(char **)(v35 + 32);
              do
              {
LABEL_84:
                uint64_t v64 = *(void *)v40;
                v40 += 8;
                v39 *= v64;
              }
              while (v40 != v36);
              goto LABEL_85;
            }
            uint64_t v59 = (v38 >> 3) + 1;
            uint64_t v40 = &v37[8 * (v59 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v60 = v37 + 8;
            uint64_t v61 = v59 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v62 = 1;
            uint64_t v63 = 1;
            do
            {
              v62 *= *(v60 - 1);
              v63 *= *v60;
              v60 += 2;
              v61 -= 2;
            }
            while (v61);
            std::string::size_type v39 = v63 * v62;
            if (v59 != (v59 & 0x3FFFFFFFFFFFFFFELL)) {
              goto LABEL_84;
            }
LABEL_85:
            __dst.__r_.__value_.__r.__words[0] = v39;
            if (v39 != 1)
            {
LABEL_86:
              v139.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
            }
            int v13 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v35 + 8), (uint64_t)v145);
LABEL_12:
            if (v13) {
              goto LABEL_145;
            }
            break;
          default:
            if (*(atomic_ullong **)v14 == v145) {
              goto LABEL_145;
            }
            goto LABEL_13;
        }
        goto LABEL_13;
    }
  }
}

void sub_1925FFDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v34 & 1) == 0)
    {
LABEL_8:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a16);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8INDEXPUTEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8INDEXPUTEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8INDEXPUTEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8INDEXPUTEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](void *a1)
{
  uint64_t v2 = a1 + 13;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 18));
  unint64_t v3 = (void *)a1[16];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 9));
  uint64_t v4 = (void *)a1[7];
  if (v4 == a1 + 4)
  {
    (*(void (**)(void *))(a1[4] + 32))(a1 + 4);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t result = a1[3];
  if ((void *)result == a1)
  {
    int v7 = *(uint64_t (**)(void *))(*a1 + 32);
    return v7(a1);
  }
  else if (result)
  {
    __n128 v6 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v6();
  }
  return result;
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"leftvar.is_value()", 18);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 477, 1);
    std::stringbuf::str();
    int v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 477, 1);
    std::stringbuf::str();
    int v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      int v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  unint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1926004BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"idxvar.is_value()", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 478, 1);
    std::stringbuf::str();
    int v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 478, 1);
    std::stringbuf::str();
    int v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      int v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  unint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19260083C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"valuevar.is_value()", 19);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 479, 1);
    std::stringbuf::str();
    int v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 479, 1);
    std::stringbuf::str();
    int v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      int v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  unint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192600BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__push_back_slow_path<std::pair<nitro::flexible_type,nitro::flexible_type>>(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 4 > v4) {
    unint64_t v4 = v5 >> 4;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v9 = 32 * v7;
  uint64_t v10 = (char *)operator new(32 * v7);
  uint64_t v11 = &v10[32 * v3];
  unint64_t v12 = &v10[v9];
  *(void *)uint64_t v11 = *(void *)a2;
  v11[8] = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a2 + 8) = 0;
  v11[24] = *(unsigned char *)(a2 + 24);
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  *(unsigned char *)(a2 + 24) = 0;
  int v13 = v11 + 32;
  uint64_t v15 = (char *)*a1;
  int v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v14) {
      return v13;
    }
    goto LABEL_14;
  }
  uint64_t v16 = 0;
  do
  {
    uint64_t v17 = &v11[v16];
    unint64_t v18 = &v14[v16];
    *((void *)v17 - 4) = *(void *)&v14[v16 - 32];
    *(v17 - 24) = v14[v16 - 24];
    *(v18 - 24) = 0;
    *((void *)v17 - 2) = *(void *)&v14[v16 - 16];
    *(v17 - 8) = v14[v16 - 8];
    *(v18 - 8) = 0;
    v16 -= 32;
  }
  while (&v14[v16] != v15);
  size_t v19 = (char *)*a1;
  int v14 = (char *)a1[1];
  *a1 = &v11[v16];
  a1[1] = v13;
  a1[2] = v12;
  if (v14 != v19)
  {
    do
      int v14 = (char *)std::pair<nitro::flexible_type,nitro::flexible_type>::~pair((uint64_t)(v14 - 32));
    while (v14 != v19);
    int v14 = v19;
  }
  if (v14) {
LABEL_14:
  }
    operator delete(v14);
  return v13;
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
      uint64_t v5 = *(void *)(a2 + 56);
      if (!v5)
      {
LABEL_10:
        *(void *)(a1 + 56) = v5;
        goto LABEL_12;
      }
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
      uint64_t v5 = *(void *)(a2 + 56);
      if (!v5) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    uint64_t v5 = *(void *)(a2 + 56);
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (v5 != a2 + 32)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    goto LABEL_10;
  }
  *(void *)(a1 + 56) = a1 + 32;
  (*(void (**)(void))(**(void **)(a2 + 56) + 24))(*(void *)(a2 + 56));
LABEL_12:
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 88) = 0;
  unint64_t v7 = (atomic_ullong *volatile *)(a1 + 88);
  *(unsigned char *)(a1 + 96) = 0;
  if (a2 != a1)
  {
    uint64_t v8 = *(atomic_ullong **)(a2 + 88);
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
    atomic_ullong *volatile *v7 = v8;
    int v9 = *(unsigned __int8 *)(a2 + 96);
    *(unsigned char *)(a1 + 96) = v9;
    if ((v9 - 2) < 4 || v9 == 9) {
      atomic_fetch_add(*v7, 1uLL);
    }
  }
  return a1;
}

void sub_192600FC8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0::$_0(v3);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37AA10;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 5;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  uint64_t v4 = (void *)a1[8];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37AA10;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 5;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  uint64_t v4 = (void *)a1[8];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x70uLL);
  void *v2 = &unk_1EE37AA10;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0::$_0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_192601298(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37AA10;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0::$_0((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(void *a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 5;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  uint64_t v4 = (void *)a1[8];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t result = a1[4];
  if ((void *)result == v2)
  {
    unint64_t v7 = *(uint64_t (**)(void *))(*v2 + 32);
    return v7(v2);
  }
  else if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v6();
  }
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 5;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  uint64_t v4 = (void *)a1[8];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  nitro::impl::delayed_variable::operator()(a1 + 40, (uint64_t)&v29);
  nitro::nitro_variable::operator=(v5, &v29);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v29);
  if (*(void *)v5) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  uint64_t v6 = (unsigned char *)(v5 + 24);
  unint64_t v7 = (atomic_ullong *volatile *)(v5 + 16);
  if (*(unsigned char *)(v5 + 24) == 9)
  {
    nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(void *)(v5 + 16) + 8), (uint64_t)&v29);
    if (!*(void *)v5)
    {
      switch(*v6)
      {
        case 2:
          if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_45;
          }
          atomic_ullong *volatile v8 = *v7;
          if (!*v7) {
            goto LABEL_44;
          }
          if (*((char *)v8 + 31) < 0) {
            operator delete((void *)v8[1]);
          }
          atomic_ullong *volatile v9 = v8;
          uint64_t v10 = 0x1012C404EF22A49;
          goto LABEL_43;
        case 3:
          if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_45;
          }
          atomic_ullong *volatile v11 = *v7;
          if (!*v7) {
            goto LABEL_44;
          }
          unint64_t v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (atomic_ullong)v12;
            operator delete(v12);
          }
          atomic_ullong *volatile v9 = v11;
          uint64_t v10 = 0x1080C409938AC02;
          goto LABEL_43;
        case 4:
          if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_45;
          }
          atomic_ullong *volatile v13 = *v7;
          if (!*v7) {
            goto LABEL_44;
          }
          atomic_ullong v14 = v13[1];
          if (!v14) {
            goto LABEL_32;
          }
          uint64_t v15 = v13[2];
          uint64_t v16 = (void *)v13[1];
          if (v15 != v14)
          {
            do
            {
              v15 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v13 + 3), v15);
            }
            while (v15 != v14);
            uint64_t v16 = (void *)v13[1];
          }
          v13[2] = v14;
          break;
        case 5:
          if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_45;
          }
          atomic_ullong *volatile v13 = *v7;
          if (!*v7) {
            goto LABEL_44;
          }
          atomic_ullong v17 = v13[1];
          if (!v17) {
            goto LABEL_32;
          }
          uint64_t v18 = v13[2];
          size_t v19 = (void *)v13[1];
          if (v18 != v17)
          {
            do
              uint64_t v18 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v18 - 32);
            while (v18 != v17);
            size_t v19 = (void *)v13[1];
          }
          v13[2] = v17;
          uint64_t v16 = v19;
          break;
        case 9:
          if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_45;
          }
          atomic_ullong *volatile v20 = *v7;
          if (!*v7) {
            goto LABEL_44;
          }
          unsigned __int8 v21 = (void *)v20[7];
          if (v21)
          {
            v20[8] = (atomic_ullong)v21;
            operator delete(v21);
          }
          atomic_ullong v22 = (void *)v20[4];
          if (v22)
          {
            v20[5] = (atomic_ullong)v22;
            operator delete(v22);
          }
          atomic_ullong v23 = (std::__shared_weak_count *)v20[3];
          if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
          atomic_ullong *volatile v9 = v20;
          uint64_t v10 = 0x10B0C4002311774;
          goto LABEL_43;
        default:
          goto LABEL_45;
      }
      operator delete(v16);
LABEL_32:
      atomic_ullong *volatile v9 = v13;
      uint64_t v10 = 0x1020C405E66F15BLL;
LABEL_43:
      MEMORY[0x192FF16B0](v9, v10);
LABEL_44:
      atomic_ullong *volatile *v7 = 0;
LABEL_45:
      atomic_ullong *volatile *v7 = 0;
      unsigned char *v6 = 9;
      operator new();
    }
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  *(void *)a2 = 0;
  uint64_t v24 = *(void *)(v5 + 8);
  *(void *)(a2 + 8) = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 16) = 0;
  std::string::size_type v25 = (atomic_ullong *volatile *)(a2 + 16);
  *(unsigned char *)(a2 + 24) = 0;
  if (v5 != a2)
  {
    atomic_ullong *volatile v26 = *v7;
    *(unsigned char *)(a2 + 24) = *(unsigned char *)(v5 + 24);
    atomic_ullong *volatile *v25 = v26;
    int v27 = *v6;
    *(unsigned char *)(a2 + 24) = v27;
    if ((v27 - 2) < 4 || v27 == 9) {
      atomic_fetch_add(*v25, 1uLL);
    }
  }
}

void sub_192601A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x192FF16B0](v2, 0x10B0C4002311774);
  std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6ASSIGNEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6ASSIGNEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6ASSIGNEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6ASSIGNEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1::$_1(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
      uint64_t v5 = *(void *)(a2 + 56);
      if (!v5)
      {
LABEL_10:
        *(void *)(a1 + 56) = v5;
        goto LABEL_12;
      }
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
      uint64_t v5 = *(void *)(a2 + 56);
      if (!v5) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    uint64_t v5 = *(void *)(a2 + 56);
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (v5 != a2 + 32)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    goto LABEL_10;
  }
  *(void *)(a1 + 56) = a1 + 32;
  (*(void (**)(void))(**(void **)(a2 + 56) + 24))(*(void *)(a2 + 56));
LABEL_12:
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 88) = 0;
  unint64_t v7 = (atomic_ullong *volatile *)(a1 + 88);
  *(unsigned char *)(a1 + 96) = 0;
  if (a2 != a1)
  {
    atomic_ullong *volatile v8 = *(atomic_ullong **)(a2 + 88);
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
    atomic_ullong *volatile *v7 = v8;
    int v9 = *(unsigned __int8 *)(a2 + 96);
    *(unsigned char *)(a1 + 96) = v9;
    if ((v9 - 2) < 4 || v9 == 9) {
      atomic_fetch_add(*v7, 1uLL);
    }
  }
  return a1;
}

void sub_192601C88(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0::$_0(v3);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37AA68;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 5;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  uint64_t v4 = (void *)a1[8];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37AA68;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 5;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  uint64_t v4 = (void *)a1[8];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x70uLL);
  void *v2 = &unk_1EE37AA68;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1::$_1((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_192601F58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37AA68;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1::$_1((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(void *a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 5;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  uint64_t v4 = (void *)a1[8];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t result = a1[4];
  if ((void *)result == v2)
  {
    unint64_t v7 = *(uint64_t (**)(void *))(*v2 + 32);
    return v7(v2);
  }
  else if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v6();
  }
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 5;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  uint64_t v4 = (void *)a1[8];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  nitro::impl::delayed_variable::operator()(a1 + 40, (uint64_t)v10);
  nitro::nitro_variable::operator=(v5, v10);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v10);
  *(void *)a2 = *(void *)v5;
  uint64_t v6 = *(void *)(v5 + 8);
  *(void *)(a2 + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v5 != a2)
  {
    unint64_t v7 = *(atomic_ullong **)(v5 + 16);
    *(void *)(a2 + 16) = v7;
    int v8 = *(unsigned __int8 *)(v5 + 24);
    *(unsigned char *)(a2 + 24) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(v7, 1uLL);
    }
  }
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6ASSIGNEE3$_1"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6ASSIGNEE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6ASSIGNEE3$_1")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6ASSIGNEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t **std::__exception_guard_exceptions<std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](uint64_t **a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = **a1;
    if (v3)
    {
      std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__base_destruct_at_end[abi:ne180100](v2, v3);
      operator delete((void *)**a1);
    }
  }
  return a1;
}

void *std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__base_destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[1];
  if (v4 != a2)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v4 + v5 - 72;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v4 + v5 - 32));
      uint64_t v8 = *(void *)(v4 + v5 - 48);
      if (v7 == v8)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 32))(v4 + v5 - 72);
      }
      else if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v4 + v5 - 104));
      uint64_t result = *(void **)(v4 + v5 - 120);
      if ((void *)(v6 - 144) == result)
      {
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(v6 - 144) + 32))(v6 - 144);
      }
      else if (result)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
      }
      v5 -= 144;
    }
    while (v4 + v5 != a2);
  }
  v3[1] = a2;
  return result;
}

uint64_t std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__init_with_size[abi:ne180100]<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*,std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x1C71C71C71C71C8) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = (uint64_t)operator new(144 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    void v5[2] = result + 144 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>::pair[abi:ne180100](v8 + v9, a2 + v9);
        v9 += 144;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1926025A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    uint64_t v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    unint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *uint64_t v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  return a1;
}

void sub_1926027D0(_Unwind_Exception *a1)
{
  nitro::impl::delayed_variable::~delayed_variable(v1);
  _Unwind_Resume(a1);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>,std::reverse_iterator<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*>,std::reverse_iterator<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a3 + v7 - 72;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a3 + v7 - 32));
      uint64_t v10 = *(void *)(a3 + v7 - 48);
      if (v9 == v10)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 32))(a3 + v7 - 72);
      }
      else if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a3 + v7 - 104));
      uint64_t v11 = *(void *)(a3 + v7 - 120);
      if (v8 - 144 == v11)
      {
        (*(void (**)(uint64_t))(*(void *)(v8 - 144) + 32))(v8 - 144);
      }
      else if (v11)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
      }
      v7 -= 144;
    }
    while (a3 + v7 != a5);
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A800;
  uint64_t v3 = (void **)(a1 + 1);
  uint64_t v2 = a1[1];
  if (v2)
  {
    std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__base_destruct_at_end[abi:ne180100](a1 + 1, v2);
    operator delete(*v3);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A800;
  uint64_t v2 = (void **)(a1 + 1);
  uint64_t v1 = a1[1];
  if (v1)
  {
    std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__base_destruct_at_end[abi:ne180100](a1 + 1, v1);
    operator delete(*v2);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = &unk_1EE37A800;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__init_with_size[abi:ne180100]<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*,std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*>((uint64_t)(v2 + 1), *(void *)(a1 + 8), *(void *)(a1 + 16), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4));
  return v2;
}

void sub_192602A70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A800;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__init_with_size[abi:ne180100]<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*,std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*>((uint64_t)(a2 + 1), *(void *)(a1 + 8), *(void *)(a1 + 16), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__base_destruct_at_end[abi:ne180100]((void *)(a1 + 8), v1);
    uint64_t v3 = *v2;
    operator delete(v3);
  }
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void **__p)
{
  uint64_t v3 = __p + 1;
  uint64_t v2 = (uint64_t)__p[1];
  if (v2)
  {
    std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__base_destruct_at_end[abi:ne180100](__p + 1, v2);
    operator delete(*v3);
  }

  operator delete(__p);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(a1 + 16);
  uint64_t v3 = (uint64_t *)(a1 + 8);
  std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::vector(&__p, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4));
  uint64_t v4 = *v3;
  if (*v2 != *v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 72;
    do
    {
      nitro::impl::delayed_variable::operator()(v4 + v7 - 72, (uint64_t)v13);
      if (v13[0]) {
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      }
      nitro::impl::delayed_variable::operator()(*(void *)(a1 + 8) + v7, (uint64_t)v10);
      if (v10[0]) {
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      }
      uint64_t v16 = v14;
      unsigned __int8 v17 = v15;
      if (v15 - 2 < 4 || v15 == 9) {
        atomic_fetch_add(v14, 1uLL);
      }
      uint64_t v18 = v11;
      unsigned __int8 v19 = v12;
      if (v12 - 2 < 4 || v12 == 9) {
        atomic_fetch_add(v11, 1uLL);
      }
      std::pair<nitro::flexible_type,nitro::flexible_type>::operator=[abi:ne180100]((uint64_t)__p + v5, (uint64_t *)&v16);
      std::pair<nitro::flexible_type,nitro::flexible_type>::~pair((uint64_t)&v16);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v10);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v13);
      ++v6;
      uint64_t v4 = *(void *)(a1 + 8);
      v5 += 32;
      v7 += 144;
    }
    while (v6 < 0x8E38E38E38E38E39 * ((*(void *)(a1 + 16) - v4) >> 4));
  }
  operator new();
}

void sub_192602E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a14);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a18);
  if (!__p) {
    _Unwind_Resume(a1);
  }
  unsigned __int8 v19 = a11;
  uint64_t v20 = __p;
  if (a11 != __p)
  {
    do
      unsigned __int8 v19 = (void *)std::pair<nitro::flexible_type,nitro::flexible_type>::~pair((uint64_t)v19 - 32);
    while (v19 != __p);
    uint64_t v20 = __p;
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4DICTEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4DICTEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4DICTEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4DICTEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void *std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 59) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = (char *)operator new(32 * a2);
    *a1 = v4;
    a1[1] = v4;
    uint64_t v5 = &v4[32 * a2];
    a1[2] = v5;
    do
    {
      *(void *)uint64_t v4 = 0;
      v4[8] = 0;
      *((void *)v4 + 2) = 0;
      v4[24] = 0;
      v4 += 32;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_192602FC8(_Unwind_Exception *exception_object)
{
  if (*v1) {
    std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::vector((uint64_t)(v1 + 1));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<nitro::flexible_type,nitro::flexible_type>::operator=[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2 != (uint64_t *)a1)
  {
    switch(*(unsigned char *)(a1 + 8))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_40;
          }
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_39;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_40;
          }
          uint64_t v8 = (void *)v7[1];
          if (v8)
          {
            void v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_39;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_40;
          }
          atomic_ullong v10 = v9[1];
          if (v10)
          {
            uint64_t v11 = v9[2];
            unsigned __int8 v12 = (void *)v9[1];
            if (v11 != v10)
            {
              do
              {
                v11 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v9 + 3), v11);
              }
              while (v11 != v10);
              unsigned __int8 v12 = (void *)v9[1];
            }
            v9[2] = v10;
            goto LABEL_27;
          }
          goto LABEL_28;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_40;
          }
          atomic_ullong v13 = v9[1];
          if (v13)
          {
            uint64_t v14 = v9[2];
            unsigned __int8 v12 = (void *)v9[1];
            if (v14 != v13)
            {
              do
              {
                v14 -= 32;
                std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v14);
              }
              while (v14 != v13);
              unsigned __int8 v12 = (void *)v9[1];
            }
            v9[2] = v13;
LABEL_27:
            operator delete(v12);
          }
LABEL_28:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_39;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)a1;
          if (*(void *)a1)
          {
            uint64_t v16 = (void *)v15[7];
            if (v16)
            {
              v15[8] = (atomic_ullong)v16;
              operator delete(v16);
            }
            unsigned __int8 v17 = (void *)v15[4];
            if (v17)
            {
              v15[5] = (atomic_ullong)v17;
              operator delete(v17);
            }
            uint64_t v18 = (std::__shared_weak_count *)v15[3];
            if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
            atomic_ullong *volatile v5 = v15;
            uint64_t v6 = 0x10B0C4002311774;
LABEL_39:
            MEMORY[0x192FF16B0](v5, v6);
          }
LABEL_40:
          *(void *)a1 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v19 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)a1 = v19;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *((unsigned char *)a2 + 8) = 0;
    uint64_t v20 = (atomic_ullong *volatile *)(a1 + 16);
    switch(*(unsigned char *)(a1 + 24))
    {
      case 2:
        if (atomic_fetch_add(*v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v21 = *v20;
          if (!*v20) {
            goto LABEL_79;
          }
          if (*((char *)v21 + 31) < 0) {
            operator delete((void *)v21[1]);
          }
          atomic_ullong *volatile v22 = v21;
          uint64_t v23 = 0x1012C404EF22A49;
          goto LABEL_78;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v24 = *v20;
          if (!*v20) {
            goto LABEL_79;
          }
          std::string::size_type v25 = (void *)v24[1];
          if (v25)
          {
            v24[2] = (atomic_ullong)v25;
            operator delete(v25);
          }
          atomic_ullong *volatile v22 = v24;
          uint64_t v23 = 0x1080C409938AC02;
          goto LABEL_78;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v26 = *v20;
          if (!*v20) {
            goto LABEL_79;
          }
          atomic_ullong v27 = v26[1];
          if (v27)
          {
            uint64_t v28 = v26[2];
            long long v29 = (void *)v26[1];
            if (v28 != v27)
            {
              do
              {
                v28 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v26 + 3), v28);
              }
              while (v28 != v27);
              long long v29 = (void *)v26[1];
            }
            v26[2] = v27;
            goto LABEL_66;
          }
          goto LABEL_67;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v26 = *v20;
          if (!*v20) {
            goto LABEL_79;
          }
          atomic_ullong v30 = v26[1];
          if (v30)
          {
            uint64_t v31 = v26[2];
            uint64_t v32 = (void *)v26[1];
            if (v31 != v30)
            {
              do
                uint64_t v31 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v31 - 32);
              while (v31 != v30);
              uint64_t v32 = (void *)v26[1];
            }
            v26[2] = v30;
            long long v29 = v32;
LABEL_66:
            operator delete(v29);
          }
LABEL_67:
          atomic_ullong *volatile v22 = v26;
          uint64_t v23 = 0x1020C405E66F15BLL;
          goto LABEL_78;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v33 = *v20;
          if (*v20)
          {
            int v34 = (void *)v33[7];
            if (v34)
            {
              v33[8] = (atomic_ullong)v34;
              operator delete(v34);
            }
            uint64_t v35 = (void *)v33[4];
            if (v35)
            {
              v33[5] = (atomic_ullong)v35;
              operator delete(v35);
            }
            std::string::size_type v36 = (std::__shared_weak_count *)v33[3];
            if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
            atomic_ullong *volatile v22 = v33;
            uint64_t v23 = 0x10B0C4002311774;
LABEL_78:
            MEMORY[0x192FF16B0](v22, v23);
          }
LABEL_79:
          *uint64_t v20 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v37 = (atomic_ullong *)a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *uint64_t v20 = v37;
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *((unsigned char *)a2 + 24) = 0;
  }
  return a1;
}

{
  atomic_ullong *volatile v4;
  atomic_ullong *volatile v5;
  uint64_t v6;
  atomic_ullong *volatile v7;
  void *v8;
  atomic_ullong *volatile v9;
  atomic_ullong v10;
  uint64_t v11;
  void *v12;
  atomic_ullong v13;
  uint64_t v14;
  void *v15;
  atomic_ullong *volatile v16;
  void *v17;
  void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  int v21;
  atomic_ullong *volatile *v23;
  atomic_ullong *volatile v24;
  atomic_ullong *volatile v25;
  uint64_t v26;
  atomic_ullong *volatile v27;
  void *v28;
  atomic_ullong *volatile v29;
  atomic_ullong v30;
  uint64_t v31;
  void *v32;
  atomic_ullong v33;
  uint64_t v34;
  void *v35;
  atomic_ullong *volatile v36;
  void *v37;
  void *v38;
  std::__shared_weak_count *v39;
  atomic_ullong *v40;
  int v41;

  if (a2 != (uint64_t *)a1)
  {
    switch(*(unsigned char *)(a1 + 8))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_40;
          }
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_39;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_40;
          }
          uint64_t v8 = (void *)v7[1];
          if (v8)
          {
            void v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_39;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_40;
          }
          atomic_ullong v10 = v9[1];
          if (v10)
          {
            uint64_t v11 = v9[2];
            unsigned __int8 v12 = (void *)v9[1];
            if (v11 != v10)
            {
              do
              {
                v11 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v9 + 3), v11);
              }
              while (v11 != v10);
              unsigned __int8 v12 = (void *)v9[1];
            }
            v9[2] = v10;
            goto LABEL_27;
          }
          goto LABEL_28;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_40;
          }
          atomic_ullong v13 = v9[1];
          if (v13)
          {
            uint64_t v14 = v9[2];
            atomic_ullong *volatile v15 = (void *)v9[1];
            if (v14 != v13)
            {
              do
                uint64_t v14 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v14 - 32);
              while (v14 != v13);
              atomic_ullong *volatile v15 = (void *)v9[1];
            }
            v9[2] = v13;
            unsigned __int8 v12 = v15;
LABEL_27:
            operator delete(v12);
          }
LABEL_28:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_39;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v16 = *(atomic_ullong *volatile *)a1;
          if (*(void *)a1)
          {
            unsigned __int8 v17 = (void *)v16[7];
            if (v17)
            {
              v16[8] = (atomic_ullong)v17;
              operator delete(v17);
            }
            uint64_t v18 = (void *)v16[4];
            if (v18)
            {
              v16[5] = (atomic_ullong)v18;
              operator delete(v18);
            }
            uint64_t v19 = (std::__shared_weak_count *)v16[3];
            if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
            atomic_ullong *volatile v5 = v16;
            uint64_t v6 = 0x10B0C4002311774;
LABEL_39:
            MEMORY[0x192FF16B0](v5, v6);
          }
LABEL_40:
          *(void *)a1 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v20 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)a1 = v20;
    atomic_ullong *volatile v21 = *((unsigned __int8 *)a2 + 8);
    *(unsigned char *)(a1 + 8) = v21;
    if ((v21 - 2) < 4 || v21 == 9) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a1, 1uLL);
    }
    uint64_t v23 = (atomic_ullong *volatile *)(a1 + 16);
    switch(*(unsigned char *)(a1 + 24))
    {
      case 2:
        if (atomic_fetch_add(*v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v24 = *v23;
          if (!*v23) {
            goto LABEL_85;
          }
          if (*((char *)v24 + 31) < 0) {
            operator delete((void *)v24[1]);
          }
          std::string::size_type v25 = v24;
          atomic_ullong *volatile v26 = 0x1012C404EF22A49;
          goto LABEL_84;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong v27 = *v23;
          if (!*v23) {
            goto LABEL_85;
          }
          uint64_t v28 = (void *)v27[1];
          if (v28)
          {
            v27[2] = (atomic_ullong)v28;
            operator delete(v28);
          }
          std::string::size_type v25 = v27;
          atomic_ullong *volatile v26 = 0x1080C409938AC02;
          goto LABEL_84;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          long long v29 = *v23;
          if (!*v23) {
            goto LABEL_85;
          }
          atomic_ullong v30 = v29[1];
          if (v30)
          {
            uint64_t v31 = v29[2];
            uint64_t v32 = (void *)v29[1];
            if (v31 != v30)
            {
              do
              {
                v31 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v29 + 3), v31);
              }
              while (v31 != v30);
              uint64_t v32 = (void *)v29[1];
            }
            void v29[2] = v30;
            goto LABEL_72;
          }
          goto LABEL_73;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          long long v29 = *v23;
          if (!*v23) {
            goto LABEL_85;
          }
          atomic_ullong *volatile v33 = v29[1];
          if (v33)
          {
            int v34 = v29[2];
            uint64_t v35 = (void *)v29[1];
            if (v34 != v33)
            {
              do
                int v34 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v34 - 32);
              while (v34 != v33);
              uint64_t v35 = (void *)v29[1];
            }
            void v29[2] = v33;
            uint64_t v32 = v35;
LABEL_72:
            operator delete(v32);
          }
LABEL_73:
          std::string::size_type v25 = v29;
          atomic_ullong *volatile v26 = 0x1020C405E66F15BLL;
          goto LABEL_84;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v23, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::string::size_type v36 = *v23;
          if (*v23)
          {
            uint64_t v37 = (void *)v36[7];
            if (v37)
            {
              v36[8] = (atomic_ullong)v37;
              operator delete(v37);
            }
            unint64_t v38 = (void *)v36[4];
            if (v38)
            {
              v36[5] = (atomic_ullong)v38;
              operator delete(v38);
            }
            std::string::size_type v39 = (std::__shared_weak_count *)v36[3];
            if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
            std::string::size_type v25 = v36;
            atomic_ullong *volatile v26 = 0x10B0C4002311774;
LABEL_84:
            MEMORY[0x192FF16B0](v25, v26);
          }
LABEL_85:
          *uint64_t v23 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v40 = (atomic_ullong *)a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *uint64_t v23 = v40;
    double v41 = *((unsigned __int8 *)a2 + 24);
    *(unsigned char *)(a1 + 24) = v41;
    if ((v41 - 2) < 4 || v41 == 9) {
      atomic_fetch_add(*v23, 1uLL);
    }
  }
  return a1;
}

uint64_t std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (a4 <= (v8 - *a1) >> 5)
  {
    uint64_t result = a1[1];
    unint64_t v20 = (result - v9) >> 5;
    if (v20 >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v33 = v9;
      }
      else
      {
        uint64_t v33 = v9;
        do
        {
          std::pair<nitro::flexible_type,nitro::flexible_type>::operator=[abi:ne180100](v9, (uint64_t *)v6);
          v6 += 32;
          v9 += 32;
          v33 += 32;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v33)
        uint64_t result = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(result - 32);
      a1[1] = v33;
    }
    else
    {
      uint64_t v21 = a2 + 32 * v20;
      if (result != v9)
      {
        uint64_t v22 = 32 * v20;
        do
        {
          uint64_t result = std::pair<nitro::flexible_type,nitro::flexible_type>::operator=[abi:ne180100](v9, (uint64_t *)v6);
          v6 += 32;
          v9 += 32;
          v22 -= 32;
        }
        while (v22);
        uint64_t v9 = a1[1];
      }
      uint64_t v23 = v9;
      if (v21 != a3)
      {
        uint64_t v24 = 0;
        do
        {
          std::string::size_type v25 = (uint64_t *)(v21 + v24);
          uint64_t v26 = v9 + v24;
          *(void *)uint64_t v26 = 0;
          *(unsigned char *)(v26 + 8) = 0;
          if (v9 == v21)
          {
            v25[2] = 0;
            *((unsigned char *)v25 + 24) = 0;
          }
          else
          {
            uint64_t v27 = *v25;
            *(unsigned char *)(v26 + 8) = *((unsigned char *)v25 + 8);
            *(void *)uint64_t v26 = v27;
            int v28 = *((unsigned __int8 *)v25 + 8);
            *(unsigned char *)(v26 + 8) = v28;
            if ((v28 - 2) < 4 || v28 == 9) {
              atomic_fetch_add(*(atomic_ullong *volatile *)v26, 1uLL);
            }
            *(void *)(v9 + v24 + 16) = 0;
            uint64_t v30 = v9 + v24 + 16;
            *(unsigned char *)(v30 + 8) = 0;
            uint64_t v31 = *(void *)(v21 + v24 + 16);
            *(unsigned char *)(v30 + 8) = *(unsigned char *)(v21 + v24 + 24);
            *(void *)uint64_t v30 = v31;
            int v32 = *(unsigned __int8 *)(v21 + v24 + 24);
            *(unsigned char *)(v30 + 8) = v32;
            switch(v32)
            {
              case 2:
              case 3:
              case 4:
              case 5:
              case 9:
                atomic_fetch_add(*(atomic_ullong *volatile *)v30, 1uLL);
                break;
              default:
                break;
            }
          }
          v24 += 32;
        }
        while (v21 + v24 != a3);
        uint64_t v23 = v9 + v24;
      }
      a1[1] = v23;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v10 - 32);
        while (v10 != v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59) {
      goto LABEL_55;
    }
    uint64_t v12 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v12 = a4;
    }
    BOOL v13 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 59) {
LABEL_55:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    uint64_t v15 = 32 * v14;
    uint64_t result = (uint64_t)operator new(32 * v14);
    *a1 = result;
    a1[1] = result;
    for (a1[2] = result + v15; v6 != a3; result += 32)
    {
      *(void *)uint64_t result = 0;
      *(unsigned char *)(result + 8) = 0;
      if (result == v6)
      {
        *(void *)(v6 + 16) = 0;
        *(unsigned char *)(v6 + 24) = 0;
      }
      else
      {
        *(void *)uint64_t result = *(void *)v6;
        int v17 = *(unsigned __int8 *)(v6 + 8);
        *(unsigned char *)(result + 8) = v17;
        if ((v17 - 2) < 4 || v17 == 9) {
          atomic_fetch_add(*(atomic_ullong *volatile *)result, 1uLL);
        }
        *(void *)(result + 16) = *(void *)(v6 + 16);
        int v19 = *(unsigned __int8 *)(v6 + 24);
        *(unsigned char *)(result + 24) = v19;
        switch(v19)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 9:
            atomic_fetch_add(*(atomic_ullong *volatile *)(result + 16), 1uLL);
            break;
          default:
            break;
        }
      }
      v6 += 32;
    }
    a1[1] = result;
  }
  return result;
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A858;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    unint64_t v3 = (void *)a1[2];
    atomic_ullong *volatile v4 = (void *)a1[1];
    if (v3 != v2)
    {
      atomic_ullong *volatile v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v2;
        v6 -= 9;
      }
      while (!v7);
      atomic_ullong *volatile v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A858;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    unint64_t v3 = (void *)a1[2];
    atomic_ullong *volatile v4 = (void *)a1[1];
    if (v3 != v2)
    {
      atomic_ullong *volatile v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v2;
        v6 -= 9;
      }
      while (!v7);
      atomic_ullong *volatile v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = &unk_1EE37A858;
  std::vector<nitro::impl::delayed_variable>::vector(v2 + 1, v1);
  return v2;
}

void sub_192603FD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A858;
  return std::vector<nitro::impl::delayed_variable>::vector(a2 + 1, (uint64_t *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  if (v1)
  {
    unint64_t v3 = *(void **)(a1 + 16);
    atomic_ullong *volatile v4 = *(void **)(a1 + 8);
    if (v3 != v1)
    {
      atomic_ullong *volatile v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v1;
        v6 -= 9;
      }
      while (!v7);
      atomic_ullong *volatile v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v1;
    operator delete(v4);
  }
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    unint64_t v3 = (void *)__p[2];
    atomic_ullong *volatile v4 = (void *)__p[1];
    if (v3 != v2)
    {
      atomic_ullong *volatile v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v2;
        v6 -= 9;
      }
      while (!v7);
      atomic_ullong *volatile v4 = (void *)__p[1];
    }
    __p[2] = v2;
    operator delete(v4);
  }

  operator delete(__p);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(a1 + 16);
  unint64_t v3 = (uint64_t *)(a1 + 8);
  std::vector<nitro::flexible_type>::vector(&__p, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  uint64_t v4 = *v3;
  if (*v2 != *v3)
  {
    unint64_t v5 = 0;
    do
    {
      nitro::impl::delayed_variable::operator()(v4 + 72 * v5, (uint64_t)v28);
      if (v28[0]) {
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      }
      uint64_t v6 = (atomic_ullong *volatile *)((char *)__p + 16 * v5);
      if (&v29 != v6)
      {
        switch(*((unsigned char *)v6 + 8))
        {
          case 2:
            if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_45;
            }
            atomic_ullong *volatile v7 = *v6;
            if (*v6)
            {
              if (*((char *)v7 + 31) < 0) {
                operator delete((void *)v7[1]);
              }
              MEMORY[0x192FF16B0](v7, 0x1012C404EF22A49);
            }
            goto LABEL_44;
          case 3:
            if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_45;
            }
            atomic_ullong *volatile v12 = *v6;
            if (*v6)
            {
              BOOL v13 = (void *)v12[1];
              if (v13)
              {
                v12[2] = (atomic_ullong)v13;
                operator delete(v13);
              }
              MEMORY[0x192FF16B0](v12, 0x1080C409938AC02);
            }
            goto LABEL_44;
          case 4:
            if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_45;
            }
            atomic_ullong *volatile v8 = *v6;
            if (*v6)
            {
              atomic_ullong v9 = v8[1];
              if (v9)
              {
                uint64_t v10 = v8[2];
                uint64_t v11 = (void *)v8[1];
                if (v10 != v9)
                {
                  do
                  {
                    v10 -= 16;
                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v8 + 3), v10);
                  }
                  while (v10 != v9);
                  uint64_t v11 = (void *)v8[1];
                }
                v8[2] = v9;
                operator delete(v11);
              }
              MEMORY[0x192FF16B0](v8, 0x1020C405E66F15BLL);
            }
            goto LABEL_44;
          case 5:
            if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_45;
            }
            atomic_ullong *volatile v14 = *v6;
            if (!*v6) {
              goto LABEL_44;
            }
            atomic_ullong v15 = v14[1];
            if (v15)
            {
              uint64_t v16 = v14[2];
              int v17 = (void *)v14[1];
              if (v16 != v15)
              {
                do
                  uint64_t v16 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v16 - 32);
                while (v16 != v15);
                int v17 = (void *)v14[1];
              }
              v14[2] = v15;
              operator delete(v17);
            }
            atomic_ullong *volatile v18 = v14;
            uint64_t v19 = 0x1020C405E66F15BLL;
            break;
          case 9:
            if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_45;
            }
            atomic_ullong *volatile v20 = *v6;
            if (!*v6) {
              goto LABEL_44;
            }
            uint64_t v21 = (void *)v20[7];
            if (v21)
            {
              v20[8] = (atomic_ullong)v21;
              operator delete(v21);
            }
            uint64_t v22 = (void *)v20[4];
            if (v22)
            {
              v20[5] = (atomic_ullong)v22;
              operator delete(v22);
            }
            uint64_t v23 = (std::__shared_weak_count *)v20[3];
            if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
            atomic_ullong *volatile v18 = v20;
            uint64_t v19 = 0x10B0C4002311774;
            break;
          default:
            goto LABEL_45;
        }
        MEMORY[0x192FF16B0](v18, v19);
LABEL_44:
        atomic_ullong *volatile *v6 = 0;
LABEL_45:
        uint64_t v24 = v29;
        *((unsigned char *)v6 + 8) = v30;
        atomic_ullong *volatile *v6 = v24;
        int v25 = v30;
        *((unsigned char *)v6 + 8) = v30;
        if ((v25 - 2) < 4 || v25 == 9) {
          atomic_fetch_add(*v6, 1uLL);
        }
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
      ++v5;
      uint64_t v4 = *(void *)(a1 + 8);
    }
    while (v5 < 0x8E38E38E38E38E39 * ((*(void *)(a1 + 16) - v4) >> 3));
  }
  operator new();
}

void sub_1926046C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, uint64_t a13, char a14)
{
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a14);
  if (!__p) {
    _Unwind_Resume(a1);
  }
  atomic_ullong v15 = a11;
  uint64_t v16 = __p;
  if (a11 != __p)
  {
    do
    {
      v15 -= 16;
      std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&a12, (uint64_t)v15);
    }
    while (v15 != __p);
    uint64_t v16 = __p;
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4LISTEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4LISTEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4LISTEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4LISTEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void *std::vector<nitro::flexible_type>::vector(void *a1, unint64_t a2)
{
  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  if (a2)
  {
    if (a2 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = (char *)operator new(16 * a2);
    *a1 = v4;
    a1[1] = v4;
    unint64_t v5 = &v4[16 * a2];
    a1[2] = v5;
    do
    {
      *(void *)uint64_t v4 = 0;
      v4[8] = 0;
      v4 += 16;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_192604878(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v1;
  if (*v1)
  {
    uint64_t v5 = (uint64_t)v1[1];
    uint64_t v6 = *v1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v2, v5);
      }
      while ((void *)v5 != v4);
      uint64_t v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A960;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    unint64_t v3 = (void *)a1[2];
    uint64_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        atomic_ullong *volatile v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v2;
        v6 -= 9;
      }
      while (!v7);
      uint64_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A960;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    unint64_t v3 = (void *)a1[2];
    uint64_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        atomic_ullong *volatile v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v2;
        v6 -= 9;
      }
      while (!v7);
      uint64_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = &unk_1EE37A960;
  std::vector<nitro::impl::delayed_variable>::vector(v2 + 1, v1);
  return v2;
}

void sub_192604B1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A960;
  return std::vector<nitro::impl::delayed_variable>::vector(a2 + 1, (uint64_t *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  if (v1)
  {
    unint64_t v3 = *(void **)(a1 + 16);
    uint64_t v4 = *(void **)(a1 + 8);
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        atomic_ullong *volatile v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v1;
        v6 -= 9;
      }
      while (!v7);
      uint64_t v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v1;
    operator delete(v4);
  }
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    unint64_t v3 = (void *)__p[2];
    uint64_t v4 = (void *)__p[1];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        atomic_ullong *volatile v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v2;
        v6 -= 9;
      }
      while (!v7);
      uint64_t v4 = (void *)__p[1];
    }
    __p[2] = v2;
    operator delete(v4);
  }

  operator delete(__p);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(a1 + 16);
  unint64_t v3 = (uint64_t *)(a1 + 8);
  std::vector<nitro::flexible_type>::vector(&__p, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  uint64_t v4 = *v3;
  if (*v2 != *v3)
  {
    unint64_t v5 = 0;
    do
    {
      nitro::impl::delayed_variable::operator()(v4 + 72 * v5, (uint64_t)v28);
      if (v28[0]) {
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      }
      uint64_t v6 = (atomic_ullong *volatile *)((char *)__p + 16 * v5);
      if (&v29 != v6)
      {
        switch(*((unsigned char *)v6 + 8))
        {
          case 2:
            if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_45;
            }
            atomic_ullong *volatile v7 = *v6;
            if (*v6)
            {
              if (*((char *)v7 + 31) < 0) {
                operator delete((void *)v7[1]);
              }
              MEMORY[0x192FF16B0](v7, 0x1012C404EF22A49);
            }
            goto LABEL_44;
          case 3:
            if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_45;
            }
            atomic_ullong *volatile v12 = *v6;
            if (*v6)
            {
              BOOL v13 = (void *)v12[1];
              if (v13)
              {
                v12[2] = (atomic_ullong)v13;
                operator delete(v13);
              }
              MEMORY[0x192FF16B0](v12, 0x1080C409938AC02);
            }
            goto LABEL_44;
          case 4:
            if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_45;
            }
            atomic_ullong *volatile v8 = *v6;
            if (*v6)
            {
              atomic_ullong v9 = v8[1];
              if (v9)
              {
                uint64_t v10 = v8[2];
                uint64_t v11 = (void *)v8[1];
                if (v10 != v9)
                {
                  do
                  {
                    v10 -= 16;
                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v8 + 3), v10);
                  }
                  while (v10 != v9);
                  uint64_t v11 = (void *)v8[1];
                }
                v8[2] = v9;
                operator delete(v11);
              }
              MEMORY[0x192FF16B0](v8, 0x1020C405E66F15BLL);
            }
            goto LABEL_44;
          case 5:
            if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_45;
            }
            atomic_ullong *volatile v14 = *v6;
            if (!*v6) {
              goto LABEL_44;
            }
            atomic_ullong v15 = v14[1];
            if (v15)
            {
              uint64_t v16 = v14[2];
              int v17 = (void *)v14[1];
              if (v16 != v15)
              {
                do
                  uint64_t v16 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v16 - 32);
                while (v16 != v15);
                int v17 = (void *)v14[1];
              }
              v14[2] = v15;
              operator delete(v17);
            }
            atomic_ullong *volatile v18 = v14;
            uint64_t v19 = 0x1020C405E66F15BLL;
            break;
          case 9:
            if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_45;
            }
            atomic_ullong *volatile v20 = *v6;
            if (!*v6) {
              goto LABEL_44;
            }
            uint64_t v21 = (void *)v20[7];
            if (v21)
            {
              v20[8] = (atomic_ullong)v21;
              operator delete(v21);
            }
            uint64_t v22 = (void *)v20[4];
            if (v22)
            {
              v20[5] = (atomic_ullong)v22;
              operator delete(v22);
            }
            uint64_t v23 = (std::__shared_weak_count *)v20[3];
            if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
            atomic_ullong *volatile v18 = v20;
            uint64_t v19 = 0x10B0C4002311774;
            break;
          default:
            goto LABEL_45;
        }
        MEMORY[0x192FF16B0](v18, v19);
LABEL_44:
        atomic_ullong *volatile *v6 = 0;
LABEL_45:
        uint64_t v24 = v29;
        *((unsigned char *)v6 + 8) = v30;
        atomic_ullong *volatile *v6 = v24;
        int v25 = v30;
        *((unsigned char *)v6 + 8) = v30;
        if ((v25 - 2) < 4 || v25 == 9) {
          atomic_fetch_add(*v6, 1uLL);
        }
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
      ++v5;
      uint64_t v4 = *(void *)(a1 + 8);
    }
    while (v5 < 0x8E38E38E38E38E39 * ((*(void *)(a1 + 16) - v4) >> 3));
  }
  operator new();
}

void sub_19260520C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, uint64_t a13, char a14)
{
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a14);
  if (!__p) {
    _Unwind_Resume(a1);
  }
  atomic_ullong v15 = a11;
  uint64_t v16 = __p;
  if (a11 != __p)
  {
    do
    {
      v15 -= 16;
      std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&a12, (uint64_t)v15);
    }
    while (v15 != __p);
    uint64_t v16 = __p;
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5TUPLEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5TUPLEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5TUPLEEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5TUPLEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37AD80;
  uint64_t v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37AD80;
  uint64_t v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  JUMPOUT(0x192FF16B0);
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v2 = &unk_1EE37AD80;
  unint64_t v3 = v2 + 8;
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    goto LABEL_4;
  }
  if (v4 != a1 + 8)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v4 + 16))(v4, v3);
LABEL_4:
    *((void *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((void *)v2 + 4) = v3;
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
LABEL_6:
  *((_WORD *)v2 + 20) = *(_WORD *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  *((void *)v2 + 6) = *(void *)(a1 + 48);
  *((void *)v2 + 7) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v2 + 8) = 0;
  v2[72] = 0;
  if (v2 != (char *)a1)
  {
    *((void *)v2 + 8) = *(void *)(a1 + 64);
    int v6 = *(unsigned __int8 *)(a1 + 72);
    v2[72] = v6;
    if ((v6 - 2) < 4 || v6 == 9) {
      atomic_fetch_add(*((atomic_ullong *volatile *)v2 + 8), 1uLL);
    }
  }
  *((void *)v2 + 10) = *(void *)(a1 + 80);
  return v2;
}

void sub_1926055D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37AD80;
  uint64_t v4 = a2 + 8;
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      *(void *)(a2 + 32) = v4;
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v4);
      *(void *)(a2 + 32) = result;
    }
  }
  else
  {
    *(void *)(a2 + 32) = 0;
  }
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a2 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 64) = 0;
  atomic_ullong *volatile v7 = (atomic_ullong *volatile *)(a2 + 64);
  *(unsigned char *)(a2 + 72) = 0;
  if (a2 != a1)
  {
    atomic_ullong *volatile v8 = *(atomic_ullong **)(a1 + 64);
    *(unsigned char *)(a2 + 72) = *(unsigned char *)(a1 + 72);
    atomic_ullong *volatile *v7 = v8;
    int v9 = *(unsigned __int8 *)(a1 + 72);
    *(unsigned char *)(a2 + 72) = v9;
    if ((v9 - 2) < 4 || v9 == 9) {
      atomic_fetch_add(*v7, 1uLL);
    }
  }
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 48));
  uint64_t result = *(void *)(a1 + 32);
  if (result == v2)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 32);
    return v5(v2);
  }
  else if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v4();
  }
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  uint64_t v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v23[4] = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v23);
  if (v23[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  uint64_t v4 = *(void *)(v23[2] + 8) + 16 * *(void *)(a1 + 80);
  uint64_t v5 = *(void *)v4;
  int v6 = *(unsigned __int8 *)(v4 + 8);
  if ((v6 - 2) < 4 || v6 == 9)
  {
    atomic_fetch_add((atomic_ullong *volatile)v5, 1uLL);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = v5;
    *(unsigned char *)(a2 + 24) = v6;
    atomic_fetch_add((atomic_ullong *volatile)v5, 1uLL);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = v5;
    *(unsigned char *)(a2 + 24) = v6;
    if ((v6 - 2) > 7) {
      goto LABEL_43;
    }
  }
  switch(v6)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v5, 0xFFFFFFFFFFFFFFFFLL) == 1 && v5 != 0)
      {
        uint64_t v9 = 0x1012C404EF22A49;
        if ((*(char *)(v5 + 31) & 0x80000000) == 0) {
          goto LABEL_42;
        }
        uint64_t v10 = *(void **)(v5 + 8);
        goto LABEL_41;
      }
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v5, 0xFFFFFFFFFFFFFFFFLL) == 1 && v5 != 0)
      {
        uint64_t v9 = 0x1080C409938AC02;
        uint64_t v10 = *(void **)(v5 + 8);
        if (!v10) {
          goto LABEL_42;
        }
        *(void *)(v5 + 16) = v10;
        goto LABEL_41;
      }
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v5, 0xFFFFFFFFFFFFFFFFLL) == 1 && v5 != 0)
      {
        uint64_t v9 = 0x1020C405E66F15BLL;
        uint64_t v12 = *(void *)(v5 + 8);
        if (!v12) {
          goto LABEL_42;
        }
        uint64_t v13 = *(void *)(v5 + 16);
        uint64_t v10 = *(void **)(v5 + 8);
        if (v13 != v12)
        {
          do
          {
            v13 -= 16;
            std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v5 + 24, v13);
          }
          while (v13 != v12);
          uint64_t v10 = *(void **)(v5 + 8);
        }
        *(void *)(v5 + 16) = v12;
        goto LABEL_41;
      }
      break;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v5, 0xFFFFFFFFFFFFFFFFLL) == 1 && v5 != 0)
      {
        uint64_t v9 = 0x1020C405E66F15BLL;
        uint64_t v16 = *(void *)(v5 + 8);
        if (v16)
        {
          uint64_t v17 = *(void *)(v5 + 16);
          atomic_ullong *volatile v18 = *(void **)(v5 + 8);
          if (v17 != v16)
          {
            do
              uint64_t v17 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v17 - 32);
            while (v17 != v16);
            atomic_ullong *volatile v18 = *(void **)(v5 + 8);
          }
          *(void *)(v5 + 16) = v16;
          uint64_t v10 = v18;
LABEL_41:
          operator delete(v10);
        }
        goto LABEL_42;
      }
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v5, 0xFFFFFFFFFFFFFFFFLL) == 1 && v5 != 0)
      {
        atomic_ullong *volatile v20 = *(void **)(v5 + 56);
        if (v20)
        {
          *(void *)(v5 + 64) = v20;
          operator delete(v20);
        }
        uint64_t v21 = *(void **)(v5 + 32);
        if (v21)
        {
          *(void *)(v5 + 40) = v21;
          operator delete(v21);
        }
        uint64_t v9 = 0x10B0C4002311774;
        uint64_t v22 = *(std::__shared_weak_count **)(v5 + 24);
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
LABEL_42:
        MEMORY[0x192FF16B0](v5, v9);
      }
      break;
    default:
      break;
  }
LABEL_43:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v23);
}

void sub_192605B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8TUPLEGETEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8TUPLEGETEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8TUPLEGETEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8TUPLEGETEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func()
{
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE37A8B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37A8B0;
  a2[1] = v2;
  return result;
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (void *)(a1 + 8);
  uint64_t v5 = *a2;
  uint64_t v11 = v4;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, v4, (uint64_t)&std::piecewise_construct, &v11);
  uint64_t v7 = *((void *)result + 4);
  *(void *)a3 = *((void *)result + 3);
  *(void *)(a3 + 8) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 24) = 0;
  if (result + 24 != (char *)a3)
  {
    atomic_ullong *volatile v8 = (atomic_ullong *)*((void *)result + 5);
    *(void *)(a3 + 16) = v8;
    int v9 = result[48];
    *(unsigned char *)(a3 + 24) = v9;
    if ((v9 - 2) < 4 || v9 == 9) {
      atomic_fetch_add(v8, 1uLL);
    }
  }
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4THISEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4THISEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4THISEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4THISEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37AB70;
  uint64_t v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37AB70;
  uint64_t v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  JUMPOUT(0x192FF16B0);
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v2 = &unk_1EE37AB70;
  unint64_t v3 = v2 + 8;
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    goto LABEL_4;
  }
  if (v4 != a1 + 8)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v4 + 16))(v4, v3);
LABEL_4:
    *((void *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((void *)v2 + 4) = v3;
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
LABEL_6:
  *((_WORD *)v2 + 20) = *(_WORD *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  *((void *)v2 + 6) = *(void *)(a1 + 48);
  *((void *)v2 + 7) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v2 + 8) = 0;
  v2[72] = 0;
  if (v2 != (char *)a1)
  {
    *((void *)v2 + 8) = *(void *)(a1 + 64);
    int v6 = *(unsigned __int8 *)(a1 + 72);
    v2[72] = v6;
    if ((v6 - 2) < 4 || v6 == 9) {
      atomic_fetch_add(*((atomic_ullong *volatile *)v2 + 8), 1uLL);
    }
  }
  return v2;
}

void sub_192606004(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37AB70;
  uint64_t v4 = a2 + 8;
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      *(void *)(a2 + 32) = v4;
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v4);
      *(void *)(a2 + 32) = result;
    }
  }
  else
  {
    *(void *)(a2 + 32) = 0;
  }
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a2 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 64) = 0;
  uint64_t v7 = (atomic_ullong *volatile *)(a2 + 64);
  *(unsigned char *)(a2 + 72) = 0;
  if (a2 != a1)
  {
    atomic_ullong *volatile v8 = *(atomic_ullong **)(a1 + 64);
    *(unsigned char *)(a2 + 72) = *(unsigned char *)(a1 + 72);
    atomic_ullong *volatile *v7 = v8;
    int v9 = *(unsigned __int8 *)(a1 + 72);
    *(unsigned char *)(a2 + 72) = v9;
    if ((v9 - 2) < 4 || v9 == 9) {
      atomic_fetch_add(*v7, 1uLL);
    }
  }
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 48));
  uint64_t result = *(void *)(a1 + 32);
  if (result == v2)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 32);
    return v5(v2);
  }
  else if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v4();
  }
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  uint64_t v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  operator delete(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)a3);
  *(unsigned char *)(a2 + 16) = 1;

  return nitro::nitro_variable::operator=(a2 + 32, a3);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6RETURNEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6RETURNEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6RETURNEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6RETURNEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func()
{
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE37A908;
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A908;
}

double std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  *(unsigned char *)(a1 + 17) = 1;
  double result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5BREAKEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5BREAKEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5BREAKEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5BREAKEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func()
{
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EE37AC78;
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37AC78;
}

double std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  *(unsigned char *)(a1 + 18) = 1;
  double result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8CONTINUEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8CONTINUEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8CONTINUEEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8CONTINUEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.hpp", "operator()", 98, 1);
    uint64_t v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed: ", 14);
    }
    uint64_t v6 = pthread_getspecific(started[74]);
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"false", 5);
    }
    uint64_t v7 = pthread_getspecific(started[74]);
    if (v7)
    {
      if (*((unsigned char *)v7 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)":\n", 2);
        file_logger::stream_flush((file_logger *)started);
      }
    }
  }
  log_dispatch<true>::exec(6, "Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.hpp", "operator()", 98, "Op invalid to use as an LHS", v0, v1, v2, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  void *exception = "assertion failure";
  __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::~__func()
{
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1EE37A018;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37A018;
  a2[1] = v2;
  return result;
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1, int8x8_t **a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = *a2;
  int8x8_t v6 = (*a2)[1];
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = v3;
      if (v3 >= *(void *)&v6) {
        unint64_t v8 = v3 % *(void *)&v6;
      }
    }
    else
    {
      unint64_t v8 = (*(void *)&v6 - 1) & v3;
    }
    char v9 = *(void **)(*(void *)v5 + 8 * v8);
    if (v9)
    {
      for (uint64_t i = (void *)*v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v3)
        {
          if (i[2] == v3) {
            return (char *)(i + 3);
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= *(void *)&v6) {
              v11 %= *(void *)&v6;
            }
          }
          else
          {
            v11 &= *(void *)&v6 - 1;
          }
          if (v11 != v8) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = a2[1];
  atomic_ullong v15 = (int8x8_t *)v12[7];
  uint64_t v13 = v12 + 7;
  atomic_ullong *volatile v14 = v15;
  if (!v15) {
    goto LABEL_28;
  }
  uint64_t v16 = v13;
  do
  {
    unint64_t v17 = (unint64_t)v14[4];
    BOOL v18 = v17 >= v3;
    if (v17 >= v3) {
      uint64_t v19 = (int8x8_t **)v14;
    }
    else {
      uint64_t v19 = (int8x8_t **)&v14[1];
    }
    if (v18) {
      uint64_t v16 = v14;
    }
    atomic_ullong *volatile v14 = *v19;
  }
  while (*v19);
  if (v16 != v13 && v3 >= *(void *)&v16[4]) {
    return (char *)&v16[5];
  }
LABEL_28:
  long long v24 = 0uLL;
  char v26 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = v4;
  atomic_ullong *volatile v20 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v5, v4, (uint64_t)&std::piecewise_construct, &v23);
  nitro::nitro_variable::operator=((uint64_t)(v20 + 24), &v24);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v24);
  uint64_t v21 = (uint64_t)*a2;
  *(void *)&long long v24 = v4;
  return std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v21, v4, (uint64_t)&std::piecewise_construct, (void **)&v24)+ 24;
}

void sub_192606878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval14exec_referenceERKNS_2ir6SYMBOLEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval14exec_referenceERKNS_2ir6SYMBOLEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval14exec_referenceERKNS_2ir6SYMBOLEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval14exec_referenceERKNS_2ir6SYMBOLEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE379FC0;
  uint64_t v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE379FC0;
  uint64_t v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  JUMPOUT(0x192FF16B0);
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v2 = &unk_1EE379FC0;
  unint64_t v3 = v2 + 8;
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    goto LABEL_4;
  }
  if (v4 != a1 + 8)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v4 + 16))(v4, v3);
LABEL_4:
    *((void *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((void *)v2 + 4) = v3;
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
LABEL_6:
  *((_WORD *)v2 + 20) = *(_WORD *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  *((void *)v2 + 6) = *(void *)(a1 + 48);
  *((void *)v2 + 7) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v2 + 8) = 0;
  v2[72] = 0;
  if (v2 != (char *)a1)
  {
    *((void *)v2 + 8) = *(void *)(a1 + 64);
    int v6 = *(unsigned __int8 *)(a1 + 72);
    v2[72] = v6;
    if ((v6 - 2) < 4 || v6 == 9) {
      atomic_fetch_add(*((atomic_ullong *volatile *)v2 + 8), 1uLL);
    }
  }
  *((void *)v2 + 10) = *(void *)(a1 + 80);
  return v2;
}

void sub_192606B8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE379FC0;
  uint64_t v4 = a2 + 8;
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      *(void *)(a2 + 32) = v4;
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v4);
      *(void *)(a2 + 32) = result;
    }
  }
  else
  {
    *(void *)(a2 + 32) = 0;
  }
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a2 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 64) = 0;
  uint8x8_t v7 = (atomic_ullong *volatile *)(a2 + 64);
  *(unsigned char *)(a2 + 72) = 0;
  if (a2 != a1)
  {
    unint64_t v8 = *(atomic_ullong **)(a1 + 64);
    *(unsigned char *)(a2 + 72) = *(unsigned char *)(a1 + 72);
    atomic_ullong *volatile *v7 = v8;
    int v9 = *(unsigned __int8 *)(a1 + 72);
    *(unsigned char *)(a2 + 72) = v9;
    if ((v9 - 2) < 4 || v9 == 9) {
      atomic_fetch_add(*v7, 1uLL);
    }
  }
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 48));
  uint64_t result = *(void *)(a1 + 32);
  if (result == v2)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 32);
    return v5(v2);
  }
  else if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v4();
  }
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  uint64_t v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  operator delete(a1);
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)&v8);
  uint64_t v2 = v8;
  if (!v8) {
    nitro::nitro_variable::instance(void)const::{lambda(void)#1}::operator()();
  }
  unint64_t v3 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = *(void *)(a1 + 80);
  uint8x8_t v7 = &v6;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2 + 16, &v6, (uint64_t)&std::piecewise_construct, &v7);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v8);
  return v4 + 24;
}

void sub_192606F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval14exec_referenceERKNS_2ir6MEMBEREE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval14exec_referenceERKNS_2ir6MEMBEREE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval14exec_referenceERKNS_2ir6MEMBEREE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval14exec_referenceERKNS_2ir6MEMBEREE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void OUTLINED_FUNCTION_0_4(uint64_t a1)
{
  uint64_t v2 = (nitro::nitro_variable *)(a1 + 40);
  nitro::nitro_variable::~nitro_variable(v2);
}

uint64_t OUTLINED_FUNCTION_5_2(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t OUTLINED_FUNCTION_7_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_0(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

atomic_ullong *OUTLINED_FUNCTION_9_1(atomic_ullong *result)
{
  return result;
}

uint64_t OUTLINED_FUNCTION_10_0(uint64_t a1, uint64_t a2)
{
  return a2;
}

void OUTLINED_FUNCTION_12()
{
  std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v1, v0 - 16);
}

uint64_t OUTLINED_FUNCTION_13()
{
  return *(void *)(v0 + 24);
}

void OUTLINED_FUNCTION_14()
{
  JUMPOUT(0x192FF16B0);
}

uint64_t OUTLINED_FUNCTION_15(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  return result;
}

void OUTLINED_FUNCTION_19(void *a1@<X8>)
{
  *(void *)(v2 + 8) = v1;
  operator delete(a1);
}

uint64_t OUTLINED_FUNCTION_20()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_21()
{
  return *(void *)(v0 + 24);
}

uint64_t OUTLINED_FUNCTION_22(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t OUTLINED_FUNCTION_23(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t OUTLINED_FUNCTION_26()
{
  return *(void *)(v0 + 16);
}

void OUTLINED_FUNCTION_28()
{
  std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v1, v0 - 16);
}

uint64_t OUTLINED_FUNCTION_29()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_32()
{
  return v0;
}

void nitro::impl::nitro_lazy_eval::exec_function_body(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)OUTLINED_FUNCTION_10_0(a1, a2);
  if (!v6)
  {
    OUTLINED_FUNCTION_25();
    do
    {
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v4 + 40));
      uint64_t v7 = OUTLINED_FUNCTION_21();
      if (v6)
      {
        OUTLINED_FUNCTION_24();
        uint64_t v9 = OUTLINED_FUNCTION_20();
        v10(v9);
      }
      else if (v7)
      {
        OUTLINED_FUNCTION_0();
        (*(void (**)(void))(v8 + 40))();
      }
      OUTLINED_FUNCTION_16();
      uint64_t v4 = v11;
    }
    while (!v6);
    uint64_t v5 = *(void **)v3;
  }
  *(void *)(v3 + 8) = v2;
  operator delete(v5);
}

uint64_t nitro::impl::nitro_lazy_eval::exec()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 32))();
}

void nitro::impl::nitro_lazy_eval::exec(uint64_t a1)
{
  OUTLINED_FUNCTION_0_4(a1);
  uint64_t v1 = OUTLINED_FUNCTION_13();
  if (v2)
  {
    uint64_t v3 = OUTLINED_FUNCTION_7_0();
    v4(v3);
  }
  else if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 40))(v1);
  }
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void (*v9)(uint64_t);

  char v2 = a1 + 32;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 72));
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3 == v2)
  {
    OUTLINED_FUNCTION_33();
    (*(void (**)(uint64_t))(v5 + 32))(v2);
  }
  else if (v3)
  {
    OUTLINED_FUNCTION_0();
    (*(void (**)(void))(v4 + 40))();
  }
  char v6 = OUTLINED_FUNCTION_13();
  if (v7)
  {
    uint64_t v8 = OUTLINED_FUNCTION_7_0();
    v9(v8);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  OUTLINED_FUNCTION_5();
}

{
  uint64_t v1;
  uint64_t v2;
  char v3;

  uint64_t v1 = OUTLINED_FUNCTION_23(a1);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 40))(v1);
  }
  OUTLINED_FUNCTION_5();
}

uint64_t nitro::impl::nitro_lazy_eval::exec(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

void nitro::impl::nitro_lazy_eval::exec(void *a1)
{
  uint64_t v1 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 9;
      char v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        uint64_t v7 = (void *)v6[3];
        if (v6 == v7)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v7)
        {
          OUTLINED_FUNCTION_0();
          (*(void (**)(void))(v8 + 40))();
        }
        v5 -= 9;
        BOOL v9 = v6 == v1;
        v6 -= 9;
      }
      while (!v9);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
  }
  OUTLINED_FUNCTION_5();
}

void std::vector<nitro::impl::delayed_variable>::vector(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)OUTLINED_FUNCTION_4_0(a1, a2);
  if (!v7)
  {
    uint64_t v8 = v5;
    uint64_t v9 = v6 - 72;
    do
    {
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v9 + 40));
      uint64_t v10 = *(void *)(v9 + 24);
      if (v9 == v10)
      {
        uint64_t v12 = OUTLINED_FUNCTION_7_0();
        v13(v12);
      }
      else if (v10)
      {
        OUTLINED_FUNCTION_0();
        (*(void (**)(void))(v11 + 40))();
      }
      OUTLINED_FUNCTION_27();
      uint64_t v9 = v14;
    }
    while (!v7);
    uint64_t v4 = *v8;
  }
  void *v3 = v2;

  operator delete(v4);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  if (v5 != v2)
  {
    uint64_t v7 = v5 - 72;
    uint64_t v8 = v5 - 72;
    do
    {
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v8 + 40));
      uint64_t v9 = OUTLINED_FUNCTION_21();
      if (v10)
      {
        uint64_t v12 = OUTLINED_FUNCTION_20();
        v13(v12);
      }
      else if (v9)
      {
        OUTLINED_FUNCTION_0();
        (*(void (**)(void))(v11 + 40))();
      }
      v7 -= 72;
      BOOL v10 = v8 == v2;
      v8 -= 72;
    }
    while (!v10);
    uint64_t v6 = *a1;
  }
  uint64_t result = 0;
  *a2 = v6;
  a1[1] = v2;
  return result;
}

void nitro::impl::nitro_lazy_eval::exec(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a2;
  if (v6 != a2)
  {
    uint64_t v8 = v6 - 72;
    do
    {
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v8 + 40));
      uint64_t v9 = *(void *)(v8 + 24);
      if (v8 == v9)
      {
        uint64_t v11 = OUTLINED_FUNCTION_7_0();
        v12(v11);
      }
      else if (v9)
      {
        OUTLINED_FUNCTION_0();
        (*(void (**)(void))(v10 + 40))();
      }
      OUTLINED_FUNCTION_27();
      uint64_t v8 = v13;
    }
    while (!v14);
    uint64_t v7 = *a1;
  }
  *a3 = v7;
  a1[1] = a2;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(std::__shared_weak_count *a1)
{
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1)
{
  OUTLINED_FUNCTION_6((atomic_ullong *)(a1 + 8));
  if (!v2)
  {
    uint64_t v3 = v1;
    OUTLINED_FUNCTION_0();
    (*(void (**)(void))(v4 + 16))();
    std::__shared_weak_count::__release_weak(v3);
  }
  OUTLINED_FUNCTION_5();
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(atomic_ullong *a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_9_1(a1);
  if (v2 && v3 == 1)
  {
    uint64_t v4 = v2;
    atomic_ullong v5 = v2[1];
    if (v5)
    {
      uint64_t v6 = (void *)OUTLINED_FUNCTION_29();
      if (!v7)
      {
        do
          OUTLINED_FUNCTION_28();
        while (v1 != v5);
        uint64_t v6 = (void *)v4[1];
      }
      void v4[2] = v5;
      operator delete(v6);
    }
    OUTLINED_FUNCTION_2();
  }
  OUTLINED_FUNCTION_5();
}

{
  atomic_ullong *v1;
  uint64_t v2;
  atomic_ullong *v3;
  atomic_ullong v4;
  uint64_t v5;
  void *v6;
  char v7;

  uint64_t v1 = OUTLINED_FUNCTION_9_1(a1);
  if (v1 && v2 == 1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = v1[1];
    if (v4)
    {
      atomic_ullong v5 = OUTLINED_FUNCTION_26();
      if (!v7)
      {
        do
          atomic_ullong v5 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v5 - 32);
        while (v5 != v4);
        uint64_t v6 = (void *)v3[1];
      }
      v3[2] = v4;
      operator delete(v6);
    }
    OUTLINED_FUNCTION_2();
  }
  OUTLINED_FUNCTION_5();
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1, atomic_ullong *a2)
{
  if (a1)
  {
    uint64_t v3 = (void *)a2[7];
    if (v3)
    {
      a2[8] = (atomic_ullong)v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)a2[4];
    if (v4)
    {
      a2[5] = (atomic_ullong)v4;
      operator delete(v4);
    }
    atomic_ullong v5 = (std::__shared_weak_count *)a2[3];
    if (v5)
    {
      OUTLINED_FUNCTION_6(&v5->__shared_owners_);
      if (!v6)
      {
        OUTLINED_FUNCTION_31();
        OUTLINED_FUNCTION_3_2();
        v7();
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    OUTLINED_FUNCTION_14();
    return 0;
  }
  else
  {
    atomic_fetch_add(a2, 0xFFFFFFFFFFFFFFFFLL);
    return 1;
  }
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[3];
  if (v4)
  {
    OUTLINED_FUNCTION_6(&v4->__shared_owners_);
    if (!v5)
    {
      OUTLINED_FUNCTION_31();
      OUTLINED_FUNCTION_3_2();
      v6();
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  OUTLINED_FUNCTION_14();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1)
{
  char v7 = (void *)OUTLINED_FUNCTION_22(a1);
  if (v7)
  {
    *(void *)(v6 + 32) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 16);
  if (v8)
  {
    OUTLINED_FUNCTION_6(&v8->__shared_owners_);
    if (!v9)
    {
      OUTLINED_FUNCTION_3_2();
      v10();
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(void *)uint64_t v2 = v5;
  *(_DWORD *)(v2 + 8) = v3;
  void *v1 = v4;
}

{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void *v4;
  char v5;

  int v3 = OUTLINED_FUNCTION_5_2(a1);
  if (!v5)
  {
    do
      int v3 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v3 - 32);
    while (v3 != v1);
    uint64_t v4 = *v2;
  }
  OUTLINED_FUNCTION_19(v4);
}

{
  uint64_t v1;
  void *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(void);

  uint64_t v2 = (void *)OUTLINED_FUNCTION_8_0(a1);
  if (v2)
  {
    *(void *)(v1 + 32) = v2;
    operator delete(v2);
  }
  int v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    OUTLINED_FUNCTION_6(&v3->__shared_owners_);
    if (!v4)
    {
      OUTLINED_FUNCTION_6_1();
      OUTLINED_FUNCTION_3_2();
      v5();
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  OUTLINED_FUNCTION_5();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)OUTLINED_FUNCTION_3_1(a1, a2);
  if (!v6)
  {
    do
      OUTLINED_FUNCTION_12();
    while (v4 != v2);
    uint64_t v5 = *(void **)v3;
  }
  *(void *)(v3 + 8) = v2;
  operator delete(v5);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(void **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v7 = *a3;
    uint64_t v8 = *a1;
    if ((void *)*a3 != v4)
    {
      do
      {
        v7 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](a2 + 24, v7);
      }
      while ((void *)v7 != v4);
      uint64_t v8 = *a1;
    }
    *a3 = (uint64_t)v4;
    operator delete(v8);
  }
  OUTLINED_FUNCTION_2();
}

{
  void *v3;
  uint64_t v6;
  void *v7;

  uint64_t v3 = *a1;
  if (*a1)
  {
    char v6 = *a3;
    uint64_t v7 = v3;
    if ((void *)*a3 != v3)
    {
      do
        char v6 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v6 - 32);
      while ((void *)v6 != v3);
      uint64_t v7 = *a1;
    }
    *a3 = (uint64_t)v3;
    operator delete(v7);
  }
  OUTLINED_FUNCTION_2();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v3 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](a1 + 24, v3);
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }
  OUTLINED_FUNCTION_2();
}

{
  void *v2;
  uint64_t v3;
  void *v4;

  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v3 - 32);
      while ((void *)v3 != v2);
      uint64_t v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }
  OUTLINED_FUNCTION_2();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t *a1)
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_15(a1);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3)
  {
    OUTLINED_FUNCTION_6(&v3->__shared_owners_);
    if (!v4)
    {
      OUTLINED_FUNCTION_33();
      OUTLINED_FUNCTION_3_2();
      v5();
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  char v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6)
  {
    OUTLINED_FUNCTION_6(&v6->__shared_owners_);
    if (!v7)
    {
      OUTLINED_FUNCTION_6_1();
      OUTLINED_FUNCTION_3_2();
      v8();
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  OUTLINED_FUNCTION_5();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(void *a1)
{
  do
  {
    uint64_t v2 = (void *)*a1;
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 3));
    operator delete(a1);
    a1 = v2;
  }
  while (v2);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_18(a1);
  if (!v6)
  {
    uint64_t v7 = v4;
    do
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v3 - 32));
    while (v3 != v1);
    uint64_t v5 = *v7;
  }
  void *v2 = v1;
  operator delete(v5);
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::$_1(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)OUTLINED_FUNCTION_10_0(a1, a2);
  if (!v6)
  {
    OUTLINED_FUNCTION_25();
    do
    {
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v4 + 40));
      uint64_t v7 = OUTLINED_FUNCTION_21();
      if (v6)
      {
        OUTLINED_FUNCTION_24();
        uint64_t v9 = OUTLINED_FUNCTION_20();
        v10(v9);
      }
      else if (v7)
      {
        OUTLINED_FUNCTION_0();
        (*(void (**)(void))(v8 + 40))();
      }
      OUTLINED_FUNCTION_16();
      uint64_t v4 = v11;
    }
    while (!v6);
    uint64_t v5 = *(void **)v3;
  }
  *(void *)(v3 + 8) = v2;

  operator delete(v5);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0::$_0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0::$_0(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    OUTLINED_FUNCTION_6(&v4->__shared_owners_);
    if (!v5)
    {
      OUTLINED_FUNCTION_3_2();
      v6();
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(void **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    char v6 = v3;
    if ((void *)v5 != v3)
    {
      do
        uint64_t v5 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v5 - 32);
      while ((void *)v5 != v3);
      char v6 = *a1;
    }
    *(void *)(a2 + 16) = v3;
    operator delete(v6);
  }
  OUTLINED_FUNCTION_2();
}

void std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::vector(uint64_t a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_18(a1);
  if (!v6)
  {
    uint64_t v7 = v4;
    do
      uint64_t v3 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v3 - 32);
    while (v3 != v1);
    uint64_t v5 = *v7;
  }
  void *v2 = v1;

  operator delete(v5);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    char v6 = (void *)OUTLINED_FUNCTION_32();
    if (!v7)
    {
      do
        OUTLINED_FUNCTION_12();
      while (v3 != v5);
      char v6 = *v2;
    }
    *(void *)(a2 + 16) = v5;
    operator delete(v6);
  }
  OUTLINED_FUNCTION_2();
}

uint64_t nitro::get_symbol_id(const std::string *a1)
{
  if (!nitro::symmap) {
    operator new();
  }
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((void *)nitro::symmap, (uint64_t)a1))
  {
    uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((void *)nitro::symmap, (uint64_t)a1);
    if (!v2) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    return v2[5];
  }
  else
  {
    unint64_t v5 = *(void *)(nitro::symmap + 24);
    char v6 = a1;
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(nitro::symmap, (uint64_t)a1, (uint64_t)&std::piecewise_construct, (long long **)&v6)[5] = v5;
    char v6 = (const std::string *)&v5;
    uint64_t v4 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(nitro::inv_symmap, &v5, (uint64_t)&std::piecewise_construct, (uint64_t **)&v6);
    std::string::operator=(v4 + 1, a1);
    return v5;
  }
}

void nitro::get_symbol_from_id(nitro *this@<X0>, uint64_t a2@<X8>)
{
  if (!nitro::symmap) {
    operator new();
  }
  unint64_t v3 = *(void *)(nitro::inv_symmap + 8);
  if (!v3) {
    goto LABEL_20;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = (unint64_t)this;
    if (v3 <= (unint64_t)this) {
      unint64_t v5 = (unint64_t)this % v3;
    }
  }
  else
  {
    unint64_t v5 = (v3 - 1) & (unint64_t)this;
  }
  char v6 = *(uint64_t ****)(*(void *)nitro::inv_symmap + 8 * v5);
  if (!v6 || (char v7 = *v6) == 0)
  {
LABEL_20:
    *(unsigned char *)(a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
    return;
  }
  unint64_t v8 = v3 - 1;
  while (1)
  {
    unint64_t v9 = (unint64_t)v7[1];
    if ((nitro *)v9 == this) {
      break;
    }
    if (v4.u32[0] > 1uLL)
    {
      if (v9 >= v3) {
        v9 %= v3;
      }
    }
    else
    {
      v9 &= v8;
    }
    if (v9 != v5) {
      goto LABEL_20;
    }
LABEL_13:
    char v7 = (uint64_t **)*v7;
    if (!v7) {
      goto LABEL_20;
    }
  }
  if (v7[2] != (uint64_t *)this) {
    goto LABEL_13;
  }
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v10 = (unint64_t)this;
    if (v3 <= (unint64_t)this) {
      unint64_t v10 = (unint64_t)this % v3;
    }
  }
  else
  {
    unint64_t v10 = v8 & (unint64_t)this;
  }
  uint64_t v11 = *(uint64_t **)(*(void *)nitro::inv_symmap + 8 * v10);
  if (!v11) {
LABEL_35:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  do
  {
    while (1)
    {
      uint64_t v11 = (uint64_t *)*v11;
      if (!v11) {
        goto LABEL_35;
      }
      unint64_t v12 = v11[1];
      if ((nitro *)v12 == this) {
        break;
      }
      if (v4.u32[0] > 1uLL)
      {
        if (v12 >= v3) {
          v12 %= v3;
        }
      }
      else
      {
        v12 &= v8;
      }
      if (v12 != v10) {
        goto LABEL_35;
      }
    }
  }
  while ((nitro *)v11[2] != this);
  if (*((char *)v11 + 47) < 0)
  {
    char v14 = (const std::string::value_type *)v11[3];
    std::string::size_type v15 = v11[4];
    std::string::__init_copy_ctor_external((std::string *)a2, v14, v15);
  }
  else
  {
    long long v13 = *(_OWORD *)(v11 + 3);
    *(void *)(a2 + 16) = v11[5];
    *(_OWORD *)a2 = v13;
  }
}

void nitro::ir::parse_string_sequence(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)a1) {
    nitro::ir::parse_string_sequence(nitro::SExp const&)::$_0::operator()();
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v3 != v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = v3 + 16;
    do
    {
      uint64_t v8 = v6 - 16;
      if (!*(unsigned char *)(v6 - 16)) {
        nitro::ir::parse_string_sequence(nitro::SExp const&)::$_1::operator()();
      }
      if (!*(unsigned char *)(v6 - 15)) {
        nitro::ir::parse_string_sequence(nitro::SExp const&)::$_2::operator()();
      }
      unint64_t v9 = (long long *)(v6 - 8);
      if ((unint64_t)v5 < *(void *)(a2 + 16))
      {
        if (*(char *)(v6 + 15) < 0)
        {
          std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(v6 - 8), *(void *)v6);
        }
        else
        {
          long long v7 = *v9;
          v5->__r_.__value_.__r.__words[2] = *(void *)(v6 + 8);
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v7;
        }
        *(void *)(a2 + 8) = ++v5;
      }
      else
      {
        unint64_t v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)v9);
      }
      *(void *)(a2 + 8) = v5;
      v6 += 72;
    }
    while (v8 + 72 != v4);
  }
}

void nitro::ir::parse_string_sequence(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!sexp.is_value", 14);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 59, 1);
    std::stringbuf::str();
    long long v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 59, 1);
    std::stringbuf::str();
    long long v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      char v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::string::size_type v15 = v23;
      }
      else {
        std::string::size_type v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    unint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  BOOL v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192608928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse_string_sequence(nitro::SExp const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"s.is_value", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 62, 1);
    std::stringbuf::str();
    long long v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 62, 1);
    std::stringbuf::str();
    long long v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      char v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::string::size_type v15 = v23;
      }
      else {
        std::string::size_type v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    unint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  BOOL v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192608CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse_string_sequence(nitro::SExp const&)::$_2::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"s.is_string_value", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 63, 1);
    std::stringbuf::str();
    long long v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 63, 1);
    std::stringbuf::str();
    long long v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      char v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::string::size_type v15 = v23;
      }
      else {
        std::string::size_type v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    unint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  BOOL v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192609028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::NODE>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  v54[23] = 1;
  strcpy(v54, "+");
  *(_DWORD *)&v54[24] = 0;
  char v57 = 1;
  LOWORD(v55) = 45;
  int v58 = 1;
  char v60 = 1;
  LOWORD(v59[0]) = 42;
  int v61 = 2;
  char v63 = 1;
  LOWORD(v62[0]) = 47;
  int v64 = 3;
  char v66 = 2;
  strcpy((char *)v65, "//");
  int v67 = 4;
  char v69 = 2;
  strcpy((char *)v68, "!=");
  int v70 = 6;
  char v72 = 2;
  strcpy((char *)v71, "==");
  int v73 = 5;
  char v75 = 1;
  LOWORD(v74[0]) = 60;
  int v76 = 7;
  char v78 = 1;
  LOWORD(v77[0]) = 62;
  int v79 = 8;
  char v81 = 2;
  strcpy((char *)v80, "<=");
  int v82 = 9;
  char v84 = 2;
  strcpy((char *)v83, ">=");
  int v85 = 10;
  char v87 = 2;
  strcpy((char *)v86, "&&");
  int v88 = 11;
  char v90 = 2;
  strcpy((char *)v89, "||");
  int v91 = 12;
  char v93 = 2;
  strcpy((char *)__p, "in");
  int v94 = 13;
  v53[0] = 0;
  v53[1] = 0;
  uint64_t v52 = v53;
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v52, (uint64_t *)v53, (const void **)v54, (uint64_t)v54);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v52, (uint64_t *)v53, (const void **)&v55, (uint64_t)&v55);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v52, (uint64_t *)v53, (const void **)v59, (uint64_t)v59);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v52, (uint64_t *)v53, (const void **)v62, (uint64_t)v62);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v52, (uint64_t *)v53, (const void **)v65, (uint64_t)v65);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v52, (uint64_t *)v53, (const void **)v68, (uint64_t)v68);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v52, (uint64_t *)v53, (const void **)v71, (uint64_t)v71);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v52, (uint64_t *)v53, (const void **)v74, (uint64_t)v74);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v52, (uint64_t *)v53, (const void **)v77, (uint64_t)v77);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v52, (uint64_t *)v53, (const void **)v80, (uint64_t)v80);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v52, (uint64_t *)v53, (const void **)v83, (uint64_t)v83);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v52, (uint64_t *)v53, (const void **)v86, (uint64_t)v86);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v52, (uint64_t *)v53, (const void **)v89, (uint64_t)v89);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v52, (uint64_t *)v53, (const void **)__p, (uint64_t)__p);
  if (v93 < 0)
  {
    operator delete(__p[0]);
    if ((v90 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v87 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((v90 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v89[0]);
  if ((v87 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v84 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v86[0]);
  if ((v84 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v81 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v83[0]);
  if ((v81 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v78 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete(v80[0]);
  if ((v78 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v75 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v77[0]);
  if ((v75 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v72 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(v74[0]);
  if ((v72 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v69 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(v71[0]);
  if ((v69 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v66 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v68[0]);
  if ((v66 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v63 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v65[0]);
  if ((v63 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v60 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v62[0]);
  if ((v60 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v57 & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_33:
    operator delete(v55);
    if ((v54[23] & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_32:
  operator delete(v59[0]);
  if (v57 < 0) {
    goto LABEL_33;
  }
LABEL_14:
  if ((v54[23] & 0x80000000) == 0) {
    goto LABEL_15;
  }
LABEL_34:
  operator delete(*(void **)v54);
LABEL_15:
  *(_WORD *)&v54[23] = 11521;
  strcpy(v54, "!");
  char v56 = 1;
  v54[25] = 0;
  v51[0] = 0;
  v51[1] = 0;
  unint64_t v50 = v51;
  std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)&v50, (uint64_t *)v51, (const void **)v54, (uint64_t)v54);
  std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)&v50, (uint64_t *)v51, (const void **)&v54[24], (uint64_t)&v54[24]);
  if (v56 < 0)
  {
    operator delete(*(void **)&v54[24]);
    if ((v54[23] & 0x80000000) == 0)
    {
LABEL_17:
      if (*(unsigned char *)a1) {
        goto LABEL_18;
      }
      goto LABEL_37;
    }
  }
  else if ((v54[23] & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(*(void **)v54);
  if (*(unsigned char *)a1)
  {
LABEL_18:
    if (!*(unsigned char *)(a1 + 1)) {
      operator new();
    }
    if (*(char *)(a1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v54, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    }
    else
    {
      *(_OWORD *)uint64_t v54 = *(_OWORD *)(a1 + 8);
      *(void *)&v54[16] = *(void *)(a1 + 24);
    }
    if ((v54[23] & 0x80000000) == 0)
    {
      if (v54[23] != 4)
      {
        if (v54[23] != 5)
        {
          if (v54[23] == 8 && *(void *)v54 == 0x45554E49544E4F43) {
LABEL_88:
          }
            operator new();
LABEL_85:
          if (v54[0] == 34)
          {
            if (v54[23])
            {
              uint64_t v6 = v54[23];
              long long v7 = v54;
              goto LABEL_104;
            }
            goto LABEL_238;
          }
          goto LABEL_111;
        }
        if (*(_DWORD *)v54 != 1397506374 || v54[4] != 69)
        {
          if (*(_DWORD *)v54 != 1095062082 || v54[4] != 75) {
            goto LABEL_85;
          }
LABEL_98:
          operator new();
        }
LABEL_99:
        operator new();
      }
      if (*(_DWORD *)v54 != 1397311572)
      {
        if (*(_DWORD *)v54 != 1163219540) {
          goto LABEL_85;
        }
LABEL_117:
        operator new();
      }
      goto LABEL_153;
    }
    uint64_t v6 = *(void *)&v54[8];
    long long v7 = *(unsigned char **)v54;
    switch(*(void *)&v54[8])
    {
      case 4:
        if (**(_DWORD **)v54 == 1163219540) {
          goto LABEL_117;
        }
        if (**(_DWORD **)v54 == 1397311572) {
LABEL_153:
        }
          operator new();
        break;
      case 5:
        if (**(_DWORD **)v54 == 1397506374 && *(unsigned char *)(*(void *)v54 + 4) == 69) {
          goto LABEL_99;
        }
        if (**(_DWORD **)v54 == 1095062082 && *(unsigned char *)(*(void *)v54 + 4) == 75) {
          goto LABEL_98;
        }
        break;
      case 8:
        if (**(void **)v54 == 0x45554E49544E4F43) {
          goto LABEL_88;
        }
        if (**(unsigned char **)v54 == 34)
        {
          uint64_t v6 = 8;
          goto LABEL_104;
        }
        goto LABEL_111;
    }
    if (**(unsigned char **)v54 == 34)
    {
      if (*(void *)&v54[8])
      {
LABEL_104:
        size_t v15 = v6 - 2;
        size_t v16 = v6 - 1;
        if (v16 >= v15) {
          size_t v17 = v15;
        }
        else {
          size_t v17 = v16;
        }
        if (v17 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v17 >= 0x17)
        {
          uint64_t v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17) {
            uint64_t v19 = v17 | 7;
          }
          uint64_t v20 = v19 + 1;
          BOOL v18 = operator new(v19 + 1);
          __dst[1] = v17;
          unint64_t v49 = v20 | 0x8000000000000000;
          __dst[0] = v18;
        }
        else
        {
          HIBYTE(v49) = v17;
          BOOL v18 = __dst;
          if (!v17)
          {
LABEL_116:
            *((unsigned char *)v18 + v17) = 0;
            operator new();
          }
        }
        memmove(v18, v7 + 1, v17);
        goto LABEL_116;
      }
LABEL_238:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
LABEL_111:
    nitro::get_symbol_id((const std::string *)v54);
    operator new();
  }
LABEL_37:
  uint64_t v4 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56) == v4)
  {
    if (*((int *)global_logger() + 169) <= 6)
    {
      std::string::size_type v39 = (file_logger *)global_logger();
      started = (pthread_key_t *)file_logger::start_stream(v39, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 122, 1);
      double v41 = pthread_getspecific(started[74]);
      if (v41 && *((unsigned char *)v41 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41 + 2, (uint64_t)"Check failed: ", 14);
      }
      atomic_ullong v42 = pthread_getspecific(started[74]);
      if (v42 && *((unsigned char *)v42 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42 + 2, (uint64_t)"false", 5);
      }
      atomic_ullong v43 = pthread_getspecific(started[74]);
      if (v43 && *((unsigned char *)v43 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43 + 2, (uint64_t)":\n", 2);
        file_logger::stream_flush((file_logger *)started);
      }
    }
    log_dispatch<true>::exec(6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 122, "Cannot parse empty SExp node", v36, v37, v38, v47);
    __print_back_trace();
    exception = __cxa_allocate_exception(8uLL);
    void *exception = "assertion failure";
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  if (!*(unsigned char *)(v4 + 1)) {
    nitro::ir::parse<nitro::ir::NODE>(nitro::SExp const&)::$_2::operator()();
  }
  if (*(char *)(v4 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v54, *(const std::string::value_type **)(v4 + 8), *(void *)(v4 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(v4 + 8);
    *(void *)&v54[16] = *(void *)(v4 + 24);
    *(_OWORD *)uint64_t v54 = v5;
  }
  if ((v54[23] & 0x80000000) != 0)
  {
    uint64_t v9 = *(void *)&v54[8];
    switch(*(void *)&v54[8])
    {
      case 4:
        goto LABEL_62;
      case 5:
        if (**(_DWORD **)v54 == 1430668612 && *(unsigned char *)(*(void *)v54 + 4) == 78) {
LABEL_200:
        }
          nitro::ir::parse<nitro::ir::DEFUN>(a1);
        goto LABEL_170;
      case 6:
        if (**(_DWORD **)v54 == 1447445828 && *(_WORD *)(*(void *)v54 + 4) == 21057) {
LABEL_199:
        }
          nitro::ir::parse<nitro::ir::DEFVAR>(a1);
        if (**(_DWORD **)v54 == 1112360269 && *(_WORD *)(*(void *)v54 + 4) == 21061) {
LABEL_202:
        }
          nitro::ir::parse<nitro::ir::MEMBER>(a1);
        if (*(void *)&v54[8] == 4)
        {
LABEL_62:
          if (**(_DWORD **)v54 == 1280065859) {
LABEL_155:
          }
            nitro::ir::parse<nitro::ir::CALL>(a1);
LABEL_63:
          uint64_t v9 = *(void *)&v54[8];
        }
        goto LABEL_64;
      case 8:
        uint64_t v27 = **(void **)v54;
LABEL_183:
        if (v27 == 0x5353414C43464544) {
          nitro::ir::parse<nitro::ir::DEFCLASS>(a1);
        }
        goto LABEL_189;
      case 0xCLL:
        if (**(void **)v54 == 0x45424D454D464544 && *(_DWORD *)(*(void *)v54 + 8) == 1314211410) {
LABEL_201:
        }
          nitro::ir::parse<nitro::ir::DEFMEMBERFUN>(a1);
        goto LABEL_189;
      default:
LABEL_64:
        if (v9 == 11)
        {
          if (**(void **)v54 == 0x4A424F5F454B414DLL && *(void *)(*(void *)v54 + 3) == 0x5443454A424F5F45) {
LABEL_198:
          }
            nitro::ir::parse<nitro::ir::MAKEOBJECT>(a1);
          uint64_t v9 = *(void *)&v54[8];
        }
        if (v9 == 5)
        {
LABEL_170:
          if (**(_DWORD **)v54 == 1279871063 && *(unsigned char *)(*(void *)v54 + 4) == 69) {
LABEL_197:
          }
            nitro::ir::parse<nitro::ir::WHILE>(a1);
LABEL_174:
          if (*(void *)&v54[8] != 3) {
            goto LABEL_189;
          }
        }
        else if (v9 != 3)
        {
          goto LABEL_189;
        }
        uint64_t v8 = *(unsigned __int16 **)v54;
        goto LABEL_176;
    }
  }
  uint64_t v8 = (unsigned __int16 *)v54;
  switch(v54[23])
  {
    case 3:
      break;
    case 4:
      if (*(_DWORD *)v54 == 1280065859) {
        goto LABEL_155;
      }
      if ((v54[23] & 0x80) != 0) {
        goto LABEL_63;
      }
      goto LABEL_140;
    case 5:
      if (*(_DWORD *)v54 != 1430668612 || v54[4] != 78) {
        goto LABEL_135;
      }
      goto LABEL_200;
    case 6:
      if (*(_DWORD *)v54 == 1447445828 && *(unsigned __int16 *)&v54[4] == 21057) {
        goto LABEL_199;
      }
      if (*(_DWORD *)v54 != 1112360269 || *(unsigned __int16 *)&v54[4] != 21061) {
        goto LABEL_189;
      }
      goto LABEL_202;
    case 8:
      uint64_t v27 = *(void *)v54;
      goto LABEL_183;
    case 0xB:
      if (*(void *)v54 == 0x4A424F5F454B414DLL && *(void *)&v54[3] == 0x5443454A424F5F45) {
        goto LABEL_198;
      }
      if (v54[23] == 3) {
        goto LABEL_141;
      }
      if (v54[23] != 5) {
        goto LABEL_189;
      }
LABEL_135:
      if (*(_DWORD *)v54 == 1279871063 && v54[4] == 69) {
        goto LABEL_197;
      }
      if ((v54[23] & 0x80) != 0) {
        goto LABEL_174;
      }
LABEL_140:
      if (v54[23] != 3) {
        goto LABEL_189;
      }
LABEL_141:
      uint64_t v8 = (unsigned __int16 *)v54;
      break;
    case 0xC:
      if (*(void *)v54 != 0x45424D454D464544 || *(_DWORD *)&v54[8] != 1314211410) {
        goto LABEL_189;
      }
      goto LABEL_201;
    default:
      goto LABEL_189;
  }
LABEL_176:
  int v32 = *v8;
  int v33 = *((unsigned __int8 *)v8 + 2);
  if (v32 == 20294 && v33 == 82) {
    nitro::ir::parse<nitro::ir::FOR>(a1);
  }
LABEL_189:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v54, "FOREACH")) {
    nitro::ir::parse<nitro::ir::FOREACH>(a1);
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v54, "IF")) {
    nitro::ir::parse<nitro::ir::IF>(a1);
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v54, "INDEX_GET")) {
    nitro::ir::parse<nitro::ir::INDEXGET>(a1);
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v54, "INDEX_PUT")) {
    nitro::ir::parse<nitro::ir::INDEXPUT>(a1);
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v54, "HINT")) {
    nitro::ir::parse<nitro::ir::HINT>(a1);
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v54, "ASSIGN")) {
    nitro::ir::parse<nitro::ir::ASSIGN>(a1);
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v54, "LIST")) {
    nitro::ir::parse<nitro::ir::LIST>(a1);
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v54, "DICT")) {
    nitro::ir::parse<nitro::ir::DICT>(a1);
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v54, "TUPLE")) {
    nitro::ir::parse<nitro::ir::TUPLE>(a1);
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v54, "RETURN")) {
    nitro::ir::parse<nitro::ir::RETURN>(a1);
  }
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v54, "TUPLE_GET"))
  {
    if (std::set<std::string>::count[abi:ne180100]((uint64_t)&v50, (const void **)v54)
      && *(void *)(a1 + 56) - *(void *)(a1 + 48) == 144)
    {
      nitro::ir::parse<nitro::ir::UNARYOPERATOR>(a1);
    }
    if (std::set<std::string>::count[abi:ne180100]((uint64_t)&v52, (const void **)v54)
      && *(void *)(a1 + 56) - *(void *)(a1 + 48) == 216)
    {
      nitro::ir::parse<nitro::ir::BINARYOPERATOR>(a1);
    }
    std::string::size_type v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Unparseable: ", 13);
    unint64_t v46 = nitro::operator<<(v45, a1);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v46);
    nitro::ir::parse<nitro::ir::NODE>(nitro::SExp const&)::$_3::operator()();
  }
  nitro::ir::parse<nitro::ir::TUPLEGET>(a1);
  *a2 = __dst[0];
  if ((v54[23] & 0x80000000) != 0) {
    operator delete(*(void **)v54);
  }
  std::__tree<std::string>::destroy((uint64_t)&v50, v51[0]);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::destroy((uint64_t)&v52, v53[0]);
}

void sub_19260A1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::__tree<std::string>::destroy((uint64_t)&a13, (char *)a14);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::destroy((uint64_t)&a16, (char *)a17);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::NODE>(nitro::SExp const&)::$_2::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children[0].is_string_value", 32);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 125, 1);
    std::stringbuf::str();
    long long v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 125, 1);
    std::stringbuf::str();
    long long v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      char v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        size_t v15 = v23;
      }
      else {
        size_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    size_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  BOOL v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19260A718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::DEFVAR>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  __s1.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 != 216)
  {
    __s2[0] = (uint64_t *)&__s1;
    nitro::ir::parse<nitro::ir::DEFVAR>(nitro::SExp const&)::$_0::operator()();
  }
  if (*(char *)(v1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(v1 + 8), *(void *)(v1 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(v1 + 8);
    __s1.__r_.__value_.__r.__words[2] = *(void *)(v1 + 24);
    *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v10 = "DEFVAR";
  char v9 = 6;
  strcpy((char *)__s2, "DEFVAR");
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  if (size != 6) {
    goto LABEL_18;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__s1.__r_.__value_.__l.__data_, __s2, __s1.__r_.__value_.__l.__size_)) {
      goto LABEL_18;
    }
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
    uint64_t v6 = 0;
    while (__s1.__r_.__value_.__s.__data_[v6] == *((unsigned __int8 *)__s2 + v6))
    {
      if (HIBYTE(__s1.__r_.__value_.__r.__words[2]) == ++v6) {
        goto LABEL_17;
      }
    }
LABEL_18:
    __s2[0] = (uint64_t *)&__s1;
    __s2[1] = (uint64_t *)&v10;
    nitro::ir::parse<nitro::ir::DEFVAR>(nitro::SExp const&)::$_1::operator()(__s2);
  }
LABEL_17:
  nitro::get_symbol_id((const std::string *)(*(void *)(a1 + 48) + 80));
  nitro::ir::parse_type((nitro::ir *)(*(void *)(a1 + 48) + 144), (uint64_t)&__s1);
  operator new();
}

void sub_19260AA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v18 = *(unsigned int *)(v15 + 48);
  if (v18 != -1) {
    ((void (*)(char *, uint64_t))off_1EE39BB18[v18])(&a15, v16);
  }
  *(_DWORD *)(v15 + 48) = -1;
  MEMORY[0x192FF16B0](v15, 0x10B3C40F12CF9BDLL);
  nitro::variable_type::~variable_type((nitro::variable_type *)&a9);
  _Unwind_Resume(a1);
}

void sub_19260AAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ir::parse<nitro::ir::DEFUN>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  v16.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 != 360)
  {
    __s2 = &v16;
    nitro::ir::parse<nitro::ir::DEFUN>(nitro::SExp const&)::$_0::operator()();
  }
  if (*(char *)(v1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v1 + 8), *(void *)(v1 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(v1 + 8);
    v16.__r_.__value_.__r.__words[2] = *(void *)(v1 + 24);
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v4;
  }
  long long v13 = "DEFUN";
  char v20 = 5;
  strcpy((char *)&__s2, "DEFUN");
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v16.__r_.__value_.__l.__size_;
  }
  if (size != 5) {
    goto LABEL_22;
  }
  if ((*((unsigned char *)&v16.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v16.__r_.__value_.__l.__data_, &__s2, v16.__r_.__value_.__l.__size_)) {
      goto LABEL_22;
    }
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else if (*((unsigned char *)&v16.__r_.__value_.__s + 23))
  {
    uint64_t v6 = 0;
    while (v16.__r_.__value_.__s.__data_[v6] == *((unsigned __int8 *)&__s2 + v6))
    {
      if (HIBYTE(v16.__r_.__value_.__r.__words[2]) == ++v6) {
        goto LABEL_17;
      }
    }
LABEL_22:
    __s2 = &v16;
    uint64_t v19 = &v13;
    nitro::ir::parse<nitro::ir::DEFUN>(nitro::SExp const&)::$_1::operator()((uint64_t **)&__s2);
  }
LABEL_17:
  uint64_t symbol_id = 0;
  uint64_t symbol_id = nitro::get_symbol_id((const std::string *)(*(void *)(a1 + 48) + 80));
  nitro::ir::parse_function_type((nitro::ir *)(*(void *)(a1 + 48) + 144), (uint64_t)&v16);
  nitro::ir::parse_string_sequence(*(void *)(a1 + 48) + 216, (uint64_t)&__s2);
  long long v7 = __s2;
  char v14 = 0;
  uint64_t v15 = 0;
  long long v13 = 0;
  if (v19 != (void **)__s2)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)__s2) >> 3);
    if (v8 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    size_t v9 = 0x5555555555555558 * (((char *)v19 - (char *)__s2) >> 3);
    long long v13 = operator new(v9);
    uint64_t v15 = (char *)v13 + 8 * v8;
    bzero(v13, 8 * v8);
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    char v14 = (char *)v13 + v9;
    do
    {
      *((void *)v13 + v11++) = nitro::get_symbol_id(&v7[v10]);
      long long v7 = __s2;
      ++v10;
    }
    while (v11 < 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)__s2) >> 3));
  }
  nitro::ir::parse_sequence<nitro::ir::NODE>((void *)(*(void *)(a1 + 48) + 288), &__p);
  operator new();
}

void sub_19260AEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char *a15)
{
  MEMORY[0x192FF16B0](v15, 0x10B3C40FEA5DBC3);
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v16 - 88));
  std::pair<std::vector<nitro::variable_type>,nitro::variable_type>::~pair(&a15);
  _Unwind_Resume(a1);
}

void sub_19260AF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ir::parse<nitro::ir::DEFMEMBERFUN>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  v16.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 != 360)
  {
    *(void *)&long long __s2 = &v16;
    nitro::ir::parse<nitro::ir::DEFMEMBERFUN>(nitro::SExp const&)::$_0::operator()();
  }
  if (*(char *)(v1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v1 + 8), *(void *)(v1 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(v1 + 8);
    v16.__r_.__value_.__r.__words[2] = *(void *)(v1 + 24);
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v4;
  }
  long long v13 = "DEFMEMBERFUN";
  char v19 = 12;
  strcpy((char *)&__s2, "DEFMEMBERFUN");
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v16.__r_.__value_.__l.__size_;
  }
  if (size != 12) {
    goto LABEL_22;
  }
  if ((*((unsigned char *)&v16.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v16.__r_.__value_.__l.__data_, &__s2, v16.__r_.__value_.__l.__size_)) {
      goto LABEL_22;
    }
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else if (*((unsigned char *)&v16.__r_.__value_.__s + 23))
  {
    uint64_t v6 = 0;
    while (v16.__r_.__value_.__s.__data_[v6] == *((unsigned __int8 *)&__s2 + v6))
    {
      if (HIBYTE(v16.__r_.__value_.__r.__words[2]) == ++v6) {
        goto LABEL_17;
      }
    }
LABEL_22:
    *(void *)&long long __s2 = &v16;
    *((void *)&__s2 + 1) = &v13;
    nitro::ir::parse<nitro::ir::DEFMEMBERFUN>(nitro::SExp const&)::$_1::operator()((uint64_t **)&__s2);
  }
LABEL_17:
  uint64_t symbol_id = 0;
  uint64_t symbol_id = nitro::get_symbol_id((const std::string *)(*(void *)(a1 + 48) + 80));
  nitro::ir::parse_function_type((nitro::ir *)(*(void *)(a1 + 48) + 144), (uint64_t)&v16);
  nitro::ir::parse_string_sequence(*(void *)(a1 + 48) + 216, (uint64_t)&__s2);
  uint64_t v7 = __s2;
  char v14 = 0;
  uint64_t v15 = 0;
  long long v13 = 0;
  if (*((void *)&__s2 + 1) != (void)__s2)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&__s2 + 1) - __s2) >> 3);
    if (v8 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    size_t v9 = 0x5555555555555558 * ((uint64_t)(*((void *)&__s2 + 1) - __s2) >> 3);
    long long v13 = operator new(v9);
    uint64_t v15 = (char *)v13 + 8 * v8;
    bzero(v13, 8 * v8);
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    char v14 = (char *)v13 + v9;
    do
    {
      *((void *)v13 + v11++) = nitro::get_symbol_id((const std::string *)(v7 + v10));
      uint64_t v7 = __s2;
      v10 += 24;
    }
    while (v11 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&__s2 + 1) - __s2) >> 3));
  }
  nitro::ir::parse_sequence<nitro::ir::NODE>((void *)(*(void *)(a1 + 48) + 288), &__p);
  operator new();
}

void sub_19260B324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char *a15)
{
  MEMORY[0x192FF16B0](v15, 0x10B3C40FEA5DBC3);
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v16 - 88));
  std::pair<std::vector<nitro::variable_type>,nitro::variable_type>::~pair(&a15);
  _Unwind_Resume(a1);
}

void sub_19260B394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ir::parse<nitro::ir::DEFCLASS>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  v11.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 != 288)
  {
    *(void *)&long long __s2 = &v11;
    nitro::ir::parse<nitro::ir::DEFCLASS>(nitro::SExp const&)::$_0::operator()();
  }
  if (*(char *)(v1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(v1 + 8), *(void *)(v1 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(v1 + 8);
    v11.__r_.__value_.__r.__words[2] = *(void *)(v1 + 24);
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v4;
  }
  *(void *)&long long v8 = "DEFCLASS";
  char v10 = 8;
  strcpy((char *)&__s2, "DEFCLASS");
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v11.__r_.__value_.__l.__size_;
  }
  if (size != 8) {
    goto LABEL_21;
  }
  if ((*((unsigned char *)&v11.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v11.__r_.__value_.__l.__data_, &__s2, v11.__r_.__value_.__l.__size_)) {
      goto LABEL_21;
    }
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  else if (*((unsigned char *)&v11.__r_.__value_.__s + 23))
  {
    uint64_t v6 = 0;
    while (v11.__r_.__value_.__s.__data_[v6] == *((unsigned __int8 *)&__s2 + v6))
    {
      if (HIBYTE(v11.__r_.__value_.__r.__words[2]) == ++v6) {
        goto LABEL_17;
      }
    }
LABEL_21:
    *(void *)&long long __s2 = &v11;
    *((void *)&__s2 + 1) = &v8;
    nitro::ir::parse<nitro::ir::DEFCLASS>(nitro::SExp const&)::$_1::operator()((uint64_t **)&__s2);
  }
LABEL_17:
  uint64_t v7 = *(void *)(a1 + 48);
  if (*(char *)(v7 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(v7 + 80), *(void *)(v7 + 88));
    uint64_t v7 = *(void *)(a1 + 48);
  }
  else
  {
    std::string v11 = *(std::string *)(v7 + 80);
  }
  nitro::ir::parse_sequence<nitro::ir::DEFVAR>(v7 + 144, &__s2);
  nitro::ir::parse_sequence<nitro::ir::DEFMEMBERFUN>(*(void *)(a1 + 48) + 216, &v8);
  operator new();
}

void nitro::ir::parse<nitro::ir::MEMBER>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  v11.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 != 216)
  {
    v8[0] = (uint64_t *)&v11;
    nitro::ir::parse<nitro::ir::MEMBER>(nitro::SExp const&)::$_0::operator()();
  }
  if (*(char *)(v1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(v1 + 8), *(void *)(v1 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(v1 + 8);
    v11.__r_.__value_.__r.__words[2] = *(void *)(v1 + 24);
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v4;
  }
  char v10 = "MEMBER";
  char v9 = 6;
  strcpy((char *)v8, "MEMBER");
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v11.__r_.__value_.__l.__size_;
  }
  if (size != 6) {
    goto LABEL_19;
  }
  if ((*((unsigned char *)&v11.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v11.__r_.__value_.__l.__data_, v8, v11.__r_.__value_.__l.__size_)) {
      goto LABEL_19;
    }
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  else if (*((unsigned char *)&v11.__r_.__value_.__s + 23))
  {
    uint64_t v6 = 0;
    while (v11.__r_.__value_.__s.__data_[v6] == *((unsigned __int8 *)v8 + v6))
    {
      if (HIBYTE(v11.__r_.__value_.__r.__words[2]) == ++v6) {
        goto LABEL_17;
      }
    }
LABEL_19:
    v8[0] = (uint64_t *)&v11;
    v8[1] = (uint64_t *)&v10;
    nitro::ir::parse<nitro::ir::MEMBER>(nitro::SExp const&)::$_1::operator()(v8);
  }
LABEL_17:
  nitro::ir::parse<nitro::ir::NODE>(&v11, *(void *)(a1 + 48) + 72);
  uint64_t v7 = *(void *)(a1 + 48);
  if (*(unsigned char *)(v7 + 145))
  {
    nitro::get_symbol_id((const std::string *)(v7 + 152));
    operator new();
  }
  nitro::ir::parse<nitro::ir::MEMBER>(nitro::SExp const&)::$_2::operator()();
}

void sub_19260B7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p)
  {
    (*(void (**)(void *))(*(void *)__p + 40))(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ir::parse<nitro::ir::CALL>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  *(void *)&long long v4 = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 == 216)
  {
    if (*(unsigned char *)(v1 + 73))
    {
      nitro::get_symbol_id((const std::string *)(v1 + 80));
      nitro::ir::parse_sequence<nitro::ir::NODE>((void *)(*(void *)(a1 + 48) + 144), &v4);
      operator new();
    }
    nitro::ir::parse<nitro::ir::MEMBER>(v1 + 72);
  }
  long long v5 = &v4;
  nitro::ir::parse<nitro::ir::CALL>(nitro::SExp const&)::$_0::operator()();
}

void nitro::ir::parse<nitro::ir::MAKEOBJECT>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  v5.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 == 216)
  {
    if (*(char *)(v1 + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)(v1 + 80), *(void *)(v1 + 88));
      uint64_t v1 = *(void *)(a1 + 48);
    }
    else
    {
      std::string v5 = *(std::string *)(v1 + 80);
    }
    nitro::ir::parse_sequence<nitro::ir::NODE>((void *)(v1 + 144), &v4);
    operator new();
  }
  *(void *)&long long v4 = &v5;
  nitro::ir::parse<nitro::ir::MAKEOBJECT>(nitro::SExp const&)::$_0::operator()();
}

void nitro::ir::parse<nitro::ir::WHILE>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  *(void *)&long long v4 = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 == 216)
  {
    nitro::ir::parse<nitro::ir::NODE>(&v5, v1 + 72);
    nitro::ir::parse_sequence<nitro::ir::NODE>((void *)(*(void *)(a1 + 48) + 144), &v4);
    operator new();
  }
  std::string v5 = &v4;
  nitro::ir::parse<nitro::ir::WHILE>(nitro::SExp const&)::$_0::operator()();
}

void nitro::ir::parse<nitro::ir::FOR>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  *(void *)&long long v4 = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 == 360)
  {
    nitro::ir::parse<nitro::ir::NODE>(&v7, v1 + 72);
    nitro::ir::parse<nitro::ir::NODE>(&v6, *(void *)(a1 + 48) + 144);
    nitro::ir::parse<nitro::ir::NODE>(&v5, *(void *)(a1 + 48) + 216);
    nitro::ir::parse_sequence<nitro::ir::NODE>((void *)(*(void *)(a1 + 48) + 288), &v4);
    operator new();
  }
  uint64_t v7 = &v4;
  nitro::ir::parse<nitro::ir::FOR>(nitro::SExp const&)::$_0::operator()();
}

void nitro::ir::parse<nitro::ir::FOREACH>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  *(void *)&long long v4 = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 == 288)
  {
    nitro::get_symbol_id((const std::string *)(v1 + 80));
    nitro::ir::parse<nitro::ir::NODE>(&v5, *(void *)(a1 + 48) + 144);
    nitro::ir::parse_sequence<nitro::ir::NODE>((void *)(*(void *)(a1 + 48) + 216), &v4);
    operator new();
  }
  uint64_t v5 = &v4;
  nitro::ir::parse<nitro::ir::FOREACH>(nitro::SExp const&)::$_0::operator()();
}

void nitro::ir::parse<nitro::ir::IF>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  *(void *)&long long v5 = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 == 288)
  {
    nitro::ir::parse<nitro::ir::NODE>(&v6, v1 + 72);
    nitro::ir::parse_sequence<nitro::ir::NODE>((void *)(*(void *)(a1 + 48) + 144), &v5);
    nitro::ir::parse_sequence<nitro::ir::NODE>((void *)(*(void *)(a1 + 48) + 216), &v4);
    operator new();
  }
  *(void *)&long long v4 = &v5;
  nitro::ir::parse<nitro::ir::IF>(nitro::SExp const&)::$_0::operator()();
}

void nitro::ir::parse<nitro::ir::INDEXGET>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  unint64_t v5 = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 == 216)
  {
    nitro::ir::parse<nitro::ir::NODE>(&v5, v1 + 72);
    nitro::ir::parse<nitro::ir::NODE>(&v4, *(void *)(a1 + 48) + 144);
    operator new();
  }
  long long v4 = &v5;
  nitro::ir::parse<nitro::ir::INDEXGET>(nitro::SExp const&)::$_0::operator()();
}

void nitro::ir::parse<nitro::ir::INDEXPUT>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  unint64_t v6 = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 == 288)
  {
    nitro::ir::parse<nitro::ir::NODE>(&v6, v1 + 72);
    nitro::ir::parse<nitro::ir::NODE>(&v5, *(void *)(a1 + 48) + 144);
    nitro::ir::parse<nitro::ir::NODE>(&v4, *(void *)(a1 + 48) + 216);
    operator new();
  }
  unint64_t v5 = &v6;
  nitro::ir::parse<nitro::ir::INDEXPUT>(nitro::SExp const&)::$_0::operator()();
}

void nitro::ir::parse<nitro::ir::HINT>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  v4[0] = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 == 216)
  {
    nitro::ir::parse_type((nitro::ir *)(v1 + 72), (uint64_t)v4);
    nitro::ir::parse<nitro::ir::NODE>(&v5, *(void *)(a1 + 48) + 144);
    operator new();
  }
  unint64_t v5 = v4;
  nitro::ir::parse<nitro::ir::HINT>(nitro::SExp const&)::$_0::operator()();
}

void sub_19260C424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v19 = *(unsigned int *)(v15 + 40);
  if (v19 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE39BB18[v19])(v17 - 33, v16);
  }
  *(_DWORD *)(v15 + 40) = -1;
  MEMORY[0x192FF16B0](v15, 0x10B3C4072FD431ALL);
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 40))(a15);
  }
  nitro::variable_type::~variable_type((nitro::variable_type *)&a10);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::ASSIGN>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  unint64_t v5 = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 == 216)
  {
    nitro::ir::parse<nitro::ir::NODE>(&v5, v1 + 72);
    nitro::ir::parse<nitro::ir::NODE>(&v4, *(void *)(a1 + 48) + 144);
    operator new();
  }
  uint64_t v4 = &v5;
  nitro::ir::parse<nitro::ir::ASSIGN>(nitro::SExp const&)::$_0::operator()();
}

void nitro::ir::parse<nitro::ir::LIST>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  *(void *)&long long v3 = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 == 144)
  {
    nitro::ir::parse_sequence<nitro::ir::NODE>((void *)(v1 + 72), &v3);
    operator new();
  }
  uint64_t v4 = &v3;
  nitro::ir::parse<nitro::ir::LIST>(nitro::SExp const&)::$_0::operator()();
}

void nitro::ir::parse<nitro::ir::DICT>(uint64_t a1)
{
  v15[9] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  v15[0] = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 == 144)
  {
    nitro::SExp::SExp((uint64_t)v15, v1 + 72);
    long long v13 = 0uLL;
    unint64_t v14 = 0;
    uint64_t v3 = v15[6];
    uint64_t v4 = v15[7];
    while (v3 != v4)
    {
      nitro::ir::parse<nitro::ir::NODE>(&v11, *(void *)(v3 + 48));
      nitro::ir::parse<nitro::ir::NODE>(&v10, *(void *)(v3 + 48) + 72);
      *(void *)&long long v12 = v11;
      *((void *)&v12 + 1) = v10;
      uint64_t v5 = *((void *)&v13 + 1);
      if (*((void *)&v13 + 1) >= v14)
      {
        uint64_t v7 = std::vector<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>::__push_back_slow_path<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>(&v13, &v12);
      }
      else
      {
        *(void *)&long long v12 = 0;
        **((void **)&v13 + 1) = v11;
        uint64_t v6 = *((void *)&v12 + 1);
        *((void *)&v12 + 1) = 0;
        *(void *)(v5 + 8) = v6;
        uint64_t v7 = (_OWORD *)(v5 + 16);
      }
      *((void *)&v13 + 1) = v7;
      uint64_t v8 = *((void *)&v12 + 1);
      *((void *)&v12 + 1) = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
      }
      uint64_t v9 = v12;
      *(void *)&long long v12 = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
      }
      v3 += 72;
    }
    operator new();
  }
  *(void *)&long long v13 = v15;
  nitro::ir::parse<nitro::ir::DICT>(nitro::SExp const&)::$_0::operator()();
}

void sub_19260C870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::vector<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>::~vector[abi:ne180100]((void **)va);
  nitro::SExp::~SExp((nitro::SExp *)va1);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::TUPLE>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  *(void *)&long long v3 = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 == 144)
  {
    nitro::ir::parse_sequence<nitro::ir::NODE>((void *)(v1 + 72), &v3);
    operator new();
  }
  uint64_t v4 = &v3;
  nitro::ir::parse<nitro::ir::TUPLE>(nitro::SExp const&)::$_0::operator()();
}

void nitro::ir::parse<nitro::ir::RETURN>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  unint64_t v3 = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 == 144)
  {
    nitro::ir::parse<nitro::ir::NODE>(&v3, v1 + 72);
    operator new();
  }
  nitro::ir::parse<nitro::ir::RETURN>(nitro::SExp const&)::$_0::operator()();
}

void *nitro::ir::parse<nitro::ir::TUPLEGET>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  __dst.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 != 216)
  {
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
    nitro::ir::parse<nitro::ir::TUPLEGET>(nitro::SExp const&)::$_0::operator()();
  }
  if (!*(unsigned char *)(v1 + 144)) {
    nitro::ir::parse<nitro::ir::TUPLEGET>(nitro::SExp const&)::$_1::operator()();
  }
  uint64_t result = nitro::ir::parse<nitro::ir::NODE>(&v30, v1 + 72);
  uint64_t v5 = *(void *)(a1 + 48);
  switch(*(unsigned char *)(v5 + 184))
  {
    case 2:
      uint64_t v6 = *(void *)(v5 + 176);
      size_t __idx = 0;
      uint64_t v7 = (const char *)(v6 + 8);
      if (*(char *)(v6 + 31) < 0) {
        uint64_t v7 = *(const char **)(v6 + 8);
      }
      size_t v8 = strlen(v7);
      if (v8 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v9 = v8;
      if (v8 >= 0x17)
      {
        uint64_t v25 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17) {
          uint64_t v25 = v8 | 7;
        }
        uint64_t v26 = v25 + 1;
        p_dst = (std::string *)operator new(v25 + 1);
        __dst.__r_.__value_.__l.__size_ = v9;
        __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8;
        p_dst = &__dst;
        if (!v8)
        {
LABEL_34:
          p_dst->__r_.__value_.__s.__data_[v9] = 0;
          std::stoll(&__dst, &__idx, 10);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (*(char *)(v6 + 31) < 0)
          {
            if (__idx != *(void *)(v6 + 16)) {
              goto LABEL_45;
            }
          }
          else if (__idx != *(unsigned __int8 *)(v6 + 31))
          {
LABEL_45:
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            int v28 = std::string::append(&v36, " cannot be interpreted as an integer");
            long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v29;
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__dst);
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
LABEL_43:
          operator new();
        }
      }
      memmove(p_dst, v7, v9);
      goto LABEL_34;
    case 3:
      uint64_t v12 = *(void *)(v5 + 176);
      memset(&__dst, 0, sizeof(__dst));
      unint64_t v14 = *(unsigned char **)(v12 + 8);
      long long v13 = *(unsigned char **)(v12 + 16);
      int64_t v15 = v13 - v14;
      if (v13 == v14)
      {
        uint64_t v16 = 0;
      }
      else
      {
        if (v15 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = operator new(v13 - v14);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
        __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v16 + 8 * (v15 >> 3);
        memcpy(v16, v14, v15);
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v16 + 8 * (v15 >> 3);
      }
      nitro::flexible_type_fail(0);
      if (!v16) {
        goto LABEL_43;
      }
      char v20 = v16;
      goto LABEL_42;
    case 4:
      uint64_t v17 = *(void *)(v5 + 176);
      memset(&__dst, 0, sizeof(__dst));
      std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&__dst, *(void **)(v17 + 8), *(void **)(v17 + 16), (uint64_t)(*(void *)(v17 + 16) - *(void *)(v17 + 8)) >> 4);
      nitro::flexible_type_fail(0);
      std::string::size_type v18 = __dst.__r_.__value_.__r.__words[0];
      if (!__dst.__r_.__value_.__r.__words[0]) {
        goto LABEL_43;
      }
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      char v20 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
      {
        do
        {
          size -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&__dst.__r_.__value_.__r.__words[2], size);
        }
        while (size != v18);
        char v20 = (void *)__dst.__r_.__value_.__r.__words[0];
      }
      __dst.__r_.__value_.__l.__size_ = v18;
      goto LABEL_42;
    case 5:
      uint64_t v21 = *(void *)(v5 + 176);
      memset(&__dst, 0, sizeof(__dst));
      std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__dst, *(char **)(v21 + 8), *(char **)(v21 + 16), (uint64_t)(*(void *)(v21 + 16) - *(void *)(v21 + 8)) >> 5);
      nitro::flexible_type_fail(0);
      std::string::size_type v22 = __dst.__r_.__value_.__r.__words[0];
      if (!__dst.__r_.__value_.__r.__words[0]) {
        goto LABEL_43;
      }
      std::string::size_type v23 = __dst.__r_.__value_.__l.__size_;
      std::string::size_type v24 = __dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
      {
        do
          std::string::size_type v23 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v23 - 32);
        while (v23 != v22);
        std::string::size_type v24 = __dst.__r_.__value_.__r.__words[0];
      }
      __dst.__r_.__value_.__l.__size_ = v22;
      char v20 = (void *)v24;
LABEL_42:
      operator delete(v20);
      goto LABEL_43;
    case 6:
    case 8:
      __break(1u);
      return result;
    case 9:
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(*(void *)(v5 + 176) + 8));
      nitro::flexible_type_fail(0);
      if (__p)
      {
        uint64_t v35 = __p;
        operator delete(__p);
      }
      if (v32)
      {
        uint64_t v33 = v32;
        operator delete(v32);
      }
      uint64_t v11 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
      if (__dst.__r_.__value_.__r.__words[2]
        && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      goto LABEL_43;
    default:
      goto LABEL_43;
  }
}

void sub_19260CE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v29 & 1) == 0)
    {
LABEL_8:
      if (a10) {
        (*(void (**)(uint64_t))(*(void *)a10 + 40))(a10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

uint64_t std::set<std::string>::count[abi:ne180100](uint64_t a1, const void **a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  if (v2)
  {
    int v3 = *((char *)a2 + 23);
    if (v3 >= 0) {
      size_t v4 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v4 = (size_t)a2[1];
    }
    if (v3 >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = *a2;
    }
    uint64_t v6 = 1;
    do
    {
      int v7 = *((char *)v2 + 55);
      if (v7 >= 0) {
        size_t v8 = *((unsigned __int8 *)v2 + 55);
      }
      else {
        size_t v8 = (size_t)v2[5];
      }
      if (v7 >= 0) {
        std::string::size_type v9 = (uint64_t *)(v2 + 4);
      }
      else {
        std::string::size_type v9 = v2[4];
      }
      if (v8 >= v4) {
        size_t v10 = v4;
      }
      else {
        size_t v10 = v8;
      }
      int v11 = memcmp(v5, v9, v10);
      BOOL v12 = v4 < v8;
      if (v11) {
        BOOL v12 = v11 < 0;
      }
      if (!v12)
      {
        int v13 = memcmp(v9, v5, v10);
        BOOL v14 = v8 < v4;
        if (v13) {
          BOOL v14 = v13 < 0;
        }
        if (!v14) {
          return v6;
        }
        ++v2;
      }
      uint64_t v2 = (uint64_t **)*v2;
    }
    while (v2);
  }
  return 0;
}

void nitro::ir::parse<nitro::ir::UNARYOPERATOR>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56) - v1;
  __p.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v2 >> 3);
  if (v2 == 144)
  {
    if (*(char *)(v1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v1 + 8), *(void *)(v1 + 16));
      uint64_t v1 = *(void *)(a1 + 48);
    }
    else
    {
      long long v3 = *(_OWORD *)(v1 + 8);
      __p.__r_.__value_.__r.__words[2] = *(void *)(v1 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v3;
    }
    nitro::ir::parse<nitro::ir::NODE>(&p_p, v1 + 72);
    operator new();
  }
  p_p = &__p;
  nitro::ir::parse<nitro::ir::UNARYOPERATOR>(nitro::SExp const&)::$_0::operator()();
}

void nitro::ir::parse<nitro::ir::BINARYOPERATOR>(uint64_t a1)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)&v20.__r_.__value_.__s + 23) = 1;
  LOWORD(v20.__r_.__value_.__l.__data_) = 43;
  int v21 = 0;
  char v23 = 1;
  LOWORD(v22[0]) = 45;
  int v24 = 1;
  char v26 = 1;
  LOWORD(v25[0]) = 42;
  int v27 = 2;
  char v29 = 1;
  LOWORD(v28[0]) = 47;
  int v30 = 3;
  char v32 = 2;
  strcpy((char *)v31, "//");
  int v33 = 4;
  char v35 = 2;
  strcpy((char *)v34, "!=");
  int v36 = 6;
  char v38 = 2;
  strcpy((char *)v37, "==");
  int v39 = 5;
  char v41 = 1;
  LOWORD(v40[0]) = 60;
  int v42 = 7;
  char v44 = 1;
  LOWORD(v43[0]) = 62;
  int v45 = 8;
  char v47 = 2;
  strcpy((char *)v46, "<=");
  int v48 = 9;
  char v50 = 2;
  strcpy((char *)v49, ">=");
  int v51 = 10;
  char v53 = 2;
  strcpy((char *)v52, "&&");
  int v54 = 11;
  char v56 = 2;
  strcpy((char *)v55, "||");
  int v57 = 12;
  char v59 = 2;
  strcpy((char *)__p, "in");
  int v60 = 13;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v17 = v18;
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>(&v17, v18, (const void **)&v20.__r_.__value_.__l.__data_, (uint64_t)&v20);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>(&v17, v18, (const void **)v22, (uint64_t)v22);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>(&v17, v18, (const void **)v25, (uint64_t)v25);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>(&v17, v18, (const void **)v28, (uint64_t)v28);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>(&v17, v18, (const void **)v31, (uint64_t)v31);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>(&v17, v18, (const void **)v34, (uint64_t)v34);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>(&v17, v18, (const void **)v37, (uint64_t)v37);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>(&v17, v18, (const void **)v40, (uint64_t)v40);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>(&v17, v18, (const void **)v43, (uint64_t)v43);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>(&v17, v18, (const void **)v46, (uint64_t)v46);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>(&v17, v18, (const void **)v49, (uint64_t)v49);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>(&v17, v18, (const void **)v52, (uint64_t)v52);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>(&v17, v18, (const void **)v55, (uint64_t)v55);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>(&v17, v18, (const void **)__p, (uint64_t)__p);
  if (v59 < 0)
  {
    operator delete(__p[0]);
    if ((v56 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v53 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v56 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v55[0]);
  if ((v53 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v50 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v52[0]);
  if ((v50 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v47 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v49[0]);
  if ((v47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v44 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v46[0]);
  if ((v44 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v41 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v43[0]);
  if ((v41 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v38 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v40[0]);
  if ((v38 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v35 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete(v37[0]);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v34[0]);
  if ((v32 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v29 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(v31[0]);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(v28[0]);
  if ((v26 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v25[0]);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_31:
    operator delete(v20.__r_.__value_.__l.__data_);
LABEL_15:
    uint64_t v2 = *(void *)(a1 + 48);
    uint64_t v3 = *(void *)(a1 + 56) - v2;
    v20.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v3 >> 3);
    if (v3 == 216)
    {
      if (*(char *)(v2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(v2 + 8), *(void *)(v2 + 16));
      }
      else
      {
        long long v4 = *(_OWORD *)(v2 + 8);
        v20.__r_.__value_.__r.__words[2] = *(void *)(v2 + 24);
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v4;
      }
      uint64_t v5 = v18[0];
      if (v18[0])
      {
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v20.__r_.__value_.__l.__size_;
        }
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v7 = &v20;
        }
        else {
          int v7 = (std::string *)v20.__r_.__value_.__r.__words[0];
        }
        do
        {
          int v8 = *(char *)(v5 + 55);
          if (v8 >= 0) {
            size_t v9 = *(unsigned __int8 *)(v5 + 55);
          }
          else {
            size_t v9 = *(void *)(v5 + 40);
          }
          if (v8 >= 0) {
            size_t v10 = (const void *)(v5 + 32);
          }
          else {
            size_t v10 = *(const void **)(v5 + 32);
          }
          if (v9 >= size) {
            size_t v11 = size;
          }
          else {
            size_t v11 = v9;
          }
          int v12 = memcmp(v7, v10, v11);
          BOOL v13 = size < v9;
          if (v12) {
            BOOL v13 = v12 < 0;
          }
          if (!v13)
          {
            int v14 = memcmp(v10, v7, v11);
            BOOL v15 = v9 < size;
            if (v14) {
              BOOL v15 = v14 < 0;
            }
            if (!v15)
            {
              uint64_t v19 = &v20;
              std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v17, (const void **)&v20.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v19);
              nitro::ir::parse<nitro::ir::NODE>(&v19, *(void *)(a1 + 48) + 72);
              nitro::ir::parse<nitro::ir::NODE>(&v16, *(void *)(a1 + 48) + 144);
              operator new();
            }
            v5 += 8;
          }
          uint64_t v5 = *(void *)v5;
        }
        while (v5);
      }
      nitro::ir::parse<nitro::ir::BINARYOPERATOR>(nitro::SExp const&)::$_1::operator()();
    }
    uint64_t v19 = &v20;
    nitro::ir::parse<nitro::ir::BINARYOPERATOR>(nitro::SExp const&)::$_0::operator()();
  }
LABEL_30:
  operator delete(v22[0]);
  if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_15;
  }
  goto LABEL_31;
}

void sub_19260D854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
}

void nitro::ir::parse<nitro::ir::NODE>(nitro::SExp const&)::$_3::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 174, 1);
    std::stringbuf::str();
    int v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      int v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        size_t v9 = __p;
      }
      else {
        size_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v11 = (file_logger *)global_logger();
    int v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 174, 1);
    std::stringbuf::str();
    BOOL v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      int v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        BOOL v15 = v23;
      }
      else {
        BOOL v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  std::string::size_type v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19260DC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::DEFVAR>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 182, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 182, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19260E0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::DEFVAR>(nitro::SExp const&)::$_1::operator()(uint64_t **a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Assertion failed: (", 19);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1);
  long long v4 = (void *)std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"): ", 3);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"sexp.children[0].string_value", 29);
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"==", 2);
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\"DEFVAR\"", 8);
  size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"  [", 3);
  int v10 = *((char *)*a1 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (uint64_t)*a1;
  }
  else {
    uint64_t v11 = **a1;
  }
  if (v10 >= 0) {
    uint64_t v12 = *((unsigned __int8 *)*a1 + 23);
  }
  else {
    uint64_t v12 = (*a1)[1];
  }
  BOOL v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  LOBYTE(v37[0]) = 32;
  int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v37, 1);
  BOOL v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"==", 2);
  LOBYTE(v37[0]) = 32;
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v37, 1);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"DEFVAR", 6);
  std::string::size_type v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v18);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v19 = (file_logger *)global_logger();
    started = file_logger::start_stream(v19, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 183, 1);
    std::stringbuf::str();
    unsigned __int8 v21 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v21 && v21[280])
    {
      std::string::size_type v22 = v21 + 16;
      if ((v35 & 0x80u) == 0) {
        uint64_t v23 = __p;
      }
      else {
        uint64_t v23 = (void **)__p[0];
      }
      if ((v35 & 0x80u) == 0) {
        uint64_t v24 = v35;
      }
      else {
        uint64_t v24 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    }
    if ((char)v35 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v25 = (file_logger *)global_logger();
    char v26 = file_logger::start_stream(v25, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 183, 1);
    std::stringbuf::str();
    int v27 = (char *)pthread_getspecific(*((void *)v26 + 74));
    if (v27 && v27[280])
    {
      unsigned __int8 v28 = v27 + 16;
      if ((v38 & 0x80u) == 0) {
        char v29 = v37;
      }
      else {
        char v29 = (void **)v37[0];
      }
      if ((v38 & 0x80u) == 0) {
        uint64_t v30 = v38;
      }
      else {
        uint64_t v30 = (uint64_t)v37[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    }
    unsigned __int8 v31 = pthread_getspecific(*((void *)v26 + 74));
    if (v31)
    {
      if (*((unsigned char *)v31 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v26);
        if (*((_DWORD *)v26 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v38 < 0) {
      operator delete(v37[0]);
    }
  }
  char v32 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19260E4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::variable_type::~variable_type(nitro::variable_type *this)
{
  uint64_t v2 = *((unsigned int *)this + 8);
  if (v2 != -1) {
    ((void (*)(char *, nitro::variable_type *))off_1EE39BB18[v2])(&v3, this);
  }
  *((_DWORD *)this + 8) = -1;
}

void nitro::ir::parse<nitro::ir::DEFUN>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  char v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"5", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  int v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 192, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 192, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    uint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19260E93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::DEFUN>(nitro::SExp const&)::$_1::operator()(uint64_t **a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Assertion failed: (", 19);
  char v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1);
  long long v4 = (void *)std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"): ", 3);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"sexp.children[0].string_value", 29);
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"==", 2);
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\"DEFUN\"", 7);
  size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"  [", 3);
  int v10 = *((char *)*a1 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (uint64_t)*a1;
  }
  else {
    uint64_t v11 = **a1;
  }
  if (v10 >= 0) {
    uint64_t v12 = *((unsigned __int8 *)*a1 + 23);
  }
  else {
    uint64_t v12 = (*a1)[1];
  }
  BOOL v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  LOBYTE(v37[0]) = 32;
  int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v37, 1);
  BOOL v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"==", 2);
  LOBYTE(v37[0]) = 32;
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v37, 1);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"DEFUN", 5);
  std::string::size_type v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v18);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v19 = (file_logger *)global_logger();
    started = file_logger::start_stream(v19, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 193, 1);
    std::stringbuf::str();
    unsigned __int8 v21 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v21 && v21[280])
    {
      std::string::size_type v22 = v21 + 16;
      if ((v35 & 0x80u) == 0) {
        uint64_t v23 = __p;
      }
      else {
        uint64_t v23 = (void **)__p[0];
      }
      if ((v35 & 0x80u) == 0) {
        uint64_t v24 = v35;
      }
      else {
        uint64_t v24 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    }
    if ((char)v35 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v25 = (file_logger *)global_logger();
    char v26 = file_logger::start_stream(v25, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 193, 1);
    std::stringbuf::str();
    int v27 = (char *)pthread_getspecific(*((void *)v26 + 74));
    if (v27 && v27[280])
    {
      unsigned __int8 v28 = v27 + 16;
      if ((v38 & 0x80u) == 0) {
        char v29 = v37;
      }
      else {
        char v29 = (void **)v37[0];
      }
      if ((v38 & 0x80u) == 0) {
        uint64_t v30 = v38;
      }
      else {
        uint64_t v30 = (uint64_t)v37[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    }
    unsigned __int8 v31 = pthread_getspecific(*((void *)v26 + 74));
    if (v31)
    {
      if (*((unsigned char *)v31 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v26);
        if (*((_DWORD *)v26 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v38 < 0) {
      operator delete(v37[0]);
    }
  }
  char v32 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19260ED64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *nitro::ir::parse_sequence<nitro::ir::NODE>@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)result) {
    nitro::ir::parse_sequence<nitro::ir::NODE>(nitro::SExp const&)::{lambda(void)#1}::operator()();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = result[6];
  uint64_t v4 = result[7];
  while (v3 != v4)
  {
    nitro::ir::parse<nitro::ir::NODE>(&v8, v3);
    uint64_t v5 = (uint64_t *)a2[1];
    if ((unint64_t)v5 >= a2[2])
    {
      int v7 = std::vector<std::unique_ptr<nitro::ir::NODE>>::__push_back_slow_path<std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t *)&v8);
    }
    else
    {
      uint64_t v6 = (uint64_t)v8;
      int v8 = 0;
      uint64_t *v5 = v6;
      int v7 = v5 + 1;
    }
    a2[1] = v7;
    uint64_t result = v8;
    int v8 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
    }
    v3 += 72;
  }
  return result;
}

void sub_19260EF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void *std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char **std::pair<std::vector<nitro::variable_type>,nitro::variable_type>::~pair(char **a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 14);
  if (v2 != -1) {
    ((void (*)(char *, char **))off_1EE39BB18[v2])(&v9, a1 + 3);
  }
  *((_DWORD *)a1 + 14) = -1;
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = a1[1];
    uint64_t v5 = *a1;
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = v4 - 40;
        uint64_t v7 = *((unsigned int *)v4 - 2);
        if (v7 != -1) {
          ((void (*)(char *, char *))off_1EE39BB18[v7])(&v10, v4 - 40);
        }
        *((_DWORD *)v4 - 2) = -1;
        v4 -= 40;
      }
      while (v6 != v3);
      uint64_t v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

void nitro::ir::parse<nitro::ir::DEFMEMBERFUN>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"5", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  char v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 207, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 207, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    uint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19260F3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::DEFMEMBERFUN>(nitro::SExp const&)::$_1::operator()(uint64_t **a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Assertion failed: (", 19);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1);
  uint64_t v4 = (void *)std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"): ", 3);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"sexp.children[0].string_value", 29);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"==", 2);
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\"DEFMEMBERFUN\"", 14);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"  [", 3);
  int v10 = *((char *)*a1 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (uint64_t)*a1;
  }
  else {
    uint64_t v11 = **a1;
  }
  if (v10 >= 0) {
    uint64_t v12 = *((unsigned __int8 *)*a1 + 23);
  }
  else {
    uint64_t v12 = (*a1)[1];
  }
  BOOL v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  LOBYTE(v37[0]) = 32;
  int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v37, 1);
  BOOL v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"==", 2);
  LOBYTE(v37[0]) = 32;
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v37, 1);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"DEFMEMBERFUN", 12);
  std::string::size_type v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v18);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v19 = (file_logger *)global_logger();
    started = file_logger::start_stream(v19, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 208, 1);
    std::stringbuf::str();
    unsigned __int8 v21 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v21 && v21[280])
    {
      std::string::size_type v22 = v21 + 16;
      if ((v35 & 0x80u) == 0) {
        uint64_t v23 = __p;
      }
      else {
        uint64_t v23 = (void **)__p[0];
      }
      if ((v35 & 0x80u) == 0) {
        uint64_t v24 = v35;
      }
      else {
        uint64_t v24 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    }
    if ((char)v35 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v25 = (file_logger *)global_logger();
    char v26 = file_logger::start_stream(v25, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 208, 1);
    std::stringbuf::str();
    int v27 = (char *)pthread_getspecific(*((void *)v26 + 74));
    if (v27 && v27[280])
    {
      unsigned __int8 v28 = v27 + 16;
      if ((v38 & 0x80u) == 0) {
        char v29 = v37;
      }
      else {
        char v29 = (void **)v37[0];
      }
      if ((v38 & 0x80u) == 0) {
        uint64_t v30 = v38;
      }
      else {
        uint64_t v30 = (uint64_t)v37[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    }
    unsigned __int8 v31 = pthread_getspecific(*((void *)v26 + 74));
    if (v31)
    {
      if (*((unsigned char *)v31 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v26);
        if (*((_DWORD *)v26 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v38 < 0) {
      operator delete(v37[0]);
    }
  }
  char v32 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19260F7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::DEFCLASS>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"4", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  int v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 222, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 222, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    uint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19260FC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::DEFCLASS>(nitro::SExp const&)::$_1::operator()(uint64_t **a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Assertion failed: (", 19);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1);
  uint64_t v4 = (void *)std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"): ", 3);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"sexp.children[0].string_value", 29);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"==", 2);
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\"DEFCLASS\"", 10);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"  [", 3);
  int v10 = *((char *)*a1 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (uint64_t)*a1;
  }
  else {
    uint64_t v11 = **a1;
  }
  if (v10 >= 0) {
    uint64_t v12 = *((unsigned __int8 *)*a1 + 23);
  }
  else {
    uint64_t v12 = (*a1)[1];
  }
  BOOL v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  LOBYTE(v37[0]) = 32;
  int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v37, 1);
  BOOL v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"==", 2);
  LOBYTE(v37[0]) = 32;
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v37, 1);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"DEFCLASS", 8);
  std::string::size_type v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v18);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v19 = (file_logger *)global_logger();
    started = file_logger::start_stream(v19, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 223, 1);
    std::stringbuf::str();
    unsigned __int8 v21 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v21 && v21[280])
    {
      std::string::size_type v22 = v21 + 16;
      if ((v35 & 0x80u) == 0) {
        uint64_t v23 = __p;
      }
      else {
        uint64_t v23 = (void **)__p[0];
      }
      if ((v35 & 0x80u) == 0) {
        uint64_t v24 = v35;
      }
      else {
        uint64_t v24 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    }
    if ((char)v35 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v25 = (file_logger *)global_logger();
    char v26 = file_logger::start_stream(v25, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 223, 1);
    std::stringbuf::str();
    int v27 = (char *)pthread_getspecific(*((void *)v26 + 74));
    if (v27 && v27[280])
    {
      unsigned __int8 v28 = v27 + 16;
      if ((v38 & 0x80u) == 0) {
        char v29 = v37;
      }
      else {
        char v29 = (void **)v37[0];
      }
      if ((v38 & 0x80u) == 0) {
        uint64_t v30 = v38;
      }
      else {
        uint64_t v30 = (uint64_t)v37[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    }
    unsigned __int8 v31 = pthread_getspecific(*((void *)v26 + 74));
    if (v31)
    {
      if (*((unsigned char *)v31 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v26);
        if (*((_DWORD *)v26 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v38 < 0) {
      operator delete(v37[0]);
    }
  }
  char v32 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192610028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t nitro::ir::parse_sequence<nitro::ir::DEFVAR>@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)result) {
    nitro::ir::parse_sequence<nitro::ir::DEFVAR>(nitro::SExp const&)::{lambda(void)#1}::operator()();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(void *)(result + 48);
  if (v2 != *(void *)(result + 56)) {
    nitro::ir::parse<nitro::ir::DEFVAR>(v2);
  }
  return result;
}

void sub_192610224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

uint64_t nitro::ir::parse_sequence<nitro::ir::DEFMEMBERFUN>@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)result) {
    nitro::ir::parse_sequence<nitro::ir::DEFMEMBERFUN>(nitro::SExp const&)::{lambda(void)#1}::operator()();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(void *)(result + 48);
  if (v2 != *(void *)(result + 56)) {
    nitro::ir::parse<nitro::ir::DEFMEMBERFUN>(v2);
  }
  return result;
}

void sub_192610320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::MEMBER>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  int v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 234, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 234, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    uint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19261062C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::MEMBER>(nitro::SExp const&)::$_1::operator()(uint64_t **a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Assertion failed: (", 19);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1);
  uint64_t v4 = (void *)std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"): ", 3);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"sexp.children[0].string_value", 29);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"==", 2);
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\"MEMBER\"", 8);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"  [", 3);
  int v10 = *((char *)*a1 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (uint64_t)*a1;
  }
  else {
    uint64_t v11 = **a1;
  }
  if (v10 >= 0) {
    uint64_t v12 = *((unsigned __int8 *)*a1 + 23);
  }
  else {
    uint64_t v12 = (*a1)[1];
  }
  BOOL v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  LOBYTE(v37[0]) = 32;
  int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v37, 1);
  BOOL v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"==", 2);
  LOBYTE(v37[0]) = 32;
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v37, 1);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"MEMBER", 6);
  std::string::size_type v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v18);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v19 = (file_logger *)global_logger();
    started = file_logger::start_stream(v19, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 235, 1);
    std::stringbuf::str();
    unsigned __int8 v21 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v21 && v21[280])
    {
      std::string::size_type v22 = v21 + 16;
      if ((v35 & 0x80u) == 0) {
        uint64_t v23 = __p;
      }
      else {
        uint64_t v23 = (void **)__p[0];
      }
      if ((v35 & 0x80u) == 0) {
        uint64_t v24 = v35;
      }
      else {
        uint64_t v24 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    }
    if ((char)v35 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v25 = (file_logger *)global_logger();
    char v26 = file_logger::start_stream(v25, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 235, 1);
    std::stringbuf::str();
    int v27 = (char *)pthread_getspecific(*((void *)v26 + 74));
    if (v27 && v27[280])
    {
      unsigned __int8 v28 = v27 + 16;
      if ((v38 & 0x80u) == 0) {
        char v29 = v37;
      }
      else {
        char v29 = (void **)v37[0];
      }
      if ((v38 & 0x80u) == 0) {
        uint64_t v30 = v38;
      }
      else {
        uint64_t v30 = (uint64_t)v37[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    }
    unsigned __int8 v31 = pthread_getspecific(*((void *)v26 + 74));
    if (v31)
    {
      if (*((unsigned char *)v31 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v26);
        if (*((_DWORD *)v26 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v38 < 0) {
      operator delete(v37[0]);
    }
  }
  char v32 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192610A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::MEMBER>(nitro::SExp const&)::$_2::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children[2].is_string_value", 32);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 237, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      int v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        char v9 = __p;
      }
      else {
        char v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 237, 1);
    std::stringbuf::str();
    BOOL v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      int v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        BOOL v15 = v23;
      }
      else {
        BOOL v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  std::string::size_type v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192610DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::BINARYOPERATOR>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 262, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 262, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1926111E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::BINARYOPERATOR>(nitro::SExp const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"str_to_binary_op.count(op)", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 264, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      int v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        char v9 = __p;
      }
      else {
        char v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 264, 1);
    std::stringbuf::str();
    BOOL v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      int v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        BOOL v15 = v23;
      }
      else {
        BOOL v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  std::string::size_type v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19261155C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::UNARYOPERATOR>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 275, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 275, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19261196C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::CALL>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 285, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 285, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192611D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::MAKEOBJECT>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 300, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 300, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192612184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::WHILE>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 309, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 309, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192612590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::FOR>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"5", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 318, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 318, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19261299C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::FOREACH>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"4", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 330, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 330, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192612DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::IF>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"4", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 340, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 340, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1926131B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::INDEXGET>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 350, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 350, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1926135C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::INDEXPUT>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"4", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 359, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 359, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1926139CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::HINT>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 369, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 369, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192613DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::ASSIGN>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 378, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 378, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1926141E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::LIST>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 386, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 386, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1926145F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::DICT>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 393, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 393, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1926149FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t *std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>::~pair(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

void **std::vector<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 1);
        *((void *)v3 - 1) = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
        uint64_t v6 = *((void *)v3 - 2);
        *((void *)v3 - 2) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void nitro::ir::parse<nitro::ir::TUPLE>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 407, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 407, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192614F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::TUPLEGET>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 415, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 415, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19261535C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::TUPLEGET>(nitro::SExp const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children[2].is_value", 25);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 416, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      int v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        char v9 = __p;
      }
      else {
        char v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 416, 1);
    std::stringbuf::str();
    BOOL v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      int v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        BOOL v15 = v23;
      }
      else {
        BOOL v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  std::string::size_type v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1926156D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::RETURN>(nitro::SExp const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 425, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 425, 1);
    std::stringbuf::str();
    std::string v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v22 = v30;
      }
      else {
        std::string::size_type v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192615AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *nitro::ir::operator<<(void *a1, int *a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  int v21 = 0;
  char v23 = 1;
  LOWORD(v22) = 43;
  int v24 = 1;
  char v26 = 1;
  LOWORD(v25) = 45;
  int v27 = 2;
  char v29 = 1;
  LOWORD(v28) = 42;
  int v30 = 3;
  char v32 = 1;
  LOWORD(v31) = 47;
  int v33 = 3;
  char v35 = 2;
  strcpy((char *)v34, "//");
  int v36 = 6;
  char v38 = 2;
  strcpy((char *)v37, "!=");
  int v39 = 5;
  char v41 = 2;
  strcpy((char *)v40, "==");
  int v42 = 7;
  char v44 = 1;
  LOWORD(v43) = 60;
  int v45 = 8;
  char v47 = 1;
  LOWORD(v46) = 62;
  int v48 = 9;
  char v50 = 2;
  strcpy((char *)v49, "<=");
  int v51 = 10;
  char v53 = 2;
  strcpy((char *)v52, ">=");
  int v54 = 11;
  char v56 = 2;
  strcpy((char *)v55, "&&");
  int v57 = 12;
  char v59 = 2;
  strcpy((char *)v58, "||");
  int v60 = 12;
  char v62 = 2;
  strcpy((char *)__p, "IN");
  uint64_t v4 = &v19;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string::size_type v18 = &v19;
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v21, (uint64_t)&v21);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v24, (uint64_t)&v24);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v27, (uint64_t)&v27);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v30, (uint64_t)&v30);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v33, (uint64_t)&v33);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v36, (uint64_t)&v36);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v39, (uint64_t)&v39);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v42, (uint64_t)&v42);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v45, (uint64_t)&v45);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v48, (uint64_t)&v48);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v51, (uint64_t)&v51);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v54, (uint64_t)&v54);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v57, (uint64_t)&v57);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v60, (uint64_t)&v60);
  if (v62 < 0)
  {
    operator delete(__p[0]);
    if ((v59 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v56 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else if ((v59 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v58[0]);
  if ((v56 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v53 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(v55[0]);
  if ((v53 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v50 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(v52[0]);
  if ((v50 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v47 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v49[0]);
  if ((v47 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v44 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v46);
  if ((v44 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v41 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v43);
  if ((v41 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v38 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v40[0]);
  if ((v38 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v35 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v37[0]);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v34[0]);
  if ((v32 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v29 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v31);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_37:
    operator delete(v25);
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
LABEL_36:
  operator delete(v28);
  if (v26 < 0) {
    goto LABEL_37;
  }
LABEL_14:
  if ((v23 & 0x80000000) == 0) {
    goto LABEL_15;
  }
LABEL_38:
  operator delete(v22);
LABEL_15:
  uint64_t v5 = v19;
  int v6 = *a2;
  uint64_t v7 = &v19;
  if (v19)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v6 >= v8) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v4 = v7;
        if (!*v7) {
          goto LABEL_22;
        }
      }
      if (v8 >= v6) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v4 = v7 + 1;
        goto LABEL_22;
      }
    }
    char v9 = v7;
  }
  else
  {
LABEL_22:
    char v9 = operator new(0x40uLL);
    v9[8] = v6;
    *((void *)v9 + 6) = 0;
    *((void *)v9 + 7) = 0;
    *((void *)v9 + 5) = 0;
    *(void *)char v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v7;
    void *v4 = (uint64_t *)v9;
    uint64_t v10 = (uint64_t *)v9;
    if (*v18)
    {
      std::string::size_type v18 = (uint64_t **)*v18;
      uint64_t v10 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v19, v10);
    ++v20;
  }
  uint64_t v13 = *((void *)v9 + 5);
  uint64_t v12 = (char *)(v9 + 10);
  uint64_t v11 = v13;
  int v14 = v12[23];
  if (v14 >= 0) {
    uint64_t v15 = (uint64_t)v12;
  }
  else {
    uint64_t v15 = v11;
  }
  if (v14 >= 0) {
    uint64_t v16 = v12[23];
  }
  else {
    uint64_t v16 = *((void *)v12 + 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v15, v16);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::destroy((uint64_t)&v18, (char *)v19);
  return a1;
}

void sub_1926160F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
}

void sub_19261610C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::destroy((uint64_t)&a9, (char *)a10);
  if (a82 < 0)
  {
    operator delete(a81);
    if ((a80 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a78 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((a80 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a79);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a76 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a74 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a72 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a67 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a69);
  if ((a67 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a60 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a62);
  if ((a60 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a53 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a55);
  if ((a53 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a46 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a48);
  if ((a46 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a39 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete(a41);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a34);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a25 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(a27);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_14:
    if (a18 < 0) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(a20);
  if (a18 < 0)
  {
LABEL_15:
    operator delete(__p);
    _Unwind_Resume(a1);
  }
LABEL_29:
  _Unwind_Resume(a1);
}

uint64_t std::tuple<unsigned long,nitro::variable_type>::~tuple(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1EE39BB18[v2])(&v4, a1 + 8);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void nitro::ir::DEFVAR::~DEFVAR(nitro::ir::DEFVAR *this)
{
  *(void *)this = &unk_1EE3270A8;
  uint64_t v2 = *((unsigned int *)this + 12);
  if (v2 != -1) {
    ((void (*)(char *, char *))off_1EE39BB18[v2])(&v3, (char *)this + 16);
  }
  *((_DWORD *)this + 12) = -1;
}

{
  uint64_t v2;
  char v3;

  *(void *)this = &unk_1EE3270A8;
  uint64_t v2 = *((unsigned int *)this + 12);
  if (v2 != -1) {
    ((void (*)(char *, char *))off_1EE39BB18[v2])(&v3, (char *)this + 16);
  }
  *((_DWORD *)this + 12) = -1;
  MEMORY[0x192FF16B0](this, 0x10B3C40F12CF9BDLL);
}

void nitro::ir::VALUE::~VALUE(nitro::ir::VALUE *this)
{
  *(void *)this = &unk_1EE326FE8;
  std::__tuple_leaf<0ul,nitro::flexible_type,false>::~__tuple_leaf((uint64_t)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE326FE8;
  std::__tuple_leaf<0ul,nitro::flexible_type,false>::~__tuple_leaf((uint64_t)this + 8);

  JUMPOUT(0x192FF16B0);
}

void nitro::ir::SYMBOL::~SYMBOL(nitro::ir::SYMBOL *this)
{
}

void nitro::ir::DEFUN::~DEFUN(nitro::ir::DEFUN *this)
{
  *(void *)this = &unk_1EE326F68;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl((uint64_t)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE326F68;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl((uint64_t)this + 8);

  JUMPOUT(0x192FF16B0);
}

void nitro::ir::DEFMEMBERFUN::~DEFMEMBERFUN(nitro::ir::DEFMEMBERFUN *this)
{
  *(void *)this = &unk_1EE326CA8;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl((uint64_t)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE326CA8;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl((uint64_t)this + 8);

  JUMPOUT(0x192FF16B0);
}

void nitro::ir::DEFCLASS::~DEFCLASS(nitro::ir::DEFCLASS *this)
{
  *(void *)this = &unk_1EE327228;
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    char v3 = (void *)*((void *)this + 8);
    char v4 = (void *)*((void *)this + 7);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 7);
    }
    *((void *)this + 8) = v2;
    operator delete(v4);
  }
  uint64_t v7 = (void *)*((void *)this + 4);
  if (v7)
  {
    int v8 = (void *)*((void *)this + 5);
    char v9 = (void *)*((void *)this + 4);
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        void *v8 = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
        }
      }
      while (v8 != v7);
      char v9 = (void *)*((void *)this + 4);
    }
    *((void *)this + 5) = v7;
    operator delete(v9);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  nitro::ir::DEFCLASS::~DEFCLASS(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::tuple<std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::~tuple(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    char v3 = *(void **)(a1 + 56);
    char v4 = *(void **)(a1 + 48);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v2;
    operator delete(v4);
  }
  uint64_t v7 = *(void **)(a1 + 24);
  if (v7)
  {
    int v8 = *(void **)(a1 + 32);
    char v9 = *(void **)(a1 + 24);
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        void *v8 = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
        }
      }
      while (v8 != v7);
      char v9 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v7;
    operator delete(v9);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void nitro::ir::MEMBER::~MEMBER(nitro::ir::MEMBER *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE3270E8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE3270E8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::tuple<nitro::ir::binary_op_enum,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>::~tuple(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

void nitro::ir::BINARYOPERATOR::~BINARYOPERATOR(nitro::ir::BINARYOPERATOR *this)
{
  *(void *)this = &unk_1EE326D28;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE326D28;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::tuple<std::string,std::unique_ptr<nitro::ir::NODE>>::~tuple(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void nitro::ir::UNARYOPERATOR::~UNARYOPERATOR(nitro::ir::UNARYOPERATOR *this)
{
  *(void *)this = &unk_1EE326CE8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE326CE8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x192FF16B0);
}

void *std::tuple<unsigned long,std::unique_ptr<nitro::ir::MEMBER>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    uint64_t v3 = (void *)a1[3];
    char v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  uint64_t v7 = a1[1];
  a1[1] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  return a1;
}

void nitro::ir::CALL::~CALL(nitro::ir::CALL *this)
{
  *(void *)this = &unk_1EE326DE8;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 4);
    char v4 = (void *)*((void *)this + 3);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v2;
    operator delete(v4);
  }
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars8;

  *(void *)this = &unk_1EE326DE8;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 4);
    char v4 = (void *)*((void *)this + 3);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v2;
    operator delete(v4);
  }
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::tuple<std::string,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    char v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void nitro::ir::MAKEOBJECT::~MAKEOBJECT(nitro::ir::MAKEOBJECT *this)
{
  *(void *)this = &unk_1EE326C68;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 5);
    char v4 = (void *)*((void *)this + 4);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 4);
    }
    *((void *)this + 5) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE326C68;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 5);
    char v4 = (void *)*((void *)this + 4);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 4);
    }
    *((void *)this + 5) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t *std::tuple<std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    uint64_t v3 = (void *)a1[2];
    char v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)a1[1];
    }
    a1[2] = (uint64_t)v2;
    operator delete(v4);
  }
  uint64_t v7 = *a1;
  *a1 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  return a1;
}

void nitro::ir::WHILE::~WHILE(nitro::ir::WHILE *this)
{
  *(void *)this = &unk_1EE327028;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 3);
    char v4 = (void *)*((void *)this + 2);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 2);
    }
    *((void *)this + 3) = v2;
    operator delete(v4);
  }
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars8;

  *(void *)this = &unk_1EE327028;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 3);
    char v4 = (void *)*((void *)this + 2);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 2);
    }
    *((void *)this + 3) = v2;
    operator delete(v4);
  }
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }

  JUMPOUT(0x192FF16B0);
}

void nitro::ir::FOR::~FOR(nitro::ir::FOR *this)
{
  *(void *)this = &unk_1EE326DA8;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 5);
    char v4 = (void *)*((void *)this + 4);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 4);
    }
    *((void *)this + 5) = v2;
    operator delete(v4);
  }
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  }
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
  }
}

{
  uint64_t vars8;

  nitro::ir::FOR::~FOR(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t *std::tuple<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    char v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)a1[3];
    }
    a1[4] = (uint64_t)v2;
    operator delete(v4);
  }
  uint64_t v7 = a1[2];
  a1[2] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  uint64_t v8 = a1[1];
  a1[1] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  }
  uint64_t v9 = *a1;
  *a1 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
  }
  return a1;
}

uint64_t *std::tuple<std::unique_ptr<nitro::ir::NODE>,unsigned long,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    uint64_t v3 = (void *)a1[3];
    char v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)a1[2];
    }
    a1[3] = (uint64_t)v2;
    operator delete(v4);
  }
  uint64_t v7 = *a1;
  *a1 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  return a1;
}

void nitro::ir::FOREACH::~FOREACH(nitro::ir::FOREACH *this)
{
  *(void *)this = &unk_1EE3271A8;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 4);
    char v4 = (void *)*((void *)this + 3);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v2;
    operator delete(v4);
  }
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars8;

  *(void *)this = &unk_1EE3271A8;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 4);
    char v4 = (void *)*((void *)this + 3);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v2;
    operator delete(v4);
  }
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }

  JUMPOUT(0x192FF16B0);
}

void nitro::ir::IF::~IF(nitro::ir::IF *this)
{
  *(void *)this = &unk_1EE326D68;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 6);
    char v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  uint64_t v7 = (void *)*((void *)this + 2);
  if (v7)
  {
    uint64_t v8 = (void *)*((void *)this + 3);
    uint64_t v9 = (void *)*((void *)this + 2);
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        void *v8 = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
        }
      }
      while (v8 != v7);
      uint64_t v9 = (void *)*((void *)this + 2);
    }
    *((void *)this + 3) = v7;
    operator delete(v9);
  }
  uint64_t v12 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
  }
}

{
  uint64_t vars8;

  nitro::ir::IF::~IF(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t *std::tuple<std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    uint64_t v3 = (void *)a1[5];
    char v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)a1[4];
    }
    a1[5] = (uint64_t)v2;
    operator delete(v4);
  }
  uint64_t v7 = (void *)a1[1];
  if (v7)
  {
    uint64_t v8 = (void *)a1[2];
    uint64_t v9 = (void *)a1[1];
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *--v8;
        uint64_t v10 = v11;
        void *v8 = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
        }
      }
      while (v8 != v7);
      uint64_t v9 = (void *)a1[1];
    }
    a1[2] = (uint64_t)v7;
    operator delete(v9);
  }
  uint64_t v12 = *a1;
  *a1 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
  }
  return a1;
}

void nitro::ir::INDEXGET::~INDEXGET(nitro::ir::INDEXGET *this)
{
  *(void *)this = &unk_1EE327268;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE327268;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t *std::tuple<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>::~tuple(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  return a1;
}

void nitro::ir::INDEXPUT::~INDEXPUT(nitro::ir::INDEXPUT *this)
{
  *(void *)this = &unk_1EE3272A8;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE3272A8;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::tuple<nitro::variable_type,std::unique_ptr<nitro::ir::NODE>>::~tuple(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 32);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_1EE39BB18[v3])(&v5, a1);
  }
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

void nitro::ir::HINT::~HINT(nitro::ir::HINT *this)
{
  *(void *)this = &unk_1EE326E68;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = *((unsigned int *)this + 10);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1EE39BB18[v3])(&v4, (char *)this + 8);
  }
  *((_DWORD *)this + 10) = -1;
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;

  *(void *)this = &unk_1EE326E68;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = *((unsigned int *)this + 10);
  if (v3 != -1) {
    ((void (*)(char *, char *))off_1EE39BB18[v3])(&v4, (char *)this + 8);
  }
  *((_DWORD *)this + 10) = -1;
  MEMORY[0x192FF16B0](this, 0x10B3C4072FD431ALL);
}

void nitro::ir::ASSIGN::~ASSIGN(nitro::ir::ASSIGN *this)
{
  *(void *)this = &unk_1EE327068;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE327068;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }

  JUMPOUT(0x192FF16B0);
}

void nitro::ir::LIST::~LIST(nitro::ir::LIST *this)
{
  *(void *)this = &unk_1EE326EA8;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 2);
    char v4 = (void *)*((void *)this + 1);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v2;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE326EA8;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 2);
    char v4 = (void *)*((void *)this + 1);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v2;
    operator delete(v4);
  }

  JUMPOUT(0x192FF16B0);
}

void nitro::ir::DICT::~DICT(nitro::ir::DICT *this)
{
  *(void *)this = &unk_1EE326E28;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 2);
    char v4 = (void *)*((void *)this + 1);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void *)(v3 - 8);
        *(void *)(v3 - 8) = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
        uint64_t v6 = *(void *)(v3 - 16);
        *(void *)(v3 - 16) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE326E28;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 2);
    char v4 = (void *)*((void *)this + 1);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void *)(v3 - 8);
        *(void *)(v3 - 8) = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
        uint64_t v6 = *(void *)(v3 - 16);
        *(void *)(v3 - 16) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v2;
    operator delete(v4);
  }

  JUMPOUT(0x192FF16B0);
}

void nitro::ir::TUPLE::~TUPLE(nitro::ir::TUPLE *this)
{
  *(void *)this = &unk_1EE326FA8;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 2);
    char v4 = (void *)*((void *)this + 1);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v2;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE326FA8;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 2);
    char v4 = (void *)*((void *)this + 1);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v2;
    operator delete(v4);
  }

  JUMPOUT(0x192FF16B0);
}

void nitro::ir::TUPLEGET::~TUPLEGET(nitro::ir::TUPLEGET *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE3272E8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE3272E8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }

  JUMPOUT(0x192FF16B0);
}

void nitro::ir::THIS::~THIS(nitro::ir::THIS *this)
{
}

void nitro::ir::RETURN::~RETURN(nitro::ir::RETURN *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE327128;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE327128;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }

  JUMPOUT(0x192FF16B0);
}

void nitro::ir::BREAK::~BREAK(nitro::ir::BREAK *this)
{
}

void nitro::ir::CONTINUE::~CONTINUE(nitro::ir::CONTINUE *this)
{
}

void nitro::ir::NodeMixin<nitro::ir::DEFVAR>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  nitro::ir::print_element<unsigned long,nitro::variable_type>(a2, (uint64_t)&__p, (uint64_t)v4 + 8);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
}

void sub_192618B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::DEFVAR>::copy(void *a1)
{
  if (a1) {
  nitro::ir::copy_tuple<1ul,unsigned long,nitro::variable_type>::copy((uint64_t)a1 + 8, (uint64_t)v4);
  }
  v2[0] = 0;
  int v3 = -1;
  int v1 = v5;
  if (v5 != -1)
  {
    ((void (*)(char *, char *, unsigned char *))off_1EE39BB88[v5])(&v6, v2, v4);
    int v3 = v1;
    if (v5 != -1) {
      ((void (*)(char *, unsigned char *))off_1EE39BB18[v5])(&v6, v4);
    }
  }
  operator new();
}

void sub_192618CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void nitro::ir::DEFVAR::node_type(char *a1@<X8>)
{
  a1[23] = 6;
  strcpy(a1, "DEFVAR");
}

uint64_t nitro::ir::DEFVAR::node_type_enum(nitro::ir::DEFVAR *this)
{
  return 0;
}

void nitro::ir::NodeMixin<nitro::ir::VALUE>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v10;
  }
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  nitro::ir::print_element<nitro::flexible_type>(a2, v4 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
}

void sub_192618E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::VALUE>::copy(const void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (atomic_ullong *)*((void *)v1 + 1);
  int v3 = v1[16];
  if ((v3 - 2) < 4 || v3 == 9) {
    atomic_fetch_add(v2, 1uLL);
  }
  uint64_t v7 = v2;
  int v5 = v2;
  char v6 = v3;
  char v8 = 0;
  std::__tuple_leaf<0ul,nitro::flexible_type,false>::~__tuple_leaf((uint64_t)&v7);
  operator new();
}

void sub_192618FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tuple_leaf<0ul,nitro::flexible_type,false>::~__tuple_leaf((uint64_t)va);
  _Unwind_Resume(a1);
}

void nitro::ir::VALUE::node_type(char *a1@<X8>)
{
  a1[23] = 5;
  strcpy(a1, "VALUE");
}

uint64_t nitro::ir::VALUE::node_type_enum(nitro::ir::VALUE *this)
{
  return 1;
}

void nitro::ir::NodeMixin<nitro::ir::SYMBOL>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v9;
  }
  char v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(v9.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
}

void sub_1926191A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::SYMBOL>::copy(const void *a1)
{
}

void nitro::ir::SYMBOL::node_type(char *a1@<X8>)
{
  a1[23] = 6;
  strcpy(a1, "SYMBOL");
}

uint64_t nitro::ir::SYMBOL::node_type_enum(nitro::ir::SYMBOL *this)
{
  return 2;
}

void nitro::ir::NodeMixin<nitro::ir::DEFUN>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v10;
  }
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
  nitro::ir::print_tuple<4ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a2, (uint64_t)v4 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
}

void sub_192619428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::DEFUN>::copy(uint64_t *a1)
{
  if (a1) {
  nitro::ir::copy_tuple<5ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(a1 + 1, (uint64_t)&v1);
  }
  operator new();
}

void sub_1926195C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void nitro::ir::DEFUN::node_type(char *a1@<X8>)
{
  a1[23] = 5;
  strcpy(a1, "DEFUN");
}

uint64_t nitro::ir::DEFUN::node_type_enum(nitro::ir::DEFUN *this)
{
  return 3;
}

void nitro::ir::NodeMixin<nitro::ir::DEFMEMBERFUN>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v10;
  }
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
  nitro::ir::print_tuple<4ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a2, (uint64_t)v4 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
}

void sub_192619770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::DEFMEMBERFUN>::copy(uint64_t *a1)
{
  if (a1) {
  nitro::ir::copy_tuple<5ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(a1 + 1, (uint64_t)&v1);
  }
  operator new();
}

void sub_192619908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void nitro::ir::DEFMEMBERFUN::node_type(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "DEFMEMBERFUN");
}

uint64_t nitro::ir::DEFMEMBERFUN::node_type_enum(nitro::ir::DEFMEMBERFUN *this)
{
  return 4;
}

void nitro::ir::NodeMixin<nitro::ir::DEFCLASS>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v13;
  }
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  int v9 = *((char *)v4 + 31);
  if (v9 >= 0) {
    uint64_t v10 = (uint64_t)(v4 + 1);
  }
  else {
    uint64_t v10 = v4[1];
  }
  if (v9 >= 0) {
    uint64_t v11 = *((unsigned __int8 *)v4 + 31);
  }
  else {
    uint64_t v11 = v4[2];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
  nitro::ir::print_tuple<2ul,std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::print(a2, (uint64_t)(v4 + 1));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_20:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
}

void sub_192619AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::DEFCLASS>::copy(void *a1)
{
  if (a1) {
  nitro::ir::copy_tuple<3ul,std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::copy((uint64_t)a1 + 8, (uint64_t)&v1);
  }
  operator new();
}

void sub_192619C00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::tuple<std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::~tuple((uint64_t)va);
  _Unwind_Resume(a1);
}

void nitro::ir::DEFCLASS::node_type(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "DEFCLASS");
}

uint64_t nitro::ir::DEFCLASS::node_type_enum(nitro::ir::DEFCLASS *this)
{
  return 5;
}

void nitro::ir::NodeMixin<nitro::ir::MEMBER>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,unsigned long>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
}

void sub_192619D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::MEMBER>::copy(const void *a1)
{
  if (a1)
  {
    if (!v1) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v1 = MEMORY[8];
    if (!MEMORY[8]) {
LABEL_5:
    }
      operator new();
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 8))(&v2);
  goto LABEL_5;
}

void sub_192619E88(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  _Unwind_Resume(exception_object);
}

void nitro::ir::MEMBER::node_type(char *a1@<X8>)
{
  a1[23] = 6;
  strcpy(a1, "MEMBER");
}

uint64_t nitro::ir::MEMBER::node_type_enum(nitro::ir::MEMBER *this)
{
  return 6;
}

void nitro::ir::NodeMixin<nitro::ir::BINARYOPERATOR>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v10;
  }
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  nitro::ir::print_tuple<3ul,nitro::ir::binary_op_enum,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>::print(a2, (uint64_t)v4 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
}

void sub_19261A020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::BINARYOPERATOR>::copy(const void *a1)
{
  if (a1) {
  else
  }
    uint64_t v1 = 0;
  uint64_t v2 = v1[2];
  if (v2)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 8))(&v4);
    uint64_t v3 = v1[3];
    if (!v3) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v3 = v1[3];
    if (!v3) {
LABEL_8:
    }
      operator new();
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 8))(&v4);
  goto LABEL_8;
}

void sub_19261A1B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  _Unwind_Resume(exception_object);
}

void sub_19261A1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void nitro::ir::BINARYOPERATOR::node_type(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "BINARYOPERATOR");
}

uint64_t nitro::ir::BINARYOPERATOR::node_type_enum(nitro::ir::BINARYOPERATOR *this)
{
  return 7;
}

void nitro::ir::NodeMixin<nitro::ir::UNARYOPERATOR>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  nitro::ir::print_element<std::string,std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t)&__p, (uint64_t)v4 + 8);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
}

void sub_19261A30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::UNARYOPERATOR>::copy(void *a1)
{
  if (a1) {
  nitro::ir::copy_tuple<2ul,std::string,std::unique_ptr<nitro::ir::NODE>>::copy((uint64_t)a1 + 8, (uint64_t)&v1);
  }
  operator new();
}

void sub_19261A418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void nitro::ir::UNARYOPERATOR::node_type(char *a1@<X8>)
{
  a1[23] = 13;
  strcpy(a1, "UNARYOPERATOR");
}

uint64_t nitro::ir::UNARYOPERATOR::node_type_enum(nitro::ir::UNARYOPERATOR *this)
{
  return 8;
}

void nitro::ir::NodeMixin<nitro::ir::CALL>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  nitro::ir::print_element<unsigned long,std::unique_ptr<nitro::ir::MEMBER>,std::vector<std::unique_ptr<nitro::ir::NODE>>>(a2, (uint64_t)&__p, (uint64_t)v4 + 8);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
}

void sub_19261A558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::CALL>::copy(void *a1)
{
  if (a1) {
  nitro::ir::copy_tuple<2ul,unsigned long,std::unique_ptr<nitro::ir::MEMBER>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy((uint64_t)a1 + 8, (uint64_t)&v1);
  }
  operator new();
}

void sub_19261A680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::tuple<unsigned long,std::unique_ptr<nitro::ir::MEMBER>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ir::CALL::node_type(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "CALL");
}

uint64_t nitro::ir::CALL::node_type_enum(nitro::ir::CALL *this)
{
  return 9;
}

void nitro::ir::NodeMixin<nitro::ir::MAKEOBJECT>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v13;
  }
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  int v9 = *((char *)v4 + 31);
  if (v9 >= 0) {
    uint64_t v10 = (uint64_t)(v4 + 1);
  }
  else {
    uint64_t v10 = v4[1];
  }
  if (v9 >= 0) {
    uint64_t v11 = *((unsigned __int8 *)v4 + 31);
  }
  else {
    uint64_t v11 = v4[2];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
  nitro::ir::print_tuple<1ul,std::string,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a2, (uint64_t)(v4 + 1));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_20:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
}

void sub_19261A84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::MAKEOBJECT>::copy(void *a1)
{
  if (a1) {
  nitro::ir::copy_tuple<2ul,std::string,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy((uint64_t)a1 + 8, (uint64_t)&v1);
  }
  operator new();
}

void sub_19261A968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void nitro::ir::MAKEOBJECT::node_type(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "MAKEOBJECT");
}

uint64_t nitro::ir::MAKEOBJECT::node_type_enum(nitro::ir::MAKEOBJECT *this)
{
  return 10;
}

void nitro::ir::NodeMixin<nitro::ir::WHILE>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
}

void sub_19261AAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::WHILE>::copy(const void *a1)
{
  if (a1)
  {
    uint64_t v2 = v1[1];
    if (!v2) {
      goto LABEL_5;
    }
  }
  else
  {
    long long v1 = 0;
    uint64_t v2 = MEMORY[8];
    if (!MEMORY[8])
    {
LABEL_5:
      nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>(v1 + 2, &v3);
      operator new();
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 8))(&v3);
  goto LABEL_5;
}

void sub_19261AC18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::tuple<std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19261AC2C(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  _Unwind_Resume(exception_object);
}

void nitro::ir::WHILE::node_type(char *a1@<X8>)
{
  a1[23] = 5;
  strcpy(a1, "WHILE");
}

uint64_t nitro::ir::WHILE::node_type_enum(nitro::ir::WHILE *this)
{
  return 11;
}

void nitro::ir::NodeMixin<nitro::ir::FOR>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v10;
  }
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  nitro::ir::print_tuple<4ul,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a2, v4 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
}

void sub_19261ADC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::FOR>::copy(const void *a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)v2;
    if (!*(void *)v2) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v2 = 8;
    uint64_t v1 = MEMORY[8];
    if (!MEMORY[8])
    {
LABEL_5:
      nitro::ir::copy_tuple<3ul,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy((void *)v2, &v3);
      operator new();
    }
  }
  (*(void (**)(__n128 *__return_ptr))(*(void *)v1 + 8))(&v3);
  goto LABEL_5;
}

void sub_19261AF44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::tuple<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19261AF58(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  _Unwind_Resume(exception_object);
}

void nitro::ir::FOR::node_type(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 23) = 3;
  *(_DWORD *)a1 = 5394246;
}

uint64_t nitro::ir::FOR::node_type_enum(nitro::ir::FOR *this)
{
  return 12;
}

void nitro::ir::NodeMixin<nitro::ir::FOREACH>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,unsigned long,std::vector<std::unique_ptr<nitro::ir::NODE>>>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
}

void sub_19261B08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::FOREACH>::copy(const void *a1)
{
  if (a1)
  {
    uint64_t v2 = v1[1];
    if (!v2) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v1 = 0;
    uint64_t v2 = MEMORY[8];
    if (!MEMORY[8])
    {
LABEL_5:
      nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>(v1 + 3, &v3);
      operator new();
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 8))(&v3);
  goto LABEL_5;
}

void sub_19261B204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19261B218(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  _Unwind_Resume(exception_object);
}

void nitro::ir::FOREACH::node_type(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "FOREACH");
}

uint64_t nitro::ir::FOREACH::node_type_enum(nitro::ir::FOREACH *this)
{
  return 13;
}

void nitro::ir::NodeMixin<nitro::ir::IF>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
}

void sub_19261B35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::IF>::copy(const void *a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)v2;
    if (!*(void *)v2) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v2 = 8;
    uint64_t v1 = MEMORY[8];
    if (!MEMORY[8])
    {
LABEL_5:
      nitro::ir::copy_tuple<2ul,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(v2, (uint64_t)&v3);
      operator new();
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 8))(&v3);
  goto LABEL_5;
}

void sub_19261B4E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::tuple<std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19261B4F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  _Unwind_Resume(exception_object);
}

void nitro::ir::IF::node_type(char *a1@<X8>)
{
  a1[23] = 2;
  strcpy(a1, "IF");
}

uint64_t nitro::ir::IF::node_type_enum(nitro::ir::IF *this)
{
  return 14;
}

void nitro::ir::NodeMixin<nitro::ir::INDEXGET>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
}

void sub_19261B62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::INDEXGET>::copy(const void *a1)
{
  if (a1)
  {
    uint64_t v2 = v1[1];
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v1 = 0;
    uint64_t v2 = MEMORY[8];
    if (MEMORY[8])
    {
LABEL_3:
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 8))(&v4);
      uint64_t v3 = v1[2];
      if (!v3) {
        goto LABEL_7;
      }
      goto LABEL_4;
    }
  }
  uint64_t v3 = v1[2];
  if (!v3) {
LABEL_7:
  }
    operator new();
LABEL_4:
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 8))(&v4);
  goto LABEL_7;
}

void sub_19261B7B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  _Unwind_Resume(exception_object);
}

void sub_19261B7D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>::~pair((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ir::INDEXGET::node_type(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "INDEXGET");
}

uint64_t nitro::ir::INDEXGET::node_type_enum(nitro::ir::INDEXGET *this)
{
  return 15;
}

void nitro::ir::NodeMixin<nitro::ir::INDEXPUT>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v10;
  }
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  nitro::ir::print_tuple<3ul,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>::print(a2, v4 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
}

void sub_19261B964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::INDEXPUT>::copy(uint64_t *a1)
{
  if (a1) {
  nitro::ir::copy_tuple<3ul,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>::copy(a1 + 1, &v1);
  }
  operator new();
}

void sub_19261BA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void nitro::ir::INDEXPUT::node_type(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "INDEXPUT");
}

uint64_t nitro::ir::INDEXPUT::node_type_enum(nitro::ir::INDEXPUT *this)
{
  return 16;
}

void nitro::ir::NodeMixin<nitro::ir::HINT>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  nitro::ir::print_element<nitro::variable_type,std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t)&__p, (uint64_t)v4 + 8);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
}

void sub_19261BBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::HINT>::copy(void *a1)
{
  if (a1) {
  nitro::ir::copy_tuple<2ul,nitro::variable_type,std::unique_ptr<nitro::ir::NODE>>::copy((uint64_t)a1 + 8, (uint64_t)v1);
  }
  operator new();
}

void sub_19261BD34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::tuple<nitro::variable_type,std::unique_ptr<nitro::ir::NODE>>::~tuple((uint64_t)va);
  _Unwind_Resume(a1);
}

void nitro::ir::HINT::node_type(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "HINT");
}

uint64_t nitro::ir::HINT::node_type_enum(nitro::ir::HINT *this)
{
  return 17;
}

void nitro::ir::NodeMixin<nitro::ir::ASSIGN>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
}

void sub_19261BE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::ASSIGN>::copy(const void *a1)
{
  if (a1)
  {
    uint64_t v2 = v1[1];
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v1 = 0;
    uint64_t v2 = MEMORY[8];
    if (MEMORY[8])
    {
LABEL_3:
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 8))(&v4);
      uint64_t v3 = v1[2];
      if (!v3) {
        goto LABEL_7;
      }
      goto LABEL_4;
    }
  }
  uint64_t v3 = v1[2];
  if (!v3) {
LABEL_7:
  }
    operator new();
LABEL_4:
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 8))(&v4);
  goto LABEL_7;
}

void sub_19261BFF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  _Unwind_Resume(exception_object);
}

void sub_19261C00C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>::~pair((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ir::ASSIGN::node_type(char *a1@<X8>)
{
  a1[23] = 6;
  strcpy(a1, "ASSIGN");
}

uint64_t nitro::ir::ASSIGN::node_type_enum(nitro::ir::ASSIGN *this)
{
  return 18;
}

void nitro::ir::NodeMixin<nitro::ir::LIST>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v10;
  }
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  nitro::ir::print_tuple<1ul,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a2, v4 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
}

void sub_19261C1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::LIST>::copy(void *a1)
{
  if (a1) {
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>(a1 + 1, &v1);
  }
  operator new();
}

void sub_19261C2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void nitro::ir::LIST::node_type(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "LIST");
}

uint64_t nitro::ir::LIST::node_type_enum(nitro::ir::LIST *this)
{
  return 19;
}

void nitro::ir::NodeMixin<nitro::ir::DICT>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v10;
  }
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  nitro::ir::print_element<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>(a2, v4 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
}

void sub_19261C458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::DICT>::copy(void *a1)
{
  if (a1) {
  nitro::ir::copy_element<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>(a1 + 1, &v1);
  }
  operator new();
}

void sub_19261C570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void nitro::ir::DICT::node_type(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "DICT");
}

uint64_t nitro::ir::DICT::node_type_enum(nitro::ir::DICT *this)
{
  return 20;
}

void nitro::ir::NodeMixin<nitro::ir::TUPLE>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v10;
  }
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  nitro::ir::print_tuple<1ul,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a2, v4 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
}

void sub_19261C6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::TUPLE>::copy(void *a1)
{
  if (a1) {
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>(a1 + 1, &v1);
  }
  operator new();
}

void sub_19261C814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void nitro::ir::TUPLE::node_type(char *a1@<X8>)
{
  a1[23] = 5;
  strcpy(a1, "TUPLE");
}

uint64_t nitro::ir::TUPLE::node_type_enum(nitro::ir::TUPLE *this)
{
  return 21;
}

void nitro::ir::NodeMixin<nitro::ir::TUPLEGET>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,unsigned long>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
}

void sub_19261C94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::TUPLEGET>::copy(const void *a1)
{
  if (a1)
  {
    if (!v1) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v1 = MEMORY[8];
    if (!MEMORY[8]) {
LABEL_5:
    }
      operator new();
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 8))(&v2);
  goto LABEL_5;
}

void sub_19261CA98(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  _Unwind_Resume(exception_object);
}

void nitro::ir::TUPLEGET::node_type(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "TUPLEGET");
}

uint64_t nitro::ir::TUPLEGET::node_type_enum(nitro::ir::TUPLEGET *this)
{
  return 22;
}

void nitro::ir::NodeMixin<nitro::ir::THIS>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v9;
  }
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(v9.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
}

void sub_19261CC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::THIS>::copy(const void *a1)
{
  if (a1) {
  operator new();
  }
}

void nitro::ir::THIS::node_type(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "THIS");
}

uint64_t nitro::ir::THIS::node_type_enum(nitro::ir::THIS *this)
{
  return 23;
}

void nitro::ir::NodeMixin<nitro::ir::RETURN>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
}

void sub_19261CE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::RETURN>::copy(const void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 8))(&v2);
  }
  operator new();
}

void sub_19261CF50(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  _Unwind_Resume(exception_object);
}

void nitro::ir::RETURN::node_type(char *a1@<X8>)
{
  a1[23] = 6;
  strcpy(a1, "RETURN");
}

uint64_t nitro::ir::RETURN::node_type_enum(nitro::ir::RETURN *this)
{
  return 24;
}

void nitro::ir::NodeMixin<nitro::ir::BREAK>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v9;
  }
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(v9.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
}

void sub_19261D0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::BREAK>::copy(const void *a1)
{
  if (a1) {
  operator new();
  }
}

void nitro::ir::BREAK::node_type(char *a1@<X8>)
{
  a1[23] = 5;
  strcpy(a1, "BREAK");
}

uint64_t nitro::ir::BREAK::node_type_enum(nitro::ir::BREAK *this)
{
  return 25;
}

void nitro::ir::NodeMixin<nitro::ir::CONTINUE>::print(const void *a1, void *a2)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 16))(&v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v9;
  }
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(v9.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
}

void sub_19261D32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::NodeMixin<nitro::ir::CONTINUE>::copy(const void *a1)
{
  if (a1) {
  operator new();
  }
}

void nitro::ir::CONTINUE::node_type(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "CONTINUE");
}

uint64_t nitro::ir::CONTINUE::node_type_enum(nitro::ir::CONTINUE *this)
{
  return 26;
}

void **std::vector<nitro::variable_type>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        int v5 = v3 - 40;
        uint64_t v6 = *((unsigned int *)v3 - 2);
        if (v6 != -1) {
          ((void (*)(char *, char *))off_1EE39BB18[v6])(&v8, v3 - 40);
        }
        *((_DWORD *)v3 - 2) = -1;
        v3 -= 40;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v3 - 32);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__tuple_leaf<0ul,nitro::flexible_type,false>::~__tuple_leaf(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 8))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            void v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          atomic_ullong v8 = v7[1];
          if (!v8) {
            goto LABEL_27;
          }
          uint64_t v9 = v7[2];
          std::string v10 = (void *)v7[1];
          if (v9 != v8)
          {
            do
            {
              v9 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v7 + 3), v9);
            }
            while (v9 != v8);
            std::string v10 = (void *)v7[1];
          }
          void v7[2] = v8;
          goto LABEL_26;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          atomic_ullong v11 = v7[1];
          if (v11)
          {
            uint64_t v12 = v7[2];
            std::string v13 = (void *)v7[1];
            if (v12 != v11)
            {
              do
                uint64_t v12 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v12 - 32);
              while (v12 != v11);
              std::string v13 = (void *)v7[1];
            }
            void v7[2] = v11;
            std::string v10 = v13;
LABEL_26:
            operator delete(v10);
          }
LABEL_27:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v15 = (void *)v14[7];
          if (v15)
          {
            v14[8] = (atomic_ullong)v15;
            operator delete(v15);
          }
          uint64_t v16 = (void *)v14[4];
          if (v16)
          {
            v14[5] = (atomic_ullong)v16;
            operator delete(v16);
          }
          uint64_t v17 = (std::__shared_weak_count *)v14[3];
          if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          atomic_ullong *volatile v3 = v14;
          uint64_t v4 = 0x10B0C4002311774;
LABEL_38:
          MEMORY[0x192FF16B0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  return a1;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl(uint64_t a1)
{
  atomic_ullong *volatile v2 = *(void **)(a1 + 96);
  if (v2)
  {
    atomic_ullong *volatile v3 = *(void **)(a1 + 104);
    uint64_t v4 = *(void **)(a1 + 96);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 96);
    }
    *(void *)(a1 + 104) = v2;
    operator delete(v4);
  }
  atomic_ullong *volatile v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(void *)(a1 + 80) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 64);
  if (v8 != -1) {
    ((void (*)(char *, uint64_t))off_1EE39BB18[v8])(&v15, a1 + 32);
  }
  *(_DWORD *)(a1 + 64) = -1;
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    atomic_ullong v11 = *(void **)(a1 + 8);
    if (v10 != v9)
    {
      do
      {
        uint64_t v12 = v10 - 40;
        uint64_t v13 = *(unsigned int *)(v10 - 8);
        if (v13 != -1) {
          ((void (*)(char *, uint64_t))off_1EE39BB18[v13])(&v16, v10 - 40);
        }
        *(_DWORD *)(v10 - 8) = -1;
        v10 -= 40;
      }
      while (v12 != v9);
      atomic_ullong v11 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v9;
    operator delete(v11);
  }
  return a1;
}

uint64_t std::__tuple_leaf<2ul,nitro::variable_type,false>::~__tuple_leaf(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1EE39BB18[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

void **std::__tuple_leaf<1ul,std::vector<nitro::variable_type>,false>::~__tuple_leaf(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    atomic_ullong *volatile v3 = (char *)a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 40;
        uint64_t v6 = *((unsigned int *)v3 - 2);
        if (v6 != -1) {
          ((void (*)(char *, char *))off_1EE39BB18[v6])(&v8, v3 - 40);
        }
        *((_DWORD *)v3 - 2) = -1;
        v3 -= 40;
      }
      while (v5 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>(a1, a2, &v15, &v14, a3);
  atomic_ullong *volatile v7 = (char *)*v6;
  if (!*v6)
  {
    char v8 = v6;
    atomic_ullong *volatile v7 = (char *)operator new(0x40uLL);
    uint64_t v9 = (std::string *)(v7 + 32);
    if (*(char *)(a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
      *((void *)v7 + 6) = *(void *)(a4 + 16);
    }
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a4 + 24);
    uint64_t v10 = v15;
    *(void *)atomic_ullong *volatile v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v10;
    uint64_t *v8 = (uint64_t)v7;
    atomic_ullong v11 = (uint64_t *)**a1;
    uint64_t v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      uint64_t v12 = (uint64_t *)*v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_19261DADC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>(a1, a2, &v15, &v14, a3);
  atomic_ullong *volatile v7 = (void *)*v6;
  if (!*v6)
  {
    char v8 = v6;
    atomic_ullong *volatile v7 = operator new(0x38uLL);
    uint64_t v9 = (std::string *)(v7 + 4);
    if (*(char *)(a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
      v7[6] = *(void *)(a4 + 16);
    }
    uint64_t v10 = v15;
    void *v7 = 0;
    v7[1] = 0;
    void v7[2] = v10;
    uint64_t *v8 = (uint64_t)v7;
    atomic_ullong v11 = (uint64_t *)**a1;
    uint64_t v12 = v7;
    if (v11)
    {
      *a1 = v11;
      uint64_t v12 = (uint64_t *)*v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_19261DC24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void nitro::flexible_type::flexible_type<std::string>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  nitro::flexible_type::operator=<std::string>(a1);
}

void sub_19261DC68(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 8))
  {
    case 2:
      if (nitro::flexible_type::flexible_type<std::string>((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_9;
    case 3:
      if (nitro::flexible_type::flexible_type<std::string>((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_9;
    case 4:
      if (nitro::flexible_type::flexible_type<std::string>((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_9;
    case 5:
      if ((nitro::flexible_type::flexible_type<std::string>((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_9;
      }
      break;
    case 9:
      if (nitro::flexible_type::flexible_type<std::string>((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_9:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void nitro::flexible_type::operator=<std::string>(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 8))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_40;
      }
      atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_39;
      }
      if (*((char *)v2 + 31) < 0) {
        operator delete((void *)v2[1]);
      }
      atomic_ullong *volatile v3 = v2;
      uint64_t v4 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_40;
      }
      atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_39;
      }
      uint64_t v10 = (void *)v9[1];
      if (v10)
      {
        v9[2] = (atomic_ullong)v10;
        operator delete(v10);
      }
      atomic_ullong *volatile v3 = v9;
      uint64_t v4 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_40;
      }
      atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_39;
      }
      atomic_ullong v6 = v5[1];
      if (!v6) {
        goto LABEL_27;
      }
      uint64_t v7 = v5[2];
      char v8 = (void *)v5[1];
      if (v7 != v6)
      {
        do
        {
          v7 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v5 + 3), v7);
        }
        while (v7 != v6);
        char v8 = (void *)v5[1];
      }
      void v5[2] = v6;
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_40;
      }
      atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_39;
      }
      atomic_ullong v11 = v5[1];
      if (!v11) {
        goto LABEL_27;
      }
      uint64_t v12 = v5[2];
      uint64_t v13 = (void *)v5[1];
      if (v12 != v11)
      {
        do
          uint64_t v12 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v12 - 32);
        while (v12 != v11);
        uint64_t v13 = (void *)v5[1];
      }
      void v5[2] = v11;
      char v8 = v13;
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_40;
      }
      atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)a1;
      if (!*(void *)a1) {
        goto LABEL_39;
      }
      char v15 = (void *)v14[7];
      if (v15)
      {
        v14[8] = (atomic_ullong)v15;
        operator delete(v15);
      }
      char v16 = (void *)v14[4];
      if (v16)
      {
        v14[5] = (atomic_ullong)v16;
        operator delete(v16);
      }
      uint64_t v17 = (std::__shared_weak_count *)v14[3];
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      atomic_ullong *volatile v3 = v14;
      uint64_t v4 = 0x10B0C4002311774;
      goto LABEL_38;
    default:
      goto LABEL_40;
  }
  operator delete(v8);
LABEL_27:
  atomic_ullong *volatile v3 = v5;
  uint64_t v4 = 0x1020C405E66F15BLL;
LABEL_38:
  MEMORY[0x192FF16B0](v3, v4);
LABEL_39:
  *(void *)a1 = 0;
LABEL_40:
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 2;
  operator new();
}

void sub_19261E300(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

void nitro::ir::parse_sequence<nitro::ir::NODE>(nitro::SExp const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  atomic_ullong *volatile v2 = (void *)std::ostream::operator<<();
  atomic_ullong *volatile v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!sexp.is_value", 14);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  atomic_ullong *volatile v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    atomic_ullong v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    char v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      atomic_ullong *volatile v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  std::vector<std::unique_ptr<nitro::ir::NODE>> nitro::ir::parse_sequence<nitro::ir::NODE>(nitro::SExp const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19261E658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<nitro::ir::NODE>> nitro::ir::parse_sequence<nitro::ir::NODE>(nitro::SExp const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    atomic_ullong *volatile v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      atomic_ullong *volatile v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    atomic_ullong v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19261E7E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19261E7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19261E7ECLL);
}

void *std::vector<std::unique_ptr<nitro::ir::NODE>>::__push_back_slow_path<std::unique_ptr<nitro::ir::NODE>>(void *a1, uint64_t *a2)
{
  uint64_t v3 = a1[1] - *a1;
  uint64_t v4 = v3 >> 3;
  unint64_t v5 = (v3 >> 3) + 1;
  if (v5 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v5) {
    unint64_t v5 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    atomic_ullong *volatile v9 = (char *)operator new(8 * v8);
  }
  else
  {
    atomic_ullong *volatile v9 = 0;
  }
  unsigned __int8 v10 = &v9[8 * v4];
  uint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)unsigned __int8 v10 = v12;
  unsigned __int8 v13 = v10 + 8;
  uint64_t v14 = (char *)*a1;
  std::locale v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15) {
      return v13;
    }
    goto LABEL_26;
  }
  unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
    goto LABEL_34;
  }
  uint64_t v17 = (v16 >> 3) + 1;
  uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  uint64_t v19 = &v15[-v18];
  uint64_t v20 = v15 - 16;
  int v21 = &v9[8 * v4 - 16];
  uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *((_OWORD *)v20 - 1);
    long long v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)uint64_t v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)int v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  std::locale v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      uint64_t v25 = *((void *)v15 - 1);
      v15 -= 8;
      *(void *)std::locale v15 = 0;
      *((void *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  char v26 = (char *)*a1;
  std::locale v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      uint64_t v28 = *((void *)v15 - 1);
      v15 -= 8;
      uint64_t v27 = v28;
      *(void *)std::locale v15 = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v27 + 40))(v27);
      }
    }
    while (v15 != v26);
    std::locale v15 = v26;
  }
  if (v15) {
LABEL_26:
  }
    operator delete(v15);
  return v13;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4EEEEJmNS_6vectorIN5nitro13variable_typeENS_9allocatorIS5_EEEES5_NS3_ImNS6_ImEEEENS3_INS_10unique_ptrINS4_2ir4NODEENS_14default_deleteISD_EEEENS6_ISG_EEEEEEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4EEJmS8_S5_SA_SI_EJEJEJRmRS8_RS5_RSA_SI_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSQ_IJDpT2_EEEDpOT3_(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = *a2;
  std::vector<nitro::variable_type>::vector((void *)(a1 + 8), a3);
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  uint64_t v10 = *(unsigned int *)(a4 + 32);
  if (v10 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1EE39BB50[v10])(v16, a1 + 32, a4);
    *(_DWORD *)(a1 + 64) = v10;
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v11 = *(const void **)a5;
  int64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12)
  {
    if (v12 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unsigned __int8 v13 = (char *)operator new(v12);
    *(void *)(a1 + 72) = v13;
    *(void *)(a1 + 80) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 88) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 80) = v14;
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)a6;
  *(void *)(a1 + 112) = *(void *)(a6 + 16);
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  return a1;
}

void sub_19261EAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v17 = *(unsigned int *)(v13 + 64);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_1EE39BB18[v17])(&a13, v15);
  }
  *(_DWORD *)(v13 + 64) = -1;
  std::__tuple_leaf<1ul,std::vector<nitro::variable_type>,false>::~__tuple_leaf(v14);
  _Unwind_Resume(a1);
}

void *std::vector<nitro::variable_type>::vector(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 3);
    if (v7 >= 0x666666666666667) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[40 * v7];
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nitro::variable_type>,nitro::variable_type*,nitro::variable_type*,nitro::variable_type*>(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_19261EC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  v13[1] = v14;
  unint64_t v16 = (char *)*v13;
  if (*v13)
  {
    uint64_t v17 = (char *)v13[1];
    uint64_t v18 = *v13;
    if (v17 != v16)
    {
      do
      {
        uint64_t v19 = v17 - 40;
        uint64_t v20 = *((unsigned int *)v17 - 2);
        if (v20 != -1) {
          ((void (*)(char *, char *))off_1EE39BB18[v20])(&a13, v17 - 40);
        }
        *((_DWORD *)v17 - 2) = -1;
        v17 -= 40;
      }
      while (v19 != v16);
      uint64_t v18 = *v13;
    }
    v13[1] = v16;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ir::parse_sequence<nitro::ir::DEFVAR>(nitro::SExp const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  atomic_ullong *volatile v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!sexp.is_value", 14);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    unint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      atomic_ullong *volatile v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  std::vector<std::unique_ptr<nitro::ir::DEFVAR>> nitro::ir::parse_sequence<nitro::ir::DEFVAR>(nitro::SExp const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19261EF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<nitro::ir::DEFVAR>> nitro::ir::parse_sequence<nitro::ir::DEFVAR>(nitro::SExp const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    atomic_ullong *volatile v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      uint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    int64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19261F0AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19261F0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19261F0B8);
}

void nitro::ir::parse_sequence<nitro::ir::DEFMEMBERFUN>(nitro::SExp const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  atomic_ullong *volatile v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!sexp.is_value", 14);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    unint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      atomic_ullong *volatile v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>> nitro::ir::parse_sequence<nitro::ir::DEFMEMBERFUN>(nitro::SExp const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19261F368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>> nitro::ir::parse_sequence<nitro::ir::DEFMEMBERFUN>(nitro::SExp const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    atomic_ullong *volatile v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      uint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    int64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19261F4F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19261F504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19261F4FCLL);
}

uint64_t **std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unint64_t v7 = a1 + 1;
  int64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      unsigned __int8 v10 = a2;
    }
    else {
      unsigned __int8 v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v6;
        uint64_t v14 = (const void *)v6[4];
        int64_t v12 = v6 + 4;
        unsigned __int8 v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        int64_t v6 = *v11;
        unint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      int64_t v6 = v11[1];
      if (!v6)
      {
        unint64_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v11 = a1 + 1;
LABEL_27:
    long long v23 = (char *)operator new(0x40uLL);
    long long v24 = (std::string *)(v23 + 32);
    uint64_t v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      *((void *)v23 + 6) = *((void *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    *((_DWORD *)v23 + 14) = 0;
    *(void *)long long v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v11;
    void *v7 = (uint64_t *)v23;
    uint64_t v27 = (uint64_t *)**a1;
    uint64_t v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      uint64_t v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_19261F6AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

_OWORD *std::vector<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>::__push_back_slow_path<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>(void *a1, long long *a2)
{
  uint64_t v3 = a1[1] - *a1;
  unint64_t v4 = (v3 >> 4) + 1;
  if (v4 >> 60) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = a1[2] - *a1;
  if (v5 >> 3 > v4) {
    unint64_t v4 = v5 >> 3;
  }
  BOOL v17 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  if (!v17) {
    unint64_t v6 = v4;
  }
  if (v6 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v8 = 16 * v6;
  size_t v9 = (char *)operator new(16 * v6);
  unsigned __int8 v10 = &v9[16 * (v3 >> 4)];
  uint64_t v11 = &v9[v8];
  long long v12 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  *(_OWORD *)unsigned __int8 v10 = v12;
  unsigned __int8 v13 = v10 + 16;
  uint64_t v14 = (char *)*a1;
  int v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15) {
      return v13;
    }
    goto LABEL_28;
  }
  unint64_t v16 = (unint64_t)&v15[-*a1 - 16];
  if (v16 < 0x90) {
    goto LABEL_17;
  }
  BOOL v17 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0) - 16] >= v10 || &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] >= v15;
  if (!v17) {
    goto LABEL_17;
  }
  uint64_t v18 = (v16 >> 4) + 1;
  uint64_t v19 = 16 * (v18 & 0x1FFFFFFFFFFFFFFELL);
  BOOL v20 = &v10[-v19];
  int v21 = &v15[-v19];
  BOOL v22 = (double *)(v10 - 32);
  long long v23 = (const double *)(v15 - 32);
  uint64_t v24 = v18 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    float64x2x2_t v31 = vld2q_f64(v23);
    *(_OWORD *)long long v23 = 0uLL;
    *((_OWORD *)v23 + 1) = 0uLL;
    v23 -= 4;
    vst2q_f64(v22, v31);
    v22 -= 4;
    v24 -= 2;
  }
  while (v24);
  unsigned __int8 v10 = v20;
  int v15 = v21;
  if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_17:
    BOOL v20 = v10;
    do
    {
      uint64_t v25 = *((void *)v15 - 2);
      v15 -= 16;
      *(void *)int v15 = 0;
      *((void *)v20 - 2) = v25;
      v20 -= 16;
      uint64_t v26 = *((void *)v15 + 1);
      *((void *)v15 + 1) = 0;
      *((void *)v20 + 1) = v26;
    }
    while (v15 != v14);
  }
  uint64_t v27 = (char *)*a1;
  int v15 = (char *)a1[1];
  *a1 = v20;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v27)
  {
    do
    {
      uint64_t v28 = *((void *)v15 - 1);
      *((void *)v15 - 1) = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v28 + 40))(v28);
      }
      uint64_t v29 = *((void *)v15 - 2);
      *((void *)v15 - 2) = 0;
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 40))(v29);
      }
      v15 -= 16;
    }
    while (v15 != v27);
    int v15 = v27;
  }
  if (v15) {
LABEL_28:
  }
    operator delete(v15);
  return v13;
}

char *std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(void **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  unint64_t v6 = std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__find_equal<nitro::ir::binary_op_enum>(a1, a2, &v15, &v14, a3);
  unint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    unint64_t v7 = (char *)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *(_DWORD *)a4;
    size_t v9 = (std::string *)(v7 + 40);
    if (*(char *)(a4 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a4 + 8), *(void *)(a4 + 16));
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a4 + 8);
      *((void *)v7 + 7) = *(void *)(a4 + 24);
    }
    unsigned __int8 v10 = v15;
    *(void *)unint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v10;
    uint64_t *v8 = (uint64_t)v7;
    uint64_t v11 = (void *)**a1;
    long long v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      long long v12 = (uint64_t *)*v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (void *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_19261F9A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__find_equal<nitro::ir::binary_op_enum>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      unsigned __int8 v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      size_t v9 = (uint64_t *)*a2;
      do
      {
        unsigned __int8 v10 = v9;
        size_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v14 = a2;
      do
      {
        unsigned __int8 v10 = (uint64_t *)v14[2];
        BOOL v15 = *v10 == (void)v14;
        uint64_t v14 = v10;
      }
      while (v15);
    }
    int v16 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v19 = (uint64_t *)v18;
          int v20 = *(_DWORD *)(v18 + 32);
          if (v16 >= v20) {
            break;
          }
          uint64_t v18 = *v19;
          uint64_t v5 = v19;
          if (!*v19) {
            goto LABEL_25;
          }
        }
        if (v20 >= v16) {
          break;
        }
        uint64_t v5 = v19 + 1;
        uint64_t v18 = v19[1];
      }
      while (v18);
    }
    else
    {
      uint64_t v19 = a1 + 1;
    }
LABEL_25:
    *a3 = v19;
    return v5;
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    uint64_t v11 = a2[1];
    if (v11)
    {
      long long v12 = (uint64_t *)a2[1];
      do
      {
        unsigned __int8 v13 = v12;
        long long v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      int v21 = a2;
      do
      {
        unsigned __int8 v13 = (uint64_t *)v21[2];
        BOOL v15 = *v13 == (void)v21;
        int v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 8))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      uint64_t v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            long long v23 = (uint64_t *)v22;
            int v24 = *(_DWORD *)(v22 + 32);
            if (v6 >= v24) {
              break;
            }
            uint64_t v22 = *v23;
            uint64_t v5 = v23;
            if (!*v23) {
              goto LABEL_41;
            }
          }
          if (v24 >= v6) {
            break;
          }
          uint64_t v5 = v23 + 1;
          uint64_t v22 = v23[1];
        }
        while (v22);
      }
      else
      {
        long long v23 = a1 + 1;
      }
LABEL_41:
      *a3 = v23;
      return v5;
    }
  }
}

void std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

void *nitro::ir::print_element<unsigned long,nitro::variable_type>(void *a1, uint64_t a2, uint64_t a3)
{
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  unsigned __int8 v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  nitro::operator<<(a1, (int *)(a3 + 8));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  __n128 result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

uint64_t nitro::ir::copy_tuple<1ul,unsigned long,nitro::variable_type>::copy@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v7[0] = 0;
  int v8 = -1;
  uint64_t v3 = *(unsigned int *)(result + 40);
  if (v3 == -1)
  {
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 32) = -1;
  }
  else
  {
    ((void (*)(char *, unsigned char *, uint64_t))off_1EE39BB50[v3])(&v9, v7, result + 8);
    int v8 = v3;
    v5[0] = 0;
    int v6 = -1;
    unint64_t v4 = off_1EE39BB88[v3];
    ((void (*)(char *, unsigned char *, unsigned char *))v4)(&v9, v5, v7);
    int v6 = v3;
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + 32) = -1;
    __n128 result = ((uint64_t (*)(char *, uint64_t, unsigned char *))v4)(&v9, a2, v5);
    *(_DWORD *)(a2 + 32) = v3;
    if (v6 != -1) {
      __n128 result = ((uint64_t (*)(char *, unsigned char *))off_1EE39BB18[v6])(&v9, v5);
    }
  }
  if (v8 != -1) {
    return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE39BB18[v8])(v5, v7);
  }
  return result;
}

void sub_19261FE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  if (a19 != -1) {
    ((void (*)(char *, char *))off_1EE39BB18[a19])(&a10, &a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::tuple<nitro::variable_type>::~tuple(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1EE39BB18[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

void nitro::ir::print_element<nitro::flexible_type>(void *a1, unsigned char *a2)
{
  switch(a2[8])
  {
    case 1:
      uint64_t v14 = MEMORY[0x1E4FBA488] + 104;
      v33[0] = MEMORY[0x1E4FBA488] + 104;
      uint64_t v15 = MEMORY[0x1E4FBA488] + 64;
      uint64_t v28 = MEMORY[0x1E4FBA488] + 64;
      int v16 = (uint64_t *)MEMORY[0x1E4FBA408];
      uint64_t v17 = *(void *)(MEMORY[0x1E4FBA408] + 24);
      uint64_t v26 = *(void *)(MEMORY[0x1E4FBA408] + 16);
      *(uint64_t *)((char *)&v26 + *(void *)(v26 - 24)) = v17;
      uint64_t v27 = 0;
      uint64_t v18 = (std::ios_base *)((char *)&v26 + *(void *)(v26 - 24));
      std::ios_base::init(v18, v29);
      uint64_t v19 = MEMORY[0x1E4FBA488] + 24;
      v18[1].__vftable = 0;
      v18[1].__fmtflags_ = -1;
      uint64_t v20 = v16[5];
      uint64_t v28 = v16[4];
      *(void *)((char *)&v29[-1] + *(void *)(v28 - 24)) = v20;
      uint64_t v26 = v16[1];
      *(uint64_t *)((char *)&v26 + *(void *)(v26 - 24)) = v16[6];
      v33[0] = v14;
      uint64_t v26 = v19;
      uint64_t v28 = v15;
      std::streambuf::basic_streambuf();
      uint64_t v21 = MEMORY[0x1E4FBA470] + 16;
      v29[0] = MEMORY[0x1E4FBA470] + 16;
      *(_OWORD *)std::string __p = 0u;
      long long v31 = 0u;
      int v32 = 24;
      std::ostream::operator<<();
      std::stringbuf::str();
      uint64_t v26 = *v16;
      uint64_t v22 = v16[9];
      *(uint64_t *)((char *)&v26 + *(void *)(v26 - 24)) = v16[8];
      uint64_t v28 = v22;
      v29[0] = v21;
      if (SBYTE7(v31) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_11;
    case 2:
      uint64_t v12 = *(void *)a2;
      if (*(char *)(*(void *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(v12 + 8), *(void *)(v12 + 16));
      }
      else
      {
        long long v13 = *(_OWORD *)(v12 + 8);
        v25.__r_.__value_.__r.__words[2] = *(void *)(v12 + 24);
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v13;
      }
      goto LABEL_16;
    case 3:
      nitro::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v26, (void *)(*(void *)a2 + 8));
      goto LABEL_16;
    case 4:
      nitro::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v26, (uint64_t *)(*(void *)a2 + 8));
      goto LABEL_16;
    case 5:
      nitro::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v26, (void *)(*(void *)a2 + 8));
      goto LABEL_16;
    case 6:
    case 8:
      __break(1u);
      return;
    case 7:
      memset(&v25, 0, sizeof(v25));
      goto LABEL_16;
    case 9:
      nitro::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v26, (_DWORD *)(*(void *)a2 + 8));
      goto LABEL_16;
    default:
      uint64_t v3 = MEMORY[0x1E4FBA488] + 104;
      v33[0] = MEMORY[0x1E4FBA488] + 104;
      uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
      uint64_t v28 = MEMORY[0x1E4FBA488] + 64;
      uint64_t v5 = (uint64_t *)MEMORY[0x1E4FBA408];
      uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
      uint64_t v26 = *(void *)(MEMORY[0x1E4FBA408] + 16);
      *(uint64_t *)((char *)&v26 + *(void *)(v26 - 24)) = v6;
      uint64_t v27 = 0;
      int v7 = (std::ios_base *)((char *)&v26 + *(void *)(v26 - 24));
      std::ios_base::init(v7, v29);
      uint64_t v8 = MEMORY[0x1E4FBA488] + 24;
      v7[1].__vftable = 0;
      v7[1].__fmtflags_ = -1;
      uint64_t v9 = v5[5];
      uint64_t v28 = v5[4];
      *(void *)((char *)&v29[-1] + *(void *)(v28 - 24)) = v9;
      uint64_t v26 = v5[1];
      *(uint64_t *)((char *)&v26 + *(void *)(v26 - 24)) = v5[6];
      v33[0] = v3;
      uint64_t v26 = v8;
      uint64_t v28 = v4;
      std::streambuf::basic_streambuf();
      uint64_t v10 = MEMORY[0x1E4FBA470] + 16;
      v29[0] = MEMORY[0x1E4FBA470] + 16;
      *(_OWORD *)std::string __p = 0u;
      long long v31 = 0u;
      int v32 = 24;
      std::ostream::operator<<();
      std::stringbuf::str();
      uint64_t v26 = *v5;
      uint64_t v11 = v5[9];
      *(uint64_t *)((char *)&v26 + *(void *)(v26 - 24)) = v5[8];
      uint64_t v28 = v11;
      v29[0] = v10;
      if (SBYTE7(v31) < 0) {
        operator delete(__p[0]);
      }
LABEL_11:
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x192FF15B0](v33);
LABEL_16:
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v23 = &v25;
      }
      else {
        long long v23 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v25.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v23, size);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      return;
  }
}

void sub_1926206DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_192620730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::ir::print_tuple<4ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(void *a1, uint64_t a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  uint64_t v4 = *(int **)(a2 + 8);
  for (uint64_t i = *(int **)(a2 + 16); v4 != i; v4 += 10)
  {
    nitro::operator<<(a1, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  nitro::operator<<(a1, (int *)(a2 + 32));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);

  return nitro::ir::print_tuple<2ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a1, a2);
}

void *nitro::ir::print_tuple<2ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(void *a1, uint64_t a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  uint64_t v4 = *(void *)(a2 + 72);
  uint64_t v5 = *(void *)(a2 + 80);
  while (v4 != v5)
  {
    v4 += 8;
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);

  return nitro::ir::print_tuple<1ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a1, a2);
}

void *nitro::ir::print_tuple<1ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(void *a1, uint64_t a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  uint64_t v4 = *(void **)(a2 + 96);
  for (uint64_t i = *(void **)(a2 + 104); v4 != i; ++v4)
  {
    if (*v4) {
      (**(void (***)(void, void *))*v4)(*v4, a1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
}

char **nitro::ir::copy_tuple<5ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  nitro::ir::copy_tuple<4ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy((uint64_t)a1, (uint64_t)&v6);
  *(void *)a2 = v3;
  *(_OWORD *)(a2 + 8) = v6;
  *(void *)(a2 + 24) = v7;
  long long v6 = 0uLL;
  uint64_t v7 = 0;
  *(unsigned char *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 64) = -1;
  int v4 = v9;
  if (v9 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t *))off_1EE39BB88[v9])(&v14, a2 + 32, &v8);
    *(_DWORD *)(a2 + 64) = v4;
  }
  *(_OWORD *)(a2 + 72) = v10;
  *(void *)(a2 + 88) = v11;
  long long v10 = 0uLL;
  *(_OWORD *)(a2 + 96) = v12;
  *(void *)(a2 + 112) = v13;
  uint64_t v11 = 0;
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl((char **)&v6);
}

void nitro::ir::copy_tuple<4ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  nitro::ir::copy_element<nitro::variable_type>((char *)(a1 + 8), (uint64_t)&v22);
  int v4 = v22;
  uint64_t v5 = v23;
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v6 = v24;
  uint64_t v21 = v24;
  long long v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  nitro::ir::copy_tuple<3ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(a1, (uint64_t)v13);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 56) = -1;
  int v7 = v14;
  if (v14 != -1)
  {
    ((void (*)(char *, uint64_t, unsigned char *))off_1EE39BB88[v14])(&v25, a2 + 24, v13);
    *(_DWORD *)(a2 + 56) = v7;
  }
  *(_OWORD *)(a2 + 64) = v15;
  *(void *)(a2 + 80) = v16;
  long long v15 = 0uLL;
  *(_OWORD *)(a2 + 88) = v17;
  *(void *)(a2 + 104) = v18;
  uint64_t v16 = 0;
  long long v17 = 0uLL;
  uint64_t v18 = 0;
  if (v14 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE39BB18[v14])(&v25, v13);
  }
  uint64_t v8 = v22;
  if (v22)
  {
    int v9 = v23;
    long long v10 = v22;
    if (v23 != v22)
    {
      do
      {
        uint64_t v11 = v9 - 40;
        uint64_t v12 = *((unsigned int *)v9 - 2);
        if (v12 != -1) {
          ((void (*)(unsigned char *, char *))off_1EE39BB18[v12])(v13, v9 - 40);
        }
        *((_DWORD *)v9 - 2) = -1;
        v9 -= 40;
      }
      while (v11 != v8);
      long long v10 = v22;
    }
    long long v23 = v8;
    operator delete(v10);
  }
}

void sub_192620C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::tuple<std::vector<nitro::variable_type>>::~tuple((void **)va);
  std::vector<nitro::variable_type>::~vector[abi:ne180100]((void **)(v12 - 80));
  _Unwind_Resume(a1);
}

char *nitro::ir::copy_element<nitro::variable_type>@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *((void *)result + 1);
  if (*(void *)result != v3)
  {
    do
    {
      v8[0] = 0;
      int v9 = -1;
      uint64_t v5 = *(unsigned int *)(v2 + 32);
      if (v5 != -1)
      {
        ((void (*)(char *, unsigned char *, uint64_t))off_1EE39BB50[v5])(&v10, v8, v2);
        int v9 = v5;
      }
      unint64_t v6 = *(void *)(a2 + 8);
      if (v6 >= *(void *)(a2 + 16))
      {
        __n128 result = std::vector<nitro::variable_type>::__push_back_slow_path<nitro::variable_type>((char **)a2, (uint64_t)v8);
      }
      else
      {
        *(unsigned char *)unint64_t v6 = 0;
        *(_DWORD *)(v6 + 32) = -1;
        int v7 = v9;
        if (v9 != -1)
        {
          ((void (*)(char *, unint64_t, unsigned char *))off_1EE39BB88[v9])(&v11, v6, v8);
          *(_DWORD *)(v6 + 32) = v7;
        }
        __n128 result = (char *)(v6 + 40);
      }
      *(void *)(a2 + 8) = result;
      if (v9 != -1) {
        __n128 result = (char *)((uint64_t (*)(char *, unsigned char *))off_1EE39BB18[v9])(&v11, v8);
      }
      v2 += 40;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_192620D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18)
{
  nitro::variable_type::~variable_type((nitro::variable_type *)&a9);
  std::vector<nitro::variable_type>::~vector[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void nitro::ir::copy_tuple<3ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v12[0] = 0;
  int v13 = -1;
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  if (v4 == -1)
  {
    v10[0] = 0;
    int v11 = -1;
  }
  else
  {
    ((void (*)(unsigned char *, unsigned char *, uint64_t))off_1EE39BB50[v4])(v10, v12, a1 + 32);
    int v13 = v4;
    v10[0] = 0;
    int v11 = -1;
    ((void (*)(long long *, unsigned char *, unsigned char *))off_1EE39BB88[v4])(&v6, v10, v12);
    int v11 = v4;
  }
  nitro::ir::copy_tuple<2ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(a1, (uint64_t)&v6);
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a2 + 32) = -1;
  int v5 = v11;
  if (v11 != -1)
  {
    ((void (*)(char *, uint64_t, unsigned char *))off_1EE39BB88[v11])(&v14, a2, v10);
    *(_DWORD *)(a2 + 32) = v5;
  }
  *(_OWORD *)(a2 + 40) = v6;
  *(void *)(a2 + 56) = v7;
  *(_OWORD *)(a2 + 64) = v8;
  *(void *)(a2 + 80) = v9;
  if (v11 != -1) {
    ((void (*)(long long *, unsigned char *))off_1EE39BB18[v11])(&v6, v10);
  }
  if (v13 != -1) {
    ((void (*)(long long *, unsigned char *))off_1EE39BB18[v13])(&v6, v12);
  }
}

void sub_192620F08(_Unwind_Exception *exception_object, ...)
{
  va_start(va, exception_object);
  uint64_t v3 = *(unsigned int *)(v1 - 48);
  if (v3 != -1) {
    ((void (*)(uint64_t *, uint64_t))off_1EE39BB18[v3])((uint64_t *)va, v1 - 80);
  }
  _Unwind_Resume(exception_object);
}

void sub_192620F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::tuple<nitro::variable_type>::~tuple((uint64_t)va);
  nitro::variable_type::~variable_type((nitro::variable_type *)(v8 - 80));
  _Unwind_Resume(a1);
}

void **std::tuple<std::vector<nitro::variable_type>>::~tuple(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        int v5 = v3 - 40;
        uint64_t v6 = *((unsigned int *)v3 - 2);
        if (v6 != -1) {
          ((void (*)(char *, char *))off_1EE39BB18[v6])(&v8, v3 - 40);
        }
        *((_DWORD *)v3 - 2) = -1;
        v3 -= 40;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<nitro::variable_type>::__push_back_slow_path<nitro::variable_type>(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - v3) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3) >= 0x333333333333333) {
    unint64_t v8 = 0x666666666666666;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(40 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  char v10 = &v9[40 * v5];
  *char v10 = 0;
  *((_DWORD *)v10 + 8) = -1;
  uint64_t v11 = *(unsigned int *)(a2 + 32);
  if (v11 != -1)
  {
    ((void (*)(char *, char *, uint64_t))off_1EE39BB88[v11])(&v20, v10, a2);
    *((_DWORD *)v10 + 8) = v11;
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
  }
  uint64_t v12 = &v9[40 * v8];
  int v13 = v10 + 40;
  if (v4 == v3)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v12;
    if (!v3) {
      return v13;
    }
    goto LABEL_25;
  }
  uint64_t v14 = 0;
  do
  {
    v10[v14 - 40] = 0;
    *(_DWORD *)&v10[v14 - 8] = -1;
    uint64_t v15 = *(unsigned int *)&v4[v14 - 8];
    if (v15 != -1)
    {
      ((void (*)(char *, char *, char *))off_1EE39BB88[v15])(&v21, &v10[v14 - 40], &v4[v14 - 40]);
      *(_DWORD *)&v10[v14 - 8] = v15;
    }
    v14 -= 40;
  }
  while (&v4[v14] != v3);
  uint64_t v16 = *a1;
  uint64_t v3 = a1[1];
  int v13 = v10 + 40;
  *a1 = &v10[v14];
  a1[1] = v10 + 40;
  a1[2] = v12;
  if (v3 != v16)
  {
    do
    {
      long long v17 = v3 - 40;
      uint64_t v18 = *((unsigned int *)v3 - 2);
      if (v18 != -1) {
        ((void (*)(char *, char *))off_1EE39BB18[v18])(&v22, v3 - 40);
      }
      *((_DWORD *)v3 - 2) = -1;
      v3 -= 40;
    }
    while (v17 != v16);
    uint64_t v3 = v16;
  }
  if (v3) {
LABEL_25:
  }
    operator delete(v3);
  return v13;
}

void nitro::ir::copy_tuple<2ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  nitro::ir::copy_element<unsigned long>((uint64_t **)(a1 + 72), (char **)__p);
  long long v7 = *(_OWORD *)__p;
  uint64_t v4 = v9;
  __p[1] = 0;
  uint64_t v9 = 0;
  __p[0] = 0;
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>((void *)(a1 + 96), &v10);
  uint64_t v5 = v11;
  long long v6 = v10;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 24) = v6;
  *(void *)(a2 + 40) = v5;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19262129C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, void *__p, uint64_t a11)
{
  if ((void)a9)
  {
    operator delete((void *)a9);
    uint64_t v12 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v12 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

void nitro::ir::copy_element<unsigned long>(uint64_t **a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    uint64_t v5 = 0;
    long long v6 = 0;
    long long v7 = 0;
    char v25 = a1[1];
    while (1)
    {
      uint64_t v9 = *v4;
      if (v7 >= v6) {
        break;
      }
      *(void *)long long v7 = v9;
      unint64_t v8 = v7 + 8;
LABEL_4:
      a2[1] = v8;
      ++v4;
      long long v7 = v8;
      if (v4 == v3) {
        return;
      }
    }
    uint64_t v10 = (v7 - v5) >> 3;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if ((v6 - v5) >> 2 > v11) {
      unint64_t v11 = (v6 - v5) >> 2;
    }
    if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v13 = operator new(8 * v12);
    }
    else
    {
      int v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    *(void *)uint64_t v14 = v9;
    unint64_t v8 = v14 + 8;
    if (v7 == v5) {
      goto LABEL_20;
    }
    unint64_t v15 = v7 - v5 - 8;
    if (v15 < 0x168)
    {
      uint64_t v16 = v7;
      goto LABEL_19;
    }
    unint64_t v18 = (v7 - 8 - v5) & 0xFFFFFFFFFFFFFFF8;
    if (&v13[v7 - v5 - 8 - v18] > &v13[v7 - v5 - 8])
    {
      uint64_t v16 = v7;
    }
    else
    {
      if (&v7[-v18 - 8] <= v7 - 8)
      {
        if ((unint64_t)(v5 - v13) < 0x20)
        {
          uint64_t v16 = v7;
          goto LABEL_19;
        }
        uint64_t v19 = (v15 >> 3) + 1;
        uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v16 = &v7[-v20];
        v14 -= v20;
        char v21 = &v13[8 * v10 - 16];
        char v22 = v7 - 16;
        uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *char v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 4;
        }
        while (v23);
        if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_19;
        }
LABEL_20:
        long long v6 = &v13[8 * v12];
        *a2 = v14;
        a2[1] = v8;
        a2[2] = v6;
        if (v5) {
          operator delete(v5);
        }
        uint64_t v5 = v14;
        uint64_t v3 = v25;
        goto LABEL_4;
      }
      uint64_t v16 = v7;
    }
    do
    {
LABEL_19:
      uint64_t v17 = *((void *)v16 - 1);
      v16 -= 8;
      *((void *)v14 - 1) = v17;
      v14 -= 8;
    }
    while (v16 != v5);
    goto LABEL_20;
  }
}

void sub_1926214CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (*result != v3)
  {
    do
    {
      if (*(void *)v2)
      {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)v2 + 8))(&v9);
        uint64_t v5 = v9;
      }
      else
      {
        uint64_t v5 = 0;
      }
      unint64_t v8 = (void *)v5;
      long long v6 = (uint64_t *)a2[1];
      if ((unint64_t)v6 >= a2[2])
      {
        long long v7 = std::vector<std::unique_ptr<nitro::ir::NODE>>::__push_back_slow_path<std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t *)&v8);
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t *v6 = v5;
        long long v7 = v6 + 1;
      }
      a2[1] = v7;
      __n128 result = v8;
      unint64_t v8 = 0;
      if (result) {
        __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
      }
      v2 += 8;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1926215DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

char **std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl(char **a1)
{
  uint64_t v2 = a1[11];
  if (v2)
  {
    uint64_t v3 = a1[12];
    uint64_t v4 = a1[11];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *((void *)v3 - 1);
        v3 -= 8;
        uint64_t v5 = v6;
        *(void *)uint64_t v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  long long v7 = a1[8];
  if (v7)
  {
    a1[9] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *((unsigned int *)a1 + 14);
  if (v8 != -1) {
    ((void (*)(char *, char **))off_1EE39BB18[v8])(&v15, a1 + 3);
  }
  *((_DWORD *)a1 + 14) = -1;
  uint64_t v9 = *a1;
  if (*a1)
  {
    uint64_t v10 = a1[1];
    unint64_t v11 = *a1;
    if (v10 != v9)
    {
      do
      {
        unint64_t v12 = v10 - 40;
        uint64_t v13 = *((unsigned int *)v10 - 2);
        if (v13 != -1) {
          ((void (*)(char *, char *))off_1EE39BB18[v13])(&v16, v10 - 40);
        }
        *((_DWORD *)v10 - 2) = -1;
        v10 -= 40;
      }
      while (v12 != v9);
      unint64_t v11 = *a1;
    }
    a1[1] = v9;
    operator delete(v11);
  }
  return a1;
}

void *nitro::ir::print_tuple<2ul,std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::print(void *a1, uint64_t a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  uint64_t v4 = *(void **)(a2 + 24);
  for (uint64_t i = *(void **)(a2 + 32); v4 != i; ++v4)
  {
    if (*v4) {
      (**(void (***)(void, void *))*v4)(*v4, a1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);

  return nitro::ir::print_tuple<1ul,std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::print(a1, a2);
}

void *nitro::ir::print_tuple<1ul,std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::print(void *a1, uint64_t a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  uint64_t v4 = *(void **)(a2 + 48);
  for (uint64_t i = *(void **)(a2 + 56); v4 != i; ++v4)
  {
    if (*v4) {
      (**(void (***)(void, void *))*v4)(*v4, a1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
}

void nitro::ir::copy_tuple<3ul,std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v12[2] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v11 = *(std::string *)a1;
  }
  v12[0] = v11.__r_.__value_.__l.__size_;
  std::string::size_type v4 = v11.__r_.__value_.__r.__words[0];
  *(void *)((char *)v12 + 7) = *(std::string::size_type *)((char *)&v11.__r_.__value_.__r.__words[1] + 7);
  char v5 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  memset(&v11, 0, sizeof(v11));
  nitro::ir::copy_tuple<2ul,std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::copy(a1, (uint64_t)&v7);
  uint64_t v6 = v12[0];
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 15) = *(void *)((char *)v12 + 7);
  *(unsigned char *)(a2 + 23) = v5;
  *(_OWORD *)(a2 + 24) = v7;
  *(void *)(a2 + 40) = v8;
  *(_OWORD *)(a2 + 48) = v9;
  *(void *)(a2 + 64) = v10;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_192621A04(_Unwind_Exception *exception_object)
{
}

void sub_192621A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v21 < 0) {
    operator delete(v20);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ir::copy_tuple<2ul,std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::DEFVAR>>((void ***)(a1 + 24), &__p);
  std::string::size_type v4 = __p;
  char v5 = v15;
  uint64_t v6 = v16;
  std::string __p = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>((void ***)(a1 + 48), &v17);
  uint64_t v7 = v18;
  long long v8 = v17;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 24) = v8;
  *(void *)(a2 + 40) = v7;
  long long v9 = __p;
  if (__p)
  {
    uint64_t v10 = v15;
    std::string v11 = __p;
    if (v15 != __p)
    {
      do
      {
        uint64_t v13 = *--v10;
        uint64_t v12 = v13;
        *uint64_t v10 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
        }
      }
      while (v10 != v9);
      std::string v11 = __p;
    }
    char v15 = v9;
    operator delete(v11);
  }
}

void sub_192621B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void ***nitro::ir::copy_element<std::unique_ptr<nitro::ir::DEFVAR>>@<X0>(void ***result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (*result != v3)
  {
    do
    {
      char v5 = *v2;
      if (*v2)
      {
        (*(void (**)(void **__return_ptr))(*v5 + 8))(&lpsrc);
        char v5 = lpsrc;
        lpsrc = 0;
        if (v5) {
        long long v8 = (void ***)v5;
        }
      }
      else
      {
        long long v8 = 0;
      }
      uint64_t v6 = (void *)a2[1];
      if ((unint64_t)v6 >= a2[2])
      {
        uint64_t v7 = std::vector<std::unique_ptr<nitro::ir::NODE>>::__push_back_slow_path<std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t *)&v8);
      }
      else
      {
        long long v8 = 0;
        void *v6 = v5;
        uint64_t v7 = v6 + 1;
      }
      a2[1] = v7;
      __n128 result = v8;
      long long v8 = 0;
      if (result) {
        __n128 result = (void ***)((uint64_t (*)(void ***))(*result)[5])(result);
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_192621C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void ***nitro::ir::copy_element<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>@<X0>(void ***result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if (*result != v3)
  {
    do
    {
      char v5 = *v2;
      if (*v2)
      {
        (*(void (**)(void **__return_ptr))(*v5 + 8))(&lpsrc);
        char v5 = lpsrc;
        lpsrc = 0;
        if (v5) {
        long long v8 = (void ***)v5;
        }
      }
      else
      {
        long long v8 = 0;
      }
      uint64_t v6 = (void *)a2[1];
      if ((unint64_t)v6 >= a2[2])
      {
        uint64_t v7 = std::vector<std::unique_ptr<nitro::ir::NODE>>::__push_back_slow_path<std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t *)&v8);
      }
      else
      {
        long long v8 = 0;
        void *v6 = v5;
        uint64_t v7 = v6 + 1;
      }
      a2[1] = v7;
      __n128 result = v8;
      long long v8 = 0;
      if (result) {
        __n128 result = (void ***)((uint64_t (*)(void ***))(*result)[5])(result);
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_192621DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void *nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,unsigned long>(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  if (*a3) {
    (**(void (***)(void, void *))*a3)(*a3, a1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

void *nitro::ir::print_tuple<3ul,nitro::ir::binary_op_enum,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>::print(void *a1, uint64_t a2)
{
  std::string::size_type v4 = nitro::ir::operator<<(a1, (int *)a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  char v5 = *(void (****)(void, void *))(a2 + 8);
  if (v5) {
    (**v5)(v5, a1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  uint64_t v6 = *(void (****)(void, void *))(a2 + 16);
  if (v6) {
    (**v6)(v6, a1);
  }

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
}

void *nitro::ir::print_element<std::string,std::unique_ptr<nitro::ir::NODE>>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  int v11 = *(char *)(a3 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = *(void *)a3;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  uint64_t v14 = *(void (****)(void, void *))(a3 + 24);
  if (v14) {
    (**v14)(v14, a1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

void nitro::ir::copy_tuple<2ul,std::string,std::unique_ptr<nitro::ir::NODE>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void v13[2] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  v13[0] = __p.__r_.__value_.__l.__size_;
  std::string::size_type v4 = __p.__r_.__value_.__r.__words[0];
  *(void *)((char *)v13 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  char v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 8))(&v12);
    uint64_t v7 = v12;
    uint64_t v8 = v13[0];
    int v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 15) = *(void *)((char *)v13 + 7);
    *(unsigned char *)(a2 + 23) = v5;
    *(void *)(a2 + 24) = v7;
    if (v9 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v10 = v13[0];
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v10;
    *(void *)(a2 + 15) = *(void *)((char *)v13 + 7);
    *(unsigned char *)(a2 + 23) = v5;
    *(void *)(a2 + 24) = 0;
  }
}

void sub_192622200(_Unwind_Exception *exception_object)
{
}

void sub_19262220C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v15 < 0) {
    operator delete(v14);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::ir::print_element<unsigned long,std::unique_ptr<nitro::ir::MEMBER>,std::vector<std::unique_ptr<nitro::ir::NODE>>>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  int v11 = *(void (****)(void, void *))(a3 + 8);
  if (v11) {
    (**v11)(v11, a1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  nitro::ir::print_tuple<1ul,unsigned long,std::unique_ptr<nitro::ir::MEMBER>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a1, a3);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

void *nitro::ir::print_tuple<1ul,unsigned long,std::unique_ptr<nitro::ir::MEMBER>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(void *a1, uint64_t a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  std::string::size_type v4 = *(void **)(a2 + 16);
  for (uint64_t i = *(void **)(a2 + 24); v4 != i; ++v4)
  {
    if (*v4) {
      (**(void (***)(void, void *))*v4)(*v4, a1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
}

__n128 nitro::ir::copy_tuple<2ul,unsigned long,std::unique_ptr<nitro::ir::MEMBER>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4
    && ((*(void (**)(void **__return_ptr))(*(void *)v4 + 8))(lpsrc), char v5 = lpsrc[0], lpsrc[0] = 0, v5))
  {
  }
  else
  {
    uint64_t v6 = 0;
  }
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>((void *)(a1 + 16), lpsrc);
  uint64_t v7 = v10;
  __n128 result = *(__n128 *)lpsrc;
  *(void *)a2 = v6;
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a2 + 24) = v7;
  return result;
}

void sub_1926224E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  _Unwind_Resume(exception_object);
}

void *nitro::ir::print_tuple<1ul,std::string,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(void *a1, uint64_t a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  uint64_t v4 = *(void **)(a2 + 24);
  for (uint64_t i = *(void **)(a2 + 32); v4 != i; ++v4)
  {
    if (*v4) {
      (**(void (***)(void, void *))*v4)(*v4, a1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
}

void nitro::ir::copy_tuple<2ul,std::string,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v12[2] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  v12[0] = __p.__r_.__value_.__l.__size_;
  std::string::size_type v4 = __p.__r_.__value_.__r.__words[0];
  *(void *)((char *)v12 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  char v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>((void *)(a1 + 24), &v10);
  uint64_t v6 = v11;
  uint64_t v7 = v12[0];
  long long v8 = v10;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 15) = *(void *)((char *)v12 + 7);
  *(unsigned char *)(a2 + 23) = v5;
  *(_OWORD *)(a2 + 24) = v8;
  *(void *)(a2 + 40) = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1926226B4(_Unwind_Exception *exception_object)
{
}

void sub_1926226C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v15 < 0) {
    operator delete(v14);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  long long v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  if (*a3) {
    (**(void (***)(void, void *))*a3)(*a3, a1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  nitro::ir::print_tuple<1ul,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a1, (uint64_t)a3);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

void *nitro::ir::print_tuple<1ul,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(void *a1, uint64_t a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  std::string::size_type v4 = *(void **)(a2 + 8);
  for (uint64_t i = *(void **)(a2 + 16); v4 != i; ++v4)
  {
    if (*v4) {
      (**(void (***)(void, void *))*v4)(*v4, a1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
}

void *nitro::ir::print_tuple<4ul,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(void *a1, void *a2)
{
  if (*a2) {
    (**(void (***)(void, void *))*a2)(*a2, a1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  std::string::size_type v4 = (void (***)(void, void *))a2[1];
  if (v4) {
    (**v4)(v4, a1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  char v5 = (void (***)(void, void *))a2[2];
  if (v5) {
    (**v5)(v5, a1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);

  return nitro::ir::print_tuple<1ul,std::string,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a1, (uint64_t)a2);
}

__n128 nitro::ir::copy_tuple<3ul,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy@<Q0>(void *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = a1[1];
  if (!v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = a1[2];
    if (v6) {
      goto LABEL_3;
    }
LABEL_5:
    unint64_t v7 = 0;
    goto LABEL_6;
  }
  (*(void (**)(__n128 *__return_ptr))(*(void *)v4 + 8))(&v10);
  unint64_t v5 = v10.n128_u64[0];
  uint64_t v6 = a1[2];
  if (!v6) {
    goto LABEL_5;
  }
LABEL_3:
  (*(void (**)(__n128 *__return_ptr))(*(void *)v6 + 8))(&v10);
  unint64_t v7 = v10.n128_u64[0];
LABEL_6:
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>(a1 + 3, &v10);
  unint64_t v8 = v11;
  __n128 result = v10;
  a2->n128_u64[0] = v5;
  a2->n128_u64[1] = v7;
  a2[1] = result;
  a2[2].n128_u64[0] = v8;
  return result;
}

void sub_192622A74(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 40))(v1);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,unsigned long,std::vector<std::unique_ptr<nitro::ir::NODE>>>(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  __n128 v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  if (*a3) {
    (**(void (***)(void, void *))*a3)(*a3, a1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  nitro::ir::print_tuple<1ul,unsigned long,std::unique_ptr<nitro::ir::MEMBER>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a1, (uint64_t)a3);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

void *nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  __n128 v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  if (*a3) {
    (**(void (***)(void, void *))*a3)(*a3, a1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  nitro::ir::print_tuple<2ul,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a1, (uint64_t)a3);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

void *nitro::ir::print_tuple<2ul,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(void *a1, uint64_t a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  uint64_t v4 = *(void **)(a2 + 8);
  for (uint64_t i = *(void **)(a2 + 16); v4 != i; ++v4)
  {
    if (*v4) {
      (**(void (***)(void, void *))*v4)(*v4, a1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);

  return nitro::ir::print_tuple<1ul,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a1, a2);
}

void *nitro::ir::print_tuple<1ul,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(void *a1, uint64_t a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  uint64_t v4 = *(void **)(a2 + 32);
  for (uint64_t i = *(void **)(a2 + 40); v4 != i; ++v4)
  {
    if (*v4) {
      (**(void (***)(void, void *))*v4)(*v4, a1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
}

void nitro::ir::copy_tuple<2ul,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>((void *)(a1 + 8), &__p);
  uint64_t v4 = __p;
  unint64_t v5 = v15;
  uint64_t v6 = v16;
  std::string __p = 0;
  int v15 = 0;
  uint64_t v16 = 0;
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>((void *)(a1 + 32), &v17);
  uint64_t v7 = v18;
  long long v8 = v17;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 24) = v8;
  *(void *)(a2 + 40) = v7;
  uint64_t v9 = __p;
  if (__p)
  {
    __n128 v10 = v15;
    unint64_t v11 = __p;
    if (v15 != __p)
    {
      do
      {
        uint64_t v13 = *--v10;
        uint64_t v12 = v13;
        *__n128 v10 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
        }
      }
      while (v10 != v9);
      unint64_t v11 = __p;
    }
    int v15 = v9;
    operator delete(v11);
  }
}

void sub_192622F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void *nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  __n128 v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  if (*a3) {
    (**(void (***)(void, void *))*a3)(*a3, a1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  unint64_t v11 = (void (***)(void, void *))a3[1];
  if (v11) {
    (**v11)(v11, a1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

void *nitro::ir::print_tuple<3ul,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>::print(void *a1, void *a2)
{
  if (*a2) {
    (**(void (***)(void, void *))*a2)(*a2, a1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  uint64_t v4 = (void (***)(void, void *))a2[1];
  if (v4) {
    (**v4)(v4, a1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  unint64_t v5 = (void (***)(void, void *))a2[2];
  if (v5) {
    (**v5)(v5, a1);
  }

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
}

void *nitro::ir::copy_tuple<3ul,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>::copy@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 8))(&v10);
    uint64_t v5 = v10;
    uint64_t v6 = a1[1];
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v7 = 0;
    __n128 result = (void *)a1[2];
    if (result) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v9 = 0;
    goto LABEL_8;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_6;
  }
LABEL_3:
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 8))(&v10);
  uint64_t v7 = v10;
  __n128 result = (void *)a1[2];
  if (!result) {
    goto LABEL_7;
  }
LABEL_4:
  __n128 result = (*(void *(**)(uint64_t *__return_ptr))(*result + 8))(&v10);
  uint64_t v9 = v10;
LABEL_8:
  *a2 = v5;
  a2[1] = v7;
  a2[2] = v9;
  return result;
}

void sub_192623264(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::ir::parse<nitro::ir::DICT>();
  }
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 40))(v1);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::ir::print_element<nitro::variable_type,std::unique_ptr<nitro::ir::NODE>>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  nitro::operator<<(a1, (int *)a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  unint64_t v11 = *(void (****)(void, void *))(a3 + 40);
  if (v11) {
    (**v11)(v11, a1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

void *nitro::ir::copy_tuple<2ul,nitro::variable_type,std::unique_ptr<nitro::ir::NODE>>::copy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v10[0] = 0;
  int v11 = -1;
  uint64_t v4 = *(unsigned int *)(a1 + 32);
  if (v4 == -1)
  {
    v8[0] = 0;
    unsigned int v9 = -1;
    __n128 result = *(void **)(a1 + 40);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(uint64_t *, unsigned char *, uint64_t))off_1EE39BB50[v4])(&v12, v10, a1);
    int v11 = v4;
    v8[0] = 0;
    unsigned int v9 = -1;
    ((void (*)(uint64_t *, unsigned char *, unsigned char *))off_1EE39BB88[v4])(&v12, v8, v10);
    unsigned int v9 = v4;
    __n128 result = *(void **)(a1 + 40);
    if (result)
    {
LABEL_3:
      __n128 result = (*(void *(**)(uint64_t *__return_ptr))(*result + 8))(&v12);
      uint64_t v6 = v12;
      LODWORD(v4) = v9;
      goto LABEL_6;
    }
  }
  uint64_t v6 = 0;
LABEL_6:
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a2 + 32) = -1;
  if (v4 == -1)
  {
    *(void *)(a2 + 40) = v6;
  }
  else
  {
    __n128 result = (void *)((uint64_t (*)(uint64_t *, uint64_t, unsigned char *))off_1EE39BB88[v4])(&v12, a2, v8);
    *(_DWORD *)(a2 + 32) = v4;
    uint64_t v7 = v9;
    *(void *)(a2 + 40) = v6;
    if (v7 != -1) {
      __n128 result = (void *)((uint64_t (*)(uint64_t *, unsigned char *))off_1EE39BB18[v7])(&v12, v8);
    }
  }
  if (v11 != -1) {
    return (void *)((uint64_t (*)(unsigned char *, unsigned char *))off_1EE39BB18[v11])(v8, v10);
  }
  return result;
}

void sub_192623514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::tuple<nitro::variable_type>::~tuple((uint64_t)va);
  nitro::variable_type::~variable_type((nitro::variable_type *)va1);
  _Unwind_Resume(a1);
}

void sub_192623534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  if (a19 != -1) {
    ((void (*)(char *, char *))off_1EE39BB18[a19])(&a10, &a15);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::ir::print_tuple<1ul,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(void *a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  uint64_t v4 = (void *)*a2;
  uint64_t v5 = (void *)a2[1];
  if ((void *)*a2 != v5)
  {
    do
    {
      if (*v4) {
        (**(void (***)(void, void *))*v4)(*v4, a1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
      ++v4;
    }
    while (v4 != v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
}

void *nitro::ir::print_element<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>(void *a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  uint64_t v4 = (void *)*a2;
  uint64_t v5 = (void *)a2[1];
  if ((void *)*a2 != v5)
  {
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
      if (*v4) {
        (**(void (***)(void, void *))*v4)(*v4, a1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
      uint64_t v6 = (void (***)(void, void *))v4[1];
      if (v6) {
        (**v6)(v6, a1);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
      v4 += 2;
    }
    while (v4 != v5);
  }

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

void *nitro::ir::copy_element<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  if ((void *)*result != v3)
  {
    do
    {
      if (*v2)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)*v2 + 8))(&v13);
        uint64_t v5 = v13;
        uint64_t v6 = v2[1];
        if (!v6) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v5 = 0;
        uint64_t v6 = v2[1];
        if (!v6)
        {
LABEL_8:
          uint64_t v7 = 0;
          goto LABEL_9;
        }
      }
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 8))(&v13);
      uint64_t v7 = v13;
LABEL_9:
      *(void *)&long long v12 = v5;
      *((void *)&v12 + 1) = v7;
      uint64_t v8 = (void *)a2[1];
      if ((unint64_t)v8 >= a2[2])
      {
        uint64_t v10 = std::vector<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>::__push_back_slow_path<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>(a2, &v12);
      }
      else
      {
        *(void *)&long long v12 = 0;
        void *v8 = v5;
        uint64_t v9 = *((void *)&v12 + 1);
        *((void *)&v12 + 1) = 0;
        v8[1] = v9;
        uint64_t v10 = v8 + 2;
      }
      a2[1] = v10;
      uint64_t v11 = *((void *)&v12 + 1);
      *((void *)&v12 + 1) = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
      }
      __n128 result = (void *)v12;
      *(void *)&long long v12 = 0;
      if (result) {
        __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1926238EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>::~pair((uint64_t *)va);
  std::vector<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>::~vector[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void *nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>>(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  if (*a3) {
    (**(void (***)(void, void *))*a3)(*a3, a1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

uint64_t nitro::ir::parse<nitro::ir::INDEXGET>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t nitro::ir::parse<nitro::ir::DICT>()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t nitro::flexible_type::flexible_type<std::string>(atomic_ullong *volatile *a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_1_2(a1);
  if (!v2) {
    return 1;
  }
  atomic_ullong *volatile v3 = *v1;
  if (*v1)
  {
    if (*((char *)v3 + 31) < 0) {
      operator delete((void *)v3[1]);
    }
    MEMORY[0x192FF16B0](v3, 0x1012C404EF22A49);
  }
  return 0;
}

{
  atomic_ullong *volatile *v1;
  char v2;
  atomic_ullong *volatile v3;
  void *v4;

  uint64_t v1 = OUTLINED_FUNCTION_1_2(a1);
  if (!v2) {
    return 1;
  }
  atomic_ullong *volatile v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (void *)v3[1];
    if (v4)
    {
      v3[2] = (atomic_ullong)v4;
      operator delete(v4);
    }
    MEMORY[0x192FF16B0](v3, 0x1080C409938AC02);
  }
  return 0;
}

{
  atomic_ullong *volatile *v1;
  char v2;
  void *v3;
  uint64_t result;

  uint64_t v1 = OUTLINED_FUNCTION_1_2(a1);
  if (!v2) {
    return 1;
  }
  __n128 result = (uint64_t)*v1;
  if (result)
  {
    atomic_ullong *volatile v3 = std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair((void *)result);
    MEMORY[0x192FF16B0](v3, 0x10B0C4002311774);
    return 0;
  }
  return result;
}

{
  atomic_ullong *volatile *v1;
  char v2;
  uint64_t result;

  uint64_t v1 = OUTLINED_FUNCTION_1_2(a1);
  if (!v2) {
    return 1;
  }
  __n128 result = (uint64_t)*v1;
  if (result)
  {
    std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(result);
    OUTLINED_FUNCTION_2();
    return 0;
  }
  return result;
}

{
  atomic_ullong *volatile *v1;
  char v2;
  uint64_t result;

  uint64_t v1 = OUTLINED_FUNCTION_1_2(a1);
  if (!v2) {
    return 1;
  }
  __n128 result = (uint64_t)*v1;
  if (result)
  {
    std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(result);
    OUTLINED_FUNCTION_2();
    return 0;
  }
  return result;
}

_DWORD *nitro::variable_type::variable_type(_DWORD *result, _DWORD *a2)
{
  *__n128 result = 0;
  result[8] = 0;
  *__n128 result = *a2;
  return result;
}

uint64_t std::variant<nitro::PrimitiveType,nitro::tensor_type,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::list_type>,nitro::string_type,nitro::class_type,std::shared_ptr<nitro::dict_type>>::~variant[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1EE39BBC0[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

_DWORD *nitro::variable_type::variable_type(_DWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[8] = 0;
  v4[0] = (uint64_t)a1;
  v4[1] = a2;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<nitro::PrimitiveType,nitro::tensor_type,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::list_type>,nitro::string_type,nitro::class_type,std::shared_ptr<nitro::dict_type>>>::__assign_alt[abi:ne180100]<1ul,nitro::tensor_type,nitro::tensor_type const&>(std::__variant_detail::__alt<1ul,nitro::tensor_type> &,nitro::tensor_type const&)::{unnamed type#1}::operator()[abi:ne180100](v4);
  return a1;
}

void sub_192623C74(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(unsigned int *)(v1 + 32);
  if (v4 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE39BBC0[v4])(v2 - 17, v1);
  }
  *(_DWORD *)(v1 + 32) = -1;
  _Unwind_Resume(exception_object);
}

nitro::variable_type *nitro::variable_type::variable_type(nitro::variable_type *this, const nitro::tuple_type *a2)
{
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v4 = operator new(0x30uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = &unk_1EE380E38;
  uint64_t v5 = v4 + 3;
  std::vector<nitro::variable_type>::vector(v4 + 3, (uint64_t *)a2);
  uint64_t v6 = *((unsigned int *)this + 8);
  if (v6 == -1) {
    goto LABEL_7;
  }
  if (v6 != 2)
  {
    ((void (*)(char *, nitro::variable_type *))off_1EE39BBC0[v6])(&v9, this);
LABEL_7:
    *(void *)this = v5;
    *((void *)this + 1) = v4;
    *((_DWORD *)this + 8) = 2;
    return this;
  }
  int v7 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v5;
  *((void *)this + 1) = v4;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return this;
}

void sub_192623DB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  std::variant<nitro::PrimitiveType,nitro::tensor_type,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::list_type>,nitro::string_type,nitro::class_type,std::shared_ptr<nitro::dict_type>>::~variant[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

nitro::variable_type *nitro::variable_type::variable_type(nitro::variable_type *this, const nitro::list_type *a2)
{
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 8) = 0;
  std::allocate_shared[abi:ne180100]<nitro::list_type,std::allocator<nitro::list_type>,nitro::list_type const&,void>((uint64_t)a2, &v8);
  uint64_t v3 = *((unsigned int *)this + 8);
  if (v3 == -1) {
    goto LABEL_7;
  }
  if (v3 != 3)
  {
    ((void (*)(char *, nitro::variable_type *))off_1EE39BBC0[v3])(&v9, this);
LABEL_7:
    *(_OWORD *)this = v8;
    long long v8 = 0uLL;
    *((_DWORD *)this + 8) = 3;
    goto LABEL_8;
  }
  long long v4 = v8;
  long long v8 = 0uLL;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
  *(_OWORD *)this = v4;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_8:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)&v8 + 1);
  if (*((void *)&v8 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return this;
}

void sub_192623F08(_Unwind_Exception *a1)
{
  std::variant<nitro::PrimitiveType,nitro::tensor_type,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::list_type>,nitro::string_type,nitro::class_type,std::shared_ptr<nitro::dict_type>>::~variant[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_DWORD *nitro::variable_type::variable_type(_DWORD *result)
{
  *__n128 result = 0;
  result[8] = 4;
  return result;
}

std::string *nitro::variable_type::variable_type(std::string *a1, uint64_t a2)
{
  LODWORD(a1->__r_.__value_.__l.__data_) = 0;
  LODWORD(a1[1].__r_.__value_.__r.__words[1]) = 0;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    int v3 = 0;
    std::string v5 = *(std::string *)a2;
LABEL_4:
    ((void (*)(char *, std::string *))off_1EE39BBC0[v3])(&v6, a1);
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  int v3 = a1[1].__r_.__value_.__r.__words[1];
  if (v3 != -1) {
    goto LABEL_4;
  }
LABEL_5:
  *a1 = v5;
  LODWORD(a1[1].__r_.__value_.__r.__words[1]) = 5;
  return a1;
}

void sub_192623FD0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(unsigned int *)(v1 + 32);
  if (v4 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE39BBC0[v4])(v2 - 17, v1);
  }
  *(_DWORD *)(v1 + 32) = -1;
  _Unwind_Resume(exception_object);
}

nitro::variable_type *nitro::variable_type::variable_type(nitro::variable_type *this, const nitro::dict_type *a2)
{
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v4 = operator new(0x68uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = &unk_1EE380F88;
  std::string v5 = v4 + 3;
  nitro::dict_type::dict_type((uint64_t)(v4 + 3), (uint64_t)a2);
  uint64_t v6 = *((unsigned int *)this + 8);
  if (v6 == -1) {
    goto LABEL_7;
  }
  if (v6 != 6)
  {
    ((void (*)(char *, nitro::variable_type *))off_1EE39BBC0[v6])(&v9, this);
LABEL_7:
    *(void *)this = v5;
    *((void *)this + 1) = v4;
    *((_DWORD *)this + 8) = 6;
    return this;
  }
  int v7 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v5;
  *((void *)this + 1) = v4;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return this;
}

void sub_192624118(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  std::variant<nitro::PrimitiveType,nitro::tensor_type,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::list_type>,nitro::string_type,nitro::class_type,std::shared_ptr<nitro::dict_type>>::~variant[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *nitro::operator<<(void *a1, int *a2)
{
  uint64_t v4 = *a2;
  if (v4 > 0xB) {
    std::string v5 = "";
  }
  else {
    std::string v5 = off_1E5746C38[v4];
  }
  size_t v6 = strlen(v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  if (*((void *)a2 + 2) != *((void *)a2 + 1))
  {
    unint64_t v7 = 0;
    do
    {
      std::ostream::operator<<();
      ++v7;
      unint64_t v8 = (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3;
      if (v7 < v8)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
        unint64_t v8 = (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3;
      }
    }
    while (v7 < v8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]", 1);
  return a1;
}

{
  uint64_t v3;
  const char *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t i;
  const char *v8;
  void *v9;
  uint64_t *v10;
  void *v11;
  size_t v12;

  switch(a2[8])
  {
    case 0:
      int v3 = *a2;
      if (v3 > 0xB) {
        uint64_t v4 = "";
      }
      else {
        uint64_t v4 = off_1E5746C38[v3];
      }
      long long v12 = strlen(v4);
      char v9 = a1;
      unint64_t v8 = v4;
      goto LABEL_12;
    case 1:
      nitro::operator<<(a1, a2);
      return a1;
    case 2:
      std::string v5 = *(uint64_t **)a2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
      size_t v6 = *v5;
      for (uint64_t i = v5[1]; v6 != i; v6 += 40)
        nitro::operator<<(a1, v6);
      unint64_t v8 = ")";
      char v9 = a1;
      goto LABEL_8;
    case 3:
      uint64_t v10 = *(uint64_t **)a2;
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
      char v9 = (void *)nitro::operator<<(v11, v10);
      unint64_t v8 = "]";
LABEL_8:
      long long v12 = 1;
LABEL_12:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v8, v12);
      break;
    default:
      return a1;
  }
  return a1;
}

void std::__shared_ptr_emplace<nitro::tuple_type>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380E38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nitro::tuple_type>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380E38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<nitro::tuple_type>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = v3 - 40;
        uint64_t v6 = *(unsigned int *)(v3 - 8);
        if (v6 != -1) {
          ((void (*)(char *, uint64_t))off_1EE39BBC0[v6])(&v7, v3 - 40);
        }
        *(_DWORD *)(v3 - 8) = -1;
        v3 -= 40;
      }
      while (v5 != v1);
      uint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

void *std::allocate_shared[abi:ne180100]<nitro::list_type,std::allocator<nitro::list_type>,nitro::list_type const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  __n128 result = operator new(0x40uLL);
  uint64_t v5 = result;
  result[1] = 0;
  result[2] = 0;
  *__n128 result = &unk_1EE380FC0;
  *((unsigned char *)result + 24) = 0;
  uint64_t v6 = (char *)(result + 3);
  *((_DWORD *)result + 14) = -1;
  uint64_t v7 = *(unsigned int *)(a1 + 32);
  if (v7 != -1)
  {
    __n128 result = (void *)((uint64_t (*)(unsigned char *, char *, uint64_t))off_1EE39BBF8[v7])(v8, v6, a1);
    *((_DWORD *)v5 + 14) = v7;
  }
  *a2 = v6;
  a2[1] = v5;
  return result;
}

void sub_192624530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = *(unsigned int *)(v13 + 56);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_1EE39BBC0[v16])(&a13, v14);
  }
  *(_DWORD *)(v13 + 56) = -1;
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v13);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<nitro::list_type>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380FC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nitro::list_type>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380FC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<nitro::list_type>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 56);
  if (v2 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE39BBC0[v2])(&v3, result + 24);
  }
  *(_DWORD *)(v1 + 56) = -1;
  return result;
}

void std::__shared_ptr_emplace<nitro::dict_type>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380F88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nitro::dict_type>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380F88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<nitro::dict_type>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 96);
  if (v2 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE39BBC0[v2])(&v4, result + 64);
  }
  *(_DWORD *)(v1 + 96) = -1;
  uint64_t v3 = *(unsigned int *)(v1 + 56);
  if (v3 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE39BBC0[v3])(&v5, v1 + 24);
  }
  *(_DWORD *)(v1 + 56) = -1;
  return result;
}

uint64_t nitro::dict_type::dict_type(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 32) = -1;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  if (v4 != -1)
  {
    ((void (*)(unsigned char *, uint64_t, uint64_t))off_1EE39BBF8[v4])(v7, a1, a2);
    *(_DWORD *)(a1 + 32) = v4;
  }
  *(unsigned char *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 72) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 72);
  if (v5 != -1)
  {
    ((void (*)(unsigned char *, uint64_t, uint64_t))off_1EE39BBF8[v5])(v8, a1 + 40, a2 + 40);
    *(_DWORD *)(a1 + 72) = v5;
  }
  return a1;
}

void sub_1926247EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14)
{
  uint64_t v17 = *(unsigned int *)(v14 + 72);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_1EE39BBC0[v17])(&a13, v15);
  }
  *(_DWORD *)(v14 + 72) = -1;
  uint64_t v18 = *(unsigned int *)(v14 + 32);
  if (v18 != -1) {
    ((void (*)(char *, uint64_t))off_1EE39BBC0[v18])(&a14, v14);
  }
  *(_DWORD *)(v14 + 32) = -1;
  _Unwind_Resume(exception_object);
}

void nitro::ir::parse_type_internal(nitro::ir *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)((char *)this + 8);
  int v6 = *((unsigned __int8 *)this + 31);
  if (*((char *)this + 31) < 0)
  {
    uint64_t v9 = *((void *)this + 2);
    if (v9 == 3)
    {
      if (*(_WORD *)*v5 == 28265 && *(unsigned char *)(*v5 + 2) == 116) {
        goto LABEL_45;
      }
      uint64_t v9 = *((void *)this + 2);
    }
    else if (v9 == 4 && *(_DWORD *)*v5 == 1819242338)
    {
      goto LABEL_39;
    }
    if (v9 == 4)
    {
      if (*(_DWORD *)*v5 == 1953393013) {
        goto LABEL_58;
      }
      uint64_t v9 = *((void *)this + 2);
      if (v9 == 4)
      {
        if (*(_DWORD *)*v5 == 947154537) {
          goto LABEL_56;
        }
        if ((v6 & 0x80) == 0) {
          goto LABEL_44;
        }
      }
    }
    if (v9 != 5) {
      goto LABEL_44;
    }
    if (*(_DWORD *)*v5 != 829714025 || *(unsigned char *)(*v5 + 4) != 54)
    {
      if (*((void *)this + 2) != 5) {
        goto LABEL_44;
      }
      unint64_t v8 = (char *)*v5;
      goto LABEL_31;
    }
LABEL_52:
    LODWORD(v68.__r_.__value_.__l.__data_) = 2;
    nitro::variable_type::variable_type((_DWORD *)a2, &v68);
    return;
  }
  if (v6 != 3)
  {
    if (v6 != 4)
    {
      if (v6 != 5) {
        goto LABEL_44;
      }
      if (*(_DWORD *)v5 != 829714025 || *((unsigned char *)this + 12) != 54)
      {
        unint64_t v8 = (char *)this + 8;
LABEL_31:
        int v12 = *(_DWORD *)v8;
        int v13 = v8[4];
        if (v12 == 863268457 && v13 == 50)
        {
          LODWORD(v68.__r_.__value_.__l.__data_) = 3;
          nitro::variable_type::variable_type((_DWORD *)a2, &v68);
          return;
        }
        goto LABEL_44;
      }
      goto LABEL_52;
    }
    int v15 = *(_DWORD *)v5;
    if (*(_DWORD *)v5 != 1953393013)
    {
      if (v15 == 1819242338)
      {
LABEL_39:
        LODWORD(v68.__r_.__value_.__l.__data_) = 0;
        nitro::variable_type::variable_type((_DWORD *)a2, &v68);
        return;
      }
      if (v15 != 947154537) {
        goto LABEL_44;
      }
LABEL_56:
      LODWORD(v68.__r_.__value_.__l.__data_) = 1;
      nitro::variable_type::variable_type((_DWORD *)a2, &v68);
      return;
    }
LABEL_58:
    LODWORD(v68.__r_.__value_.__l.__data_) = 8;
    nitro::variable_type::variable_type((_DWORD *)a2, &v68);
    return;
  }
  if (*(_WORD *)v5 == 28265 && *((unsigned char *)this + 10) == 116) {
    goto LABEL_45;
  }
LABEL_44:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)this + 1, "int64"))
  {
LABEL_45:
    LODWORD(v68.__r_.__value_.__l.__data_) = 4;
    nitro::variable_type::variable_type((_DWORD *)a2, &v68);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, "uint8"))
  {
    LODWORD(v68.__r_.__value_.__l.__data_) = 5;
    nitro::variable_type::variable_type((_DWORD *)a2, &v68);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, "uint16"))
  {
    LODWORD(v68.__r_.__value_.__l.__data_) = 6;
    nitro::variable_type::variable_type((_DWORD *)a2, &v68);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, "uint32"))
  {
    LODWORD(v68.__r_.__value_.__l.__data_) = 7;
    nitro::variable_type::variable_type((_DWORD *)a2, &v68);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, "uint64")) {
    goto LABEL_58;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, "float")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, "fp32"))
  {
    LODWORD(v68.__r_.__value_.__l.__data_) = 9;
    nitro::variable_type::variable_type((_DWORD *)a2, &v68);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, "fp64"))
  {
    LODWORD(v68.__r_.__value_.__l.__data_) = 10;
    nitro::variable_type::variable_type((_DWORD *)a2, &v68);
    return;
  }
  uint64_t v17 = *((void *)this + 6);
  if (*((void *)this + 7) == v17)
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v17 + 8), "list"))
  {
    uint64_t v19 = *((void *)this + 6);
    uint64_t v20 = *(nitro::ir **)(v19 + 120);
    uint64_t v21 = *(void *)(v19 + 128) - (void)v20;
    v68.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v21 >> 3);
    if (v21 != 72)
    {
      v65[0] = &v68;
      nitro::ir::parse_type_internal(nitro::SExp const&)::$_1::operator()();
    }
    nitro::ir::parse_type_internal((uint64_t *)&v68, v20, v18);
    nitro::variable_type::variable_type((nitro::variable_type *)a2, (const nitro::list_type *)&v68);
    nitro::list_type::~list_type((nitro::list_type *)&v68);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(*((void *)this + 6) + 8), "dict"))
  {
    uint64_t v23 = *((void *)this + 6);
    long long v24 = *(nitro::ir **)(v23 + 120);
    uint64_t v25 = *(void *)(v23 + 128) - (void)v24;
    v68.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v25 >> 3);
    if (v25 != 144)
    {
      v65[0] = &v68;
      nitro::ir::parse_type_internal(nitro::SExp const&)::$_2::operator()();
    }
    nitro::ir::parse_type_internal((uint64_t *)&v68, v24, v22);
    nitro::ir::parse_type_internal(&v69, (nitro::ir *)(*(void *)(*((void *)this + 6) + 120) + 72), v26);
    nitro::variable_type::variable_type((nitro::variable_type *)a2, (const nitro::dict_type *)&v68);
    nitro::dict_type::~dict_type((nitro::dict_type *)&v68);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(*((void *)this + 6) + 8), "string"))
  {
    nitro::variable_type::variable_type((_DWORD *)a2);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(*((void *)this + 6) + 8), "tensor"))
  {
    nitro::SExp::SExp((uint64_t)v65, *((void *)this + 6) + 72);
    v68.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * ((v67 - v66) >> 3);
    if (v67 == v66)
    {
      v62[0] = (uint64_t)&v68;
      nitro::ir::parse_type_internal(nitro::SExp const&)::$_3::operator()();
    }
    nitro::ir::parse_type_internal((uint64_t *)v53, v66, v27);
    char v50 = 0;
    int v51 = 0;
    uint64_t v52 = 0;
    uint64_t v28 = v66;
    if (0x8E38E38E38E38E39 * ((v67 - v66) >> 3) >= 2)
    {
      unint64_t v29 = 1;
      uint64_t v30 = 72;
      while (2)
      {
        nitro::SExp::SExp((uint64_t)v62, (uint64_t)v28 + v30);
        switch(v64)
        {
          case 1:
            uint64_t v31 = (uint64_t)v63;
            goto LABEL_97;
          case 2:
            double v32 = v63;
            size_t __idx = 0;
            int v33 = (char *)(*(void *)&v63 + 8);
            if (*(char *)(*(void *)&v63 + 31) < 0) {
              int v33 = *(char **)(*(void *)&v63 + 8);
            }
            std::string::basic_string[abi:ne180100]<0>(&__str, v33);
            uint64_t v31 = std::stoll(&__str, &__idx, 10);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (*(char *)(*(void *)&v32 + 31) < 0) {
              uint64_t v34 = *(void *)(*(void *)&v32 + 16);
            }
            else {
              uint64_t v34 = *(unsigned __int8 *)(*(void *)&v32 + 31);
            }
            if (__idx != v34)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              char v44 = std::string::append(&v58, " cannot be interpreted as an integer");
              long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v45;
              v44->__r_.__value_.__l.__size_ = 0;
              v44->__r_.__value_.__r.__words[2] = 0;
              v44->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, &__str);
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            goto LABEL_97;
          case 3:
            std::vector<double>::vector(__p, *(void *)&v63 + 8);
            nitro::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_78;
          case 4:
            memset(v56, 0, sizeof(v56));
            std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(v56, *(void **)(*(void *)&v63 + 8), *(void **)(*(void *)&v63 + 16), (uint64_t)(*(void *)(*(void *)&v63 + 16) - *(void *)(*(void *)&v63 + 8)) >> 4);
            nitro::flexible_type_fail(0);
            std::vector<nitro::flexible_type>::~vector[abi:ne180100](v56);
            goto LABEL_78;
          case 5:
            memset(v55, 0, sizeof(v55));
            std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)v55, *(char **)(*(void *)&v63 + 8), *(char **)(*(void *)&v63 + 16), (uint64_t)(*(void *)(*(void *)&v63 + 16) - *(void *)(*(void *)&v63 + 8)) >> 5);
            nitro::flexible_type_fail(0);
            std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::~vector[abi:ne180100](v55);
            goto LABEL_78;
          case 6:
          case 8:
            __break(1u);
            return;
          case 7:
            goto LABEL_78;
          case 9:
            nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v68, (const nitro::ndarray_container *)(*(void *)&v63 + 8));
            nitro::flexible_type_fail(0);
            nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&v68);
LABEL_78:
            uint64_t v31 = 0;
            goto LABEL_79;
          default:
            uint64_t v31 = *(void *)&v63;
LABEL_97:
            if (v31 < 0)
            {
              v68.__r_.__value_.__r.__words[0] = 0;
              std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)&v50, &v68);
            }
            else
            {
LABEL_79:
              v68.__r_.__value_.__r.__words[0] = v31;
              std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)&v50, &v68);
            }
            nitro::SExp::~SExp((nitro::SExp *)v62);
            ++v29;
            uint64_t v28 = v66;
            v30 += 72;
            if (v29 < 0x8E38E38E38E38E39 * ((v67 - v66) >> 3)) {
              continue;
            }
            goto LABEL_103;
        }
      }
    }
LABEL_103:
    if (v54) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    nitro::tensor_type::tensor_type((uint64_t)&v68, (int)v53[0], (uint64_t)&v50);
    nitro::variable_type::variable_type((_DWORD *)a2, (uint64_t)&v68);
    if (v68.__r_.__value_.__l.__size_)
    {
      v68.__r_.__value_.__r.__words[2] = v68.__r_.__value_.__l.__size_;
      operator delete((void *)v68.__r_.__value_.__l.__size_);
    }
    if (v50)
    {
      int v51 = v50;
      operator delete(v50);
    }
    nitro::variable_type::~variable_type((nitro::variable_type *)v53);
    nitro::SExp::~SExp((nitro::SExp *)v65);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(*((void *)this + 6) + 8), "tuple"))
  {
    nitro::SExp::SExp((uint64_t)&v68, *((void *)this + 6) + 72);
    memset(v53, 0, 24);
    uint64_t v35 = v70;
    for (uint64_t i = v71; v35 != i; v35 += 72)
    {
      uint64_t v37 = (nitro::ir *)nitro::SExp::SExp((uint64_t)v65, v35);
      nitro::ir::parse_type_internal(v62, v37, v38);
      std::vector<nitro::variable_type>::push_back[abi:ne180100]((uint64_t)v53, (uint64_t)v62);
      nitro::variable_type::~variable_type((nitro::variable_type *)v62);
      nitro::SExp::~SExp((nitro::SExp *)v65);
    }
    std::vector<nitro::variable_type>::vector(v65, (uint64_t *)v53);
    nitro::variable_type::variable_type((nitro::variable_type *)a2, (const nitro::tuple_type *)v65);
    nitro::tuple_type::~tuple_type((nitro::tuple_type *)v65);
    std::vector<nitro::variable_type>::~vector[abi:ne180100](v53);
    nitro::SExp::~SExp((nitro::SExp *)&v68);
    return;
  }
  uint64_t v39 = *((void *)this + 6);
  uint64_t v40 = (const std::string::value_type **)(v39 + 8);
  if ((*(char *)(v39 + 31) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v39 + 31))
    {
      long long v41 = *(_OWORD *)v40;
      v68.__r_.__value_.__r.__words[2] = *(void *)(v39 + 24);
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v41;
      goto LABEL_114;
    }
LABEL_122:
    if (*((int *)global_logger() + 169) <= 6)
    {
      unint64_t v46 = (file_logger *)global_logger();
      started = file_logger::start_stream(v46, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "parse_type_internal", 85, 1);
      int v48 = file_logger::operator<<((pthread_key_t *)started, "Unrecognized expression ");
      nitro::SExp::SExp((uint64_t)v61, (uint64_t)this);
      uint64_t v49 = file_logger::operator<<<nitro::SExp>((uint64_t)v48, (uint64_t)v61);
      file_logger::operator<<(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      nitro::SExp::~SExp((nitro::SExp *)v61);
    }
    nitro::ir::parse_type_internal(nitro::SExp const&)::$_4::operator()();
  }
  std::string::size_type v42 = *(void *)(v39 + 16);
  if (!v42) {
    goto LABEL_122;
  }
  std::string::__init_copy_ctor_external(&v68, *v40, v42);
LABEL_114:
  nitro::variable_type::variable_type((std::string *)a2, (uint64_t)&v68);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
}

void sub_1926252A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void nitro::ir::parse_type_internal(nitro::SExp const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"t.children[1].children.size()", 29);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 48, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      int v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 48, 1);
    std::stringbuf::str();
    uint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      uint64_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        char v22 = v30;
      }
      else {
        char v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    long long v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19262578C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::list_type::~list_type(nitro::list_type *this)
{
  uint64_t v2 = *((unsigned int *)this + 8);
  if (v2 != -1) {
    ((void (*)(char *, nitro::list_type *))off_1EE39BC30[v2])(&v3, this);
  }
  *((_DWORD *)this + 8) = -1;
}

void nitro::ir::parse_type_internal(nitro::SExp const&)::$_2::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  char v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"t.children[1].children.size()", 29);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      int v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    uint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      uint64_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        char v22 = v30;
      }
      else {
        char v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    long long v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192625BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::dict_type::~dict_type(nitro::dict_type *this)
{
  uint64_t v2 = *((unsigned int *)this + 18);
  if (v2 != -1) {
    ((void (*)(char *, char *))off_1EE39BC30[v2])(&v4, (char *)this + 40);
  }
  *((_DWORD *)this + 18) = -1;
  uint64_t v3 = *((unsigned int *)this + 8);
  if (v3 != -1) {
    ((void (*)(char *, nitro::dict_type *))off_1EE39BC30[v3])(&v5, this);
  }
  *((_DWORD *)this + 8) = -1;
}

void nitro::ir::parse_type_internal(nitro::SExp const&)::$_3::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  char v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"params.children.size()", 22);
  char v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 60, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      int v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 60, 1);
    std::stringbuf::str();
    uint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      uint64_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        char v22 = v30;
      }
      else {
        char v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    long long v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192626088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::push_back[abi:ne180100](uint64_t a1, void *a2)
{
  char v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  int v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = operator new(8 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    int v15 = &v14[8 * v10];
    *int v15 = *a2;
    uint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_27;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      int v6 = &v5[-v18];
      int v15 = (void *)((char *)v15 - v18);
      uint64_t v19 = &v14[8 * v10 - 16];
      uint64_t v20 = v5 - 16;
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        _OWORD *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *--int v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[8 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)char v5 = *a2;
    uint64_t v7 = v5 + 8;
  }
  *(void *)(a1 + 8) = v7;
}

uint64_t nitro::tensor_type::tensor_type(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  char v5 = *(const void **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  int64_t v6 = v4 - *(void *)a3;
  if (v4 != *(void *)a3)
  {
    if (v6 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - *(void *)a3);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v7;
    unint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 24) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 16) = v8;
  }
  return a1;
}

void sub_192626398(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<nitro::variable_type>::push_back[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= *(void *)(a1 + 16))
  {
    __n128 result = std::vector<nitro::variable_type>::__push_back_slow_path<nitro::variable_type>((char **)a1, a2);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = 0;
    *(_DWORD *)(v3 + 32) = -1;
    uint64_t v4 = *(unsigned int *)(a2 + 32);
    if (v4 != -1)
    {
      ((void (*)(char *, unint64_t, uint64_t))*(&off_1EE39BCD8 + v4))(&v6, v3, a2);
      *(_DWORD *)(v3 + 32) = v4;
    }
    __n128 result = (char *)(v3 + 40);
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void nitro::tuple_type::~tuple_type(nitro::tuple_type *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v3 = *((void *)this + 1);
    uint64_t v4 = *(void **)this;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 40;
        uint64_t v6 = *(unsigned int *)(v3 - 8);
        if (v6 != -1) {
          ((void (*)(char *, uint64_t))off_1EE39BC30[v6])(&v7, v3 - 40);
        }
        *(_DWORD *)(v3 - 8) = -1;
        v3 -= 40;
      }
      while (v5 != v2);
      uint64_t v4 = *(void **)this;
    }
    *((void *)this + 1) = v2;
    operator delete(v4);
  }
}

pthread_key_t *file_logger::operator<<(pthread_key_t *a1, const char *a2)
{
  uint64_t v4 = (char *)pthread_getspecific(a1[74]);
  if (v4)
  {
    if (v4[280])
    {
      uint64_t v5 = v4 + 16;
      size_t v6 = strlen(a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)a2, v6);
      size_t v7 = strlen(a2);
      if (v7)
      {
        if (a2[v7 - 1] == 10) {
          file_logger::stream_flush((file_logger *)a1);
        }
      }
    }
  }
  return a1;
}

uint64_t file_logger::operator<<<nitro::SExp>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = pthread_getspecific(*(void *)(a1 + 592));
  if (v4 && *((unsigned char *)v4 + 280)) {
    nitro::operator<<(v4 + 2, a2);
  }
  return a1;
}

uint64_t file_logger::operator<<(uint64_t a1, void *(*a2)(void *a1))
{
  uint64_t v4 = pthread_getspecific(*(void *)(a1 + 592));
  if (v4)
  {
    if (a2 == std::endl[abi:ne180100]<char,std::char_traits<char>>)
    {
      if (*((unsigned char *)v4 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush((file_logger *)a1);
        if (*(_DWORD *)(a1 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
  }
  return a1;
}

void nitro::ir::parse_type_internal(nitro::SExp const&)::$_4::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 86, 1);
    uint64_t v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed: ", 14);
    }
    size_t v6 = pthread_getspecific(started[74]);
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"false", 5);
    }
    size_t v7 = pthread_getspecific(started[74]);
    if (v7)
    {
      if (*((unsigned char *)v7 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)":\n", 2);
        file_logger::stream_flush((file_logger *)started);
      }
    }
  }
  log_dispatch<true>::exec(6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 86, "Unrecognized expression", v0, v1, v2, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  void *exception = "assertion failure";
  __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
}

void nitro::ir::parse_type(nitro::ir *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 6);
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(v5 + 8), *(void *)(v5 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(v5 + 8);
    v14.__r_.__value_.__r.__words[2] = *(void *)(v5 + 24);
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
  }
  unint64_t v13 = "TYPE";
  char v12 = 4;
  strcpy((char *)v11, "TYPE");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  if (size != 4) {
    goto LABEL_18;
  }
  if ((*((unsigned char *)&v14.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v14.__r_.__value_.__l.__data_, v11, v14.__r_.__value_.__l.__size_)) {
      goto LABEL_18;
    }
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  else if (*((unsigned char *)&v14.__r_.__value_.__s + 23))
  {
    uint64_t v8 = 0;
    while (v14.__r_.__value_.__s.__data_[v8] == *((unsigned __int8 *)v11 + v8))
    {
      if (HIBYTE(v14.__r_.__value_.__r.__words[2]) == ++v8) {
        goto LABEL_16;
      }
    }
LABEL_18:
    v11[0] = (uint64_t *)&v14;
    v11[1] = (uint64_t *)&v13;
    nitro::ir::parse_type(nitro::SExp const&)::$_0::operator()(v11);
  }
LABEL_16:
  uint64_t v9 = *((void *)this + 6);
  uint64_t v10 = *((void *)this + 7) - v9;
  v14.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v10 >> 3);
  if (v10 != 144)
  {
    v11[0] = (uint64_t *)&v14;
    nitro::ir::parse_type(nitro::SExp const&)::$_1::operator()();
  }
  nitro::SExp::SExp((uint64_t)&v14, v9 + 72);
  nitro::ir::parse_type_internal((nitro::ir *)&v14, a2);
  nitro::SExp::~SExp((nitro::SExp *)&v14);
}

void sub_1926268F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nitro::SExp::~SExp((nitro::SExp *)va);
  _Unwind_Resume(a1);
}

void sub_192626908(_Unwind_Exception *exception_object)
{
}

void sub_192626914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ir::parse_type(nitro::SExp const&)::$_0::operator()(uint64_t **a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Assertion failed: (", 19);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1);
  uint64_t v4 = (void *)std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"): ", 3);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"sexp.children[0].string_value", 29);
  size_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"==", 2);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\"TYPE\"", 6);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"  [", 3);
  int v10 = *((char *)*a1 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (uint64_t)*a1;
  }
  else {
    uint64_t v11 = **a1;
  }
  if (v10 >= 0) {
    uint64_t v12 = *((unsigned __int8 *)*a1 + 23);
  }
  else {
    uint64_t v12 = (*a1)[1];
  }
  unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  LOBYTE(v37[0]) = 32;
  std::string v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v37, 1);
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"==", 2);
  LOBYTE(v37[0]) = 32;
  unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v37, 1);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"TYPE", 4);
  uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v18);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v19 = (file_logger *)global_logger();
    started = file_logger::start_stream(v19, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 92, 1);
    std::stringbuf::str();
    uint64_t v21 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v21 && v21[280])
    {
      long long v22 = v21 + 16;
      if ((v35 & 0x80u) == 0) {
        uint64_t v23 = __p;
      }
      else {
        uint64_t v23 = (void **)__p[0];
      }
      if ((v35 & 0x80u) == 0) {
        uint64_t v24 = v35;
      }
      else {
        uint64_t v24 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    }
    if ((char)v35 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v25 = (file_logger *)global_logger();
    uint64_t v26 = file_logger::start_stream(v25, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 92, 1);
    std::stringbuf::str();
    uint64_t v27 = (char *)pthread_getspecific(*((void *)v26 + 74));
    if (v27 && v27[280])
    {
      unsigned __int8 v28 = v27 + 16;
      if ((v38 & 0x80u) == 0) {
        unint64_t v29 = v37;
      }
      else {
        unint64_t v29 = (void **)v37[0];
      }
      if ((v38 & 0x80u) == 0) {
        uint64_t v30 = v38;
      }
      else {
        uint64_t v30 = (uint64_t)v37[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    }
    unsigned __int8 v31 = pthread_getspecific(*((void *)v26 + 74));
    if (v31)
    {
      if (*((unsigned char *)v31 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v26);
        if (*((_DWORD *)v26 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v38 < 0) {
      operator delete(v37[0]);
    }
  }
  double v32 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192626C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse_type(nitro::SExp const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  size_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  int v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 93, 1);
    std::stringbuf::str();
    std::string v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        unint64_t v16 = __p;
      }
      else {
        unint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 93, 1);
    std::stringbuf::str();
    uint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      uint64_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        long long v22 = v30;
      }
      else {
        long long v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    uint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192627038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse_function_type(nitro::ir *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *((void *)this + 6);
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(v5 + 8), *(void *)(v5 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(v5 + 8);
    v25.__r_.__value_.__r.__words[2] = *(void *)(v5 + 24);
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v6;
  }
  std::string __p = "TYPE";
  char v23 = 4;
  strcpy((char *)__s2, "TYPE");
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v25.__r_.__value_.__l.__size_;
  }
  if (size != 4) {
    goto LABEL_45;
  }
  if ((*((unsigned char *)&v25.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v25.__r_.__value_.__l.__data_, __s2, v25.__r_.__value_.__l.__size_)) {
      goto LABEL_45;
    }
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  else if (*((unsigned char *)&v25.__r_.__value_.__s + 23))
  {
    uint64_t v8 = 0;
    while (v25.__r_.__value_.__s.__data_[v8] == *((unsigned __int8 *)__s2 + v8))
    {
      if (HIBYTE(v25.__r_.__value_.__r.__words[2]) == ++v8) {
        goto LABEL_16;
      }
    }
LABEL_45:
    __s2[0] = (uint64_t *)&v25;
    __s2[1] = (uint64_t *)&__p;
    nitro::ir::parse_function_type(nitro::SExp const&)::$_0::operator()(__s2);
  }
LABEL_16:
  uint64_t v9 = *((void *)this + 6);
  uint64_t v10 = *((void *)this + 7) - v9;
  v25.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v10 >> 3);
  if (v10 != 216)
  {
    __s2[0] = (uint64_t *)&v25;
    nitro::ir::parse_function_type(nitro::SExp const&)::$_1::operator()();
  }
  std::string __p = 0;
  unsigned __int8 v28 = 0;
  unint64_t v29 = 0;
  LODWORD(v25.__r_.__value_.__l.__data_) = 0;
  int v26 = 0;
  nitro::ir::parse_type_internal((nitro::ir *)(v9 + 72), (uint64_t)__s2);
  if (v26 == -1)
  {
    if (v24 == -1) {
      goto LABEL_24;
    }
  }
  else if (v24 == -1)
  {
    ((void (*)(std::string **, std::string *))off_1EE39BC30[v26])(&v30, &v25);
    int v26 = -1;
    goto LABEL_22;
  }
  uint64_t v30 = &v25;
  ((void (*)(std::string **, std::string *, uint64_t **))off_1EE39BC68[v24])(&v30, &v25, __s2);
LABEL_22:
  if (v24 != -1) {
    ((void (*)(std::string **, uint64_t **))off_1EE39BC30[v24])(&v30, __s2);
  }
LABEL_24:
  uint64_t v11 = *((void *)this + 6);
  uint64_t v12 = *(nitro::ir **)(v11 + 192);
  for (i = *(nitro::ir **)(v11 + 200); v12 != i; uint64_t v12 = (nitro::ir *)((char *)v12 + 72))
  {
    nitro::ir::parse_type_internal(v12, (uint64_t)__s2);
    std::string v14 = v28;
    if ((unint64_t)v28 >= v29)
    {
      unint64_t v16 = std::vector<nitro::variable_type>::__push_back_slow_path<nitro::variable_type>((char **)&__p, (uint64_t)__s2);
    }
    else
    {
      char *v28 = 0;
      *((_DWORD *)v14 + 8) = -1;
      unsigned int v15 = v24;
      if (v24 != -1)
      {
        ((void (*)(std::string **, char *, uint64_t **))*(&off_1EE39BCD8 + v24))(&v30, v14, __s2);
        *((_DWORD *)v14 + 8) = v15;
      }
      unint64_t v16 = v14 + 40;
    }
    unsigned __int8 v28 = v16;
    if (v24 != -1) {
      ((void (*)(std::string **, uint64_t **))off_1EE39BC30[v24])(&v30, __s2);
    }
  }
  std::pair<std::vector<nitro::variable_type>,nitro::variable_type>::pair[abi:ne180100]<std::vector<nitro::variable_type>&,nitro::variable_type&,0>(a2, (uint64_t *)&__p, (uint64_t)&v25);
  if (v26 != -1) {
    ((void (*)(uint64_t **, std::string *))off_1EE39BC30[v26])(__s2, &v25);
  }
  uint64_t v17 = (char *)__p;
  if (__p)
  {
    uint64_t v18 = v28;
    uint64_t v19 = __p;
    if (v28 != __p)
    {
      do
      {
        uint64_t v20 = v18 - 40;
        uint64_t v21 = *((unsigned int *)v18 - 2);
        if (v21 != -1) {
          ((void (*)(std::string *, char *))off_1EE39BC30[v21])(&v25, v18 - 40);
        }
        *((_DWORD *)v18 - 2) = -1;
        v18 -= 40;
      }
      while (v20 != v17);
      uint64_t v19 = __p;
    }
    unsigned __int8 v28 = v17;
    operator delete(v19);
  }
}

void sub_1926274B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  nitro::variable_type::~variable_type((nitro::variable_type *)va);
  std::vector<nitro::variable_type>::~vector[abi:ne180100]((void **)va1);
  _Unwind_Resume(a1);
}

void sub_1926274F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ir::parse_function_type(nitro::SExp const&)::$_0::operator()(uint64_t **a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Assertion failed: (", 19);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)":", 1);
  uint64_t v4 = (void *)std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"): ", 3);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"sexp.children[0].string_value", 29);
  size_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"==", 2);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\"TYPE\"", 6);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"  [", 3);
  int v10 = *((char *)*a1 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (uint64_t)*a1;
  }
  else {
    uint64_t v11 = **a1;
  }
  if (v10 >= 0) {
    uint64_t v12 = *((unsigned __int8 *)*a1 + 23);
  }
  else {
    uint64_t v12 = (*a1)[1];
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  LOBYTE(v37[0]) = 32;
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v37, 1);
  unsigned int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"==", 2);
  LOBYTE(v37[0]) = 32;
  unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v37, 1);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"TYPE", 4);
  uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v18);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v19 = (file_logger *)global_logger();
    started = file_logger::start_stream(v19, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 100, 1);
    std::stringbuf::str();
    uint64_t v21 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v21 && v21[280])
    {
      long long v22 = v21 + 16;
      if ((v35 & 0x80u) == 0) {
        char v23 = __p;
      }
      else {
        char v23 = (void **)__p[0];
      }
      if ((v35 & 0x80u) == 0) {
        uint64_t v24 = v35;
      }
      else {
        uint64_t v24 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    }
    if ((char)v35 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string v25 = (file_logger *)global_logger();
    int v26 = file_logger::start_stream(v25, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 100, 1);
    std::stringbuf::str();
    uint64_t v27 = (char *)pthread_getspecific(*((void *)v26 + 74));
    if (v27 && v27[280])
    {
      unsigned __int8 v28 = v27 + 16;
      if ((v38 & 0x80u) == 0) {
        unint64_t v29 = v37;
      }
      else {
        unint64_t v29 = (void **)v37[0];
      }
      if ((v38 & 0x80u) == 0) {
        uint64_t v30 = v38;
      }
      else {
        uint64_t v30 = (uint64_t)v37[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    }
    unsigned __int8 v31 = pthread_getspecific(*((void *)v26 + 74));
    if (v31)
    {
      if (*((unsigned char *)v31 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v26);
        if (*((_DWORD *)v26 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v38 < 0) {
      operator delete(v37[0]);
    }
  }
  double v32 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192627810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ir::parse_function_type(nitro::SExp const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sexp.children.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  size_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  int v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      unsigned int v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        unint64_t v16 = __p;
      }
      else {
        unint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      uint64_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        long long v22 = v30;
      }
      else {
        long long v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    uint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  std::string v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192627C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::vector<nitro::variable_type>,nitro::variable_type>::pair[abi:ne180100]<std::vector<nitro::variable_type>&,nitro::variable_type&,0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = std::vector<nitro::variable_type>::vector((void *)a1, a2);
  *((unsigned char *)v5 + 24) = 0;
  *((_DWORD *)v5 + 14) = -1;
  uint64_t v6 = *(unsigned int *)(a3 + 32);
  if (v6 != -1)
  {
    ((void (*)(unsigned char *, void *, uint64_t))off_1EE39BCA0[v6])(v8, v5 + 3, a3);
    *(_DWORD *)(a1 + 56) = v6;
  }
  return a1;
}

void sub_192627DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = *((unsigned int *)v13 + 14);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_1EE39BC30[v16])(&a12, v14);
  }
  *((_DWORD *)v13 + 14) = -1;
  uint64_t v17 = *v13;
  if (*v13)
  {
    uint64_t v18 = v13[1];
    uint64_t v19 = *v13;
    if (v18 != v17)
    {
      do
      {
        uint64_t v20 = v18 - 40;
        uint64_t v21 = *((unsigned int *)v18 - 2);
        if (v21 != -1) {
          ((void (*)(char *, char *))off_1EE39BC30[v21])(&a13, v18 - 40);
        }
        *((_DWORD *)v18 - 2) = -1;
        v18 -= 40;
      }
      while (v20 != v17);
      uint64_t v19 = *v13;
    }
    v13[1] = v17;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = *(_DWORD **)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (!v5)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, _DWORD *))off_1EE39BC30[v5])(&v6, v4);
  }
  _DWORD *v4 = *a3;
  v4[8] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 32);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_1EE39BC30[v5])(&v10, v4);
LABEL_7:
    *(_DWORD *)uint64_t v4 = *(_DWORD *)a3;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 8) = 0;
    __n128 result = *(__n128 *)(a3 + 8);
    *(__n128 *)(v4 + 8) = result;
    *(void *)(v4 + 24) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t v8 = (void *)(a2 + 8);
  size_t v7 = *(void **)(a2 + 8);
  if (v7)
  {
    *(void *)(a2 + 16) = v7;
    operator delete(v7);
    void *v8 = 0;
    v8[1] = 0;
    unsigned char v8[2] = 0;
  }
  __n128 result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSY_EEEDcSQ_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[2].n128_u32[0];
  if (v5 == -1) {
    goto LABEL_9;
  }
  if (v5 != 2)
  {
    ((void (*)(char *, __n128 *))off_1EE39BC30[v5])(&v8, v4);
LABEL_9:
    __n128 result = *a3;
    __n128 *v4 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    v4[2].n128_u32[0] = 2;
    return result;
  }
  __n128 result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  size_t v7 = (std::__shared_weak_count *)a2->n128_u64[1];
  *a2 = result;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSY_EEEDcSQ_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[2].n128_u32[0];
  if (v5 == -1) {
    goto LABEL_9;
  }
  if (v5 != 3)
  {
    ((void (*)(char *, __n128 *))off_1EE39BC30[v5])(&v8, v4);
LABEL_9:
    __n128 result = *a3;
    __n128 *v4 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    v4[2].n128_u32[0] = 3;
    return result;
  }
  __n128 result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  size_t v7 = (std::__shared_weak_count *)a2->n128_u64[1];
  *a2 = result;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 32);
  if (v2 != -1)
  {
    if (v2 == 4) {
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EE39BC30[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSY_EEEDcSQ_DpT0_(__n128 **a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[2].n128_u32[0];
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 5)
  {
    ((void (*)(char *, __n128 *))off_1EE39BC30[v5])(&v8, v4);
LABEL_7:
    v4[2].n128_u32[0] = -1;
    __n128 result = *a3;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    __n128 *v4 = result;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    v4[2].n128_u32[0] = 5;
    return result;
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  __n128 result = *a3;
  *(void *)(a2 + 16) = a3[1].n128_u64[0];
  *(__n128 *)a2 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSY_EEEDcSQ_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[2].n128_u32[0];
  if (v5 == -1) {
    goto LABEL_9;
  }
  if (v5 != 6)
  {
    ((void (*)(char *, __n128 *))off_1EE39BC30[v5])(&v8, v4);
LABEL_9:
    __n128 result = *a3;
    __n128 *v4 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    v4[2].n128_u32[0] = 6;
    return result;
  }
  __n128 result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  size_t v7 = (std::__shared_weak_count *)a2->n128_u64[1];
  *a2 = result;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return result;
}

void *std::vector<double>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    if (v5 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    char v6 = (char *)operator new(v3 - *(void *)a2);
    *a1 = v6;
    a1[1] = v6;
    size_t v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1926283F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t streambuffdestructor(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x1E4FBA408];
    uint64_t v3 = *MEMORY[0x1E4FBA408];
    *(void *)__n128 result = *MEMORY[0x1E4FBA408];
    uint64_t v4 = *(void *)(v2 + 72);
    *(void *)(result + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = MEMORY[0x1E4FBA470] + 16;
    if (*(char *)(result + 111) < 0) {
      operator delete(*(void **)(result + 88));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x192FF15B0](v1 + 128);
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

void file_logger::file_logger(file_logger *this)
{
  uint64_t v2 = MEMORY[0x1E4FBA468] + 64;
  *((void *)this + 52) = MEMORY[0x1E4FBA468] + 64;
  uint64_t v3 = (char *)this + 8;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  *(void *)this = v5;
  *(void *)((char *)this + *(void *)(v5 - 24)) = v4;
  char v6 = (std::ios_base *)((char *)this + *(void *)(*(void *)this - 24));
  std::ios_base::init(v6, (char *)this + 8);
  uint64_t v7 = MEMORY[0x1E4FBA468] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(void *)this = v7;
  *((void *)this + 52) = v2;
  MEMORY[0x192FF1030](v3);
  *((void *)this + 73) = 0;
  *(_OWORD *)((char *)this + 568) = 0u;
  *((void *)this + 85) = -1;
  *((void *)this + 89) = 0;
  *((void *)this + 93) = 0;
  *((void *)this + 97) = 0;
  *((void *)this + 101) = 0;
  *((void *)this + 105) = 0;
  *((void *)this + 109) = 0;
  *((void *)this + 113) = 0;
  *((void *)this + 117) = 0;
  MEMORY[0x192FF0F50]((char *)this + 568, "");
  *((unsigned char *)this + 672) = 1;
  *((_DWORD *)this + 169) = 3;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 608), 0);
  pthread_key_create((pthread_key_t *)this + 74, (void (__cdecl *)(void *))streambuffdestructor);
}

void sub_192628738(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](v1);
  _Unwind_Resume(a1);
}

void sub_192628760(_Unwind_Exception *a1)
{
  std::function<void ()(int,char const*,unsigned long)>::~function((void *)(v1 + 912));
  std::function<void ()(int,char const*,unsigned long)>::~function((void *)(v1 + 880));
  std::function<void ()(int,char const*,unsigned long)>::~function((void *)(v1 + 848));
  std::function<void ()(int,char const*,unsigned long)>::~function((void *)(v1 + 816));
  std::function<void ()(int,char const*,unsigned long)>::~function((void *)(v1 + 784));
  std::function<void ()(int,char const*,unsigned long)>::~function((void *)(v1 + 752));
  std::function<void ()(int,char const*,unsigned long)>::~function((void *)(v1 + 720));
  std::function<void ()(int,char const*,unsigned long)>::~function((void *)(v1 + 688));
  if (*(char *)(v1 + 591) < 0) {
    operator delete(*v2);
  }
  std::ofstream::~ofstream((void *)v1);
  _Unwind_Resume(a1);
}

void *std::function<void ()(int,char const*,unsigned long)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void file_logger::~file_logger(file_logger *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 608);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 608));
  if (!*(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 32))
  {
    std::ostream::flush();
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*(void *)this - 24)), *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 32) | 4);
    }
  }
  pthread_mutex_unlock(v2);
  pthread_mutex_destroy(v2);
  for (uint64_t i = 0; i != -256; i -= 32)
  {
    uint64_t v4 = (char *)this + i + 912;
    uint64_t v5 = *(char **)((char *)this + i + 936);
    if (v4 == v5)
    {
      (*(void (**)(char *))(*(void *)v4 + 32))((char *)this + i + 912);
    }
    else if (v5)
    {
      (*(void (**)(char *))(*(void *)v5 + 40))(v5);
    }
  }
  if (*((char *)this + 591) < 0) {
    operator delete(*((void **)this + 71));
  }
  uint64_t v6 = MEMORY[0x1E4FBA400];
  uint64_t v7 = *MEMORY[0x1E4FBA400];
  *(void *)this = *MEMORY[0x1E4FBA400];
  *(void *)((char *)this + *(void *)(v7 - 24)) = *(void *)(v6 + 24);
  MEMORY[0x192FF1040]((char *)this + 8);
  std::ostream::~ostream();
  MEMORY[0x192FF15B0]((char *)this + 416);
}

uint64_t file_logger::_log(uint64_t this, int a2, const char *a3, const char *a4, int a5, const char *a6, va_list a7)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(this + 676) <= a2)
  {
    uint64_t v10 = this;
    int v11 = snprintf(__str, 0x400uLL, "%s(%s:%d): ", (&messages)[a2], a4, a5);
    uint64_t v12 = v11;
    uint64_t v13 = &__str[v11];
    int v14 = vsnprintf(v13, 1024 - v11, a6, a7);
    uint64_t v15 = v12 + v14;
    __str[v15] = 10;
    __str[(int)v15 + 1] = 0;
    if (*(_DWORD *)(v10 + 4 * a2 + 944))
    {
      int v16 = v14;
      pthread_mutex_lock((pthread_mutex_t *)(v10 + 608));
      uint64_t v17 = *(void *)(v10 + 32 * a2 + 712);
      if (v17)
      {
        int v20 = a2;
        uint64_t v18 = v16;
        uint64_t v19 = v13;
        (*(void (**)(uint64_t, int *, char **, uint64_t *))(*(void *)v17 + 48))(v17, &v20, &v19, &v18);
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v10 + 608));
    }
    return file_logger::_lograw((file_logger *)v10, a2, __str);
  }
  return this;
}

uint64_t file_logger::_lograw(file_logger *this, int a2, const char *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (pthread_mutex_t *)((char *)this + 608);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 608));
  if (!*(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 32))
  {
    std::ostream::write();
    std::ostream::flush();
  }
  uint64_t result = pthread_mutex_unlock(v5);
  if (*((unsigned char *)this + 672) || *((unsigned char *)this + 673))
  {
    pthread_mutex_lock(v5);
    switch(a2)
    {
      case 1:
        uint64_t v7 = (FILE **)MEMORY[0x1E4F143C8];
        if (!*((unsigned char *)this + 673)) {
          uint64_t v7 = (FILE **)MEMORY[0x1E4F143D8];
        }
        char v8 = *v7;
        int v9 = 33;
        goto LABEL_20;
      case 3:
        uint64_t v10 = (FILE **)MEMORY[0x1E4F143C8];
        if (!*((unsigned char *)this + 673)) {
          uint64_t v10 = (FILE **)MEMORY[0x1E4F143D8];
        }
        char v8 = *v10;
        int v9 = 32;
        goto LABEL_20;
      case 5:
        int v11 = (FILE **)MEMORY[0x1E4F143C8];
        if (!*((unsigned char *)this + 673)) {
          int v11 = (FILE **)MEMORY[0x1E4F143D8];
        }
        char v8 = *v11;
        int v9 = 35;
        goto LABEL_20;
      case 6:
        uint64_t v12 = (FILE **)MEMORY[0x1E4F143C8];
        if (!*((unsigned char *)this + 673)) {
          uint64_t v12 = (FILE **)MEMORY[0x1E4F143D8];
        }
        char v8 = *v12;
        int v9 = 31;
LABEL_20:
        snprintf(__str, 0xDuLL, "%c[%d;%dm", 27, 1, v9);
        fputs(__str, v8);
        goto LABEL_21;
      case 7:
        int v14 = (FILE *)*MEMORY[0x1E4F143C8];
        snprintf(__str, 0xDuLL, "%c[%d;%dm", 27, 1, 31);
        fputs(__str, v14);
        goto LABEL_25;
      default:
        if (a2 < 7)
        {
LABEL_21:
          std::ostream::write();
          pthread_mutex_unlock(v5);
          uint64_t v13 = (FILE **)MEMORY[0x1E4F143C8];
          if (!*((unsigned char *)this + 673)) {
            uint64_t v13 = (FILE **)MEMORY[0x1E4F143D8];
          }
        }
        else
        {
LABEL_25:
          std::ostream::write();
          pthread_mutex_unlock(v5);
          uint64_t v13 = (FILE **)MEMORY[0x1E4F143C8];
        }
        uint64_t v15 = *v13;
        snprintf(__str, 0x14uLL, "%c[0m", 27);
        uint64_t result = fputs(__str, v15);
        break;
    }
  }
  return result;
}

void nitro::nitro_builtins::register_builtins(uint64_t a1)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "__len__");
  v88[0] = &unk_1EE377788;
  v88[1] = nitro::nitro_builtins::arr_len;
  uint64_t v89 = v88;
  nitro::nitro_builtins::wrap_ft_function(v88, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v89 == v88)
  {
    (*(void (**)(void *))(v88[0] + 32))(v88);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_13;
  }
  if (v89) {
    (*(void (**)(void *))(*v89 + 40))(v89);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_13:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_9:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "__str__");
  v86[0] = &unk_1EE377788;
  v86[1] = nitro::nitro_builtins::cast_str;
  char v87 = v86;
  nitro::nitro_builtins::wrap_ft_function(v86, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v87 == v86)
  {
    (*(void (**)(void *))(v86[0] + 32))(v86);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_23;
  }
  if (v87) {
    (*(void (**)(void *))(*v87 + 40))(v87);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_23:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_19:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&__p, "__double__");
  v84[0] = &unk_1EE377788;
  v84[1] = nitro::nitro_builtins::cast_double;
  int v85 = v84;
  nitro::nitro_builtins::wrap_ft_function(v84, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v85 == v84)
  {
    (*(void (**)(void *))(v84[0] + 32))(v84);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_33;
  }
  if (v85) {
    (*(void (**)(void *))(*v85 + 40))(v85);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_33:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_29:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__p, "__float__");
  v82[0] = &unk_1EE377788;
  v82[1] = nitro::nitro_builtins::cast_double;
  size_t v83 = v82;
  nitro::nitro_builtins::wrap_ft_function(v82, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v83 == v82)
  {
    (*(void (**)(void *))(v82[0] + 32))(v82);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }
  if (v83) {
    (*(void (**)(void *))(*v83 + 40))(v83);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_43:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_39:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "__int__");
  v80[0] = &unk_1EE377788;
  v80[1] = nitro::nitro_builtins::cast_int;
  char v81 = v80;
  nitro::nitro_builtins::wrap_ft_function(v80, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v81 == v80)
  {
    (*(void (**)(void *))(v80[0] + 32))(v80);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_53;
  }
  if (v81) {
    (*(void (**)(void *))(*v81 + 40))(v81);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_53:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_49:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "__max__");
  v78[0] = &unk_1EE3779F0;
  v78[1] = nitro::nitro_builtins::flex_max;
  int v79 = v78;
  nitro::nitro_builtins::wrap_ft_function(v78, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v79 == v78)
  {
    (*(void (**)(void *))(v78[0] + 32))(v78);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_63;
  }
  if (v79) {
    (*(void (**)(void))(*v79 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_63:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_59:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "__min__");
  v76[0] = &unk_1EE3779F0;
  v76[1] = nitro::nitro_builtins::flex_min;
  std::string::size_type v77 = v76;
  nitro::nitro_builtins::wrap_ft_function(v76, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v77 == v76)
  {
    (*(void (**)(void *))(v76[0] + 32))(v76);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_73;
  }
  if (v77) {
    (*(void (**)(void))(*v77 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_73:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_69:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "MakeTensorArray");
  v74[0] = &unk_1EE3777E0;
  v74[1] = nitro::nitro_builtins::MakeTensorArray;
  char v75 = v74;
  nitro::nitro_builtins::wrap_ft_function(v74, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v75 == v74)
  {
    (*(void (**)(void *))(v74[0] + 32))(v74);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_83;
  }
  if (v75) {
    (*(void (**)(void))(*v75 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_83:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_79:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&__p, "TensorArrayScatter");
  v72[0] = &unk_1EE377838;
  v72[1] = nitro::nitro_builtins::TensorArrayScatter;
  int v73 = v72;
  nitro::nitro_builtins::wrap_ft_function(v72, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v73 == v72)
  {
    (*(void (**)(void *))(v72[0] + 32))(v72);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_89;
    }
    goto LABEL_93;
  }
  if (v73) {
    (*(void (**)(void))(*v73 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_93:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_89:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&__p, "TensorArrayGather");
  v70[0] = &unk_1EE3777E0;
  v70[1] = nitro::nitro_builtins::TensorArrayGather;
  uint64_t v71 = v70;
  nitro::nitro_builtins::wrap_ft_function(v70, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v71 == v70)
  {
    (*(void (**)(void *))(v70[0] + 32))(v70);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_99;
    }
    goto LABEL_103;
  }
  if (v71) {
    (*(void (**)(void))(*v71 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_103:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_99:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "TensorArrayRead");
  v68[0] = &unk_1EE3777E0;
  v68[1] = nitro::nitro_builtins::TensorArrayRead;
  uint64_t v69 = v68;
  nitro::nitro_builtins::wrap_ft_function(v68, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v69 == v68)
  {
    (*(void (**)(void *))(v68[0] + 32))(v68);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_109;
    }
    goto LABEL_113;
  }
  if (v69) {
    (*(void (**)(void))(*v69 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_113:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_109:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&__p, "TensorArrayWrite");
  v66[0] = &unk_1EE377838;
  v66[1] = nitro::nitro_builtins::TensorArrayWrite;
  int v67 = v66;
  nitro::nitro_builtins::wrap_ft_function(v66, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v67 == v66)
  {
    (*(void (**)(void *))(v66[0] + 32))(v66);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_119;
    }
    goto LABEL_123;
  }
  if (v67) {
    (*(void (**)(void))(*v67 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_123:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_119:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "TensorArraySize");
  v64[0] = &unk_1EE377998;
  v64[1] = nitro::nitro_builtins::TensorArraySize;
  uint64_t v65 = v64;
  nitro::nitro_builtins::wrap_ft_function(v64, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v65 == v64)
  {
    (*(void (**)(void *))(v64[0] + 32))(v64);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_129;
    }
    goto LABEL_133;
  }
  if (v65) {
    (*(void (**)(void))(*v65 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_133:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_129:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__p, "Skip");
  v62[0] = &unk_1EE377788;
  v62[1] = nitro::nitro_builtins::Skip;
  double v63 = v62;
  nitro::nitro_builtins::wrap_ft_function(v62, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v63 == v62)
  {
    (*(void (**)(void *))(v62[0] + 32))(v62);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_139;
    }
    goto LABEL_143;
  }
  if (v63) {
    (*(void (**)(void))(*v63 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_143:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_139:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&__p, "ExpandDims");
  v60[0] = &unk_1EE3777E0;
  v60[1] = nitro::nitro_builtins::ExpandDims;
  uint64_t v61 = v60;
  nitro::nitro_builtins::wrap_ft_function(v60, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v61 == v60)
  {
    (*(void (**)(void *))(v60[0] + 32))(v60);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_149;
    }
    goto LABEL_153;
  }
  if (v61) {
    (*(void (**)(void))(*v61 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_153:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_149:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__p, "Range");
  v58[0] = &unk_1EE377890;
  v58[1] = nitro::nitro_builtins::Range;
  char v59 = v58;
  nitro::nitro_builtins::wrap_ft_function(v58, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v59 == v58)
  {
    (*(void (**)(void *))(v58[0] + 32))(v58);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_159;
    }
    goto LABEL_163;
  }
  if (v59) {
    (*(void (**)(void))(*v59 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_163:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_159:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__p, "Split");
  v56[0] = &unk_1EE377890;
  v56[1] = nitro::nitro_builtins::Split;
  int v57 = v56;
  nitro::nitro_builtins::wrap_ft_function(v56, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v57 == v56)
  {
    (*(void (**)(void *))(v56[0] + 32))(v56);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_169;
    }
    goto LABEL_173;
  }
  if (v57) {
    (*(void (**)(void))(*v57 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_173:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_169:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__p, "Transpose");
  v54[0] = &unk_1EE3777E0;
  v54[1] = nitro::nitro_builtins::Transpose;
  uint64_t v55 = v54;
  nitro::nitro_builtins::wrap_ft_function(v54, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v55 == v54)
  {
    (*(void (**)(void *))(v54[0] + 32))(v54);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_179;
    }
    goto LABEL_183;
  }
  if (v55) {
    (*(void (**)(void))(*v55 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_183:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_179:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "BiasAdd");
  v52[0] = &unk_1EE3777E0;
  v52[1] = nitro::nitro_builtins::BiasAdd;
  char v53 = v52;
  nitro::nitro_builtins::wrap_ft_function(v52, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v53 == v52)
  {
    (*(void (**)(void *))(v52[0] + 32))(v52);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_189;
    }
    goto LABEL_193;
  }
  if (v53) {
    (*(void (**)(void))(*v53 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_193:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_189:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 3;
  LODWORD(__p.__r_.__value_.__l.__data_) = 7173459;
  v50[0] = &unk_1EE377890;
  v50[1] = nitro::nitro_builtins::Sum;
  int v51 = v50;
  nitro::nitro_builtins::wrap_ft_function(v50, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v51 == v50)
  {
    (*(void (**)(void *))(v50[0] + 32))(v50);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_199;
    }
    goto LABEL_211;
  }
  if (v51) {
    (*(void (**)(void))(*v51 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_211:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_199:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__p, "MatMul");
  char v90 = (void (**)(void **))&unk_1EE379DB0;
  uint64_t v92 = (void **)&v90;
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_203;
    }
    goto LABEL_213;
  }
  if (v92) {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_213:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_203:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__p, "Concat");
  char v90 = (void (**)(void **))&unk_1EE377A48;
  int v91 = nitro::nitro_builtins::Concat;
  uint64_t v92 = (void **)&v90;
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_207;
    }
    goto LABEL_215;
  }
  if (v92) {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_215:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_207:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__p, "Shape");
  v48[0] = &unk_1EE377788;
  v48[1] = nitro::nitro_builtins::Shape;
  uint64_t v49 = v48;
  nitro::nitro_builtins::wrap_ft_function(v48, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v49 == v48)
  {
    (*(void (**)(void *))(v48[0] + 32))(v48);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_221;
    }
    goto LABEL_225;
  }
  if (v49) {
    (*(void (**)(void))(*v49 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_225:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_221:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__p, "Slice");
  v46[0] = &unk_1EE377890;
  v46[1] = nitro::nitro_builtins::Slice;
  char v47 = v46;
  nitro::nitro_builtins::wrap_ft_function(v46, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v47 == v46)
  {
    (*(void (**)(void *))(v46[0] + 32))(v46);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_231;
    }
    goto LABEL_235;
  }
  if (v47) {
    (*(void (**)(void))(*v47 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_235:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_231:
  *((unsigned char *)&v3.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v3, "SliceMask");
  v42[0] = &unk_1EE377940;
  v42[1] = nitro::nitro_builtins::SliceMask;
  atomic_ullong v43 = v42;
  uint64_t v92 = (void **)&v90;
  char v90 = (void (**)(void **))&unk_1EE377940;
  int v91 = nitro::nitro_builtins::SliceMask;
  long long v45 = 0;
  uint64_t v2 = (std::string *)operator new(0x28uLL);
  v2->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE379F68;
  v2[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v2->__r_.__value_.__l.__size_;
  v2->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1EE377940;
  v2->__r_.__value_.__r.__words[2] = (std::string::size_type)nitro::nitro_builtins::SliceMask;
  long long v45 = v2;
  nitro::nitro_execution_context::register_builtin(a1, &v3, &__p);
  if (v45 == &__p)
  {
    (*(void (**)(std::string *))(__p.__r_.__value_.__r.__words[0] + 32))(&__p);
  }
  else if (v45)
  {
    (*(void (**)(void))(v45->__r_.__value_.__r.__words[0] + 40))();
  }
  if (v43 == v42)
  {
    (*(void (**)(void *))(v42[0] + 32))(v42);
    if ((SHIBYTE(v3.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_241;
    }
    goto LABEL_245;
  }
  if (v43) {
    (*(void (**)(void))(*v43 + 40))();
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
LABEL_245:
  }
    operator delete(v3.__r_.__value_.__l.__data_);
LABEL_241:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__p, "Gather");
  v40[0] = &unk_1EE377890;
  v40[1] = nitro::nitro_builtins::Gather;
  long long v41 = v40;
  nitro::nitro_builtins::wrap_ft_function(v40, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v41 == v40)
  {
    (*(void (**)(void *))(v40[0] + 32))(v40);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_251;
    }
    goto LABEL_255;
  }
  if (v41) {
    (*(void (**)(void))(*v41 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_255:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_251:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&__p, "QuantizeGather");
  v38[0] = &unk_1EE3778E8;
  v38[1] = nitro::nitro_builtins::QuantizeGather;
  uint64_t v39 = v38;
  nitro::nitro_builtins::wrap_ft_function(v38, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v39 == v38)
  {
    (*(void (**)(void *))(v38[0] + 32))(v38);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_261;
    }
    goto LABEL_265;
  }
  if (v39) {
    (*(void (**)(void))(*v39 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_265:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_261:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__p, "Stack");
  v36[0] = &unk_1EE3777E0;
  v36[1] = nitro::nitro_builtins::Stack;
  uint64_t v37 = v36;
  nitro::nitro_builtins::wrap_ft_function(v36, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v37 == v36)
  {
    (*(void (**)(void *))(v36[0] + 32))(v36);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_271;
    }
    goto LABEL_275;
  }
  if (v37) {
    (*(void (**)(void))(*v37 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_275:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_271:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__p, "TopK");
  v34[0] = &unk_1EE3777E0;
  v34[1] = nitro::nitro_builtins::TopK;
  unsigned __int8 v35 = v34;
  nitro::nitro_builtins::wrap_ft_function(v34, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v35 == v34)
  {
    (*(void (**)(void *))(v34[0] + 32))(v34);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_281;
    }
    goto LABEL_285;
  }
  if (v35) {
    (*(void (**)(void))(*v35 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_285:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_281:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "Reshape");
  v32[0] = &unk_1EE3777E0;
  v32[1] = nitro::nitro_builtins::Reshape;
  uint64_t v33 = v32;
  nitro::nitro_builtins::wrap_ft_function(v32, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v33 == v32)
  {
    (*(void (**)(void *))(v32[0] + 32))(v32);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_291;
    }
    goto LABEL_295;
  }
  if (v33) {
    (*(void (**)(void))(*v33 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_295:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_291:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "Softmax");
  v30[0] = &unk_1EE377788;
  v30[1] = nitro::nitro_builtins::Softmax;
  unsigned __int8 v31 = v30;
  nitro::nitro_builtins::wrap_ft_function(v30, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v31 == v30)
  {
    (*(void (**)(void *))(v30[0] + 32))(v30);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_301;
    }
    goto LABEL_305;
  }
  if (v31) {
    (*(void (**)(void))(*v31 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_305:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_301:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "ReverseSequence");
  v28[0] = &unk_1EE3778E8;
  v28[1] = nitro::nitro_builtins::ReverseSequence;
  unint64_t v29 = v28;
  nitro::nitro_builtins::wrap_ft_function(v28, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v29 == v28)
  {
    (*(void (**)(void *))(v28[0] + 32))(v28);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_311;
    }
    goto LABEL_315;
  }
  if (v29) {
    (*(void (**)(void))(*v29 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_315:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_311:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 3;
  LODWORD(__p.__r_.__value_.__l.__data_) = 7889229;
  v26[0] = &unk_1EE3777E0;
  v26[1] = nitro::nitro_builtins::Max;
  uint64_t v27 = v26;
  nitro::nitro_builtins::wrap_ft_function(v26, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v27 == v26)
  {
    (*(void (**)(void *))(v26[0] + 32))(v26);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_321;
    }
    goto LABEL_325;
  }
  if (v27) {
    (*(void (**)(void))(*v27 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_325:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_321:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 3;
  LODWORD(__p.__r_.__value_.__l.__data_) = 7235917;
  v24[0] = &unk_1EE3777E0;
  v24[1] = nitro::nitro_builtins::Min;
  std::string v25 = v24;
  nitro::nitro_builtins::wrap_ft_function(v24, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v25 == v24)
  {
    (*(void (**)(void *))(v24[0] + 32))(v24);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_331;
    }
    goto LABEL_335;
  }
  if (v25) {
    (*(void (**)(void))(*v25 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_335:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_331:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "Maximum");
  v22[0] = &unk_1EE3777E0;
  v22[1] = nitro::nitro_builtins::Maximum;
  uint64_t v23 = v22;
  nitro::nitro_builtins::wrap_ft_function(v22, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_341;
    }
    goto LABEL_345;
  }
  if (v23) {
    (*(void (**)(void))(*v23 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_345:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_341:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "Minimum");
  v20[0] = &unk_1EE3777E0;
  v20[1] = nitro::nitro_builtins::Minimum;
  uint64_t v21 = v20;
  nitro::nitro_builtins::wrap_ft_function(v20, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_355;
  }
  if (v21) {
    (*(void (**)(void))(*v21 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_355:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_351:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 3;
  LODWORD(__p.__r_.__value_.__l.__data_) = 7105601;
  v18[0] = &unk_1EE3777E0;
  v18[1] = nitro::nitro_builtins::All;
  uint64_t v19 = v18;
  nitro::nitro_builtins::wrap_ft_function(v18, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_365;
  }
  if (v19) {
    (*(void (**)(void))(*v19 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_365:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_361:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 3;
  LODWORD(__p.__r_.__value_.__l.__data_) = 6578512;
  v16[0] = &unk_1EE377890;
  v16[1] = nitro::nitro_builtins::Pad;
  uint64_t v17 = v16;
  nitro::nitro_builtins::wrap_ft_function(v16, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_375;
  }
  if (v17) {
    (*(void (**)(void))(*v17 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_375:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_371:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&__p, "LogicalNot");
  v14[0] = &unk_1EE377788;
  v14[1] = nitro::nitro_builtins::LogicalNot;
  uint64_t v15 = v14;
  nitro::nitro_builtins::wrap_ft_function(v14, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_381;
    }
    goto LABEL_385;
  }
  if (v15) {
    (*(void (**)(void))(*v15 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_385:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_381:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__p, "Fill");
  v12[0] = &unk_1EE3777E0;
  v12[1] = nitro::nitro_builtins::Fill;
  uint64_t v13 = v12;
  nitro::nitro_builtins::wrap_ft_function(v12, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_391;
    }
    goto LABEL_395;
  }
  if (v13) {
    (*(void (**)(void))(*v13 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_395:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_391:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "Squeeze");
  v10[0] = &unk_1EE3777E0;
  v10[1] = nitro::nitro_builtins::Squeeze;
  int v11 = v10;
  nitro::nitro_builtins::wrap_ft_function(v10, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_401;
    }
    goto LABEL_405;
  }
  if (v11) {
    (*(void (**)(void))(*v11 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_405:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_401:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__p, "Tanh");
  v8[0] = &unk_1EE377788;
  v8[1] = nitro::nitro_builtins::Tanh;
  int v9 = v8;
  nitro::nitro_builtins::wrap_ft_function(v8, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_411;
    }
    goto LABEL_415;
  }
  if (v9) {
    (*(void (**)(void))(*v9 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_415:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_411:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 3;
  LODWORD(__p.__r_.__value_.__l.__data_) = 7565123;
  v6[0] = &unk_1EE377788;
  v6[1] = nitro::nitro_builtins::Cos;
  uint64_t v7 = v6;
  nitro::nitro_builtins::wrap_ft_function(v6, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_421;
    }
    goto LABEL_425;
  }
  if (v7) {
    (*(void (**)(void))(*v7 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_425:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_421:
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 3;
  LODWORD(__p.__r_.__value_.__l.__data_) = 7235923;
  v4[0] = &unk_1EE377788;
  v4[1] = nitro::nitro_builtins::Sin;
  uint64_t v5 = v4;
  nitro::nitro_builtins::wrap_ft_function(v4, (uint64_t)&v90);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v90);
  if (v92 == (void **)&v90)
  {
    v90[4]((void **)&v90);
  }
  else if (v92)
  {
    (*((void (**)(void **))*v92 + 5))(v92);
  }
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_433:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  if (v5) {
    (*(void (**)(void))(*v5 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_433;
  }
}

void sub_19262C7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~function((void *)(v5 - 72));
  std::function<nitro::flexible_type ()(nitro::flexible_type&)>::~function(va);
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  _Unwind_Resume(a1);
}

uint64_t nitro::nitro_builtins::wrap_ft_function@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  std::string v3 = (void *)a1[3];
  if (v3)
  {
    if (v3 == a1)
    {
      int v9 = v8;
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v8);
    }
    else
    {
      int v9 = (void *)(*(uint64_t (**)(void))(*v3 + 16))(a1[3]);
    }
  }
  else
  {
    int v9 = 0;
  }
  *(void *)(a2 + 24) = 0;
  uint64_t v4 = operator new(0x28uLL);
  uint64_t v5 = v4;
  void *v4 = &unk_1EE379E08;
  uint64_t v6 = v4 + 1;
  if (v9)
  {
    if (v9 == v8)
    {
      void v4[4] = v6;
      (*(void (**)(void *))(v8[0] + 24))(v8);
    }
    else
    {
      void v4[4] = v9;
      int v9 = 0;
    }
  }
  else
  {
    void v4[4] = 0;
  }
  *(void *)(a2 + 24) = v5;
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *, void *))(v8[0] + 32))(v8, v6);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t result;
  void v8[3];
  void *v9;
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x1E4F143B8];
  std::string v3 = (void *)a1[3];
  if (v3)
  {
    if (v3 == a1)
    {
      int v9 = v8;
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v8);
    }
    else
    {
      int v9 = (void *)(*(uint64_t (**)(void))(*v3 + 16))(a1[3]);
    }
  }
  else
  {
    int v9 = 0;
  }
  *(void *)(a2 + 24) = 0;
  uint64_t v4 = operator new(0x28uLL);
  uint64_t v5 = v4;
  void *v4 = &unk_1EE379E60;
  uint64_t v6 = v4 + 1;
  if (v9)
  {
    if (v9 == v8)
    {
      void v4[4] = v6;
      (*(void (**)(void *))(v8[0] + 24))(v8);
    }
    else
    {
      void v4[4] = v9;
      int v9 = 0;
    }
  }
  else
  {
    void v4[4] = 0;
  }
  *(void *)(a2 + 24) = v5;
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *, void *))(v8[0] + 32))(v8, v6);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t result;
  void v8[3];
  void *v9;
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x1E4F143B8];
  std::string v3 = (void *)a1[3];
  if (v3)
  {
    if (v3 == a1)
    {
      int v9 = v8;
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v8);
    }
    else
    {
      int v9 = (void *)(*(uint64_t (**)(void))(*v3 + 16))(a1[3]);
    }
  }
  else
  {
    int v9 = 0;
  }
  *(void *)(a2 + 24) = 0;
  uint64_t v4 = operator new(0x28uLL);
  uint64_t v5 = v4;
  void *v4 = &unk_1EE379EB8;
  uint64_t v6 = v4 + 1;
  if (v9)
  {
    if (v9 == v8)
    {
      void v4[4] = v6;
      (*(void (**)(void *))(v8[0] + 24))(v8);
    }
    else
    {
      void v4[4] = v9;
      int v9 = 0;
    }
  }
  else
  {
    void v4[4] = 0;
  }
  *(void *)(a2 + 24) = v5;
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *, void *))(v8[0] + 32))(v8, v6);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t result;
  void v8[3];
  void *v9;
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x1E4F143B8];
  std::string v3 = (void *)a1[3];
  if (v3)
  {
    if (v3 == a1)
    {
      int v9 = v8;
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v8);
    }
    else
    {
      int v9 = (void *)(*(uint64_t (**)(void))(*v3 + 16))(a1[3]);
    }
  }
  else
  {
    int v9 = 0;
  }
  *(void *)(a2 + 24) = 0;
  uint64_t v4 = operator new(0x28uLL);
  uint64_t v5 = v4;
  void *v4 = &unk_1EE379F10;
  uint64_t v6 = v4 + 1;
  if (v9)
  {
    if (v9 == v8)
    {
      void v4[4] = v6;
      (*(void (**)(void *))(v8[0] + 24))(v8);
    }
    else
    {
      void v4[4] = v9;
      int v9 = 0;
    }
  }
  else
  {
    void v4[4] = 0;
  }
  *(void *)(a2 + 24) = v5;
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *, void *))(v8[0] + 32))(v8, v6);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

void sub_19262CF28(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19262CF44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<nitro::flexible_type ()(nitro::flexible_type&)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned char *nitro::nitro_builtins::arr_len@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = 1;
  switch(result[8])
  {
    case 3:
      std::string v3 = (void *)(*(void *)result + 8);
      uint64_t v4 = (void *)(*(void *)result + 16);
      char v5 = 3;
      goto LABEL_5;
    case 4:
      std::string v3 = (void *)(*(void *)result + 8);
      uint64_t v4 = (void *)(*(void *)result + 16);
      char v5 = 4;
      goto LABEL_5;
    case 5:
      std::string v3 = (void *)(*(void *)result + 8);
      uint64_t v4 = (void *)(*(void *)result + 16);
      char v5 = 5;
LABEL_5:
      uint64_t v2 = (uint64_t)(*v4 - *v3) >> v5;
      goto LABEL_6;
    case 9:
      uint64_t v7 = *(void *)(*(void *)result + 32);
      uint64_t v6 = *(uint64_t **)(*(void *)result + 40);
      uint64_t v2 = (uint64_t)v6 - v7;
      if (v6 == (uint64_t *)v7) {
        goto LABEL_6;
      }
      if (!*(void *)(*(void *)result + 16))
      {
        uint64_t v2 = 0;
        goto LABEL_6;
      }
      if ((unint64_t)(v2 - 8) < 8)
      {
        uint64_t v2 = 1;
        char v8 = *(uint64_t **)(*(void *)result + 32);
        do
        {
LABEL_15:
          uint64_t v14 = *v8++;
          v2 *= v14;
        }
        while (v8 != v6);
        goto LABEL_6;
      }
      unint64_t v9 = ((unint64_t)(v2 - 8) >> 3) + 1;
      char v8 = (uint64_t *)(v7 + 8 * (v9 & 0x3FFFFFFFFFFFFFFELL));
      uint64_t v10 = (unsigned char **)(v7 + 8);
      uint64_t v11 = 1;
      uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v13 = 1;
      do
      {
        uint64_t result = *v10;
        v11 *= (void)*(v10 - 1);
        v13 *= (void)*v10;
        v10 += 2;
        v12 -= 2;
      }
      while (v12);
      uint64_t v2 = v13 * v11;
      if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_15;
      }
LABEL_6:
      *(unsigned char *)(a2 + 8) = 0;
      *(void *)a2 = v2;
      return result;
    default:
      goto LABEL_6;
  }
}

void *std::function<nitro::flexible_type ()(nitro::flexible_type&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

unsigned char *nitro::nitro_builtins::cast_str@<X0>(unsigned char *this@<X0>, uint64_t a2@<X8>)
{
  switch(this[8])
  {
    case 1:
      uint64_t v15 = MEMORY[0x1E4FBA488] + 104;
      v32[0] = MEMORY[0x1E4FBA488] + 104;
      uint64_t v16 = MEMORY[0x1E4FBA488] + 64;
      uint64_t v27 = MEMORY[0x1E4FBA488] + 64;
      uint64_t v17 = (uint64_t *)MEMORY[0x1E4FBA408];
      uint64_t v18 = *(void *)(MEMORY[0x1E4FBA408] + 24);
      uint64_t v25 = *(void *)(MEMORY[0x1E4FBA408] + 16);
      *(uint64_t *)((char *)&v25 + *(void *)(v25 - 24)) = v18;
      uint64_t v26 = 0;
      uint64_t v19 = (std::ios_base *)((char *)&v25 + *(void *)(v25 - 24));
      std::ios_base::init(v19, v28);
      uint64_t v20 = MEMORY[0x1E4FBA488] + 24;
      v19[1].__vftable = 0;
      v19[1].__fmtflags_ = -1;
      uint64_t v21 = v17[5];
      uint64_t v27 = v17[4];
      *(void *)((char *)&v28[-1] + *(void *)(v27 - 24)) = v21;
      uint64_t v25 = v17[1];
      *(uint64_t *)((char *)&v25 + *(void *)(v25 - 24)) = v17[6];
      v32[0] = v15;
      uint64_t v25 = v20;
      uint64_t v27 = v16;
      std::streambuf::basic_streambuf();
      uint64_t v22 = MEMORY[0x1E4FBA470] + 16;
      v28[0] = MEMORY[0x1E4FBA470] + 16;
      *(_OWORD *)std::string __p = 0u;
      long long v30 = 0u;
      int v31 = 24;
      std::ostream::operator<<();
      std::stringbuf::str();
      uint64_t v25 = *v17;
      uint64_t v23 = v17[9];
      *(uint64_t *)((char *)&v25 + *(void *)(v25 - 24)) = v17[8];
      uint64_t v27 = v23;
      v28[0] = v22;
      if (SBYTE7(v30) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_11;
    case 2:
      uint64_t v13 = *(void *)this;
      if (*(char *)(*(void *)this + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(v13 + 8), *(void *)(v13 + 16));
      }
      else
      {
        long long v14 = *(_OWORD *)(v13 + 8);
        v24.__r_.__value_.__r.__words[2] = *(void *)(v13 + 24);
        *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
      }
      goto LABEL_16;
    case 3:
      nitro::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v25, (void *)(*(void *)this + 8));
      goto LABEL_16;
    case 4:
      nitro::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v25, (uint64_t *)(*(void *)this + 8));
      goto LABEL_16;
    case 5:
      nitro::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v25, (void *)(*(void *)this + 8));
      goto LABEL_16;
    case 6:
    case 8:
      __break(1u);
      return this;
    case 7:
      memset(&v24, 0, sizeof(v24));
      goto LABEL_16;
    case 9:
      nitro::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v25, (_DWORD *)(*(void *)this + 8));
      goto LABEL_16;
    default:
      uint64_t v4 = MEMORY[0x1E4FBA488] + 104;
      v32[0] = MEMORY[0x1E4FBA488] + 104;
      uint64_t v5 = MEMORY[0x1E4FBA488] + 64;
      uint64_t v27 = MEMORY[0x1E4FBA488] + 64;
      uint64_t v6 = (uint64_t *)MEMORY[0x1E4FBA408];
      uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 24);
      uint64_t v25 = *(void *)(MEMORY[0x1E4FBA408] + 16);
      *(uint64_t *)((char *)&v25 + *(void *)(v25 - 24)) = v7;
      uint64_t v26 = 0;
      char v8 = (std::ios_base *)((char *)&v25 + *(void *)(v25 - 24));
      std::ios_base::init(v8, v28);
      uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
      v8[1].__vftable = 0;
      v8[1].__fmtflags_ = -1;
      uint64_t v10 = v6[5];
      uint64_t v27 = v6[4];
      *(void *)((char *)&v28[-1] + *(void *)(v27 - 24)) = v10;
      uint64_t v25 = v6[1];
      *(uint64_t *)((char *)&v25 + *(void *)(v25 - 24)) = v6[6];
      v32[0] = v4;
      uint64_t v25 = v9;
      uint64_t v27 = v5;
      std::streambuf::basic_streambuf();
      uint64_t v11 = MEMORY[0x1E4FBA470] + 16;
      v28[0] = MEMORY[0x1E4FBA470] + 16;
      *(_OWORD *)std::string __p = 0u;
      long long v30 = 0u;
      int v31 = 24;
      std::ostream::operator<<();
      std::stringbuf::str();
      uint64_t v25 = *v6;
      uint64_t v12 = v6[9];
      *(uint64_t *)((char *)&v25 + *(void *)(v25 - 24)) = v6[8];
      uint64_t v27 = v12;
      v28[0] = v11;
      if (SBYTE7(v30) < 0) {
        operator delete(__p[0]);
      }
LABEL_11:
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x192FF15B0](v32);
LABEL_16:
      nitro::flexible_type::flexible_type<std::string>(a2);
  }
}

void sub_19262D924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_19262D978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::nitro_builtins::cast_double(nitro::nitro_builtins *this@<X0>, uint64_t a2@<X8>)
{
  double v3 = 0.0;
  switch(*((unsigned char *)this + 8))
  {
    case 1:
      double v3 = *(double *)this;
      goto LABEL_43;
    case 2:
      double v5 = *(double *)this;
      uint64_t v6 = (const char **)(*(void *)this + 8);
      size_t __idx = 0;
      uint64_t v7 = (const char *)v6;
      if (*(char *)(*(void *)&v5 + 31) < 0) {
        uint64_t v7 = *v6;
      }
      size_t v8 = strlen(v7);
      if (v8 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v9 = v8;
      if (v8 >= 0x17)
      {
        uint64_t v25 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17) {
          uint64_t v25 = v8 | 7;
        }
        uint64_t v26 = v25 + 1;
        uint64_t v10 = (std::string *)operator new(v25 + 1);
        v32.__r_.__value_.__l.__size_ = v9;
        v32.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
        v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
      }
      else
      {
        *((unsigned char *)&v32.__r_.__value_.__s + 23) = v8;
        uint64_t v10 = &v32;
        if (!v8) {
          goto LABEL_34;
        }
      }
      memmove(v10, v7, v9);
LABEL_34:
      v10->__r_.__value_.__s.__data_[v9] = 0;
      double v27 = std::stod(&v32, &__idx);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (*(char *)(*(void *)&v5 + 31) < 0)
      {
        if (__idx == *(void *)(*(void *)&v5 + 16)) {
          goto LABEL_38;
        }
LABEL_45:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        long long v30 = std::string::append(&v37, " cannot be interpreted as a float");
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v32);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (__idx != *(unsigned __int8 *)(*(void *)&v5 + 31)) {
        goto LABEL_45;
      }
LABEL_38:
      float v28 = v27;
      double v3 = v28;
LABEL_43:
      *(unsigned char *)(a2 + 8) = 1;
      *(double *)a2 = v3;
      return;
    case 3:
      double v16 = *(double *)this;
      memset(&v32, 0, sizeof(v32));
      uint64_t v18 = *(unsigned char **)(*(void *)&v16 + 8);
      uint64_t v17 = *(unsigned char **)(*(void *)&v16 + 16);
      size_t v19 = v17 - v18;
      if (v17 == v18)
      {
        uint64_t v20 = 0;
      }
      else
      {
        if ((v19 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = operator new(v17 - v18);
        memcpy(v20, v18, v19);
      }
      nitro::flexible_type_fail(0);
      if (!v20) {
        goto LABEL_43;
      }
      uint64_t v15 = v20;
      goto LABEL_42;
    case 4:
      double v12 = *(double *)this;
      memset(&v32, 0, sizeof(v32));
      std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&v32, *(void **)(*(void *)&v12 + 8), *(void **)(*(void *)&v12 + 16), (uint64_t)(*(void *)(*(void *)&v12 + 16) - *(void *)(*(void *)&v12 + 8)) >> 4);
      nitro::flexible_type_fail(0);
      std::string::size_type v13 = v32.__r_.__value_.__r.__words[0];
      if (!v32.__r_.__value_.__r.__words[0]) {
        goto LABEL_43;
      }
      std::string::size_type size = v32.__r_.__value_.__l.__size_;
      uint64_t v15 = (void *)v32.__r_.__value_.__r.__words[0];
      if (v32.__r_.__value_.__l.__size_ != v32.__r_.__value_.__r.__words[0])
      {
        do
        {
          size -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v32.__r_.__value_.__r.__words[2], size);
        }
        while (size != v13);
        uint64_t v15 = (void *)v32.__r_.__value_.__r.__words[0];
      }
      v32.__r_.__value_.__l.__size_ = v13;
      goto LABEL_42;
    case 5:
      double v21 = *(double *)this;
      memset(&v32, 0, sizeof(v32));
      std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&v32, *(char **)(*(void *)&v21 + 8), *(char **)(*(void *)&v21 + 16), (uint64_t)(*(void *)(*(void *)&v21 + 16) - *(void *)(*(void *)&v21 + 8)) >> 5);
      nitro::flexible_type_fail(0);
      std::string::size_type v22 = v32.__r_.__value_.__r.__words[0];
      if (!v32.__r_.__value_.__r.__words[0]) {
        goto LABEL_43;
      }
      std::string::size_type v23 = v32.__r_.__value_.__l.__size_;
      std::string::size_type v24 = v32.__r_.__value_.__r.__words[0];
      if (v32.__r_.__value_.__l.__size_ != v32.__r_.__value_.__r.__words[0])
      {
        do
          std::string::size_type v23 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v23 - 32);
        while (v23 != v22);
        std::string::size_type v24 = v32.__r_.__value_.__r.__words[0];
      }
      v32.__r_.__value_.__l.__size_ = v22;
      uint64_t v15 = (void *)v24;
LABEL_42:
      operator delete(v15);
      goto LABEL_43;
    case 6:
    case 8:
      __break(1u);
      return;
    case 7:
      goto LABEL_43;
    case 9:
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v32, (const nitro::ndarray_container *)(*(void *)this + 8));
      nitro::flexible_type_fail(0);
      if (__p)
      {
        int v36 = __p;
        operator delete(__p);
      }
      if (v33)
      {
        uint64_t v34 = v33;
        operator delete(v33);
      }
      uint64_t v11 = (std::__shared_weak_count *)v32.__r_.__value_.__r.__words[2];
      if (v32.__r_.__value_.__r.__words[2]
        && !atomic_fetch_add((atomic_ullong *volatile)(v32.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      goto LABEL_43;
    default:
      double v3 = (double)*(uint64_t *)this;
      goto LABEL_43;
  }
}

void sub_19262DD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if (v27)
    {
LABEL_7:
      __cxa_free_exception(v28);
      _Unwind_Resume(a1);
    }
  }
  else if (v27)
  {
    goto LABEL_7;
  }
  _Unwind_Resume(a1);
}

uint64_t nitro::nitro_builtins::cast_int@<X0>(nitro::nitro_builtins *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = nitro::flexible_type_converter<int>::get((uint64_t)&v5, (unsigned __int8 *)this);
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)a2 = (int)result;
  return result;
}

void sub_19262E06C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19262E088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::flex_max(nitro::nitro_builtins *a1@<X0>, nitro::nitro_builtins *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  nitro::nitro_builtins::get_scalar(a1, (nitro::nitro_builtins *)&v107);
  nitro::nitro_builtins::get_scalar(a2, (nitro::nitro_builtins *)&v105);
  switch(v106)
  {
    case 1:
      switch(v108)
      {
        case 1:
          v5.n128_u64[0] = (unint64_t)v107;
          double v34 = *(double *)&v105;
          goto LABEL_78;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_31;
        case 6:
        case 8:
          goto LABEL_166;
        case 9:
          v104[0] = 0;
          atomic_ullong v41 = v107[4];
          atomic_ullong v40 = v107[5];
          if (v40 == v41 || !v107[2]) {
            goto LABEL_111;
          }
          unint64_t v42 = v40 - v41 - 8;
          if (v42 < 8)
          {
            uint64_t v43 = 1;
            char v44 = (uint64_t *)v107[4];
            do
            {
LABEL_109:
              uint64_t v73 = *v44++;
              v43 *= v73;
            }
            while (v44 != (uint64_t *)v40);
            goto LABEL_110;
          }
          uint64_t v68 = (v42 >> 3) + 1;
          char v44 = (uint64_t *)(v41 + 8 * (v68 & 0x3FFFFFFFFFFFFFFELL));
          uint64_t v69 = (void *)(v41 + 8);
          uint64_t v70 = 1;
          uint64_t v71 = v68 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v72 = 1;
          do
          {
            v70 *= *(v69 - 1);
            v72 *= *v69;
            v69 += 2;
            v71 -= 2;
          }
          while (v71);
          uint64_t v43 = v72 * v70;
          if (v68 != (v68 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_109;
          }
LABEL_110:
          v104[0] = v43;
          if (v43 != 1)
          {
LABEL_111:
            uint64_t v103 = v104;
            nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
          }
          BOOL v61 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)v107 + 2, *(double *)&v105);
          break;
        default:
          v5.n128_u64[0] = (unint64_t)v105;
          if (*(double *)&v105 < (double)(uint64_t)v107) {
            goto LABEL_128;
          }
          goto LABEL_32;
      }
      goto LABEL_127;
    case 2:
      if (v108 != 2) {
        goto LABEL_31;
      }
      if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v105 + 1, v107 + 1)) {
        goto LABEL_128;
      }
      goto LABEL_32;
    case 3:
      if (v108 != 3) {
        goto LABEL_31;
      }
      double v12 = (unint64_t *)v107[1];
      std::string::size_type v13 = (double *)v105[1];
      unint64_t v14 = (v105[2] - (uint64_t)v13) >> 3;
      unint64_t v15 = (v107[2] - (uint64_t)v12) >> 3;
      if ((unint64_t *)v107[2] == v12) {
        goto LABEL_26;
      }
      if (v15 <= 1) {
        atomic_ullong v16 = 1;
      }
      else {
        atomic_ullong v16 = (v107[2] - (uint64_t)v12) >> 3;
      }
      atomic_ullong v17 = (v105[2] - (uint64_t)v13) >> 3;
      while (v17)
      {
        v5.n128_u64[0] = *v12;
        if (*(double *)v12 > *v13) {
          break;
        }
        if (*(double *)v12 < *v13) {
          goto LABEL_32;
        }
        --v17;
        ++v13;
        ++v12;
        if (!--v16)
        {
LABEL_26:
          if (v15 <= v14) {
            goto LABEL_32;
          }
          goto LABEL_128;
        }
      }
      goto LABEL_128;
    case 4:
      if (v108 != 4) {
        goto LABEL_31;
      }
      if (nitro::flexible_type_impl::gt_operator::operator()(v5, (uint64_t)&v102, v107 + 1, v105 + 1)) {
        goto LABEL_128;
      }
      goto LABEL_32;
    case 5:
    case 7:
LABEL_31:
      nitro::flexible_type_fail(0);
      goto LABEL_32;
    case 6:
    case 8:
LABEL_166:
      __break(1u);
      return;
    case 9:
      uint64_t v6 = v105 + 1;
      switch(v108)
      {
        case 1:
          v104[0] = 0;
          atomic_ullong v51 = v105[4];
          atomic_ullong v50 = v105[5];
          atomic_ullong v52 = v50 - v51;
          if (v50 == v51 || !v105[2]) {
            goto LABEL_125;
          }
          if ((unint64_t)(v52 - 8) < 8)
          {
            uint64_t v53 = 1;
            int v54 = (uint64_t *)v105[4];
            do
            {
LABEL_123:
              uint64_t v85 = *v54++;
              v53 *= v85;
            }
            while (v54 != (uint64_t *)v50);
            goto LABEL_124;
          }
          unint64_t v80 = ((unint64_t)(v52 - 8) >> 3) + 1;
          int v54 = (uint64_t *)(v51 + 8 * (v80 & 0x3FFFFFFFFFFFFFFELL));
          char v81 = (void *)(v51 + 8);
          uint64_t v82 = 1;
          uint64_t v83 = v80 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v84 = 1;
          do
          {
            v82 *= *(v81 - 1);
            v84 *= *v81;
            v81 += 2;
            v83 -= 2;
          }
          while (v83);
          uint64_t v53 = v84 * v82;
          if (v80 != (v80 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_123;
          }
LABEL_124:
          v104[0] = v53;
          if (v53 != 1)
          {
LABEL_125:
            uint64_t v103 = v104;
            nitro::flexible_type_impl::gt_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
          }
          BOOL v61 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v6, *(double *)&v107);
          goto LABEL_127;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_31;
        case 6:
        case 8:
          goto LABEL_166;
        case 9:
          v104[0] = 0;
          atomic_ullong v46 = v105[4];
          atomic_ullong v45 = v105[5];
          atomic_ullong v47 = v45 - v46;
          if (v45 == v46 || !v105[2]) {
            goto LABEL_118;
          }
          if ((unint64_t)(v47 - 8) < 8)
          {
            uint64_t v48 = 1;
            uint64_t v49 = (uint64_t *)v105[4];
            do
            {
LABEL_116:
              uint64_t v79 = *v49++;
              v48 *= v79;
            }
            while (v49 != (uint64_t *)v45);
            goto LABEL_117;
          }
          unint64_t v74 = ((unint64_t)(v47 - 8) >> 3) + 1;
          uint64_t v49 = (uint64_t *)(v46 + 8 * (v74 & 0x3FFFFFFFFFFFFFFELL));
          char v75 = (void *)(v46 + 8);
          uint64_t v76 = 1;
          uint64_t v77 = v74 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v78 = 1;
          do
          {
            v76 *= *(v75 - 1);
            v78 *= *v75;
            v75 += 2;
            v77 -= 2;
          }
          while (v77);
          uint64_t v48 = v78 * v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_116;
          }
LABEL_117:
          v104[0] = v48;
          if (v48 != 1)
          {
LABEL_118:
            uint64_t v103 = v104;
            nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
          }
          BOOL v61 = _ZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11gt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_((_DWORD *)v107 + 2, v6);
          goto LABEL_127;
        default:
          v104[0] = 0;
          atomic_ullong v8 = v105[4];
          atomic_ullong v7 = v105[5];
          atomic_ullong v9 = v7 - v8;
          if (v7 == v8 || !v105[2]) {
            goto LABEL_97;
          }
          if ((unint64_t)(v9 - 8) < 8)
          {
            uint64_t v10 = 1;
            uint64_t v11 = (uint64_t *)v105[4];
            do
            {
LABEL_95:
              uint64_t v60 = *v11++;
              v10 *= v60;
            }
            while (v11 != (uint64_t *)v7);
            goto LABEL_96;
          }
          unint64_t v55 = ((unint64_t)(v9 - 8) >> 3) + 1;
          uint64_t v11 = (uint64_t *)(v8 + 8 * (v55 & 0x3FFFFFFFFFFFFFFELL));
          char v56 = (void *)(v8 + 8);
          uint64_t v57 = 1;
          uint64_t v58 = v55 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v59 = 1;
          do
          {
            v57 *= *(v56 - 1);
            v59 *= *v56;
            v56 += 2;
            v58 -= 2;
          }
          while (v58);
          uint64_t v10 = v59 * v57;
          if (v55 != (v55 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_95;
          }
LABEL_96:
          v104[0] = v10;
          if (v10 != 1)
          {
LABEL_97:
            uint64_t v103 = v104;
            nitro::flexible_type_impl::gt_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
          }
          BOOL v61 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v6, (uint64_t)v107);
          break;
      }
      goto LABEL_127;
    default:
      switch(v108)
      {
        case 1:
          v5.n128_u64[0] = (unint64_t)v107;
          double v34 = (double)(uint64_t)v105;
LABEL_78:
          if (v5.n128_f64[0] > v34) {
            goto LABEL_128;
          }
          goto LABEL_32;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_31;
        case 6:
        case 8:
          goto LABEL_166;
        case 9:
          v104[0] = 0;
          atomic_ullong v36 = v107[4];
          atomic_ullong v35 = v107[5];
          if (v35 == v36 || !v107[2]) {
            goto LABEL_104;
          }
          unint64_t v37 = v35 - v36 - 8;
          if (v37 < 8)
          {
            uint64_t v38 = 1;
            uint64_t v39 = (uint64_t *)v107[4];
            do
            {
LABEL_102:
              uint64_t v67 = *v39++;
              v38 *= v67;
            }
            while (v39 != (uint64_t *)v35);
            goto LABEL_103;
          }
          uint64_t v62 = (v37 >> 3) + 1;
          uint64_t v39 = (uint64_t *)(v36 + 8 * (v62 & 0x3FFFFFFFFFFFFFFELL));
          double v63 = (void *)(v36 + 8);
          uint64_t v64 = 1;
          uint64_t v65 = v62 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v66 = 1;
          do
          {
            v64 *= *(v63 - 1);
            v66 *= *v63;
            v63 += 2;
            v65 -= 2;
          }
          while (v65);
          uint64_t v38 = v66 * v64;
          if (v62 != (v62 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_102;
          }
LABEL_103:
          v104[0] = v38;
          if (v38 != 1)
          {
LABEL_104:
            uint64_t v103 = v104;
            nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
          }
          BOOL v61 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)v107 + 2, (uint64_t)v105);
LABEL_127:
          if (v61)
          {
LABEL_128:
            *(void *)a3 = v107;
            *(unsigned char *)(a3 + 8) = v108;
            char v108 = 0;
            switch(v106)
            {
              case 2:
                if (atomic_fetch_add(v105, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong v86 = v105;
                  if (*(double *)&v105 != 0.0)
                  {
                    if (*((char *)v105 + 31) < 0) {
                      operator delete((void *)v105[1]);
                    }
                    char v87 = v86;
                    uint64_t v88 = 0x1012C404EF22A49;
                    goto LABEL_165;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add(v105, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v93 = v105;
                  if (*(double *)&v105 != 0.0)
                  {
                    int v94 = (void *)v105[1];
                    if (v94)
                    {
                      v105[2] = (atomic_ullong)v94;
                      operator delete(v94);
                    }
                    char v87 = v93;
                    uint64_t v88 = 0x1080C409938AC02;
                    goto LABEL_165;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add(v105, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v89 = v105;
                  if (*(double *)&v105 != 0.0)
                  {
                    atomic_ullong v90 = v105[1];
                    if (!v90) {
                      goto LABEL_154;
                    }
                    uint64_t v91 = v105[2];
                    uint64_t v92 = (void *)v105[1];
                    if (v91 != v90)
                    {
                      do
                      {
                        v91 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v89 + 3), v91);
                      }
                      while (v91 != v90);
                      uint64_t v92 = (void *)v89[1];
                    }
                    v89[2] = v90;
                    goto LABEL_153;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add(v105, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v89 = v105;
                  if (*(double *)&v105 != 0.0)
                  {
                    atomic_ullong v95 = v105[1];
                    if (v95)
                    {
                      uint64_t v96 = v105[2];
                      atomic_ullong v97 = v105[1];
                      if (v96 != v95)
                      {
                        do
                          uint64_t v96 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v96 - 32);
                        while (v96 != v95);
                        atomic_ullong v97 = v89[1];
                      }
                      v89[2] = v95;
                      uint64_t v92 = (void *)v97;
LABEL_153:
                      operator delete(v92);
                    }
LABEL_154:
                    char v87 = v89;
                    uint64_t v88 = 0x1020C405E66F15BLL;
                    goto LABEL_165;
                  }
                }
                break;
              case 9:
                if (atomic_fetch_add(v105, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v98 = v105;
                  if (*(double *)&v105 != 0.0)
                  {
                    atomic_ullong *volatile v99 = (void *)v105[7];
                    if (v99)
                    {
                      v105[8] = (atomic_ullong)v99;
                      operator delete(v99);
                    }
                    atomic_ullong *volatile v100 = (void *)v98[4];
                    if (v100)
                    {
                      v98[5] = (atomic_ullong)v100;
                      operator delete(v100);
                    }
                    uint64_t v101 = (std::__shared_weak_count *)v98[3];
                    if (v101 && !atomic_fetch_add(&v101->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *, __n128))v101->__on_zero_shared)(v101, v5);
                      std::__shared_weak_count::__release_weak(v101);
                    }
                    char v87 = v98;
                    uint64_t v88 = 0x10B0C4002311774;
LABEL_165:
                    MEMORY[0x192FF16B0](v87, v88, v5);
                  }
                }
                break;
              default:
                break;
            }
          }
          else
          {
LABEL_32:
            *(double *)a3 = *(double *)&v105;
            *(unsigned char *)(a3 + 8) = v106;
          }
          switch(v108)
          {
            case 2:
              if (atomic_fetch_add(v107, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v18 = v107;
                if (v107)
                {
                  if (*((char *)v107 + 31) < 0) {
                    operator delete((void *)v107[1]);
                  }
                  size_t v19 = v18;
                  uint64_t v20 = 0x1012C404EF22A49;
                  goto LABEL_70;
                }
              }
              break;
            case 3:
              if (atomic_fetch_add(v107, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v25 = v107;
                if (v107)
                {
                  uint64_t v26 = (void *)v107[1];
                  if (v26)
                  {
                    v107[2] = (atomic_ullong)v26;
                    operator delete(v26);
                  }
                  size_t v19 = v25;
                  uint64_t v20 = 0x1080C409938AC02;
                  goto LABEL_70;
                }
              }
              break;
            case 4:
              if (atomic_fetch_add(v107, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                double v21 = v107;
                if (v107)
                {
                  atomic_ullong v22 = v107[1];
                  if (!v22) {
                    goto LABEL_59;
                  }
                  uint64_t v23 = v107[2];
                  std::string::size_type v24 = (void *)v107[1];
                  if (v23 != v22)
                  {
                    do
                    {
                      v23 -= 16;
                      std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v21 + 3), v23);
                    }
                    while (v23 != v22);
                    std::string::size_type v24 = (void *)v21[1];
                  }
                  v21[2] = v22;
                  goto LABEL_58;
                }
              }
              break;
            case 5:
              if (atomic_fetch_add(v107, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                double v21 = v107;
                if (v107)
                {
                  atomic_ullong v27 = v107[1];
                  if (v27)
                  {
                    uint64_t v28 = v107[2];
                    atomic_ullong v29 = v107[1];
                    if (v28 != v27)
                    {
                      do
                        uint64_t v28 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v28 - 32);
                      while (v28 != v27);
                      atomic_ullong v29 = v21[1];
                    }
                    v21[2] = v27;
                    std::string::size_type v24 = (void *)v29;
LABEL_58:
                    operator delete(v24);
                  }
LABEL_59:
                  size_t v19 = v21;
                  uint64_t v20 = 0x1020C405E66F15BLL;
                  goto LABEL_70;
                }
              }
              break;
            case 9:
              if (atomic_fetch_add(v107, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                long long v30 = v107;
                if (v107)
                {
                  long long v31 = (void *)v107[7];
                  if (v31)
                  {
                    v107[8] = (atomic_ullong)v31;
                    operator delete(v31);
                  }
                  std::string v32 = (void *)v30[4];
                  if (v32)
                  {
                    v30[5] = (atomic_ullong)v32;
                    operator delete(v32);
                  }
                  uint64_t v33 = (std::__shared_weak_count *)v30[3];
                  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *, __n128))v33->__on_zero_shared)(v33, v5);
                    std::__shared_weak_count::__release_weak(v33);
                  }
                  size_t v19 = v30;
                  uint64_t v20 = 0x10B0C4002311774;
LABEL_70:
                  MEMORY[0x192FF16B0](v19, v20, v5);
                }
              }
              break;
            default:
              return;
          }
          return;
        default:
          if ((uint64_t)v107 > (uint64_t)v105) {
            goto LABEL_128;
          }
          goto LABEL_32;
      }
  }
}

void sub_19262EAC0(_Unwind_Exception *exception_object, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *a12, uint64_t a13, atomic_ullong *volatile a14, __int16 a15, char a16, char a17, uint64_t a18, char a19)
{
  uint64_t v20 = a2;
  switch((char)a15)
  {
    case 2:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a14);
      goto LABEL_7;
    case 3:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a14);
      goto LABEL_7;
    case 4:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a14);
      goto LABEL_7;
    case 5:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a14);
      goto LABEL_7;
    case 9:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a14);
LABEL_7:
      exception_object = a12;
      break;
    default:
      break;
  }
  switch(a19)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_30;
      }
      uint64_t v21 = a18;
      if (!a18) {
        goto LABEL_30;
      }
      if (*(char *)(a18 + 31) < 0) {
        operator delete(*(void **)(a18 + 8));
      }
      uint64_t v22 = v21;
      uint64_t v23 = 0x1012C404EF22A49;
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_30;
      }
      uint64_t v24 = a18;
      if (!a18) {
        goto LABEL_30;
      }
      uint64_t v25 = *(void **)(a18 + 8);
      if (v25)
      {
        *(void *)(a18 + 16) = v25;
        operator delete(v25);
      }
      uint64_t v22 = v24;
      uint64_t v23 = 0x1080C409938AC02;
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a18, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a18) {
        goto LABEL_30;
      }
      uint64_t v22 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(a18);
      goto LABEL_25;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a18, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a18) {
        goto LABEL_30;
      }
      uint64_t v22 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(a18);
LABEL_25:
      uint64_t v23 = 0x1020C405E66F15BLL;
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a18, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a18) {
        goto LABEL_30;
      }
      uint64_t v22 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair((void *)a18);
      uint64_t v23 = 0x10B0C4002311774;
      break;
    default:
LABEL_30:
      _Unwind_Resume(exception_object);
      return;
  }
  MEMORY[0x192FF16B0](v22, v23, v20);
  _Unwind_Resume(exception_object);
}

void *std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void nitro::nitro_builtins::flex_min(nitro::nitro_builtins *a1@<X0>, nitro::nitro_builtins *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  nitro::nitro_builtins::get_scalar(a1, (nitro::nitro_builtins *)&v107);
  nitro::nitro_builtins::get_scalar(a2, (nitro::nitro_builtins *)&v105);
  switch(v106)
  {
    case 1:
      switch(v108)
      {
        case 1:
          v5.n128_u64[0] = (unint64_t)v107;
          double v34 = *(double *)&v105;
          goto LABEL_78;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_31;
        case 6:
        case 8:
          goto LABEL_166;
        case 9:
          v104[0] = 0;
          atomic_ullong v41 = v107[4];
          atomic_ullong v40 = v107[5];
          if (v40 == v41 || !v107[2]) {
            goto LABEL_111;
          }
          unint64_t v42 = v40 - v41 - 8;
          if (v42 < 8)
          {
            uint64_t v43 = 1;
            char v44 = (uint64_t *)v107[4];
            do
            {
LABEL_109:
              uint64_t v73 = *v44++;
              v43 *= v73;
            }
            while (v44 != (uint64_t *)v40);
            goto LABEL_110;
          }
          uint64_t v68 = (v42 >> 3) + 1;
          char v44 = (uint64_t *)(v41 + 8 * (v68 & 0x3FFFFFFFFFFFFFFELL));
          uint64_t v69 = (void *)(v41 + 8);
          uint64_t v70 = 1;
          uint64_t v71 = v68 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v72 = 1;
          do
          {
            v70 *= *(v69 - 1);
            v72 *= *v69;
            v69 += 2;
            v71 -= 2;
          }
          while (v71);
          uint64_t v43 = v72 * v70;
          if (v68 != (v68 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_109;
          }
LABEL_110:
          v104[0] = v43;
          if (v43 != 1)
          {
LABEL_111:
            uint64_t v103 = v104;
            nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
          }
          BOOL v61 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)v107 + 2, *(double *)&v105);
          break;
        default:
          v5.n128_u64[0] = (unint64_t)v105;
          if (*(double *)&v105 > (double)(uint64_t)v107) {
            goto LABEL_128;
          }
          goto LABEL_32;
      }
      goto LABEL_127;
    case 2:
      if (v108 != 2) {
        goto LABEL_31;
      }
      if ((std::string::compare[abi:ne180100]((const void **)v107 + 1, (unsigned char *)v105 + 8) & 0x80000000) != 0) {
        goto LABEL_128;
      }
      goto LABEL_32;
    case 3:
      if (v108 != 3) {
        goto LABEL_31;
      }
      double v12 = (unint64_t *)v107[1];
      std::string::size_type v13 = (double *)v105[1];
      unint64_t v14 = (v105[2] - (uint64_t)v13) >> 3;
      unint64_t v15 = (v107[2] - (uint64_t)v12) >> 3;
      if ((unint64_t *)v107[2] == v12) {
        goto LABEL_26;
      }
      if (v15 <= 1) {
        atomic_ullong v16 = 1;
      }
      else {
        atomic_ullong v16 = (v107[2] - (uint64_t)v12) >> 3;
      }
      atomic_ullong v17 = (v105[2] - (uint64_t)v13) >> 3;
      while (v17)
      {
        v5.n128_u64[0] = *v12;
        if (*(double *)v12 > *v13) {
          break;
        }
        if (*(double *)v12 < *v13) {
          goto LABEL_128;
        }
        --v17;
        ++v12;
        ++v13;
        if (!--v16)
        {
LABEL_26:
          if (v15 >= v14) {
            goto LABEL_32;
          }
          goto LABEL_128;
        }
      }
      goto LABEL_32;
    case 4:
      if (v108 != 4) {
        goto LABEL_31;
      }
      if (nitro::flexible_type_impl::lt_operator::operator()(v5, (uint64_t)&v102, v107 + 1, v105 + 1)) {
        goto LABEL_128;
      }
      goto LABEL_32;
    case 5:
    case 7:
LABEL_31:
      nitro::flexible_type_fail(0);
      goto LABEL_32;
    case 6:
    case 8:
LABEL_166:
      __break(1u);
      return;
    case 9:
      uint64_t v6 = v105 + 1;
      switch(v108)
      {
        case 1:
          v104[0] = 0;
          atomic_ullong v51 = v105[4];
          atomic_ullong v50 = v105[5];
          atomic_ullong v52 = v50 - v51;
          if (v50 == v51 || !v105[2]) {
            goto LABEL_125;
          }
          if ((unint64_t)(v52 - 8) < 8)
          {
            uint64_t v53 = 1;
            int v54 = (uint64_t *)v105[4];
            do
            {
LABEL_123:
              uint64_t v85 = *v54++;
              v53 *= v85;
            }
            while (v54 != (uint64_t *)v50);
            goto LABEL_124;
          }
          unint64_t v80 = ((unint64_t)(v52 - 8) >> 3) + 1;
          int v54 = (uint64_t *)(v51 + 8 * (v80 & 0x3FFFFFFFFFFFFFFELL));
          char v81 = (void *)(v51 + 8);
          uint64_t v82 = 1;
          uint64_t v83 = v80 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v84 = 1;
          do
          {
            v82 *= *(v81 - 1);
            v84 *= *v81;
            v81 += 2;
            v83 -= 2;
          }
          while (v83);
          uint64_t v53 = v84 * v82;
          if (v80 != (v80 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_123;
          }
LABEL_124:
          v104[0] = v53;
          if (v53 != 1)
          {
LABEL_125:
            uint64_t v103 = v104;
            nitro::flexible_type_impl::lt_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
          }
          BOOL v61 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v6, *(double *)&v107);
          goto LABEL_127;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_31;
        case 6:
        case 8:
          goto LABEL_166;
        case 9:
          v104[0] = 0;
          atomic_ullong v46 = v105[4];
          atomic_ullong v45 = v105[5];
          atomic_ullong v47 = v45 - v46;
          if (v45 == v46 || !v105[2]) {
            goto LABEL_118;
          }
          if ((unint64_t)(v47 - 8) < 8)
          {
            uint64_t v48 = 1;
            uint64_t v49 = (uint64_t *)v105[4];
            do
            {
LABEL_116:
              uint64_t v79 = *v49++;
              v48 *= v79;
            }
            while (v49 != (uint64_t *)v45);
            goto LABEL_117;
          }
          unint64_t v74 = ((unint64_t)(v47 - 8) >> 3) + 1;
          uint64_t v49 = (uint64_t *)(v46 + 8 * (v74 & 0x3FFFFFFFFFFFFFFELL));
          char v75 = (void *)(v46 + 8);
          uint64_t v76 = 1;
          uint64_t v77 = v74 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v78 = 1;
          do
          {
            v76 *= *(v75 - 1);
            v78 *= *v75;
            v75 += 2;
            v77 -= 2;
          }
          while (v77);
          uint64_t v48 = v78 * v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_116;
          }
LABEL_117:
          v104[0] = v48;
          if (v48 != 1)
          {
LABEL_118:
            uint64_t v103 = v104;
            nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
          }
          BOOL v61 = _ZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11lt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_((_DWORD *)v107 + 2, v6);
          goto LABEL_127;
        default:
          v104[0] = 0;
          atomic_ullong v8 = v105[4];
          atomic_ullong v7 = v105[5];
          atomic_ullong v9 = v7 - v8;
          if (v7 == v8 || !v105[2]) {
            goto LABEL_97;
          }
          if ((unint64_t)(v9 - 8) < 8)
          {
            uint64_t v10 = 1;
            uint64_t v11 = (uint64_t *)v105[4];
            do
            {
LABEL_95:
              uint64_t v60 = *v11++;
              v10 *= v60;
            }
            while (v11 != (uint64_t *)v7);
            goto LABEL_96;
          }
          unint64_t v55 = ((unint64_t)(v9 - 8) >> 3) + 1;
          uint64_t v11 = (uint64_t *)(v8 + 8 * (v55 & 0x3FFFFFFFFFFFFFFELL));
          char v56 = (void *)(v8 + 8);
          uint64_t v57 = 1;
          uint64_t v58 = v55 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v59 = 1;
          do
          {
            v57 *= *(v56 - 1);
            v59 *= *v56;
            v56 += 2;
            v58 -= 2;
          }
          while (v58);
          uint64_t v10 = v59 * v57;
          if (v55 != (v55 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_95;
          }
LABEL_96:
          v104[0] = v10;
          if (v10 != 1)
          {
LABEL_97:
            uint64_t v103 = v104;
            nitro::flexible_type_impl::lt_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
          }
          BOOL v61 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v6, (uint64_t)v107);
          break;
      }
      goto LABEL_127;
    default:
      switch(v108)
      {
        case 1:
          v5.n128_u64[0] = (unint64_t)v107;
          double v34 = (double)(uint64_t)v105;
LABEL_78:
          if (v5.n128_f64[0] < v34) {
            goto LABEL_128;
          }
          goto LABEL_32;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_31;
        case 6:
        case 8:
          goto LABEL_166;
        case 9:
          v104[0] = 0;
          atomic_ullong v36 = v107[4];
          atomic_ullong v35 = v107[5];
          if (v35 == v36 || !v107[2]) {
            goto LABEL_104;
          }
          unint64_t v37 = v35 - v36 - 8;
          if (v37 < 8)
          {
            uint64_t v38 = 1;
            uint64_t v39 = (uint64_t *)v107[4];
            do
            {
LABEL_102:
              uint64_t v67 = *v39++;
              v38 *= v67;
            }
            while (v39 != (uint64_t *)v35);
            goto LABEL_103;
          }
          uint64_t v62 = (v37 >> 3) + 1;
          uint64_t v39 = (uint64_t *)(v36 + 8 * (v62 & 0x3FFFFFFFFFFFFFFELL));
          double v63 = (void *)(v36 + 8);
          uint64_t v64 = 1;
          uint64_t v65 = v62 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v66 = 1;
          do
          {
            v64 *= *(v63 - 1);
            v66 *= *v63;
            v63 += 2;
            v65 -= 2;
          }
          while (v65);
          uint64_t v38 = v66 * v64;
          if (v62 != (v62 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_102;
          }
LABEL_103:
          v104[0] = v38;
          if (v38 != 1)
          {
LABEL_104:
            uint64_t v103 = v104;
            nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
          }
          BOOL v61 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)v107 + 2, (uint64_t)v105);
LABEL_127:
          if (v61)
          {
LABEL_128:
            *(void *)a3 = v107;
            *(unsigned char *)(a3 + 8) = v108;
            char v108 = 0;
            switch(v106)
            {
              case 2:
                if (atomic_fetch_add(v105, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong v86 = v105;
                  if (*(double *)&v105 != 0.0)
                  {
                    if (*((char *)v105 + 31) < 0) {
                      operator delete((void *)v105[1]);
                    }
                    char v87 = v86;
                    uint64_t v88 = 0x1012C404EF22A49;
                    goto LABEL_165;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add(v105, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v89 = v105;
                  if (*(double *)&v105 != 0.0)
                  {
                    atomic_ullong v90 = (void *)v105[1];
                    if (v90)
                    {
                      v105[2] = (atomic_ullong)v90;
                      operator delete(v90);
                    }
                    char v87 = v89;
                    uint64_t v88 = 0x1080C409938AC02;
                    goto LABEL_165;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add(v105, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v91 = v105;
                  if (*(double *)&v105 != 0.0)
                  {
                    atomic_ullong v92 = v105[1];
                    if (!v92) {
                      goto LABEL_154;
                    }
                    uint64_t v93 = v105[2];
                    int v94 = (void *)v105[1];
                    if (v93 != v92)
                    {
                      do
                      {
                        v93 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v91 + 3), v93);
                      }
                      while (v93 != v92);
                      int v94 = (void *)v91[1];
                    }
                    v91[2] = v92;
                    goto LABEL_153;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add(v105, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v91 = v105;
                  if (*(double *)&v105 != 0.0)
                  {
                    atomic_ullong v95 = v105[1];
                    if (v95)
                    {
                      uint64_t v96 = v105[2];
                      atomic_ullong v97 = v105[1];
                      if (v96 != v95)
                      {
                        do
                          uint64_t v96 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v96 - 32);
                        while (v96 != v95);
                        atomic_ullong v97 = v91[1];
                      }
                      v91[2] = v95;
                      int v94 = (void *)v97;
LABEL_153:
                      operator delete(v94);
                    }
LABEL_154:
                    char v87 = v91;
                    uint64_t v88 = 0x1020C405E66F15BLL;
                    goto LABEL_165;
                  }
                }
                break;
              case 9:
                if (atomic_fetch_add(v105, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v98 = v105;
                  if (*(double *)&v105 != 0.0)
                  {
                    atomic_ullong *volatile v99 = (void *)v105[7];
                    if (v99)
                    {
                      v105[8] = (atomic_ullong)v99;
                      operator delete(v99);
                    }
                    atomic_ullong *volatile v100 = (void *)v98[4];
                    if (v100)
                    {
                      v98[5] = (atomic_ullong)v100;
                      operator delete(v100);
                    }
                    uint64_t v101 = (std::__shared_weak_count *)v98[3];
                    if (v101 && !atomic_fetch_add(&v101->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                      std::__shared_weak_count::__release_weak(v101);
                    }
                    char v87 = v98;
                    uint64_t v88 = 0x10B0C4002311774;
LABEL_165:
                    MEMORY[0x192FF16B0](v87, v88);
                  }
                }
                break;
              default:
                break;
            }
          }
          else
          {
LABEL_32:
            *(double *)a3 = *(double *)&v105;
            *(unsigned char *)(a3 + 8) = v106;
          }
          switch(v108)
          {
            case 2:
              if (atomic_fetch_add(v107, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v18 = v107;
                if (v107)
                {
                  if (*((char *)v107 + 31) < 0) {
                    operator delete((void *)v107[1]);
                  }
                  size_t v19 = v18;
                  uint64_t v20 = 0x1012C404EF22A49;
                  goto LABEL_70;
                }
              }
              break;
            case 3:
              if (atomic_fetch_add(v107, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v25 = v107;
                if (v107)
                {
                  uint64_t v26 = (void *)v107[1];
                  if (v26)
                  {
                    v107[2] = (atomic_ullong)v26;
                    operator delete(v26);
                  }
                  size_t v19 = v25;
                  uint64_t v20 = 0x1080C409938AC02;
                  goto LABEL_70;
                }
              }
              break;
            case 4:
              if (atomic_fetch_add(v107, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v21 = v107;
                if (v107)
                {
                  atomic_ullong v22 = v107[1];
                  if (!v22) {
                    goto LABEL_59;
                  }
                  uint64_t v23 = v107[2];
                  uint64_t v24 = (void *)v107[1];
                  if (v23 != v22)
                  {
                    do
                    {
                      v23 -= 16;
                      std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v21 + 3), v23);
                    }
                    while (v23 != v22);
                    uint64_t v24 = (void *)v21[1];
                  }
                  v21[2] = v22;
                  goto LABEL_58;
                }
              }
              break;
            case 5:
              if (atomic_fetch_add(v107, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v21 = v107;
                if (v107)
                {
                  atomic_ullong v27 = v107[1];
                  if (v27)
                  {
                    uint64_t v28 = v107[2];
                    atomic_ullong v29 = v107[1];
                    if (v28 != v27)
                    {
                      do
                        uint64_t v28 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v28 - 32);
                      while (v28 != v27);
                      atomic_ullong v29 = v21[1];
                    }
                    v21[2] = v27;
                    uint64_t v24 = (void *)v29;
LABEL_58:
                    operator delete(v24);
                  }
LABEL_59:
                  size_t v19 = v21;
                  uint64_t v20 = 0x1020C405E66F15BLL;
                  goto LABEL_70;
                }
              }
              break;
            case 9:
              if (atomic_fetch_add(v107, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                long long v30 = v107;
                if (v107)
                {
                  long long v31 = (void *)v107[7];
                  if (v31)
                  {
                    v107[8] = (atomic_ullong)v31;
                    operator delete(v31);
                  }
                  std::string v32 = (void *)v30[4];
                  if (v32)
                  {
                    v30[5] = (atomic_ullong)v32;
                    operator delete(v32);
                  }
                  uint64_t v33 = (std::__shared_weak_count *)v30[3];
                  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *, __n128))v33->__on_zero_shared)(v33, v5);
                    std::__shared_weak_count::__release_weak(v33);
                  }
                  size_t v19 = v30;
                  uint64_t v20 = 0x10B0C4002311774;
LABEL_70:
                  MEMORY[0x192FF16B0](v19, v20, v5);
                }
              }
              break;
            default:
              return;
          }
          return;
        default:
          if ((uint64_t)v107 < (uint64_t)v105) {
            goto LABEL_128;
          }
          goto LABEL_32;
      }
  }
}

void sub_19262F884(_Unwind_Exception *exception_object, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *a12, uint64_t a13, atomic_ullong *volatile a14, __int16 a15, char a16, char a17, uint64_t a18, char a19)
{
  uint64_t v20 = a2;
  switch((char)a15)
  {
    case 2:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a14);
      goto LABEL_7;
    case 3:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a14);
      goto LABEL_7;
    case 4:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a14);
      goto LABEL_7;
    case 5:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a14);
      goto LABEL_7;
    case 9:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a14);
LABEL_7:
      exception_object = a12;
      break;
    default:
      break;
  }
  switch(a19)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_30;
      }
      uint64_t v21 = a18;
      if (!a18) {
        goto LABEL_30;
      }
      if (*(char *)(a18 + 31) < 0) {
        operator delete(*(void **)(a18 + 8));
      }
      uint64_t v22 = v21;
      uint64_t v23 = 0x1012C404EF22A49;
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a18, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_30;
      }
      uint64_t v24 = a18;
      if (!a18) {
        goto LABEL_30;
      }
      uint64_t v25 = *(void **)(a18 + 8);
      if (v25)
      {
        *(void *)(a18 + 16) = v25;
        operator delete(v25);
      }
      uint64_t v22 = v24;
      uint64_t v23 = 0x1080C409938AC02;
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a18, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a18) {
        goto LABEL_30;
      }
      uint64_t v22 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(a18);
      goto LABEL_25;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a18, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a18) {
        goto LABEL_30;
      }
      uint64_t v22 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(a18);
LABEL_25:
      uint64_t v23 = 0x1020C405E66F15BLL;
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a18, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a18) {
        goto LABEL_30;
      }
      uint64_t v22 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair((void *)a18);
      uint64_t v23 = 0x10B0C4002311774;
      break;
    default:
LABEL_30:
      _Unwind_Resume(exception_object);
      return;
  }
  MEMORY[0x192FF16B0](v22, v23, v20);
  _Unwind_Resume(exception_object);
}

void nitro::nitro_builtins::MakeTensorArray(nitro::nitro_builtins *this, const nitro::flexible_type *a2, const nitro::flexible_type *a3)
{
  v127[0] = 0;
  v127[1] = 0;
  atomic_ullong v128 = 0;
  int v3 = *((unsigned __int8 *)a2 + 8);
  if (v3 == 9)
  {
    uint64_t v52 = *(void *)a2;
    int v54 = *(_DWORD *)(v52 + 8);
    uint64_t v53 = (const nitro::ndarray_container *)(v52 + 8);
    if (v54 == 3) {
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, v53);
    }
    else {
      _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v53, (uint64_t)&__dst);
    }
    nitro::ndarray<int>::ndarray((uint64_t)&v123, (uint64_t)&__dst);
    nitro::ndarray<int>::get_elements_copy((uint64_t *)&v123, (uint64_t *)v129);
    *(_OWORD *)uint64_t v127 = *(_OWORD *)v129;
    atomic_ullong v128 = v130;
    v129[1] = 0;
    char v130 = 0;
    v129[0] = 0;
    if (v125)
    {
      uint64_t v126 = v125;
      operator delete(v125);
    }
    if (v123.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v124 = v123.__r_.__value_.__r.__words[2];
      operator delete((void *)v123.__r_.__value_.__r.__words[2]);
    }
    std::string::size_type size = (std::__shared_weak_count *)v123.__r_.__value_.__l.__size_;
    if (v123.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v123.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    if (__p)
    {
      uint64_t v135 = __p;
      operator delete(__p);
    }
    if (v132)
    {
      char v133 = v132;
      operator delete(v132);
    }
    char v56 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
    if (__dst.__r_.__value_.__r.__words[2]
      && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
    goto LABEL_89;
  }
  if (v3 != 4 || (v4 = *(void *)a2, uint64_t v5 = *(void *)(*(void *)a2 + 8), *(void *)(*(void *)a2 + 16) == v5))
  {
LABEL_89:
    memset(&v123, 0, sizeof(v123));
    int v57 = nitro::flexible_type_converter<int>::get((uint64_t)&__dst, (unsigned __int8 *)this);
    unint64_t v58 = v57;
    std::string::size_type v59 = v123.__r_.__value_.__l.__size_;
    if (v123.__r_.__value_.__l.__size_ >= v123.__r_.__value_.__r.__words[2])
    {
      BOOL v61 = (void *)v123.__r_.__value_.__r.__words[0];
      std::string::size_type v62 = v123.__r_.__value_.__l.__size_ - v123.__r_.__value_.__r.__words[0];
      uint64_t v63 = (uint64_t)(v123.__r_.__value_.__l.__size_ - v123.__r_.__value_.__r.__words[0]) >> 3;
      unint64_t v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      int64_t v65 = v123.__r_.__value_.__r.__words[2] - v123.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v123.__r_.__value_.__r.__words[2] - v123.__r_.__value_.__r.__words[0]) >> 2 > v64) {
        unint64_t v64 = v65 >> 2;
      }
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v66 = v64;
      }
      if (v66)
      {
        if (v66 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v67 = (char *)operator new(8 * v66);
      }
      else
      {
        uint64_t v67 = 0;
      }
      uint64_t v68 = &v67[8 * v63];
      *(void *)uint64_t v68 = v58;
      uint64_t v60 = v68 + 8;
      if ((void *)v59 != v61)
      {
        unint64_t v69 = v59 - (void)v61 - 8;
        if (v69 < 0x58) {
          goto LABEL_190;
        }
        if (v59 - (void)v67 - v62 < 0x20) {
          goto LABEL_190;
        }
        uint64_t v70 = (v69 >> 3) + 1;
        uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        std::string::size_type v72 = v59 - v71;
        v68 -= v71;
        uint64_t v73 = &v67[8 * v63 - 16];
        unint64_t v74 = (long long *)(v59 - 16);
        uint64_t v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v76 = *v74;
          *((_OWORD *)v73 - 1) = *(v74 - 1);
          *(_OWORD *)uint64_t v73 = v76;
          v73 -= 32;
          v74 -= 2;
          v75 -= 4;
        }
        while (v75);
        std::string::size_type v59 = v72;
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_190:
          do
          {
            uint64_t v77 = *(void *)(v59 - 8);
            v59 -= 8;
            *((void *)v68 - 1) = v77;
            v68 -= 8;
          }
          while ((void *)v59 != v61);
        }
      }
      v123.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
      v123.__r_.__value_.__l.__size_ = (std::string::size_type)v60;
      v123.__r_.__value_.__r.__words[2] = (std::string::size_type)&v67[8 * v66];
      if (v61) {
        operator delete(v61);
      }
    }
    else
    {
      *(void *)v123.__r_.__value_.__l.__size_ = v57;
      uint64_t v60 = (char *)(v59 + 8);
    }
    v123.__r_.__value_.__l.__size_ = (std::string::size_type)v60;
    uint64_t v78 = (int *)v127[0];
    uint64_t v79 = (int *)v127[1];
    while (1)
    {
      if (v78 == v79)
      {
        v129[0] = 0;
        v129[1] = 0;
        char v130 = 0;
        if (v58)
        {
          if (v58 >> 62) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          size_t v118 = 4 * v58;
          atomic_ullong *volatile v119 = (char *)operator new(4 * v58);
          atomic_ullong *volatile v120 = &v119[4 * v58];
          v129[0] = v119;
          char v130 = v120;
          bzero(v119, v118);
          v129[1] = v120;
        }
        memset(__idx, 0, sizeof(__idx));
        nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__dst);
      }
      uint64_t v81 = *v78;
      if ((v81 & 0x80000000) == 0)
      {
        if ((unint64_t)v60 < v123.__r_.__value_.__r.__words[2])
        {
          *(void *)uint64_t v60 = v81;
          std::string::size_type v80 = (std::string::size_type)(v60 + 8);
        }
        else
        {
          uint64_t v82 = (char *)v123.__r_.__value_.__r.__words[0];
          uint64_t v83 = &v60[-v123.__r_.__value_.__r.__words[0]];
          uint64_t v84 = (uint64_t)&v60[-v123.__r_.__value_.__r.__words[0]] >> 3;
          unint64_t v85 = v84 + 1;
          if ((unint64_t)(v84 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v86 = v123.__r_.__value_.__r.__words[2] - v123.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v123.__r_.__value_.__r.__words[2] - v123.__r_.__value_.__r.__words[0]) >> 2 > v85) {
            unint64_t v85 = v86 >> 2;
          }
          if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v87 = v85;
          }
          if (v87)
          {
            if (v87 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v88 = operator new(8 * v87);
          }
          else
          {
            uint64_t v88 = 0;
          }
          uint64_t v96 = (char *)v88 + 8 * v84;
          void *v96 = v81;
          std::string::size_type v80 = (std::string::size_type)(v96 + 1);
          if (v60 != v82)
          {
            unint64_t v97 = v60 - v82 - 8;
            if (v97 < 0x168)
            {
              uint64_t v98 = v60;
              goto LABEL_141;
            }
            unint64_t v100 = (v60 - 8 - v82) & 0xFFFFFFFFFFFFFFF8;
            if (&v83[(void)v88 - 8 - v100] > &v83[(void)v88 - 8])
            {
              uint64_t v98 = v60;
              goto LABEL_141;
            }
            if (&v60[-v100 - 8] > v60 - 8)
            {
              uint64_t v98 = v60;
              goto LABEL_141;
            }
            if ((unint64_t)(v60 - &v83[(void)v88]) < 0x20)
            {
              uint64_t v98 = v60;
              goto LABEL_141;
            }
            uint64_t v106 = (v97 >> 3) + 1;
            uint64_t v107 = 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v98 = &v60[-v107];
            uint64_t v96 = (void *)((char *)v96 - v107);
            char v108 = (char *)v88 + 8 * v84 - 16;
            uint64_t v109 = v60 - 16;
            uint64_t v110 = v106 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v111 = *(_OWORD *)v109;
              *(v108 - 1) = *((_OWORD *)v109 - 1);
              *char v108 = v111;
              v108 -= 2;
              v109 -= 32;
              v110 -= 4;
            }
            while (v110);
            if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_141:
                uint64_t v99 = *((void *)v98 - 1);
                v98 -= 8;
                *--uint64_t v96 = v99;
              }
              while (v98 != v82);
            }
          }
          v123.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
          v123.__r_.__value_.__l.__size_ = v80;
          v123.__r_.__value_.__r.__words[2] = (std::string::size_type)v88 + 8 * v87;
          if (v82) {
            operator delete(v82);
          }
        }
        v123.__r_.__value_.__l.__size_ = v80;
        v58 *= *v78;
        goto LABEL_113;
      }
      if ((unint64_t)v60 >= v123.__r_.__value_.__r.__words[2]) {
        break;
      }
      *(void *)uint64_t v60 = 1;
      std::string::size_type v80 = (std::string::size_type)(v60 + 8);
LABEL_155:
      v123.__r_.__value_.__l.__size_ = v80;
LABEL_113:
      ++v78;
      uint64_t v60 = (char *)v80;
    }
    uint64_t v89 = (char *)v123.__r_.__value_.__r.__words[0];
    atomic_ullong v90 = &v60[-v123.__r_.__value_.__r.__words[0]];
    uint64_t v91 = (uint64_t)&v60[-v123.__r_.__value_.__r.__words[0]] >> 3;
    unint64_t v92 = v91 + 1;
    if ((unint64_t)(v91 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v93 = v123.__r_.__value_.__r.__words[2] - v123.__r_.__value_.__r.__words[0];
    if ((uint64_t)(v123.__r_.__value_.__r.__words[2] - v123.__r_.__value_.__r.__words[0]) >> 2 > v92) {
      unint64_t v92 = v93 >> 2;
    }
    if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v94 = v92;
    }
    if (v94)
    {
      if (v94 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      atomic_ullong v95 = operator new(8 * v94);
    }
    else
    {
      atomic_ullong v95 = 0;
    }
    uint64_t v101 = &v95[8 * v91];
    void *v101 = 1;
    std::string::size_type v80 = (std::string::size_type)(v101 + 1);
    if (v60 == v89) {
      goto LABEL_153;
    }
    unint64_t v102 = v60 - v89 - 8;
    if (v102 < 0x168)
    {
      uint64_t v103 = v60;
      goto LABEL_152;
    }
    unint64_t v105 = (v60 - 8 - v89) & 0xFFFFFFFFFFFFFFF8;
    if (&v90[(void)v95 - 8 - v105] > &v90[(void)v95 - 8])
    {
      uint64_t v103 = v60;
    }
    else
    {
      if (&v60[-v105 - 8] <= v60 - 8)
      {
        if ((unint64_t)(v60 - v95 - (void)v90) < 0x20)
        {
          uint64_t v103 = v60;
          goto LABEL_152;
        }
        uint64_t v112 = (v102 >> 3) + 1;
        uint64_t v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v103 = &v60[-v113];
        uint64_t v101 = (void *)((char *)v101 - v113);
        atomic_ullong *volatile v114 = &v95[8 * v91 - 16];
        uint64_t v115 = v60 - 16;
        uint64_t v116 = v112 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v117 = *(_OWORD *)v115;
          *(v114 - 1) = *((_OWORD *)v115 - 1);
          *atomic_ullong *volatile v114 = v117;
          v114 -= 2;
          v115 -= 32;
          v116 -= 4;
        }
        while (v116);
        if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_152;
        }
LABEL_153:
        v123.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
        v123.__r_.__value_.__l.__size_ = v80;
        v123.__r_.__value_.__r.__words[2] = (std::string::size_type)&v95[8 * v94];
        if (v89) {
          operator delete(v89);
        }
        goto LABEL_155;
      }
      uint64_t v103 = v60;
    }
    do
    {
LABEL_152:
      uint64_t v104 = *((void *)v103 - 1);
      v103 -= 8;
      *--uint64_t v101 = v104;
    }
    while (v103 != v89);
    goto LABEL_153;
  }
  unint64_t v6 = 0;
  while (2)
  {
    atomic_ullong v8 = (unsigned char *)(v5 + 16 * v6);
    LODWORD(v9) = 0;
    switch(v8[8])
    {
      case 1:
        std::string::size_type v9 = (uint64_t)*(double *)v8;
        goto LABEL_50;
      case 2:
        double v10 = *(double *)v8;
        uint64_t v11 = (const char **)(*(void *)v8 + 8);
        __idx[0] = 0;
        double v12 = (const char *)v11;
        if (*(char *)(*(void *)&v10 + 31) < 0) {
          double v12 = *v11;
        }
        size_t v13 = strlen(v12);
        if (v13 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v9 = v13;
        if (v13 >= 0x17)
        {
          uint64_t v29 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v13 | 7) != 0x17) {
            uint64_t v29 = v13 | 7;
          }
          uint64_t v30 = v29 + 1;
          p_dst = (std::string *)operator new(v29 + 1);
          __dst.__r_.__value_.__l.__size_ = v9;
          __dst.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13;
          p_dst = &__dst;
          if (!v13) {
            goto LABEL_40;
          }
        }
        memmove(p_dst, v12, v9);
LABEL_40:
        p_dst->__r_.__value_.__s.__data_[v9] = 0;
        LODWORD(v9) = std::stoll(&__dst, __idx, 10);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (*(char *)(*(void *)&v10 + 31) < 0)
        {
          if (__idx[0] != *(void *)(*(void *)&v10 + 16))
          {
LABEL_71:
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            atomic_ullong v50 = std::string::append(&v123, " cannot be interpreted as an integer");
            long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v51;
            v50->__r_.__value_.__l.__size_ = 0;
            v50->__r_.__value_.__r.__words[2] = 0;
            v50->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__dst);
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
        else if (__idx[0] != *(unsigned __int8 *)(*(void *)&v10 + 31))
        {
          goto LABEL_71;
        }
LABEL_50:
        long long v31 = (char *)v127[1];
        if (v127[1] < v128)
        {
          *(_DWORD *)v127[1] = v9;
          atomic_ullong v7 = v31 + 4;
        }
        else
        {
          std::string v32 = v127[0];
          int64_t v33 = (char *)v127[1] - (char *)v127[0];
          int64_t v34 = ((char *)v127[1] - (char *)v127[0]) >> 2;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v36 = v128 - (char *)v127[0];
          if ((v128 - (char *)v127[0]) >> 1 > v35) {
            unint64_t v35 = v36 >> 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            if (v37 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v38 = operator new(4 * v37);
          }
          else
          {
            uint64_t v38 = 0;
          }
          uint64_t v39 = &v38[4 * v34];
          _DWORD *v39 = v9;
          atomic_ullong v7 = v39 + 1;
          if (v31 != v32)
          {
            unint64_t v40 = v31 - v32 - 4;
            if (v40 < 0x2C) {
              goto LABEL_191;
            }
            if ((unint64_t)(v31 - v38 - v33) < 0x20) {
              goto LABEL_191;
            }
            uint64_t v41 = (v40 >> 2) + 1;
            uint64_t v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v43 = &v31[-v42];
            uint64_t v39 = (_DWORD *)((char *)v39 - v42);
            char v44 = &v38[4 * v34 - 16];
            atomic_ullong v45 = v31 - 16;
            uint64_t v46 = v41 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v47 = *(_OWORD *)v45;
              *(v44 - 1) = *((_OWORD *)v45 - 1);
              _OWORD *v44 = v47;
              v44 -= 2;
              v45 -= 32;
              v46 -= 8;
            }
            while (v46);
            long long v31 = v43;
            if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_191:
              do
              {
                int v48 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *--uint64_t v39 = v48;
              }
              while (v31 != v32);
            }
          }
          v127[0] = v39;
          atomic_ullong v128 = &v38[4 * v37];
          if (v32) {
            operator delete(v32);
          }
        }
        v127[1] = v7;
        ++v6;
        uint64_t v5 = *(void *)(v4 + 8);
        if (v6 < (*(void *)(v4 + 16) - v5) >> 4) {
          continue;
        }
        goto LABEL_89;
      case 3:
        double v24 = *(double *)v8;
        memset(&__dst, 0, sizeof(__dst));
        uint64_t v26 = *(unsigned char **)(*(void *)&v24 + 8);
        uint64_t v25 = *(unsigned char **)(*(void *)&v24 + 16);
        int64_t v27 = v25 - v26;
        if (v25 == v26)
        {
          uint64_t v28 = 0;
        }
        else
        {
          if (v27 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v28 = operator new(v25 - v26);
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
          __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v28 + 8 * (v27 >> 3);
          memcpy(v28, v26, v27);
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v28 + 8 * (v27 >> 3);
        }
        nitro::flexible_type_fail(0);
        if (!v28) {
          goto LABEL_49;
        }
        size_t v19 = v28;
        goto LABEL_48;
      case 4:
        double v16 = *(double *)v8;
        v129[1] = 0;
        char v130 = 0;
        v129[0] = 0;
        std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(v129, *(void **)(*(void *)&v16 + 8), *(void **)(*(void *)&v16 + 16), (uint64_t)(*(void *)(*(void *)&v16 + 16) - *(void *)(*(void *)&v16 + 8)) >> 4);
        nitro::flexible_type_fail(0);
        atomic_ullong v17 = (char *)v129[0];
        if (!v129[0]) {
          goto LABEL_49;
        }
        uint64_t v18 = (char *)v129[1];
        size_t v19 = v129[0];
        if (v129[1] != v129[0])
        {
          do
          {
            v18 -= 16;
            std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v130, (uint64_t)v18);
          }
          while (v18 != v17);
          size_t v19 = v129[0];
        }
        v129[1] = v17;
        goto LABEL_48;
      case 5:
        double v20 = *(double *)v8;
        memset(&__dst, 0, sizeof(__dst));
        std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__dst, *(char **)(*(void *)&v20 + 8), *(char **)(*(void *)&v20 + 16), (uint64_t)(*(void *)(*(void *)&v20 + 16) - *(void *)(*(void *)&v20 + 8)) >> 5);
        nitro::flexible_type_fail(0);
        std::string::size_type v21 = __dst.__r_.__value_.__r.__words[0];
        if (!__dst.__r_.__value_.__r.__words[0]) {
          goto LABEL_49;
        }
        std::string::size_type v22 = __dst.__r_.__value_.__l.__size_;
        std::string::size_type v23 = __dst.__r_.__value_.__r.__words[0];
        if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
        {
          do
            std::string::size_type v22 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v22 - 32);
          while (v22 != v21);
          std::string::size_type v23 = __dst.__r_.__value_.__r.__words[0];
        }
        __dst.__r_.__value_.__l.__size_ = v21;
        size_t v19 = (void *)v23;
LABEL_48:
        operator delete(v19);
LABEL_49:
        LODWORD(v9) = 0;
        goto LABEL_50;
      case 6:
      case 8:
        __break(1u);
        return;
      case 7:
        goto LABEL_50;
      case 9:
        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(*(void *)v8 + 8));
        nitro::flexible_type_fail(0);
        if (__p)
        {
          uint64_t v135 = __p;
          operator delete(__p);
        }
        if (v132)
        {
          char v133 = v132;
          operator delete(v132);
        }
        unint64_t v15 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
        if (__dst.__r_.__value_.__r.__words[2]
          && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        goto LABEL_49;
      default:
        std::string::size_type v9 = *(void *)v8;
        goto LABEL_50;
    }
  }
}

void sub_192630828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a19 < 0)
  {
    operator delete(a14);
    if ((v40 & 1) == 0)
    {
LABEL_8:
      if (a26) {
        operator delete(a26);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v39);
  goto LABEL_8;
}

void sub_192630D20(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_192630D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::TensorArrayScatter(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, uint64_t a4@<X8>)
{
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v144, (const nitro::ndarray_container *)(*(void *)a3 + 8));
  uint64_t v9 = *(void *)a2;
  nitro::flexible_type_converter<std::vector<int>>::get((unsigned __int8 *)this, &v143);
  if (v143.__end_ != v143.__begin_)
  {
    double v10 = (uint64_t *)__p;
    int64_t v11 = *(void *)__p - 1;
    unint64_t v12 = (char *)v143.__end_ - (char *)v143.__begin_ - 4;
    if (v12 >= 0x1C)
    {
      uint64_t v15 = (v12 >> 2) + 1;
      int64x2_t v16 = vdupq_n_s64(v11);
      begin = &v143.__begin_[v15 & 0x7FFFFFFFFFFFFFF8];
      std::vector<int>::pointer v17 = v143.__begin_ + 4;
      uint64_t v18 = v15 & 0x7FFFFFFFFFFFFFF8;
      int64x2_t v19 = v16;
      int64x2_t v20 = v16;
      int64x2_t v21 = v16;
      do
      {
        long long v22 = *((_OWORD *)v17 - 1);
        v23.i64[0] = (int)v22;
        v23.i64[1] = SDWORD1(v22);
        int64x2_t v24 = v23;
        v23.i64[0] = SDWORD2(v22);
        v23.i64[1] = SHIDWORD(v22);
        int64x2_t v25 = v23;
        v23.i64[0] = (int)*(_OWORD *)v17;
        v23.i64[1] = (int)HIDWORD(*(void *)v17);
        int64x2_t v26 = v23;
        v23.i64[0] = (int)*((void *)v17 + 1);
        v23.i64[1] = (int)HIDWORD(*(_OWORD *)v17);
        int64x2_t v19 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v19, v25), (int8x16_t)v19, (int8x16_t)v25);
        int64x2_t v16 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v16, v24), (int8x16_t)v16, (int8x16_t)v24);
        int64x2_t v21 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v21, v23), (int8x16_t)v21, (int8x16_t)v23);
        int64x2_t v20 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v20, v26), (int8x16_t)v20, (int8x16_t)v26);
        v17 += 8;
        v18 -= 8;
      }
      while (v18);
      int64x2_t v27 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v16, v20), (int8x16_t)v16, (int8x16_t)v20);
      int64x2_t v28 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v19, v21), (int8x16_t)v19, (int8x16_t)v21);
      int8x16_t v29 = vbslq_s8((int8x16_t)vcgtq_s64(v27, v28), (int8x16_t)v27, (int8x16_t)v28);
      v28.i64[0] = vextq_s8(v29, v29, 8uLL).u64[0];
      int64_t v11 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v29.i64[0], v28.i64[0]), *(int8x8_t *)v29.i8, *(int8x8_t *)v28.i8);
      if (v15 == (v15 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_13;
      }
    }
    else
    {
      begin = v143.__begin_;
    }
    do
    {
      int64_t v31 = *begin++;
      int64_t v30 = v31;
      if (v11 <= v31) {
        int64_t v11 = v30;
      }
    }
    while (begin != v143.__end_);
LABEL_13:
    std::string v32 = (char *)operator new(8uLL);
    int64_t v33 = v11 + 1;
    *(void *)std::string v32 = v33;
    int64_t v34 = v32 + 8;
    uint64_t v141 = v32 + 8;
    uint64_t v142 = v32 + 8;
    std::string v139 = 0;
    uint64_t v140 = v32;
    unint64_t v137 = 0;
    long long v138 = 0;
    uint64_t v36 = *(unsigned char **)(v9 + 32);
    unint64_t v35 = *(unsigned char **)(v9 + 40);
    int64_t v37 = v35 - v36;
    unint64_t v119 = v33;
    if (v35 == v36)
    {
      uint64_t v38 = 0;
      uint64_t v39 = 0;
    }
    else
    {
      if (v37 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v38 = (char *)operator new(v35 - v36);
      uint64_t v39 = &v38[8 * (v37 >> 3)];
      unint64_t v137 = v38;
      std::string v139 = v39;
      memcpy(v38, v36, v37);
      long long v138 = v39;
    }
    if ((unint64_t)(v39 - v38) >= 9)
    {
      uint64_t v118 = a4;
      unint64_t v40 = (v39 - v38) >> 3;
      unint64_t v41 = 1;
      while (v34 < v142)
      {
        *(void *)int64_t v34 = *(void *)&v38[8 * v41];
        uint64_t v42 = v34 + 8;
LABEL_20:
        uint64_t v141 = v42;
        ++v41;
        int64_t v34 = v42;
        if (v40 <= v41)
        {
          double v10 = (uint64_t *)__p;
          a4 = v118;
          goto LABEL_49;
        }
      }
      uint64_t v43 = (char *)v140;
      int64_t v44 = v34 - (unsigned char *)v140;
      uint64_t v45 = (v34 - (unsigned char *)v140) >> 3;
      unint64_t v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = v142 - (unsigned char *)v140;
      if ((v142 - (unsigned char *)v140) >> 2 > v46) {
        unint64_t v46 = v47 >> 2;
      }
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v46;
      }
      if (v48)
      {
        if (v48 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v49 = operator new(8 * v48);
      }
      else
      {
        uint64_t v49 = 0;
      }
      atomic_ullong v50 = &v49[8 * v45];
      *(void *)atomic_ullong v50 = *(void *)&v38[8 * v41];
      uint64_t v42 = v50 + 8;
      if (v34 == v43) {
        goto LABEL_36;
      }
      unint64_t v51 = v34 - v43 - 8;
      if (v51 < 0x168)
      {
        uint64_t v52 = v34;
        goto LABEL_35;
      }
      unint64_t v54 = (v34 - 8 - v43) & 0xFFFFFFFFFFFFFFF8;
      if (&v49[v44 - 8 - v54] > &v49[v44 - 8])
      {
        uint64_t v52 = v34;
      }
      else
      {
        if (&v34[-v54 - 8] <= v34 - 8)
        {
          if ((unint64_t)(v34 - v49 - v44) < 0x20)
          {
            uint64_t v52 = v34;
            goto LABEL_35;
          }
          uint64_t v55 = (v51 >> 3) + 1;
          uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v52 = &v34[-v56];
          v50 -= v56;
          int v57 = &v49[8 * v45 - 16];
          unint64_t v58 = v34 - 16;
          uint64_t v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v60 = *(_OWORD *)v58;
            *(v57 - 1) = *((_OWORD *)v58 - 1);
            _OWORD *v57 = v60;
            v57 -= 2;
            v58 -= 32;
            v59 -= 4;
          }
          while (v59);
          if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_35;
          }
LABEL_36:
          uint64_t v140 = v50;
          uint64_t v141 = v42;
          uint64_t v142 = &v49[8 * v48];
          if (v43) {
            operator delete(v43);
          }
          goto LABEL_20;
        }
        uint64_t v52 = v34;
      }
      do
      {
LABEL_35:
        uint64_t v53 = *((void *)v52 - 1);
        v52 -= 8;
        *((void *)v50 - 1) = v53;
        v50 -= 8;
      }
      while (v52 != v43);
      goto LABEL_36;
    }
LABEL_49:
    if (*((uint64_t **)&__p + 1) == v10 || (void)v145 == 0) {
      goto LABEL_65;
    }
    unint64_t v62 = *((void *)&__p + 1) - (void)v10 - 8;
    if (v62 >= 8)
    {
      uint64_t v65 = (v62 >> 3) + 1;
      unint64_t v64 = &v10[v65 & 0x3FFFFFFFFFFFFFFELL];
      unint64_t v66 = v10 + 1;
      uint64_t v67 = 1;
      uint64_t v68 = v65 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v69 = 1;
      do
      {
        v67 *= *(v66 - 1);
        v69 *= *v66;
        v66 += 2;
        v68 -= 2;
      }
      while (v68);
      uint64_t v63 = v69 * v67;
      if (v65 == (v65 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_59:
        if (v63)
        {
          unint64_t v71 = v119 - *v10;
          if (v119 > *v10)
          {
            int64x2_t v128 = 0uLL;
            unint64_t v129 = 0;
            v128.i64[1] = std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container const&>(&v128, (const nitro::ndarray_container *)&v144);
            if (v71 != -1)
            {
              std::string::size_type v72 = (char *)v140;
              *(void *)uint64_t v140 = v71 + 1;
              uint64_t v126 = 0;
              uint64_t v127 = 0;
              atomic_ullong v125 = 0;
              int64_t v73 = v141 - v72;
              if (v141 == v72)
              {
                uint64_t v75 = 0;
                unint64_t v74 = 0;
              }
              else
              {
                if (v73 < 0) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v74 = (char *)operator new(v141 - v72);
                uint64_t v75 = &v74[8 * (v73 >> 3)];
                atomic_ullong v125 = v74;
                uint64_t v127 = v75;
                memcpy(v74, v72, v73);
                uint64_t v126 = v75;
              }
              switch(v144)
              {
                case 3:
                  nitro::ndarray<int>::ndarray((uint64_t)&v151, (uint64_t)&v144);
                  double v157 = 0;
                  char v158 = 0;
                  uint64_t v159 = 0;
                  int64_t v81 = v75 - v74;
                  if (v75 != v74)
                  {
                    if (v81 < 0) {
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v82 = (uint64_t *)operator new(v75 - v74);
                    uint64_t v83 = &v82[v81 >> 3];
                    double v157 = v82;
                    uint64_t v159 = v83;
                    memcpy(v82, v74, v81);
                    char v158 = v83;
                  }
                  nitro::ndarray<int>::init_from_shape(&v157, &v120);
                  nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v130, &v120);
                  break;
                case 5:
                  nitro::ndarray<unsigned char>::ndarray((uint64_t)&v151, (uint64_t)&v144);
                  double v157 = 0;
                  char v158 = 0;
                  uint64_t v159 = 0;
                  int64_t v90 = v75 - v74;
                  if (v75 != v74)
                  {
                    if (v90 < 0) {
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v91 = (uint64_t *)operator new(v75 - v74);
                    unint64_t v92 = &v91[v90 >> 3];
                    double v157 = v91;
                    uint64_t v159 = v92;
                    memcpy(v91, v74, v90);
                    char v158 = v92;
                  }
                  nitro::ndarray<unsigned char>::init_from_shape(&v157, &v120);
                  nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&v130, &v120);
                  break;
                case 9:
                  nitro::ndarray<float>::ndarray((uint64_t)&v151, (uint64_t)&v144);
                  double v157 = 0;
                  char v158 = 0;
                  uint64_t v159 = 0;
                  int64_t v84 = v75 - v74;
                  if (v75 != v74)
                  {
                    if (v84 < 0) {
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v85 = (uint64_t *)operator new(v75 - v74);
                    int64_t v86 = &v85[v84 >> 3];
                    double v157 = v85;
                    uint64_t v159 = v86;
                    memcpy(v85, v74, v84);
                    char v158 = v86;
                  }
                  nitro::ndarray<float>::init_from_shape(&v157, &v120);
                  nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&v130, &v120);
                  break;
                case 11:
                  nitro::ndarray<half>::ndarray((uint64_t)&v151, (uint64_t)&v144);
                  double v157 = 0;
                  char v158 = 0;
                  uint64_t v159 = 0;
                  int64_t v87 = v75 - v74;
                  if (v75 != v74)
                  {
                    if (v87 < 0) {
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v88 = (uint64_t *)operator new(v75 - v74);
                    uint64_t v89 = &v88[v87 >> 3];
                    double v157 = v88;
                    uint64_t v159 = v89;
                    memcpy(v88, v74, v87);
                    char v158 = v89;
                  }
                  nitro::ndarray<half>::init_from_shape(&v157, &v120);
                  nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&v130, &v120);
                  break;
                default:
                  printf("%d\n", v144);
                  nitro::ndarray_container::visit<nitro::nitro_builtins::TensorArrayScatter(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)::$_0>(nitro::nitro_builtins::TensorArrayScatter(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)::$_0)::{lambda(void)#1}::operator()();
              }
              if (v123)
              {
                v124[0] = v123;
                operator delete(v123);
              }
              if (v121[1])
              {
                v122[0] = v121[1];
                operator delete(v121[1]);
              }
              int64_t v93 = (std::__shared_weak_count *)v121[0];
              if (v121[0] && !atomic_fetch_add((atomic_ullong *volatile)v121[0] + 1, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
              if (v157)
              {
                char v158 = v157;
                operator delete(v157);
              }
              if (v155)
              {
                char v156 = v155;
                operator delete(v155);
              }
              if (v153)
              {
                double v154 = v153;
                operator delete(v153);
              }
              unint64_t v94 = v152;
              if (v152 && !atomic_fetch_add(&v152->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
              if (v125)
              {
                uint64_t v126 = v125;
                operator delete(v125);
              }
              uint64_t v95 = v128.i64[1];
              if (v128.i64[1] >= v129)
              {
                uint64_t v96 = std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container const&>(&v128, (const nitro::ndarray_container *)&v130);
              }
              else
              {
                nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v128.i64[1], (const nitro::ndarray_container *)&v130);
                uint64_t v96 = v95 + 80;
              }
              v128.i64[1] = v96;
              if (v134[0])
              {
                v134[1] = v134[0];
                operator delete(v134[0]);
              }
              if ((void)v132)
              {
                *((void *)&v132 + 1) = v132;
                operator delete((void *)v132);
              }
              unint64_t v97 = (std::__shared_weak_count *)*((void *)&v131 + 1);
              if (*((void *)&v131 + 1))
              {
                if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v131 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                  std::__shared_weak_count::__release_weak(v97);
                }
              }
            }
            nitro::ndarray_container::concat((nitro::ndarray_container **)&v128, 0, (nitro::ndarray_container *)&v120);
            operator new();
          }
LABEL_124:
          uint64_t v99 = *(void *)(v9 + 32);
          uint64_t v98 = *(void *)(v9 + 40);
          uint64_t v152 = 0;
          char v153 = 0;
          unint64_t v151 = 0;
          uint64_t v100 = v98 - v99;
          if (v100)
          {
            if ((unint64_t)v100 > 0x5555555555555550) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v101 = v100 >> 3;
            unint64_t v102 = (long long *)operator new(24 * (v100 >> 3));
            uint64_t v103 = (std::__shared_weak_count *)((char *)v102 + 24 * v101);
            unint64_t v151 = v102;
            char v153 = v103;
            do
            {
              *(void *)unint64_t v102 = -1;
              *((void *)v102 + 1) = -1;
              *((void *)v102 + 2) = 1;
              unint64_t v102 = (long long *)((char *)v102 + 24);
            }
            while (v102 != (long long *)v103);
            uint64_t v152 = v103;
          }
          char v158 = 0;
          uint64_t v159 = 0;
          double v157 = 0;
          uint64_t v104 = *((void *)&__p + 1) - __p;
          if (*((void *)&__p + 1) != (void)__p)
          {
            if ((unint64_t)v104 > 0x5555555555555550) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v105 = v104 >> 3;
            uint64_t v106 = (uint64_t *)operator new(24 * (v104 >> 3));
            uint64_t v107 = &v106[3 * v105];
            double v157 = v106;
            uint64_t v159 = v107;
            do
            {
              *uint64_t v106 = -1;
              v106[1] = -1;
              void v106[2] = 1;
              v106 += 3;
            }
            while (v106 != v107);
            char v158 = v107;
          }
          std::vector<int>::pointer v108 = v143.__begin_;
          if (v143.__end_ == v143.__begin_)
          {
LABEL_156:
            *(void *)a4 = 0;
            *(unsigned char *)(a4 + 8) = 9;
            operator new();
          }
          unint64_t v109 = 0;
          while (1)
          {
            unint64_t v130 = v109;
            if ((v109 & 0x8000000000000000) != 0)
            {
              atomic_ullong *volatile v120 = &v130;
              nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
            }
            uint64_t v110 = v151;
            *(void *)unint64_t v151 = v109;
            *(long long *)((char *)v110 + 8) = xmmword_192DC8DB0;
            uint64_t v111 = v108[v109];
            unint64_t v130 = v111;
            if ((v111 & 0x80000000) != 0)
            {
              atomic_ullong *volatile v120 = &v130;
              nitro::slice_range::slice_range<int,(void *)0>(int)::{lambda(void)#1}::operator()();
            }
            uint64_t v112 = v157;
            *double v157 = v111;
            *(_OWORD *)(v112 + 1) = xmmword_192DC8DB0;
            nitro::ndarray_container::slice((uint64_t)&v144, (long long **)&v157, (uint64_t)&v130, (__n128)xmmword_192DC8DB0);
            nitro::ndarray_container::slice(v9 + 8, &v151, (uint64_t)&v120, v113);
            nitro::ndarray_container::assign((nitro::ndarray_container *)&v130, (const nitro::ndarray_container *)&v120);
            if (v124[0])
            {
              v124[1] = v124[0];
              operator delete(v124[0]);
            }
            if (v122[0])
            {
              v122[1] = v122[0];
              operator delete(v122[0]);
            }
            atomic_ullong *volatile v114 = (std::__shared_weak_count *)v121[1];
            if (v121[1])
            {
              if (!atomic_fetch_add((atomic_ullong *volatile)v121[1] + 1, 0xFFFFFFFFFFFFFFFFLL)) {
                break;
              }
            }
            uint64_t v115 = v134[0];
            if (v134[0]) {
              goto LABEL_146;
            }
LABEL_147:
            if ((void)v132)
            {
              *((void *)&v132 + 1) = v132;
              operator delete((void *)v132);
            }
            uint64_t v116 = (std::__shared_weak_count *)*((void *)&v131 + 1);
            if (*((void *)&v131 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v131 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
            ++v109;
            std::vector<int>::pointer v108 = v143.__begin_;
            if (v109 >= v143.__end_ - v143.__begin_) {
              goto LABEL_156;
            }
          }
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
          uint64_t v115 = v134[0];
          if (!v134[0]) {
            goto LABEL_147;
          }
LABEL_146:
          v134[1] = v115;
          operator delete(v115);
          goto LABEL_147;
        }
LABEL_65:
        nitro::ndarray_container::init_from_shape(v144, (uint64_t **)&v140, (uint64_t)&v130);
        int v144 = v130;
        long long v76 = v131;
        long long v131 = 0uLL;
        uint64_t v77 = (std::__shared_weak_count *)*((void *)&v145 + 1);
        long long v145 = v76;
        if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        long long __p = v132;
        uint64_t v147 = v133;
        uint64_t v133 = 0;
        long long v132 = 0uLL;
        uint64_t v78 = (void *)v148;
        if ((void)v148)
        {
          *((void *)&v148 + 1) = v148;
          operator delete((void *)v148);
          uint64_t v78 = (void *)v132;
        }
        long long v148 = *(_OWORD *)v134;
        uint64_t v79 = v135;
        v134[1] = 0;
        uint64_t v135 = 0;
        v134[0] = 0;
        uint64_t v149 = v79;
        uint64_t v150 = v136;
        if (v78)
        {
          *((void *)&v132 + 1) = v78;
          operator delete(v78);
        }
        std::string::size_type v80 = (std::__shared_weak_count *)*((void *)&v131 + 1);
        if (*((void *)&v131 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v131 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
        goto LABEL_124;
      }
    }
    else
    {
      uint64_t v63 = 1;
      unint64_t v64 = v10;
    }
    do
    {
      uint64_t v70 = *v64++;
      v63 *= v70;
    }
    while (v64 != *((uint64_t **)&__p + 1));
    goto LABEL_59;
  }
  *(void *)a4 = 0;
  *(unsigned char *)(a4 + 8) = 0;
  if (a3 != (const nitro::flexible_type *)a4)
  {
    *(void *)a4 = *(void *)a3;
    int v14 = *((unsigned __int8 *)a3 + 8);
    *(unsigned char *)(a4 + 8) = v14;
    switch(v14)
    {
      case 2:
      case 3:
      case 4:
      case 5:
      case 9:
        atomic_fetch_add(*(atomic_ullong *volatile *)a4, 1uLL);
        break;
      default:
        break;
    }
  }
  if (v143.__begin_)
  {
    v143.__end_ = v143.__begin_;
    operator delete(v143.__begin_);
  }
  if ((void)v148)
  {
    *((void *)&v148 + 1) = v148;
    operator delete((void *)v148);
  }
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  long long v117 = (std::__shared_weak_count *)*((void *)&v145 + 1);
  if (*((void *)&v145 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v145 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
}

void sub_192631DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v52 = *(void **)(v50 - 112);
  if (v52)
  {
    *(void *)(v50 - 104) = v52;
    operator delete(v52);
    uint64_t v53 = *(void **)(v50 - 184);
    if (!v53)
    {
LABEL_3:
      unint64_t v54 = __p;
      if (!__p) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v53 = *(void **)(v50 - 184);
    if (!v53) {
      goto LABEL_3;
    }
  }
  *(void *)(v50 - 176) = v53;
  operator delete(v53);
  unint64_t v54 = __p;
  if (!__p)
  {
LABEL_5:
    if (a44) {
      operator delete(a44);
    }
    if (a47) {
      operator delete(a47);
    }
    nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a50);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(v54);
  goto LABEL_5;
}

void *std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void nitro::nitro_builtins::TensorArrayGather(nitro::nitro_builtins *this, const nitro::flexible_type *a2, const nitro::flexible_type *a3, const nitro::flexible_type *a4)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  char v5 = 0;
  uint64_t v4 = 0;
  nitro::nitro_builtins::Gather((nitro::nitro_builtins *)&v4, a2, this, a4);
}

void sub_1926324D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_ullong *volatile a10, __int16 a11, char a12, char a13)
{
  switch((char)a11)
  {
    case 2:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    case 3:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    case 4:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    case 5:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    case 9:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

unsigned char *nitro::nitro_builtins::TensorArrayRead(unsigned char *this, const nitro::flexible_type *a2, const nitro::flexible_type *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  char v39 = 0;
  uint64_t v38 = 0;
  LODWORD(v3) = 0;
  switch(this[8])
  {
    case 1:
      std::string::size_type v3 = (uint64_t)*(double *)this;
      goto LABEL_44;
    case 2:
      double v4 = *(double *)this;
      char v5 = (const char **)(*(void *)this + 8);
      __idx[0] = 0;
      uint64_t v6 = (const char *)v5;
      if (*(char *)(*(void *)&v4 + 31) < 0) {
        uint64_t v6 = *v5;
      }
      size_t v7 = strlen(v6);
      if (v7 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v3 = v7;
      if (v7 >= 0x17)
      {
        uint64_t v23 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17) {
          uint64_t v23 = v7 | 7;
        }
        uint64_t v24 = v23 + 1;
        p_dst = (std::string *)operator new(v23 + 1);
        __dst.__r_.__value_.__l.__size_ = v3;
        __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v7;
        p_dst = &__dst;
        if (!v7)
        {
LABEL_34:
          p_dst->__r_.__value_.__s.__data_[v3] = 0;
          LODWORD(v3) = std::stoll(&__dst, __idx, 10);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (*(char *)(*(void *)&v4 + 31) < 0)
          {
            if (__idx[0] != *(void *)(*(void *)&v4 + 16)) {
              goto LABEL_46;
            }
          }
          else if (__idx[0] != *(unsigned __int8 *)(*(void *)&v4 + 31))
          {
LABEL_46:
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            int64x2_t v28 = std::string::append(&v37, " cannot be interpreted as an integer");
            long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v29;
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__dst);
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
LABEL_44:
          int64x2_t v25 = operator new(4uLL);
          size_t __idx[3] = (size_t)v25;
          _DWORD *v25 = v3;
          __idx[4] = (size_t)(v25 + 1);
          __idx[5] = (size_t)(v25 + 1);
          int64x2_t v26 = operator new(8uLL);
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
          void *v26 = 1;
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v26 + 1);
          __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)(v26 + 1);
          memset(&v37, 0, sizeof(v37));
          nitro::ndarray<int>::ndarray((uint64_t)v31);
        }
      }
      memmove(p_dst, v6, v3);
      goto LABEL_34;
    case 3:
      double v10 = *(double *)this;
      memset(&__dst, 0, sizeof(__dst));
      unint64_t v12 = *(unsigned char **)(*(void *)&v10 + 8);
      int64_t v11 = *(unsigned char **)(*(void *)&v10 + 16);
      int64_t v13 = v11 - v12;
      if (v11 == v12)
      {
        int v14 = 0;
      }
      else
      {
        if (v13 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v14 = operator new(v11 - v12);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
        __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v14 + 8 * (v13 >> 3);
        memcpy(v14, v12, v13);
        __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[2];
      }
      nitro::flexible_type_fail(0);
      if (!v14) {
        goto LABEL_43;
      }
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
      uint64_t v18 = v14;
      goto LABEL_42;
    case 4:
      double v15 = *(double *)this;
      memset(&__dst, 0, sizeof(__dst));
      std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&__dst, *(void **)(*(void *)&v15 + 8), *(void **)(*(void *)&v15 + 16), (uint64_t)(*(void *)(*(void *)&v15 + 16) - *(void *)(*(void *)&v15 + 8)) >> 4);
      nitro::flexible_type_fail(0);
      std::string::size_type v16 = __dst.__r_.__value_.__r.__words[0];
      if (!__dst.__r_.__value_.__r.__words[0]) {
        goto LABEL_43;
      }
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      uint64_t v18 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
      {
        do
        {
          size -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&__dst.__r_.__value_.__r.__words[2], size);
        }
        while (size != v16);
        uint64_t v18 = (void *)__dst.__r_.__value_.__r.__words[0];
      }
      __dst.__r_.__value_.__l.__size_ = v16;
      goto LABEL_42;
    case 5:
      double v19 = *(double *)this;
      memset(&__dst, 0, sizeof(__dst));
      std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__dst, *(char **)(*(void *)&v19 + 8), *(char **)(*(void *)&v19 + 16), (uint64_t)(*(void *)(*(void *)&v19 + 16) - *(void *)(*(void *)&v19 + 8)) >> 5);
      nitro::flexible_type_fail(0);
      std::string::size_type v20 = __dst.__r_.__value_.__r.__words[0];
      if (!__dst.__r_.__value_.__r.__words[0]) {
        goto LABEL_43;
      }
      std::string::size_type v21 = __dst.__r_.__value_.__l.__size_;
      std::string::size_type v22 = __dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
      {
        do
          std::string::size_type v21 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v21 - 32);
        while (v21 != v20);
        std::string::size_type v22 = __dst.__r_.__value_.__r.__words[0];
      }
      __dst.__r_.__value_.__l.__size_ = v20;
      uint64_t v18 = (void *)v22;
LABEL_42:
      operator delete(v18);
LABEL_43:
      LODWORD(v3) = 0;
      goto LABEL_44;
    case 6:
    case 8:
      __break(1u);
      return this;
    case 7:
      goto LABEL_44;
    case 9:
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(*(void *)this + 8));
      nitro::flexible_type_fail(0);
      if (v35)
      {
        uint64_t v36 = v35;
        operator delete(v35);
      }
      if (v33)
      {
        int64_t v34 = v33;
        operator delete(v33);
      }
      uint64_t v9 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
      if (__dst.__r_.__value_.__r.__words[2]
        && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      goto LABEL_43;
    default:
      std::string::size_type v3 = *(void *)this;
      goto LABEL_44;
  }
}

void sub_1926333C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (*(char *)(v37 - 217) < 0) {
    operator delete(*(void **)(v37 - 240));
  }
  if (*(char *)(v37 - 137) < 0)
  {
    operator delete(*(void **)(v37 - 160));
    if ((v36 & 1) == 0)
    {
LABEL_8:
      switch(*(unsigned char *)(v37 - 112))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v37 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_30;
          }
          uint64_t v39 = *(void *)(v37 - 120);
          if (!v39) {
            goto LABEL_30;
          }
          if (*(char *)(v39 + 31) < 0) {
            operator delete(*(void **)(v39 + 8));
          }
          uint64_t v40 = v39;
          uint64_t v41 = 0x1012C404EF22A49;
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v37 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_30;
          }
          uint64_t v42 = *(void *)(v37 - 120);
          if (!v42) {
            goto LABEL_30;
          }
          uint64_t v43 = *(void **)(v42 + 8);
          if (v43)
          {
            *(void *)(v42 + 16) = v43;
            operator delete(v43);
          }
          uint64_t v40 = v42;
          uint64_t v41 = 0x1080C409938AC02;
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v37 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_30;
          }
          uint64_t v44 = *(void *)(v37 - 120);
          if (!v44) {
            goto LABEL_30;
          }
          uint64_t v40 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(v44);
          goto LABEL_25;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v37 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_30;
          }
          uint64_t v45 = *(void *)(v37 - 120);
          if (!v45) {
            goto LABEL_30;
          }
          uint64_t v40 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(v45);
LABEL_25:
          uint64_t v41 = 0x1020C405E66F15BLL;
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v37 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_30;
          }
          unint64_t v46 = *(void **)(v37 - 120);
          if (!v46) {
            goto LABEL_30;
          }
          uint64_t v40 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v46);
          uint64_t v41 = 0x10B0C4002311774;
          break;
        default:
LABEL_30:
          _Unwind_Resume(a1);
          return;
      }
      MEMORY[0x192FF16B0](v40, v41);
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

void nitro::nitro_builtins::TensorArrayWrite(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v7 = *(void **)a3;
  uint64_t v126 = (const nitro::ndarray_container *)(*(void *)a3 + 8);
  int v8 = nitro::flexible_type_converter<int>::get((uint64_t)v145, (unsigned __int8 *)this);
  uint64_t v9 = (char *)v7[4];
  double v10 = (char *)v7[5];
  uint64_t v11 = v10 - v9;
  if (v10 == v9 || !v7[2])
  {
LABEL_17:
    uint64_t v125 = v8;
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v145, (const nitro::ndarray_container *)(*(void *)a2 + 8));
    unint64_t v151 = 0;
    uint64_t v152 = 0;
    char v153 = 0;
    uint64_t v24 = v147;
    int64_t v25 = v148 - (unsigned char *)v147;
    if (v148 == v147)
    {
      int64x2_t v27 = 0;
      int64x2_t v26 = 0;
    }
    else
    {
      if (v25 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      int64x2_t v26 = (uint64_t *)operator new(v148 - (unsigned char *)v147);
      int64x2_t v27 = &v26[v25 >> 3];
      unint64_t v151 = v26;
      char v153 = v27;
      memcpy(v26, v24, v25);
      uint64_t v152 = v27;
    }
    uint64_t v127 = v7;
    uint64_t v128 = a4;
    int64x2_t v28 = (char *)operator new(8uLL);
    *(void *)int64x2_t v28 = 1;
    long long v29 = v28 + 8;
    long long v138 = v28 + 8;
    uint64_t v136 = v28;
    unint64_t v137 = v28 + 8;
    if (v26 != v27)
    {
      while (1)
      {
        uint64_t v31 = *v26;
        if (v29 >= v138) {
          break;
        }
        *(void *)long long v29 = v31;
        int64_t v30 = v29 + 8;
LABEL_24:
        unint64_t v137 = v30;
        ++v26;
        long long v29 = v30;
        if (v26 == v27) {
          goto LABEL_52;
        }
      }
      std::string v32 = (char *)v136;
      int64_t v33 = v29 - (unsigned char *)v136;
      uint64_t v34 = (v29 - (unsigned char *)v136) >> 3;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v36 = v138 - (unsigned char *)v136;
      if ((v138 - (unsigned char *)v136) >> 2 > v35) {
        unint64_t v35 = v36 >> 2;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37)
      {
        if (v37 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v38 = operator new(8 * v37);
      }
      else
      {
        uint64_t v38 = 0;
      }
      uint64_t v39 = &v38[8 * v34];
      *(void *)uint64_t v39 = v31;
      int64_t v30 = v39 + 8;
      if (v29 == v32) {
        goto LABEL_40;
      }
      unint64_t v40 = v29 - v32 - 8;
      if (v40 < 0x168)
      {
        uint64_t v41 = v29;
        goto LABEL_39;
      }
      unint64_t v43 = (v29 - 8 - v32) & 0xFFFFFFFFFFFFFFF8;
      if (&v38[v33 - 8 - v43] > &v38[v33 - 8])
      {
        uint64_t v41 = v29;
      }
      else
      {
        if (&v29[-v43 - 8] <= v29 - 8)
        {
          if ((unint64_t)(v29 - v38 - v33) < 0x20)
          {
            uint64_t v41 = v29;
            goto LABEL_39;
          }
          uint64_t v44 = (v40 >> 3) + 1;
          uint64_t v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v41 = &v29[-v45];
          v39 -= v45;
          unint64_t v46 = &v38[8 * v34 - 16];
          uint64_t v47 = v29 - 16;
          uint64_t v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v49 = *(_OWORD *)v47;
            *(v46 - 1) = *((_OWORD *)v47 - 1);
            _OWORD *v46 = v49;
            v46 -= 2;
            v47 -= 32;
            v48 -= 4;
          }
          while (v48);
          if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_39;
          }
LABEL_40:
          uint64_t v136 = v39;
          unint64_t v137 = v30;
          long long v138 = &v38[8 * v37];
          if (v32) {
            operator delete(v32);
          }
          goto LABEL_24;
        }
        uint64_t v41 = v29;
      }
      do
      {
LABEL_39:
        uint64_t v42 = *((void *)v41 - 1);
        v41 -= 8;
        *((void *)v39 - 1) = v42;
        v39 -= 8;
      }
      while (v41 != v32);
      goto LABEL_40;
    }
LABEL_52:
    nitro::ndarray_container::reshape(v145, (int64x2_t **)&v136, (uint64_t)&v139);
    uint64_t v50 = (char *)v127[4];
    unint64_t v51 = (char *)v127[5];
    if (v51 == v50 || !v127[2])
    {
LABEL_65:
      *(void *)uint64_t v128 = 0;
      *(unsigned char *)(v128 + 8) = 9;
      operator new();
    }
    unint64_t v52 = v51 - v50 - 8;
    if (v52 >= 8)
    {
      uint64_t v55 = (v52 >> 3) + 1;
      unint64_t v54 = &v50[8 * (v55 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v56 = v50 + 8;
      uint64_t v57 = 1;
      uint64_t v58 = v55 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v59 = 1;
      do
      {
        v57 *= *(v56 - 1);
        v59 *= *v56;
        v56 += 2;
        v58 -= 2;
      }
      while (v58);
      uint64_t v53 = v59 * v57;
      if (v55 == (v55 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_60:
        if (v53)
        {
          uint64_t v61 = *(void *)v50;
          int64x2_t v134 = 0uLL;
          unint64_t v135 = 0;
          unint64_t v62 = (nitro::ndarray_container *)std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container const&>(&v134, v126);
          v134.i64[1] = (uint64_t)v62;
          if (v125 != v61)
          {
            uint64_t v63 = (char *)v136;
            *(void *)uint64_t v136 = v125 - v61;
            unint64_t v129 = 0;
            int64_t v64 = v137 - v63;
            if (v137 == v63)
            {
              unint64_t v66 = 0;
              uint64_t v65 = 0;
            }
            else
            {
              if (v64 < 0) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v65 = (char *)operator new(v137 - v63);
              unint64_t v66 = &v65[8 * (v64 >> 3)];
              unint64_t v129 = v65;
              memcpy(v65, v63, v64);
            }
            switch(*(_DWORD *)v126)
            {
              case 3:
                nitro::ndarray<int>::ndarray((uint64_t)&v154, (uint64_t)v126);
                memset(&v160, 0, sizeof(v160));
                uint64_t v67 = v66 - v65;
                if (v66 != v65)
                {
                  if (v67 < 0) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v68 = (char *)operator new(v66 - v65);
                  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
                  v160.__r_.__value_.__r.__words[2] = (std::string::size_type)&v68[8 * (v67 >> 3)];
                  uint64_t v69 = v65;
                  uint64_t v70 = v68;
                  if ((unint64_t)(v67 - 8) < 0x18) {
                    goto LABEL_176;
                  }
                  unint64_t v71 = ((unint64_t)(v67 - 8) >> 3) + 1;
                  uint64_t v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v69 = &v65[v72];
                  uint64_t v70 = &v68[v72];
                  int64_t v73 = v68 + 16;
                  unint64_t v74 = (long long *)(v65 + 16);
                  uint64_t v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v76 = *v74;
                    *(v73 - 1) = *(v74 - 1);
                    *int64_t v73 = v76;
                    v73 += 2;
                    v74 += 2;
                    v75 -= 4;
                  }
                  while (v75);
                  if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_176:
                    do
                    {
                      uint64_t v77 = *(void *)v69;
                      v69 += 8;
                      *(void *)uint64_t v70 = v77;
                      v70 += 8;
                    }
                    while (v69 != v66);
                  }
                  v160.__r_.__value_.__l.__size_ = (std::string::size_type)v70;
                }
                nitro::ndarray<int>::init_from_shape((uint64_t **)&v160, &v161);
                nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v130, &v161);
                break;
              case 5:
                nitro::ndarray<unsigned char>::ndarray((uint64_t)&v154, (uint64_t)v126);
                memset(&v160, 0, sizeof(v160));
                uint64_t v100 = v66 - v65;
                if (v66 != v65)
                {
                  if (v100 < 0) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v101 = (char *)operator new(v66 - v65);
                  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
                  v160.__r_.__value_.__r.__words[2] = (std::string::size_type)&v101[8 * (v100 >> 3)];
                  unint64_t v102 = v65;
                  uint64_t v103 = v101;
                  if ((unint64_t)(v100 - 8) < 0x18) {
                    goto LABEL_177;
                  }
                  unint64_t v104 = ((unint64_t)(v100 - 8) >> 3) + 1;
                  uint64_t v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
                  unint64_t v102 = &v65[v105];
                  uint64_t v103 = &v101[v105];
                  uint64_t v106 = v101 + 16;
                  uint64_t v107 = (long long *)(v65 + 16);
                  uint64_t v108 = v104 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v109 = *v107;
                    *(v106 - 1) = *(v107 - 1);
                    *uint64_t v106 = v109;
                    v106 += 2;
                    v107 += 2;
                    v108 -= 4;
                  }
                  while (v108);
                  if (v104 != (v104 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_177:
                    do
                    {
                      uint64_t v110 = *(void *)v102;
                      v102 += 8;
                      *(void *)uint64_t v103 = v110;
                      v103 += 8;
                    }
                    while (v102 != v66);
                  }
                  v160.__r_.__value_.__l.__size_ = (std::string::size_type)v103;
                }
                nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)&v160, &v161);
                nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&v130, &v161);
                break;
              case 9:
                nitro::ndarray<float>::ndarray((uint64_t)&v154, (uint64_t)v126);
                memset(&v160, 0, sizeof(v160));
                uint64_t v78 = v66 - v65;
                if (v66 != v65)
                {
                  if (v78 < 0) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v79 = (char *)operator new(v66 - v65);
                  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
                  v160.__r_.__value_.__r.__words[2] = (std::string::size_type)&v79[8 * (v78 >> 3)];
                  std::string::size_type v80 = v65;
                  int64_t v81 = v79;
                  if ((unint64_t)(v78 - 8) < 0x18) {
                    goto LABEL_178;
                  }
                  unint64_t v82 = ((unint64_t)(v78 - 8) >> 3) + 1;
                  uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
                  std::string::size_type v80 = &v65[v83];
                  int64_t v81 = &v79[v83];
                  int64_t v84 = v79 + 16;
                  unint64_t v85 = (long long *)(v65 + 16);
                  uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v87 = *v85;
                    *(v84 - 1) = *(v85 - 1);
                    *int64_t v84 = v87;
                    v84 += 2;
                    v85 += 2;
                    v86 -= 4;
                  }
                  while (v86);
                  if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_178:
                    do
                    {
                      uint64_t v88 = *(void *)v80;
                      v80 += 8;
                      *(void *)int64_t v81 = v88;
                      v81 += 8;
                    }
                    while (v80 != v66);
                  }
                  v160.__r_.__value_.__l.__size_ = (std::string::size_type)v81;
                }
                nitro::ndarray<float>::init_from_shape((uint64_t **)&v160, &v161);
                nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&v130, &v161);
                break;
              case 0xB:
                nitro::ndarray<half>::ndarray((uint64_t)&v154, (uint64_t)v126);
                memset(&v160, 0, sizeof(v160));
                uint64_t v89 = v66 - v65;
                if (v66 != v65)
                {
                  if (v89 < 0) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  int64_t v90 = (char *)operator new(v66 - v65);
                  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
                  v160.__r_.__value_.__r.__words[2] = (std::string::size_type)&v90[8 * (v89 >> 3)];
                  uint64_t v91 = v65;
                  unint64_t v92 = v90;
                  if ((unint64_t)(v89 - 8) < 0x18) {
                    goto LABEL_179;
                  }
                  unint64_t v93 = ((unint64_t)(v89 - 8) >> 3) + 1;
                  uint64_t v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v91 = &v65[v94];
                  unint64_t v92 = &v90[v94];
                  uint64_t v95 = v90 + 16;
                  uint64_t v96 = (long long *)(v65 + 16);
                  uint64_t v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v98 = *v96;
                    *(v95 - 1) = *(v96 - 1);
                    _OWORD *v95 = v98;
                    v95 += 2;
                    v96 += 2;
                    v97 -= 4;
                  }
                  while (v97);
                  if (v93 != (v93 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_179:
                    do
                    {
                      uint64_t v99 = *(void *)v91;
                      v91 += 8;
                      *(void *)unint64_t v92 = v99;
                      v92 += 8;
                    }
                    while (v91 != v66);
                  }
                  v160.__r_.__value_.__l.__size_ = (std::string::size_type)v92;
                }
                nitro::ndarray<half>::init_from_shape((uint64_t **)&v160, &v161);
                nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&v130, &v161);
                break;
              default:
                nitro::ndarray_container::visit<nitro::nitro_builtins::TensorArrayWrite(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)::$_0>(nitro::nitro_builtins::TensorArrayWrite(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)::$_0)const::{lambda(void)#1}::operator()();
            }
            if (v165)
            {
              uint64_t v166 = v165;
              operator delete(v165);
            }
            if (v163)
            {
              v164 = v163;
              operator delete(v163);
            }
            uint64_t v111 = v162;
            if (v162 && !atomic_fetch_add(&v162->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
            if (v160.__r_.__value_.__r.__words[0])
            {
              v160.__r_.__value_.__l.__size_ = v160.__r_.__value_.__r.__words[0];
              operator delete(v160.__r_.__value_.__l.__data_);
            }
            if (v158)
            {
              uint64_t v159 = v158;
              operator delete(v158);
            }
            if (v156)
            {
              double v157 = v156;
              operator delete(v156);
            }
            uint64_t v112 = v155;
            if (v155 && !atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
              std::__shared_weak_count::__release_weak(v112);
            }
            if (v129) {
              operator delete(v129);
            }
            uint64_t v113 = v134.i64[1];
            if (v134.i64[1] >= v135)
            {
              uint64_t v114 = std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container const&>(&v134, (const nitro::ndarray_container *)&v130);
            }
            else
            {
              nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v134.i64[1], (const nitro::ndarray_container *)&v130);
              uint64_t v114 = v113 + 80;
            }
            v134.i64[1] = v114;
            if (v133[0])
            {
              v133[1] = v133[0];
              operator delete(v133[0]);
            }
            if (v132[0])
            {
              v132[1] = v132[0];
              operator delete(v132[0]);
            }
            uint64_t v115 = (std::__shared_weak_count *)v131[1];
            if (v131[1] && !atomic_fetch_add((atomic_ullong *volatile)v131[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v115);
            }
            unint64_t v62 = (nitro::ndarray_container *)v134.i64[1];
          }
          if ((unint64_t)v62 >= v135)
          {
            uint64_t v116 = std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container const&>(&v134, (const nitro::ndarray_container *)&v139);
          }
          else
          {
            nitro::ndarray_container::ndarray_container(v62, (const nitro::ndarray_container *)&v139);
            uint64_t v116 = (uint64_t)v62 + 80;
          }
          v134.i64[1] = v116;
          nitro::ndarray_container::concat((nitro::ndarray_container **)&v134, 0, (nitro::ndarray_container *)&v130);
          *(void *)uint64_t v128 = 0;
          *(unsigned char *)(v128 + 8) = 9;
          operator new();
        }
        goto LABEL_65;
      }
    }
    else
    {
      uint64_t v53 = 1;
      unint64_t v54 = (char *)v127[4];
    }
    do
    {
      uint64_t v60 = *(void *)v54;
      v54 += 8;
      v53 *= v60;
    }
    while (v54 != v51);
    goto LABEL_60;
  }
  if ((unint64_t)(v11 - 8) < 8)
  {
    uint64_t v12 = 1;
    int64_t v13 = (char *)v7[4];
    do
    {
LABEL_8:
      uint64_t v19 = *(void *)v13;
      v13 += 8;
      v12 *= v19;
    }
    while (v13 != v10);
    goto LABEL_9;
  }
  unint64_t v14 = ((unint64_t)(v11 - 8) >> 3) + 1;
  int64_t v13 = &v9[8 * (v14 & 0x3FFFFFFFFFFFFFFELL)];
  double v15 = v9 + 8;
  uint64_t v16 = 1;
  uint64_t v17 = v14 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v18 = 1;
  do
  {
    v16 *= *(v15 - 1);
    v18 *= *v15;
    v15 += 2;
    v17 -= 2;
  }
  while (v17);
  uint64_t v12 = v18 * v16;
  if (v14 != (v14 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v12 || *(void *)v9 <= (unint64_t)v8) {
    goto LABEL_17;
  }
  unint64_t v151 = 0;
  uint64_t v152 = 0;
  char v153 = 0;
  if ((unint64_t)v11 >= 0x5555555555555551) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v20 = v8;
  uint64_t v21 = v11 >> 3;
  std::string::size_type v22 = operator new(24 * (v11 >> 3));
  unint64_t v151 = v22;
  char v153 = &v22[3 * v21];
  uint64_t v23 = v22;
  do
  {
    *uint64_t v23 = -1;
    v23[1] = -1;
    v23[2] = 1;
    v23 += 3;
  }
  while (v23 != &v22[3 * v21]);
  uint64_t v152 = &v22[3 * v21];
  v145[0] = v20;
  if ((v20 & 0x80000000) != 0)
  {
    std::string v139 = v145;
    nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
  }
  *std::string::size_type v22 = v20;
  *(_OWORD *)(v22 + 1) = xmmword_192DC8DB0;
  nitro::ndarray_container::slice((uint64_t)v126, (long long **)&v151, (uint64_t)v145, (__n128)xmmword_192DC8DB0);
  switch(*((unsigned char *)a2 + 8))
  {
    case 1:
      uint64_t v119 = *(void *)a2;
      uint64_t v161 = 0;
      uint64_t v162 = 0;
      uint64_t v163 = 0;
      atomic_ullong *volatile v120 = operator new(8uLL);
      uint64_t v161 = v120;
      void *v120 = v119;
      uint64_t v162 = (std::__shared_weak_count *)(v120 + 1);
      uint64_t v163 = v120 + 1;
      double v154 = 0;
      char v155 = 0;
      char v156 = 0;
      memset(&v160, 0, sizeof(v160));
      nitro::ndarray<double>::ndarray((uint64_t)&v130);
    case 2:
      uint64_t v117 = *(void *)a2;
      if (*(char *)(*(void *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v160, *(const std::string::value_type **)(v117 + 8), *(void *)(v117 + 16));
      }
      else
      {
        long long v118 = *(_OWORD *)(v117 + 8);
        v160.__r_.__value_.__r.__words[2] = *(void *)(v117 + 24);
        *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v118;
      }
      nitro::flexible_type_fail(0);
      unint64_t v130 = 0;
      v131[0] = 0;
      v131[1] = 0;
      uint64_t v161 = 0;
      uint64_t v162 = 0;
      uint64_t v163 = 0;
      double v154 = 0;
      char v155 = 0;
      char v156 = 0;
      nitro::ndarray_container::ndarray_container<double,(void *)0>((uint64_t)&v139);
    case 3:
      uint64_t v161 = 0;
      uint64_t v162 = 0;
      uint64_t v163 = 0;
      double v154 = 0;
      char v155 = 0;
      char v156 = 0;
      nitro::ndarray<double>::ndarray((uint64_t)&v130);
    case 4:
      uint64_t v122 = *(void *)a2;
      memset(&v160, 0, sizeof(v160));
      std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&v160, *(void **)(v122 + 8), *(void **)(v122 + 16), (uint64_t)(*(void *)(v122 + 16) - *(void *)(v122 + 8)) >> 4);
      nitro::flexible_type_fail(0);
      unint64_t v130 = 0;
      v131[0] = 0;
      v131[1] = 0;
      uint64_t v161 = 0;
      uint64_t v162 = 0;
      uint64_t v163 = 0;
      double v154 = 0;
      char v155 = 0;
      char v156 = 0;
      nitro::ndarray_container::ndarray_container<double,(void *)0>((uint64_t)&v139);
    case 5:
      uint64_t v121 = *(void *)a2;
      memset(&v160, 0, sizeof(v160));
      std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&v160, *(char **)(v121 + 8), *(char **)(v121 + 16), (uint64_t)(*(void *)(v121 + 16) - *(void *)(v121 + 8)) >> 5);
      nitro::flexible_type_fail(0);
      unint64_t v130 = 0;
      v131[0] = 0;
      v131[1] = 0;
      uint64_t v161 = 0;
      uint64_t v162 = 0;
      uint64_t v163 = 0;
      double v154 = 0;
      char v155 = 0;
      char v156 = 0;
      nitro::ndarray_container::ndarray_container<double,(void *)0>((uint64_t)&v139);
    case 6:
    case 8:
      __break(1u);
      return;
    case 7:
      unint64_t v130 = 0;
      v131[0] = 0;
      v131[1] = 0;
      uint64_t v161 = 0;
      uint64_t v162 = 0;
      uint64_t v163 = 0;
      double v154 = 0;
      char v155 = 0;
      char v156 = 0;
      nitro::ndarray_container::ndarray_container<double,(void *)0>((uint64_t)&v139);
    case 9:
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v139, (const nitro::ndarray_container *)(*(void *)a2 + 8));
      nitro::ndarray_container::assign((nitro::ndarray_container *)v145, (const nitro::ndarray_container *)&v139);
      if (__p)
      {
        int v144 = __p;
        operator delete(__p);
      }
      if (v141)
      {
        uint64_t v142 = v141;
        operator delete(v141);
      }
      std::string v123 = v140;
      if (v140 && !atomic_fetch_add(&v140->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
      if (v149)
      {
        uint64_t v150 = v149;
        operator delete(v149);
      }
      if (v147)
      {
        long long v148 = v147;
        operator delete(v147);
      }
      std::string::size_type v124 = v146;
      if (v146 && !atomic_fetch_add(&v146->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
      *(void *)a4 = 0;
      *(unsigned char *)(a4 + 8) = 9;
      operator new();
    default:
      nitro::flexible_type_fail(0);
      unint64_t v130 = 0;
      v131[0] = 0;
      v131[1] = 0;
      uint64_t v161 = 0;
      uint64_t v162 = 0;
      uint64_t v163 = 0;
      double v154 = 0;
      char v155 = 0;
      char v156 = 0;
      nitro::ndarray_container::ndarray_container<double,(void *)0>((uint64_t)&v139);
  }
}

void sub_19263501C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56,uint64_t a57)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1926354D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_ullong *volatile *a13)
{
  MEMORY[0x192FF16B0](v13, 0x10B0C4002311774);
  if (atomic_fetch_add(*a13, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    if (*a13)
    {
      unint64_t v14 = std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(*(void **)a13);
      MEMORY[0x192FF16B0](v14, 0x10B0C4002311774);
    }
    *a13 = 0;
  }
  *a13 = 0;
  *((unsigned char *)a13 + 8) = 0;
  JUMPOUT(0x1926355C8);
}

void sub_19263563C()
{
}

void nitro::nitro_builtins::TensorArraySize(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = *(_OWORD *)(*(void *)a1 + 32);
  uint64_t v4 = *(void *)(*(void *)a1 + 40);
  char v5 = (const void *)v3;
  size_t v6 = v4 - v3;
  if (v4 - (uint64_t)v3 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = operator new(v4 - v3);
  memcpy(v7, v5, v6);
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)a2 = *v7;

  operator delete(v7);
}

void sub_192635790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nitro::nitro_builtins::Skip@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  if (result != a2)
  {
    *(void *)a2 = *(void *)result;
    int v2 = *(unsigned __int8 *)(result + 8);
    *(unsigned char *)(a2 + 8) = v2;
    if ((v2 - 2) < 4 || v2 == 9) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a2, 1uLL);
    }
  }
  return result;
}

void nitro::nitro_builtins::ExpandDims(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *((unsigned __int8 *)this + 8);
  if (v5 == 9)
  {
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__p, (const nitro::ndarray_container *)(*(void *)this + 8));
    unint64_t v104 = 0;
    uint64_t v105 = 0;
    uint64_t v106 = 0;
    uint64_t v23 = v110;
    int64_t v24 = v111 - (unsigned char *)v110;
    if (v111 == v110)
    {
      int64_t v25 = 0;
    }
    else
    {
      if (v24 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      int64_t v25 = (char *)operator new(v111 - (unsigned char *)v110);
      unint64_t v104 = v25;
      uint64_t v106 = &v25[8 * (v24 >> 3)];
      memcpy(v25, v23, v24);
      uint64_t v105 = v106;
    }
    uint64_t v101 = 0;
    unint64_t v102 = 0;
    uint64_t v103 = 0;
    int64x2_t v26 = v112[0];
    int64_t v27 = (char *)v112[1] - (char *)v112[0];
    if (v112[1] != v112[0])
    {
      if (v27 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v101 = operator new((char *)v112[1] - (char *)v112[0]);
      uint64_t v103 = (char *)v101 + 8 * (v27 >> 3);
      memcpy(v101, v26, v27);
      unint64_t v102 = v103;
    }
    uint64_t v28 = *(void *)a2;
    uint64_t v96 = 1;
    std::vector<unsigned long>::insert((char **)&v104, (uint64_t)&v25[8 * v28], &v96);
    std::vector<unsigned long>::insert(&v101, (unsigned char *)v101 + 8 * v28, (char *)v101 + 8 * v28);
    nitro::ndarray_container::ndarray_container((uint64_t)&v96, &v108, (int)__p, (uint64_t)&v104, (uint64_t)&v101, v113);
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 9;
    operator new();
  }
  if (v5 != 1)
  {
    if (*((unsigned char *)this + 8)) {
      nitro::nitro_builtins::ExpandDims(nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()();
    }
    uint64_t v6 = *(void *)this;
    size_t v7 = operator new(8uLL);
    long long __p = v7;
    void *v7 = 1;
    uint64_t v108 = v7 + 1;
    long long v109 = v7 + 1;
    nitro::ndarray<float>::init_from_shape((uint64_t **)&__p, &v96);
    if (__p)
    {
      uint64_t v108 = __p;
      operator delete(__p);
    }
    if (v100) {
      goto LABEL_95;
    }
    uint64_t v9 = v97[1];
    int v8 = (uint64_t *)v98[0];
    uint64_t v10 = v96;
    int64_t v11 = (char *)v98[0] - (char *)v97[1];
    if (v98[0] == v97[1])
    {
      uint64_t v9 = v98[0];
LABEL_76:
      unint64_t v84 = 0;
      BOOL v86 = v98[0] == v9 || v96 == 0;
      unint64_t v87 = (char *)v98[0] - (char *)v9 - 8;
      uint64_t v88 = (v87 >> 3) + 1;
      if (!v86) {
        goto LABEL_84;
      }
LABEL_83:
      unint64_t v89 = 0;
      while (1)
      {
        if (v84 >= v89)
        {
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__p, &v96);
          *(void *)a3 = 0;
          *(unsigned char *)(a3 + 8) = 9;
          operator new();
        }
        *(float *)(v10 + 4 * v84++) = (float)v6;
        if (v86) {
          goto LABEL_83;
        }
LABEL_84:
        if (v87 < 8) {
          break;
        }
        uint64_t v91 = v88 & 0x3FFFFFFFFFFFFFFELL;
        unint64_t v92 = v9 + 1;
        uint64_t v93 = 1;
        uint64_t v94 = 1;
        do
        {
          v93 *= *(v92 - 1);
          v94 *= *v92;
          v92 += 2;
          v91 -= 2;
        }
        while (v91);
        unint64_t v89 = v94 * v93;
        int64_t v90 = &v9[v88 & 0x3FFFFFFFFFFFFFFELL];
        if (v88 != (v88 & 0x3FFFFFFFFFFFFFFELL))
        {
          do
          {
LABEL_89:
            uint64_t v95 = *v90++;
            v89 *= v95;
          }
          while (v90 != v8);
        }
      }
      unint64_t v89 = 1;
      int64_t v90 = v9;
      goto LABEL_89;
    }
    if (!v96)
    {
      uint64_t v12 = 0;
      goto LABEL_66;
    }
    if ((unint64_t)(v11 - 8) >= 8)
    {
      unint64_t v63 = ((unint64_t)(v11 - 8) >> 3) + 1;
      uint64_t v13 = (uint64_t *)((char *)v97[1] + 8 * (v63 & 0x3FFFFFFFFFFFFFFELL));
      int64_t v64 = (char *)v97[1] + 8;
      uint64_t v65 = 1;
      uint64_t v66 = v63 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v67 = 1;
      do
      {
        v65 *= *(v64 - 1);
        v67 *= *v64;
        v64 += 2;
        v66 -= 2;
      }
      while (v66);
      uint64_t v12 = v67 * v65;
      if (v63 == (v63 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_66:
        unint64_t v69 = v11 >> 3;
        if ((unint64_t)(v11 >> 3) <= 1) {
          unint64_t v69 = 1;
        }
        if (v69 >= 2)
        {
          uint64_t v72 = 0;
          uint64_t v73 = 0;
          unint64_t v70 = v69 & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v74 = (char *)v97[1] + 8;
          uint64_t v75 = (char *)v99 + 8;
          unint64_t v76 = v69 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v72 += *(v75 - 1) * (*(v74 - 1) - 1);
            v73 += *v75 * (*v74 - 1);
            v74 += 2;
            v75 += 2;
            v76 -= 2;
          }
          while (v76);
          uint64_t v71 = v73 + v72;
          if (v69 == v70)
          {
LABEL_75:
            if (v12 == v71 + 1) {
              goto LABEL_76;
            }
LABEL_95:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          }
        }
        else
        {
          unint64_t v70 = 0;
          uint64_t v71 = 0;
        }
        unint64_t v77 = v69 - v70;
        uint64_t v78 = 8 * v70;
        uint64_t v79 = (uint64_t *)((char *)v99 + v78);
        std::string::size_type v80 = (uint64_t *)((char *)v97[1] + v78);
        do
        {
          uint64_t v81 = *v80++;
          uint64_t v82 = v81 - 1;
          uint64_t v83 = *v79++;
          v71 += v83 * v82;
          --v77;
        }
        while (v77);
        goto LABEL_75;
      }
    }
    else
    {
      uint64_t v12 = 1;
      uint64_t v13 = (uint64_t *)v97[1];
    }
    do
    {
      uint64_t v68 = *v13++;
      v12 *= v68;
    }
    while (v13 != v98[0]);
    goto LABEL_66;
  }
  double v14 = *(double *)this;
  double v15 = operator new(8uLL);
  long long __p = v15;
  *double v15 = 1;
  uint64_t v108 = v15 + 1;
  long long v109 = v15 + 1;
  nitro::ndarray<float>::init_from_shape((uint64_t **)&__p, &v96);
  if (__p)
  {
    uint64_t v108 = __p;
    operator delete(__p);
  }
  if (v100) {
    goto LABEL_94;
  }
  uint64_t v17 = v97[1];
  uint64_t v16 = (uint64_t *)v98[0];
  uint64_t v18 = v96;
  int64_t v19 = (char *)v98[0] - (char *)v97[1];
  if (v98[0] == v97[1])
  {
    uint64_t v17 = v98[0];
LABEL_44:
    unint64_t v50 = 0;
    BOOL v52 = v98[0] == v17 || v96 == 0;
    unint64_t v54 = (char *)v98[0] - (char *)v17 - 8;
    uint64_t v55 = (v54 >> 3) + 1;
    if (!v52) {
      goto LABEL_52;
    }
LABEL_51:
    unint64_t v56 = 0;
    while (1)
    {
      if (v50 >= v56)
      {
        nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__p, &v96);
        *(void *)a3 = 0;
        *(unsigned char *)(a3 + 8) = 9;
        operator new();
      }
      float v53 = v14;
      *(float *)(v18 + 4 * v50++) = v53;
      if (v52) {
        goto LABEL_51;
      }
LABEL_52:
      if (v54 < 8) {
        break;
      }
      uint64_t v58 = v55 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v59 = v17 + 1;
      uint64_t v60 = 1;
      uint64_t v61 = 1;
      do
      {
        v60 *= *(v59 - 1);
        v61 *= *v59;
        v59 += 2;
        v58 -= 2;
      }
      while (v58);
      unint64_t v56 = v61 * v60;
      uint64_t v57 = &v17[v55 & 0x3FFFFFFFFFFFFFFELL];
      if (v55 != (v55 & 0x3FFFFFFFFFFFFFFELL))
      {
        do
        {
LABEL_57:
          uint64_t v62 = *v57++;
          v56 *= v62;
        }
        while (v57 != v16);
      }
    }
    unint64_t v56 = 1;
    uint64_t v57 = v17;
    goto LABEL_57;
  }
  if (!v96)
  {
    uint64_t v20 = 0;
    goto LABEL_34;
  }
  if ((unint64_t)(v19 - 8) >= 8)
  {
    unint64_t v29 = ((unint64_t)(v19 - 8) >> 3) + 1;
    uint64_t v21 = (uint64_t *)((char *)v97[1] + 8 * (v29 & 0x3FFFFFFFFFFFFFFELL));
    int64_t v30 = (char *)v97[1] + 8;
    uint64_t v31 = 1;
    uint64_t v32 = v29 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v33 = 1;
    do
    {
      v31 *= *(v30 - 1);
      v33 *= *v30;
      v30 += 2;
      v32 -= 2;
    }
    while (v32);
    uint64_t v20 = v33 * v31;
    if (v29 == (v29 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_34:
      unint64_t v35 = v19 >> 3;
      if ((unint64_t)(v19 >> 3) <= 1) {
        unint64_t v35 = 1;
      }
      if (v35 >= 2)
      {
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v40 = (char *)v97[1] + 8;
        uint64_t v41 = (char *)v99 + 8;
        unint64_t v42 = v35 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v38 += *(v41 - 1) * (*(v40 - 1) - 1);
          v39 += *v41 * (*v40 - 1);
          v40 += 2;
          v41 += 2;
          v42 -= 2;
        }
        while (v42);
        uint64_t v37 = v39 + v38;
        if (v35 == v36)
        {
LABEL_43:
          if (v20 == v37 + 1) {
            goto LABEL_44;
          }
LABEL_94:
          nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
        }
      }
      else
      {
        unint64_t v36 = 0;
        uint64_t v37 = 0;
      }
      unint64_t v43 = v35 - v36;
      uint64_t v44 = 8 * v36;
      uint64_t v45 = (uint64_t *)((char *)v99 + v44);
      unint64_t v46 = (uint64_t *)((char *)v97[1] + v44);
      do
      {
        uint64_t v47 = *v46++;
        uint64_t v48 = v47 - 1;
        uint64_t v49 = *v45++;
        v37 += v49 * v48;
        --v43;
      }
      while (v43);
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v20 = 1;
    uint64_t v21 = (uint64_t *)v97[1];
  }
  do
  {
    uint64_t v34 = *v21++;
    v20 *= v34;
  }
  while (v21 != v98[0]);
  goto LABEL_34;
}

void sub_19263618C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
}

void sub_1926362A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1926362FCLL);
}

void nitro::nitro_builtins::Range(nitro::nitro_builtins *this, const nitro::flexible_type *a2, const nitro::flexible_type *a3, const nitro::flexible_type *a4)
{
  int v6 = nitro::flexible_type_converter<int>::get((uint64_t)&v35, (unsigned __int8 *)this);
  int v7 = nitro::flexible_type_converter<int>::get((uint64_t)&v35, (unsigned __int8 *)a2);
  int v8 = nitro::flexible_type_converter<int>::get((uint64_t)&v35, (unsigned __int8 *)a3);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if (v6 >= v7) {
LABEL_32:
  }
    nitro::ndarray<int>::ndarray((uint64_t)v31);
  uint64_t v9 = 0;
  uint64_t v10 = v8;
  uint64_t v11 = v6;
  while (v9 < v34)
  {
    *(_DWORD *)uint64_t v9 = v11;
    uint64_t v12 = v9 + 4;
LABEL_4:
    uint64_t v33 = v12;
    v11 += v10;
    uint64_t v9 = v12;
    if (v11 >= v7) {
      goto LABEL_32;
    }
  }
  uint64_t v13 = (char *)v32;
  int64_t v14 = v9 - (unsigned char *)v32;
  uint64_t v15 = (v9 - (unsigned char *)v32) >> 2;
  unint64_t v16 = v15 + 1;
  if ((unint64_t)(v15 + 1) >> 62) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v17 = v34 - (unsigned char *)v32;
  if ((v34 - (unsigned char *)v32) >> 1 > v16) {
    unint64_t v16 = v17 >> 1;
  }
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v18 = v16;
  }
  if (v18)
  {
    if (v18 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int64_t v19 = operator new(4 * v18);
  }
  else
  {
    int64_t v19 = 0;
  }
  uint64_t v20 = &v19[4 * v15];
  *(_DWORD *)uint64_t v20 = v11;
  uint64_t v12 = v20 + 4;
  if (v9 != v13)
  {
    unint64_t v21 = v9 - v13 - 4;
    if (v21 >= 0xBC)
    {
      unint64_t v24 = (v9 - 4 - v13) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v19[v14 - 4 - v24] > &v19[v14 - 4])
      {
        std::string::size_type v22 = v9;
      }
      else if (&v9[-v24 - 4] > v9 - 4)
      {
        std::string::size_type v22 = v9;
      }
      else if ((unint64_t)(v9 - v19 - v14) >= 0x20)
      {
        uint64_t v25 = (v21 >> 2) + 1;
        uint64_t v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
        std::string::size_type v22 = &v9[-v26];
        v20 -= v26;
        int64_t v27 = &v19[4 * v15 - 16];
        uint64_t v28 = v9 - 16;
        uint64_t v29 = v25 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          _OWORD *v27 = v30;
          v27 -= 2;
          v28 -= 32;
          v29 -= 8;
        }
        while (v29);
        if (v25 == (v25 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_20;
        }
      }
      else
      {
        std::string::size_type v22 = v9;
      }
    }
    else
    {
      std::string::size_type v22 = v9;
    }
    do
    {
      int v23 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *((_DWORD *)v20 - 1) = v23;
      v20 -= 4;
    }
    while (v22 != v13);
  }
LABEL_20:
  uint64_t v32 = v20;
  uint64_t v33 = v12;
  uint64_t v34 = &v19[4 * v18];
  if (v13) {
    operator delete(v13);
  }
  goto LABEL_4;
}

void sub_192636764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  MEMORY[0x192FF16B0](v26, 0x10B0C4002311774);
  if (atomic_fetch_add(0, 0xFFFFFFFFFFFFFFFFLL) == 1) {
    nitro::nitro_builtins::Range(a9);
  }
  *(void *)a9 = 0;
  *(unsigned char *)(a9 + 8) = 0;
  nitro::ndarray<float>::~ndarray(&a16);
  if (__p)
  {
    operator delete(__p);
    uint64_t v28 = a13;
    if (!a13)
    {
LABEL_5:
      uint64_t v29 = a25;
      if (!a25) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a13;
    if (!a13) {
      goto LABEL_5;
    }
  }
  operator delete(v28);
  uint64_t v29 = a25;
  if (!a25) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_9:
  a26 = (uint64_t)v29;
  operator delete(v29);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Split(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, uint64_t a4@<X8>)
{
  v75[4] = *MEMORY[0x1E4F143B8];
  int v8 = nitro::flexible_type_converter<int>::get((uint64_t)&v66, (unsigned __int8 *)this);
  uint64_t v9 = (int *)v8;
  memset(&v74, 0, sizeof(v74));
  int v10 = *((unsigned __int8 *)a2 + 8);
  uint64_t v59 = (int *)v8;
  if (*((unsigned char *)a2 + 8))
  {
    if (v10 == 9)
    {
      if (*(_DWORD *)(*(void *)a2 + 8) == 3) {
        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v66, (const nitro::ndarray_container *)(*(void *)a2 + 8));
      }
      else {
        _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_((_DWORD *)(*(void *)a2 + 8), (uint64_t)&v66);
      }
      nitro::ndarray<int>::ndarray((uint64_t)&v61, (uint64_t)&v66);
      nitro::ndarray<int>::get_elements_copy((uint64_t *)&v61, (uint64_t *)&v73);
      if (v74.__begin_)
      {
        v74.__end_ = v74.__begin_;
        operator delete(v74.__begin_);
      }
      std::vector<int> v74 = v73;
      memset(&v73, 0, sizeof(v73));
      if (__p)
      {
        v65[0] = __p;
        operator delete(__p);
      }
      if (v62[1])
      {
        v63[0] = v62[1];
        operator delete(v62[1]);
      }
      unint64_t v21 = (std::__shared_weak_count *)v62[0];
      if (v62[0] && !atomic_fetch_add((atomic_ullong *volatile)v62[0] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      if (v71)
      {
        uint64_t v72 = v71;
        operator delete(v71);
      }
      if (v69)
      {
        unint64_t v70 = v69;
        operator delete(v69);
      }
      std::string::size_type v22 = v68;
      if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else if (v10 == 4)
    {
      uint64_t v11 = *(void *)a2;
      uint64_t v12 = *(void *)(*(void *)a2 + 8);
      uint64_t v13 = *(void *)(*(void *)a2 + 16);
      if (v13 != v12)
      {
        std::vector<Device>::__append(&v74, (v13 - v12) >> 4);
        uint64_t v12 = *(void *)(v11 + 8);
        uint64_t v13 = *(void *)(v11 + 16);
      }
      if (v13 != v12)
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        do
        {
          int v16 = nitro::flexible_type_converter<int>::get((uint64_t)&v66, (unsigned __int8 *)(v12 + v14));
          v74.__begin_[v15++] = v16;
          uint64_t v12 = *(void *)(v11 + 8);
          v14 += 16;
        }
        while (v15 < (*(void *)(v11 + 16) - v12) >> 4);
      }
    }
    goto LABEL_66;
  }
  uint64_t v17 = *(void *)a3;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v66 = 0;
  int64_t v19 = *(unsigned char **)(v17 + 32);
  unint64_t v18 = *(unsigned char **)(v17 + 40);
  int64_t v20 = v18 - v19;
  if (v18 == v19)
  {
    uint64_t v60 = 0;
  }
  else
  {
    if (v20 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v66 = (char *)operator new(v18 - v19);
    uint64_t v67 = v66;
    uint64_t v68 = (std::__shared_weak_count *)&v66[8 * (v20 >> 3)];
    uint64_t v60 = v66;
    memcpy(v66, v19, v20);
  }
  uint64_t v58 = a3;
  int v23 = nitro::flexible_type_converter<int>::get((uint64_t)&v61, (unsigned __int8 *)a2);
  uint64_t v9 = v59;
  if (!v23)
  {
LABEL_63:
    if (v60) {
      operator delete(v60);
    }
    a3 = v58;
LABEL_66:
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v66, (const nitro::ndarray_container *)(*(void *)a3 + 8));
    if (v74.__begin_ == v74.__end_)
    {
      uint64_t v47 = 0;
      goto LABEL_74;
    }
    unint64_t v46 = (char *)v74.__end_ - (char *)v74.__begin_ - 4;
    if (v46 >= 0x1C)
    {
      uint64_t v49 = (v46 >> 2) + 1;
      begin = &v74.__begin_[v49 & 0x7FFFFFFFFFFFFFF8];
      unint64_t v50 = (int32x4_t *)(v74.__begin_ + 4);
      int64x2_t v51 = 0uLL;
      uint64_t v52 = v49 & 0x7FFFFFFFFFFFFFF8;
      int64x2_t v53 = 0uLL;
      int64x2_t v54 = 0uLL;
      int64x2_t v55 = 0uLL;
      do
      {
        int32x4_t v56 = v50[-1];
        int64x2_t v53 = vaddw_high_s32(v53, v56);
        int64x2_t v51 = vaddw_s32(v51, *(int32x2_t *)v56.i8);
        int64x2_t v55 = vaddw_high_s32(v55, *v50);
        int64x2_t v54 = vaddw_s32(v54, *(int32x2_t *)v50->i8);
        v50 += 2;
        v52 -= 8;
      }
      while (v52);
      uint64_t v47 = (int *)vaddvq_s64(vaddq_s64(vaddq_s64(v54, v51), vaddq_s64(v55, v53)));
      if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_74:
        v73.__begin_ = v9;
        v75[0] = (v70 - (unsigned char *)v69) >> 3;
        if (v75[0] > (uint64_t)v9)
        {
          v73.__begin_ = v47;
          v75[0] = *((void *)v69 + (void)v9);
          if (v47 == (int *)v75[0])
          {
            *(void *)a4 = 0;
            *(unsigned char *)(a4 + 8) = 4;
            operator new();
          }
          uint64_t v61 = &v73;
          v62[0] = v75;
          nitro::nitro_builtins::Split(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_1::operator()();
        }
        uint64_t v61 = &v73;
        v62[0] = v75;
        nitro::nitro_builtins::Split(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()();
      }
    }
    else
    {
      uint64_t v47 = 0;
      begin = v74.__begin_;
    }
    do
    {
      uint64_t v57 = *begin++;
      uint64_t v47 = (int *)((char *)v47 + v57);
    }
    while (begin != v74.__end_);
    goto LABEL_74;
  }
  uint64_t v24 = 0;
  uint64_t v25 = v23;
  std::vector<int>::pointer end = v74.__end_;
  unint64_t v27 = *((void *)v60 + (void)v59) / (unint64_t)v23;
  while (end < v74.__end_cap_.__value_)
  {
    *std::vector<int>::pointer end = v27;
    uint64_t v28 = end + 1;
LABEL_36:
    v74.__end_ = v28;
    ++v24;
    std::vector<int>::pointer end = v28;
    if (v24 == v25) {
      goto LABEL_63;
    }
  }
  std::vector<int>::pointer v29 = v74.__begin_;
  uint64_t v30 = end - v74.__begin_;
  unint64_t v31 = v30 + 1;
  if ((unint64_t)(v30 + 1) >> 62) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  int64_t v32 = (char *)v74.__end_cap_.__value_ - (char *)v74.__begin_;
  if (((char *)v74.__end_cap_.__value_ - (char *)v74.__begin_) >> 1 > v31) {
    unint64_t v31 = v32 >> 1;
  }
  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v33 = v31;
  }
  if (v33)
  {
    if (v33 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v34 = operator new(4 * v33);
  }
  else
  {
    uint64_t v34 = 0;
  }
  int v35 = (int *)&v34[4 * v30];
  int *v35 = v27;
  uint64_t v28 = v35 + 1;
  if (end == v29)
  {
    uint64_t v9 = v59;
    goto LABEL_54;
  }
  unint64_t v36 = (char *)end - (char *)v29 - 4;
  if (v36 < 0xBC
    || (unint64_t v39 = ((char *)(end - 1) - (char *)v29) & 0xFFFFFFFFFFFFFFFCLL,
        &v34[(char *)end - (char *)v29 - 4 - v39] > &v34[(char *)end - (char *)v29 - 4])
    || (std::vector<int>::pointer)((char *)end - v39 - 4) > end - 1
    || (unint64_t)((char *)v29 - v34) < 0x20)
  {
    uint64_t v37 = end;
    uint64_t v9 = v59;
  }
  else
  {
    uint64_t v40 = (v36 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v37 = &end[v41 / 0xFFFFFFFFFFFFFFFCLL];
    int v35 = (int *)((char *)v35 - v41);
    unint64_t v42 = &v34[4 * v30 - 16];
    unint64_t v43 = (long long *)(end - 4);
    uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    uint64_t v9 = v59;
    do
    {
      long long v45 = *v43;
      *(v42 - 1) = *(v43 - 1);
      _OWORD *v42 = v45;
      v42 -= 2;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    if (v40 == (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_54:
      v74.__begin_ = v35;
      v74.__end_ = v28;
      v74.__end_cap_.__value_ = (int *)&v34[4 * v33];
      if (v29) {
        operator delete(v29);
      }
      goto LABEL_36;
    }
  }
  do
  {
    int v38 = *--v37;
    *--int v35 = v38;
  }
  while (v37 != v29);
  goto LABEL_54;
}

void sub_1926373AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  unint64_t v36 = a10;
  switch(*((unsigned char *)a10 + 8))
  {
    case 2:
      uint64_t v37 = a10;
      if (atomic_fetch_add(*a10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_26;
      }
      atomic_ullong *volatile v38 = *a10;
      if (!*a10) {
        goto LABEL_25;
      }
      if (*((char *)v38 + 31) < 0) {
        operator delete((void *)v38[1]);
      }
      uint64_t v39 = (uint64_t)v38;
      uint64_t v40 = 0x1012C404EF22A49;
      goto LABEL_24;
    case 3:
      uint64_t v37 = a10;
      if (atomic_fetch_add(*a10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_26;
      }
      atomic_ullong *volatile v41 = *a10;
      if (!*a10) {
        goto LABEL_25;
      }
      unint64_t v42 = (void *)v41[1];
      if (v42)
      {
        v41[2] = (atomic_ullong)v42;
        operator delete(v42);
      }
      uint64_t v39 = (uint64_t)v41;
      uint64_t v40 = 0x1080C409938AC02;
      goto LABEL_24;
    case 4:
      uint64_t v37 = a10;
      if (atomic_fetch_add(*a10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_26;
      }
      if (!*a10) {
        goto LABEL_25;
      }
      uint64_t v39 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair((uint64_t)*a10);
      goto LABEL_20;
    case 5:
      uint64_t v37 = a10;
      if (atomic_fetch_add(*a10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_26;
      }
      if (!*a10) {
        goto LABEL_25;
      }
      uint64_t v39 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair((uint64_t)*a10);
LABEL_20:
      uint64_t v40 = 0x1020C405E66F15BLL;
      goto LABEL_24;
    case 9:
      uint64_t v37 = a10;
      if (atomic_fetch_add(*a10, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        if (*a10)
        {
          uint64_t v39 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(*a10);
          uint64_t v40 = 0x10B0C4002311774;
LABEL_24:
          MEMORY[0x192FF16B0](v39, v40);
        }
LABEL_25:
        unint64_t v36 = (void **)v37;
        void *v37 = 0;
      }
      else
      {
LABEL_26:
        unint64_t v36 = (void **)v37;
      }
LABEL_27:
      *unint64_t v36 = 0;
      *((unsigned char *)v36 + 8) = 0;
      nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a23);
      unint64_t v43 = *(void **)(v34 - 160);
      if (!v43) {
        _Unwind_Resume(a1);
      }
      *(void *)(v34 - 152) = v43;
      operator delete(v43);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_27;
  }
}

void nitro::nitro_builtins::Transpose(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v26, (const nitro::ndarray_container *)(*(void *)this + 8));
  nitro::flexible_type_converter<std::vector<int>>::get((unsigned __int8 *)a2, &v25);
  std::vector<int>::pointer begin = v25.__begin_;
  std::vector<int>::pointer end = v25.__end_;
  long long __p = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  int64_t v8 = (char *)v25.__end_ - (char *)v25.__begin_;
  if (v25.__end_ != v25.__begin_)
  {
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = operator new(2 * v8);
    long long __p = v9;
    uint64_t v24 = (char *)v9 + 8 * (v8 >> 2);
    std::vector<int>::pointer v10 = begin;
    uint64_t v11 = v9;
    if ((unint64_t)(v8 - 4) < 0x1C) {
      goto LABEL_15;
    }
    unint64_t v12 = ((unint64_t)(v8 - 4) >> 2) + 1;
    std::vector<int>::pointer v10 = &begin[v12 & 0x7FFFFFFFFFFFFFF8];
    uint64_t v11 = (void *)v9 + (v12 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v13 = v9 + 2;
    std::vector<int>::pointer v14 = begin + 4;
    uint64_t v15 = v12 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v16 = *((_OWORD *)v14 - 1);
      *(void *)&long long v17 = (int)v16;
      *((void *)&v17 + 1) = SDWORD1(v16);
      long long v18 = v17;
      *(void *)&long long v17 = SDWORD2(v16);
      *((void *)&v17 + 1) = SHIDWORD(v16);
      long long v19 = v17;
      *(void *)&long long v17 = (int)*(_OWORD *)v14;
      *((void *)&v17 + 1) = (int)HIDWORD(*(void *)v14);
      long long v20 = v17;
      *(void *)&long long v17 = (int)*((void *)v14 + 1);
      *((void *)&v17 + 1) = (int)HIDWORD(*(_OWORD *)v14);
      *(v13 - 2) = v18;
      *(v13 - 1) = v19;
      *uint64_t v13 = v20;
      v13[1] = v17;
      v13 += 4;
      v14 += 8;
      v15 -= 8;
    }
    while (v15);
    if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_15:
      do
      {
        uint64_t v21 = *v10++;
        *v11++ = v21;
      }
      while (v10 != end);
    }
    int v23 = v11;
  }
  nitro::ndarray_container::transpose((uint64_t)v26, (uint64_t)&__p, (uint64_t)&v25);
  if (__p)
  {
    int v23 = __p;
    operator delete(__p);
  }
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 9;
  operator new();
}

void sub_192637BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  MEMORY[0x192FF16B0](v25, 0x10B0C4002311774);
  if (atomic_fetch_add(0, 0xFFFFFFFFFFFFFFFFLL) == 1) {
    nitro::nitro_builtins::Range(v24);
  }
  *(void *)uint64_t v24 = 0;
  *(unsigned char *)(v24 + 8) = 0;
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a13);
  if (v23) {
    operator delete(v23);
  }
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a23);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::BiasAdd(nitro::nitro_builtins *this, const nitro::flexible_type *a2, const nitro::flexible_type *a3)
{
  long long v3 = nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v4, (const nitro::ndarray_container *)(*(void *)this + 8));
  nitro::ndarray_container::copy(v3);
}

void sub_1926382AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a21);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a40);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v40 - 216));
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v40 - 136));
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Sum(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, uint64_t a4@<X8>)
{
  nitro::flexible_type_converter<std::vector<int>>::get((unsigned __int8 *)this, &v343);
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v340, (const nitro::ndarray_container *)(*(void *)a3 + 8));
  v337 = 0;
  v338 = 0;
  v339 = 0;
  int64_t v8 = v341;
  int64_t v9 = v342 - (unsigned char *)v341;
  if (v342 == v341)
  {
    uint64_t v11 = 0;
    std::vector<int>::pointer v10 = 0;
  }
  else
  {
    if (v9 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    std::vector<int>::pointer v10 = (char *)operator new(v342 - (unsigned char *)v341);
    uint64_t v11 = &v10[8 * (v9 >> 3)];
    v337 = v10;
    v339 = v11;
    memcpy(v10, v8, v9);
    v338 = v11;
  }
  std::vector<int>::pointer begin = v343.__begin_;
  std::vector<int>::pointer end = v343.__end_;
  if (v343.__begin_ != v343.__end_)
  {
    unint64_t v14 = (char *)v343.__end_ - (char *)v343.__begin_ - 4;
    std::vector<int>::pointer v15 = v343.__begin_;
    if (v14 < 4) {
      goto LABEL_290;
    }
    uint64_t v16 = (v14 >> 2) + 1;
    std::vector<int>::pointer v15 = &v343.__begin_[v16 & 0x7FFFFFFFFFFFFFFELL];
    std::vector<int>::pointer v17 = v343.__begin_ + 1;
    uint64_t v18 = v16 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v19 = *v17;
      *(void *)&v10[8 * *(v17 - 1)] = 1;
      *(void *)&v10[8 * v19] = 1;
      v17 += 2;
      v18 -= 2;
    }
    while (v18);
    if (v16 != (v16 & 0x7FFFFFFFFFFFFFFELL))
    {
LABEL_290:
      do
      {
        uint64_t v20 = *v15++;
        *(void *)&v10[8 * v20] = 1;
      }
      while (v15 != end);
    }
  }
  v331 = 0;
  v332 = 0;
  v330 = 0;
  int64_t v21 = v11 - v10;
  if (v11 != v10)
  {
    if (v21 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v22 = (char *)operator new(v11 - v10);
    int v23 = &v22[8 * (v21 >> 3)];
    v330 = v22;
    v332 = v23;
    memcpy(v22, v10, v21);
    v331 = v23;
  }
  v333 = 0;
  v334 = 0;
  v335 = 0;
  int64_t v24 = (char *)end - (char *)begin;
  if (end != begin)
  {
    if (v24 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v333 = operator new((char *)end - (char *)begin);
    v335 = (char *)v333 + 4 * (v24 >> 2);
    memcpy(v333, begin, v24);
    v334 = (int *)v335;
  }
  uint64_t v328 = a4;
  v329 = a2;
  switch(v340[0])
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&__dst, (uint64_t)v340);
      memset(&v367, 0, sizeof(v367));
      int64_t v25 = v363 - __dst.__r_.__value_.__r.__words[2];
      if (v363 == __dst.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v28 = 0;
        uint64_t v26 = 0;
        int64_t v325 = 0;
      }
      else
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = operator new(v363 - __dst.__r_.__value_.__r.__words[2]);
        uint64_t v27 = v25 >> 3;
        std::string::size_type v28 = (std::string::size_type)&v26[v25 >> 3];
        v367.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        v367.__r_.__value_.__r.__words[2] = v28;
        size_t v29 = v25 & 0xFFFFFFFFFFFFFFF8;
        bzero(v26, v25 & 0xFFFFFFFFFFFFFFF8);
        v367.__r_.__value_.__l.__size_ = v28;
        int64_t v25 = (int64_t)operator new(v25);
        int64_t v325 = v25 + 8 * v27;
        bzero((void *)v25, v29);
      }
      nitro::ndarray<int>::init_from_shape((uint64_t **)&v330, &v350);
      if ((unint64_t)((v325 - v25) >> 3) <= 1) {
        unint64_t v93 = 1;
      }
      else {
        unint64_t v93 = (v325 - v25) >> 3;
      }
      std::string::size_type v94 = v28 - (void)v26;
      uint64_t v95 = (int *)v333;
      uint64_t v96 = v334;
      if ((unint64_t)((uint64_t)(v28 - (void)v26) >> 3) <= 1) {
        unint64_t v97 = 1;
      }
      else {
        unint64_t v97 = (uint64_t)(v28 - (void)v26) >> 3;
      }
      uint64_t v98 = v350;
      uint64_t v99 = v357;
      std::string::size_type v100 = v94 >> 3;
      size_t __lena = v28 - (void)v26;
      uint64_t v323 = v366;
      unint64_t v311 = (char *)v334 - (unsigned char *)v333 - 4;
      uint64_t v294 = (v311 >> 2) + 1;
      v297 = v364;
      v291 = (int *)((char *)v333 + 4 * (v294 & 0x7FFFFFFFFFFFFFFELL));
      std::string::size_type v320 = __dst.__r_.__value_.__r.__words[0];
      std::string::size_type v101 = __dst.__r_.__value_.__r.__words[2];
      unint64_t v303 = v93;
      unint64_t v306 = v93 & 0xFFFFFFFFFFFFFFFELL;
      v288 = (char *)v333 + 4;
      v285 = v364 + 8;
      v300 = (char *)__p;
      v282 = (char *)__p + 8;
      uint64_t v102 = (v94 >> 3) + 1;
      std::string::size_type v314 = v28;
      while (1)
      {
        if ((void *)v28 != v26)
        {
          uint64_t v103 = v102;
          memmove((void *)v25, v26, __lena);
          uint64_t v102 = v103;
          unint64_t v93 = v303;
          std::string::size_type v28 = v314;
        }
        if (v95 != v96)
        {
          unint64_t v104 = v95;
          if (v311 < 4) {
            goto LABEL_291;
          }
          uint64_t v105 = v294 & 0x7FFFFFFFFFFFFFFELL;
          uint64_t v106 = (int *)v288;
          do
          {
            uint64_t v107 = *v106;
            *(void *)(v25 + 8 * *(v106 - 1)) = 0;
            *(void *)(v25 + 8 * v107) = 0;
            v106 += 2;
            v105 -= 2;
          }
          while (v105);
          unint64_t v104 = v291;
          if (v294 != (v294 & 0x7FFFFFFFFFFFFFFELL))
          {
LABEL_291:
            do
            {
              uint64_t v108 = *v104++;
              *(void *)(v25 + 8 * v108) = 0;
            }
            while (v104 != v96);
          }
        }
        if ((void *)v28 == v26)
        {
          uint64_t v109 = 0;
          goto LABEL_96;
        }
        if (v97 < 2) {
          break;
        }
        uint64_t v111 = 0;
        uint64_t v112 = 0;
        unint64_t v113 = v97 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v114 = v285;
        uint64_t v115 = v26 + 1;
        do
        {
          v111 += *(v114 - 1) * *(v115 - 1);
          v112 += *v114 * *v115;
          v115 += 2;
          v114 += 2;
          v113 -= 2;
        }
        while (v113);
        uint64_t v109 = v112 + v111;
        unint64_t v110 = v97 & 0xFFFFFFFFFFFFFFFELL;
        if (v97 != (v97 & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_94;
        }
LABEL_96:
        int v123 = *(_DWORD *)(v320 + 4 * (v109 + v323));
        if (v325 == v25)
        {
          uint64_t v124 = 0;
          goto LABEL_105;
        }
        if (v93 < 2)
        {
          uint64_t v124 = 0;
          unint64_t v125 = 0;
LABEL_103:
          unint64_t v131 = v93 - v125;
          uint64_t v132 = 8 * v125;
          uint64_t v133 = &v300[8 * v125];
          int64x2_t v134 = (uint64_t *)(v25 + v132);
          do
          {
            uint64_t v136 = *v134++;
            uint64_t v135 = v136;
            uint64_t v137 = *(void *)v133;
            v133 += 8;
            v124 += v137 * v135;
            --v131;
          }
          while (v131);
          goto LABEL_105;
        }
        uint64_t v126 = 0;
        uint64_t v127 = 0;
        unint64_t v128 = v306;
        unint64_t v129 = v282;
        unint64_t v130 = (void *)(v25 + 8);
        do
        {
          v126 += *(v129 - 1) * *(v130 - 1);
          v127 += *v129 * *v130;
          v130 += 2;
          v129 += 2;
          v128 -= 2;
        }
        while (v128);
        uint64_t v124 = v127 + v126;
        unint64_t v125 = v306;
        if (v93 != v306) {
          goto LABEL_103;
        }
LABEL_105:
        *(_DWORD *)(v98 + 4 * (v124 + v99)) += v123;
        if ((int)v100 >= 1)
        {
          uint64_t v138 = v102;
          int v139 = v100;
          while (1)
          {
            uint64_t v140 = (v138 - 2);
            unint64_t v141 = v26[v140] + 1;
            v26[v140] = v141;
            if (v141 < *(void *)(v101 + v140 * 8)) {
              break;
            }
            v26[(v138 - 2)] = 0;
            --v139;
            if ((unint64_t)--v138 <= 1) {
              goto LABEL_111;
            }
          }
          if (v139 >= 1) {
            continue;
          }
        }
LABEL_111:
        nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v336, &v350);
        unint64_t v92 = v329;
        goto LABEL_153;
      }
      uint64_t v109 = 0;
      unint64_t v110 = 0;
LABEL_94:
      unint64_t v116 = v97 - v110;
      uint64_t v117 = v110;
      long long v118 = &v297[8 * v110];
      uint64_t v119 = &v26[v117];
      do
      {
        uint64_t v121 = *v119++;
        uint64_t v120 = v121;
        uint64_t v122 = *(void *)v118;
        v118 += 8;
        v109 += v122 * v120;
        --v116;
      }
      while (v116);
      goto LABEL_96;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&__dst, (uint64_t)v340);
      memset(&v367, 0, sizeof(v367));
      int64_t v25 = v363 - __dst.__r_.__value_.__r.__words[2];
      if (v363 == __dst.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v40 = 0;
        atomic_ullong *volatile v38 = 0;
        int64_t v42 = 0;
      }
      else
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        atomic_ullong *volatile v38 = operator new(v363 - __dst.__r_.__value_.__r.__words[2]);
        uint64_t v39 = v25 >> 3;
        std::string::size_type v40 = (std::string::size_type)&v38[v25 >> 3];
        v367.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
        v367.__r_.__value_.__r.__words[2] = v40;
        size_t v41 = v25 & 0xFFFFFFFFFFFFFFF8;
        bzero(v38, v25 & 0xFFFFFFFFFFFFFFF8);
        v367.__r_.__value_.__l.__size_ = v40;
        int64_t v25 = (int64_t)operator new(v25);
        int64_t v42 = v25 + 8 * v39;
        bzero((void *)v25, v41);
      }
      nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)&v330, &v350);
      if ((unint64_t)((v42 - v25) >> 3) <= 1) {
        unint64_t v193 = 1;
      }
      else {
        unint64_t v193 = (v42 - v25) >> 3;
      }
      std::string::size_type v194 = v40 - (void)v38;
      if ((unint64_t)((uint64_t)(v40 - (void)v38) >> 3) <= 1) {
        unint64_t v195 = 1;
      }
      else {
        unint64_t v195 = (uint64_t)(v40 - (void)v38) >> 3;
      }
      while (1)
      {
        if ((void *)v40 != v38) {
          memmove((void *)v25, v38, v40 - (void)v38);
        }
        uint64_t v196 = v334;
        if (v333 != v334)
        {
          unint64_t v197 = (char *)v334 - (unsigned char *)v333 - 4;
          v198 = (int *)v333;
          if (v197 < 4) {
            goto LABEL_292;
          }
          uint64_t v199 = (v197 >> 2) + 1;
          v198 = (int *)((char *)v333 + 4 * (v199 & 0x7FFFFFFFFFFFFFFELL));
          v200 = (int *)((char *)v333 + 4);
          uint64_t v201 = v199 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            uint64_t v202 = *v200;
            *(void *)(v25 + 8 * *(v200 - 1)) = 0;
            *(void *)(v25 + 8 * v202) = 0;
            v200 += 2;
            v201 -= 2;
          }
          while (v201);
          if (v199 != (v199 & 0x7FFFFFFFFFFFFFFELL))
          {
LABEL_292:
            do
            {
              uint64_t v203 = *v198++;
              *(void *)(v25 + 8 * v203) = 0;
            }
            while (v198 != v196);
          }
        }
        if ((void *)v40 == v38)
        {
          uint64_t v204 = 0;
          goto LABEL_184;
        }
        if (v195 < 2) {
          break;
        }
        uint64_t v206 = 0;
        uint64_t v207 = 0;
        v208 = v364 + 8;
        v210 = v38 + 1;
        unint64_t v209 = v195 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v206 += *(v208 - 1) * *(v210 - 1);
          v207 += *v208 * *v210;
          v210 += 2;
          v208 += 2;
          v209 -= 2;
        }
        while (v209);
        uint64_t v204 = v207 + v206;
        unint64_t v205 = v195 & 0xFFFFFFFFFFFFFFFELL;
        if (v195 != (v195 & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_182;
        }
LABEL_184:
        char v218 = *(unsigned char *)(__dst.__r_.__value_.__r.__words[0] + v366 + v204);
        if (v42 == v25)
        {
          uint64_t v219 = 0;
          goto LABEL_193;
        }
        if (v193 < 2)
        {
          uint64_t v219 = 0;
          unint64_t v220 = 0;
LABEL_191:
          unint64_t v226 = v193 - v220;
          uint64_t v227 = 8 * v220;
          v228 = (uint64_t *)((char *)__p + v227);
          v229 = (uint64_t *)(v25 + v227);
          do
          {
            uint64_t v231 = *v229++;
            uint64_t v230 = v231;
            uint64_t v232 = *v228++;
            v219 += v232 * v230;
            --v226;
          }
          while (v226);
          goto LABEL_193;
        }
        uint64_t v221 = 0;
        uint64_t v222 = 0;
        v223 = (char *)__p + 8;
        unint64_t v224 = v193 & 0xFFFFFFFFFFFFFFFELL;
        v225 = (void *)(v25 + 8);
        do
        {
          v221 += *(v223 - 1) * *(v225 - 1);
          v222 += *v223 * *v225;
          v225 += 2;
          v223 += 2;
          v224 -= 2;
        }
        while (v224);
        uint64_t v219 = v222 + v221;
        unint64_t v220 = v193 & 0xFFFFFFFFFFFFFFFELL;
        if (v193 != (v193 & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_191;
        }
LABEL_193:
        *(unsigned char *)(v350 + v357 + v219) += v218;
        if ((int)(v194 >> 3) >= 1)
        {
          std::string::size_type v233 = __dst.__r_.__value_.__r.__words[2];
          uint64_t v234 = (v194 >> 3) + 1;
          std::string::size_type v235 = v194 >> 3;
          while (1)
          {
            uint64_t v236 = (v234 - 2);
            unint64_t v237 = v38[v236] + 1;
            v38[v236] = v237;
            if (v237 < *(void *)(v233 + v236 * 8)) {
              break;
            }
            v38[(v234 - 2)] = 0;
            LODWORD(v235) = v235 - 1;
            if ((unint64_t)--v234 <= 1) {
              goto LABEL_199;
            }
          }
          if ((int)v235 >= 1) {
            continue;
          }
        }
LABEL_199:
        nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&v336, &v350);
        unint64_t v92 = a2;
        uint64_t v191 = v328;
        if (__p)
        {
          v356[0] = __p;
          operator delete(__p);
        }
        if (v352)
        {
          v353 = v352;
          operator delete(v352);
        }
        v238 = v351;
        if (!v351 || atomic_fetch_add(&v351->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_205;
        }
        ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
        std::__shared_weak_count::__release_weak(v238);
        if (!v25) {
          goto LABEL_207;
        }
LABEL_206:
        operator delete((void *)v25);
        goto LABEL_207;
      }
      uint64_t v204 = 0;
      unint64_t v205 = 0;
LABEL_182:
      unint64_t v211 = v195 - v205;
      uint64_t v212 = v205;
      v213 = &v364[v212 * 8];
      v214 = &v38[v212];
      do
      {
        uint64_t v216 = *v214++;
        uint64_t v215 = v216;
        uint64_t v217 = *(void *)v213;
        v213 += 8;
        v204 += v217 * v215;
        --v211;
      }
      while (v211);
      goto LABEL_184;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&__dst, (uint64_t)v340);
      memset(&v367, 0, sizeof(v367));
      int64_t v25 = v363 - __dst.__r_.__value_.__r.__words[2];
      if (v363 == __dst.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v32 = 0;
        uint64_t v30 = 0;
        int64_t v326 = 0;
      }
      else
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v30 = operator new(v363 - __dst.__r_.__value_.__r.__words[2]);
        uint64_t v31 = v25 >> 3;
        std::string::size_type v32 = (std::string::size_type)&v30[v25 >> 3];
        v367.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
        v367.__r_.__value_.__r.__words[2] = v32;
        size_t v33 = v25 & 0xFFFFFFFFFFFFFFF8;
        bzero(v30, v25 & 0xFFFFFFFFFFFFFFF8);
        v367.__r_.__value_.__l.__size_ = v32;
        int64_t v25 = (int64_t)operator new(v25);
        int64_t v326 = v25 + 8 * v31;
        bzero((void *)v25, v33);
      }
      nitro::ndarray<float>::init_from_shape((uint64_t **)&v330, &v350);
      if ((unint64_t)((v326 - v25) >> 3) <= 1) {
        unint64_t v43 = 1;
      }
      else {
        unint64_t v43 = (v326 - v25) >> 3;
      }
      std::string::size_type v44 = v32 - (void)v30;
      long long v45 = (int *)v333;
      unint64_t v46 = v334;
      if ((unint64_t)((uint64_t)(v32 - (void)v30) >> 3) <= 1) {
        unint64_t v47 = 1;
      }
      else {
        unint64_t v47 = (uint64_t)(v32 - (void)v30) >> 3;
      }
      uint64_t v48 = v350;
      uint64_t v49 = v357;
      std::string::size_type v50 = v44 >> 3;
      size_t __len = v32 - (void)v30;
      uint64_t v322 = v366;
      unint64_t v310 = (char *)v334 - (unsigned char *)v333 - 4;
      uint64_t v293 = (v310 >> 2) + 1;
      v296 = v364;
      v290 = (int *)((char *)v333 + 4 * (v293 & 0x7FFFFFFFFFFFFFFELL));
      std::string::size_type v319 = __dst.__r_.__value_.__r.__words[0];
      std::string::size_type v51 = __dst.__r_.__value_.__r.__words[2];
      unint64_t v308 = v47 & 0xFFFFFFFFFFFFFFFELL;
      std::string::size_type v302 = v32;
      unint64_t v305 = v43 & 0xFFFFFFFFFFFFFFFELL;
      v287 = (char *)v333 + 4;
      v284 = v364 + 8;
      v299 = (char *)__p;
      v281 = (char *)__p + 8;
      uint64_t v52 = (v44 >> 3) + 1;
      unint64_t v313 = v47;
      while (1)
      {
        if ((void *)v32 != v30)
        {
          unint64_t v53 = v43;
          memmove((void *)v25, v30, __len);
          unint64_t v47 = v313;
          unint64_t v43 = v53;
          std::string::size_type v32 = v302;
        }
        if (v45 != v46)
        {
          int64x2_t v54 = v45;
          if (v310 < 4) {
            goto LABEL_293;
          }
          uint64_t v55 = v293 & 0x7FFFFFFFFFFFFFFELL;
          int32x4_t v56 = (int *)v287;
          do
          {
            uint64_t v57 = *v56;
            *(void *)(v25 + 8 * *(v56 - 1)) = 0;
            *(void *)(v25 + 8 * v57) = 0;
            v56 += 2;
            v55 -= 2;
          }
          while (v55);
          int64x2_t v54 = v290;
          if (v293 != (v293 & 0x7FFFFFFFFFFFFFFELL))
          {
LABEL_293:
            do
            {
              uint64_t v58 = *v54++;
              *(void *)(v25 + 8 * v58) = 0;
            }
            while (v54 != v46);
          }
        }
        if ((void *)v32 == v30)
        {
          uint64_t v59 = 0;
          goto LABEL_55;
        }
        if (v47 < 2) {
          break;
        }
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        unint64_t v63 = v308;
        int64_t v64 = v284;
        uint64_t v65 = v30 + 1;
        do
        {
          v61 += *(v64 - 1) * *(v65 - 1);
          v62 += *v64 * *v65;
          v65 += 2;
          v64 += 2;
          v63 -= 2;
        }
        while (v63);
        uint64_t v59 = v62 + v61;
        unint64_t v60 = v308;
        if (v47 != v308) {
          goto LABEL_53;
        }
LABEL_55:
        float v73 = *(float *)(v319 + 4 * (v59 + v322));
        if (v326 == v25)
        {
          uint64_t v74 = 0;
          goto LABEL_64;
        }
        if (v43 < 2)
        {
          uint64_t v74 = 0;
          unint64_t v75 = 0;
LABEL_62:
          unint64_t v81 = v43 - v75;
          uint64_t v82 = 8 * v75;
          uint64_t v83 = &v299[8 * v75];
          unint64_t v84 = (uint64_t *)(v25 + v82);
          do
          {
            uint64_t v86 = *v84++;
            uint64_t v85 = v86;
            uint64_t v87 = *(void *)v83;
            v83 += 8;
            v74 += v87 * v85;
            --v81;
          }
          while (v81);
          goto LABEL_64;
        }
        uint64_t v76 = 0;
        uint64_t v77 = 0;
        unint64_t v78 = v305;
        uint64_t v79 = v281;
        std::string::size_type v80 = (void *)(v25 + 8);
        do
        {
          v76 += *(v79 - 1) * *(v80 - 1);
          v77 += *v79 * *v80;
          v80 += 2;
          v79 += 2;
          v78 -= 2;
        }
        while (v78);
        uint64_t v74 = v77 + v76;
        unint64_t v75 = v305;
        if (v43 != v305) {
          goto LABEL_62;
        }
LABEL_64:
        *(float *)(v48 + 4 * (v74 + v49)) = v73 + *(float *)(v48 + 4 * (v74 + v49));
        if ((int)v50 >= 1)
        {
          uint64_t v88 = v52;
          int v89 = v50;
          while (1)
          {
            uint64_t v90 = (v88 - 2);
            unint64_t v91 = v30[v90] + 1;
            v30[v90] = v91;
            if (v91 < *(void *)(v51 + v90 * 8)) {
              break;
            }
            v30[(v88 - 2)] = 0;
            --v89;
            if ((unint64_t)--v88 <= 1) {
              goto LABEL_70;
            }
          }
          if (v89 >= 1) {
            continue;
          }
        }
LABEL_70:
        nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&v336, &v350);
        unint64_t v92 = v329;
        goto LABEL_153;
      }
      uint64_t v59 = 0;
      unint64_t v60 = 0;
LABEL_53:
      unint64_t v66 = v47 - v60;
      uint64_t v67 = v60;
      uint64_t v68 = &v296[8 * v60];
      unint64_t v69 = &v30[v67];
      do
      {
        uint64_t v71 = *v69++;
        uint64_t v70 = v71;
        uint64_t v72 = *(void *)v68;
        v68 += 8;
        v59 += v72 * v70;
        --v66;
      }
      while (v66);
      goto LABEL_55;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&__dst, (uint64_t)v340);
      memset(&v367, 0, sizeof(v367));
      int64_t v25 = v363 - __dst.__r_.__value_.__r.__words[2];
      if (v363 == __dst.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v36 = 0;
        uint64_t v34 = 0;
        int64_t v327 = 0;
      }
      else
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v34 = operator new(v363 - __dst.__r_.__value_.__r.__words[2]);
        uint64_t v35 = v25 >> 3;
        std::string::size_type v36 = (std::string::size_type)&v34[v25 >> 3];
        v367.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
        v367.__r_.__value_.__r.__words[2] = v36;
        size_t v37 = v25 & 0xFFFFFFFFFFFFFFF8;
        bzero(v34, v25 & 0xFFFFFFFFFFFFFFF8);
        v367.__r_.__value_.__l.__size_ = v36;
        int64_t v25 = (int64_t)operator new(v25);
        int64_t v327 = v25 + 8 * v35;
        bzero((void *)v25, v37);
      }
      nitro::ndarray<half>::init_from_shape((uint64_t **)&v330, &v350);
      if ((unint64_t)((v327 - v25) >> 3) <= 1) {
        unint64_t v142 = 1;
      }
      else {
        unint64_t v142 = (v327 - v25) >> 3;
      }
      std::string::size_type v143 = v36 - (void)v34;
      int v144 = (int *)v333;
      long long v145 = v334;
      if ((unint64_t)((uint64_t)(v36 - (void)v34) >> 3) <= 1) {
        unint64_t v146 = 1;
      }
      else {
        unint64_t v146 = (uint64_t)(v36 - (void)v34) >> 3;
      }
      uint64_t v147 = v350;
      uint64_t v148 = v357;
      std::string::size_type v149 = v143 >> 3;
      size_t __lenb = v36 - (void)v34;
      uint64_t v324 = v366;
      unint64_t v312 = (char *)v334 - (unsigned char *)v333 - 4;
      uint64_t v295 = (v312 >> 2) + 1;
      v298 = v364;
      v292 = (int *)((char *)v333 + 4 * (v295 & 0x7FFFFFFFFFFFFFFELL));
      std::string::size_type v321 = __dst.__r_.__value_.__r.__words[0];
      std::string::size_type v150 = __dst.__r_.__value_.__r.__words[2];
      unint64_t v309 = v146 & 0xFFFFFFFFFFFFFFFELL;
      std::string::size_type v304 = v36;
      unint64_t v307 = v142 & 0xFFFFFFFFFFFFFFFELL;
      v289 = (char *)v333 + 4;
      v286 = v364 + 8;
      v301 = (char *)__p;
      v283 = (char *)__p + 8;
      uint64_t v151 = (v143 >> 3) + 1;
      unint64_t v315 = v146;
      break;
    default:
      printf("%d\n", v340[0]);
      nitro::ndarray_container::visit<nitro::nitro_builtins::Sum(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Sum(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
  do
  {
    if ((void *)v36 != v34)
    {
      unint64_t v152 = v142;
      memmove((void *)v25, v34, __lenb);
      unint64_t v146 = v315;
      unint64_t v142 = v152;
      std::string::size_type v36 = v304;
    }
    if (v144 != v145)
    {
      char v153 = v144;
      if (v312 < 4) {
        goto LABEL_294;
      }
      uint64_t v154 = v295 & 0x7FFFFFFFFFFFFFFELL;
      char v155 = (int *)v289;
      do
      {
        uint64_t v156 = *v155;
        *(void *)(v25 + 8 * *(v155 - 1)) = 0;
        *(void *)(v25 + 8 * v156) = 0;
        v155 += 2;
        v154 -= 2;
      }
      while (v154);
      char v153 = v292;
      if (v295 != (v295 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_294:
        do
        {
          uint64_t v157 = *v153++;
          *(void *)(v25 + 8 * v157) = 0;
        }
        while (v153 != v145);
      }
    }
    if ((void *)v36 == v34)
    {
      uint64_t v158 = 0;
      goto LABEL_137;
    }
    if (v146 < 2)
    {
      uint64_t v158 = 0;
      unint64_t v159 = 0;
LABEL_135:
      unint64_t v165 = v146 - v159;
      uint64_t v166 = v159;
      uint64_t v167 = &v298[8 * v159];
      uint64_t v168 = &v34[v166];
      do
      {
        uint64_t v170 = *v168++;
        uint64_t v169 = v170;
        uint64_t v171 = *(void *)v167;
        v167 += 8;
        v158 += v171 * v169;
        --v165;
      }
      while (v165);
      goto LABEL_137;
    }
    uint64_t v160 = 0;
    uint64_t v161 = 0;
    unint64_t v162 = v309;
    uint64_t v163 = v286;
    v164 = v34 + 1;
    do
    {
      v160 += *(v163 - 1) * *(v164 - 1);
      v161 += *v163 * *v164;
      v164 += 2;
      v163 += 2;
      v162 -= 2;
    }
    while (v162);
    uint64_t v158 = v161 + v160;
    unint64_t v159 = v309;
    if (v146 != v309) {
      goto LABEL_135;
    }
LABEL_137:
    short float v172 = *(short float *)(v321 + 2 * (v158 + v324));
    if (v327 == v25)
    {
      uint64_t v173 = 0;
    }
    else
    {
      if (v142 >= 2)
      {
        uint64_t v175 = 0;
        uint64_t v176 = 0;
        unint64_t v177 = v307;
        uint64_t v178 = v283;
        uint64_t v179 = (void *)(v25 + 8);
        do
        {
          v175 += *(v178 - 1) * *(v179 - 1);
          v176 += *v178 * *v179;
          v179 += 2;
          v178 += 2;
          v177 -= 2;
        }
        while (v177);
        uint64_t v173 = v176 + v175;
        unint64_t v174 = v307;
        if (v142 == v307) {
          goto LABEL_146;
        }
      }
      else
      {
        uint64_t v173 = 0;
        unint64_t v174 = 0;
      }
      unint64_t v180 = v142 - v174;
      uint64_t v181 = 8 * v174;
      v182 = &v301[8 * v174];
      uint64_t v183 = (uint64_t *)(v25 + v181);
      do
      {
        uint64_t v185 = *v183++;
        uint64_t v184 = v185;
        uint64_t v186 = *(void *)v182;
        v182 += 8;
        v173 += v186 * v184;
        --v180;
      }
      while (v180);
    }
LABEL_146:
    *(short float *)(v147 + 2 * (v173 + v148)) = v172 + *(short float *)(v147 + 2 * (v173 + v148));
    if ((int)v149 < 1) {
      break;
    }
    uint64_t v187 = v151;
    int v188 = v149;
    while (1)
    {
      uint64_t v189 = (v187 - 2);
      unint64_t v190 = v34[v189] + 1;
      v34[v189] = v190;
      if (v190 < *(void *)(v150 + v189 * 8)) {
        break;
      }
      v34[(v187 - 2)] = 0;
      --v188;
      if ((unint64_t)--v187 <= 1) {
        goto LABEL_152;
      }
    }
  }
  while (v188 >= 1);
LABEL_152:
  nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&v336, &v350);
  unint64_t v92 = v329;
LABEL_153:
  uint64_t v191 = v328;
  if (__p)
  {
    v356[0] = __p;
    operator delete(__p);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  uint64_t v192 = v351;
  if (v351 && !atomic_fetch_add(&v351->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
    std::__shared_weak_count::__release_weak(v192);
  }
LABEL_205:
  if (v25) {
    goto LABEL_206;
  }
LABEL_207:
  if (v367.__r_.__value_.__r.__words[0]) {
    operator delete(v367.__r_.__value_.__l.__data_);
  }
  if (v364)
  {
    v365 = v364;
    operator delete(v364);
  }
  if (__dst.__r_.__value_.__r.__words[2])
  {
    uint64_t v363 = __dst.__r_.__value_.__r.__words[2];
    operator delete((void *)__dst.__r_.__value_.__r.__words[2]);
  }
  std::string::size_type size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
  if (__dst.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
  if (v333)
  {
    v334 = (int *)v333;
    operator delete(v333);
  }
  if (v330)
  {
    v331 = v330;
    operator delete(v330);
  }
  switch(*((unsigned char *)v92 + 8))
  {
    case 1:
      uint64_t v240 = (uint64_t)*(double *)v92;
      goto LABEL_257;
    case 2:
      double v241 = *(double *)v92;
      size_t __idx = 0;
      v242 = (const char *)(*(void *)&v241 + 8);
      if (*(char *)(*(void *)&v241 + 31) < 0) {
        v242 = *(const char **)(*(void *)&v241 + 8);
      }
      size_t v243 = strlen(v242);
      if (v243 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v244 = v243;
      if (v243 >= 0x17)
      {
        uint64_t v260 = (v243 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v243 | 7) != 0x17) {
          uint64_t v260 = v243 | 7;
        }
        uint64_t v261 = v260 + 1;
        p_dst = (std::string *)operator new(v260 + 1);
        __dst.__r_.__value_.__l.__size_ = v244;
        __dst.__r_.__value_.__r.__words[2] = v261 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v243;
        p_dst = &__dst;
        if (!v243)
        {
LABEL_253:
          p_dst->__r_.__value_.__s.__data_[v244] = 0;
          uint64_t v240 = std::stoll(&__dst, &__idx, 10);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (*(char *)(*(void *)&v241 + 31) < 0)
          {
            if (__idx == *(void *)(*(void *)&v241 + 16))
            {
LABEL_257:
              if (v240)
              {
                *(void *)uint64_t v191 = 0;
                *(unsigned char *)(v191 + 8) = 9;
                operator new();
              }
LABEL_265:
              std::vector<int>::pointer v263 = v343.__begin_;
              std::vector<int>::pointer v262 = v343.__end_;
              memset(&__dst, 0, sizeof(__dst));
              int64_t v264 = (char *)v343.__end_ - (char *)v343.__begin_;
              if (v343.__end_ != v343.__begin_)
              {
                if ((unint64_t)v264 >= 0x7FFFFFFFFFFFFFFDLL) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                v265 = (char *)operator new(2 * v264);
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v265;
                __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v265[8 * (v264 >> 2)];
                std::vector<int>::pointer v266 = v263;
                v267 = v265;
                if ((unint64_t)(v264 - 4) < 0x1C) {
                  goto LABEL_295;
                }
                unint64_t v268 = ((unint64_t)(v264 - 4) >> 2) + 1;
                std::vector<int>::pointer v266 = &v263[v268 & 0x7FFFFFFFFFFFFFF8];
                v267 = &v265[8 * (v268 & 0x7FFFFFFFFFFFFFF8)];
                v269 = v265 + 32;
                std::vector<int>::pointer v270 = v263 + 4;
                uint64_t v271 = v268 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v272 = *((_OWORD *)v270 - 1);
                  *(void *)&long long v273 = (int)v272;
                  *((void *)&v273 + 1) = SDWORD1(v272);
                  long long v274 = v273;
                  *(void *)&long long v273 = SDWORD2(v272);
                  *((void *)&v273 + 1) = SHIDWORD(v272);
                  long long v275 = v273;
                  *(void *)&long long v273 = (int)*(_OWORD *)v270;
                  *((void *)&v273 + 1) = (int)HIDWORD(*(void *)v270);
                  long long v276 = v273;
                  *(void *)&long long v273 = (int)*((void *)v270 + 1);
                  *((void *)&v273 + 1) = (int)HIDWORD(*(_OWORD *)v270);
                  *(v269 - 2) = v274;
                  *(v269 - 1) = v275;
                  _OWORD *v269 = v276;
                  v269[1] = v273;
                  v269 += 4;
                  v270 += 8;
                  v271 -= 8;
                }
                while (v271);
                if (v268 != (v268 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_295:
                  do
                  {
                    uint64_t v277 = *v266++;
                    *(void *)v267 = v277;
                    v267 += 8;
                  }
                  while (v266 != v262);
                }
                __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v267;
              }
              nitro::ndarray_container::squeeze((uint64_t)&v336, &__dst, (uint64_t)&v350);
              *(void *)uint64_t v191 = 0;
              *(unsigned char *)(v191 + 8) = 9;
              operator new();
            }
          }
          else if (__idx == *(unsigned __int8 *)(*(void *)&v241 + 31))
          {
            goto LABEL_257;
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          v279 = std::string::append(&v367, " cannot be interpreted as an integer");
          long long v280 = *(_OWORD *)&v279->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v279->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v280;
          v279->__r_.__value_.__l.__size_ = 0;
          v279->__r_.__value_.__r.__words[2] = 0;
          v279->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &__dst);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      memmove(p_dst, v242, v244);
      goto LABEL_253;
    case 3:
      double v255 = *(double *)v92;
      v359 = 0;
      v360 = 0;
      v358 = 0;
      v257 = *(unsigned char **)(*(void *)&v255 + 8);
      v256 = *(unsigned char **)(*(void *)&v255 + 16);
      int64_t v258 = v256 - v257;
      if (v256 == v257)
      {
        v259 = 0;
      }
      else
      {
        if (v258 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        v259 = (char *)operator new(v256 - v257);
        v358 = v259;
        v360 = &v259[8 * (v258 >> 3)];
        memcpy(v259, v257, v258);
        v359 = &v259[8 * (v258 >> 3)];
      }
      nitro::flexible_type_fail(0);
      if (!v259) {
        goto LABEL_265;
      }
      v250 = v259;
      goto LABEL_264;
    case 4:
      double v247 = *(double *)v92;
      uint64_t v348 = 0;
      uint64_t v349 = 0;
      v347 = 0;
      std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&v347, *(void **)(*(void *)&v247 + 8), *(void **)(*(void *)&v247 + 16), (uint64_t)(*(void *)(*(void *)&v247 + 16) - *(void *)(*(void *)&v247 + 8)) >> 4);
      nitro::flexible_type_fail(0);
      v248 = v347;
      if (!v347) {
        goto LABEL_265;
      }
      uint64_t v249 = v348;
      v250 = v347;
      if ((void *)v348 != v347)
      {
        do
        {
          v249 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v349, v249);
        }
        while ((void *)v249 != v248);
        v250 = v347;
      }
      uint64_t v348 = (uint64_t)v248;
      goto LABEL_264;
    case 5:
      double v251 = *(double *)v92;
      uint64_t v345 = 0;
      uint64_t v346 = 0;
      v344 = 0;
      std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&v344, *(char **)(*(void *)&v251 + 8), *(char **)(*(void *)&v251 + 16), (uint64_t)(*(void *)(*(void *)&v251 + 16) - *(void *)(*(void *)&v251 + 8)) >> 5);
      nitro::flexible_type_fail(0);
      uint64_t v252 = (uint64_t)v344;
      if (!v344) {
        goto LABEL_265;
      }
      uint64_t v253 = v345;
      v254 = v344;
      if ((void *)v345 != v344)
      {
        do
          uint64_t v253 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v253 - 32);
        while (v253 != v252);
        v254 = v344;
      }
      uint64_t v345 = v252;
      v250 = v254;
LABEL_264:
      operator delete(v250);
      goto LABEL_265;
    case 6:
    case 8:
      __break(1u);
      return;
    case 7:
      goto LABEL_265;
    case 9:
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v350, (const nitro::ndarray_container *)(*(void *)v92 + 8));
      nitro::flexible_type_fail(0);
      if (v356[0])
      {
        v356[1] = v356[0];
        operator delete(v356[0]);
      }
      if (v353)
      {
        v354 = v353;
        operator delete(v353);
      }
      v246 = (std::__shared_weak_count *)v352;
      if (v352 && !atomic_fetch_add((atomic_ullong *volatile)v352 + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
        std::__shared_weak_count::__release_weak(v246);
      }
      goto LABEL_265;
    default:
      uint64_t v240 = *(void *)v92;
      goto LABEL_257;
  }
}

void sub_192639C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61)
{
  if (*(char *)(v63 - 169) < 0) {
    operator delete(*(void **)(v63 - 192));
  }
  if (*(char *)(v63 - 97) < 0)
  {
    operator delete(*(void **)(v63 - 120));
    if ((v62 & 1) == 0)
    {
LABEL_8:
      nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a37);
      if (__p) {
        operator delete(__p);
      }
      nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a50);
      if (a60)
      {
        a61 = (uint64_t)a60;
        operator delete(a60);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v62)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v61);
  goto LABEL_8;
}

void sub_192639FB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a31) {
    operator delete(a31);
  }
  JUMPOUT(0x192639F84);
}

void sub_192639FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a47) {
    JUMPOUT(0x192639F8CLL);
  }
  JUMPOUT(0x192639F90);
}

void nitro::nitro_builtins::Concat(void *a1)
{
  int v2 = (void *)*a1;
  uint64_t v1 = (void *)a1[1];
  uint64_t v3 = (uint64_t)v1 - *a1;
  unint64_t v4 = v3 >> 5;
  uint64_t v34 = v3 >> 5;
  if ((unint64_t)v3 <= 0x3F)
  {
    size_t v33 = &v34;
    nitro::nitro_builtins::Concat(std::vector<nitro::nitro_variable> const&)::$_0::operator()();
  }
  if (v1 != v2)
  {
    if (v4 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v3 >> 5;
    }
    int v7 = v2;
    do
    {
      if (*v7) {
        nitro::nitro_builtins::check_all_flexible_type(std::vector<nitro::nitro_variable> const&)::$_0::operator()();
      }
      v7 += 4;
      --v6;
    }
    while (v6);
  }
  if (v2[4 * v4 - 4]) {
    nitro::nitro_variable::value(void)const::{lambda(void)#1}::operator()();
  }
  int v32 = nitro::flexible_type_converter<int>::get((uint64_t)&v34, (unsigned __int8 *)&v2[4 * v4 - 2]);
  int64x2_t v35 = 0uLL;
  unint64_t v36 = 0;
  int64_t v8 = (void *)*a1;
  if (a1[1] - *a1 == 32)
  {
LABEL_11:
    nitro::ndarray_container::concat((nitro::ndarray_container **)&v35, v32, (nitro::ndarray_container *)&v34);
    operator new();
  }
  unint64_t v9 = 0;
  while (1)
  {
    if (v8[4 * v9]) {
      nitro::nitro_variable::value(void)const::{lambda(void)#1}::operator()();
    }
    uint64_t v11 = &v8[4 * v9];
    unint64_t v12 = (double *)(v11 + 2);
    int v13 = *((unsigned __int8 *)v11 + 24);
    if (!v13)
    {
      double v20 = *v12;
      *(_DWORD *)operator new(4uLL) = LODWORD(v20);
      *(void *)operator new(8uLL) = 1;
      nitro::ndarray<int>::ndarray((uint64_t)&v33);
    }
    if (v13 == 1)
    {
      double v21 = *v12;
      std::string::size_type v22 = (float *)operator new(4uLL);
      float v23 = v21;
      *std::string::size_type v22 = v23;
      *(void *)operator new(8uLL) = 1;
      nitro::ndarray<float>::ndarray((uint64_t)&v33);
    }
    if (v13 != 9) {
      goto LABEL_15;
    }
    unint64_t v14 = *(void **)v12;
    uint64_t v16 = (char *)v14[4];
    std::vector<int>::pointer v15 = (char *)v14[5];
    if (v15 == v16 || !v14[2]) {
      goto LABEL_15;
    }
    unint64_t v17 = v15 - v16 - 8;
    if (v17 < 8) {
      break;
    }
    uint64_t v24 = (v17 >> 3) + 1;
    uint64_t v19 = &v16[8 * (v24 & 0x3FFFFFFFFFFFFFFELL)];
    int64_t v25 = v16 + 8;
    uint64_t v26 = v24 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v27 = 1;
    uint64_t v28 = 1;
    do
    {
      v27 *= *(v25 - 1);
      v28 *= *v25;
      v25 += 2;
      v26 -= 2;
    }
    while (v26);
    uint64_t v18 = v28 * v27;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFELL)) {
      goto LABEL_29;
    }
LABEL_30:
    if (v18)
    {
      uint64_t v30 = (const nitro::ndarray_container *)(v14 + 1);
      uint64_t v31 = v35.i64[1];
      if (v35.i64[1] >= v36)
      {
        uint64_t v10 = std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container const&>(&v35, v30);
      }
      else
      {
        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v35.i64[1], v30);
        uint64_t v10 = v31 + 80;
      }
      v35.i64[1] = v10;
    }
LABEL_15:
    ++v9;
    int64_t v8 = (void *)*a1;
    if (v9 >= ((uint64_t)(a1[1] - *a1) >> 5) - 1) {
      goto LABEL_11;
    }
  }
  uint64_t v18 = 1;
  uint64_t v19 = (char *)v14[4];
  do
  {
LABEL_29:
    uint64_t v29 = *(void *)v19;
    v19 += 8;
    v18 *= v29;
  }
  while (v19 != v15);
  goto LABEL_30;
}

void sub_19263A6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  *(void *)(v30 - 120) = v29;
  a29 = v30 - 128;
  std::vector<nitro::ndarray_container>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Shape(nitro::nitro_builtins *this, const nitro::flexible_type *a2)
{
  uint64_t v2 = *(void *)this;
  uint64_t v24 = 0;
  int64_t v25 = 0;
  float v23 = 0;
  unint64_t v4 = *(unsigned char **)(v2 + 32);
  uint64_t v3 = *(unsigned char **)(v2 + 40);
  int64_t v5 = v3 - v4;
  if (v3 == v4)
  {
    double v20 = 0;
    double v21 = 0;
    std::string::size_type v22 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (int32x4_t *)operator new(v3 - v4);
    int v7 = (int32x4_t *)((char *)v6 + 8 * (v5 >> 3));
    float v23 = (uint64_t *)v6;
    int64_t v25 = v7;
    memcpy(v6, v4, v5);
    uint64_t v24 = v7;
    double v21 = 0;
    int64_t v8 = (int32x4_t *)operator new((unint64_t)v5 >> 1);
    double v20 = v8;
    std::string::size_type v22 = &v8->i8[4 * (v5 >> 3)];
    unint64_t v9 = v8;
    if ((unint64_t)(v5 - 8) < 0x38) {
      goto LABEL_14;
    }
    unint64_t v10 = ((unint64_t)(v5 - 8) >> 3) + 1;
    unint64_t v9 = (int32x4_t *)((char *)v8 + 4 * (v10 & 0x3FFFFFFFFFFFFFF8));
    uint64_t v11 = v8 + 1;
    unint64_t v12 = v6 + 2;
    uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      int32x4_t v15 = v12[-2];
      int32x4_t v14 = v12[-1];
      int32x4_t v17 = *v12;
      int32x4_t v16 = v12[1];
      v12 += 4;
      v11[-1] = vuzp1q_s32(v15, v14);
      *uint64_t v11 = vuzp1q_s32(v17, v16);
      v11 += 2;
      v13 -= 8;
    }
    while (v13);
    uint64_t v6 = (int32x4_t *)((char *)v6 + 8 * (v10 & 0x3FFFFFFFFFFFFFF8));
    if (v10 != (v10 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_14:
      do
      {
        uint64_t v18 = v6->i64[0];
        uint64_t v6 = (int32x4_t *)((char *)v6 + 8);
        v9->i32[0] = v18;
        unint64_t v9 = (int32x4_t *)((char *)v9 + 4);
      }
      while (v6 != v7);
    }
    double v21 = v9;
  }
  nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v19);
}

void sub_19263AAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15)
{
  int32x4_t v17 = *(void **)(v15 - 96);
  if (v17)
  {
    *(void *)(v15 - 88) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(v15 - 72);
  if (v18) {
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void nitro::nitro_builtins::Slice(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, const nitro::flexible_type *a4@<X3>, uint64_t a5@<X8>)
{
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v194, (const nitro::ndarray_container *)(*(void *)this + 8));
  nitro::nitro_builtins::convert_slice_array_to_list(a2, (uint64_t *)&v191);
  nitro::flexible_type_converter<std::vector<int>>::get((unsigned __int8 *)a3, &v190);
  int64_t v8 = v191;
  int v188 = 0;
  uint64_t v189 = 0;
  uint64_t v187 = 0;
  uint64_t v9 = v192 - (unsigned char *)v191;
  if (v192 != v191)
  {
    if (v9 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v9 >> 4;
    uint64_t v11 = operator new(24 * (v9 >> 4));
    unint64_t v12 = &v11[3 * v10];
    uint64_t v187 = v11;
    uint64_t v189 = v12;
    do
    {
      *uint64_t v11 = -1;
      v11[1] = -1;
      v11[2] = 1;
      v11 += 3;
    }
    while (v11 != v12);
    unint64_t v13 = 0;
    int v188 = v12;
    do
    {
      uint64_t v14 = v8[2 * v13];
      uint64_t v185 = 0;
      uint64_t v186 = 0;
      long long __p = 0;
      std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&__p, *(void **)(v14 + 8), *(void **)(v14 + 16), (uint64_t)(*(void *)(v14 + 16) - *(void *)(v14 + 8)) >> 4);
      uint64_t v15 = (v185 - (unsigned char *)__p) >> 4;
      if (v15 == 2)
      {
        if (nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p + 16) == -1
          || nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p + 16) == 0x7FFFFFFF)
        {
          switch(*((unsigned char *)__p + 8))
          {
            case 1:
              v7.n128_u64[0] = *(void *)__p;
              unint64_t v17 = (uint64_t)*(double *)__p;
              goto LABEL_96;
            case 2:
              unint64_t v27 = *(void *)__p;
              uint64_t v28 = (const char **)(*(void *)__p + 8);
              __idx[0] = 0;
              uint64_t v29 = (const char *)v28;
              if (*(char *)(v27 + 31) < 0) {
                uint64_t v29 = *v28;
              }
              size_t v30 = strlen(v29);
              if (v30 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              std::string::size_type v31 = v30;
              if (v30 >= 0x17)
              {
                uint64_t v46 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v30 | 7) != 0x17) {
                  uint64_t v46 = v30 | 7;
                }
                uint64_t v47 = v46 + 1;
                p_dst = (std::string *)operator new(v46 + 1);
                __dst.__r_.__value_.__l.__size_ = v31;
                __dst.__r_.__value_.__r.__words[2] = v47 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
              }
              else
              {
                *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v30;
                p_dst = &__dst;
                if (!v30) {
                  goto LABEL_58;
                }
              }
              memmove(p_dst, v29, v31);
LABEL_58:
              p_dst->__r_.__value_.__s.__data_[v31] = 0;
              unint64_t v17 = std::stoll(&__dst, __idx, 10);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__dst.__r_.__value_.__l.__data_);
              }
              if (*(char *)(v27 + 31) < 0)
              {
                if (__idx[0] != *(void *)(v27 + 16))
                {
LABEL_294:
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  unint64_t v165 = std::string::append(&v215, " cannot be interpreted as an integer");
                  long long v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
                  __dst.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v166;
                  v165->__r_.__value_.__l.__size_ = 0;
                  v165->__r_.__value_.__r.__words[2] = 0;
                  v165->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(exception, &__dst);
                  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
              }
              else if (__idx[0] != *(unsigned __int8 *)(v27 + 31))
              {
                goto LABEL_294;
              }
LABEL_96:
              __str.__r_.__value_.__r.__words[0] = v17;
              if ((v17 & 0x8000000000000000) != 0)
              {
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
                nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#1}::operator()();
              }
              __dst.__r_.__value_.__r.__words[0] = 0x7FFFFFFFLL;
              v215.__r_.__value_.__r.__words[0] = v17;
              if (v17 >= 0x7FFFFFFF)
              {
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v215;
                nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#2}::operator()();
              }
LABEL_98:
              uint64_t v24 = (char *)v187;
              int64_t v25 = (char *)v187 + 24 * v13;
              void *v25 = v17;
              uint64_t v19 = 0x7FFFFFFFLL;
              uint64_t v23 = 1;
              break;
            case 3:
              unint64_t v41 = *(void *)__p;
              uint64_t v207 = 0;
              v208 = 0;
              size_t v206 = 0;
              unint64_t v43 = *(unsigned char **)(v41 + 8);
              int64_t v42 = *(unsigned char **)(v41 + 16);
              int64_t v44 = v42 - v43;
              if (v42 == v43)
              {
                long long v45 = 0;
              }
              else
              {
                if (v44 < 0) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                long long v45 = (char *)operator new(v42 - v43);
                size_t v206 = (size_t)v45;
                v208 = &v45[8 * (v44 >> 3)];
                memcpy(v45, v43, v44);
                uint64_t v207 = &v45[8 * (v44 >> 3)];
              }
              nitro::flexible_type_fail(0);
              if (!v45) {
                goto LABEL_94;
              }
              unint64_t v36 = v45;
              goto LABEL_93;
            case 4:
              unint64_t v33 = *(void *)__p;
              uint64_t v204 = 0;
              uint64_t v205 = 0;
              uint64_t v203 = 0;
              std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&v203, *(void **)(v33 + 8), *(void **)(v33 + 16), (uint64_t)(*(void *)(v33 + 16) - *(void *)(v33 + 8)) >> 4);
              nitro::flexible_type_fail(0);
              uint64_t v34 = v203;
              if (!v203) {
                goto LABEL_94;
              }
              uint64_t v35 = v204;
              unint64_t v36 = v203;
              if ((void *)v204 != v203)
              {
                do
                {
                  v35 -= 16;
                  std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v205, v35);
                }
                while ((void *)v35 != v34);
                unint64_t v36 = v203;
              }
              uint64_t v204 = (uint64_t)v34;
              goto LABEL_93;
            case 5:
              unint64_t v37 = *(void *)__p;
              uint64_t v201 = 0;
              uint64_t v202 = 0;
              v200 = 0;
              std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&v200, *(char **)(v37 + 8), *(char **)(v37 + 16), (uint64_t)(*(void *)(v37 + 16) - *(void *)(v37 + 8)) >> 5);
              nitro::flexible_type_fail(0);
              uint64_t v38 = (uint64_t)v200;
              if (!v200) {
                goto LABEL_94;
              }
              uint64_t v39 = v201;
              std::string::size_type v40 = v200;
              if ((void *)v201 != v200)
              {
                do
                  uint64_t v39 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v39 - 32);
                while (v39 != v38);
                std::string::size_type v40 = v200;
              }
              uint64_t v201 = v38;
              unint64_t v36 = v40;
LABEL_93:
              operator delete(v36);
LABEL_94:
              unint64_t v17 = 0;
              goto LABEL_98;
            case 6:
            case 8:
              goto LABEL_306;
            case 7:
              goto LABEL_94;
            case 9:
              nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__str, (const nitro::ndarray_container *)(*(void *)__p + 8));
              nitro::flexible_type_fail(0);
              if ((void)v212)
              {
                *((void *)&v212 + 1) = v212;
                operator delete((void *)v212);
              }
              if ((void)v210)
              {
                *((void *)&v210 + 1) = v210;
                operator delete((void *)v210);
              }
              uint64_t v26 = (std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2];
              if (!__str.__r_.__value_.__r.__words[2]
                || atomic_fetch_add((atomic_ullong *volatile)(__str.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                goto LABEL_94;
              }
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
              unint64_t v17 = 0;
              goto LABEL_98;
            default:
              unint64_t v17 = *(void *)__p;
              goto LABEL_96;
          }
        }
        else
        {
          int64_t v21 = 0;
          switch(*((unsigned char *)__p + 8))
          {
            case 1:
              v7.n128_u64[0] = *(void *)__p;
              int64_t v21 = (uint64_t)*(double *)__p;
              break;
            case 2:
              unint64_t v48 = *(void *)__p;
              uint64_t v49 = (const char **)(*(void *)__p + 8);
              size_t v206 = 0;
              std::string::size_type v50 = (const char *)v49;
              if (*(char *)(v48 + 31) < 0) {
                std::string::size_type v50 = *v49;
              }
              size_t v51 = strlen(v50);
              if (v51 > 0x7FFFFFFFFFFFFFF7) {
LABEL_293:
              }
                std::string::__throw_length_error[abi:ne180100]();
              std::string::size_type v52 = v51;
              if (v51 >= 0x17)
              {
                uint64_t v66 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v51 | 7) != 0x17) {
                  uint64_t v66 = v51 | 7;
                }
                uint64_t v67 = v66 + 1;
                p_str = operator new(v66 + 1);
                __str.__r_.__value_.__l.__size_ = v52;
                __str.__r_.__value_.__r.__words[2] = v67 | 0x8000000000000000;
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
              }
              else
              {
                *((unsigned char *)&__str.__r_.__value_.__s + 23) = v51;
                p_str = &__str;
                if (!v51) {
                  goto LABEL_103;
                }
              }
              memmove(p_str, v50, v52);
LABEL_103:
              *((unsigned char *)p_str + v52) = 0;
              int64_t v21 = std::stoll(&__str, &v206, 10);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (*(char *)(v48 + 31) < 0)
              {
                if (v206 != *(void *)(v48 + 16))
                {
LABEL_299:
                  uint64_t v167 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  uint64_t v168 = std::string::append(&__dst, " cannot be interpreted as an integer");
                  long long v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
                  __str.__r_.__value_.__r.__words[2] = v168->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v169;
                  v168->__r_.__value_.__l.__size_ = 0;
                  v168->__r_.__value_.__r.__words[2] = 0;
                  v168->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v167, &__str);
                  __cxa_throw(v167, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
              }
              else if (v206 != *(unsigned __int8 *)(v48 + 31))
              {
                goto LABEL_299;
              }
              break;
            case 3:
              unint64_t v62 = *(void *)__p;
              memset(&__str, 0, sizeof(__str));
              int64_t v64 = *(unsigned char **)(v62 + 8);
              uint64_t v63 = *(unsigned char **)(v62 + 16);
              int64_t v65 = v63 - v64;
              if (v63 == v64)
              {
                int64_t v21 = 0;
              }
              else
              {
                if (v65 < 0) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                int64_t v21 = (int64_t)operator new(v63 - v64);
                __str.__r_.__value_.__r.__words[0] = v21;
                __str.__r_.__value_.__r.__words[2] = v21 + 8 * (v65 >> 3);
                memcpy((void *)v21, v64, v65);
                __str.__r_.__value_.__l.__size_ = v21 + 8 * (v65 >> 3);
              }
              nitro::flexible_type_fail(0);
              if (!v21) {
                break;
              }
              __str.__r_.__value_.__l.__size_ = v21;
              uint64_t v57 = (void *)v21;
              goto LABEL_111;
            case 4:
              unint64_t v54 = *(void *)__p;
              memset(&v215, 0, sizeof(v215));
              std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&v215, *(void **)(v54 + 8), *(void **)(v54 + 16), (uint64_t)(*(void *)(v54 + 16) - *(void *)(v54 + 8)) >> 4);
              nitro::flexible_type_fail(0);
              std::string::size_type v55 = v215.__r_.__value_.__r.__words[0];
              if (!v215.__r_.__value_.__r.__words[0]) {
                goto LABEL_112;
              }
              std::string::size_type size = v215.__r_.__value_.__l.__size_;
              uint64_t v57 = (void *)v215.__r_.__value_.__r.__words[0];
              if (v215.__r_.__value_.__l.__size_ != v215.__r_.__value_.__r.__words[0])
              {
                do
                {
                  size -= 16;
                  std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v215.__r_.__value_.__r.__words[2], size);
                }
                while (size != v55);
                uint64_t v57 = (void *)v215.__r_.__value_.__r.__words[0];
              }
              v215.__r_.__value_.__l.__size_ = v55;
              goto LABEL_111;
            case 5:
              unint64_t v58 = *(void *)__p;
              memset(&__str, 0, sizeof(__str));
              std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__str, *(char **)(v58 + 8), *(char **)(v58 + 16), (uint64_t)(*(void *)(v58 + 16) - *(void *)(v58 + 8)) >> 5);
              nitro::flexible_type_fail(0);
              std::string::size_type v59 = __str.__r_.__value_.__r.__words[0];
              if (!__str.__r_.__value_.__r.__words[0]) {
                goto LABEL_112;
              }
              std::string::size_type v60 = __str.__r_.__value_.__l.__size_;
              std::string::size_type v61 = __str.__r_.__value_.__r.__words[0];
              if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
              {
                do
                  std::string::size_type v60 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v60 - 32);
                while (v60 != v59);
                std::string::size_type v61 = __str.__r_.__value_.__r.__words[0];
              }
              __str.__r_.__value_.__l.__size_ = v59;
              uint64_t v57 = (void *)v61;
LABEL_111:
              operator delete(v57);
              goto LABEL_112;
            case 6:
            case 8:
LABEL_306:
              __break(1u);
              return;
            case 7:
              break;
            case 9:
              nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__str, (const nitro::ndarray_container *)(*(void *)__p + 8));
              nitro::flexible_type_fail(0);
              if ((void)v212)
              {
                *((void *)&v212 + 1) = v212;
                operator delete((void *)v212);
              }
              if ((void)v210)
              {
                *((void *)&v210 + 1) = v210;
                operator delete((void *)v210);
              }
              int64_t v21 = __str.__r_.__value_.__r.__words[2];
              if (!__str.__r_.__value_.__r.__words[2]) {
                break;
              }
              if (!atomic_fetch_add((atomic_ullong *volatile)(__str.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                (*(void (**)(int64_t))(*(void *)v21 + 16))(v21);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v21);
              }
LABEL_112:
              int64_t v21 = 0;
              break;
            default:
              int64_t v21 = *(void *)__p;
              break;
          }
          uint64_t v68 = 0;
          switch(*((unsigned char *)__p + 8))
          {
            case 1:
              v7.n128_u64[0] = *(void *)__p;
              uint64_t v68 = (std::__shared_weak_count *)(uint64_t)*(double *)__p;
              break;
            case 2:
              unint64_t v69 = *(void *)__p;
              uint64_t v70 = (const char **)(*(void *)__p + 8);
              size_t v206 = 0;
              uint64_t v71 = (const char *)v70;
              if (*(char *)(v69 + 31) < 0) {
                uint64_t v71 = *v70;
              }
              size_t v72 = strlen(v71);
              if (v72 > 0x7FFFFFFFFFFFFFF7) {
                goto LABEL_293;
              }
              std::string::size_type v73 = v72;
              if (v72 >= 0x17)
              {
                uint64_t v87 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v72 | 7) != 0x17) {
                  uint64_t v87 = v72 | 7;
                }
                uint64_t v88 = v87 + 1;
                uint64_t v74 = operator new(v87 + 1);
                __str.__r_.__value_.__l.__size_ = v73;
                __str.__r_.__value_.__r.__words[2] = v88 | 0x8000000000000000;
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
              }
              else
              {
                *((unsigned char *)&__str.__r_.__value_.__s + 23) = v72;
                uint64_t v74 = &__str;
                if (!v72) {
                  goto LABEL_146;
                }
              }
              memmove(v74, v71, v73);
LABEL_146:
              *((unsigned char *)v74 + v73) = 0;
              uint64_t v68 = (std::__shared_weak_count *)std::stoll(&__str, &v206, 10);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (*(char *)(v69 + 31) < 0)
              {
                if (v206 != *(void *)(v69 + 16))
                {
LABEL_300:
                  uint64_t v170 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  uint64_t v171 = std::string::append(&__dst, " cannot be interpreted as an integer");
                  long long v172 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
                  __str.__r_.__value_.__r.__words[2] = v171->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v172;
                  v171->__r_.__value_.__l.__size_ = 0;
                  v171->__r_.__value_.__r.__words[2] = 0;
                  v171->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v170, &__str);
                  __cxa_throw(v170, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
              }
              else if (v206 != *(unsigned __int8 *)(v69 + 31))
              {
                goto LABEL_300;
              }
              break;
            case 3:
              unint64_t v83 = *(void *)__p;
              memset(&__str, 0, sizeof(__str));
              uint64_t v85 = *(unsigned char **)(v83 + 8);
              unint64_t v84 = *(unsigned char **)(v83 + 16);
              int64_t v86 = v84 - v85;
              if (v84 == v85)
              {
                uint64_t v68 = 0;
              }
              else
              {
                if (v86 < 0) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v68 = (std::__shared_weak_count *)operator new(v84 - v85);
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
                __str.__r_.__value_.__r.__words[2] = (std::string::size_type)v68 + 8 * (v86 >> 3);
                memcpy(v68, v85, v86);
                __str.__r_.__value_.__l.__size_ = (std::string::size_type)v68 + 8 * (v86 >> 3);
              }
              nitro::flexible_type_fail(0);
              if (!v68) {
                break;
              }
              unint64_t v78 = v68;
              goto LABEL_154;
            case 4:
              unint64_t v75 = *(void *)__p;
              memset(&v215, 0, sizeof(v215));
              std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&v215, *(void **)(v75 + 8), *(void **)(v75 + 16), (uint64_t)(*(void *)(v75 + 16) - *(void *)(v75 + 8)) >> 4);
              nitro::flexible_type_fail(0);
              std::string::size_type v76 = v215.__r_.__value_.__r.__words[0];
              if (!v215.__r_.__value_.__r.__words[0]) {
                goto LABEL_155;
              }
              std::string::size_type v77 = v215.__r_.__value_.__l.__size_;
              unint64_t v78 = (void *)v215.__r_.__value_.__r.__words[0];
              if (v215.__r_.__value_.__l.__size_ != v215.__r_.__value_.__r.__words[0])
              {
                do
                {
                  v77 -= 16;
                  std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v215.__r_.__value_.__r.__words[2], v77);
                }
                while (v77 != v76);
                unint64_t v78 = (void *)v215.__r_.__value_.__r.__words[0];
              }
              v215.__r_.__value_.__l.__size_ = v76;
              goto LABEL_154;
            case 5:
              unint64_t v79 = *(void *)__p;
              memset(&__str, 0, sizeof(__str));
              std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__str, *(char **)(v79 + 8), *(char **)(v79 + 16), (uint64_t)(*(void *)(v79 + 16) - *(void *)(v79 + 8)) >> 5);
              nitro::flexible_type_fail(0);
              std::string::size_type v80 = __str.__r_.__value_.__r.__words[0];
              if (!__str.__r_.__value_.__r.__words[0]) {
                goto LABEL_155;
              }
              std::string::size_type v81 = __str.__r_.__value_.__l.__size_;
              std::string::size_type v82 = __str.__r_.__value_.__r.__words[0];
              if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
              {
                do
                  std::string::size_type v81 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v81 - 32);
                while (v81 != v80);
                std::string::size_type v82 = __str.__r_.__value_.__r.__words[0];
              }
              __str.__r_.__value_.__l.__size_ = v80;
              unint64_t v78 = (void *)v82;
LABEL_154:
              operator delete(v78);
              goto LABEL_155;
            case 6:
            case 8:
              goto LABEL_306;
            case 7:
              break;
            case 9:
              nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__str, (const nitro::ndarray_container *)(*(void *)__p + 8));
              nitro::flexible_type_fail(0);
              if ((void)v212)
              {
                *((void *)&v212 + 1) = v212;
                operator delete((void *)v212);
              }
              if ((void)v210)
              {
                *((void *)&v210 + 1) = v210;
                operator delete((void *)v210);
              }
              uint64_t v68 = (std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2];
              if (!__str.__r_.__value_.__r.__words[2]) {
                break;
              }
              if (!atomic_fetch_add((atomic_ullong *volatile)(__str.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
LABEL_155:
              uint64_t v68 = 0;
              break;
            default:
              uint64_t v68 = *(std::__shared_weak_count **)__p;
              break;
          }
          uint64_t v89 = 0;
          switch(*((unsigned char *)__p + 24))
          {
            case 1:
              v7.n128_u64[0] = *((void *)__p + 2);
              uint64_t v89 = (uint64_t)v7.n128_f64[0];
              goto LABEL_202;
            case 2:
              uint64_t v90 = *((void *)__p + 2);
              size_t v206 = 0;
              unint64_t v91 = (const char *)(v90 + 8);
              if (*(char *)(v90 + 31) < 0) {
                unint64_t v91 = *(const char **)(v90 + 8);
              }
              size_t v92 = strlen(v91);
              if (v92 > 0x7FFFFFFFFFFFFFF7) {
                goto LABEL_293;
              }
              std::string::size_type v93 = v92;
              if (v92 >= 0x17)
              {
                uint64_t v109 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v92 | 7) != 0x17) {
                  uint64_t v109 = v92 | 7;
                }
                uint64_t v110 = v109 + 1;
                std::string::size_type v94 = operator new(v109 + 1);
                __str.__r_.__value_.__l.__size_ = v93;
                __str.__r_.__value_.__r.__words[2] = v110 | 0x8000000000000000;
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
              }
              else
              {
                *((unsigned char *)&__str.__r_.__value_.__s + 23) = v92;
                std::string::size_type v94 = &__str;
                if (!v92) {
                  goto LABEL_190;
                }
              }
              memmove(v94, v91, v93);
LABEL_190:
              *((unsigned char *)v94 + v93) = 0;
              uint64_t v89 = std::stoll(&__str, &v206, 10);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (*(char *)(v90 + 31) < 0)
              {
                if (v206 != *(void *)(v90 + 16))
                {
LABEL_301:
                  uint64_t v173 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  unint64_t v174 = std::string::append(&__dst, " cannot be interpreted as an integer");
                  long long v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
                  __str.__r_.__value_.__r.__words[2] = v174->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v175;
                  v174->__r_.__value_.__l.__size_ = 0;
                  v174->__r_.__value_.__r.__words[2] = 0;
                  v174->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v173, &__str);
                  __cxa_throw(v173, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
              }
              else if (v206 != *(unsigned __int8 *)(v90 + 31))
              {
                goto LABEL_301;
              }
LABEL_202:
              __str.__r_.__value_.__r.__words[0] = v21;
              if (v21 < 0)
              {
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
                nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#1}::operator()();
              }
              uint64_t v19 = (uint64_t)v68 + v89;
              __dst.__r_.__value_.__r.__words[0] = v19;
              v215.__r_.__value_.__r.__words[0] = v21;
              if (v19 <= v21)
              {
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v215;
                nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#2}::operator()();
              }
              uint64_t v24 = (char *)v187;
              int64_t v25 = (char *)v187 + 24 * v13;
              void *v25 = v21;
              uint64_t v23 = 1;
              break;
            case 3:
              uint64_t v104 = *((void *)__p + 2);
              memset(&__str, 0, sizeof(__str));
              uint64_t v106 = *(unsigned char **)(v104 + 8);
              uint64_t v105 = *(unsigned char **)(v104 + 16);
              int64_t v107 = v105 - v106;
              if (v105 == v106)
              {
                uint64_t v108 = 0;
              }
              else
              {
                if (v107 < 0) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v108 = operator new(v105 - v106);
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
                __str.__r_.__value_.__r.__words[2] = (std::string::size_type)v108 + 8 * (v107 >> 3);
                memcpy(v108, v106, v107);
                __str.__r_.__value_.__l.__size_ = (std::string::size_type)v108 + 8 * (v107 >> 3);
              }
              nitro::flexible_type_fail(0);
              if (!v108) {
                goto LABEL_201;
              }
              uint64_t v99 = v108;
              goto LABEL_200;
            case 4:
              uint64_t v96 = *((void *)__p + 2);
              memset(&v215, 0, sizeof(v215));
              std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&v215, *(void **)(v96 + 8), *(void **)(v96 + 16), (uint64_t)(*(void *)(v96 + 16) - *(void *)(v96 + 8)) >> 4);
              nitro::flexible_type_fail(0);
              std::string::size_type v97 = v215.__r_.__value_.__r.__words[0];
              if (!v215.__r_.__value_.__r.__words[0]) {
                goto LABEL_185;
              }
              std::string::size_type v98 = v215.__r_.__value_.__l.__size_;
              uint64_t v99 = (void *)v215.__r_.__value_.__r.__words[0];
              if (v215.__r_.__value_.__l.__size_ != v215.__r_.__value_.__r.__words[0])
              {
                do
                {
                  v98 -= 16;
                  std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v215.__r_.__value_.__r.__words[2], v98);
                }
                while (v98 != v97);
                uint64_t v99 = (void *)v215.__r_.__value_.__r.__words[0];
              }
              v215.__r_.__value_.__l.__size_ = v97;
              goto LABEL_200;
            case 5:
              uint64_t v100 = *((void *)__p + 2);
              memset(&__str, 0, sizeof(__str));
              std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__str, *(char **)(v100 + 8), *(char **)(v100 + 16), (uint64_t)(*(void *)(v100 + 16) - *(void *)(v100 + 8)) >> 5);
              nitro::flexible_type_fail(0);
              std::string::size_type v101 = __str.__r_.__value_.__r.__words[0];
              if (__str.__r_.__value_.__r.__words[0])
              {
                std::string::size_type v102 = __str.__r_.__value_.__l.__size_;
                std::string::size_type v103 = __str.__r_.__value_.__r.__words[0];
                if (__str.__r_.__value_.__l.__size_ != __str.__r_.__value_.__r.__words[0])
                {
                  do
                    std::string::size_type v102 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v102 - 32);
                  while (v102 != v101);
                  std::string::size_type v103 = __str.__r_.__value_.__r.__words[0];
                }
                __str.__r_.__value_.__l.__size_ = v101;
                uint64_t v99 = (void *)v103;
LABEL_200:
                operator delete(v99);
LABEL_201:
                uint64_t v89 = 0;
              }
              else
              {
LABEL_185:
                uint64_t v89 = 0;
              }
              goto LABEL_202;
            case 6:
            case 8:
              goto LABEL_306;
            case 7:
              goto LABEL_202;
            case 9:
              nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__str, (const nitro::ndarray_container *)(*((void *)__p + 2) + 8));
              nitro::flexible_type_fail(0);
              if ((void)v212)
              {
                *((void *)&v212 + 1) = v212;
                operator delete((void *)v212);
              }
              if ((void)v210)
              {
                *((void *)&v210 + 1) = v210;
                operator delete((void *)v210);
              }
              uint64_t v95 = (std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2];
              if (__str.__r_.__value_.__r.__words[2]
                && !atomic_fetch_add((atomic_ullong *volatile)(__str.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
              goto LABEL_201;
            default:
              uint64_t v89 = *((void *)__p + 2);
              goto LABEL_202;
          }
        }
      }
      else
      {
        if (v15 != 3)
        {
          if (*((int *)global_logger() + 169) <= 6)
          {
            uint64_t v158 = (file_logger *)global_logger();
            started = (pthread_key_t *)file_logger::start_stream(v158, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 730, 1);
            uint64_t v160 = pthread_getspecific(started[74]);
            if (v160 && *((unsigned char *)v160 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160 + 2, (uint64_t)"Check failed: ", 14);
            }
            uint64_t v161 = pthread_getspecific(started[74]);
            if (v161 && *((unsigned char *)v161 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161 + 2, (uint64_t)"false", 5);
            }
            unint64_t v162 = pthread_getspecific(started[74]);
            if (v162 && *((unsigned char *)v162 + 280))
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162 + 2, (uint64_t)":\n", 2);
              file_logger::stream_flush((file_logger *)started);
            }
          }
          log_dispatch<true>::exec(6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 730, "Invalid slice specification", v155, v156, v157, v176);
          __print_back_trace();
          uint64_t v163 = __cxa_allocate_exception(8uLL);
          *uint64_t v163 = "assertion failure";
          __cxa_throw(v163, MEMORY[0x1E4FBA308], 0);
        }
        if ((nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p) & 0x80000000) != 0)
        {
          uint64_t v18 = *((void *)v196 + v13);
          int64_t v16 = v18 + (int)nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p);
        }
        else
        {
          int64_t v16 = (int)nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p);
        }
        if ((nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p + 16) & 0x80000000) != 0)
        {
          uint64_t v20 = *((void *)v196 + v13);
          uint64_t v19 = v20 + (int)nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p + 16) + 1;
        }
        else if (nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p + 16) == 0x7FFFFFFF)
        {
          uint64_t v19 = *((void *)v196 + v13);
        }
        else
        {
          uint64_t v19 = (int)nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p + 16);
        }
        int v22 = nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p + 32);
        __str.__r_.__value_.__r.__words[0] = v16;
        if (v16 < 0)
        {
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          nitro::slice_range::slice_range<long long,(void *)0>(long long,long long,long long)::{lambda(void)#1}::operator()();
        }
        __dst.__r_.__value_.__r.__words[0] = v19;
        v215.__r_.__value_.__r.__words[0] = v16;
        if (v19 < v16)
        {
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v215;
          nitro::slice_range::slice_range<long long,(void *)0>(long long,long long,long long)::{lambda(void)#2}::operator()();
        }
        uint64_t v23 = v22;
        uint64_t v24 = (char *)v187;
        int64_t v25 = (char *)v187 + 24 * v13;
        void *v25 = v16;
      }
      v25[1] = v19;
      v25[2] = v23;
      uint64_t v111 = &v24[24 * v13];
      uint64_t v113 = *((void *)v111 + 1);
      uint64_t v112 = v111 + 8;
      if (v113 == 0x7FFFFFFF) {
        *uint64_t v112 = *((void *)v196 + v13);
      }
      uint64_t v114 = __p;
      if (__p)
      {
        uint64_t v115 = (uint64_t)v185;
        unint64_t v116 = __p;
        if (v185 != __p)
        {
          do
          {
            v115 -= 16;
            std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v186, v115);
          }
          while ((unsigned char *)v115 != v114);
          unint64_t v116 = __p;
        }
        uint64_t v185 = v114;
        operator delete(v116);
      }
      ++v13;
      int64_t v8 = v191;
    }
    while (v13 < (v192 - (unsigned char *)v191) >> 4);
  }
  nitro::ndarray_container::slice((uint64_t)v194, (long long **)&v187, (uint64_t)&__str, v7);
  std::vector<int>::pointer begin = v190.__begin_;
  std::vector<int>::pointer end = v190.__end_;
  int64_t v119 = (char *)v190.__end_ - (char *)v190.__begin_;
  if (v190.__end_ != v190.__begin_)
  {
    memset(&v215, 0, sizeof(v215));
    if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v120 = (char *)operator new(2 * v119);
    v215.__r_.__value_.__r.__words[0] = (std::string::size_type)v120;
    v215.__r_.__value_.__r.__words[2] = (std::string::size_type)&v120[8 * (v119 >> 2)];
    std::vector<int>::pointer v121 = begin;
    uint64_t v122 = v120;
    if ((unint64_t)(v119 - 4) < 0x1C) {
      goto LABEL_309;
    }
    unint64_t v123 = ((unint64_t)(v119 - 4) >> 2) + 1;
    std::vector<int>::pointer v121 = &begin[v123 & 0x7FFFFFFFFFFFFFF8];
    uint64_t v122 = &v120[8 * (v123 & 0x7FFFFFFFFFFFFFF8)];
    uint64_t v124 = v120 + 32;
    std::vector<int>::pointer v125 = begin + 4;
    uint64_t v126 = v123 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v127 = *((_OWORD *)v125 - 1);
      *(void *)&long long v128 = (int)v127;
      *((void *)&v128 + 1) = SDWORD1(v127);
      long long v129 = v128;
      *(void *)&long long v128 = SDWORD2(v127);
      *((void *)&v128 + 1) = SHIDWORD(v127);
      long long v130 = v128;
      *(void *)&long long v128 = (int)*(_OWORD *)v125;
      *((void *)&v128 + 1) = (int)HIDWORD(*(void *)v125);
      long long v131 = v128;
      *(void *)&long long v128 = (int)*((void *)v125 + 1);
      *((void *)&v128 + 1) = (int)HIDWORD(*(_OWORD *)v125);
      *(v124 - 2) = v129;
      *(v124 - 1) = v130;
      *uint64_t v124 = v131;
      v124[1] = v128;
      v124 += 4;
      v125 += 8;
      v126 -= 8;
    }
    while (v126);
    if (v123 != (v123 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_309:
      do
      {
        uint64_t v132 = *v121++;
        *(void *)uint64_t v122 = v132;
        v122 += 8;
      }
      while (v121 != end);
    }
    v215.__r_.__value_.__l.__size_ = (std::string::size_type)v122;
    nitro::ndarray_container::squeeze((uint64_t)&__str, &v215, (uint64_t)&__dst);
    LODWORD(__str.__r_.__value_.__l.__data_) = __dst.__r_.__value_.__l.__data_;
    long long v133 = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    int64x2_t v134 = (std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = v133;
    if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
    if ((void)v210)
    {
      *((void *)&v210 + 1) = v210;
      operator delete((void *)v210);
    }
    long long v210 = *(_OWORD *)v179;
    unint64_t v211 = v180;
    v179[1] = 0;
    unint64_t v180 = 0;
    v179[0] = 0;
    uint64_t v135 = (void *)v212;
    if ((void)v212)
    {
      *((void *)&v212 + 1) = v212;
      operator delete((void *)v212);
      uint64_t v135 = v179[0];
    }
    long long v212 = v181;
    uint64_t v136 = v182;
    uint64_t v182 = 0;
    long long v181 = 0uLL;
    uint64_t v213 = v136;
    uint64_t v214 = v183;
    if (v135)
    {
      v179[1] = v135;
      operator delete(v135);
    }
    uint64_t v137 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
    if (__dst.__r_.__value_.__r.__words[2]
      && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
    if (v215.__r_.__value_.__r.__words[0])
    {
      v215.__r_.__value_.__l.__size_ = v215.__r_.__value_.__r.__words[0];
      operator delete(v215.__r_.__value_.__l.__data_);
    }
  }
  if (*((void *)&v210 + 1) != (void)v210)
  {
    *(void *)a5 = 0;
    *(unsigned char *)(a5 + 8) = 9;
    operator new();
  }
  switch(LODWORD(__str.__r_.__value_.__l.__data_))
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&__dst, (uint64_t)&__str);
      uint64_t v143 = v182;
      *(unsigned char *)(a5 + 8) = 0;
      int v144 = v180;
      *(void *)a5 = *(int *)(__dst.__r_.__value_.__r.__words[0] + 4 * v143);
      if (!v144) {
        goto LABEL_273;
      }
      goto LABEL_272;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&__dst, (uint64_t)&__str);
      uint64_t v154 = v182;
      *(unsigned char *)(a5 + 8) = 0;
      int v144 = v180;
      *(void *)a5 = *(unsigned __int8 *)(__dst.__r_.__value_.__r.__words[0] + v154);
      if (!v144) {
        goto LABEL_273;
      }
      goto LABEL_272;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&__dst, (uint64_t)&__str);
      uint64_t v145 = v182;
      *(unsigned char *)(a5 + 8) = 1;
      int v144 = v180;
      *(double *)a5 = *(float *)(__dst.__r_.__value_.__r.__words[0] + 4 * v145);
      if (v144) {
        goto LABEL_272;
      }
      goto LABEL_273;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&__dst, (uint64_t)&__str);
      uint64_t v147 = v182;
      *(unsigned char *)(a5 + 8) = 1;
      int v144 = v180;
      _H0 = *(_WORD *)(__dst.__r_.__value_.__r.__words[0] + 2 * v147);
      __asm { FCVT            D0, H0 }
      *(void *)a5 = _D0;
      if (!v144) {
        goto LABEL_273;
      }
LABEL_272:
      *(void *)&long long v181 = v144;
      operator delete(v144);
LABEL_273:
      if (__dst.__r_.__value_.__r.__words[2])
      {
        v179[0] = (void *)__dst.__r_.__value_.__r.__words[2];
        operator delete((void *)__dst.__r_.__value_.__r.__words[2]);
      }
      unint64_t v146 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
      if ((void)v212)
      {
        *((void *)&v212 + 1) = v212;
        operator delete((void *)v212);
      }
      if ((void)v210)
      {
        *((void *)&v210 + 1) = v210;
        operator delete((void *)v210);
      }
      uint64_t v138 = (std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2];
      if (__str.__r_.__value_.__r.__words[2]
        && !atomic_fetch_add((atomic_ullong *volatile)(__str.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
        std::__shared_weak_count::__release_weak(v138);
      }
      if (v187)
      {
        int v188 = v187;
        operator delete(v187);
      }
      if (v190.__begin_)
      {
        v190.__end_ = v190.__begin_;
        operator delete(v190.__begin_);
      }
      int v139 = v191;
      if (v191)
      {
        uint64_t v140 = (uint64_t)v192;
        unint64_t v141 = v191;
        if (v192 != v191)
        {
          do
          {
            v140 -= 16;
            std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v193, v140);
          }
          while ((unsigned char *)v140 != v139);
          unint64_t v141 = v191;
        }
        uint64_t v192 = v139;
        operator delete(v141);
      }
      if (v198)
      {
        uint64_t v199 = v198;
        operator delete(v198);
      }
      if (v196)
      {
        unint64_t v197 = v196;
        operator delete(v196);
      }
      unint64_t v142 = v195;
      if (v195)
      {
        if (!atomic_fetch_add(&v195->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }
      break;
    default:
      printf("%d\n", LODWORD(__str.__r_.__value_.__l.__data_));
      nitro::ndarray_container::visit<nitro::nitro_builtins::Slice(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Slice(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
}

void sub_19263C418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  std::vector<nitro::flexible_type>::~vector[abi:ne180100](&a38);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a41);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::SliceMask(nitro::nitro_builtins *this, const nitro::flexible_type *a2, const nitro::flexible_type *a3, const nitro::flexible_type *a4, const nitro::flexible_type *a5, const nitro::flexible_type *a6)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a4 + 8) == 4)
  {
    if (*((unsigned char *)a5 + 8) == 4)
    {
      nitro::nitro_builtins::convert_slice_array_to_list(a2, (uint64_t *)&v58);
      uint64_t v8 = *(void *)a4;
      int32x4_t v56 = 0;
      uint64_t v57 = 0;
      std::string::size_type v55 = 0;
      std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&v55, *(void **)(v8 + 8), *(void **)(v8 + 16), (uint64_t)(*(void *)(v8 + 16) - *(void *)(v8 + 8)) >> 4);
      uint64_t v9 = *(void *)a5;
      unint64_t v53 = 0;
      uint64_t v54 = 0;
      long long __p = 0;
      std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&__p, *(void **)(v9 + 8), *(void **)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 4);
      uint64_t v10 = v55;
      if (v56 != v55)
      {
        unint64_t v11 = 0;
        do
        {
          unint64_t v14 = v10[2 * v11];
          unint64_t v50 = (v59 - (uint64_t)v58) >> 4;
          unint64_t v51 = v14;
          if (v14 >= v50)
          {
            std::string::size_type v60 = &v51;
            std::string::size_type v61 = &v50;
            nitro::nitro_builtins::SliceMask(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_2::operator()();
          }
          uint64_t v15 = *(void *)(*((void *)v58 + 2 * v14) + 8);
          switch(*(unsigned char *)(v15 + 8))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v15, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_8;
              }
              atomic_ullong *volatile v16 = *(atomic_ullong *volatile *)v15;
              if (!*(void *)v15) {
                goto LABEL_7;
              }
              if (*((char *)v16 + 31) < 0) {
                operator delete((void *)v16[1]);
              }
              atomic_ullong *volatile v12 = v16;
              uint64_t v13 = 0x1012C404EF22A49;
              goto LABEL_6;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v15, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_8;
              }
              atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)v15;
              if (!*(void *)v15) {
                goto LABEL_7;
              }
              int v22 = (void *)v21[1];
              if (v22)
              {
                v21[2] = (atomic_ullong)v22;
                operator delete(v22);
              }
              atomic_ullong *volatile v12 = v21;
              uint64_t v13 = 0x1080C409938AC02;
              goto LABEL_6;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v15, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_8;
              }
              atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)v15;
              if (!*(void *)v15) {
                goto LABEL_7;
              }
              atomic_ullong v18 = v17[1];
              if (!v18) {
                goto LABEL_36;
              }
              uint64_t v19 = v17[2];
              uint64_t v20 = (void *)v17[1];
              if (v19 != v18)
              {
                do
                {
                  v19 -= 16;
                  std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v17 + 3), v19);
                }
                while (v19 != v18);
                uint64_t v20 = (void *)v17[1];
              }
              v17[2] = v18;
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v15, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_8;
              }
              atomic_ullong *volatile v17 = *(atomic_ullong *volatile *)v15;
              if (!*(void *)v15) {
                goto LABEL_7;
              }
              atomic_ullong v23 = v17[1];
              if (!v23) {
                goto LABEL_36;
              }
              uint64_t v24 = v17[2];
              int64_t v25 = (void *)v17[1];
              if (v24 != v23)
              {
                do
                  uint64_t v24 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v24 - 32);
                while (v24 != v23);
                int64_t v25 = (void *)v17[1];
              }
              v17[2] = v23;
              uint64_t v20 = v25;
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v15, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_8;
              }
              atomic_ullong *volatile v26 = *(atomic_ullong *volatile *)v15;
              if (!*(void *)v15) {
                goto LABEL_7;
              }
              unint64_t v27 = (void *)v26[7];
              if (v27)
              {
                v26[8] = (atomic_ullong)v27;
                operator delete(v27);
              }
              uint64_t v28 = (void *)v26[4];
              if (v28)
              {
                v26[5] = (atomic_ullong)v28;
                operator delete(v28);
              }
              uint64_t v29 = (std::__shared_weak_count *)v26[3];
              if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
              atomic_ullong *volatile v12 = v26;
              uint64_t v13 = 0x10B0C4002311774;
              goto LABEL_6;
            default:
              goto LABEL_8;
          }
          operator delete(v20);
LABEL_36:
          atomic_ullong *volatile v12 = v17;
          uint64_t v13 = 0x1020C405E66F15BLL;
LABEL_6:
          MEMORY[0x192FF16B0](v12, v13);
LABEL_7:
          *(void *)uint64_t v15 = 0;
LABEL_8:
          ++v11;
          *(unsigned char *)(v15 + 8) = 0;
          *(void *)uint64_t v15 = 0;
          uint64_t v10 = v55;
        }
        while (v11 < (v56 - (unsigned char *)v55) >> 4);
      }
      size_t v30 = __p;
      if (v53 != __p)
      {
        unint64_t v31 = 0;
        do
        {
          unint64_t v34 = v30[2 * v31];
          unint64_t v50 = (v59 - (uint64_t)v58) >> 4;
          unint64_t v51 = v34;
          if (v34 >= v50)
          {
            std::string::size_type v60 = &v51;
            std::string::size_type v61 = &v50;
            nitro::nitro_builtins::SliceMask(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_3::operator()();
          }
          uint64_t v35 = *(void *)(*((void *)v58 + 2 * v34) + 8);
          switch(*(unsigned char *)(v35 + 24))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)(v35 + 16), 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_51;
              }
              uint64_t v36 = *(void *)(v35 + 16);
              if (!v36) {
                goto LABEL_50;
              }
              if (*(char *)(v36 + 31) < 0) {
                operator delete(*(void **)(v36 + 8));
              }
              int v32 = (void *)v36;
              uint64_t v33 = 0x1012C404EF22A49;
              goto LABEL_49;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)(v35 + 16), 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_51;
              }
              unint64_t v41 = *(void **)(v35 + 16);
              if (!v41) {
                goto LABEL_50;
              }
              int64_t v42 = (void *)v41[1];
              if (v42)
              {
                v41[2] = v42;
                operator delete(v42);
              }
              int v32 = v41;
              uint64_t v33 = 0x1080C409938AC02;
              goto LABEL_49;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)(v35 + 16), 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_51;
              }
              unint64_t v37 = *(void **)(v35 + 16);
              if (!v37) {
                goto LABEL_50;
              }
              uint64_t v38 = v37[1];
              if (!v38) {
                goto LABEL_79;
              }
              uint64_t v39 = v37[2];
              std::string::size_type v40 = (void *)v37[1];
              if (v39 != v38)
              {
                do
                {
                  v39 -= 16;
                  std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v37 + 3), v39);
                }
                while (v39 != v38);
                std::string::size_type v40 = (void *)v37[1];
              }
              v37[2] = v38;
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)(v35 + 16), 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_51;
              }
              unint64_t v37 = *(void **)(v35 + 16);
              if (!v37) {
                goto LABEL_50;
              }
              uint64_t v43 = v37[1];
              if (!v43) {
                goto LABEL_79;
              }
              uint64_t v44 = v37[2];
              long long v45 = (void *)v37[1];
              if (v44 != v43)
              {
                do
                  uint64_t v44 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v44 - 32);
                while (v44 != v43);
                long long v45 = (void *)v37[1];
              }
              v37[2] = v43;
              std::string::size_type v40 = v45;
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)(v35 + 16), 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_51;
              }
              uint64_t v46 = *(void **)(v35 + 16);
              if (!v46) {
                goto LABEL_50;
              }
              uint64_t v47 = (void *)v46[7];
              if (v47)
              {
                v46[8] = v47;
                operator delete(v47);
              }
              unint64_t v48 = (void *)v46[4];
              if (v48)
              {
                v46[5] = v48;
                operator delete(v48);
              }
              uint64_t v49 = (std::__shared_weak_count *)v46[3];
              if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
              int v32 = v46;
              uint64_t v33 = 0x10B0C4002311774;
              goto LABEL_49;
            default:
              goto LABEL_51;
          }
          operator delete(v40);
LABEL_79:
          int v32 = v37;
          uint64_t v33 = 0x1020C405E66F15BLL;
LABEL_49:
          MEMORY[0x192FF16B0](v32, v33);
LABEL_50:
          *(void *)(v35 + 16) = 0;
LABEL_51:
          *(unsigned char *)(v35 + 24) = 0;
          *(void *)(v35 + 16) = 0x7FFFFFFFLL;
          ++v31;
          size_t v30 = __p;
        }
        while (v31 < (v53 - (unsigned char *)__p) >> 4);
      }
      std::string::size_type v60 = 0;
      LOBYTE(v61) = 4;
      operator new();
    }
    nitro::nitro_builtins::SliceMask(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_1::operator()();
  }
  nitro::nitro_builtins::SliceMask(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()();
}

void sub_19263D0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (atomic_fetch_add(v22, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    if (a22)
    {
      uint64_t v24 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(a22);
      MEMORY[0x192FF16B0](v24, 0x1020C405E66F15BLL);
    }
  }
  std::vector<nitro::flexible_type>::~vector[abi:ne180100](&a13);
  std::vector<nitro::flexible_type>::~vector[abi:ne180100](&a16);
  std::vector<nitro::flexible_type>::~vector[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void *std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void nitro::nitro_builtins::Gather(nitro::nitro_builtins *this, const nitro::flexible_type *a2, const nitro::flexible_type *a3, const nitro::flexible_type *a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  nitro::flexible_type_converter<int>::get((uint64_t)&__dst, (unsigned __int8 *)this);
  long long __dst = 0uLL;
  uint64_t v9 = 0;
  long long __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  nitro::ndarray<int>::ndarray((uint64_t)&v4);
}

void sub_19263EF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  unint64_t v51 = *(void **)(v49 - 216);
  if (v51)
  {
    *(void *)(v49 - 208) = v51;
    operator delete(v51);
  }
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v49 - 192));
  if (a32) {
    operator delete(a32);
  }
  nitro::ndarray<float>::~ndarray(&a35);
  _Unwind_Resume(a1);
}

void sub_19263F8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  if (__p)
  {
    a45 = (uint64_t)__p;
    operator delete(__p);
  }
  nitro::ndarray<unsigned char>::concat((uint64_t)&__p, (uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_19263FCBC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19263FCD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::QuantizeGather(nitro::nitro_builtins *this, const nitro::flexible_type *a2, const nitro::flexible_type *a3, const nitro::flexible_type *a4, const nitro::flexible_type *a5)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  nitro::nitro_builtins::Gather(this, a2, a3, a4);
}

void sub_192640B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  MEMORY[0x192FF16B0](v47, 0x10B0C4002311774);
  if (atomic_fetch_add(0, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    if (*(void *)a18)
    {
      unint64_t v50 = std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(*(void **)a18);
      MEMORY[0x192FF16B0](v50, 0x10B0C4002311774);
    }
    *(void *)a18 = 0;
  }
  *(void *)a18 = 0;
  *(unsigned char *)(a18 + 8) = 0;
  nitro::ndarray<float>::~ndarray(&a32);
  if (__p)
  {
    a42 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a44) {
    operator delete(a44);
  }
  nitro::ndarray<float>::~ndarray((void *)(v48 - 168));
  nitro::ndarray<float>::~ndarray(&a47);
  _Unwind_Resume(a1);
}

void *std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void nitro::nitro_builtins::Stack(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)this;
  int v6 = nitro::flexible_type_converter<int>::get((uint64_t)&__dst, (unsigned __int8 *)a2);
  uint64_t v7 = *(uint64_t **)(v5 + 8);
  uint64_t v8 = *(uint64_t **)(v5 + 16);
  uint64_t v9 = (char *)v8 - (char *)v7;
  if (v8 == v7) {
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst);
  }
  int v10 = *((unsigned __int8 *)v7 + 8);
  if (!*((unsigned char *)v7 + 8))
  {
    atomic_ullong *volatile v17 = (char *)operator new(8uLL);
    std::string::size_type v76 = 0;
    std::string::size_type v77 = v17;
    *(void *)atomic_ullong *volatile v17 = v9 >> 4;
    unint64_t v78 = v17 + 8;
    unint64_t v79 = v17 + 8;
    uint64_t v74 = 0;
    unint64_t v75 = 0;
    if ((v9 & 0x8000000000000000) == 0)
    {
      uint64_t v74 = operator new((unint64_t)v9 >> 2);
      std::string::size_type v76 = (char *)v74 + 4 * (v9 >> 4);
      bzero(v74, (unint64_t)v9 >> 2);
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      unint64_t v75 = (char *)v74 + ((unint64_t)v9 >> 2);
      do
      {
        int v20 = nitro::flexible_type_converter<int>::get((uint64_t)&__dst, (unsigned __int8 *)(*(void *)(v5 + 8) + v18));
        atomic_ullong *volatile v21 = v74;
        *((_DWORD *)v74 + v19++) = v20;
        v18 += 16;
      }
      while (v19 < (v75 - v21) >> 2);
      nitro::ndarray<int>::ndarray((uint64_t)&v69);
    }
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v6;
  if (v10 != 1)
  {
    if (v10 == 9)
    {
      uint64_t v12 = *v7;
      std::string::size_type v77 = 0;
      unint64_t v78 = 0;
      unint64_t v79 = 0;
      unint64_t v14 = *(unsigned char **)(v12 + 32);
      uint64_t v13 = *(unsigned char **)(v12 + 40);
      int64_t v15 = v13 - v14;
      if (v13 == v14)
      {
        atomic_ullong *volatile v16 = 0;
      }
      else
      {
        if (v15 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        atomic_ullong *volatile v16 = (char *)operator new(v13 - v14);
        std::string::size_type v77 = v16;
        unint64_t v79 = &v16[8 * (v15 >> 3)];
        memcpy(v16, v14, v15);
        unint64_t v78 = v79;
      }
      __dst.__r_.__value_.__r.__words[0] = v9 >> 4;
      std::vector<unsigned long>::insert((char **)&v77, (uint64_t)&v16[8 * v11], &__dst);
      nitro::ndarray_container::init_from_shape(*(_DWORD *)(**(void **)(v5 + 8) + 8), (uint64_t **)&v77, (uint64_t)&__dst);
      unint64_t v75 = 0;
      std::string::size_type v76 = 0;
      uint64_t v74 = 0;
      uint64_t v54 = v78 - (unsigned char *)v77;
      if (v78 != v77)
      {
        if ((unint64_t)v54 >= 0x5555555555555551) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v55 = v54 >> 3;
        int32x4_t v56 = (char *)operator new(24 * (v54 >> 3));
        uint64_t v57 = &v56[24 * v55];
        uint64_t v74 = v56;
        std::string::size_type v76 = v57;
        do
        {
          *(void *)int32x4_t v56 = -1;
          *((void *)v56 + 1) = -1;
          *((void *)v56 + 2) = 1;
          v56 += 24;
        }
        while (v56 != v57);
        unint64_t v75 = v57;
      }
      if (*(void *)(v5 + 16) != *(void *)(v5 + 8))
      {
        uint64_t v58 = 0;
        unint64_t v59 = 0;
        do
        {
          v69.__r_.__value_.__r.__words[0] = v59;
          if ((v59 & 0x8000000000000000) != 0) {
            nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
          }
          std::string::size_type v60 = (char *)v74 + 24 * (int)v11;
          *(void *)std::string::size_type v60 = v59;
          *(_OWORD *)(v60 + 8) = xmmword_192DC8DB0;
          nitro::ndarray_container::slice((uint64_t)&__dst, (long long **)&v74, (uint64_t)&v69, (__n128)xmmword_192DC8DB0);
          nitro::ndarray_container::assign((nitro::ndarray_container *)&v69, (const nitro::ndarray_container *)(*(void *)(*(void *)(v5 + 8) + v58) + 8));
          if (v72)
          {
            std::string::size_type v73 = v72;
            operator delete(v72);
          }
          if (v70)
          {
            uint64_t v71 = v70;
            operator delete(v70);
          }
          std::string::size_type v61 = (std::__shared_weak_count *)v69.__r_.__value_.__r.__words[2];
          if (v69.__r_.__value_.__r.__words[2])
          {
            if (!atomic_fetch_add((atomic_ullong *volatile)(v69.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          ++v59;
          v58 += 16;
        }
        while (v59 < (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 4);
      }
      *(void *)a3 = 0;
      *(unsigned char *)(a3 + 8) = 9;
      operator new();
    }
    if (*((int *)global_logger() + 169) <= 6)
    {
      int64_t v65 = (file_logger *)global_logger();
      started = file_logger::start_stream(v65, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "Stack", 808, 1);
      file_logger::operator<<((pthread_key_t *)started, "Stacking of invalid types");
    }
    nitro::nitro_builtins::Stack(nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()();
  }
  int v22 = (char *)operator new(8uLL);
  uint64_t v74 = v22;
  *(void *)int v22 = v9 >> 4;
  unint64_t v75 = v22 + 8;
  std::string::size_type v76 = v22 + 8;
  __dst.__r_.__value_.__r.__words[0] = v9 >> 4;
  std::vector<unsigned long>::insert((char **)&v74, (uint64_t)&v22[8 * v11], &__dst);
  uint64_t v24 = *(void *)(v5 + 8);
  uint64_t v23 = *(void *)(v5 + 16);
  unint64_t v25 = v23 - v24;
  if (v23 == v24)
  {
LABEL_60:
    std::string::size_type v77 = 0;
    unint64_t v78 = 0;
    unint64_t v79 = 0;
    nitro::ndarray<float>::ndarray((uint64_t)&v69);
  }
  if ((v25 & 0x8000000000000000) != 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v67 = (char *)operator new(v25 >> 2);
  bzero(v67, v25 >> 2);
  unint64_t v26 = 0;
  uint64_t v68 = &v67[v25 >> 2];
  while (2)
  {
    uint64_t v29 = (unsigned char *)(*(void *)(v5 + 8) + 16 * v26);
    double v27 = 0.0;
    switch(v29[8])
    {
      case 1:
        double v27 = *(double *)v29;
        goto LABEL_17;
      case 2:
        double v30 = *(double *)v29;
        unint64_t v31 = (const char **)(*(void *)v29 + 8);
        __idx[0] = 0;
        int v32 = (const char *)v31;
        if (*(char *)(*(void *)&v30 + 31) < 0) {
          int v32 = *v31;
        }
        size_t v33 = strlen(v32);
        if (v33 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v34 = v33;
        if (v33 >= 0x17)
        {
          uint64_t v50 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v33 | 7) != 0x17) {
            uint64_t v50 = v33 | 7;
          }
          uint64_t v51 = v50 + 1;
          p_dst = (std::string *)operator new(v50 + 1);
          __dst.__r_.__value_.__l.__size_ = v34;
          __dst.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v33;
          p_dst = &__dst;
          if (!v33) {
            goto LABEL_50;
          }
        }
        memmove(p_dst, v32, v34);
LABEL_50:
        p_dst->__r_.__value_.__s.__data_[v34] = 0;
        double v52 = std::stod(&__dst, __idx);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (*(char *)(*(void *)&v30 + 31) < 0)
        {
          if (__idx[0] != *(void *)(*(void *)&v30 + 16))
          {
LABEL_81:
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            uint64_t v63 = std::string::append(&v69, " cannot be interpreted as a float");
            long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v64;
            v63->__r_.__value_.__l.__size_ = 0;
            v63->__r_.__value_.__r.__words[2] = 0;
            v63->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__dst);
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
        else if (__idx[0] != *(unsigned __int8 *)(*(void *)&v30 + 31))
        {
          goto LABEL_81;
        }
        float v53 = v52;
        double v27 = v53;
LABEL_17:
        float v28 = v27;
        *(float *)&v67[4 * v26++] = v28;
        if (v26 < (v68 - v67) >> 2) {
          continue;
        }
        goto LABEL_60;
      case 3:
        double v41 = *(double *)v29;
        memset(&__dst, 0, sizeof(__dst));
        uint64_t v43 = *(unsigned char **)(*(void *)&v41 + 8);
        int64_t v42 = *(unsigned char **)(*(void *)&v41 + 16);
        int64_t v44 = v42 - v43;
        if (v42 == v43)
        {
          long long v45 = 0;
        }
        else
        {
          if (v44 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          long long v45 = operator new(v42 - v43);
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
          __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v45 + 8 * (v44 >> 3);
          memcpy(v45, v43, v44);
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v45 + 8 * (v44 >> 3);
        }
        nitro::flexible_type_fail(0);
        if (v45) {
          operator delete(v45);
        }
        goto LABEL_17;
      case 4:
        double v37 = *(double *)v29;
        unint64_t v78 = 0;
        unint64_t v79 = 0;
        std::string::size_type v77 = 0;
        std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&v77, *(void **)(*(void *)&v37 + 8), *(void **)(*(void *)&v37 + 16), (uint64_t)(*(void *)(*(void *)&v37 + 16) - *(void *)(*(void *)&v37 + 8)) >> 4);
        nitro::flexible_type_fail(0);
        uint64_t v38 = (char *)v77;
        if (v77)
        {
          uint64_t v39 = (uint64_t)v78;
          std::string::size_type v40 = v77;
          if (v78 != v77)
          {
            do
            {
              v39 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v79, v39);
            }
            while ((char *)v39 != v38);
            std::string::size_type v40 = v77;
          }
          unint64_t v78 = v38;
          operator delete(v40);
        }
        goto LABEL_17;
      case 5:
        double v46 = *(double *)v29;
        memset(&__dst, 0, sizeof(__dst));
        std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__dst, *(char **)(*(void *)&v46 + 8), *(char **)(*(void *)&v46 + 16), (uint64_t)(*(void *)(*(void *)&v46 + 16) - *(void *)(*(void *)&v46 + 8)) >> 5);
        nitro::flexible_type_fail(0);
        std::string::size_type v47 = __dst.__r_.__value_.__r.__words[0];
        if (__dst.__r_.__value_.__r.__words[0])
        {
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
          uint64_t v49 = (void *)__dst.__r_.__value_.__r.__words[0];
          if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
          {
            do
              std::string::size_type size = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(size - 32);
            while (size != v47);
            uint64_t v49 = (void *)__dst.__r_.__value_.__r.__words[0];
          }
          __dst.__r_.__value_.__l.__size_ = v47;
          operator delete(v49);
        }
        goto LABEL_17;
      case 6:
      case 8:
        __break(1u);
        return;
      case 7:
        goto LABEL_17;
      case 9:
        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(*(void *)v29 + 8));
        nitro::flexible_type_fail(0);
        if (v83)
        {
          unint64_t v84 = v83;
          operator delete(v83);
        }
        if (__p)
        {
          std::string::size_type v82 = __p;
          operator delete(__p);
        }
        uint64_t v36 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
        if (__dst.__r_.__value_.__r.__words[2]
          && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
        goto LABEL_17;
      default:
        double v27 = (double)*(uint64_t *)v29;
        goto LABEL_17;
    }
  }
}

void sub_192641D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (__p) {
    operator delete(__p);
  }
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a34);
  if (a31) {
    operator delete(a31);
  }
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::TopK(nitro::nitro_builtins *this, const nitro::flexible_type *a2, const nitro::flexible_type *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v21, (const nitro::ndarray_container *)(*(void *)this + 8));
  int v6 = nitro::flexible_type_converter<int>::get((uint64_t)&v28, (unsigned __int8 *)a2);
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  int v20 = 0;
  uint64_t v7 = (const void *)__p;
  int64_t v8 = *((void *)&__p + 1) - __p;
  if (*((void *)&__p + 1) == (void)__p)
  {
    uint64_t v9 = 0;
    int v10 = 0;
  }
  else
  {
    if (v8 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(*((void *)&__p + 1) - __p);
    int v10 = &v9[8 * (v8 >> 3)];
    uint64_t v18 = v9;
    int v20 = v10;
    memcpy(v9, v7, v8);
    unint64_t v19 = v10;
  }
  if (v10 - v9 == 8)
  {
    LOBYTE(v29) = 0;
    uint64_t v28 = v6;
    nitro::nitro_builtins::TopK_1d(this, (const nitro::flexible_type *)&v28, v5);
  }
  nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(void *)this + 8), (uint64_t)&v28);
  int v21 = v28;
  long long v11 = v29;
  long long v29 = 0uLL;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  long long v22 = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  long long __p = v30;
  uint64_t v24 = v31;
  uint64_t v31 = 0;
  long long v30 = 0uLL;
  uint64_t v13 = v25[0];
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
    uint64_t v13 = (void *)v30;
  }
  *(_OWORD *)unint64_t v25 = v32;
  uint64_t v14 = v33;
  uint64_t v33 = 0;
  long long v32 = 0uLL;
  uint64_t v26 = v14;
  uint64_t v27 = v34;
  if (v13)
  {
    *((void *)&v30 + 1) = v13;
    operator delete(v13);
  }
  int64_t v15 = (std::__shared_weak_count *)*((void *)&v29 + 1);
  if (*((void *)&v29 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v16, (const nitro::ndarray_container *)&v21);
  int v17 = v6;
  nitro::ndarray_container::visit<nitro::nitro_builtins::TopK(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(&v21, (uint64_t)v16);
}

void sub_1926425EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  if (atomic_fetch_add(0, 0xFFFFFFFFFFFFFFFFLL) == 1) {
    nitro::nitro_builtins::TopK(v23);
  }
  *(void *)uint64_t v23 = 0;
  *(unsigned char *)(v23 + 8) = 0;
  std::vector<nitro::flexible_type>::~vector[abi:ne180100]((void **)(v24 - 160));
  if (__p) {
    operator delete(__p);
  }
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a23);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Reshape(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v75, (const nitro::ndarray_container *)(*(void *)this + 8));
  if (!((uint64_t (*)(nitro::ndarray_container *))nitro::ndarray_container::is_contiguous)(v6)) {
    goto LABEL_14;
  }
  uint64_t v7 = *((void *)&v79 + 1) - v79;
  if (*((void *)&v79 + 1) != (void)v79)
  {
    if (!*(void *)v79) {
      goto LABEL_14;
    }
    if ((unint64_t)v7 >= 0x10)
    {
      unint64_t v8 = v7 >> 3;
      uint64_t v9 = 2;
      if (v8 > 2) {
        uint64_t v9 = v8;
      }
      unint64_t v10 = *(void *)(v79 + 8);
      if (!v10 || *(void *)v79 < v10) {
        goto LABEL_14;
      }
      uint64_t v11 = 0;
      uint64_t v12 = v9 - 2;
      do
      {
        uint64_t v13 = v11;
        if (v12 == v11) {
          break;
        }
        uint64_t v14 = v79 + 8 * v11;
        unint64_t v15 = *(void *)(v14 + 16);
        if (!v15) {
          break;
        }
        unint64_t v16 = *(void *)(v14 + 8);
        uint64_t v11 = v13 + 1;
      }
      while (v16 >= v15);
      if (v13 + 2 < v8)
      {
LABEL_14:
        nitro::ndarray_container::canonicalize((nitro::ndarray_container *)&v75, (uint64_t)&v68);
        int v75 = (int)v68;
        long long v17 = v69;
        long long v69 = 0uLL;
        uint64_t v18 = (std::__shared_weak_count *)*((void *)&v76 + 1);
        long long v76 = v17;
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        if ((void)v77)
        {
          *((void *)&v77 + 1) = v77;
          operator delete((void *)v77);
        }
        long long v77 = *(_OWORD *)__p;
        uint64_t v78 = v71;
        __p[1] = 0;
        uint64_t v71 = 0;
        __p[0] = 0;
        unint64_t v19 = (void *)v79;
        if ((void)v79)
        {
          *((void *)&v79 + 1) = v79;
          operator delete((void *)v79);
          unint64_t v19 = __p[0];
        }
        long long v79 = v72;
        uint64_t v20 = v73;
        uint64_t v73 = 0;
        long long v72 = 0uLL;
        uint64_t v80 = v20;
        uint64_t v81 = v74;
        if (v19)
        {
          __p[1] = v19;
          operator delete(v19);
        }
        int v21 = (std::__shared_weak_count *)*((void *)&v69 + 1);
        if (*((void *)&v69 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
  }
  nitro::flexible_type_converter<std::vector<int>>::get((unsigned __int8 *)a2, &v67);
  std::vector<int>::pointer begin = v67.__begin_;
  std::vector<int>::pointer end = v67.__end_;
  int64_t v65 = 0;
  uint64_t v66 = 0;
  long long v64 = 0;
  int64_t v24 = (char *)v67.__end_ - (char *)v67.__begin_;
  if (v67.__end_ == v67.__begin_)
  {
    uint64_t v26 = 0;
  }
  else
  {
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v25 = (char *)operator new(2 * v24);
    uint64_t v26 = v25;
    long long v64 = v25;
    uint64_t v66 = &v25[8 * (v24 >> 2)];
    unint64_t v27 = v24 - 4;
    std::vector<int>::pointer v28 = begin;
    int64_t v24 = (int64_t)v25;
    if (v27 < 0x1C) {
      goto LABEL_61;
    }
    uint64_t v29 = (v27 >> 2) + 1;
    std::vector<int>::pointer v28 = &begin[v29 & 0x7FFFFFFFFFFFFFF8];
    int64_t v24 = (int64_t)&v25[8 * (v29 & 0x7FFFFFFFFFFFFFF8)];
    long long v30 = v25 + 32;
    std::vector<int>::pointer v31 = begin + 4;
    uint64_t v32 = v29 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v33 = *((_OWORD *)v31 - 1);
      *(void *)&long long v34 = (int)v33;
      *((void *)&v34 + 1) = SDWORD1(v33);
      long long v35 = v34;
      *(void *)&long long v34 = SDWORD2(v33);
      *((void *)&v34 + 1) = SHIDWORD(v33);
      long long v36 = v34;
      *(void *)&long long v34 = (int)*(_OWORD *)v31;
      *((void *)&v34 + 1) = (int)HIDWORD(*(void *)v31);
      long long v37 = v34;
      *(void *)&long long v34 = (int)*((void *)v31 + 1);
      *((void *)&v34 + 1) = (int)HIDWORD(*(_OWORD *)v31);
      *(v30 - 2) = v35;
      *(v30 - 1) = v36;
      *long long v30 = v37;
      v30[1] = v34;
      v30 += 4;
      v31 += 8;
      v32 -= 8;
    }
    while (v32);
    if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_61:
      do
      {
        uint64_t v38 = *v28++;
        *(void *)int64_t v24 = v38;
        v24 += 8;
      }
      while (v28 != end);
    }
    int64_t v65 = v24;
  }
  unint64_t v40 = *((void *)&v77 + 1);
  uint64_t v39 = v77;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  std::string::size_type v61 = 0;
  uint64_t v41 = *((void *)&v77 + 1) - v77;
  if (*((void *)&v77 + 1) == (void)v77)
  {
    uint64_t v43 = 0;
    long long v45 = 0;
    uint64_t v46 = v24 - (void)v26;
    if ((void *)v24 == v26) {
      goto LABEL_56;
    }
    goto LABEL_48;
  }
  if (v41 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  int64_t v42 = (int8x16_t *)operator new(*((void *)&v77 + 1) - v77);
  uint64_t v43 = (char *)v42;
  std::string::size_type v61 = v42;
  uint64_t v63 = &v42->i8[8 * (v41 >> 3)];
  unint64_t v44 = v41 - 8;
  if ((unint64_t)(v41 - 8) >= 0x88)
  {
    if ((unint64_t)v42 >= v40
      || (long long v45 = (uint64_t *)v42,
          v40 - (v44 & 0xFFFFFFFFFFFFFFF8) - 8 >= (unint64_t)&v42->u64[1] + (v44 & 0xFFFFFFFFFFFFFFF8)))
    {
      uint64_t v47 = (v44 >> 3) + 1;
      uint64_t v48 = v47 & 0x3FFFFFFFFFFFFFFCLL;
      unint64_t v49 = v40 - v48 * 8;
      long long v45 = &v42->i64[v48];
      uint64_t v50 = v42 + 1;
      uint64_t v51 = (int8x16_t *)(v40 - 16);
      uint64_t v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        int8x16_t v53 = vextq_s8(v51[-1], v51[-1], 8uLL);
        v50[-1] = vextq_s8(*v51, *v51, 8uLL);
        int8x16_t *v50 = v53;
        v50 += 2;
        v51 -= 2;
        v52 -= 4;
      }
      while (v52);
      unint64_t v40 = v49;
      if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_47:
        uint64_t v62 = v45;
        uint64_t v46 = v24 - (void)v26;
        if ((void *)v24 == v26) {
          goto LABEL_56;
        }
LABEL_48:
        uint64_t v55 = v46 >> 3;
        unint64_t v56 = ((char *)v45 - v43) >> 3;
        BOOL v57 = v46 >> 3 != 0;
        unint64_t v58 = (v46 >> 3) - 1;
        if (v58 == 0 || !v57) {
          uint64_t v55 = 1;
        }
        do
        {
          if (!*v26)
          {
            unint64_t v59 = v56;
            unint64_t v60 = v58;
            if (v58 >= v56)
            {
              uint64_t v68 = &v60;
              *(void *)&long long v69 = &v59;
              nitro::nitro_builtins::Reshape(nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()();
            }
            void *v26 = *(void *)&v43[8 * v58];
          }
          --v58;
          ++v26;
          --v55;
        }
        while (v55);
LABEL_56:
        nitro::ndarray_container::reshape(&v75, (int64x2_t **)&v64, (uint64_t)&v68);
        *(void *)a3 = 0;
        *(unsigned char *)(a3 + 8) = 9;
        operator new();
      }
    }
  }
  else
  {
    long long v45 = (uint64_t *)v42;
  }
  do
  {
    uint64_t v54 = *(void *)(v40 - 8);
    v40 -= 8;
    *v45++ = v54;
  }
  while (v40 != v39);
  goto LABEL_47;
}

void sub_192642D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21)
{
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v21 - 160));
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Softmax(nitro::nitro_builtins *this, const nitro::flexible_type *a2)
{
  nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(void *)this + 8), (uint64_t)&v2);
  nitro::ndarray_container::copy((nitro::ndarray_container *)&v2);
}

void sub_19264381C(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10B0C4002311774);
  if (atomic_fetch_add(0, 0xFFFFFFFFFFFFFFFFLL) == 1) {
    nitro::nitro_builtins::Range(v2);
  }
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 0;
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v3 - 184));
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::ReverseSequence(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, const nitro::flexible_type *a4@<X3>, uint64_t a5@<X8>)
{
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v170, (const nitro::ndarray_container *)(*(void *)this + 8));
  if (*(_DWORD *)(*(void *)a2 + 8) == 3) {
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v164, (const nitro::ndarray_container *)(*(void *)a2 + 8));
  }
  else {
    _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_((_DWORD *)(*(void *)a2 + 8), (uint64_t)&v164);
  }
  unint64_t v10 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v197, (uint64_t)&v164);
  nitro::ndarray<int>::get_elements_copy(v10, (uint64_t *)&v168);
  if (v201)
  {
    uint64_t v202 = v201;
    operator delete(v201);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  uint64_t v11 = v198;
  if (v198 && !atomic_fetch_add(&v198->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v166[0])
  {
    v166[1] = v166[0];
    operator delete(v166[0]);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v165 + 1);
  if (*((void *)&v165 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v165 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  int v13 = nitro::flexible_type_converter<int>::get((uint64_t)&v164, (unsigned __int8 *)a3);
  int v14 = nitro::flexible_type_converter<int>::get((uint64_t)&v164, (unsigned __int8 *)a4);
  uint64_t v161 = 0;
  unint64_t v162 = 0;
  uint64_t v163 = 0;
  unint64_t v15 = v171;
  int64_t v16 = v172 - (unsigned char *)v171;
  if (v172 == v171)
  {
    uint64_t v154 = 0;
    uint64_t v155 = 0;
    char v153 = 0;
  }
  else
  {
    if (v16 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v161 = operator new(v172 - (unsigned char *)v171);
    uint64_t v163 = (char *)v161 + 8 * (v16 >> 3);
    memcpy(v161, v15, v16);
    unint64_t v162 = v163;
    char v153 = operator new(v16);
    uint64_t v155 = (char *)v153 + 8 * (v16 >> 3);
    memcpy(v153, v161, v16);
    uint64_t v154 = v155;
  }
  uint64_t v156 = v14;
  uint64_t v157 = 0;
  uint64_t v158 = 0;
  unint64_t v159 = 0;
  long long v17 = v168;
  int64_t v18 = v169 - (unsigned char *)v168;
  if (v169 != v168)
  {
    if (v18 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v157 = operator new(v169 - (unsigned char *)v168);
    unint64_t v159 = (char *)v157 + 4 * (v18 >> 2);
    memcpy(v157, v17, v18);
    uint64_t v158 = v159;
  }
  uint64_t v160 = v13;
  switch(v170[0])
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v173, (uint64_t)v170);
      nitro::ndarray<int>::init_from_shape((uint64_t **)&v153, &v197);
      unint64_t v19 = v153;
      unint64_t v195 = 0;
      uint64_t v196 = 0;
      std::string::size_type v194 = 0;
      uint64_t v20 = v154 - (unsigned char *)v153;
      if (v154 == v153)
      {
        uint64_t v191 = 0;
        uint64_t v192 = 0;
        uint64_t v193 = 0;
      }
      else
      {
        if ((unint64_t)v20 > 0x5555555555555550) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = v20 >> 3;
        size_t v22 = 24 * (v20 >> 3);
        uint64_t v23 = (long long *)operator new(v22);
        int64_t v24 = (long long *)((char *)v23 + 24 * v21);
        std::string::size_type v194 = v23;
        uint64_t v196 = v24;
        do
        {
          *(void *)uint64_t v23 = -1;
          *((void *)v23 + 1) = -1;
          *((void *)v23 + 2) = 1;
          uint64_t v23 = (long long *)((char *)v23 + 24);
        }
        while (v23 != v24);
        unint64_t v195 = v24;
        unint64_t v25 = (long long *)operator new(v22);
        uint64_t v26 = (long long *)((char *)v25 + 24 * v21);
        uint64_t v191 = v25;
        uint64_t v193 = v26;
        do
        {
          *(void *)unint64_t v25 = -1;
          *((void *)v25 + 1) = -1;
          *((void *)v25 + 2) = 1;
          unint64_t v25 = (long long *)((char *)v25 + 24);
        }
        while (v25 != v26);
        uint64_t v192 = v26;
      }
      uint64_t v101 = v156;
      uint64_t v179 = (uint64_t **)v19[v156];
      v203[0] = (v158 - (unsigned char *)v157) >> 2;
      if (v179 != (uint64_t **)v203[0])
      {
        uint64_t v185 = (uint64_t *)&v179;
        uint64_t v186 = (std::__shared_weak_count *)v203;
        _ZZZN5nitro14nitro_builtins15ReverseSequenceERKNS_13flexible_typeES3_S3_S3_ENK3__0clINS_7ndarrayIiEEEEDaT_ENKUlvE_clEv();
      }
      if (!v179) {
        goto LABEL_200;
      }
      unint64_t v102 = 0;
      __n128 v103 = (__n128)xmmword_192DC8DB0;
      while (1)
      {
        uint64_t v104 = 24 * v101;
        *(void *)((char *)v194 + v104) = v102;
        *(void *)((char *)v191 + v104) = v102;
        uint64_t v105 = (int *)v157;
        if (*((_DWORD *)v157 + v102))
        {
          unint64_t v106 = 0;
          uint64_t v107 = -1;
          while (1)
          {
            uint64_t v185 = (uint64_t *)v106;
            if ((v106 & 0x8000000000000000) != 0)
            {
              uint64_t v179 = &v185;
              nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
            }
            uint64_t v110 = v160;
            uint64_t v111 = (char *)v194 + 24 * v160;
            *(void *)uint64_t v111 = v106;
            *(_OWORD *)(v111 + 8) = xmmword_192DC8DB0;
            uint64_t v112 = v107 + v105[v102];
            uint64_t v185 = (uint64_t *)v112;
            if (v112 < 0)
            {
              uint64_t v179 = &v185;
              nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
            }
            uint64_t v113 = (char *)v191 + 24 * v110;
            *(void *)uint64_t v113 = v112;
            *(_OWORD *)(v113 + 8) = xmmword_192DC8DB0;
            nitro::ndarray<int>::slice(&v197, &v191, &v185, (__n128)xmmword_192DC8DB0);
            nitro::ndarray<int>::slice(&v173, &v194, &v179, v114);
            nitro::ndarray<int>::assign<int>((uint64_t *)&v185, (uint64_t *)&v179);
            if (v183)
            {
              uint64_t v184 = v183;
              operator delete(v183);
            }
            if (v181)
            {
              uint64_t v182 = v181;
              operator delete(v181);
            }
            uint64_t v115 = v180;
            if (v180)
            {
              if (!atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                break;
              }
            }
            unint64_t v116 = v189;
            if (v189) {
              goto LABEL_170;
            }
LABEL_171:
            if (v187)
            {
              int v188 = v187;
              operator delete(v187);
            }
            uint64_t v117 = v186;
            if (v186 && !atomic_fetch_add(&v186->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
            ++v106;
            uint64_t v105 = (int *)v157;
            int v108 = *((_DWORD *)v157 + v102);
            unint64_t v109 = v108;
            --v107;
            if (v106 >= v108)
            {
              unint64_t v19 = v153;
              goto LABEL_182;
            }
          }
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
          unint64_t v116 = v189;
          if (!v189) {
            goto LABEL_171;
          }
LABEL_170:
          std::vector<int> v190 = v116;
          operator delete(v116);
          goto LABEL_171;
        }
        int v108 = 0;
        unint64_t v109 = 0;
LABEL_182:
        uint64_t v118 = v160;
        unint64_t v119 = v19[v160];
        if (v119 > v109) {
          break;
        }
LABEL_157:
        ++v102;
        uint64_t v101 = v156;
        if (v102 >= v19[v156])
        {
LABEL_200:
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v164, &v197);
          goto LABEL_250;
        }
      }
      uint64_t v120 = (unint64_t *)v194 + 3 * v160;
      unint64_t *v120 = v109;
      v120[1] = v119;
      v120[2] = 1;
      uint64_t v179 = (uint64_t **)v119;
      v203[0] = v108;
      if (v119 <= v108)
      {
        uint64_t v185 = (uint64_t *)&v179;
        uint64_t v186 = (std::__shared_weak_count *)v203;
        nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
      }
      std::vector<int>::pointer v121 = (void *)v191 + 3 * v118;
      *std::vector<int>::pointer v121 = v108;
      v121[1] = v119;
      v121[2] = 1;
      nitro::ndarray<int>::slice(&v197, &v191, &v185, v103);
      nitro::ndarray<int>::slice(&v173, &v194, &v179, v122);
      nitro::ndarray<int>::assign<int>((uint64_t *)&v185, (uint64_t *)&v179);
      if (v183)
      {
        uint64_t v184 = v183;
        operator delete(v183);
      }
      if (v181)
      {
        uint64_t v182 = v181;
        operator delete(v181);
      }
      unint64_t v123 = v180;
      if (v180 && !atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
        uint64_t v124 = v189;
        if (!v189) {
          goto LABEL_192;
        }
      }
      else
      {
        uint64_t v124 = v189;
        if (!v189)
        {
LABEL_192:
          if (v187)
          {
            int v188 = v187;
            operator delete(v187);
          }
          std::vector<int>::pointer v125 = v186;
          if (v186 && !atomic_fetch_add(&v186->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
          unint64_t v19 = v153;
          goto LABEL_157;
        }
      }
      std::vector<int> v190 = v124;
      operator delete(v124);
      goto LABEL_192;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v173, (uint64_t)v170);
      nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)&v153, &v197);
      uint64_t v43 = v153;
      unint64_t v195 = 0;
      uint64_t v196 = 0;
      std::string::size_type v194 = 0;
      uint64_t v44 = v154 - (unsigned char *)v153;
      if (v154 == v153)
      {
        uint64_t v191 = 0;
        uint64_t v192 = 0;
        uint64_t v193 = 0;
      }
      else
      {
        if ((unint64_t)v44 > 0x5555555555555550) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v45 = v44 >> 3;
        size_t v46 = 24 * (v44 >> 3);
        uint64_t v47 = (long long *)operator new(v46);
        uint64_t v48 = (long long *)((char *)v47 + 24 * v45);
        std::string::size_type v194 = v47;
        uint64_t v196 = v48;
        do
        {
          *(void *)uint64_t v47 = -1;
          *((void *)v47 + 1) = -1;
          *((void *)v47 + 2) = 1;
          uint64_t v47 = (long long *)((char *)v47 + 24);
        }
        while (v47 != v48);
        unint64_t v195 = v48;
        unint64_t v49 = (long long *)operator new(v46);
        uint64_t v50 = (long long *)((char *)v49 + 24 * v45);
        uint64_t v191 = v49;
        uint64_t v193 = v50;
        do
        {
          *(void *)unint64_t v49 = -1;
          *((void *)v49 + 1) = -1;
          *((void *)v49 + 2) = 1;
          unint64_t v49 = (long long *)((char *)v49 + 24);
        }
        while (v49 != v50);
        uint64_t v192 = v50;
      }
      uint64_t v126 = v156;
      uint64_t v179 = (uint64_t **)v43[v156];
      v203[0] = (v158 - (unsigned char *)v157) >> 2;
      if (v179 != (uint64_t **)v203[0])
      {
        uint64_t v185 = (uint64_t *)&v179;
        uint64_t v186 = (std::__shared_weak_count *)v203;
        _ZZZN5nitro14nitro_builtins15ReverseSequenceERKNS_13flexible_typeES3_S3_S3_ENK3__0clINS_7ndarrayIhEEEEDaT_ENKUlvE_clEv();
      }
      if (!v179) {
        goto LABEL_249;
      }
      unint64_t v127 = 0;
      __n128 v128 = (__n128)xmmword_192DC8DB0;
      while (1)
      {
        uint64_t v129 = 24 * v126;
        *(void *)((char *)v194 + v129) = v127;
        *(void *)((char *)v191 + v129) = v127;
        long long v130 = (int *)v157;
        if (*((_DWORD *)v157 + v127))
        {
          unint64_t v131 = 0;
          uint64_t v132 = -1;
          while (1)
          {
            uint64_t v185 = (uint64_t *)v131;
            if ((v131 & 0x8000000000000000) != 0)
            {
              uint64_t v179 = &v185;
              nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
            }
            uint64_t v135 = v160;
            uint64_t v136 = (char *)v194 + 24 * v160;
            *(void *)uint64_t v136 = v131;
            *(_OWORD *)(v136 + 8) = xmmword_192DC8DB0;
            uint64_t v137 = v132 + v130[v127];
            uint64_t v185 = (uint64_t *)v137;
            if (v137 < 0)
            {
              uint64_t v179 = &v185;
              nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
            }
            uint64_t v138 = (char *)v191 + 24 * v135;
            *(void *)uint64_t v138 = v137;
            *(_OWORD *)(v138 + 8) = xmmword_192DC8DB0;
            nitro::ndarray<unsigned char>::slice(&v197, &v191, &v185, (__n128)xmmword_192DC8DB0);
            nitro::ndarray<unsigned char>::slice(&v173, &v194, &v179, v139);
            nitro::ndarray<unsigned char>::assign<unsigned char>(&v185, &v179);
            if (v183)
            {
              uint64_t v184 = v183;
              operator delete(v183);
            }
            if (v181)
            {
              uint64_t v182 = v181;
              operator delete(v181);
            }
            uint64_t v140 = v180;
            if (v180)
            {
              if (!atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                break;
              }
            }
            unint64_t v141 = v189;
            if (v189) {
              goto LABEL_219;
            }
LABEL_220:
            if (v187)
            {
              int v188 = v187;
              operator delete(v187);
            }
            unint64_t v142 = v186;
            if (v186 && !atomic_fetch_add(&v186->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
              std::__shared_weak_count::__release_weak(v142);
            }
            ++v131;
            long long v130 = (int *)v157;
            int v133 = *((_DWORD *)v157 + v127);
            unint64_t v134 = v133;
            --v132;
            if (v131 >= v133)
            {
              uint64_t v43 = v153;
              goto LABEL_231;
            }
          }
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
          unint64_t v141 = v189;
          if (!v189) {
            goto LABEL_220;
          }
LABEL_219:
          std::vector<int> v190 = v141;
          operator delete(v141);
          goto LABEL_220;
        }
        int v133 = 0;
        unint64_t v134 = 0;
LABEL_231:
        uint64_t v143 = v160;
        unint64_t v144 = v43[v160];
        if (v144 > v134) {
          break;
        }
LABEL_206:
        ++v127;
        uint64_t v126 = v156;
        if (v127 >= v43[v156])
        {
LABEL_249:
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&v164, &v197);
LABEL_250:
          if (v191)
          {
            uint64_t v192 = v191;
            operator delete(v191);
          }
          if (v194)
          {
            unint64_t v195 = v194;
            operator delete(v194);
          }
          if (v201)
          {
            uint64_t v202 = v201;
            operator delete(v201);
          }
          if (v199)
          {
            v200 = v199;
            operator delete(v199);
          }
          uint64_t v151 = v198;
          if (v198 && !atomic_fetch_add(&v198->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
            std::__shared_weak_count::__release_weak(v151);
          }
          if (v177)
          {
            uint64_t v178 = v177;
            operator delete(v177);
          }
          if (v175)
          {
            char v176 = v175;
            operator delete(v175);
          }
          unint64_t v152 = v174;
          if (v174 && !atomic_fetch_add(&v174->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
            std::__shared_weak_count::__release_weak(v152);
          }
          if (v157)
          {
            uint64_t v158 = v157;
            operator delete(v157);
          }
          if (v153)
          {
            uint64_t v154 = v153;
            operator delete(v153);
          }
          *(void *)a5 = 0;
          *(unsigned char *)(a5 + 8) = 9;
          operator new();
        }
      }
      uint64_t v145 = (unint64_t *)v194 + 3 * v160;
      *uint64_t v145 = v134;
      v145[1] = v144;
      void v145[2] = 1;
      uint64_t v179 = (uint64_t **)v144;
      v203[0] = v133;
      if (v144 <= v133)
      {
        uint64_t v185 = (uint64_t *)&v179;
        uint64_t v186 = (std::__shared_weak_count *)v203;
        nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
      }
      unint64_t v146 = (void *)v191 + 3 * v143;
      void *v146 = v133;
      v146[1] = v144;
      v146[2] = 1;
      nitro::ndarray<unsigned char>::slice(&v197, &v191, &v185, v128);
      nitro::ndarray<unsigned char>::slice(&v173, &v194, &v179, v147);
      nitro::ndarray<unsigned char>::assign<unsigned char>(&v185, &v179);
      if (v183)
      {
        uint64_t v184 = v183;
        operator delete(v183);
      }
      if (v181)
      {
        uint64_t v182 = v181;
        operator delete(v181);
      }
      uint64_t v148 = v180;
      if (v180 && !atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
        std::string::size_type v149 = v189;
        if (!v189) {
          goto LABEL_241;
        }
      }
      else
      {
        std::string::size_type v149 = v189;
        if (!v189)
        {
LABEL_241:
          if (v187)
          {
            int v188 = v187;
            operator delete(v187);
          }
          std::string::size_type v150 = v186;
          if (v186 && !atomic_fetch_add(&v186->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
          uint64_t v43 = v153;
          goto LABEL_206;
        }
      }
      std::vector<int> v190 = v149;
      operator delete(v149);
      goto LABEL_241;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v173, (uint64_t)v170);
      nitro::ndarray<float>::init_from_shape((uint64_t **)&v153, &v197);
      unint64_t v27 = v153;
      unint64_t v195 = 0;
      uint64_t v196 = 0;
      std::string::size_type v194 = 0;
      uint64_t v28 = v154 - (unsigned char *)v153;
      if (v154 == v153)
      {
        uint64_t v191 = 0;
        uint64_t v192 = 0;
        uint64_t v193 = 0;
      }
      else
      {
        if ((unint64_t)v28 > 0x5555555555555550) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = v28 >> 3;
        size_t v30 = 24 * (v28 >> 3);
        std::vector<int>::pointer v31 = (long long *)operator new(v30);
        uint64_t v32 = (long long *)((char *)v31 + 24 * v29);
        std::string::size_type v194 = v31;
        uint64_t v196 = v32;
        do
        {
          *(void *)std::vector<int>::pointer v31 = -1;
          *((void *)v31 + 1) = -1;
          *((void *)v31 + 2) = 1;
          std::vector<int>::pointer v31 = (long long *)((char *)v31 + 24);
        }
        while (v31 != v32);
        unint64_t v195 = v32;
        long long v33 = (long long *)operator new(v30);
        long long v34 = (long long *)((char *)v33 + 24 * v29);
        uint64_t v191 = v33;
        uint64_t v193 = v34;
        do
        {
          *(void *)long long v33 = -1;
          *((void *)v33 + 1) = -1;
          *((void *)v33 + 2) = 1;
          long long v33 = (long long *)((char *)v33 + 24);
        }
        while (v33 != v34);
        uint64_t v192 = v34;
      }
      uint64_t v51 = v156;
      uint64_t v179 = (uint64_t **)v27[v156];
      v203[0] = (v158 - (unsigned char *)v157) >> 2;
      if (v179 != (uint64_t **)v203[0])
      {
        uint64_t v185 = (uint64_t *)&v179;
        uint64_t v186 = (std::__shared_weak_count *)v203;
        _ZZZN5nitro14nitro_builtins15ReverseSequenceERKNS_13flexible_typeES3_S3_S3_ENK3__0clINS_7ndarrayIfEEEEDaT_ENKUlvE_clEv();
      }
      if (!v179) {
        goto LABEL_102;
      }
      unint64_t v52 = 0;
      __n128 v53 = (__n128)xmmword_192DC8DB0;
      while (1)
      {
        uint64_t v54 = 24 * v51;
        *(void *)((char *)v194 + v54) = v52;
        *(void *)((char *)v191 + v54) = v52;
        uint64_t v55 = (int *)v157;
        if (*((_DWORD *)v157 + v52))
        {
          unint64_t v56 = 0;
          uint64_t v57 = -1;
          while (1)
          {
            uint64_t v185 = (uint64_t *)v56;
            if ((v56 & 0x8000000000000000) != 0)
            {
              uint64_t v179 = &v185;
              nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
            }
            uint64_t v60 = v160;
            std::string::size_type v61 = (char *)v194 + 24 * v160;
            *(void *)std::string::size_type v61 = v56;
            *(_OWORD *)(v61 + 8) = xmmword_192DC8DB0;
            uint64_t v62 = v57 + v55[v52];
            uint64_t v185 = (uint64_t *)v62;
            if (v62 < 0)
            {
              uint64_t v179 = &v185;
              nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
            }
            uint64_t v63 = (char *)v191 + 24 * v60;
            *(void *)uint64_t v63 = v62;
            *(_OWORD *)(v63 + 8) = xmmword_192DC8DB0;
            nitro::ndarray<float>::slice(&v197, &v191, &v185, (__n128)xmmword_192DC8DB0);
            nitro::ndarray<float>::slice(&v173, &v194, &v179, v64);
            nitro::ndarray<float>::assign<float>((uint64_t *)&v185, (uint64_t *)&v179);
            if (v183)
            {
              uint64_t v184 = v183;
              operator delete(v183);
            }
            if (v181)
            {
              uint64_t v182 = v181;
              operator delete(v181);
            }
            int64_t v65 = v180;
            if (v180)
            {
              if (!atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                break;
              }
            }
            uint64_t v66 = v189;
            if (v189) {
              goto LABEL_72;
            }
LABEL_73:
            if (v187)
            {
              int v188 = v187;
              operator delete(v187);
            }
            std::vector<int> v67 = v186;
            if (v186 && !atomic_fetch_add(&v186->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
            ++v56;
            uint64_t v55 = (int *)v157;
            int v58 = *((_DWORD *)v157 + v52);
            unint64_t v59 = v58;
            --v57;
            if (v56 >= v58)
            {
              unint64_t v27 = v153;
              goto LABEL_84;
            }
          }
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
          uint64_t v66 = v189;
          if (!v189) {
            goto LABEL_73;
          }
LABEL_72:
          std::vector<int> v190 = v66;
          operator delete(v66);
          goto LABEL_73;
        }
        int v58 = 0;
        unint64_t v59 = 0;
LABEL_84:
        uint64_t v68 = v160;
        unint64_t v69 = v27[v160];
        if (v69 > v59) {
          break;
        }
LABEL_59:
        ++v52;
        uint64_t v51 = v156;
        if (v52 >= v27[v156])
        {
LABEL_102:
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&v164, &v197);
          goto LABEL_250;
        }
      }
      uint64_t v70 = (unint64_t *)v194 + 3 * v160;
      *uint64_t v70 = v59;
      v70[1] = v69;
      v70[2] = 1;
      uint64_t v179 = (uint64_t **)v69;
      v203[0] = v58;
      if (v69 <= v58)
      {
        uint64_t v185 = (uint64_t *)&v179;
        uint64_t v186 = (std::__shared_weak_count *)v203;
        nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
      }
      uint64_t v71 = (void *)v191 + 3 * v68;
      void *v71 = v58;
      v71[1] = v69;
      v71[2] = 1;
      nitro::ndarray<float>::slice(&v197, &v191, &v185, v53);
      nitro::ndarray<float>::slice(&v173, &v194, &v179, v72);
      nitro::ndarray<float>::assign<float>((uint64_t *)&v185, (uint64_t *)&v179);
      if (v183)
      {
        uint64_t v184 = v183;
        operator delete(v183);
      }
      if (v181)
      {
        uint64_t v182 = v181;
        operator delete(v181);
      }
      uint64_t v73 = v180;
      if (v180 && !atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
        uint64_t v74 = v189;
        if (!v189) {
          goto LABEL_94;
        }
      }
      else
      {
        uint64_t v74 = v189;
        if (!v189)
        {
LABEL_94:
          if (v187)
          {
            int v188 = v187;
            operator delete(v187);
          }
          int v75 = v186;
          if (v186 && !atomic_fetch_add(&v186->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
          unint64_t v27 = v153;
          goto LABEL_59;
        }
      }
      std::vector<int> v190 = v74;
      operator delete(v74);
      goto LABEL_94;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v173, (uint64_t)v170);
      nitro::ndarray<half>::init_from_shape((uint64_t **)&v153, &v197);
      long long v35 = v153;
      unint64_t v195 = 0;
      uint64_t v196 = 0;
      std::string::size_type v194 = 0;
      uint64_t v36 = v154 - (unsigned char *)v153;
      if (v154 == v153)
      {
        uint64_t v191 = 0;
        uint64_t v192 = 0;
        uint64_t v193 = 0;
      }
      else
      {
        if ((unint64_t)v36 > 0x5555555555555550) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v36 >> 3;
        size_t v38 = 24 * (v36 >> 3);
        uint64_t v39 = (long long *)operator new(v38);
        unint64_t v40 = (long long *)((char *)v39 + 24 * v37);
        std::string::size_type v194 = v39;
        uint64_t v196 = v40;
        do
        {
          *(void *)uint64_t v39 = -1;
          *((void *)v39 + 1) = -1;
          *((void *)v39 + 2) = 1;
          uint64_t v39 = (long long *)((char *)v39 + 24);
        }
        while (v39 != v40);
        unint64_t v195 = v40;
        uint64_t v41 = (long long *)operator new(v38);
        int64_t v42 = (long long *)((char *)v41 + 24 * v37);
        uint64_t v191 = v41;
        uint64_t v193 = v42;
        do
        {
          *(void *)uint64_t v41 = -1;
          *((void *)v41 + 1) = -1;
          *((void *)v41 + 2) = 1;
          uint64_t v41 = (long long *)((char *)v41 + 24);
        }
        while (v41 != v42);
        uint64_t v192 = v42;
      }
      uint64_t v76 = v156;
      uint64_t v179 = (uint64_t **)v35[v156];
      v203[0] = (v158 - (unsigned char *)v157) >> 2;
      if (v179 != (uint64_t **)v203[0])
      {
        uint64_t v185 = (uint64_t *)&v179;
        uint64_t v186 = (std::__shared_weak_count *)v203;
        _ZZZN5nitro14nitro_builtins15ReverseSequenceERKNS_13flexible_typeES3_S3_S3_ENK3__0clINS_7ndarrayIDhEEEEDaT_ENKUlvE_clEv();
      }
      if (!v179) {
        goto LABEL_151;
      }
      unint64_t v77 = 0;
      __n128 v78 = (__n128)xmmword_192DC8DB0;
      break;
    default:
      printf("%d\n", v170[0]);
      nitro::ndarray_container::visit<nitro::nitro_builtins::ReverseSequence(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::ReverseSequence(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
  while (1)
  {
    uint64_t v79 = 24 * v76;
    *(void *)((char *)v194 + v79) = v77;
    *(void *)((char *)v191 + v79) = v77;
    uint64_t v80 = (int *)v157;
    if (*((_DWORD *)v157 + v77))
    {
      unint64_t v81 = 0;
      uint64_t v82 = -1;
      while (1)
      {
        uint64_t v185 = (uint64_t *)v81;
        if ((v81 & 0x8000000000000000) != 0)
        {
          uint64_t v179 = &v185;
          nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
        }
        uint64_t v85 = v160;
        int64_t v86 = (char *)v194 + 24 * v160;
        *(void *)int64_t v86 = v81;
        *(_OWORD *)(v86 + 8) = xmmword_192DC8DB0;
        uint64_t v87 = v82 + v80[v77];
        uint64_t v185 = (uint64_t *)v87;
        if (v87 < 0)
        {
          uint64_t v179 = &v185;
          nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
        }
        uint64_t v88 = (char *)v191 + 24 * v85;
        *(void *)uint64_t v88 = v87;
        *(_OWORD *)(v88 + 8) = xmmword_192DC8DB0;
        nitro::ndarray<half>::slice(&v197, &v191, &v185, (__n128)xmmword_192DC8DB0);
        nitro::ndarray<half>::slice(&v173, &v194, &v179, v89);
        nitro::ndarray<half>::assign<half>((uint64_t *)&v185, (uint64_t *)&v179);
        if (v183)
        {
          uint64_t v184 = v183;
          operator delete(v183);
        }
        if (v181)
        {
          uint64_t v182 = v181;
          operator delete(v181);
        }
        uint64_t v90 = v180;
        if (v180)
        {
          if (!atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        unint64_t v91 = v189;
        if (v189) {
          goto LABEL_121;
        }
LABEL_122:
        if (v187)
        {
          int v188 = v187;
          operator delete(v187);
        }
        size_t v92 = v186;
        if (v186 && !atomic_fetch_add(&v186->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
        ++v81;
        uint64_t v80 = (int *)v157;
        int v83 = *((_DWORD *)v157 + v77);
        unint64_t v84 = v83;
        --v82;
        if (v81 >= v83)
        {
          long long v35 = v153;
          goto LABEL_133;
        }
      }
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
      unint64_t v91 = v189;
      if (!v189) {
        goto LABEL_122;
      }
LABEL_121:
      std::vector<int> v190 = v91;
      operator delete(v91);
      goto LABEL_122;
    }
    int v83 = 0;
    unint64_t v84 = 0;
LABEL_133:
    uint64_t v93 = v160;
    unint64_t v94 = v35[v160];
    if (v94 > v84) {
      break;
    }
LABEL_108:
    ++v77;
    uint64_t v76 = v156;
    if (v77 >= v35[v156])
    {
LABEL_151:
      nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&v164, &v197);
      goto LABEL_250;
    }
  }
  uint64_t v95 = (unint64_t *)v194 + 3 * v160;
  unint64_t *v95 = v84;
  v95[1] = v94;
  v95[2] = 1;
  uint64_t v179 = (uint64_t **)v94;
  v203[0] = v83;
  if (v94 <= v83)
  {
    uint64_t v185 = (uint64_t *)&v179;
    uint64_t v186 = (std::__shared_weak_count *)v203;
    nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  }
  uint64_t v96 = (void *)v191 + 3 * v93;
  void *v96 = v83;
  v96[1] = v94;
  v96[2] = 1;
  nitro::ndarray<half>::slice(&v197, &v191, &v185, v78);
  nitro::ndarray<half>::slice(&v173, &v194, &v179, v97);
  nitro::ndarray<half>::assign<half>((uint64_t *)&v185, (uint64_t *)&v179);
  if (v183)
  {
    uint64_t v184 = v183;
    operator delete(v183);
  }
  if (v181)
  {
    uint64_t v182 = v181;
    operator delete(v181);
  }
  std::string::size_type v98 = v180;
  if (v180 && !atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
    uint64_t v99 = v189;
    if (!v189) {
      goto LABEL_143;
    }
  }
  else
  {
    uint64_t v99 = v189;
    if (!v189)
    {
LABEL_143:
      if (v187)
      {
        int v188 = v187;
        operator delete(v187);
      }
      uint64_t v100 = v186;
      if (v186 && !atomic_fetch_add(&v186->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
      long long v35 = v153;
      goto LABEL_108;
    }
  }
  std::vector<int> v190 = v99;
  operator delete(v99);
  goto LABEL_143;
}

void sub_19264508C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  unint64_t v49 = *(void **)(v47 - 216);
  if (v49)
  {
    *(void *)(v47 - 208) = v49;
    operator delete(v49);
  }
  uint64_t v50 = *(void **)(v47 - 192);
  if (v50)
  {
    *(void *)(v47 - 184) = v50;
    operator delete(v50);
  }
  nitro::ndarray<float>::~ndarray((void *)(v47 - 168));
  nitro::ndarray<float>::~ndarray(&a47);
  nitro::nitro_builtins::ReverseSequence(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::~$_0((uint64_t)&a13);
  if (__p) {
    operator delete(__p);
  }
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a37);
  _Unwind_Resume(a1);
}

nitro::ndarray_container *nitro::nitro_builtins::Max@<X0>(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v325, (const nitro::ndarray_container *)(*(void *)this + 8));
  int v7 = *((unsigned __int8 *)a2 + 8);
  if (!*((unsigned char *)a2 + 8))
  {
    uint64_t v9 = (int)nitro::flexible_type_converter<int>::get((uint64_t)&__dst, (unsigned __int8 *)a2);
    goto LABEL_66;
  }
  if (v7 == 9)
  {
    if (*(_DWORD *)(*(void *)a2 + 8) == 3) {
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(*(void *)a2 + 8));
    }
    else {
      _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_((_DWORD *)(*(void *)a2 + 8), (uint64_t)&__dst);
    }
    nitro::ndarray<int>::ndarray((uint64_t)&v313, (uint64_t)&__dst);
    nitro::ndarray<int>::get_elements_copy((uint64_t *)&v313, (uint64_t *)&__idx);
    uint64_t v9 = *(int *)__idx;
    size_t v334 = __idx;
    operator delete((void *)__idx);
    if (__p)
    {
      *(void *)&long long v316 = __p;
      operator delete(__p);
    }
    if (v313.__r_.__value_.__r.__words[2])
    {
      v314[0] = (void *)v313.__r_.__value_.__r.__words[2];
      operator delete((void *)v313.__r_.__value_.__r.__words[2]);
    }
    std::string::size_type size = (std::__shared_weak_count *)v313.__r_.__value_.__l.__size_;
    if (v313.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v313.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    if (v331)
    {
      v332 = v331;
      operator delete(v331);
    }
    if (v329)
    {
      v330 = v329;
      operator delete(v329);
    }
    uint64_t v11 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
    if (__dst.__r_.__value_.__r.__words[2]
      && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
LABEL_66:
    uint64_t v322 = 0;
    uint64_t v323 = 0;
    uint64_t v324 = 0;
    long long v35 = v326;
    int64_t v36 = v327 - (unsigned char *)v326;
    if (v327 == v326)
    {
      std::string::size_type v319 = 0;
      std::string::size_type v320 = 0;
      v318 = 0;
    }
    else
    {
      if (v36 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v37 = (char *)operator new(v327 - (unsigned char *)v326);
      uint64_t v322 = v37;
      uint64_t v324 = &v37[8 * (v36 >> 3)];
      memcpy(v37, v35, v36);
      uint64_t v323 = &v37[8 * (v36 >> 3)];
      *(void *)&v37[8 * v9] = 1;
      std::string::size_type v319 = 0;
      std::string::size_type v320 = 0;
      v318 = 0;
      size_t v38 = (char *)operator new(v36);
      uint64_t v39 = &v38[8 * (v36 >> 3)];
      v318 = v38;
      std::string::size_type v320 = v39;
      memcpy(v38, v37, v36);
      std::string::size_type v319 = v39;
    }
    uint64_t v321 = v9;
    uint64_t v311 = v9;
    uint64_t v312 = a3;
    switch(v325[0])
    {
      case 3:
        nitro::ndarray<int>::ndarray((uint64_t)&__idx, (uint64_t)v325);
        v341 = 0;
        v342 = 0;
        v340 = 0;
        int64_t v40 = v336 - v335;
        if (v336 == v335)
        {
          uint64_t v43 = 0;
          uint64_t v41 = 0;
          int64_t v45 = 0;
        }
        else
        {
          if (v40 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v41 = (char *)operator new(v336 - v335);
          uint64_t v42 = v40 >> 3;
          uint64_t v43 = &v41[8 * (v40 >> 3)];
          v340 = v41;
          v342 = v43;
          size_t v44 = v40 & 0xFFFFFFFFFFFFFFF8;
          bzero(v41, v40 & 0xFFFFFFFFFFFFFFF8);
          v341 = v43;
          int64_t v40 = (int64_t)operator new(v40);
          int64_t v45 = v40 + 8 * v42;
          bzero((void *)v40, v44);
        }
        nitro::ndarray<int>::init_from_shape((uint64_t **)&v318, &v313);
        if ((unint64_t)((v45 - v40) >> 3) <= 1) {
          unint64_t v202 = 1;
        }
        else {
          unint64_t v202 = (v45 - v40) >> 3;
        }
        unint64_t v203 = v43 - v41;
        uint64_t v204 = v321;
        if ((unint64_t)((v43 - v41) >> 3) <= 1) {
          unint64_t v205 = 1;
        }
        else {
          unint64_t v205 = (v43 - v41) >> 3;
        }
        std::string::size_type v206 = v313.__r_.__value_.__r.__words[0];
        uint64_t v207 = v317;
        unint64_t v208 = v203 >> 3;
        uint64_t v209 = v339;
        int64_t v304 = v45;
        size_t __lenb = v43 - v41;
        unint64_t v310 = v205 & 0xFFFFFFFFFFFFFFFELL;
        size_t v210 = __idx;
        unint64_t v211 = v335;
        v289 = v337;
        v292 = (char *)__p;
        v283 = (char *)__p + 8;
        v286 = (void *)(v40 + 8);
        long long v280 = v337 + 8;
        uint64_t v212 = (v203 >> 3) + 1;
        int64_t v298 = v40;
        uint64_t v301 = v321;
        uint64_t v295 = v212;
        while (1)
        {
          if (v43 != v41)
          {
            uint64_t v213 = (void *)v40;
            unint64_t v214 = v205;
            std::string v215 = v43;
            unint64_t v216 = v208;
            uint64_t v217 = v209;
            memmove(v213, v41, __lenb);
            uint64_t v209 = v217;
            unint64_t v208 = v216;
            uint64_t v43 = v215;
            unint64_t v205 = v214;
            uint64_t v212 = v295;
            int64_t v40 = v298;
            uint64_t v204 = v301;
            int64_t v45 = v304;
          }
          *(void *)(v40 + 8 * v204) = 0;
          if (v45 == v40)
          {
            uint64_t v218 = 0;
            goto LABEL_218;
          }
          if (v202 < 2) {
            break;
          }
          uint64_t v220 = 0;
          uint64_t v221 = 0;
          unint64_t v222 = v202 & 0xFFFFFFFFFFFFFFFELL;
          v223 = v283;
          unint64_t v224 = v286;
          do
          {
            v220 += *(v223 - 1) * *(v224 - 1);
            v221 += *v223 * *v224;
            v224 += 2;
            v223 += 2;
            v222 -= 2;
          }
          while (v222);
          uint64_t v218 = v221 + v220;
          unint64_t v219 = v202 & 0xFFFFFFFFFFFFFFFELL;
          if (v202 != (v202 & 0xFFFFFFFFFFFFFFFELL)) {
            goto LABEL_216;
          }
LABEL_218:
          if (v43 == v41)
          {
            uint64_t v232 = 0;
            goto LABEL_227;
          }
          if (v205 < 2)
          {
            uint64_t v232 = 0;
            unint64_t v233 = 0;
LABEL_225:
            unint64_t v239 = v205 - v233;
            uint64_t v240 = 8 * v233;
            double v241 = &v289[8 * v233];
            v242 = (uint64_t *)&v41[v240];
            do
            {
              uint64_t v244 = *v242++;
              uint64_t v243 = v244;
              uint64_t v245 = *(void *)v241;
              v241 += 8;
              v232 += v245 * v243;
              --v239;
            }
            while (v239);
            goto LABEL_227;
          }
          uint64_t v234 = 0;
          uint64_t v235 = 0;
          unint64_t v236 = v310;
          unint64_t v237 = v280;
          v238 = v41 + 8;
          do
          {
            v234 += *(v237 - 1) * *(v238 - 1);
            v235 += *v237 * *v238;
            v238 += 2;
            v237 += 2;
            v236 -= 2;
          }
          while (v236);
          uint64_t v232 = v235 + v234;
          unint64_t v233 = v310;
          if (v205 != v310) {
            goto LABEL_225;
          }
LABEL_227:
          uint64_t v246 = 4 * (v218 + v207);
          int v247 = *(_DWORD *)(v210 + 4 * (v232 + v209));
          if (v247 <= *(_DWORD *)(v206 + v246)) {
            int v247 = *(_DWORD *)(v206 + v246);
          }
          *(_DWORD *)(v206 + v246) = v247;
          if ((int)v208 >= 1)
          {
            uint64_t v248 = v212;
            int v249 = v208;
            while (1)
            {
              uint64_t v250 = 8 * (v248 - 2);
              unint64_t v251 = *(void *)&v41[v250] + 1;
              *(void *)&v41[v250] = v251;
              if (v251 < *(void *)&v211[v250]) {
                break;
              }
              *(void *)&v41[8 * (v248 - 2)] = 0;
              --v249;
              if ((unint64_t)--v248 <= 1) {
                goto LABEL_235;
              }
            }
            if (v249 > 0) {
              continue;
            }
          }
LABEL_235:
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&__dst, &v313);
LABEL_236:
          unint64_t v112 = v311;
          uint64_t v111 = v312;
          if (__p)
          {
            *(void *)&long long v316 = __p;
            operator delete(__p);
          }
          if (v313.__r_.__value_.__r.__words[2])
          {
            v314[0] = (void *)v313.__r_.__value_.__r.__words[2];
            operator delete((void *)v313.__r_.__value_.__r.__words[2]);
          }
          uint64_t v252 = (std::__shared_weak_count *)v313.__r_.__value_.__l.__size_;
          if (v313.__r_.__value_.__l.__size_
            && !atomic_fetch_add((atomic_ullong *volatile)(v313.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
            std::__shared_weak_count::__release_weak(v252);
            if (v40) {
LABEL_243:
            }
              operator delete((void *)v40);
          }
          else
          {
LABEL_242:
            if (v40) {
              goto LABEL_243;
            }
          }
          if (v340) {
            operator delete(v340);
          }
          if (v337)
          {
            v338 = v337;
            operator delete(v337);
          }
          if (v335)
          {
            int v336 = v335;
            operator delete(v335);
          }
          uint64_t v253 = (std::__shared_weak_count *)v334;
          if (v334 && !atomic_fetch_add((atomic_ullong *volatile)(v334 + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
            std::__shared_weak_count::__release_weak(v253);
          }
          if (v318)
          {
            std::string::size_type v319 = v318;
            operator delete(v318);
          }
          size_t __idx = 0;
          size_t v334 = 0;
          v335 = 0;
          if (v112)
          {
            if (v112 >> 61) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            v254 = (char *)operator new(8 * v112);
            size_t __idx = (size_t)v254;
            v335 = &v254[8 * v112];
            bzero(v254, 8 * v112);
            size_t v334 = (size_t)&v254[8 * v112];
          }
          nitro::ndarray_container::squeeze((uint64_t)&__dst, &__idx, (uint64_t)&v313);
          *(void *)uint64_t v111 = 0;
          *(unsigned char *)(v111 + 8) = 9;
          operator new();
        }
        uint64_t v218 = 0;
        unint64_t v219 = 0;
LABEL_216:
        unint64_t v225 = v202 - v219;
        uint64_t v226 = 8 * v219;
        uint64_t v227 = &v292[8 * v219];
        v228 = (uint64_t *)(v40 + v226);
        do
        {
          uint64_t v230 = *v228++;
          uint64_t v229 = v230;
          uint64_t v231 = *(void *)v227;
          v227 += 8;
          v218 += v231 * v229;
          --v225;
        }
        while (v225);
        goto LABEL_218;
      case 5:
        nitro::ndarray<unsigned char>::ndarray((uint64_t)&__idx, (uint64_t)v325);
        v341 = 0;
        v342 = 0;
        v340 = 0;
        int64_t v40 = v336 - v335;
        if (v336 == v335)
        {
          int v58 = 0;
          unint64_t v56 = 0;
          int64_t v60 = 0;
        }
        else
        {
          if (v40 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v56 = (char *)operator new(v336 - v335);
          uint64_t v57 = v40 >> 3;
          int v58 = &v56[8 * (v40 >> 3)];
          v340 = v56;
          v342 = v58;
          size_t v59 = v40 & 0xFFFFFFFFFFFFFFF8;
          bzero(v56, v40 & 0xFFFFFFFFFFFFFFF8);
          v341 = v58;
          int64_t v40 = (int64_t)operator new(v40);
          int64_t v60 = v40 + 8 * v57;
          bzero((void *)v40, v59);
        }
        nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)&v318, &v313);
        if ((unint64_t)((v60 - v40) >> 3) <= 1) {
          unint64_t v164 = 1;
        }
        else {
          unint64_t v164 = (v60 - v40) >> 3;
        }
        unint64_t v165 = v58 - v56;
        if ((unint64_t)((v58 - v56) >> 3) <= 1) {
          unint64_t v166 = 1;
        }
        else {
          unint64_t v166 = (v58 - v56) >> 3;
        }
        while (1)
        {
          if (v58 != v56) {
            memmove((void *)v40, v56, v58 - v56);
          }
          *(void *)(v40 + 8 * v321) = 0;
          if (v60 == v40)
          {
            uint64_t v167 = 0;
            goto LABEL_181;
          }
          if (v164 < 2) {
            break;
          }
          uint64_t v169 = 0;
          uint64_t v170 = 0;
          uint64_t v171 = (char *)__p + 8;
          uint64_t v173 = (void *)(v40 + 8);
          unint64_t v172 = v164 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v169 += *(v171 - 1) * *(v173 - 1);
            v170 += *v171 * *v173;
            v173 += 2;
            v171 += 2;
            v172 -= 2;
          }
          while (v172);
          uint64_t v167 = v170 + v169;
          unint64_t v168 = v164 & 0xFFFFFFFFFFFFFFFELL;
          if (v164 != (v164 & 0xFFFFFFFFFFFFFFFELL)) {
            goto LABEL_179;
          }
LABEL_181:
          if (v58 == v56)
          {
            uint64_t v181 = 0;
            goto LABEL_190;
          }
          if (v166 < 2)
          {
            uint64_t v181 = 0;
            unint64_t v182 = 0;
LABEL_188:
            unint64_t v188 = v166 - v182;
            uint64_t v189 = 8 * v182;
            std::vector<int> v190 = &v337[v189];
            uint64_t v191 = (uint64_t *)&v56[v189];
            do
            {
              uint64_t v193 = *v191++;
              uint64_t v192 = v193;
              uint64_t v194 = *(void *)v190;
              v190 += 8;
              v181 += v194 * v192;
              --v188;
            }
            while (v188);
            goto LABEL_190;
          }
          uint64_t v183 = 0;
          uint64_t v184 = 0;
          uint64_t v185 = v337 + 8;
          unint64_t v186 = v166 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v187 = v56 + 8;
          do
          {
            v183 += *(v185 - 1) * *(v187 - 1);
            v184 += *v185 * *v187;
            v187 += 2;
            v185 += 2;
            v186 -= 2;
          }
          while (v186);
          uint64_t v181 = v184 + v183;
          unint64_t v182 = v166 & 0xFFFFFFFFFFFFFFFELL;
          if (v166 != (v166 & 0xFFFFFFFFFFFFFFFELL)) {
            goto LABEL_188;
          }
LABEL_190:
          uint64_t v195 = v317 + v167;
          unsigned int v196 = *(unsigned __int8 *)(__idx + v339 + v181);
          if (v196 <= *(unsigned __int8 *)(v313.__r_.__value_.__r.__words[0] + v195)) {
            LOBYTE(v196) = *(unsigned char *)(v313.__r_.__value_.__r.__words[0] + v195);
          }
          *(unsigned char *)(v313.__r_.__value_.__r.__words[0] + v195) = v196;
          if ((int)(v165 >> 3) >= 1)
          {
            uint64_t v197 = v335;
            uint64_t v198 = (v165 >> 3) + 1;
            unint64_t v199 = v165 >> 3;
            while (1)
            {
              uint64_t v200 = 8 * (v198 - 2);
              unint64_t v201 = *(void *)&v56[v200] + 1;
              *(void *)&v56[v200] = v201;
              if (v201 < *(void *)&v197[v200]) {
                break;
              }
              *(void *)&v56[8 * (v198 - 2)] = 0;
              LODWORD(v199) = v199 - 1;
              if ((unint64_t)--v198 <= 1) {
                goto LABEL_198;
              }
            }
            if ((int)v199 > 0) {
              continue;
            }
          }
LABEL_198:
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&__dst, &v313);
          goto LABEL_236;
        }
        uint64_t v167 = 0;
        unint64_t v168 = 0;
LABEL_179:
        unint64_t v174 = v164 - v168;
        uint64_t v175 = 8 * v168;
        char v176 = (uint64_t *)((char *)__p + v175);
        unint64_t v177 = (uint64_t *)(v40 + v175);
        do
        {
          uint64_t v179 = *v177++;
          uint64_t v178 = v179;
          uint64_t v180 = *v176++;
          v167 += v180 * v178;
          --v174;
        }
        while (v174);
        goto LABEL_181;
      case 9:
        nitro::ndarray<float>::ndarray((uint64_t)&__idx, (uint64_t)v325);
        v341 = 0;
        v342 = 0;
        v340 = 0;
        int64_t v40 = v336 - v335;
        if (v336 == v335)
        {
          uint64_t v48 = 0;
          size_t v46 = 0;
          int64_t v50 = 0;
        }
        else
        {
          if (v40 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          size_t v46 = (char *)operator new(v336 - v335);
          uint64_t v47 = v40 >> 3;
          uint64_t v48 = &v46[8 * (v40 >> 3)];
          v340 = v46;
          v342 = v48;
          size_t v49 = v40 & 0xFFFFFFFFFFFFFFF8;
          bzero(v46, v40 & 0xFFFFFFFFFFFFFFF8);
          v341 = v48;
          int64_t v40 = (int64_t)operator new(v40);
          int64_t v50 = v40 + 8 * v47;
          bzero((void *)v40, v49);
        }
        nitro::ndarray<float>::init_from_shape((uint64_t **)&v318, &v313);
        if ((unint64_t)((v50 - v40) >> 3) <= 1) {
          unint64_t v61 = 1;
        }
        else {
          unint64_t v61 = (v50 - v40) >> 3;
        }
        unint64_t v62 = v48 - v46;
        uint64_t v63 = v321;
        if ((unint64_t)((v48 - v46) >> 3) <= 1) {
          unint64_t v64 = 1;
        }
        else {
          unint64_t v64 = (v48 - v46) >> 3;
        }
        std::string::size_type v65 = v313.__r_.__value_.__r.__words[0];
        uint64_t v66 = v317;
        unint64_t v67 = v62 >> 3;
        uint64_t v68 = v339;
        int64_t v302 = v50;
        size_t __len = v48 - v46;
        unint64_t v308 = v64 & 0xFFFFFFFFFFFFFFFELL;
        size_t v69 = __idx;
        uint64_t v70 = v335;
        v287 = v337;
        v290 = (char *)__p;
        v281 = (char *)__p + 8;
        v284 = (void *)(v40 + 8);
        v278 = v337 + 8;
        uint64_t v71 = (v62 >> 3) + 1;
        int64_t v296 = v40;
        uint64_t v299 = v321;
        uint64_t v293 = v71;
        while (1)
        {
          if (v48 != v46)
          {
            __n128 v72 = (void *)v40;
            unint64_t v73 = v64;
            uint64_t v74 = v48;
            unint64_t v75 = v67;
            uint64_t v76 = v68;
            memmove(v72, v46, __len);
            uint64_t v68 = v76;
            unint64_t v67 = v75;
            uint64_t v48 = v74;
            unint64_t v64 = v73;
            uint64_t v71 = v293;
            int64_t v40 = v296;
            uint64_t v63 = v299;
            int64_t v50 = v302;
          }
          *(void *)(v40 + 8 * v63) = 0;
          if (v50 == v40)
          {
            uint64_t v77 = 0;
            goto LABEL_102;
          }
          if (v61 < 2) {
            break;
          }
          uint64_t v79 = 0;
          uint64_t v80 = 0;
          unint64_t v81 = v61 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v82 = v281;
          int v83 = v284;
          do
          {
            v79 += *(v82 - 1) * *(v83 - 1);
            v80 += *v82 * *v83;
            v83 += 2;
            v82 += 2;
            v81 -= 2;
          }
          while (v81);
          uint64_t v77 = v80 + v79;
          unint64_t v78 = v61 & 0xFFFFFFFFFFFFFFFELL;
          if (v61 != (v61 & 0xFFFFFFFFFFFFFFFELL)) {
            goto LABEL_100;
          }
LABEL_102:
          if (v48 == v46)
          {
            uint64_t v91 = 0;
            goto LABEL_111;
          }
          if (v64 < 2)
          {
            uint64_t v91 = 0;
            unint64_t v92 = 0;
LABEL_109:
            unint64_t v98 = v64 - v92;
            uint64_t v99 = 8 * v92;
            uint64_t v100 = &v287[8 * v92];
            uint64_t v101 = (uint64_t *)&v46[v99];
            do
            {
              uint64_t v103 = *v101++;
              uint64_t v102 = v103;
              uint64_t v104 = *(void *)v100;
              v100 += 8;
              v91 += v104 * v102;
              --v98;
            }
            while (v98);
            goto LABEL_111;
          }
          uint64_t v93 = 0;
          uint64_t v94 = 0;
          unint64_t v95 = v308;
          uint64_t v96 = v278;
          __n128 v97 = v46 + 8;
          do
          {
            v93 += *(v96 - 1) * *(v97 - 1);
            v94 += *v96 * *v97;
            v97 += 2;
            v96 += 2;
            v95 -= 2;
          }
          while (v95);
          uint64_t v91 = v94 + v93;
          unint64_t v92 = v308;
          if (v64 != v308) {
            goto LABEL_109;
          }
LABEL_111:
          uint64_t v105 = 4 * (v77 + v66);
          float v106 = *(float *)(v69 + 4 * (v91 + v68));
          if (v106 < *(float *)(v65 + v105)) {
            float v106 = *(float *)(v65 + v105);
          }
          *(float *)(v65 + v105) = v106;
          if ((int)v67 >= 1)
          {
            uint64_t v107 = v71;
            int v108 = v67;
            while (1)
            {
              uint64_t v109 = 8 * (v107 - 2);
              unint64_t v110 = *(void *)&v46[v109] + 1;
              *(void *)&v46[v109] = v110;
              if (v110 < *(void *)&v70[v109]) {
                break;
              }
              *(void *)&v46[8 * (v107 - 2)] = 0;
              --v108;
              if ((unint64_t)--v107 <= 1) {
                goto LABEL_119;
              }
            }
            if (v108 > 0) {
              continue;
            }
          }
LABEL_119:
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__dst, &v313);
          unint64_t v112 = v311;
          uint64_t v111 = v312;
          if (__p)
          {
            *(void *)&long long v316 = __p;
            operator delete(__p);
          }
          if (v313.__r_.__value_.__r.__words[2])
          {
            v314[0] = (void *)v313.__r_.__value_.__r.__words[2];
            operator delete((void *)v313.__r_.__value_.__r.__words[2]);
          }
          uint64_t v113 = (std::__shared_weak_count *)v313.__r_.__value_.__l.__size_;
          if (v313.__r_.__value_.__l.__size_
            && !atomic_fetch_add((atomic_ullong *volatile)(v313.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
          goto LABEL_242;
        }
        uint64_t v77 = 0;
        unint64_t v78 = 0;
LABEL_100:
        unint64_t v84 = v61 - v78;
        uint64_t v85 = 8 * v78;
        int64_t v86 = &v290[8 * v78];
        uint64_t v87 = (uint64_t *)(v40 + v85);
        do
        {
          uint64_t v89 = *v87++;
          uint64_t v88 = v89;
          uint64_t v90 = *(void *)v86;
          v86 += 8;
          v77 += v90 * v88;
          --v84;
        }
        while (v84);
        goto LABEL_102;
      case 0xB:
        nitro::ndarray<half>::ndarray((uint64_t)&__idx, (uint64_t)v325);
        v341 = 0;
        v342 = 0;
        v340 = 0;
        int64_t v40 = v336 - v335;
        if (v336 == v335)
        {
          __n128 v53 = 0;
          uint64_t v51 = 0;
          int64_t v55 = 0;
        }
        else
        {
          if (v40 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v51 = (char *)operator new(v336 - v335);
          uint64_t v52 = v40 >> 3;
          __n128 v53 = &v51[8 * (v40 >> 3)];
          v340 = v51;
          v342 = v53;
          size_t v54 = v40 & 0xFFFFFFFFFFFFFFF8;
          bzero(v51, v40 & 0xFFFFFFFFFFFFFFF8);
          v341 = v53;
          int64_t v40 = (int64_t)operator new(v40);
          int64_t v55 = v40 + 8 * v52;
          bzero((void *)v40, v54);
        }
        nitro::ndarray<half>::init_from_shape((uint64_t **)&v318, &v313);
        if ((unint64_t)((v55 - v40) >> 3) <= 1) {
          unint64_t v114 = 1;
        }
        else {
          unint64_t v114 = (v55 - v40) >> 3;
        }
        unint64_t v115 = v53 - v51;
        uint64_t v116 = v321;
        if ((unint64_t)((v53 - v51) >> 3) <= 1) {
          unint64_t v117 = 1;
        }
        else {
          unint64_t v117 = (v53 - v51) >> 3;
        }
        std::string::size_type v118 = v313.__r_.__value_.__r.__words[0];
        uint64_t v119 = v317;
        unint64_t v120 = v115 >> 3;
        uint64_t v121 = v339;
        int64_t v303 = v55;
        size_t __lena = v53 - v51;
        unint64_t v309 = v117 & 0xFFFFFFFFFFFFFFFELL;
        size_t v122 = __idx;
        unint64_t v123 = v335;
        v288 = v337;
        v291 = (char *)__p;
        v282 = (char *)__p + 8;
        v285 = (void *)(v40 + 8);
        v279 = v337 + 8;
        uint64_t v124 = (v115 >> 3) + 1;
        int64_t v297 = v40;
        uint64_t v300 = v321;
        uint64_t v294 = v124;
        break;
      default:
        printf("%d\n", v325[0]);
        nitro::ndarray_container::visit<nitro::nitro_builtins::Max(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Max(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
    }
    while (1)
    {
      if (v53 != v51)
      {
        std::vector<int>::pointer v125 = (void *)v40;
        unint64_t v126 = v117;
        unint64_t v127 = v53;
        unint64_t v128 = v120;
        uint64_t v129 = v121;
        memmove(v125, v51, __lena);
        uint64_t v121 = v129;
        unint64_t v120 = v128;
        __n128 v53 = v127;
        unint64_t v117 = v126;
        uint64_t v124 = v294;
        int64_t v40 = v297;
        uint64_t v116 = v300;
        int64_t v55 = v303;
      }
      *(void *)(v40 + 8 * v116) = 0;
      if (v55 == v40)
      {
        uint64_t v130 = 0;
        goto LABEL_145;
      }
      if (v114 < 2) {
        break;
      }
      uint64_t v132 = 0;
      uint64_t v133 = 0;
      unint64_t v134 = v114 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v135 = v282;
      uint64_t v136 = v285;
      do
      {
        v132 += *(v135 - 1) * *(v136 - 1);
        v133 += *v135 * *v136;
        v136 += 2;
        v135 += 2;
        v134 -= 2;
      }
      while (v134);
      uint64_t v130 = v133 + v132;
      unint64_t v131 = v114 & 0xFFFFFFFFFFFFFFFELL;
      if (v114 != (v114 & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_143;
      }
LABEL_145:
      if (v53 == v51)
      {
        uint64_t v144 = 0;
        goto LABEL_154;
      }
      if (v117 < 2)
      {
        uint64_t v144 = 0;
        unint64_t v145 = 0;
LABEL_152:
        unint64_t v151 = v117 - v145;
        uint64_t v152 = 8 * v145;
        char v153 = &v288[8 * v145];
        uint64_t v154 = (uint64_t *)&v51[v152];
        do
        {
          uint64_t v156 = *v154++;
          uint64_t v155 = v156;
          uint64_t v157 = *(void *)v153;
          v153 += 8;
          v144 += v157 * v155;
          --v151;
        }
        while (v151);
        goto LABEL_154;
      }
      uint64_t v146 = 0;
      uint64_t v147 = 0;
      unint64_t v148 = v309;
      std::string::size_type v149 = v279;
      std::string::size_type v150 = v51 + 8;
      do
      {
        v146 += *(v149 - 1) * *(v150 - 1);
        v147 += *v149 * *v150;
        v150 += 2;
        v149 += 2;
        v148 -= 2;
      }
      while (v148);
      uint64_t v144 = v147 + v146;
      unint64_t v145 = v309;
      if (v117 != v309) {
        goto LABEL_152;
      }
LABEL_154:
      uint64_t v158 = 2 * (v130 + v119);
      short float v159 = *(short float *)(v122 + 2 * (v144 + v121));
      if (v159 < *(short float *)(v118 + v158)) {
        short float v159 = *(short float *)(v118 + v158);
      }
      *(short float *)(v118 + v158) = v159;
      if ((int)v120 >= 1)
      {
        uint64_t v160 = v124;
        int v161 = v120;
        while (1)
        {
          uint64_t v162 = 8 * (v160 - 2);
          unint64_t v163 = *(void *)&v51[v162] + 1;
          *(void *)&v51[v162] = v163;
          if (v163 < *(void *)&v123[v162]) {
            break;
          }
          *(void *)&v51[8 * (v160 - 2)] = 0;
          --v161;
          if ((unint64_t)--v160 <= 1) {
            goto LABEL_162;
          }
        }
        if (v161 > 0) {
          continue;
        }
      }
LABEL_162:
      nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&__dst, &v313);
      goto LABEL_236;
    }
    uint64_t v130 = 0;
    unint64_t v131 = 0;
LABEL_143:
    unint64_t v137 = v114 - v131;
    uint64_t v138 = 8 * v131;
    __n128 v139 = &v291[8 * v131];
    uint64_t v140 = (uint64_t *)(v40 + v138);
    do
    {
      uint64_t v142 = *v140++;
      uint64_t v141 = v142;
      uint64_t v143 = *(void *)v139;
      v139 += 8;
      v130 += v143 * v141;
      --v137;
    }
    while (v137);
    goto LABEL_145;
  }
  if (v7 != 4)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__dst);
    double v255 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)"Check failed (", 14);
    v256 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v255, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v256, (uint64_t)":", 1);
    v257 = (void *)std::ostream::operator<<();
    int64_t v258 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v257, (uint64_t)"): ", 3);
    v259 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v258, (uint64_t)"false", 5);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v259);
    if (*((int *)global_logger() + 169) <= 6)
    {
      uint64_t v260 = (file_logger *)global_logger();
      started = file_logger::start_stream(v260, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 976, 1);
      std::stringbuf::str();
      std::vector<int>::pointer v262 = (char *)pthread_getspecific(*((void *)started + 74));
      if (v262 && v262[280])
      {
        std::vector<int>::pointer v263 = v262 + 16;
        if (SHIBYTE(v335) >= 0) {
          uint64_t p_idx = (uint64_t)&__idx;
        }
        else {
          uint64_t p_idx = __idx;
        }
        if (SHIBYTE(v335) >= 0) {
          uint64_t v265 = HIBYTE(v335);
        }
        else {
          uint64_t v265 = v334;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v263, p_idx, v265);
      }
      if (SHIBYTE(v335) < 0) {
        operator delete((void *)__idx);
      }
    }
    __print_back_trace();
    if (*((int *)global_logger() + 169) <= 6)
    {
      std::vector<int>::pointer v266 = (file_logger *)global_logger();
      v267 = file_logger::start_stream(v266, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 976, 1);
      std::stringbuf::str();
      unint64_t v268 = (char *)pthread_getspecific(*((void *)v267 + 74));
      if (v268 && v268[280])
      {
        v269 = v268 + 16;
        if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::vector<int>::pointer v270 = &v313;
        }
        else {
          std::vector<int>::pointer v270 = (std::string *)v313.__r_.__value_.__r.__words[0];
        }
        if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v271 = HIBYTE(v313.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v271 = v313.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v269, (uint64_t)v270, v271);
      }
      long long v272 = pthread_getspecific(*((void *)v267 + 74));
      if (v272)
      {
        if (*((unsigned char *)v272 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v272 + 2, (uint64_t)"\n", 1);
          file_logger::stream_flush(v267);
          if (*((_DWORD *)v267 + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
          }
        }
      }
      if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v313.__r_.__value_.__l.__data_);
      }
    }
    long long v273 = __cxa_allocate_exception(0x18uLL);
    std::stringbuf::str();
  }
  unint64_t v8 = *(unsigned char **)(*(void *)a2 + 8);
  uint64_t v9 = 0;
  switch(v8[8])
  {
    case 1:
      uint64_t v9 = (uint64_t)*(double *)v8;
      goto LABEL_66;
    case 2:
      double v12 = *(double *)v8;
      int v13 = (const char **)(*(void *)v8 + 8);
      size_t __idx = 0;
      int v14 = (const char *)v13;
      if (*(char *)(*(void *)&v12 + 31) < 0) {
        int v14 = *v13;
      }
      size_t v15 = strlen(v14);
      if (v15 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v16 = v15;
      if (v15 >= 0x17)
      {
        uint64_t v32 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v32 = v15 | 7;
        }
        uint64_t v33 = v32 + 1;
        p_dst = (std::string *)operator new(v32 + 1);
        __dst.__r_.__value_.__l.__size_ = v16;
        __dst.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v15;
        p_dst = &__dst;
        if (!v15) {
          goto LABEL_55;
        }
      }
      memmove(p_dst, v14, v16);
LABEL_55:
      p_dst->__r_.__value_.__s.__data_[v16] = 0;
      uint64_t v9 = std::stoll(&__dst, &__idx, 10);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (*(char *)(*(void *)&v12 + 31) < 0) {
        uint64_t v34 = *(void *)(*(void *)&v12 + 16);
      }
      else {
        uint64_t v34 = *(unsigned __int8 *)(*(void *)&v12 + 31);
      }
      if (__idx != v34)
      {
        long long v274 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        long long v275 = std::string::append(&v313, " cannot be interpreted as an integer");
        long long v276 = *(_OWORD *)&v275->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v275->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v276;
        v275->__r_.__value_.__l.__size_ = 0;
        v275->__r_.__value_.__r.__words[2] = 0;
        v275->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v274, &__dst);
        __cxa_throw(v274, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      goto LABEL_66;
    case 3:
      double v27 = *(double *)v8;
      memset(&__dst, 0, sizeof(__dst));
      uint64_t v29 = *(unsigned char **)(*(void *)&v27 + 8);
      uint64_t v28 = *(unsigned char **)(*(void *)&v27 + 16);
      int64_t v30 = v28 - v29;
      if (v28 == v29)
      {
        std::vector<int>::pointer v31 = 0;
      }
      else
      {
        if (v30 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        std::vector<int>::pointer v31 = operator new(v28 - v29);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v31 + 8 * (v30 >> 3);
        memcpy(v31, v29, v30);
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v31 + 8 * (v30 >> 3);
      }
      nitro::flexible_type_fail(0);
      if (!v31) {
        goto LABEL_63;
      }
      size_t v22 = v31;
      goto LABEL_62;
    case 4:
      double v19 = *(double *)v8;
      memset(&__dst, 0, sizeof(__dst));
      std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&__dst, *(void **)(*(void *)&v19 + 8), *(void **)(*(void *)&v19 + 16), (uint64_t)(*(void *)(*(void *)&v19 + 16) - *(void *)(*(void *)&v19 + 8)) >> 4);
      nitro::flexible_type_fail(0);
      std::string::size_type v20 = __dst.__r_.__value_.__r.__words[0];
      if (!__dst.__r_.__value_.__r.__words[0]) {
        goto LABEL_63;
      }
      std::string::size_type v21 = __dst.__r_.__value_.__l.__size_;
      size_t v22 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
      {
        do
        {
          v21 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&__dst.__r_.__value_.__r.__words[2], v21);
        }
        while (v21 != v20);
        size_t v22 = (void *)__dst.__r_.__value_.__r.__words[0];
      }
      __dst.__r_.__value_.__l.__size_ = v20;
      goto LABEL_62;
    case 5:
      double v23 = *(double *)v8;
      memset(&__dst, 0, sizeof(__dst));
      std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__dst, *(char **)(*(void *)&v23 + 8), *(char **)(*(void *)&v23 + 16), (uint64_t)(*(void *)(*(void *)&v23 + 16) - *(void *)(*(void *)&v23 + 8)) >> 5);
      nitro::flexible_type_fail(0);
      std::string::size_type v24 = __dst.__r_.__value_.__r.__words[0];
      if (!__dst.__r_.__value_.__r.__words[0]) {
        goto LABEL_63;
      }
      std::string::size_type v25 = __dst.__r_.__value_.__l.__size_;
      std::string::size_type v26 = __dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
      {
        do
          std::string::size_type v25 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v25 - 32);
        while (v25 != v24);
        std::string::size_type v26 = __dst.__r_.__value_.__r.__words[0];
      }
      __dst.__r_.__value_.__l.__size_ = v24;
      size_t v22 = (void *)v26;
LABEL_62:
      operator delete(v22);
      uint64_t v9 = 0;
      goto LABEL_66;
    case 6:
    case 8:
      __break(1u);
      return result;
    case 7:
      goto LABEL_66;
    case 9:
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(*(void *)v8 + 8));
      nitro::flexible_type_fail(0);
      if (v331)
      {
        v332 = v331;
        operator delete(v331);
      }
      if (v329)
      {
        v330 = v329;
        operator delete(v329);
      }
      int64_t v18 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
      if (!__dst.__r_.__value_.__r.__words[2]
        || atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_63:
        uint64_t v9 = 0;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        uint64_t v9 = 0;
      }
      goto LABEL_66;
    default:
      uint64_t v9 = *(void *)v8;
      goto LABEL_66;
  }
}

void sub_192646BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  a56 = (void *)*MEMORY[0x1E4FBA418];
  *(void **)((char *)&a56 + *((void *)a56 - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  a57 = MEMORY[0x1E4FBA470] + 16;
  if (a70 < 0) {
    operator delete(a65);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a72);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a46);
  _Unwind_Resume(a1);
}

void sub_192647048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a40) {
    JUMPOUT(0x192647034);
  }
  JUMPOUT(0x192647038);
}

nitro::ndarray_container *nitro::nitro_builtins::Min@<X0>(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v305, (const nitro::ndarray_container *)(*(void *)this + 8));
  int v7 = *((unsigned __int8 *)a2 + 8);
  if (!*((unsigned char *)a2 + 8))
  {
    uint64_t v9 = (int)nitro::flexible_type_converter<int>::get((uint64_t)&__dst, (unsigned __int8 *)a2);
    goto LABEL_64;
  }
  if (v7 == 9)
  {
    if (*(_DWORD *)(*(void *)a2 + 8) == 3) {
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(*(void *)a2 + 8));
    }
    else {
      _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_((_DWORD *)(*(void *)a2 + 8), (uint64_t)&__dst);
    }
    nitro::ndarray<int>::ndarray((uint64_t)&v293, (uint64_t)&__dst);
    nitro::ndarray<int>::get_elements_copy((uint64_t *)&v293, (uint64_t *)&__idx);
    uint64_t v9 = *(int *)__idx;
    size_t v314 = __idx;
    operator delete((void *)__idx);
    if (__p)
    {
      *(void *)&long long v296 = __p;
      operator delete(__p);
    }
    if (v293.__r_.__value_.__r.__words[2])
    {
      v294[0] = (void *)v293.__r_.__value_.__r.__words[2];
      operator delete((void *)v293.__r_.__value_.__r.__words[2]);
    }
    std::string::size_type size = (std::__shared_weak_count *)v293.__r_.__value_.__l.__size_;
    if (v293.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v293.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    if (v311)
    {
      uint64_t v312 = v311;
      operator delete(v311);
    }
    if (v309)
    {
      unint64_t v310 = v309;
      operator delete(v309);
    }
    uint64_t v11 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
    if (__dst.__r_.__value_.__r.__words[2]
      && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
LABEL_64:
    int64_t v302 = 0;
    int64_t v303 = 0;
    int64_t v304 = 0;
    long long v35 = v306;
    int64_t v36 = v307 - (unsigned char *)v306;
    if (v307 == v306)
    {
      uint64_t v299 = 0;
      uint64_t v300 = 0;
      int64_t v298 = 0;
    }
    else
    {
      if (v36 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v37 = (char *)operator new(v307 - (unsigned char *)v306);
      int64_t v302 = v37;
      int64_t v304 = &v37[8 * (v36 >> 3)];
      memcpy(v37, v35, v36);
      int64_t v303 = &v37[8 * (v36 >> 3)];
      *(void *)&v37[8 * v9] = 1;
      uint64_t v299 = 0;
      uint64_t v300 = 0;
      int64_t v298 = 0;
      size_t v38 = (char *)operator new(v36);
      uint64_t v39 = &v38[8 * (v36 >> 3)];
      int64_t v298 = v38;
      uint64_t v300 = v39;
      memcpy(v38, v37, v36);
      uint64_t v299 = v39;
    }
    uint64_t v301 = v9;
    uint64_t v291 = v9;
    uint64_t v292 = a3;
    switch(v305[0])
    {
      case 3:
        nitro::ndarray<int>::ndarray((uint64_t)&__idx, (uint64_t)v305);
        uint64_t v321 = 0;
        uint64_t v322 = 0;
        std::string::size_type v320 = 0;
        int64_t v40 = v316 - v315;
        if (v316 == v315)
        {
          uint64_t v43 = 0;
          uint64_t v41 = 0;
          int64_t v45 = 0;
        }
        else
        {
          if (v40 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v41 = (char *)operator new(v316 - v315);
          uint64_t v42 = v40 >> 3;
          uint64_t v43 = &v41[8 * (v40 >> 3)];
          std::string::size_type v320 = v41;
          uint64_t v322 = v43;
          size_t v44 = v40 & 0xFFFFFFFFFFFFFFF8;
          bzero(v41, v40 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v321 = v43;
          int64_t v40 = (int64_t)operator new(v40);
          int64_t v45 = v40 + 8 * v42;
          bzero((void *)v40, v44);
        }
        nitro::ndarray<int>::init_from_shape((uint64_t **)&v298, &v293);
        if ((unint64_t)((v45 - v40) >> 3) <= 1) {
          unint64_t v114 = 1;
        }
        else {
          unint64_t v114 = (v45 - v40) >> 3;
        }
        unint64_t v115 = v43 - v41;
        uint64_t v116 = v301;
        if ((unint64_t)((v43 - v41) >> 3) <= 1) {
          unint64_t v117 = 1;
        }
        else {
          unint64_t v117 = (v43 - v41) >> 3;
        }
        std::string::size_type v118 = v293.__r_.__value_.__r.__words[0];
        uint64_t v119 = v297;
        unint64_t v120 = v115 >> 3;
        uint64_t v121 = v319;
        int64_t v286 = v45;
        size_t __lena = v43 - v41;
        uint64_t v283 = v301;
        int64_t v277 = v40;
        unint64_t v280 = v117 & 0xFFFFFFFFFFFFFFFELL;
        size_t v122 = __idx;
        unint64_t v123 = v315;
        unint64_t v268 = v317;
        std::string::size_type v271 = (char *)__p;
        std::vector<int>::pointer v262 = (char *)__p + 8;
        uint64_t v265 = (void *)(v40 + 8);
        v259 = v317 + 8;
        uint64_t v124 = (v115 >> 3) + 1;
        uint64_t v274 = v124;
        while (1)
        {
          if (v43 != v41)
          {
            std::vector<int>::pointer v125 = (void *)v40;
            unint64_t v126 = v117;
            unint64_t v127 = v43;
            unint64_t v128 = v120;
            uint64_t v129 = v121;
            memmove(v125, v41, __lena);
            uint64_t v121 = v129;
            unint64_t v120 = v128;
            uint64_t v43 = v127;
            unint64_t v117 = v126;
            uint64_t v124 = v274;
            int64_t v40 = v277;
            uint64_t v116 = v283;
            int64_t v45 = v286;
          }
          *(void *)(v40 + 8 * v116) = 0;
          if (v45 == v40)
          {
            uint64_t v130 = 0;
            goto LABEL_143;
          }
          if (v114 < 2) {
            break;
          }
          uint64_t v132 = 0;
          uint64_t v133 = 0;
          unint64_t v134 = v114 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v135 = v262;
          uint64_t v136 = v265;
          do
          {
            v132 += *(v135 - 1) * *(v136 - 1);
            v133 += *v135 * *v136;
            v136 += 2;
            v135 += 2;
            v134 -= 2;
          }
          while (v134);
          uint64_t v130 = v133 + v132;
          unint64_t v131 = v114 & 0xFFFFFFFFFFFFFFFELL;
          if (v114 != (v114 & 0xFFFFFFFFFFFFFFFELL)) {
            goto LABEL_141;
          }
LABEL_143:
          if (v43 == v41)
          {
            uint64_t v144 = 0;
            goto LABEL_152;
          }
          if (v117 < 2)
          {
            uint64_t v144 = 0;
            unint64_t v145 = 0;
LABEL_150:
            unint64_t v151 = v117 - v145;
            uint64_t v152 = 8 * v145;
            char v153 = &v268[8 * v145];
            uint64_t v154 = (uint64_t *)&v41[v152];
            do
            {
              uint64_t v156 = *v154++;
              uint64_t v155 = v156;
              uint64_t v157 = *(void *)v153;
              v153 += 8;
              v144 += v157 * v155;
              --v151;
            }
            while (v151);
            goto LABEL_152;
          }
          uint64_t v146 = 0;
          uint64_t v147 = 0;
          unint64_t v148 = v280;
          std::string::size_type v149 = v259;
          std::string::size_type v150 = v41 + 8;
          do
          {
            v146 += *(v149 - 1) * *(v150 - 1);
            v147 += *v149 * *v150;
            v150 += 2;
            v149 += 2;
            v148 -= 2;
          }
          while (v148);
          uint64_t v144 = v147 + v146;
          unint64_t v145 = v280;
          if (v117 != v280) {
            goto LABEL_150;
          }
LABEL_152:
          uint64_t v158 = 4 * (v130 + v119);
          int v159 = *(_DWORD *)(v122 + 4 * (v144 + v121));
          if (*(_DWORD *)(v118 + v158) < v159) {
            int v159 = *(_DWORD *)(v118 + v158);
          }
          *(_DWORD *)(v118 + v158) = v159;
          if ((int)v120 >= 1)
          {
            uint64_t v160 = v124;
            int v161 = v120;
            while (1)
            {
              uint64_t v162 = 8 * (v160 - 2);
              unint64_t v163 = *(void *)&v41[v162] + 1;
              *(void *)&v41[v162] = v163;
              if (v163 < *(void *)&v123[v162]) {
                break;
              }
              *(void *)&v41[8 * (v160 - 2)] = 0;
              --v161;
              if ((unint64_t)--v160 <= 1) {
                goto LABEL_160;
              }
            }
            if (v161 > 0) {
              continue;
            }
          }
LABEL_160:
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&__dst, &v293);
          goto LABEL_234;
        }
        uint64_t v130 = 0;
        unint64_t v131 = 0;
LABEL_141:
        unint64_t v137 = v114 - v131;
        uint64_t v138 = 8 * v131;
        __n128 v139 = &v271[8 * v131];
        uint64_t v140 = (uint64_t *)(v40 + v138);
        do
        {
          uint64_t v142 = *v140++;
          uint64_t v141 = v142;
          uint64_t v143 = *(void *)v139;
          v139 += 8;
          v130 += v143 * v141;
          --v137;
        }
        while (v137);
        goto LABEL_143;
      case 5:
        nitro::ndarray<unsigned char>::ndarray((uint64_t)&__idx, (uint64_t)v305);
        uint64_t v321 = 0;
        uint64_t v322 = 0;
        std::string::size_type v320 = 0;
        int64_t v40 = v316 - v315;
        if (v316 == v315)
        {
          int v58 = 0;
          unint64_t v56 = 0;
          int64_t v60 = 0;
        }
        else
        {
          if (v40 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v56 = (char *)operator new(v316 - v315);
          uint64_t v57 = v40 >> 3;
          int v58 = &v56[8 * (v40 >> 3)];
          std::string::size_type v320 = v56;
          uint64_t v322 = v58;
          size_t v59 = v40 & 0xFFFFFFFFFFFFFFF8;
          bzero(v56, v40 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v321 = v58;
          int64_t v40 = (int64_t)operator new(v40);
          int64_t v60 = v40 + 8 * v57;
          bzero((void *)v40, v59);
        }
        nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)&v298, &v293);
        if ((unint64_t)((v60 - v40) >> 3) <= 1) {
          unint64_t v214 = 1;
        }
        else {
          unint64_t v214 = (v60 - v40) >> 3;
        }
        unint64_t v215 = v58 - v56;
        if ((unint64_t)((v58 - v56) >> 3) <= 1) {
          unint64_t v216 = 1;
        }
        else {
          unint64_t v216 = (v58 - v56) >> 3;
        }
        while (1)
        {
          if (v58 != v56) {
            memmove((void *)v40, v56, v58 - v56);
          }
          *(void *)(v40 + 8 * v301) = 0;
          if (v60 == v40)
          {
            uint64_t v217 = 0;
            goto LABEL_216;
          }
          if (v214 < 2) {
            break;
          }
          uint64_t v219 = 0;
          uint64_t v220 = 0;
          uint64_t v221 = (char *)__p + 8;
          v223 = (void *)(v40 + 8);
          unint64_t v222 = v214 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v219 += *(v221 - 1) * *(v223 - 1);
            v220 += *v221 * *v223;
            v223 += 2;
            v221 += 2;
            v222 -= 2;
          }
          while (v222);
          uint64_t v217 = v220 + v219;
          unint64_t v218 = v214 & 0xFFFFFFFFFFFFFFFELL;
          if (v214 != (v214 & 0xFFFFFFFFFFFFFFFELL)) {
            goto LABEL_214;
          }
LABEL_216:
          if (v58 == v56)
          {
            uint64_t v231 = 0;
            goto LABEL_225;
          }
          if (v216 < 2)
          {
            uint64_t v231 = 0;
            unint64_t v232 = 0;
LABEL_223:
            unint64_t v238 = v216 - v232;
            uint64_t v239 = 8 * v232;
            uint64_t v240 = &v317[v239];
            double v241 = (uint64_t *)&v56[v239];
            do
            {
              uint64_t v243 = *v241++;
              uint64_t v242 = v243;
              uint64_t v244 = *(void *)v240;
              v240 += 8;
              v231 += v244 * v242;
              --v238;
            }
            while (v238);
            goto LABEL_225;
          }
          uint64_t v233 = 0;
          uint64_t v234 = 0;
          uint64_t v235 = v317 + 8;
          unint64_t v236 = v216 & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v237 = v56 + 8;
          do
          {
            v233 += *(v235 - 1) * *(v237 - 1);
            v234 += *v235 * *v237;
            v237 += 2;
            v235 += 2;
            v236 -= 2;
          }
          while (v236);
          uint64_t v231 = v234 + v233;
          unint64_t v232 = v216 & 0xFFFFFFFFFFFFFFFELL;
          if (v216 != (v216 & 0xFFFFFFFFFFFFFFFELL)) {
            goto LABEL_223;
          }
LABEL_225:
          uint64_t v245 = v297 + v217;
          unsigned int v246 = *(unsigned __int8 *)(__idx + v319 + v231);
          if (*(unsigned __int8 *)(v293.__r_.__value_.__r.__words[0] + v245) < v246) {
            LOBYTE(v246) = *(unsigned char *)(v293.__r_.__value_.__r.__words[0] + v245);
          }
          *(unsigned char *)(v293.__r_.__value_.__r.__words[0] + v245) = v246;
          if ((int)(v215 >> 3) >= 1)
          {
            int v247 = v315;
            uint64_t v248 = (v215 >> 3) + 1;
            unint64_t v249 = v215 >> 3;
            while (1)
            {
              uint64_t v250 = 8 * (v248 - 2);
              unint64_t v251 = *(void *)&v56[v250] + 1;
              *(void *)&v56[v250] = v251;
              if (v251 < *(void *)&v247[v250]) {
                break;
              }
              *(void *)&v56[8 * (v248 - 2)] = 0;
              LODWORD(v249) = v249 - 1;
              if ((unint64_t)--v248 <= 1) {
                goto LABEL_233;
              }
            }
            if ((int)v249 > 0) {
              continue;
            }
          }
LABEL_233:
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&__dst, &v293);
LABEL_234:
          unint64_t v112 = v291;
          uint64_t v111 = v292;
          if (__p)
          {
            *(void *)&long long v296 = __p;
            operator delete(__p);
          }
          if (v293.__r_.__value_.__r.__words[2])
          {
            v294[0] = (void *)v293.__r_.__value_.__r.__words[2];
            operator delete((void *)v293.__r_.__value_.__r.__words[2]);
          }
          uint64_t v252 = (std::__shared_weak_count *)v293.__r_.__value_.__l.__size_;
          if (v293.__r_.__value_.__l.__size_
            && !atomic_fetch_add((atomic_ullong *volatile)(v293.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
            std::__shared_weak_count::__release_weak(v252);
            if (v40) {
LABEL_241:
            }
              operator delete((void *)v40);
          }
          else
          {
LABEL_240:
            if (v40) {
              goto LABEL_241;
            }
          }
          if (v320) {
            operator delete(v320);
          }
          if (v317)
          {
            v318 = v317;
            operator delete(v317);
          }
          if (v315)
          {
            long long v316 = v315;
            operator delete(v315);
          }
          uint64_t v253 = (std::__shared_weak_count *)v314;
          if (v314 && !atomic_fetch_add((atomic_ullong *volatile)(v314 + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
            std::__shared_weak_count::__release_weak(v253);
          }
          if (v298)
          {
            uint64_t v299 = v298;
            operator delete(v298);
          }
          size_t __idx = 0;
          size_t v314 = 0;
          unint64_t v315 = 0;
          if (v112)
          {
            if (v112 >> 61) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            v254 = (char *)operator new(8 * v112);
            size_t __idx = (size_t)v254;
            unint64_t v315 = &v254[8 * v112];
            bzero(v254, 8 * v112);
            size_t v314 = (size_t)&v254[8 * v112];
          }
          nitro::ndarray_container::squeeze((uint64_t)&__dst, &__idx, (uint64_t)&v293);
          *(void *)uint64_t v111 = 0;
          *(unsigned char *)(v111 + 8) = 9;
          operator new();
        }
        uint64_t v217 = 0;
        unint64_t v218 = 0;
LABEL_214:
        unint64_t v224 = v214 - v218;
        uint64_t v225 = 8 * v218;
        uint64_t v226 = (uint64_t *)((char *)__p + v225);
        uint64_t v227 = (uint64_t *)(v40 + v225);
        do
        {
          uint64_t v229 = *v227++;
          uint64_t v228 = v229;
          uint64_t v230 = *v226++;
          v217 += v230 * v228;
          --v224;
        }
        while (v224);
        goto LABEL_216;
      case 9:
        nitro::ndarray<float>::ndarray((uint64_t)&__idx, (uint64_t)v305);
        uint64_t v321 = 0;
        uint64_t v322 = 0;
        std::string::size_type v320 = 0;
        int64_t v40 = v316 - v315;
        if (v316 == v315)
        {
          uint64_t v48 = 0;
          size_t v46 = 0;
          int64_t v50 = 0;
        }
        else
        {
          if (v40 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          size_t v46 = (char *)operator new(v316 - v315);
          uint64_t v47 = v40 >> 3;
          uint64_t v48 = &v46[8 * (v40 >> 3)];
          std::string::size_type v320 = v46;
          uint64_t v322 = v48;
          size_t v49 = v40 & 0xFFFFFFFFFFFFFFF8;
          bzero(v46, v40 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v321 = v48;
          int64_t v40 = (int64_t)operator new(v40);
          int64_t v50 = v40 + 8 * v47;
          bzero((void *)v40, v49);
        }
        nitro::ndarray<float>::init_from_shape((uint64_t **)&v298, &v293);
        if ((unint64_t)((v50 - v40) >> 3) <= 1) {
          unint64_t v61 = 1;
        }
        else {
          unint64_t v61 = (v50 - v40) >> 3;
        }
        unint64_t v62 = v48 - v46;
        uint64_t v63 = v301;
        if ((unint64_t)((v48 - v46) >> 3) <= 1) {
          unint64_t v64 = 1;
        }
        else {
          unint64_t v64 = (v48 - v46) >> 3;
        }
        std::string::size_type v65 = v293.__r_.__value_.__r.__words[0];
        uint64_t v66 = v297;
        unint64_t v67 = v62 >> 3;
        uint64_t v68 = v319;
        int64_t v285 = v50;
        size_t __len = v48 - v46;
        uint64_t v282 = v301;
        int64_t v276 = v40;
        unint64_t v279 = v64 & 0xFFFFFFFFFFFFFFFELL;
        size_t v69 = __idx;
        uint64_t v70 = v315;
        v267 = v317;
        std::vector<int>::pointer v270 = (char *)__p;
        uint64_t v261 = (char *)__p + 8;
        int64_t v264 = (void *)(v40 + 8);
        int64_t v258 = v317 + 8;
        uint64_t v71 = (v62 >> 3) + 1;
        uint64_t v273 = v71;
        while (1)
        {
          if (v48 != v46)
          {
            __n128 v72 = (void *)v40;
            unint64_t v73 = v64;
            uint64_t v74 = v48;
            unint64_t v75 = v67;
            uint64_t v76 = v68;
            memmove(v72, v46, __len);
            uint64_t v68 = v76;
            unint64_t v67 = v75;
            uint64_t v48 = v74;
            unint64_t v64 = v73;
            uint64_t v71 = v273;
            int64_t v40 = v276;
            uint64_t v63 = v282;
            int64_t v50 = v285;
          }
          *(void *)(v40 + 8 * v63) = 0;
          if (v50 == v40)
          {
            uint64_t v77 = 0;
            goto LABEL_100;
          }
          if (v61 < 2) {
            break;
          }
          uint64_t v79 = 0;
          uint64_t v80 = 0;
          unint64_t v81 = v61 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v82 = v261;
          int v83 = v264;
          do
          {
            v79 += *(v82 - 1) * *(v83 - 1);
            v80 += *v82 * *v83;
            v83 += 2;
            v82 += 2;
            v81 -= 2;
          }
          while (v81);
          uint64_t v77 = v80 + v79;
          unint64_t v78 = v61 & 0xFFFFFFFFFFFFFFFELL;
          if (v61 != (v61 & 0xFFFFFFFFFFFFFFFELL)) {
            goto LABEL_98;
          }
LABEL_100:
          if (v48 == v46)
          {
            uint64_t v91 = 0;
            goto LABEL_109;
          }
          if (v64 < 2)
          {
            uint64_t v91 = 0;
            unint64_t v92 = 0;
LABEL_107:
            unint64_t v98 = v64 - v92;
            uint64_t v99 = 8 * v92;
            uint64_t v100 = &v267[8 * v92];
            uint64_t v101 = (uint64_t *)&v46[v99];
            do
            {
              uint64_t v103 = *v101++;
              uint64_t v102 = v103;
              uint64_t v104 = *(void *)v100;
              v100 += 8;
              v91 += v104 * v102;
              --v98;
            }
            while (v98);
            goto LABEL_109;
          }
          uint64_t v93 = 0;
          uint64_t v94 = 0;
          unint64_t v95 = v279;
          uint64_t v96 = v258;
          __n128 v97 = v46 + 8;
          do
          {
            v93 += *(v96 - 1) * *(v97 - 1);
            v94 += *v96 * *v97;
            v97 += 2;
            v96 += 2;
            v95 -= 2;
          }
          while (v95);
          uint64_t v91 = v94 + v93;
          unint64_t v92 = v279;
          if (v64 != v279) {
            goto LABEL_107;
          }
LABEL_109:
          uint64_t v105 = 4 * (v77 + v66);
          float v106 = *(float *)(v65 + v105);
          if (v106 >= *(float *)(v69 + 4 * (v91 + v68))) {
            float v106 = *(float *)(v69 + 4 * (v91 + v68));
          }
          *(float *)(v65 + v105) = v106;
          if ((int)v67 >= 1)
          {
            uint64_t v107 = v71;
            int v108 = v67;
            while (1)
            {
              uint64_t v109 = 8 * (v107 - 2);
              unint64_t v110 = *(void *)&v46[v109] + 1;
              *(void *)&v46[v109] = v110;
              if (v110 < *(void *)&v70[v109]) {
                break;
              }
              *(void *)&v46[8 * (v107 - 2)] = 0;
              --v108;
              if ((unint64_t)--v107 <= 1) {
                goto LABEL_117;
              }
            }
            if (v108 > 0) {
              continue;
            }
          }
LABEL_117:
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__dst, &v293);
          unint64_t v112 = v291;
          uint64_t v111 = v292;
          if (__p)
          {
            *(void *)&long long v296 = __p;
            operator delete(__p);
          }
          if (v293.__r_.__value_.__r.__words[2])
          {
            v294[0] = (void *)v293.__r_.__value_.__r.__words[2];
            operator delete((void *)v293.__r_.__value_.__r.__words[2]);
          }
          uint64_t v113 = (std::__shared_weak_count *)v293.__r_.__value_.__l.__size_;
          if (v293.__r_.__value_.__l.__size_
            && !atomic_fetch_add((atomic_ullong *volatile)(v293.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
          goto LABEL_240;
        }
        uint64_t v77 = 0;
        unint64_t v78 = 0;
LABEL_98:
        unint64_t v84 = v61 - v78;
        uint64_t v85 = 8 * v78;
        int64_t v86 = &v270[8 * v78];
        uint64_t v87 = (uint64_t *)(v40 + v85);
        do
        {
          uint64_t v89 = *v87++;
          uint64_t v88 = v89;
          uint64_t v90 = *(void *)v86;
          v86 += 8;
          v77 += v90 * v88;
          --v84;
        }
        while (v84);
        goto LABEL_100;
      case 0xB:
        nitro::ndarray<half>::ndarray((uint64_t)&__idx, (uint64_t)v305);
        uint64_t v321 = 0;
        uint64_t v322 = 0;
        std::string::size_type v320 = 0;
        int64_t v40 = v316 - v315;
        if (v316 == v315)
        {
          __n128 v53 = 0;
          uint64_t v51 = 0;
          int64_t v55 = 0;
        }
        else
        {
          if (v40 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v51 = (char *)operator new(v316 - v315);
          uint64_t v52 = v40 >> 3;
          __n128 v53 = &v51[8 * (v40 >> 3)];
          std::string::size_type v320 = v51;
          uint64_t v322 = v53;
          size_t v54 = v40 & 0xFFFFFFFFFFFFFFF8;
          bzero(v51, v40 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v321 = v53;
          int64_t v40 = (int64_t)operator new(v40);
          int64_t v55 = v40 + 8 * v52;
          bzero((void *)v40, v54);
        }
        nitro::ndarray<half>::init_from_shape((uint64_t **)&v298, &v293);
        if ((unint64_t)((v55 - v40) >> 3) <= 1) {
          unint64_t v164 = 1;
        }
        else {
          unint64_t v164 = (v55 - v40) >> 3;
        }
        unint64_t v165 = v53 - v51;
        uint64_t v166 = v301;
        if ((unint64_t)((v53 - v51) >> 3) <= 1) {
          unint64_t v167 = 1;
        }
        else {
          unint64_t v167 = (v53 - v51) >> 3;
        }
        std::string::size_type v168 = v293.__r_.__value_.__r.__words[0];
        uint64_t v169 = v297;
        unint64_t v170 = v165 >> 3;
        uint64_t v171 = v319;
        int64_t v287 = v55;
        size_t __lenb = v53 - v51;
        uint64_t v284 = v301;
        int64_t v278 = v40;
        unint64_t v281 = v167 & 0xFFFFFFFFFFFFFFFELL;
        size_t v172 = __idx;
        uint64_t v173 = v315;
        v269 = v317;
        long long v272 = (char *)__p;
        std::vector<int>::pointer v263 = (char *)__p + 8;
        std::vector<int>::pointer v266 = (void *)(v40 + 8);
        uint64_t v260 = v317 + 8;
        uint64_t v174 = (v165 >> 3) + 1;
        uint64_t v275 = v174;
        break;
      default:
        printf("%d\n", v305[0]);
        nitro::ndarray_container::visit<nitro::nitro_builtins::Min(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Min(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
    }
    while (1)
    {
      if (v53 != v51)
      {
        uint64_t v175 = (void *)v40;
        unint64_t v176 = v167;
        unint64_t v177 = v53;
        unint64_t v178 = v170;
        uint64_t v179 = v171;
        memmove(v175, v51, __lenb);
        uint64_t v171 = v179;
        unint64_t v170 = v178;
        __n128 v53 = v177;
        unint64_t v167 = v176;
        uint64_t v174 = v275;
        int64_t v40 = v278;
        uint64_t v166 = v284;
        int64_t v55 = v287;
      }
      *(void *)(v40 + 8 * v166) = 0;
      if (v55 == v40)
      {
        uint64_t v180 = 0;
        goto LABEL_180;
      }
      if (v164 < 2) {
        break;
      }
      uint64_t v182 = 0;
      uint64_t v183 = 0;
      unint64_t v184 = v164 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v185 = v263;
      unint64_t v186 = v266;
      do
      {
        v182 += *(v185 - 1) * *(v186 - 1);
        v183 += *v185 * *v186;
        v186 += 2;
        v185 += 2;
        v184 -= 2;
      }
      while (v184);
      uint64_t v180 = v183 + v182;
      unint64_t v181 = v164 & 0xFFFFFFFFFFFFFFFELL;
      if (v164 != (v164 & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_178;
      }
LABEL_180:
      if (v53 == v51)
      {
        uint64_t v194 = 0;
        goto LABEL_189;
      }
      if (v167 < 2)
      {
        uint64_t v194 = 0;
        unint64_t v195 = 0;
LABEL_187:
        unint64_t v201 = v167 - v195;
        uint64_t v202 = 8 * v195;
        unint64_t v203 = &v269[8 * v195];
        uint64_t v204 = (uint64_t *)&v51[v202];
        do
        {
          uint64_t v206 = *v204++;
          uint64_t v205 = v206;
          uint64_t v207 = *(void *)v203;
          v203 += 8;
          v194 += v207 * v205;
          --v201;
        }
        while (v201);
        goto LABEL_189;
      }
      uint64_t v196 = 0;
      uint64_t v197 = 0;
      unint64_t v198 = v281;
      unint64_t v199 = v260;
      uint64_t v200 = v51 + 8;
      do
      {
        v196 += *(v199 - 1) * *(v200 - 1);
        v197 += *v199 * *v200;
        v200 += 2;
        v199 += 2;
        v198 -= 2;
      }
      while (v198);
      uint64_t v194 = v197 + v196;
      unint64_t v195 = v281;
      if (v167 != v281) {
        goto LABEL_187;
      }
LABEL_189:
      uint64_t v208 = 2 * (v180 + v169);
      short float v209 = *(short float *)(v168 + v208);
      if (v209 >= *(short float *)(v172 + 2 * (v194 + v171))) {
        short float v209 = *(short float *)(v172 + 2 * (v194 + v171));
      }
      *(short float *)(v168 + v208) = v209;
      if ((int)v170 >= 1)
      {
        uint64_t v210 = v174;
        int v211 = v170;
        while (1)
        {
          uint64_t v212 = 8 * (v210 - 2);
          unint64_t v213 = *(void *)&v51[v212] + 1;
          *(void *)&v51[v212] = v213;
          if (v213 < *(void *)&v173[v212]) {
            break;
          }
          *(void *)&v51[8 * (v210 - 2)] = 0;
          --v211;
          if ((unint64_t)--v210 <= 1) {
            goto LABEL_197;
          }
        }
        if (v211 > 0) {
          continue;
        }
      }
LABEL_197:
      nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&__dst, &v293);
      goto LABEL_234;
    }
    uint64_t v180 = 0;
    unint64_t v181 = 0;
LABEL_178:
    unint64_t v187 = v164 - v181;
    uint64_t v188 = 8 * v181;
    uint64_t v189 = &v272[8 * v181];
    std::vector<int> v190 = (uint64_t *)(v40 + v188);
    do
    {
      uint64_t v192 = *v190++;
      uint64_t v191 = v192;
      uint64_t v193 = *(void *)v189;
      v189 += 8;
      v180 += v193 * v191;
      --v187;
    }
    while (v187);
    goto LABEL_180;
  }
  if (v7 != 4)
  {
LABEL_63:
    uint64_t v9 = 0;
    goto LABEL_64;
  }
  unint64_t v8 = *(unsigned char **)(*(void *)a2 + 8);
  uint64_t v9 = 0;
  switch(v8[8])
  {
    case 1:
      uint64_t v9 = (uint64_t)*(double *)v8;
      goto LABEL_64;
    case 2:
      double v12 = *(double *)v8;
      int v13 = (const char **)(*(void *)v8 + 8);
      size_t __idx = 0;
      int v14 = (const char *)v13;
      if (*(char *)(*(void *)&v12 + 31) < 0) {
        int v14 = *v13;
      }
      size_t v15 = strlen(v14);
      if (v15 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v16 = v15;
      if (v15 >= 0x17)
      {
        uint64_t v32 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v32 = v15 | 7;
        }
        uint64_t v33 = v32 + 1;
        p_dst = (std::string *)operator new(v32 + 1);
        __dst.__r_.__value_.__l.__size_ = v16;
        __dst.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v15;
        p_dst = &__dst;
        if (!v15) {
          goto LABEL_55;
        }
      }
      memmove(p_dst, v14, v16);
LABEL_55:
      p_dst->__r_.__value_.__s.__data_[v16] = 0;
      uint64_t v9 = std::stoll(&__dst, &__idx, 10);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (*(char *)(*(void *)&v12 + 31) < 0) {
        uint64_t v34 = *(void *)(*(void *)&v12 + 16);
      }
      else {
        uint64_t v34 = *(unsigned __int8 *)(*(void *)&v12 + 31);
      }
      if (__idx != v34)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v256 = std::string::append(&v293, " cannot be interpreted as an integer");
        long long v257 = *(_OWORD *)&v256->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v256->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v257;
        v256->__r_.__value_.__l.__size_ = 0;
        v256->__r_.__value_.__r.__words[2] = 0;
        v256->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &__dst);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      goto LABEL_64;
    case 3:
      double v19 = *(double *)v8;
      memset(&__dst, 0, sizeof(__dst));
      std::string::size_type v21 = *(unsigned char **)(*(void *)&v19 + 8);
      std::string::size_type v20 = *(unsigned char **)(*(void *)&v19 + 16);
      int64_t v22 = v20 - v21;
      if (v20 == v21)
      {
        double v23 = 0;
      }
      else
      {
        if (v22 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        double v23 = operator new(v20 - v21);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
        __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v23 + 8 * (v22 >> 3);
        memcpy(v23, v21, v22);
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v23 + 8 * (v22 >> 3);
      }
      nitro::flexible_type_fail(0);
      if (!v23) {
        goto LABEL_63;
      }
      double v27 = v23;
      goto LABEL_62;
    case 4:
      double v24 = *(double *)v8;
      memset(&__dst, 0, sizeof(__dst));
      std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&__dst, *(void **)(*(void *)&v24 + 8), *(void **)(*(void *)&v24 + 16), (uint64_t)(*(void *)(*(void *)&v24 + 16) - *(void *)(*(void *)&v24 + 8)) >> 4);
      nitro::flexible_type_fail(0);
      std::string::size_type v25 = __dst.__r_.__value_.__r.__words[0];
      if (!__dst.__r_.__value_.__r.__words[0]) {
        goto LABEL_63;
      }
      std::string::size_type v26 = __dst.__r_.__value_.__l.__size_;
      double v27 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
      {
        do
        {
          v26 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&__dst.__r_.__value_.__r.__words[2], v26);
        }
        while (v26 != v25);
        double v27 = (void *)__dst.__r_.__value_.__r.__words[0];
      }
      __dst.__r_.__value_.__l.__size_ = v25;
      goto LABEL_62;
    case 5:
      double v28 = *(double *)v8;
      memset(&__dst, 0, sizeof(__dst));
      std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__dst, *(char **)(*(void *)&v28 + 8), *(char **)(*(void *)&v28 + 16), (uint64_t)(*(void *)(*(void *)&v28 + 16) - *(void *)(*(void *)&v28 + 8)) >> 5);
      nitro::flexible_type_fail(0);
      std::string::size_type v29 = __dst.__r_.__value_.__r.__words[0];
      if (!__dst.__r_.__value_.__r.__words[0]) {
        goto LABEL_63;
      }
      std::string::size_type v30 = __dst.__r_.__value_.__l.__size_;
      std::string::size_type v31 = __dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
      {
        do
          std::string::size_type v30 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v30 - 32);
        while (v30 != v29);
        std::string::size_type v31 = __dst.__r_.__value_.__r.__words[0];
      }
      __dst.__r_.__value_.__l.__size_ = v29;
      double v27 = (void *)v31;
LABEL_62:
      operator delete(v27);
      uint64_t v9 = 0;
      goto LABEL_64;
    case 6:
    case 8:
      __break(1u);
      return result;
    case 7:
      goto LABEL_64;
    case 9:
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(*(void *)v8 + 8));
      nitro::flexible_type_fail(0);
      if (v311)
      {
        uint64_t v312 = v311;
        operator delete(v311);
      }
      if (v309)
      {
        unint64_t v310 = v309;
        operator delete(v309);
      }
      int64_t v18 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
      if (!__dst.__r_.__value_.__r.__words[2]
        || atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        goto LABEL_63;
      }
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      uint64_t v9 = 0;
      goto LABEL_64;
    default:
      uint64_t v9 = *(void *)v8;
      goto LABEL_64;
  }
}

void sub_192648644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0) {
    operator delete(__p);
  }
  if (a31 < 0)
  {
    operator delete(a26);
    if ((v62 & 1) == 0)
    {
LABEL_8:
      nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a46);
      _Unwind_Resume(a1);
    }
  }
  else if (!v62)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v61);
  goto LABEL_8;
}

void sub_192648964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a40) {
    JUMPOUT(0x192648950);
  }
  JUMPOUT(0x192648954);
}

void nitro::nitro_builtins::Maximum(atomic_ullong **this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *((unsigned __int8 *)this + 8);
  unsigned int v7 = *((unsigned __int8 *)a2 + 8);
  if (v6 > 1 || v7 > 1)
  {
    if (v6 < 2 || v7 < 2) {
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v17);
    }
    nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*this + 1), (uint64_t)&v17);
    nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(void *)a2 + 8), (uint64_t)&v16);
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v15);
  }
  int64_t v18 = 0;
  char v19 = 0;
  if (&v18 != this)
  {
    int64_t v18 = *this;
    char v19 = v6;
  }
  nitro::nitro_builtins::flex_max((nitro::nitro_builtins *)&v18, a2, a3);
  switch(v19)
  {
    case 2:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v10 = v18;
        if (v18)
        {
          if (*((char *)v18 + 31) < 0) {
            operator delete((void *)v18[1]);
          }
          uint64_t v11 = (uint64_t)v10;
          uint64_t v12 = 0x1012C404EF22A49;
          goto LABEL_35;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v13 = v18;
        if (v18)
        {
          int v14 = (void *)v18[1];
          if (v14)
          {
            uint64_t v18[2] = (atomic_ullong)v14;
            operator delete(v14);
          }
          uint64_t v11 = (uint64_t)v13;
          uint64_t v12 = 0x1080C409938AC02;
          goto LABEL_35;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1 && v18)
      {
        uint64_t v11 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair((uint64_t)v18);
        goto LABEL_31;
      }
      break;
    case 5:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1 && v18)
      {
        uint64_t v11 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair((uint64_t)v18);
LABEL_31:
        uint64_t v12 = 0x1020C405E66F15BLL;
        goto LABEL_35;
      }
      break;
    case 9:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1 && v18)
      {
        uint64_t v11 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v18);
        uint64_t v12 = 0x10B0C4002311774;
LABEL_35:
        MEMORY[0x192FF16B0](v11, v12);
      }
      break;
    default:
      return;
  }
}

void sub_19264A25C(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray((void *)(v1 - 232));
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_19264A3E0(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 - 64))
  {
    case 2:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()((atomic_ullong *volatile *)(v1 - 72));
      break;
    case 3:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()((atomic_ullong *volatile *)(v1 - 72));
      break;
    case 4:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()((atomic_ullong *volatile *)(v1 - 72));
      break;
    case 5:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()((atomic_ullong *volatile *)(v1 - 72));
      break;
    case 9:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()((atomic_ullong *volatile *)(v1 - 72));
      break;
    default:
      _Unwind_Resume(exception_object);
      return;
  }
  _Unwind_Resume(*(_Unwind_Exception **)(v1 - 152));
}

void nitro::nitro_builtins::Minimum(atomic_ullong **this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *((unsigned __int8 *)this + 8);
  unsigned int v7 = *((unsigned __int8 *)a2 + 8);
  if (v6 > 1 || v7 > 1)
  {
    if (v6 < 2 || v7 < 2) {
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v17);
    }
    nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*this + 1), (uint64_t)&v17);
    nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(void *)a2 + 8), (uint64_t)&v16);
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v15);
  }
  int64_t v18 = 0;
  char v19 = 0;
  if (&v18 != this)
  {
    int64_t v18 = *this;
    char v19 = v6;
  }
  nitro::nitro_builtins::flex_min((nitro::nitro_builtins *)&v18, a2, a3);
  switch(v19)
  {
    case 2:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v10 = v18;
        if (v18)
        {
          if (*((char *)v18 + 31) < 0) {
            operator delete((void *)v18[1]);
          }
          uint64_t v11 = (uint64_t)v10;
          uint64_t v12 = 0x1012C404EF22A49;
          goto LABEL_35;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v13 = v18;
        if (v18)
        {
          int v14 = (void *)v18[1];
          if (v14)
          {
            uint64_t v18[2] = (atomic_ullong)v14;
            operator delete(v14);
          }
          uint64_t v11 = (uint64_t)v13;
          uint64_t v12 = 0x1080C409938AC02;
          goto LABEL_35;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1 && v18)
      {
        uint64_t v11 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair((uint64_t)v18);
        goto LABEL_31;
      }
      break;
    case 5:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1 && v18)
      {
        uint64_t v11 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair((uint64_t)v18);
LABEL_31:
        uint64_t v12 = 0x1020C405E66F15BLL;
        goto LABEL_35;
      }
      break;
    case 9:
      if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL) == 1 && v18)
      {
        uint64_t v11 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v18);
        uint64_t v12 = 0x10B0C4002311774;
LABEL_35:
        MEMORY[0x192FF16B0](v11, v12);
      }
      break;
    default:
      return;
  }
}

void sub_19264BD88(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray((void *)(v1 - 232));
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_19264BF0C(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 - 64))
  {
    case 2:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()((atomic_ullong *volatile *)(v1 - 72));
      break;
    case 3:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()((atomic_ullong *volatile *)(v1 - 72));
      break;
    case 4:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()((atomic_ullong *volatile *)(v1 - 72));
      break;
    case 5:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()((atomic_ullong *volatile *)(v1 - 72));
      break;
    case 9:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()((atomic_ullong *volatile *)(v1 - 72));
      break;
    default:
      _Unwind_Resume(exception_object);
      return;
  }
  _Unwind_Resume(*(_Unwind_Exception **)(v1 - 152));
}

void nitro::nitro_builtins::All(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v5 = *((unsigned __int8 *)this + 8);
  if (v5 != 9)
  {
    if (v5 > 1)
    {
      if (*((int *)global_logger() + 169) <= 6)
      {
        uint64_t v321 = (file_logger *)global_logger();
        started = file_logger::start_stream(v321, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 1244, 1);
        uint64_t v323 = pthread_getspecific(*((void *)started + 74));
        if (v323 && *((unsigned char *)v323 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v323 + 2, (uint64_t)"Unsupported type for All operation", 34);
        }
        uint64_t v324 = pthread_getspecific(*((void *)started + 74));
        if (v324 && *((unsigned char *)v324 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v324 + 2, (uint64_t)"\n", 1);
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
          }
        }
      }
      int64_t v326 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v326, "Unsupported type for All operation");
    }
    int is_zero = nitro::flexible_type::is_zero(this);
    *(unsigned char *)(a4 + 8) = 0;
    *(void *)a4 = is_zero ^ 1u;
    return;
  }
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v335, (const nitro::ndarray_container *)(*(void *)this + 8));
  int v8 = *((unsigned __int8 *)a2 + 8);
  if (*((unsigned char *)a2 + 8))
  {
    if (v8 == 9)
    {
      if (*(_DWORD *)(*(void *)a2 + 8) == 3) {
        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__str, (const nitro::ndarray_container *)(*(void *)a2 + 8));
      }
      else {
        _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_((_DWORD *)(*(void *)a2 + 8), (uint64_t)&__str);
      }
      uint64_t v11 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v357, (uint64_t)&__str);
      nitro::ndarray<int>::get_elements_copy(v11, (uint64_t *)&__p);
      uint64_t v10 = *(int *)__p;
      v347 = (std::__shared_weak_count *)__p;
      operator delete(__p);
      if (v359)
      {
        v360 = v359;
        operator delete(v359);
      }
      if (v357.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v358 = v357.__r_.__value_.__r.__words[2];
        operator delete((void *)v357.__r_.__value_.__r.__words[2]);
      }
      std::string::size_type size = (std::__shared_weak_count *)v357.__r_.__value_.__l.__size_;
      if (v357.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(v357.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
      if (v344[0])
      {
        v344[1] = v344[0];
        operator delete(v344[0]);
      }
      if (v341)
      {
        v342 = v341;
        operator delete(v341);
      }
      int v13 = (std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2];
      if (__str.__r_.__value_.__r.__words[2]
        && !atomic_fetch_add((atomic_ullong *volatile)(__str.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    else
    {
      if (v8 == 4)
      {
        uint64_t v9 = *(unsigned char **)(*(void *)a2 + 8);
        uint64_t v10 = 0;
        switch(v9[8])
        {
          case 1:
            uint64_t v10 = (uint64_t)*(double *)v9;
            goto LABEL_41;
          case 2:
            double v14 = *(double *)v9;
            int v15 = (char **)(*(void *)v9 + 8);
            long long __p = 0;
            uint64_t v16 = (char *)v15;
            if (*(char *)(*(void *)&v14 + 31) < 0) {
              uint64_t v16 = *v15;
            }
            std::string::basic_string[abi:ne180100]<0>(&__str, v16);
            uint64_t v10 = std::stoll(&__str, (size_t *)&__p, 10);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (*(char *)(*(void *)&v14 + 31) < 0) {
              int v17 = *(void **)(*(void *)&v14 + 16);
            }
            else {
              int v17 = (void *)*(unsigned __int8 *)(*(void *)&v14 + 31);
            }
            if (__p != v17)
            {
              v318 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              uint64_t v319 = std::string::append(&v357, " cannot be interpreted as an integer");
              long long v320 = *(_OWORD *)&v319->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v319->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v320;
              v319->__r_.__value_.__l.__size_ = 0;
              v319->__r_.__value_.__r.__words[2] = 0;
              v319->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v318, &__str);
              __cxa_throw(v318, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            goto LABEL_41;
          case 3:
            std::vector<double>::vector(&__str, *(void *)v9 + 8);
            nitro::flexible_type_fail(0);
            if (__str.__r_.__value_.__r.__words[0])
            {
              __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            break;
          case 4:
            double v18 = *(double *)v9;
            memset(&__str, 0, sizeof(__str));
            std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&__str, *(void **)(*(void *)&v18 + 8), *(void **)(*(void *)&v18 + 16), (uint64_t)(*(void *)(*(void *)&v18 + 16) - *(void *)(*(void *)&v18 + 8)) >> 4);
            nitro::flexible_type_fail(0);
            std::vector<nitro::flexible_type>::~vector[abi:ne180100]((void **)&__str.__r_.__value_.__l.__data_);
            break;
          case 5:
            double v19 = *(double *)v9;
            memset(&__str, 0, sizeof(__str));
            std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__str, *(char **)(*(void *)&v19 + 8), *(char **)(*(void *)&v19 + 16), (uint64_t)(*(void *)(*(void *)&v19 + 16) - *(void *)(*(void *)&v19 + 8)) >> 5);
            nitro::flexible_type_fail(0);
            std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::~vector[abi:ne180100]((void **)&__str.__r_.__value_.__l.__data_);
            break;
          case 6:
          case 8:
            __break(1u);
            return;
          case 7:
            goto LABEL_41;
          case 9:
            nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__str, (const nitro::ndarray_container *)(*(void *)v9 + 8));
            nitro::flexible_type_fail(0);
            nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&__str);
            break;
          default:
            uint64_t v10 = *(void *)v9;
            goto LABEL_41;
        }
      }
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = (int)nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)a2);
  }
LABEL_41:
  v332 = 0;
  v333 = 0;
  size_t v334 = 0;
  uint64_t v20 = v337[0];
  int64_t v21 = (char *)v337[1] - (char *)v337[0];
  if ((char *)v337[1] - (char *)v337[0] < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  int64_t v22 = (char *)operator new((char *)v337[1] - (char *)v337[0]);
  double v23 = &v22[8 * (v21 >> 3)];
  v332 = v22;
  size_t v334 = v23;
  memcpy(v22, v20, v21);
  double v24 = (unint64_t *)&v22[8 * v10];
  unint64_t v27 = *v24;
  std::string::size_type v25 = v24 + 1;
  unint64_t v26 = v27;
  uint64_t v28 = v23 - v25;
  if (v23 != v25) {
    memmove(&v22[8 * v10], v25, v23 - v25);
  }
  v333 = &v22[8 * v10 + v28];
  int64_t v29 = 8 * v10 + v28;
  if (v29)
  {
    uint64_t v328 = 0;
    v329 = 0;
    int64_t v327 = 0;
    if (v29 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v327 = operator new(8 * v10 + v28);
    v329 = (char *)v327 + 8 * (v29 >> 3);
    memcpy(v327, v22, v29);
    uint64_t v328 = v329;
    uint64_t v330 = v10;
    unint64_t v331 = v26;
    switch(v335[0])
    {
      case 3:
        nitro::ndarray<int>::ndarray((uint64_t)&__p, (uint64_t)v335);
        int64_t v30 = v349 - (unsigned char *)v348;
        uint64_t v31 = (v349 - (unsigned char *)v348) >> 3;
        uint64_t v363 = 0;
        v364 = 0;
        v362 = 0;
        unint64_t v32 = v31 - 1;
        if (v31 == 1)
        {
          uint64_t v34 = 0;
          uint64_t v33 = 0;
        }
        else
        {
          if (v32 >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v33 = (char *)operator new(8 * v32);
          uint64_t v34 = &v33[8 * v32];
          v362 = v33;
          v364 = v34;
          bzero(v33, (v30 & 0xFFFFFFFFFFFFFFF8) - 8);
          uint64_t v363 = v34;
        }
        nitro::ndarray<int>::init_from_shape((uint64_t **)&v327, &v357);
        unint64_t v126 = v34 - v33;
        unint64_t v127 = (v34 - v33) >> 3;
        if (v127 <= 1) {
          unint64_t v128 = 1;
        }
        else {
          unint64_t v128 = (v34 - v33) >> 3;
        }
        while (1)
        {
          v354 = 0;
          v355 = 0;
          v356 = 0;
          if (v34 == v33)
          {
            uint64_t v129 = 0;
          }
          else
          {
            if ((v126 & 0x8000000000000000) != 0) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v129 = (char *)operator new(v34 - v33);
            v354 = v129;
            v356 = &v129[8 * v127];
            memcpy(v129, v33, v34 - v33);
            v355 = &v129[8 * v127];
          }
          uint64_t v353 = 0;
          std::vector<unsigned long>::insert(&v354, (uint64_t)&v129[8 * v330], &v353);
          if (v34 == v33)
          {
            uint64_t v130 = 0;
            goto LABEL_153;
          }
          if (v128 < 2) {
            break;
          }
          uint64_t v132 = 0;
          uint64_t v133 = 0;
          unint64_t v134 = v359 + 8;
          uint64_t v136 = v33 + 8;
          unint64_t v135 = v128 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v132 += *(v134 - 1) * *(v136 - 1);
            v133 += *v134 * *v136;
            v136 += 2;
            v134 += 2;
            v135 -= 2;
          }
          while (v135);
          uint64_t v130 = v133 + v132;
          unint64_t v131 = v128 & 0xFFFFFFFFFFFFFFFELL;
          if (v128 != (v128 & 0xFFFFFFFFFFFFFFFELL)) {
            goto LABEL_151;
          }
LABEL_153:
          uint64_t v144 = v354;
          unint64_t v145 = v355;
          uint64_t v146 = v355 - v354;
          if (v355 == v354)
          {
            uint64_t v148 = 0;
            goto LABEL_165;
          }
          if ((unint64_t)(v146 >> 3) <= 1) {
            unint64_t v147 = 1;
          }
          else {
            unint64_t v147 = v146 >> 3;
          }
          if (v147 < 2)
          {
            uint64_t v148 = 0;
            unint64_t v149 = 0;
LABEL_163:
            unint64_t v155 = v147 - v149;
            uint64_t v156 = 8 * v149;
            uint64_t v157 = (uint64_t *)((char *)v350 + v156);
            uint64_t v158 = &v354[v156];
            do
            {
              uint64_t v160 = *(void *)v158;
              v158 += 8;
              uint64_t v159 = v160;
              uint64_t v161 = *v157++;
              v148 += v161 * v159;
              --v155;
            }
            while (v155);
            goto LABEL_165;
          }
          uint64_t v150 = 0;
          uint64_t v151 = 0;
          unint64_t v149 = v147 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v152 = v354 + 8;
          char v153 = (char *)v350 + 8;
          unint64_t v154 = v147 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v150 += *(v153 - 1) * *((void *)v152 - 1);
            v151 += *v153 * *(void *)v152;
            v152 += 16;
            v153 += 2;
            v154 -= 2;
          }
          while (v154);
          uint64_t v148 = v151 + v150;
          if (v147 != v149) {
            goto LABEL_163;
          }
LABEL_165:
          if (v331)
          {
            uint64_t v162 = 0;
            unint64_t v163 = v146 >> 3;
            if (v163 <= 1) {
              unint64_t v163 = 1;
            }
            unint64_t v164 = __p;
            unint64_t v165 = (char *)v350;
            uint64_t v166 = (char *)v350 + 8;
            int v167 = 1;
            while (1)
            {
              int v169 = v164[v352 + v148];
              ++*(void *)&v144[8 * v330];
              if (v145 == v144)
              {
                uint64_t v148 = 0;
                goto LABEL_170;
              }
              if (v163 < 2) {
                break;
              }
              uint64_t v171 = 0;
              uint64_t v172 = 0;
              unint64_t v173 = v163 & 0xFFFFFFFFFFFFFFFELL;
              uint64_t v174 = v166;
              uint64_t v175 = v144 + 8;
              do
              {
                v171 += *(v174 - 1) * *(v175 - 1);
                v172 += *v174 * *v175;
                v175 += 2;
                v174 += 2;
                v173 -= 2;
              }
              while (v173);
              uint64_t v148 = v172 + v171;
              unint64_t v170 = v163 & 0xFFFFFFFFFFFFFFFELL;
              if (v163 != (v163 & 0xFFFFFFFFFFFFFFFELL)) {
                goto LABEL_180;
              }
LABEL_170:
              v167 *= v169;
              if (++v162 >= v331 || v167 == 0)
              {
                *(_DWORD *)(v357.__r_.__value_.__r.__words[0] + 4 * (v361 + v130)) = v167;
                goto LABEL_185;
              }
            }
            uint64_t v148 = 0;
            unint64_t v170 = 0;
LABEL_180:
            unint64_t v176 = v163 - v170;
            uint64_t v177 = 8 * v170;
            unint64_t v178 = &v165[8 * v170];
            uint64_t v179 = &v144[v177];
            do
            {
              uint64_t v181 = *(void *)v179;
              v179 += 8;
              uint64_t v180 = v181;
              uint64_t v182 = *(void *)v178;
              v178 += 8;
              v148 += v182 * v180;
              --v176;
            }
            while (v176);
            goto LABEL_170;
          }
          *(_DWORD *)(v357.__r_.__value_.__r.__words[0] + 4 * (v361 + v130)) = 1;
          if (v144)
          {
LABEL_185:
            v355 = v144;
            operator delete(v144);
          }
          if ((int)(v126 >> 3) >= 1)
          {
            std::string::size_type v183 = v357.__r_.__value_.__r.__words[2];
            uint64_t v184 = (v126 >> 3) + 1;
            unint64_t v185 = v126 >> 3;
            while (1)
            {
              uint64_t v186 = 8 * (v184 - 2);
              unint64_t v187 = *(void *)&v33[v186] + 1;
              *(void *)&v33[v186] = v187;
              if (v187 < *(void *)(v183 + v186)) {
                break;
              }
              *(void *)&v33[8 * (v184 - 2)] = 0;
              LODWORD(v185) = v185 - 1;
              if ((unint64_t)--v184 <= 1) {
                goto LABEL_192;
              }
            }
            if ((int)v185 >= 1) {
              continue;
            }
          }
LABEL_192:
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&__str, &v357);
          goto LABEL_306;
        }
        uint64_t v130 = 0;
        unint64_t v131 = 0;
LABEL_151:
        unint64_t v137 = v128 - v131;
        uint64_t v138 = 8 * v131;
        __n128 v139 = &v359[v138];
        uint64_t v140 = (uint64_t *)&v33[v138];
        do
        {
          uint64_t v142 = *v140++;
          uint64_t v141 = v142;
          uint64_t v143 = *(void *)v139;
          v139 += 8;
          v130 += v143 * v141;
          --v137;
        }
        while (v137);
        goto LABEL_153;
      case 5:
        nitro::ndarray<unsigned char>::ndarray((uint64_t)&__p, (uint64_t)v335);
        int64_t v44 = v349 - (unsigned char *)v348;
        uint64_t v45 = (v349 - (unsigned char *)v348) >> 3;
        uint64_t v363 = 0;
        v364 = 0;
        v362 = 0;
        unint64_t v46 = v45 - 1;
        if (v45 == 1)
        {
          uint64_t v48 = 0;
          uint64_t v47 = 0;
        }
        else
        {
          if (v46 >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v47 = (char *)operator new(8 * v46);
          uint64_t v48 = &v47[8 * v46];
          v362 = v47;
          v364 = v48;
          bzero(v47, (v44 & 0xFFFFFFFFFFFFFFF8) - 8);
          uint64_t v363 = v48;
        }
        nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)&v327, &v357);
        unint64_t v188 = v48 - v47;
        unint64_t v189 = (v48 - v47) >> 3;
        if (v189 <= 1) {
          unint64_t v190 = 1;
        }
        else {
          unint64_t v190 = (v48 - v47) >> 3;
        }
        while (1)
        {
          v354 = 0;
          v355 = 0;
          v356 = 0;
          if (v48 == v47)
          {
            uint64_t v191 = 0;
          }
          else
          {
            if ((v188 & 0x8000000000000000) != 0) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v191 = (char *)operator new(v48 - v47);
            v354 = v191;
            v356 = &v191[8 * v189];
            memcpy(v191, v47, v48 - v47);
            v355 = &v191[8 * v189];
          }
          uint64_t v353 = 0;
          std::vector<unsigned long>::insert(&v354, (uint64_t)&v191[8 * v330], &v353);
          if (v48 == v47)
          {
            uint64_t v192 = 0;
            goto LABEL_210;
          }
          if (v190 < 2) {
            break;
          }
          uint64_t v194 = 0;
          uint64_t v195 = 0;
          uint64_t v196 = v359 + 8;
          unint64_t v198 = v47 + 8;
          unint64_t v197 = v190 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v194 += *(v196 - 1) * *(v198 - 1);
            v195 += *v196 * *v198;
            v198 += 2;
            v196 += 2;
            v197 -= 2;
          }
          while (v197);
          uint64_t v192 = v195 + v194;
          unint64_t v193 = v190 & 0xFFFFFFFFFFFFFFFELL;
          if (v190 != (v190 & 0xFFFFFFFFFFFFFFFELL)) {
            goto LABEL_208;
          }
LABEL_210:
          uint64_t v207 = v354;
          uint64_t v206 = v355;
          uint64_t v208 = v355 - v354;
          if (v355 == v354)
          {
            uint64_t v210 = 0;
            goto LABEL_222;
          }
          if ((unint64_t)(v208 >> 3) <= 1) {
            unint64_t v209 = 1;
          }
          else {
            unint64_t v209 = v208 >> 3;
          }
          if (v209 < 2)
          {
            uint64_t v210 = 0;
            unint64_t v211 = 0;
LABEL_220:
            unint64_t v217 = v209 - v211;
            uint64_t v218 = 8 * v211;
            uint64_t v219 = (uint64_t *)((char *)v350 + v218);
            uint64_t v220 = &v354[v218];
            do
            {
              uint64_t v222 = *(void *)v220;
              v220 += 8;
              uint64_t v221 = v222;
              uint64_t v223 = *v219++;
              v210 += v223 * v221;
              --v217;
            }
            while (v217);
            goto LABEL_222;
          }
          uint64_t v212 = 0;
          uint64_t v213 = 0;
          unint64_t v211 = v209 & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v214 = v354 + 8;
          unint64_t v215 = (char *)v350 + 8;
          unint64_t v216 = v209 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v212 += *(v215 - 1) * *((void *)v214 - 1);
            v213 += *v215 * *(void *)v214;
            v214 += 16;
            v215 += 2;
            v216 -= 2;
          }
          while (v216);
          uint64_t v210 = v213 + v212;
          if (v209 != v211) {
            goto LABEL_220;
          }
LABEL_222:
          if (v331)
          {
            uint64_t v224 = 0;
            unint64_t v225 = v208 >> 3;
            if (v225 <= 1) {
              unint64_t v226 = 1;
            }
            else {
              unint64_t v226 = v225;
            }
            uint64_t v227 = (unsigned __int8 *)__p;
            uint64_t v228 = (char *)v350;
            uint64_t v229 = (char *)v350 + 8;
            int v230 = 1;
            while (1)
            {
              int v232 = v227[v352 + v210];
              ++*(void *)&v207[8 * v330];
              if (v206 == v207)
              {
                uint64_t v210 = 0;
                goto LABEL_228;
              }
              if (v226 < 2) {
                break;
              }
              uint64_t v234 = 0;
              uint64_t v235 = 0;
              unint64_t v236 = v226 & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v237 = v229;
              unint64_t v238 = v207 + 8;
              do
              {
                v234 += *(v237 - 1) * *(v238 - 1);
                v235 += *v237 * *v238;
                v238 += 2;
                v237 += 2;
                v236 -= 2;
              }
              while (v236);
              uint64_t v210 = v235 + v234;
              unint64_t v233 = v226 & 0xFFFFFFFFFFFFFFFELL;
              if (v226 != (v226 & 0xFFFFFFFFFFFFFFFELL)) {
                goto LABEL_238;
              }
LABEL_228:
              v230 *= v232;
              if (++v224 >= v331 || v230 == 0) {
                goto LABEL_242;
              }
            }
            uint64_t v210 = 0;
            unint64_t v233 = 0;
LABEL_238:
            unint64_t v239 = v226 - v233;
            uint64_t v240 = 8 * v233;
            double v241 = &v228[8 * v233];
            uint64_t v242 = &v207[v240];
            do
            {
              uint64_t v244 = *(void *)v242;
              v242 += 8;
              uint64_t v243 = v244;
              uint64_t v245 = *(void *)v241;
              v241 += 8;
              v210 += v245 * v243;
              --v239;
            }
            while (v239);
            goto LABEL_228;
          }
          LOBYTE(v230) = 1;
LABEL_242:
          *(unsigned char *)(v357.__r_.__value_.__r.__words[0] + v361 + v192) = v230;
          if (v354)
          {
            v355 = v354;
            operator delete(v354);
          }
          if ((int)(v188 >> 3) >= 1)
          {
            std::string::size_type v246 = v357.__r_.__value_.__r.__words[2];
            uint64_t v247 = (v188 >> 3) + 1;
            unint64_t v248 = v188 >> 3;
            while (1)
            {
              uint64_t v249 = 8 * (v247 - 2);
              unint64_t v250 = *(void *)&v47[v249] + 1;
              *(void *)&v47[v249] = v250;
              if (v250 < *(void *)(v246 + v249)) {
                break;
              }
              *(void *)&v47[8 * (v247 - 2)] = 0;
              LODWORD(v248) = v248 - 1;
              if ((unint64_t)--v247 <= 1) {
                goto LABEL_250;
              }
            }
            if ((int)v248 >= 1) {
              continue;
            }
          }
LABEL_250:
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&__str, &v357);
          goto LABEL_306;
        }
        uint64_t v192 = 0;
        unint64_t v193 = 0;
LABEL_208:
        unint64_t v199 = v190 - v193;
        uint64_t v200 = 8 * v193;
        unint64_t v201 = &v359[v200];
        uint64_t v202 = (uint64_t *)&v47[v200];
        do
        {
          uint64_t v204 = *v202++;
          uint64_t v203 = v204;
          uint64_t v205 = *(void *)v201;
          v201 += 8;
          v192 += v205 * v203;
          --v199;
        }
        while (v199);
        goto LABEL_210;
      case 9:
        nitro::ndarray<float>::ndarray((uint64_t)&__p, (uint64_t)v335);
        int64_t v39 = v349 - (unsigned char *)v348;
        uint64_t v40 = (v349 - (unsigned char *)v348) >> 3;
        uint64_t v363 = 0;
        v364 = 0;
        v362 = 0;
        unint64_t v41 = v40 - 1;
        if (v40 == 1)
        {
          uint64_t v43 = 0;
          uint64_t v42 = 0;
        }
        else
        {
          if (v41 >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v42 = (char *)operator new(8 * v41);
          uint64_t v43 = &v42[8 * v41];
          v362 = v42;
          v364 = v43;
          bzero(v42, (v39 & 0xFFFFFFFFFFFFFFF8) - 8);
          uint64_t v363 = v43;
        }
        nitro::ndarray<float>::init_from_shape((uint64_t **)&v327, &v357);
        unint64_t v65 = v43 - v42;
        unint64_t v66 = (v43 - v42) >> 3;
        if (v66 <= 1) {
          unint64_t v67 = 1;
        }
        else {
          unint64_t v67 = (v43 - v42) >> 3;
        }
        while (1)
        {
          v354 = 0;
          v355 = 0;
          v356 = 0;
          if (v43 == v42)
          {
            uint64_t v68 = 0;
          }
          else
          {
            if ((v65 & 0x8000000000000000) != 0) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v68 = (char *)operator new(v43 - v42);
            v354 = v68;
            v356 = &v68[8 * v66];
            memcpy(v68, v42, v43 - v42);
            v355 = &v68[8 * v66];
          }
          uint64_t v353 = 0;
          std::vector<unsigned long>::insert(&v354, (uint64_t)&v68[8 * v330], &v353);
          if (v43 == v42)
          {
            uint64_t v69 = 0;
            goto LABEL_99;
          }
          if (v67 < 2) {
            break;
          }
          uint64_t v71 = 0;
          uint64_t v72 = 0;
          unint64_t v73 = v359 + 8;
          unint64_t v75 = v42 + 8;
          unint64_t v74 = v67 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v71 += *(v73 - 1) * *(v75 - 1);
            v72 += *v73 * *v75;
            v75 += 2;
            v73 += 2;
            v74 -= 2;
          }
          while (v74);
          uint64_t v69 = v72 + v71;
          unint64_t v70 = v67 & 0xFFFFFFFFFFFFFFFELL;
          if (v67 != (v67 & 0xFFFFFFFFFFFFFFFELL)) {
            goto LABEL_97;
          }
LABEL_99:
          int v83 = v354;
          unint64_t v84 = v355;
          uint64_t v85 = v355 - v354;
          if (v355 == v354)
          {
            uint64_t v87 = 0;
            goto LABEL_111;
          }
          if ((unint64_t)(v85 >> 3) <= 1) {
            unint64_t v86 = 1;
          }
          else {
            unint64_t v86 = v85 >> 3;
          }
          if (v86 < 2)
          {
            uint64_t v87 = 0;
            unint64_t v88 = 0;
LABEL_109:
            unint64_t v94 = v86 - v88;
            uint64_t v95 = 8 * v88;
            uint64_t v96 = (uint64_t *)((char *)v350 + v95);
            __n128 v97 = &v354[v95];
            do
            {
              uint64_t v99 = *(void *)v97;
              v97 += 8;
              uint64_t v98 = v99;
              uint64_t v100 = *v96++;
              v87 += v100 * v98;
              --v94;
            }
            while (v94);
            goto LABEL_111;
          }
          uint64_t v89 = 0;
          uint64_t v90 = 0;
          unint64_t v88 = v86 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v91 = v354 + 8;
          unint64_t v92 = (char *)v350 + 8;
          unint64_t v93 = v86 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v89 += *(v92 - 1) * *((void *)v91 - 1);
            v90 += *v92 * *(void *)v91;
            v91 += 16;
            v92 += 2;
            v93 -= 2;
          }
          while (v93);
          uint64_t v87 = v90 + v89;
          if (v86 != v88) {
            goto LABEL_109;
          }
LABEL_111:
          if (v331)
          {
            uint64_t v101 = 0;
            unint64_t v102 = v85 >> 3;
            if (v102 <= 1) {
              unint64_t v102 = 1;
            }
            uint64_t v103 = (float *)__p;
            uint64_t v104 = (char *)v350;
            uint64_t v105 = (char *)v350 + 8;
            int v106 = 1;
            while (1)
            {
              float v107 = v103[v352 + v87];
              ++*(void *)&v83[8 * v330];
              if (v84 == v83)
              {
                uint64_t v87 = 0;
              }
              else
              {
                if (v102 >= 2)
                {
                  uint64_t v109 = 0;
                  uint64_t v110 = 0;
                  unint64_t v111 = v102 & 0xFFFFFFFFFFFFFFFELL;
                  unint64_t v112 = v105;
                  uint64_t v113 = v83 + 8;
                  do
                  {
                    v109 += *(v112 - 1) * *(v113 - 1);
                    v110 += *v112 * *v113;
                    v113 += 2;
                    v112 += 2;
                    v111 -= 2;
                  }
                  while (v111);
                  uint64_t v87 = v110 + v109;
                  unint64_t v108 = v102 & 0xFFFFFFFFFFFFFFFELL;
                  if (v102 == (v102 & 0xFFFFFFFFFFFFFFFELL)) {
                    goto LABEL_124;
                  }
                }
                else
                {
                  uint64_t v87 = 0;
                  unint64_t v108 = 0;
                }
                unint64_t v114 = v102 - v108;
                uint64_t v115 = 8 * v108;
                uint64_t v116 = &v104[8 * v108];
                unint64_t v117 = &v83[v115];
                do
                {
                  uint64_t v119 = *(void *)v117;
                  v117 += 8;
                  uint64_t v118 = v119;
                  uint64_t v120 = *(void *)v116;
                  v116 += 8;
                  v87 += v120 * v118;
                  --v114;
                }
                while (v114);
              }
LABEL_124:
              int v106 = (int)(float)(v107 * (float)v106);
              if (++v101 >= v331 || !v106)
              {
                *(float *)(v357.__r_.__value_.__r.__words[0] + 4 * (v361 + v69)) = (float)v106;
                goto LABEL_128;
              }
            }
          }
          *(_DWORD *)(v357.__r_.__value_.__r.__words[0] + 4 * (v361 + v69)) = 1065353216;
          if (v83)
          {
LABEL_128:
            v355 = v83;
            operator delete(v83);
          }
          if ((int)(v65 >> 3) >= 1)
          {
            std::string::size_type v121 = v357.__r_.__value_.__r.__words[2];
            uint64_t v122 = (v65 >> 3) + 1;
            unint64_t v123 = v65 >> 3;
            while (1)
            {
              uint64_t v124 = 8 * (v122 - 2);
              unint64_t v125 = *(void *)&v42[v124] + 1;
              *(void *)&v42[v124] = v125;
              if (v125 < *(void *)(v121 + v124)) {
                break;
              }
              *(void *)&v42[8 * (v122 - 2)] = 0;
              LODWORD(v123) = v123 - 1;
              if ((unint64_t)--v122 <= 1) {
                goto LABEL_135;
              }
            }
            if ((int)v123 >= 1) {
              continue;
            }
          }
LABEL_135:
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__str, &v357);
          goto LABEL_306;
        }
        uint64_t v69 = 0;
        unint64_t v70 = 0;
LABEL_97:
        unint64_t v76 = v67 - v70;
        uint64_t v77 = 8 * v70;
        unint64_t v78 = &v359[v77];
        uint64_t v79 = (uint64_t *)&v42[v77];
        do
        {
          uint64_t v81 = *v79++;
          uint64_t v80 = v81;
          uint64_t v82 = *(void *)v78;
          v78 += 8;
          v69 += v82 * v80;
          --v76;
        }
        while (v76);
        goto LABEL_99;
      case 0xB:
        nitro::ndarray<half>::ndarray((uint64_t)&__p, (uint64_t)v335);
        int64_t v49 = v349 - (unsigned char *)v348;
        uint64_t v50 = (v349 - (unsigned char *)v348) >> 3;
        uint64_t v363 = 0;
        v364 = 0;
        v362 = 0;
        unint64_t v51 = v50 - 1;
        if (v50 == 1)
        {
          __n128 v53 = 0;
          uint64_t v52 = 0;
        }
        else
        {
          if (v51 >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v52 = (char *)operator new(8 * v51);
          __n128 v53 = &v52[8 * v51];
          v362 = v52;
          v364 = v53;
          bzero(v52, (v49 & 0xFFFFFFFFFFFFFFF8) - 8);
          uint64_t v363 = v53;
        }
        nitro::ndarray<half>::init_from_shape((uint64_t **)&v327, &v357);
        unint64_t v251 = v53 - v52;
        unint64_t v252 = (v53 - v52) >> 3;
        if (v252 <= 1) {
          unint64_t v253 = 1;
        }
        else {
          unint64_t v253 = (v53 - v52) >> 3;
        }
        break;
      default:
        printf("%d\n", v335[0]);
        nitro::ndarray_container::visit<nitro::nitro_builtins::All(nitro::flexible_type const&,nitro::flexible_type const&)::$_1>(nitro::nitro_builtins::All(nitro::flexible_type const&,nitro::flexible_type const&)::$_1)::{lambda(void)#1}::operator()();
    }
    while (1)
    {
      v354 = 0;
      v355 = 0;
      v356 = 0;
      if (v53 == v52)
      {
        v254 = 0;
      }
      else
      {
        if ((v251 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        v254 = (char *)operator new(v53 - v52);
        v354 = v254;
        v356 = &v254[8 * v252];
        memcpy(v254, v52, v53 - v52);
        v355 = &v254[8 * v252];
      }
      uint64_t v353 = 0;
      std::vector<unsigned long>::insert(&v354, (uint64_t)&v254[8 * v330], &v353);
      if (v53 == v52)
      {
        uint64_t v255 = 0;
        goto LABEL_268;
      }
      if (v253 < 2) {
        break;
      }
      uint64_t v257 = 0;
      uint64_t v258 = 0;
      v259 = v359 + 8;
      uint64_t v261 = v52 + 8;
      unint64_t v260 = v253 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v257 += *(v259 - 1) * *(v261 - 1);
        v258 += *v259 * *v261;
        v261 += 2;
        v259 += 2;
        v260 -= 2;
      }
      while (v260);
      uint64_t v255 = v258 + v257;
      unint64_t v256 = v253 & 0xFFFFFFFFFFFFFFFELL;
      if (v253 != (v253 & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_266;
      }
LABEL_268:
      v269 = v354;
      std::vector<int>::pointer v270 = v355;
      uint64_t v271 = v355 - v354;
      if (v355 == v354)
      {
        uint64_t v273 = 0;
        goto LABEL_280;
      }
      if ((unint64_t)(v271 >> 3) <= 1) {
        unint64_t v272 = 1;
      }
      else {
        unint64_t v272 = v271 >> 3;
      }
      if (v272 < 2)
      {
        uint64_t v273 = 0;
        unint64_t v274 = 0;
LABEL_278:
        unint64_t v280 = v272 - v274;
        uint64_t v281 = 8 * v274;
        uint64_t v282 = (uint64_t *)((char *)v350 + v281);
        uint64_t v283 = &v354[v281];
        do
        {
          uint64_t v285 = *(void *)v283;
          v283 += 8;
          uint64_t v284 = v285;
          uint64_t v286 = *v282++;
          v273 += v286 * v284;
          --v280;
        }
        while (v280);
        goto LABEL_280;
      }
      uint64_t v275 = 0;
      uint64_t v276 = 0;
      unint64_t v274 = v272 & 0xFFFFFFFFFFFFFFFELL;
      int64_t v277 = v354 + 8;
      int64_t v278 = (char *)v350 + 8;
      unint64_t v279 = v272 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v275 += *(v278 - 1) * *((void *)v277 - 1);
        v276 += *v278 * *(void *)v277;
        v277 += 16;
        v278 += 2;
        v279 -= 2;
      }
      while (v279);
      uint64_t v273 = v276 + v275;
      if (v272 != v274) {
        goto LABEL_278;
      }
LABEL_280:
      if (v331)
      {
        uint64_t v287 = 0;
        unint64_t v288 = v271 >> 3;
        if (v288 <= 1) {
          unint64_t v288 = 1;
        }
        v289 = __p;
        v290 = (char *)v350;
        uint64_t v291 = (char *)v350 + 8;
        int v292 = 1;
        while (1)
        {
          _H0 = v289[v352 + v273];
          ++*(void *)&v269[8 * v330];
          if (v270 == v269)
          {
            uint64_t v273 = 0;
          }
          else
          {
            if (v288 >= 2)
            {
              uint64_t v295 = 0;
              uint64_t v296 = 0;
              unint64_t v297 = v288 & 0xFFFFFFFFFFFFFFFELL;
              int64_t v298 = v291;
              uint64_t v299 = v269 + 8;
              do
              {
                v295 += *(v298 - 1) * *(v299 - 1);
                v296 += *v298 * *v299;
                v299 += 2;
                v298 += 2;
                v297 -= 2;
              }
              while (v297);
              uint64_t v273 = v296 + v295;
              unint64_t v294 = v288 & 0xFFFFFFFFFFFFFFFELL;
              if (v288 == (v288 & 0xFFFFFFFFFFFFFFFELL)) {
                goto LABEL_293;
              }
            }
            else
            {
              uint64_t v273 = 0;
              unint64_t v294 = 0;
            }
            unint64_t v300 = v288 - v294;
            uint64_t v301 = 8 * v294;
            int64_t v302 = &v290[8 * v294];
            int64_t v303 = &v269[v301];
            do
            {
              uint64_t v305 = *(void *)v303;
              v303 += 8;
              uint64_t v304 = v305;
              uint64_t v306 = *(void *)v302;
              v302 += 8;
              v273 += v306 * v304;
              --v300;
            }
            while (v300);
          }
LABEL_293:
          __asm { FCVT            S0, H0 }
          int v292 = (int)(float)((float)v292 * _S0);
          if (++v287 >= v331 || !v292) {
            goto LABEL_297;
          }
        }
      }
      int v292 = 1;
LABEL_297:
      _S0 = (float)v292;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v357.__r_.__value_.__r.__words[0] + 2 * (v361 + v255)) = LOWORD(_S0);
      if (v269)
      {
        v355 = v269;
        operator delete(v269);
      }
      if ((int)(v251 >> 3) >= 1)
      {
        std::string::size_type v309 = v357.__r_.__value_.__r.__words[2];
        uint64_t v310 = (v251 >> 3) + 1;
        unint64_t v311 = v251 >> 3;
        while (1)
        {
          uint64_t v312 = 8 * (v310 - 2);
          unint64_t v313 = *(void *)&v52[v312] + 1;
          *(void *)&v52[v312] = v313;
          if (v313 < *(void *)(v309 + v312)) {
            break;
          }
          *(void *)&v52[8 * (v310 - 2)] = 0;
          LODWORD(v311) = v311 - 1;
          if ((unint64_t)--v310 <= 1) {
            goto LABEL_305;
          }
        }
        if ((int)v311 >= 1) {
          continue;
        }
      }
LABEL_305:
      nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&__str, &v357);
LABEL_306:
      if (v359)
      {
        v360 = v359;
        operator delete(v359);
      }
      if (v357.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v358 = v357.__r_.__value_.__r.__words[2];
        operator delete((void *)v357.__r_.__value_.__r.__words[2]);
      }
      size_t v314 = (std::__shared_weak_count *)v357.__r_.__value_.__l.__size_;
      if (v357.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(v357.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
        std::__shared_weak_count::__release_weak(v314);
      }
      if (v362) {
        operator delete(v362);
      }
      if (v350)
      {
        v351 = v350;
        operator delete(v350);
      }
      if (v348)
      {
        uint64_t v349 = v348;
        operator delete(v348);
      }
      unint64_t v315 = v347;
      if (v347 && !atomic_fetch_add(&v347->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
        std::__shared_weak_count::__release_weak(v315);
      }
      *(void *)a4 = 0;
      *(unsigned char *)(a4 + 8) = 9;
      operator new();
    }
    uint64_t v255 = 0;
    unint64_t v256 = 0;
LABEL_266:
    unint64_t v262 = v253 - v256;
    uint64_t v263 = 8 * v256;
    int64_t v264 = &v359[v263];
    uint64_t v265 = (uint64_t *)&v52[v263];
    do
    {
      uint64_t v267 = *v265++;
      uint64_t v266 = v267;
      uint64_t v268 = *(void *)v264;
      v264 += 8;
      v255 += v268 * v266;
      --v262;
    }
    while (v262);
    goto LABEL_268;
  }
  switch(v335[0])
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&__str, (uint64_t)v335);
      if (!v26) {
        goto LABEL_75;
      }
      long long v35 = v343;
      int64_t v36 = (_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * v345);
      unint64_t v37 = 1;
      int v38 = 1;
      do
      {
        v38 *= *v36;
        if (v37 >= v26) {
          break;
        }
        ++v37;
        v36 += *(void *)v343;
      }
      while (v38);
      goto LABEL_332;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&__str, (uint64_t)v335);
      if (v26)
      {
        long long v35 = v343;
        uint64_t v63 = (unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + v345);
        unint64_t v64 = 1;
        int v38 = 1;
        do
        {
          v38 *= *v63;
          if (v64 >= v26) {
            break;
          }
          ++v64;
          v63 += *(void *)v343;
        }
        while (v38);
      }
      else
      {
        int v38 = 1;
        long long v35 = v343;
      }
      goto LABEL_332;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&__str, (uint64_t)v335);
      if (!v26) {
        goto LABEL_75;
      }
      long long v35 = v343;
      size_t v54 = (float *)(__str.__r_.__value_.__r.__words[0] + 4 * v345);
      unint64_t v55 = 1;
      int v38 = 1;
      do
      {
        int v38 = (int)(float)(*v54 * (float)v38);
        if (v55 >= v26) {
          break;
        }
        ++v55;
        v54 += *(void *)v343;
      }
      while (v38);
      goto LABEL_332;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&__str, (uint64_t)v335);
      if (!v26)
      {
LABEL_75:
        int v38 = 1;
        long long v35 = v343;
        if (!v343) {
          goto LABEL_334;
        }
        goto LABEL_333;
      }
      long long v35 = v343;
      unint64_t v56 = (__int16 *)(__str.__r_.__value_.__r.__words[0] + 2 * v345);
      unint64_t v57 = 1;
      int v38 = 1;
      do
      {
        _H0 = *v56;
        __asm { FCVT            S0, H0 }
        int v38 = (int)(float)((float)v38 * _S0);
        if (v57 >= v26) {
          break;
        }
        ++v57;
        v56 += *(void *)v343;
      }
      while (v38);
LABEL_332:
      if (v35)
      {
LABEL_333:
        v344[0] = v35;
        operator delete(v35);
      }
LABEL_334:
      if (__str.__r_.__value_.__r.__words[2])
      {
        v341 = (void *)__str.__r_.__value_.__r.__words[2];
        operator delete((void *)__str.__r_.__value_.__r.__words[2]);
      }
      uint64_t v317 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
        std::__shared_weak_count::__release_weak(v317);
      }
      *(unsigned char *)(a4 + 8) = 0;
      *(void *)a4 = v38;
      if (v332) {
        operator delete(v332);
      }
      if (v338)
      {
        uint64_t v339 = v338;
        operator delete(v338);
      }
      if (v337[0])
      {
        v337[1] = v337[0];
        operator delete(v337[0]);
      }
      long long v316 = v336;
      if (v336 && !atomic_fetch_add(&v336->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
        std::__shared_weak_count::__release_weak(v316);
      }
      return;
    default:
      printf("%d\n", v335[0]);
      nitro::ndarray_container::visit<nitro::nitro_builtins::All(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::All(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
}

void sub_19264D9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v47 - 169) < 0)
  {
    operator delete(*(void **)(v47 - 192));
    if ((v46 & 1) == 0)
    {
LABEL_8:
      nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v45);
  goto LABEL_8;
}

void sub_19264DD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18) {
    JUMPOUT(0x19264DD04);
  }
  JUMPOUT(0x19264DD08);
}

void nitro::nitro_builtins::Pad(nitro::nitro_builtins *this, const nitro::flexible_type *a2, const nitro::flexible_type *a3, const nitro::flexible_type *a4)
{
  uint64_t v5 = *(void *)a2;
  int v7 = *(_DWORD *)(v5 + 8);
  unsigned int v6 = (const nitro::ndarray_container *)(v5 + 8);
  if (v7 == 3) {
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v10, v6);
  }
  else {
    _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v6, (uint64_t)v10);
  }
  nitro::ndarray<int>::ndarray((uint64_t)&v16, (uint64_t)v10);
  if (__p)
  {
    int v15 = __p;
    operator delete(__p);
  }
  if (v12)
  {
    int v13 = v12;
    operator delete(v12);
  }
  int v8 = v11;
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(void *)this + 8), (uint64_t)&v9);
  nitro::ndarray_container::copy((nitro::ndarray_container *)&v9);
}

void sub_19264FD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  nitro::ndarray<float>::~ndarray((void *)(v71 - 176));
  nitro::ndarray<float>::~ndarray(&a71);
  nitro::nitro_builtins::Pad(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::~$_0((uint64_t)&a20);
  if (__p) {
    operator delete(__p);
  }
  if (a33) {
    operator delete(a33);
  }
  if (a36) {
    operator delete(a36);
  }
  if (a39) {
    operator delete(a39);
  }
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a52);
  nitro::ndarray<float>::~ndarray(&a62);
  _Unwind_Resume(a1);
}

uint64_t nitro::nitro_builtins::LogicalNot@<X0>(nitro::nitro_builtins *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = nitro::flexible_type::is_zero(this);
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)a2 = result;
  return result;
}

void nitro::nitro_builtins::Fill(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  nitro::flexible_type_converter<std::vector<int>>::get((unsigned __int8 *)this, &v94);
  double v6 = 0.0;
  switch(*((unsigned char *)a2 + 8))
  {
    case 1:
      double v6 = *(double *)a2;
      goto LABEL_43;
    case 2:
      double v7 = *(double *)a2;
      int v8 = (const char **)(*(void *)a2 + 8);
      size_t __idx = 0;
      int v9 = (const char *)v8;
      if (*(char *)(*(void *)&v7 + 31) < 0) {
        int v9 = *v8;
      }
      size_t v10 = strlen(v9);
      if (v10 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v11 = v10;
      if (v10 >= 0x17)
      {
        uint64_t v27 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17) {
          uint64_t v27 = v10 | 7;
        }
        uint64_t v28 = v27 + 1;
        p_dst = (std::string *)operator new(v27 + 1);
        __dst.__r_.__value_.__l.__size_ = v11;
        __dst.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10;
        p_dst = &__dst;
        if (!v10)
        {
LABEL_34:
          p_dst->__r_.__value_.__s.__data_[v11] = 0;
          double v29 = std::stod(&__dst, &__idx);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (*(char *)(*(void *)&v7 + 31) < 0)
          {
            if (__idx == *(void *)(*(void *)&v7 + 16)) {
              goto LABEL_38;
            }
          }
          else if (__idx == *(unsigned __int8 *)(*(void *)&v7 + 31))
          {
LABEL_38:
            float v30 = v29;
            double v6 = v30;
LABEL_43:
            std::vector<int>::pointer begin = v94.__begin_;
            std::vector<int>::pointer end = v94.__end_;
            memset(&__dst, 0, sizeof(__dst));
            int64_t v33 = (char *)v94.__end_ - (char *)v94.__begin_;
            if (v94.__end_ != v94.__begin_)
            {
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFDLL) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v34 = (char *)operator new(2 * v33);
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
              __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v34[8 * (v33 >> 2)];
              std::vector<int>::pointer v35 = begin;
              int64_t v36 = v34;
              if ((unint64_t)(v33 - 4) < 0x1C) {
                goto LABEL_102;
              }
              unint64_t v37 = ((unint64_t)(v33 - 4) >> 2) + 1;
              std::vector<int>::pointer v35 = &begin[v37 & 0x7FFFFFFFFFFFFFF8];
              int64_t v36 = &v34[8 * (v37 & 0x7FFFFFFFFFFFFFF8)];
              int v38 = v34 + 32;
              std::vector<int>::pointer v39 = begin + 4;
              uint64_t v40 = v37 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v41 = *((_OWORD *)v39 - 1);
                *(void *)&long long v42 = (int)v41;
                *((void *)&v42 + 1) = SDWORD1(v41);
                long long v43 = v42;
                *(void *)&long long v42 = SDWORD2(v41);
                *((void *)&v42 + 1) = SHIDWORD(v41);
                long long v44 = v42;
                *(void *)&long long v42 = (int)*(_OWORD *)v39;
                *((void *)&v42 + 1) = (int)HIDWORD(*(void *)v39);
                long long v45 = v42;
                *(void *)&long long v42 = (int)*((void *)v39 + 1);
                *((void *)&v42 + 1) = (int)HIDWORD(*(_OWORD *)v39);
                *(v38 - 2) = v43;
                *(v38 - 1) = v44;
                _OWORD *v38 = v45;
                v38[1] = v42;
                v38 += 4;
                v39 += 8;
                v40 -= 8;
              }
              while (v40);
              if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_102:
                do
                {
                  uint64_t v46 = *v35++;
                  *(void *)int64_t v36 = v46;
                  v36 += 8;
                }
                while (v35 != end);
              }
              __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v36;
            }
            nitro::ndarray<float>::init_from_shape((uint64_t **)&__dst, &v90);
            if (__dst.__r_.__value_.__r.__words[0])
            {
              __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            if (v93) {
              goto LABEL_95;
            }
            uint64_t v48 = (uint64_t *)v90.__r_.__value_.__r.__words[2];
            uint64_t v47 = v91;
            std::string::size_type v49 = v90.__r_.__value_.__r.__words[0];
            uint64_t v50 = (uint64_t)v91 - v90.__r_.__value_.__r.__words[2];
            if (v91 == (uint64_t *)v90.__r_.__value_.__r.__words[2])
            {
              uint64_t v48 = v91;
LABEL_74:
              unint64_t v74 = 0;
              BOOL v77 = v91 == v48 || v90.__r_.__value_.__r.__words[0] == 0;
              unint64_t v78 = (char *)v91 - (char *)v48 - 8;
              uint64_t v79 = (v78 >> 3) + 1;
              if (!v77) {
                goto LABEL_83;
              }
LABEL_90:
              unint64_t v80 = 0;
              while (1)
              {
                if (v74 >= v80)
                {
                  nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__dst, &v90);
                  *(void *)a3 = 0;
                  *(unsigned char *)(a3 + 8) = 9;
                  operator new();
                }
                float v75 = v6;
                *(float *)(v49 + 4 * v74++) = v75;
                if (v77) {
                  goto LABEL_90;
                }
LABEL_83:
                if (v78 < 8) {
                  break;
                }
                uint64_t v82 = v79 & 0x3FFFFFFFFFFFFFFELL;
                int v83 = v48 + 1;
                uint64_t v84 = 1;
                uint64_t v85 = 1;
                do
                {
                  v84 *= *(v83 - 1);
                  v85 *= *v83;
                  v83 += 2;
                  v82 -= 2;
                }
                while (v82);
                unint64_t v80 = v85 * v84;
                uint64_t v81 = &v48[v79 & 0x3FFFFFFFFFFFFFFELL];
                if (v79 != (v79 & 0x3FFFFFFFFFFFFFFELL))
                {
                  do
                  {
LABEL_88:
                    uint64_t v86 = *v81++;
                    v80 *= v86;
                  }
                  while (v81 != v47);
                }
              }
              unint64_t v80 = 1;
              uint64_t v81 = v48;
              goto LABEL_88;
            }
            if (!v90.__r_.__value_.__r.__words[0])
            {
              uint64_t v51 = 0;
              goto LABEL_64;
            }
            if ((unint64_t)(v50 - 8) >= 8)
            {
              unint64_t v53 = ((unint64_t)(v50 - 8) >> 3) + 1;
              uint64_t v52 = (uint64_t *)(v90.__r_.__value_.__r.__words[2] + 8 * (v53 & 0x3FFFFFFFFFFFFFFELL));
              size_t v54 = (void *)(v90.__r_.__value_.__r.__words[2] + 8);
              uint64_t v55 = 1;
              uint64_t v56 = v53 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v57 = 1;
              do
              {
                v55 *= *(v54 - 1);
                v57 *= *v54;
                v54 += 2;
                v56 -= 2;
              }
              while (v56);
              uint64_t v51 = v57 * v55;
              if (v53 == (v53 & 0x3FFFFFFFFFFFFFFELL))
              {
LABEL_64:
                unint64_t v59 = v50 >> 3;
                if ((unint64_t)(v50 >> 3) <= 1) {
                  unint64_t v59 = 1;
                }
                if (v59 >= 2)
                {
                  uint64_t v62 = 0;
                  uint64_t v63 = 0;
                  unint64_t v60 = v59 & 0xFFFFFFFFFFFFFFFELL;
                  unint64_t v64 = (void *)(v90.__r_.__value_.__r.__words[2] + 8);
                  unint64_t v65 = (char *)v92 + 8;
                  unint64_t v66 = v59 & 0xFFFFFFFFFFFFFFFELL;
                  do
                  {
                    v62 += *(v65 - 1) * (*(v64 - 1) - 1);
                    v63 += *v65 * (*v64 - 1);
                    v64 += 2;
                    v65 += 2;
                    v66 -= 2;
                  }
                  while (v66);
                  uint64_t v61 = v63 + v62;
                  if (v59 == v60)
                  {
LABEL_73:
                    if (v51 == v61 + 1) {
                      goto LABEL_74;
                    }
LABEL_95:
                    nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
                  }
                }
                else
                {
                  unint64_t v60 = 0;
                  uint64_t v61 = 0;
                }
                unint64_t v67 = v59 - v60;
                uint64_t v68 = 8 * v60;
                uint64_t v69 = (uint64_t *)((char *)v92 + v68);
                unint64_t v70 = (uint64_t *)(v90.__r_.__value_.__r.__words[2] + v68);
                do
                {
                  uint64_t v71 = *v70++;
                  uint64_t v72 = v71 - 1;
                  uint64_t v73 = *v69++;
                  v61 += v73 * v72;
                  --v67;
                }
                while (v67);
                goto LABEL_73;
              }
            }
            else
            {
              uint64_t v51 = 1;
              uint64_t v52 = (uint64_t *)v90.__r_.__value_.__r.__words[2];
            }
            do
            {
              uint64_t v58 = *v52++;
              v51 *= v58;
            }
            while (v52 != v91);
            goto LABEL_64;
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          unint64_t v88 = std::string::append(&v90, " cannot be interpreted as a float");
          long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v89;
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          v88->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &__dst);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      memmove(p_dst, v9, v11);
      goto LABEL_34;
    case 3:
      double v22 = *(double *)a2;
      memset(&__dst, 0, sizeof(__dst));
      double v24 = *(unsigned char **)(*(void *)&v22 + 8);
      double v23 = *(unsigned char **)(*(void *)&v22 + 16);
      int64_t v25 = v23 - v24;
      if (v23 == v24)
      {
        unint64_t v26 = 0;
      }
      else
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v26 = operator new(v23 - v24);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v26 + 8 * (v25 >> 3);
        memcpy(v26, v24, v25);
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26 + 8 * (v25 >> 3);
      }
      nitro::flexible_type_fail(0);
      if (!v26) {
        goto LABEL_43;
      }
      int v17 = v26;
      goto LABEL_42;
    case 4:
      double v14 = *(double *)a2;
      memset(&__dst, 0, sizeof(__dst));
      std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&__dst, *(void **)(*(void *)&v14 + 8), *(void **)(*(void *)&v14 + 16), (uint64_t)(*(void *)(*(void *)&v14 + 16) - *(void *)(*(void *)&v14 + 8)) >> 4);
      nitro::flexible_type_fail(0);
      std::string::size_type v15 = __dst.__r_.__value_.__r.__words[0];
      if (!__dst.__r_.__value_.__r.__words[0]) {
        goto LABEL_43;
      }
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      int v17 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
      {
        do
        {
          size -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&__dst.__r_.__value_.__r.__words[2], size);
        }
        while (size != v15);
        int v17 = (void *)__dst.__r_.__value_.__r.__words[0];
      }
      __dst.__r_.__value_.__l.__size_ = v15;
      goto LABEL_42;
    case 5:
      double v18 = *(double *)a2;
      memset(&__dst, 0, sizeof(__dst));
      std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__dst, *(char **)(*(void *)&v18 + 8), *(char **)(*(void *)&v18 + 16), (uint64_t)(*(void *)(*(void *)&v18 + 16) - *(void *)(*(void *)&v18 + 8)) >> 5);
      nitro::flexible_type_fail(0);
      std::string::size_type v19 = __dst.__r_.__value_.__r.__words[0];
      if (!__dst.__r_.__value_.__r.__words[0]) {
        goto LABEL_43;
      }
      std::string::size_type v20 = __dst.__r_.__value_.__l.__size_;
      std::string::size_type v21 = __dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
      {
        do
          std::string::size_type v20 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v20 - 32);
        while (v20 != v19);
        std::string::size_type v21 = __dst.__r_.__value_.__r.__words[0];
      }
      __dst.__r_.__value_.__l.__size_ = v19;
      int v17 = (void *)v21;
LABEL_42:
      operator delete(v17);
      goto LABEL_43;
    case 6:
    case 8:
      __break(1u);
      return;
    case 7:
      goto LABEL_43;
    case 9:
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(*(void *)a2 + 8));
      nitro::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v96[0])
      {
        v96[1] = v96[0];
        operator delete(v96[0]);
      }
      int v13 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
      if (__dst.__r_.__value_.__r.__words[2]
        && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      goto LABEL_43;
    default:
      double v6 = (double)*(uint64_t *)a2;
      goto LABEL_43;
  }
}

void sub_192650A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Squeeze(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  nitro::flexible_type_converter<std::vector<int>>::get((unsigned __int8 *)a2, &v27);
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v26, (const nitro::ndarray_container *)(*(void *)this + 8));
  std::vector<int>::pointer begin = v27.__begin_;
  std::vector<int>::pointer end = v27.__end_;
  int64_t v8 = (char *)v27.__end_ - (char *)v27.__begin_;
  if (v27.__end_ != v27.__begin_)
  {
    double v22 = 0;
    double v23 = 0;
    double v24 = 0;
    if ((unint64_t)v8 < 0x7FFFFFFFFFFFFFFDLL)
    {
      int v9 = operator new(2 * v8);
      double v22 = v9;
      double v24 = (char *)v9 + 8 * (v8 >> 2);
      std::vector<int>::pointer v10 = begin;
      std::string::size_type v11 = v9;
      if ((unint64_t)(v8 - 4) < 0x1C) {
        goto LABEL_13;
      }
      unint64_t v12 = ((unint64_t)(v8 - 4) >> 2) + 1;
      std::vector<int>::pointer v10 = &begin[v12 & 0x7FFFFFFFFFFFFFF8];
      std::string::size_type v11 = (void *)v9 + (v12 & 0x7FFFFFFFFFFFFFF8);
      int v13 = v9 + 2;
      std::vector<int>::pointer v14 = begin + 4;
      uint64_t v15 = v12 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v16 = *((_OWORD *)v14 - 1);
        *(void *)&long long v17 = (int)v16;
        *((void *)&v17 + 1) = SDWORD1(v16);
        long long v18 = v17;
        *(void *)&long long v17 = SDWORD2(v16);
        *((void *)&v17 + 1) = SHIDWORD(v16);
        long long v19 = v17;
        *(void *)&long long v17 = (int)*(_OWORD *)v14;
        *((void *)&v17 + 1) = (int)HIDWORD(*(void *)v14);
        long long v20 = v17;
        *(void *)&long long v17 = (int)*((void *)v14 + 1);
        *((void *)&v17 + 1) = (int)HIDWORD(*(_OWORD *)v14);
        *(v13 - 2) = v18;
        *(v13 - 1) = v19;
        *int v13 = v20;
        v13[1] = v17;
        v13 += 4;
        v14 += 8;
        v15 -= 8;
      }
      while (v15);
      if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_13:
        do
        {
          uint64_t v21 = *v10++;
          *v11++ = v21;
        }
        while (v10 != end);
      }
      double v23 = v11;
      nitro::ndarray_container::squeeze((uint64_t)v26, &v22, (uint64_t)&v25);
      *(void *)a3 = 0;
      *(unsigned char *)(a3 + 8) = 9;
      operator new();
    }
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  double v22 = 0;
  double v23 = 0;
  double v24 = 0;
  nitro::ndarray_container::squeeze((uint64_t)v26, &v22, (uint64_t)&v25);
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 9;
  operator new();
}

void sub_192650F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v25 = v23;
  MEMORY[0x192FF16B0](v25, 0x10B0C4002311774);
  if (atomic_fetch_add(0, 0xFFFFFFFFFFFFFFFFLL) == 1) {
    nitro::nitro_builtins::Range(v22);
  }
  *(void *)uint64_t v22 = 0;
  *(unsigned char *)(v22 + 8) = 0;
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a12);
  if (__p) {
    operator delete(__p);
  }
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a22);
  std::vector<int> v27 = *(void **)(v24 - 72);
  if (v27)
  {
    *(void *)(v24 - 64) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Tanh(nitro::nitro_builtins *this@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)this + 8) == 1)
  {
    double v4 = *(double *)this;
  }
  else
  {
    if (*((unsigned char *)this + 8))
    {
      nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(void *)this + 8), (uint64_t)&v6);
      nitro::ndarray_container::copy((nitro::ndarray_container *)&v6);
    }
    double v4 = (double)*(uint64_t *)this;
  }
  long double v5 = tanh(v4);
  *(unsigned char *)(a2 + 8) = 1;
  *(long double *)a2 = v5;
}

void sub_1926515F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  MEMORY[0x192FF16B0](v14, 0x10B0C4002311774);
  if (atomic_fetch_add(0, 0xFFFFFFFFFFFFFFFFLL) == 1) {
    nitro::nitro_builtins::Range(v13);
  }
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 0;
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)va);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Cos(nitro::nitro_builtins *this@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)this + 8) == 1)
  {
    double v4 = *(double *)this;
  }
  else
  {
    if (*((unsigned char *)this + 8))
    {
      nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(void *)this + 8), (uint64_t)&v6);
      nitro::ndarray_container::copy((nitro::ndarray_container *)&v6);
    }
    double v4 = (double)*(uint64_t *)this;
  }
  long double v5 = cos(v4);
  *(unsigned char *)(a2 + 8) = 1;
  *(long double *)a2 = v5;
}

void sub_192651E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  MEMORY[0x192FF16B0](v28, 0x10B0C4002311774);
  if (atomic_fetch_add(0, 0xFFFFFFFFFFFFFFFFLL) == 1) {
    nitro::nitro_builtins::Range(v27);
  }
  *(void *)uint64_t v27 = 0;
  *(unsigned char *)(v27 + 8) = 0;
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a27);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Sin(nitro::nitro_builtins *this@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)this + 8) == 1)
  {
    double v4 = *(double *)this;
  }
  else
  {
    if (*((unsigned char *)this + 8))
    {
      nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(void *)this + 8), (uint64_t)&v6);
      nitro::ndarray_container::copy((nitro::ndarray_container *)&v6);
    }
    double v4 = (double)*(uint64_t *)this;
  }
  long double v5 = sin(v4);
  *(unsigned char *)(a2 + 8) = 1;
  *(long double *)a2 = v5;
}

void sub_192652730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  MEMORY[0x192FF16B0](v28, 0x10B0C4002311774);
  if (atomic_fetch_add(0, 0xFFFFFFFFFFFFFFFFLL) == 1) {
    nitro::nitro_builtins::Range(v27);
  }
  *(void *)uint64_t v27 = 0;
  *(unsigned char *)(v27 + 8) = 0;
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a27);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::get_scalar(nitro::nitro_builtins *this@<X0>, nitro::nitro_builtins *a2@<X8>)
{
  unsigned int v4 = *((unsigned __int8 *)this + 8);
  if (v4 < 2)
  {
    *(void *)a2 = 0;
    *((unsigned char *)a2 + 8) = 0;
    if (this != a2)
    {
      *(void *)a2 = *(void *)this;
      *((unsigned char *)a2 + 8) = v4;
    }
    return;
  }
  if (v4 != 9) {
    nitro::nitro_builtins::get_scalar(nitro::flexible_type const&)::$_1::operator()();
  }
  uint64_t v5 = *(void *)this;
  double v7 = *(char **)(*(void *)this + 32);
  uint64_t v6 = *(char **)(*(void *)this + 40);
  if (v6 == v7 || !*(void *)(v5 + 16))
  {
    v21[0] = 0;
LABEL_34:
    uint64_t v27 = v21;
    nitro::nitro_builtins::get_scalar(nitro::flexible_type const&)::$_0::operator()();
  }
  unint64_t v8 = v6 - v7 - 8;
  if (v8 < 8)
  {
    uint64_t v9 = 1;
    std::vector<int>::pointer v10 = *(char **)(*(void *)this + 32);
    do
    {
LABEL_12:
      uint64_t v16 = *(void *)v10;
      v10 += 8;
      v9 *= v16;
    }
    while (v10 != v6);
    goto LABEL_13;
  }
  uint64_t v11 = (v8 >> 3) + 1;
  std::vector<int>::pointer v10 = &v7[8 * (v11 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v12 = v7 + 8;
  uint64_t v13 = 1;
  uint64_t v14 = v11 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v15 = 1;
  do
  {
    v13 *= *(v12 - 1);
    v15 *= *v12;
    v12 += 2;
    v14 -= 2;
  }
  while (v14);
  uint64_t v9 = v15 * v13;
  if (v11 != (v11 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_12;
  }
LABEL_13:
  v21[0] = v9;
  if (v9 != 1) {
    goto LABEL_34;
  }
  long long v17 = (const nitro::ndarray_container *)(v5 + 8);
  if (*(_DWORD *)(v5 + 8) == 3) {
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v21, v17);
  }
  else {
    _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v17, (uint64_t)v21);
  }
  nitro::ndarray<int>::ndarray((uint64_t)&v27, (uint64_t)v21);
  nitro::ndarray<int>::get_elements_copy((uint64_t *)&v27, v33);
  long long v18 = (int *)v33[0];
  *((unsigned char *)a2 + 8) = 0;
  *(void *)a2 = *v18;
  v33[1] = (uint64_t)v18;
  operator delete(v18);
  if (__p)
  {
    unint64_t v32 = __p;
    operator delete(__p);
  }
  if (v29)
  {
    float v30 = v29;
    operator delete(v29);
  }
  long long v19 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  if (v25)
  {
    unint64_t v26 = v25;
    operator delete(v25);
  }
  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }
  long long v20 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void nitro::nitro_builtins::get_scalar(nitro::flexible_type const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"nda.num_elem()", 14);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  double v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  std::vector<int>::pointer v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 152, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v18 = (file_logger *)global_logger();
    long long v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 152, 1);
    std::stringbuf::str();
    long long v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      uint64_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    uint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192652CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::get_elements_copy(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = a1[2];
  unsigned int v4 = (uint64_t *)a1[3];
  if (v4 == (uint64_t *)v5 || !*a1)
  {
    a2[1] = 0;
    *a2 = 0;
    a2[2] = 0;
    goto LABEL_13;
  }
  unint64_t v6 = (unint64_t)v4 - v5 - 8;
  if (v6 < 8)
  {
    unint64_t v7 = 1;
    unint64_t v8 = (uint64_t *)a1[2];
    do
    {
LABEL_9:
      uint64_t v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v4);
    goto LABEL_10;
  }
  uint64_t v9 = (v6 >> 3) + 1;
  unint64_t v8 = (uint64_t *)(v5 + 8 * (v9 & 0x3FFFFFFFFFFFFFFELL));
  std::vector<int>::pointer v10 = (void *)(v5 + 8);
  uint64_t v11 = 1;
  uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  unint64_t v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_9;
  }
LABEL_10:
  a2[1] = 0;
  *a2 = 0;
  a2[2] = 0;
  if (v7)
  {
    if (v7 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = operator new(4 * v7);
    *a2 = (uint64_t)v15;
    a2[2] = (uint64_t)v15 + 4 * v7;
    bzero(v15, 4 * v7);
    a2[1] = (uint64_t)v15 + 4 * v7;
  }
LABEL_13:
  uint64_t v16 = 0;
  nitro::ndarray<int>::element_visitor<nitro::ndarray<int>::get_elements_copy(void)::{lambda(int const&)#1}>(a1, a2, &v16);
}

void sub_192652F54(_Unwind_Exception *exception_object)
{
  unsigned int v4 = *v1;
  if (*v1)
  {
    void *v2 = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void nitro::nitro_builtins::get_scalar(nitro::flexible_type const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"a.get_type() == flex_type_enum::INTEGER || a.get_type() == flex_type_enum::FLOAT", 80);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 156, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      unint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 156, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  long long v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1926531C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Split(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"splitdim", 8);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"tensor.shape().size()", 21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 434, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v18 = (file_logger *)global_logger();
    long long v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 434, 1);
    std::stringbuf::str();
    long long v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1926535D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Split(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sum", 3);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"tensor.shape()[splitdim]", 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 435, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v18 = (file_logger *)global_logger();
    long long v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 435, 1);
    std::stringbuf::str();
    long long v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1926539E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void std::vector<nitro::flexible_type>::reserve(char **a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  uint64_t v3 = *a1;
  if (a2 <= (a1[2] - *a1) >> 4) {
    return;
  }
  if (a2 >> 60) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * a2;
  unint64_t v7 = (char *)operator new(16 * a2);
  unint64_t v8 = &v7[v6];
  uint64_t v9 = &v7[v5 - v3];
  if (v5 == v3)
  {
    *a1 = v9;
    a1[1] = v9;
    a1[2] = v8;
    if (!v3) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v10 = &v7[v5 - v3];
  do
  {
    uint64_t v11 = *((void *)v5 - 2);
    v5 -= 16;
    *((void *)v10 - 2) = v11;
    v10 -= 16;
    v10[8] = v5[8];
    v5[8] = 0;
  }
  while (v5 != v3);
  uint64_t v12 = *a1;
  uint64_t v3 = a1[1];
  *a1 = v10;
  a1[1] = v9;
  a1[2] = v8;
  if (v3 != v12)
  {
    do
    {
      v3 -= 16;
      std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v2, (uint64_t)v3);
    }
    while (v3 != v12);
    uint64_t v3 = v12;
  }
  if (v3)
  {
LABEL_10:
    operator delete(v3);
  }
}

void nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"bias.shape().size()", 19);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 471, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v18 = (file_logger *)global_logger();
    long long v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 471, 1);
    std::stringbuf::str();
    long long v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192653EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_2::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"bias.shape()[0]", 15);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ret_tensor.shape()[ret_tensor.shape().size() - 1]", 49);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 481, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v18 = (file_logger *)global_logger();
    long long v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 481, 1);
    std::stringbuf::str();
    long long v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192654304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(_DWORD *a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v1172, (uint64_t)a2);
      v1178 = &v1200;
      nitro::ndarray<int>::ndarray(&v1179, &v1172);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1201, (uint64_t)a1);
          unint64_t v3 = *(void *)v1181;
          if (v1185) {
            goto LABEL_853;
          }
          uint64_t v4 = v1179;
          uint64_t v5 = v1182 - (unsigned char *)v1181;
          if (v1182 == v1181) {
            goto LABEL_431;
          }
          if (!v1179)
          {
            uint64_t v6 = 0;
            goto LABEL_421;
          }
          if ((unint64_t)(v5 - 8) < 8)
          {
            uint64_t v6 = 1;
            unint64_t v7 = (char *)v1181;
            do
            {
LABEL_420:
              uint64_t v454 = *(void *)v7;
              v7 += 8;
              v6 *= v454;
            }
            while (v7 != v1182);
            goto LABEL_421;
          }
          unint64_t v449 = ((unint64_t)(v5 - 8) >> 3) + 1;
          unint64_t v7 = (char *)v1181 + 8 * (v449 & 0x3FFFFFFFFFFFFFFELL);
          v450 = (char *)v1181 + 8;
          uint64_t v451 = 1;
          uint64_t v452 = v449 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v453 = 1;
          do
          {
            v451 *= *(v450 - 1);
            v453 *= *v450;
            v450 += 2;
            v452 -= 2;
          }
          while (v452);
          uint64_t v6 = v453 * v451;
          if (v449 != (v449 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_420;
          }
LABEL_421:
          unint64_t v455 = v5 >> 3;
          if ((unint64_t)(v5 >> 3) <= 1) {
            unint64_t v455 = 1;
          }
          if (v455 < 2)
          {
            unint64_t v456 = 0;
            uint64_t v457 = 0;
LABEL_428:
            unint64_t v463 = v455 - v456;
            uint64_t v464 = 8 * v456;
            v465 = (uint64_t *)((char *)v1183 + v464);
            v466 = (uint64_t *)((char *)v1181 + v464);
            do
            {
              uint64_t v467 = *v466++;
              uint64_t v468 = v467 - 1;
              uint64_t v469 = *v465++;
              v457 += v469 * v468;
              --v463;
            }
            while (v463);
            goto LABEL_430;
          }
          uint64_t v458 = 0;
          uint64_t v459 = 0;
          unint64_t v456 = v455 & 0xFFFFFFFFFFFFFFFELL;
          v460 = (char *)v1181 + 8;
          v461 = (char *)v1183 + 8;
          unint64_t v462 = v455 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v458 += *(v461 - 1) * (*(v460 - 1) - 1);
            v459 += *v461 * (*v460 - 1);
            v460 += 2;
            v461 += 2;
            v462 -= 2;
          }
          while (v462);
          uint64_t v457 = v459 + v458;
          if (v455 != v456) {
            goto LABEL_428;
          }
LABEL_430:
          if (v6 != v457 + 1) {
LABEL_853:
          }
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_431:
          unint64_t v253 = v1180;
          if (v1180) {
            atomic_fetch_add_explicit(&v1180->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1207) {
            goto LABEL_1010;
          }
          uint64_t v470 = v1204 - v1203;
          if (v1204 == v1203) {
            goto LABEL_1011;
          }
          uint64_t v471 = (uint64_t)v1201;
          if (!v1201) {
            goto LABEL_817;
          }
          if ((unint64_t)(v470 - 8) < 8)
          {
            uint64_t v471 = 1;
            v472 = v1203;
            do
            {
LABEL_816:
              uint64_t v1048 = *(void *)v472;
              v472 += 8;
              v471 *= v1048;
            }
            while (v472 != v1204);
            goto LABEL_817;
          }
          unint64_t v1043 = ((unint64_t)(v470 - 8) >> 3) + 1;
          v472 = &v1203[8 * (v1043 & 0x3FFFFFFFFFFFFFFELL)];
          v1044 = v1203 + 8;
          uint64_t v1045 = 1;
          uint64_t v1046 = v1043 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v1047 = 1;
          do
          {
            v1045 *= *(v1044 - 1);
            v1047 *= *v1044;
            v1044 += 2;
            v1046 -= 2;
          }
          while (v1046);
          uint64_t v471 = v1047 * v1045;
          if (v1043 != (v1043 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_816;
          }
LABEL_817:
          unint64_t v1049 = v470 >> 3;
          if ((unint64_t)(v470 >> 3) <= 1) {
            unint64_t v1049 = 1;
          }
          if (v1049 < 2)
          {
            unint64_t v1050 = 0;
            uint64_t v1051 = 0;
LABEL_824:
            unint64_t v1057 = v1049 - v1050;
            uint64_t v1058 = 8 * v1050;
            v1059 = &v1205[v1058];
            v1060 = &v1203[v1058];
            do
            {
              uint64_t v1061 = *(void *)v1060;
              v1060 += 8;
              uint64_t v1062 = v1061 - 1;
              uint64_t v1063 = *(void *)v1059;
              v1059 += 8;
              v1051 += v1063 * v1062;
              --v1057;
            }
            while (v1057);
            goto LABEL_826;
          }
          uint64_t v1052 = 0;
          uint64_t v1053 = 0;
          unint64_t v1050 = v1049 & 0xFFFFFFFFFFFFFFFELL;
          v1054 = v1203 + 8;
          v1055 = v1205 + 8;
          unint64_t v1056 = v1049 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v1052 += *(v1055 - 1) * (*(v1054 - 1) - 1);
            v1053 += *v1055 * (*v1054 - 1);
            v1054 += 2;
            v1055 += 2;
            v1056 -= 2;
          }
          while (v1056);
          uint64_t v1051 = v1053 + v1052;
          if (v1049 != v1050) {
            goto LABEL_824;
          }
LABEL_826:
          if (v471 != v1051 + 1) {
LABEL_1010:
          }
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v1064 = v1204 - v1203;
          if (v1204 != v1203)
          {
            unint64_t v1065 = v1064 >> 3;
            if ((unint64_t)(v1064 >> 3) <= 1) {
              unint64_t v1065 = 1;
            }
            if (v1065 >= 2)
            {
              uint64_t v1068 = 0;
              uint64_t v1069 = 0;
              unint64_t v1066 = v1065 & 0xFFFFFFFFFFFFFFFELL;
              v1070 = v1203 + 8;
              v1071 = v1205 + 8;
              unint64_t v1072 = v1065 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v1068 += *(v1071 - 1) * (*(v1070 - 1) - 1);
                v1069 += *v1071 * (*v1070 - 1);
                v1070 += 2;
                v1071 += 2;
                v1072 -= 2;
              }
              while (v1072);
              uint64_t v1067 = v1069 + v1068;
              if (v1065 == v1066) {
                goto LABEL_837;
              }
            }
            else
            {
              unint64_t v1066 = 0;
              uint64_t v1067 = 0;
            }
            unint64_t v1073 = v1065 - v1066;
            uint64_t v1074 = 8 * v1066;
            v1075 = &v1205[v1074];
            v1076 = &v1203[v1074];
            do
            {
              uint64_t v1077 = *(void *)v1076;
              v1076 += 8;
              uint64_t v1078 = v1077 - 1;
              uint64_t v1079 = *(void *)v1075;
              v1075 += 8;
              v1067 += v1079 * v1078;
              --v1073;
            }
            while (v1073);
LABEL_837:
            uint64_t v1080 = v1067 + 1;
            goto LABEL_1012;
          }
LABEL_1011:
          uint64_t v1080 = 0;
LABEL_1012:
          uint64_t v1139 = v1207 + v1080;
          if (v1139)
          {
            unint64_t v1140 = 0;
            v1141 = v1201;
            do
            {
              *v1141++ += *(_DWORD *)(v4 + 4 * v1140);
              unint64_t v1140 = (v1140 + 1) % v3;
              --v1139;
            }
            while (v1139);
          }
          goto LABEL_1015;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1201, (uint64_t)a1);
          unint64_t v80 = *(void *)v1181;
          if (v1185) {
            goto LABEL_852;
          }
          uint64_t v81 = v1179;
          uint64_t v82 = v1182 - (unsigned char *)v1181;
          if (v1182 == v1181) {
            goto LABEL_410;
          }
          if (!v1179)
          {
            uint64_t v83 = 0;
            goto LABEL_400;
          }
          if ((unint64_t)(v82 - 8) < 8)
          {
            uint64_t v83 = 1;
            uint64_t v84 = (char *)v1181;
            do
            {
LABEL_399:
              uint64_t v430 = *(void *)v84;
              v84 += 8;
              v83 *= v430;
            }
            while (v84 != v1182);
            goto LABEL_400;
          }
          unint64_t v425 = ((unint64_t)(v82 - 8) >> 3) + 1;
          uint64_t v84 = (char *)v1181 + 8 * (v425 & 0x3FFFFFFFFFFFFFFELL);
          v426 = (char *)v1181 + 8;
          uint64_t v427 = 1;
          uint64_t v428 = v425 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v429 = 1;
          do
          {
            v427 *= *(v426 - 1);
            v429 *= *v426;
            v426 += 2;
            v428 -= 2;
          }
          while (v428);
          uint64_t v83 = v429 * v427;
          if (v425 != (v425 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_399;
          }
LABEL_400:
          unint64_t v431 = v82 >> 3;
          if ((unint64_t)(v82 >> 3) <= 1) {
            unint64_t v431 = 1;
          }
          if (v431 < 2)
          {
            unint64_t v432 = 0;
            uint64_t v433 = 0;
LABEL_407:
            unint64_t v439 = v431 - v432;
            uint64_t v440 = 8 * v432;
            v441 = (uint64_t *)((char *)v1183 + v440);
            v442 = (uint64_t *)((char *)v1181 + v440);
            do
            {
              uint64_t v443 = *v442++;
              uint64_t v444 = v443 - 1;
              uint64_t v445 = *v441++;
              v433 += v445 * v444;
              --v439;
            }
            while (v439);
            goto LABEL_409;
          }
          uint64_t v434 = 0;
          uint64_t v435 = 0;
          unint64_t v432 = v431 & 0xFFFFFFFFFFFFFFFELL;
          v436 = (char *)v1181 + 8;
          v437 = (char *)v1183 + 8;
          unint64_t v438 = v431 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v434 += *(v437 - 1) * (*(v436 - 1) - 1);
            v435 += *v437 * (*v436 - 1);
            v436 += 2;
            v437 += 2;
            v438 -= 2;
          }
          while (v438);
          uint64_t v433 = v435 + v434;
          if (v431 != v432) {
            goto LABEL_407;
          }
LABEL_409:
          if (v83 != v433 + 1) {
LABEL_852:
          }
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_410:
          unint64_t v253 = v1180;
          if (v1180) {
            atomic_fetch_add_explicit(&v1180->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1207) {
            goto LABEL_1004;
          }
          uint64_t v446 = v1204 - v1203;
          if (v1204 == v1203) {
            goto LABEL_1005;
          }
          uint64_t v447 = (uint64_t)v1201;
          if (!v1201) {
            goto LABEL_792;
          }
          if ((unint64_t)(v446 - 8) < 8)
          {
            uint64_t v447 = 1;
            v448 = v1203;
            do
            {
LABEL_791:
              uint64_t v1010 = *(void *)v448;
              v448 += 8;
              v447 *= v1010;
            }
            while (v448 != v1204);
            goto LABEL_792;
          }
          unint64_t v1005 = ((unint64_t)(v446 - 8) >> 3) + 1;
          v448 = &v1203[8 * (v1005 & 0x3FFFFFFFFFFFFFFELL)];
          v1006 = v1203 + 8;
          uint64_t v1007 = 1;
          uint64_t v1008 = v1005 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v1009 = 1;
          do
          {
            v1007 *= *(v1006 - 1);
            v1009 *= *v1006;
            v1006 += 2;
            v1008 -= 2;
          }
          while (v1008);
          uint64_t v447 = v1009 * v1007;
          if (v1005 != (v1005 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_791;
          }
LABEL_792:
          unint64_t v1011 = v446 >> 3;
          if ((unint64_t)(v446 >> 3) <= 1) {
            unint64_t v1011 = 1;
          }
          if (v1011 < 2)
          {
            unint64_t v1012 = 0;
            uint64_t v1013 = 0;
LABEL_799:
            unint64_t v1019 = v1011 - v1012;
            uint64_t v1020 = 8 * v1012;
            v1021 = &v1205[v1020];
            v1022 = &v1203[v1020];
            do
            {
              uint64_t v1023 = *(void *)v1022;
              v1022 += 8;
              uint64_t v1024 = v1023 - 1;
              uint64_t v1025 = *(void *)v1021;
              v1021 += 8;
              v1013 += v1025 * v1024;
              --v1019;
            }
            while (v1019);
            goto LABEL_801;
          }
          uint64_t v1014 = 0;
          uint64_t v1015 = 0;
          unint64_t v1012 = v1011 & 0xFFFFFFFFFFFFFFFELL;
          v1016 = v1203 + 8;
          v1017 = v1205 + 8;
          unint64_t v1018 = v1011 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v1014 += *(v1017 - 1) * (*(v1016 - 1) - 1);
            v1015 += *v1017 * (*v1016 - 1);
            v1016 += 2;
            v1017 += 2;
            v1018 -= 2;
          }
          while (v1018);
          uint64_t v1013 = v1015 + v1014;
          if (v1011 != v1012) {
            goto LABEL_799;
          }
LABEL_801:
          if (v447 != v1013 + 1) {
LABEL_1004:
          }
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v1026 = v1204 - v1203;
          if (v1204 != v1203)
          {
            unint64_t v1027 = v1026 >> 3;
            if ((unint64_t)(v1026 >> 3) <= 1) {
              unint64_t v1027 = 1;
            }
            if (v1027 >= 2)
            {
              uint64_t v1030 = 0;
              uint64_t v1031 = 0;
              unint64_t v1028 = v1027 & 0xFFFFFFFFFFFFFFFELL;
              v1032 = v1203 + 8;
              v1033 = v1205 + 8;
              unint64_t v1034 = v1027 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v1030 += *(v1033 - 1) * (*(v1032 - 1) - 1);
                v1031 += *v1033 * (*v1032 - 1);
                v1032 += 2;
                v1033 += 2;
                v1034 -= 2;
              }
              while (v1034);
              uint64_t v1029 = v1031 + v1030;
              if (v1027 == v1028) {
                goto LABEL_812;
              }
            }
            else
            {
              unint64_t v1028 = 0;
              uint64_t v1029 = 0;
            }
            unint64_t v1035 = v1027 - v1028;
            uint64_t v1036 = 8 * v1028;
            v1037 = &v1205[v1036];
            v1038 = &v1203[v1036];
            do
            {
              uint64_t v1039 = *(void *)v1038;
              v1038 += 8;
              uint64_t v1040 = v1039 - 1;
              uint64_t v1041 = *(void *)v1037;
              v1037 += 8;
              v1029 += v1041 * v1040;
              --v1035;
            }
            while (v1035);
LABEL_812:
            uint64_t v1042 = v1029 + 1;
            goto LABEL_1006;
          }
LABEL_1005:
          uint64_t v1042 = 0;
LABEL_1006:
          if (v1207 + v1042)
          {
            unint64_t v1137 = 0;
            unint64_t v1138 = 0;
            do
            {
              *((unsigned char *)v1201 + v1137) += *(_DWORD *)(v81 + 4 * v1138);
              unint64_t v1138 = (v1138 + 1) % v80;
              ++v1137;
            }
            while (v1137 < v1207 + v1042);
          }
          goto LABEL_1015;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1201, (uint64_t)a1);
          unint64_t v49 = *(void *)v1181;
          if (v1185) {
            goto LABEL_844;
          }
          uint64_t v50 = v1179;
          uint64_t v51 = v1182 - (unsigned char *)v1181;
          if (v1182 == v1181) {
            goto LABEL_242;
          }
          if (!v1179)
          {
            uint64_t v52 = 0;
            goto LABEL_232;
          }
          if ((unint64_t)(v51 - 8) < 8)
          {
            uint64_t v52 = 1;
            unint64_t v53 = (char *)v1181;
            do
            {
LABEL_231:
              uint64_t v237 = *(void *)v53;
              v53 += 8;
              v52 *= v237;
            }
            while (v53 != v1182);
            goto LABEL_232;
          }
          unint64_t v232 = ((unint64_t)(v51 - 8) >> 3) + 1;
          unint64_t v53 = (char *)v1181 + 8 * (v232 & 0x3FFFFFFFFFFFFFFELL);
          unint64_t v233 = (char *)v1181 + 8;
          uint64_t v234 = 1;
          uint64_t v235 = v232 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v236 = 1;
          do
          {
            v234 *= *(v233 - 1);
            v236 *= *v233;
            v233 += 2;
            v235 -= 2;
          }
          while (v235);
          uint64_t v52 = v236 * v234;
          if (v232 != (v232 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_231;
          }
LABEL_232:
          unint64_t v238 = v51 >> 3;
          if ((unint64_t)(v51 >> 3) <= 1) {
            unint64_t v238 = 1;
          }
          if (v238 < 2)
          {
            unint64_t v239 = 0;
            uint64_t v240 = 0;
LABEL_239:
            unint64_t v246 = v238 - v239;
            uint64_t v247 = 8 * v239;
            unint64_t v248 = (uint64_t *)((char *)v1183 + v247);
            uint64_t v249 = (uint64_t *)((char *)v1181 + v247);
            do
            {
              uint64_t v250 = *v249++;
              uint64_t v251 = v250 - 1;
              uint64_t v252 = *v248++;
              v240 += v252 * v251;
              --v246;
            }
            while (v246);
            goto LABEL_241;
          }
          uint64_t v241 = 0;
          uint64_t v242 = 0;
          unint64_t v239 = v238 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v243 = (char *)v1181 + 8;
          uint64_t v244 = (char *)v1183 + 8;
          unint64_t v245 = v238 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v241 += *(v244 - 1) * (*(v243 - 1) - 1);
            v242 += *v244 * (*v243 - 1);
            v243 += 2;
            v244 += 2;
            v245 -= 2;
          }
          while (v245);
          uint64_t v240 = v242 + v241;
          if (v238 != v239) {
            goto LABEL_239;
          }
LABEL_241:
          if (v52 != v240 + 1) {
LABEL_844:
          }
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_242:
          unint64_t v253 = v1180;
          if (v1180) {
            atomic_fetch_add_explicit(&v1180->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1207) {
            goto LABEL_912;
          }
          uint64_t v254 = v1204 - v1203;
          if (v1204 == v1203) {
            goto LABEL_913;
          }
          uint64_t v255 = (uint64_t)v1201;
          if (!v1201) {
            goto LABEL_592;
          }
          if ((unint64_t)(v254 - 8) < 8)
          {
            uint64_t v255 = 1;
            unint64_t v256 = v1203;
            do
            {
LABEL_591:
              uint64_t v706 = *(void *)v256;
              v256 += 8;
              v255 *= v706;
            }
            while (v256 != v1204);
            goto LABEL_592;
          }
          unint64_t v701 = ((unint64_t)(v254 - 8) >> 3) + 1;
          unint64_t v256 = &v1203[8 * (v701 & 0x3FFFFFFFFFFFFFFELL)];
          v702 = v1203 + 8;
          uint64_t v703 = 1;
          uint64_t v704 = v701 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v705 = 1;
          do
          {
            v703 *= *(v702 - 1);
            v705 *= *v702;
            v702 += 2;
            v704 -= 2;
          }
          while (v704);
          uint64_t v255 = v705 * v703;
          if (v701 != (v701 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_591;
          }
LABEL_592:
          unint64_t v707 = v254 >> 3;
          if ((unint64_t)(v254 >> 3) <= 1) {
            unint64_t v707 = 1;
          }
          if (v707 < 2)
          {
            unint64_t v708 = 0;
            uint64_t v709 = 0;
LABEL_599:
            unint64_t v715 = v707 - v708;
            uint64_t v716 = 8 * v708;
            v717 = &v1205[v716];
            v718 = &v1203[v716];
            do
            {
              uint64_t v719 = *(void *)v718;
              v718 += 8;
              uint64_t v720 = v719 - 1;
              uint64_t v721 = *(void *)v717;
              v717 += 8;
              v709 += v721 * v720;
              --v715;
            }
            while (v715);
            goto LABEL_601;
          }
          uint64_t v710 = 0;
          uint64_t v711 = 0;
          unint64_t v708 = v707 & 0xFFFFFFFFFFFFFFFELL;
          v712 = v1203 + 8;
          v713 = v1205 + 8;
          unint64_t v714 = v707 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v710 += *(v713 - 1) * (*(v712 - 1) - 1);
            v711 += *v713 * (*v712 - 1);
            v712 += 2;
            v713 += 2;
            v714 -= 2;
          }
          while (v714);
          uint64_t v709 = v711 + v710;
          if (v707 != v708) {
            goto LABEL_599;
          }
LABEL_601:
          if (v255 != v709 + 1) {
LABEL_912:
          }
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v722 = v1204 - v1203;
          if (v1204 != v1203)
          {
            unint64_t v723 = v722 >> 3;
            if ((unint64_t)(v722 >> 3) <= 1) {
              unint64_t v723 = 1;
            }
            if (v723 >= 2)
            {
              uint64_t v726 = 0;
              uint64_t v727 = 0;
              unint64_t v724 = v723 & 0xFFFFFFFFFFFFFFFELL;
              v728 = v1203 + 8;
              v729 = v1205 + 8;
              unint64_t v730 = v723 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v726 += *(v729 - 1) * (*(v728 - 1) - 1);
                v727 += *v729 * (*v728 - 1);
                v728 += 2;
                v729 += 2;
                v730 -= 2;
              }
              while (v730);
              uint64_t v725 = v727 + v726;
              if (v723 == v724) {
                goto LABEL_612;
              }
            }
            else
            {
              unint64_t v724 = 0;
              uint64_t v725 = 0;
            }
            unint64_t v731 = v723 - v724;
            uint64_t v732 = 8 * v724;
            v733 = &v1205[v732];
            v734 = &v1203[v732];
            do
            {
              uint64_t v735 = *(void *)v734;
              v734 += 8;
              uint64_t v736 = v735 - 1;
              uint64_t v737 = *(void *)v733;
              v733 += 8;
              v725 += v737 * v736;
              --v731;
            }
            while (v731);
LABEL_612:
            uint64_t v738 = v725 + 1;
            goto LABEL_914;
          }
LABEL_913:
          uint64_t v738 = 0;
LABEL_914:
          uint64_t v1108 = v1207 + v738;
          if (v1108)
          {
            unint64_t v1109 = 0;
            v1110 = (float *)v1201;
            do
            {
              float *v1110 = *v1110 + (float)*(int *)(v50 + 4 * v1109);
              ++v1110;
              unint64_t v1109 = (v1109 + 1) % v49;
              --v1108;
            }
            while (v1108);
          }
          goto LABEL_1015;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1201, (uint64_t)a1);
          unint64_t v70 = *(void *)v1181;
          if (v1185) {
            goto LABEL_849;
          }
          uint64_t v71 = v1179;
          uint64_t v72 = v1182 - (unsigned char *)v1181;
          if (v1182 == v1181) {
            goto LABEL_347;
          }
          if (!v1179)
          {
            uint64_t v73 = 0;
            goto LABEL_337;
          }
          if ((unint64_t)(v72 - 8) < 8)
          {
            uint64_t v73 = 1;
            unint64_t v74 = (char *)v1181;
            do
            {
LABEL_336:
              uint64_t v358 = *(void *)v74;
              v74 += 8;
              v73 *= v358;
            }
            while (v74 != v1182);
            goto LABEL_337;
          }
          unint64_t v353 = ((unint64_t)(v72 - 8) >> 3) + 1;
          unint64_t v74 = (char *)v1181 + 8 * (v353 & 0x3FFFFFFFFFFFFFFELL);
          v354 = (char *)v1181 + 8;
          uint64_t v355 = 1;
          uint64_t v356 = v353 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v357 = 1;
          do
          {
            v355 *= *(v354 - 1);
            v357 *= *v354;
            v354 += 2;
            v356 -= 2;
          }
          while (v356);
          uint64_t v73 = v357 * v355;
          if (v353 != (v353 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_336;
          }
LABEL_337:
          unint64_t v359 = v72 >> 3;
          if ((unint64_t)(v72 >> 3) <= 1) {
            unint64_t v359 = 1;
          }
          if (v359 < 2)
          {
            unint64_t v360 = 0;
            uint64_t v361 = 0;
LABEL_344:
            unint64_t v367 = v359 - v360;
            uint64_t v368 = 8 * v360;
            v369 = (uint64_t *)((char *)v1183 + v368);
            v370 = (uint64_t *)((char *)v1181 + v368);
            do
            {
              uint64_t v371 = *v370++;
              uint64_t v372 = v371 - 1;
              uint64_t v373 = *v369++;
              v361 += v373 * v372;
              --v367;
            }
            while (v367);
            goto LABEL_346;
          }
          uint64_t v362 = 0;
          uint64_t v363 = 0;
          unint64_t v360 = v359 & 0xFFFFFFFFFFFFFFFELL;
          v364 = (char *)v1181 + 8;
          v365 = (char *)v1183 + 8;
          unint64_t v366 = v359 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v362 += *(v365 - 1) * (*(v364 - 1) - 1);
            v363 += *v365 * (*v364 - 1);
            v364 += 2;
            v365 += 2;
            v366 -= 2;
          }
          while (v366);
          uint64_t v361 = v363 + v362;
          if (v359 != v360) {
            goto LABEL_344;
          }
LABEL_346:
          if (v73 != v361 + 1) {
LABEL_849:
          }
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_347:
          unint64_t v253 = v1180;
          if (v1180) {
            atomic_fetch_add_explicit(&v1180->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1207) {
            goto LABEL_964;
          }
          uint64_t v374 = v1204 - v1203;
          if (v1204 == v1203) {
            goto LABEL_965;
          }
          uint64_t v375 = (uint64_t)v1201;
          if (!v1201) {
            goto LABEL_717;
          }
          if ((unint64_t)(v374 - 8) < 8)
          {
            uint64_t v375 = 1;
            v376 = v1203;
            do
            {
LABEL_716:
              uint64_t v896 = *(void *)v376;
              v376 += 8;
              v375 *= v896;
            }
            while (v376 != v1204);
            goto LABEL_717;
          }
          unint64_t v891 = ((unint64_t)(v374 - 8) >> 3) + 1;
          v376 = &v1203[8 * (v891 & 0x3FFFFFFFFFFFFFFELL)];
          v892 = v1203 + 8;
          uint64_t v893 = 1;
          uint64_t v894 = v891 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v895 = 1;
          do
          {
            v893 *= *(v892 - 1);
            v895 *= *v892;
            v892 += 2;
            v894 -= 2;
          }
          while (v894);
          uint64_t v375 = v895 * v893;
          if (v891 != (v891 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_716;
          }
LABEL_717:
          unint64_t v897 = v374 >> 3;
          if ((unint64_t)(v374 >> 3) <= 1) {
            unint64_t v897 = 1;
          }
          if (v897 < 2)
          {
            unint64_t v898 = 0;
            uint64_t v899 = 0;
LABEL_724:
            unint64_t v905 = v897 - v898;
            uint64_t v906 = 8 * v898;
            v907 = &v1205[v906];
            v908 = &v1203[v906];
            do
            {
              uint64_t v909 = *(void *)v908;
              v908 += 8;
              uint64_t v910 = v909 - 1;
              uint64_t v911 = *(void *)v907;
              v907 += 8;
              v899 += v911 * v910;
              --v905;
            }
            while (v905);
            goto LABEL_726;
          }
          uint64_t v900 = 0;
          uint64_t v901 = 0;
          unint64_t v898 = v897 & 0xFFFFFFFFFFFFFFFELL;
          v902 = v1203 + 8;
          v903 = v1205 + 8;
          unint64_t v904 = v897 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v900 += *(v903 - 1) * (*(v902 - 1) - 1);
            v901 += *v903 * (*v902 - 1);
            v902 += 2;
            v903 += 2;
            v904 -= 2;
          }
          while (v904);
          uint64_t v899 = v901 + v900;
          if (v897 != v898) {
            goto LABEL_724;
          }
LABEL_726:
          if (v375 != v899 + 1) {
LABEL_964:
          }
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v912 = v1204 - v1203;
          if (v1204 != v1203)
          {
            unint64_t v913 = v912 >> 3;
            if ((unint64_t)(v912 >> 3) <= 1) {
              unint64_t v913 = 1;
            }
            if (v913 >= 2)
            {
              uint64_t v916 = 0;
              uint64_t v917 = 0;
              unint64_t v914 = v913 & 0xFFFFFFFFFFFFFFFELL;
              v918 = v1203 + 8;
              v919 = v1205 + 8;
              unint64_t v920 = v913 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v916 += *(v919 - 1) * (*(v918 - 1) - 1);
                v917 += *v919 * (*v918 - 1);
                v918 += 2;
                v919 += 2;
                v920 -= 2;
              }
              while (v920);
              uint64_t v915 = v917 + v916;
              if (v913 == v914) {
                goto LABEL_737;
              }
            }
            else
            {
              unint64_t v914 = 0;
              uint64_t v915 = 0;
            }
            unint64_t v921 = v913 - v914;
            uint64_t v922 = 8 * v914;
            v923 = &v1205[v922];
            v924 = &v1203[v922];
            do
            {
              uint64_t v925 = *(void *)v924;
              v924 += 8;
              uint64_t v926 = v925 - 1;
              uint64_t v927 = *(void *)v923;
              v923 += 8;
              v915 += v927 * v926;
              --v921;
            }
            while (v921);
LABEL_737:
            uint64_t v928 = v915 + 1;
            goto LABEL_966;
          }
LABEL_965:
          uint64_t v928 = 0;
LABEL_966:
          uint64_t v1126 = v1207 + v928;
          if (v1126)
          {
            unint64_t v1127 = 0;
            v1128 = (short float *)v1201;
            do
            {
              _S0 = (float)*(int *)(v71 + 4 * v1127);
              __asm { FCVT            H0, S0 }
              short float *v1128 = *v1128 + *(short float *)&_S0;
              ++v1128;
              unint64_t v1127 = (v1127 + 1) % v70;
              --v1126;
            }
            while (v1126);
          }
LABEL_1015:
          if (v253 && !atomic_fetch_add(&v253->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
            std::__shared_weak_count::__release_weak(v253);
          }
          if (v1205)
          {
            v1206 = v1205;
            operator delete(v1205);
          }
          if (v1203)
          {
            v1204 = v1203;
            operator delete(v1203);
          }
          v1142 = v1202;
          if (v1202 && !atomic_fetch_add(&v1202->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1142->__on_zero_shared)(v1142);
            std::__shared_weak_count::__release_weak(v1142);
          }
          if (v1183)
          {
            v1184 = v1183;
            operator delete(v1183);
          }
          if (v1181)
          {
            v1182 = (char *)v1181;
            operator delete(v1181);
          }
          v1143 = v1180;
          if (v1180 && !atomic_fetch_add(&v1180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1143->__on_zero_shared)(v1143);
            std::__shared_weak_count::__release_weak(v1143);
          }
          if (v1176)
          {
            v1177 = v1176;
            operator delete(v1176);
          }
          if (v1174)
          {
            v1175 = v1174;
            operator delete(v1174);
          }
          v1107 = v1173;
          if (v1173) {
            goto LABEL_1037;
          }
          return;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()();
      }
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1186, (uint64_t)a2);
      v1192 = &v1200;
      nitro::ndarray<unsigned char>::ndarray(&v1193, &v1186);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1201, (uint64_t)a1);
          unint64_t v18 = *(void *)v1195;
          if (v1199) {
            goto LABEL_851;
          }
          uint64_t v19 = v1193;
          uint64_t v20 = v1196 - v1195;
          if (v1196 == v1195) {
            goto LABEL_389;
          }
          if (!v1193)
          {
            uint64_t v21 = 0;
            goto LABEL_379;
          }
          if ((unint64_t)(v20 - 8) < 8)
          {
            uint64_t v21 = 1;
            uint64_t v22 = v1195;
            do
            {
LABEL_378:
              uint64_t v406 = *(void *)v22;
              v22 += 8;
              v21 *= v406;
            }
            while (v22 != v1196);
            goto LABEL_379;
          }
          unint64_t v401 = ((unint64_t)(v20 - 8) >> 3) + 1;
          uint64_t v22 = &v1195[8 * (v401 & 0x3FFFFFFFFFFFFFFELL)];
          v402 = v1195 + 8;
          uint64_t v403 = 1;
          uint64_t v404 = v401 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v405 = 1;
          do
          {
            v403 *= *(v402 - 1);
            v405 *= *v402;
            v402 += 2;
            v404 -= 2;
          }
          while (v404);
          uint64_t v21 = v405 * v403;
          if (v401 != (v401 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_378;
          }
LABEL_379:
          unint64_t v407 = v20 >> 3;
          if ((unint64_t)(v20 >> 3) <= 1) {
            unint64_t v407 = 1;
          }
          if (v407 < 2)
          {
            unint64_t v408 = 0;
            uint64_t v409 = 0;
LABEL_386:
            unint64_t v415 = v407 - v408;
            uint64_t v416 = 8 * v408;
            v417 = &v1197[v416];
            v418 = &v1195[v416];
            do
            {
              uint64_t v419 = *(void *)v418;
              v418 += 8;
              uint64_t v420 = v419 - 1;
              uint64_t v421 = *(void *)v417;
              v417 += 8;
              v409 += v421 * v420;
              --v415;
            }
            while (v415);
            goto LABEL_388;
          }
          uint64_t v410 = 0;
          uint64_t v411 = 0;
          unint64_t v408 = v407 & 0xFFFFFFFFFFFFFFFELL;
          v412 = v1195 + 8;
          v413 = v1197 + 8;
          unint64_t v414 = v407 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v410 += *(v413 - 1) * (*(v412 - 1) - 1);
            v411 += *v413 * (*v412 - 1);
            v412 += 2;
            v413 += 2;
            v414 -= 2;
          }
          while (v414);
          uint64_t v409 = v411 + v410;
          if (v407 != v408) {
            goto LABEL_386;
          }
LABEL_388:
          if (v21 != v409 + 1) {
LABEL_851:
          }
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_389:
          uint64_t v204 = v1194;
          if (v1194) {
            atomic_fetch_add_explicit(&v1194->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1207) {
            goto LABEL_976;
          }
          uint64_t v422 = v1204 - v1203;
          if (v1204 == v1203) {
            goto LABEL_977;
          }
          uint64_t v423 = (uint64_t)v1201;
          if (!v1201) {
            goto LABEL_767;
          }
          if ((unint64_t)(v422 - 8) < 8)
          {
            uint64_t v423 = 1;
            v424 = v1203;
            do
            {
LABEL_766:
              uint64_t v972 = *(void *)v424;
              v424 += 8;
              v423 *= v972;
            }
            while (v424 != v1204);
            goto LABEL_767;
          }
          unint64_t v967 = ((unint64_t)(v422 - 8) >> 3) + 1;
          v424 = &v1203[8 * (v967 & 0x3FFFFFFFFFFFFFFELL)];
          v968 = v1203 + 8;
          uint64_t v969 = 1;
          uint64_t v970 = v967 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v971 = 1;
          do
          {
            v969 *= *(v968 - 1);
            v971 *= *v968;
            v968 += 2;
            v970 -= 2;
          }
          while (v970);
          uint64_t v423 = v971 * v969;
          if (v967 != (v967 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_766;
          }
LABEL_767:
          unint64_t v973 = v422 >> 3;
          if ((unint64_t)(v422 >> 3) <= 1) {
            unint64_t v973 = 1;
          }
          if (v973 < 2)
          {
            unint64_t v974 = 0;
            uint64_t v975 = 0;
LABEL_774:
            unint64_t v981 = v973 - v974;
            uint64_t v982 = 8 * v974;
            v983 = &v1205[v982];
            v984 = &v1203[v982];
            do
            {
              uint64_t v985 = *(void *)v984;
              v984 += 8;
              uint64_t v986 = v985 - 1;
              uint64_t v987 = *(void *)v983;
              v983 += 8;
              v975 += v987 * v986;
              --v981;
            }
            while (v981);
            goto LABEL_776;
          }
          uint64_t v976 = 0;
          uint64_t v977 = 0;
          unint64_t v974 = v973 & 0xFFFFFFFFFFFFFFFELL;
          v978 = v1203 + 8;
          v979 = v1205 + 8;
          unint64_t v980 = v973 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v976 += *(v979 - 1) * (*(v978 - 1) - 1);
            v977 += *v979 * (*v978 - 1);
            v978 += 2;
            v979 += 2;
            v980 -= 2;
          }
          while (v980);
          uint64_t v975 = v977 + v976;
          if (v973 != v974) {
            goto LABEL_774;
          }
LABEL_776:
          if (v423 != v975 + 1) {
LABEL_976:
          }
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v988 = v1204 - v1203;
          if (v1204 != v1203)
          {
            unint64_t v989 = v988 >> 3;
            if ((unint64_t)(v988 >> 3) <= 1) {
              unint64_t v989 = 1;
            }
            if (v989 >= 2)
            {
              uint64_t v992 = 0;
              uint64_t v993 = 0;
              unint64_t v990 = v989 & 0xFFFFFFFFFFFFFFFELL;
              v994 = v1203 + 8;
              v995 = v1205 + 8;
              unint64_t v996 = v989 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v992 += *(v995 - 1) * (*(v994 - 1) - 1);
                v993 += *v995 * (*v994 - 1);
                v994 += 2;
                v995 += 2;
                v996 -= 2;
              }
              while (v996);
              uint64_t v991 = v993 + v992;
              if (v989 == v990) {
                goto LABEL_787;
              }
            }
            else
            {
              unint64_t v990 = 0;
              uint64_t v991 = 0;
            }
            unint64_t v997 = v989 - v990;
            uint64_t v998 = 8 * v990;
            v999 = &v1205[v998];
            v1000 = &v1203[v998];
            do
            {
              uint64_t v1001 = *(void *)v1000;
              v1000 += 8;
              uint64_t v1002 = v1001 - 1;
              uint64_t v1003 = *(void *)v999;
              v999 += 8;
              v991 += v1003 * v1002;
              --v997;
            }
            while (v997);
LABEL_787:
            uint64_t v1004 = v991 + 1;
            goto LABEL_978;
          }
LABEL_977:
          uint64_t v1004 = 0;
LABEL_978:
          uint64_t v1132 = v1207 + v1004;
          if (v1132)
          {
            unint64_t v1133 = 0;
            v1134 = v1201;
            do
            {
              *v1134++ += *(unsigned __int8 *)(v19 + v1133);
              unint64_t v1133 = (v1133 + 1) % v18;
              --v1132;
            }
            while (v1132);
          }
          goto LABEL_981;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1201, (uint64_t)a1);
          unint64_t v75 = *(void *)v1195;
          if (v1199) {
            goto LABEL_850;
          }
          uint64_t v76 = v1193;
          uint64_t v77 = v1196 - v1195;
          if (v1196 == v1195) {
            goto LABEL_368;
          }
          if (!v1193)
          {
            uint64_t v78 = 0;
            goto LABEL_358;
          }
          if ((unint64_t)(v77 - 8) < 8)
          {
            uint64_t v78 = 1;
            uint64_t v79 = v1195;
            do
            {
LABEL_357:
              uint64_t v382 = *(void *)v79;
              v79 += 8;
              v78 *= v382;
            }
            while (v79 != v1196);
            goto LABEL_358;
          }
          unint64_t v377 = ((unint64_t)(v77 - 8) >> 3) + 1;
          uint64_t v79 = &v1195[8 * (v377 & 0x3FFFFFFFFFFFFFFELL)];
          v378 = v1195 + 8;
          uint64_t v379 = 1;
          uint64_t v380 = v377 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v381 = 1;
          do
          {
            v379 *= *(v378 - 1);
            v381 *= *v378;
            v378 += 2;
            v380 -= 2;
          }
          while (v380);
          uint64_t v78 = v381 * v379;
          if (v377 != (v377 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_357;
          }
LABEL_358:
          unint64_t v383 = v77 >> 3;
          if ((unint64_t)(v77 >> 3) <= 1) {
            unint64_t v383 = 1;
          }
          if (v383 < 2)
          {
            unint64_t v384 = 0;
            uint64_t v385 = 0;
LABEL_365:
            unint64_t v391 = v383 - v384;
            uint64_t v392 = 8 * v384;
            v393 = &v1197[v392];
            v394 = &v1195[v392];
            do
            {
              uint64_t v395 = *(void *)v394;
              v394 += 8;
              uint64_t v396 = v395 - 1;
              uint64_t v397 = *(void *)v393;
              v393 += 8;
              v385 += v397 * v396;
              --v391;
            }
            while (v391);
            goto LABEL_367;
          }
          uint64_t v386 = 0;
          uint64_t v387 = 0;
          unint64_t v384 = v383 & 0xFFFFFFFFFFFFFFFELL;
          v388 = v1195 + 8;
          v389 = v1197 + 8;
          unint64_t v390 = v383 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v386 += *(v389 - 1) * (*(v388 - 1) - 1);
            v387 += *v389 * (*v388 - 1);
            v388 += 2;
            v389 += 2;
            v390 -= 2;
          }
          while (v390);
          uint64_t v385 = v387 + v386;
          if (v383 != v384) {
            goto LABEL_365;
          }
LABEL_367:
          if (v78 != v385 + 1) {
LABEL_850:
          }
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_368:
          uint64_t v204 = v1194;
          if (v1194) {
            atomic_fetch_add_explicit(&v1194->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1207) {
            goto LABEL_970;
          }
          uint64_t v398 = v1204 - v1203;
          if (v1204 == v1203) {
            goto LABEL_971;
          }
          uint64_t v399 = (uint64_t)v1201;
          if (!v1201) {
            goto LABEL_742;
          }
          if ((unint64_t)(v398 - 8) < 8)
          {
            uint64_t v399 = 1;
            v400 = v1203;
            do
            {
LABEL_741:
              uint64_t v934 = *(void *)v400;
              v400 += 8;
              v399 *= v934;
            }
            while (v400 != v1204);
            goto LABEL_742;
          }
          unint64_t v929 = ((unint64_t)(v398 - 8) >> 3) + 1;
          v400 = &v1203[8 * (v929 & 0x3FFFFFFFFFFFFFFELL)];
          v930 = v1203 + 8;
          uint64_t v931 = 1;
          uint64_t v932 = v929 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v933 = 1;
          do
          {
            v931 *= *(v930 - 1);
            v933 *= *v930;
            v930 += 2;
            v932 -= 2;
          }
          while (v932);
          uint64_t v399 = v933 * v931;
          if (v929 != (v929 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_741;
          }
LABEL_742:
          unint64_t v935 = v398 >> 3;
          if ((unint64_t)(v398 >> 3) <= 1) {
            unint64_t v935 = 1;
          }
          if (v935 < 2)
          {
            unint64_t v936 = 0;
            uint64_t v937 = 0;
LABEL_749:
            unint64_t v943 = v935 - v936;
            uint64_t v944 = 8 * v936;
            v945 = &v1205[v944];
            v946 = &v1203[v944];
            do
            {
              uint64_t v947 = *(void *)v946;
              v946 += 8;
              uint64_t v948 = v947 - 1;
              uint64_t v949 = *(void *)v945;
              v945 += 8;
              v937 += v949 * v948;
              --v943;
            }
            while (v943);
            goto LABEL_751;
          }
          uint64_t v938 = 0;
          uint64_t v939 = 0;
          unint64_t v936 = v935 & 0xFFFFFFFFFFFFFFFELL;
          v940 = v1203 + 8;
          v941 = v1205 + 8;
          unint64_t v942 = v935 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v938 += *(v941 - 1) * (*(v940 - 1) - 1);
            v939 += *v941 * (*v940 - 1);
            v940 += 2;
            v941 += 2;
            v942 -= 2;
          }
          while (v942);
          uint64_t v937 = v939 + v938;
          if (v935 != v936) {
            goto LABEL_749;
          }
LABEL_751:
          if (v399 != v937 + 1) {
LABEL_970:
          }
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v950 = v1204 - v1203;
          if (v1204 != v1203)
          {
            unint64_t v951 = v950 >> 3;
            if ((unint64_t)(v950 >> 3) <= 1) {
              unint64_t v951 = 1;
            }
            if (v951 >= 2)
            {
              uint64_t v954 = 0;
              uint64_t v955 = 0;
              unint64_t v952 = v951 & 0xFFFFFFFFFFFFFFFELL;
              v956 = v1203 + 8;
              v957 = v1205 + 8;
              unint64_t v958 = v951 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v954 += *(v957 - 1) * (*(v956 - 1) - 1);
                v955 += *v957 * (*v956 - 1);
                v956 += 2;
                v957 += 2;
                v958 -= 2;
              }
              while (v958);
              uint64_t v953 = v955 + v954;
              if (v951 == v952) {
                goto LABEL_762;
              }
            }
            else
            {
              unint64_t v952 = 0;
              uint64_t v953 = 0;
            }
            unint64_t v959 = v951 - v952;
            uint64_t v960 = 8 * v952;
            v961 = &v1205[v960];
            v962 = &v1203[v960];
            do
            {
              uint64_t v963 = *(void *)v962;
              v962 += 8;
              uint64_t v964 = v963 - 1;
              uint64_t v965 = *(void *)v961;
              v961 += 8;
              v953 += v965 * v964;
              --v959;
            }
            while (v959);
LABEL_762:
            uint64_t v966 = v953 + 1;
            goto LABEL_972;
          }
LABEL_971:
          uint64_t v966 = 0;
LABEL_972:
          if (v1207 + v966)
          {
            unint64_t v1130 = 0;
            unint64_t v1131 = 0;
            do
            {
              *((unsigned char *)v1201 + v1130) += *(unsigned char *)(v76 + v1131);
              unint64_t v1131 = (v1131 + 1) % v75;
              ++v1130;
            }
            while (v1130 < v1207 + v966);
          }
          goto LABEL_981;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1201, (uint64_t)a1);
          unint64_t v44 = *(void *)v1195;
          if (v1199) {
            goto LABEL_842;
          }
          uint64_t v45 = v1193;
          uint64_t v46 = v1196 - v1195;
          if (v1196 == v1195) {
            goto LABEL_200;
          }
          if (!v1193)
          {
            uint64_t v47 = 0;
            goto LABEL_190;
          }
          if ((unint64_t)(v46 - 8) < 8)
          {
            uint64_t v47 = 1;
            uint64_t v48 = v1195;
            do
            {
LABEL_189:
              uint64_t v188 = *(void *)v48;
              v48 += 8;
              v47 *= v188;
            }
            while (v48 != v1196);
            goto LABEL_190;
          }
          unint64_t v183 = ((unint64_t)(v46 - 8) >> 3) + 1;
          uint64_t v48 = &v1195[8 * (v183 & 0x3FFFFFFFFFFFFFFELL)];
          uint64_t v184 = v1195 + 8;
          uint64_t v185 = 1;
          uint64_t v186 = v183 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v187 = 1;
          do
          {
            v185 *= *(v184 - 1);
            v187 *= *v184;
            v184 += 2;
            v186 -= 2;
          }
          while (v186);
          uint64_t v47 = v187 * v185;
          if (v183 != (v183 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_189;
          }
LABEL_190:
          unint64_t v189 = v46 >> 3;
          if ((unint64_t)(v46 >> 3) <= 1) {
            unint64_t v189 = 1;
          }
          if (v189 < 2)
          {
            unint64_t v190 = 0;
            uint64_t v191 = 0;
LABEL_197:
            unint64_t v197 = v189 - v190;
            uint64_t v198 = 8 * v190;
            unint64_t v199 = &v1197[v198];
            uint64_t v200 = &v1195[v198];
            do
            {
              uint64_t v201 = *(void *)v200;
              v200 += 8;
              uint64_t v202 = v201 - 1;
              uint64_t v203 = *(void *)v199;
              v199 += 8;
              v191 += v203 * v202;
              --v197;
            }
            while (v197);
            goto LABEL_199;
          }
          uint64_t v192 = 0;
          uint64_t v193 = 0;
          unint64_t v190 = v189 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v194 = v1195 + 8;
          uint64_t v195 = v1197 + 8;
          unint64_t v196 = v189 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v192 += *(v195 - 1) * (*(v194 - 1) - 1);
            v193 += *v195 * (*v194 - 1);
            v194 += 2;
            v195 += 2;
            v196 -= 2;
          }
          while (v196);
          uint64_t v191 = v193 + v192;
          if (v189 != v190) {
            goto LABEL_197;
          }
LABEL_199:
          if (v47 != v191 + 1) {
LABEL_842:
          }
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_200:
          uint64_t v204 = v1194;
          if (v1194) {
            atomic_fetch_add_explicit(&v1194->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1207) {
            goto LABEL_878;
          }
          uint64_t v205 = v1204 - v1203;
          if (v1204 == v1203) {
            goto LABEL_879;
          }
          uint64_t v206 = (uint64_t)v1201;
          if (!v1201) {
            goto LABEL_542;
          }
          if ((unint64_t)(v205 - 8) < 8)
          {
            uint64_t v206 = 1;
            uint64_t v207 = v1203;
            do
            {
LABEL_541:
              uint64_t v630 = *(void *)v207;
              v207 += 8;
              v206 *= v630;
            }
            while (v207 != v1204);
            goto LABEL_542;
          }
          unint64_t v625 = ((unint64_t)(v205 - 8) >> 3) + 1;
          uint64_t v207 = &v1203[8 * (v625 & 0x3FFFFFFFFFFFFFFELL)];
          v626 = v1203 + 8;
          uint64_t v627 = 1;
          uint64_t v628 = v625 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v629 = 1;
          do
          {
            v627 *= *(v626 - 1);
            v629 *= *v626;
            v626 += 2;
            v628 -= 2;
          }
          while (v628);
          uint64_t v206 = v629 * v627;
          if (v625 != (v625 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_541;
          }
LABEL_542:
          unint64_t v631 = v205 >> 3;
          if ((unint64_t)(v205 >> 3) <= 1) {
            unint64_t v631 = 1;
          }
          if (v631 < 2)
          {
            unint64_t v632 = 0;
            uint64_t v633 = 0;
LABEL_549:
            unint64_t v639 = v631 - v632;
            uint64_t v640 = 8 * v632;
            v641 = &v1205[v640];
            v642 = &v1203[v640];
            do
            {
              uint64_t v643 = *(void *)v642;
              v642 += 8;
              uint64_t v644 = v643 - 1;
              uint64_t v645 = *(void *)v641;
              v641 += 8;
              v633 += v645 * v644;
              --v639;
            }
            while (v639);
            goto LABEL_551;
          }
          uint64_t v634 = 0;
          uint64_t v635 = 0;
          unint64_t v632 = v631 & 0xFFFFFFFFFFFFFFFELL;
          v636 = v1203 + 8;
          v637 = v1205 + 8;
          unint64_t v638 = v631 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v634 += *(v637 - 1) * (*(v636 - 1) - 1);
            v635 += *v637 * (*v636 - 1);
            v636 += 2;
            v637 += 2;
            v638 -= 2;
          }
          while (v638);
          uint64_t v633 = v635 + v634;
          if (v631 != v632) {
            goto LABEL_549;
          }
LABEL_551:
          if (v206 != v633 + 1) {
LABEL_878:
          }
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v646 = v1204 - v1203;
          if (v1204 != v1203)
          {
            unint64_t v647 = v646 >> 3;
            if ((unint64_t)(v646 >> 3) <= 1) {
              unint64_t v647 = 1;
            }
            if (v647 >= 2)
            {
              uint64_t v650 = 0;
              uint64_t v651 = 0;
              unint64_t v648 = v647 & 0xFFFFFFFFFFFFFFFELL;
              v652 = v1203 + 8;
              v653 = v1205 + 8;
              unint64_t v654 = v647 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v650 += *(v653 - 1) * (*(v652 - 1) - 1);
                v651 += *v653 * (*v652 - 1);
                v652 += 2;
                v653 += 2;
                v654 -= 2;
              }
              while (v654);
              uint64_t v649 = v651 + v650;
              if (v647 == v648) {
                goto LABEL_562;
              }
            }
            else
            {
              unint64_t v648 = 0;
              uint64_t v649 = 0;
            }
            unint64_t v655 = v647 - v648;
            uint64_t v656 = 8 * v648;
            v657 = &v1205[v656];
            v658 = &v1203[v656];
            do
            {
              uint64_t v659 = *(void *)v658;
              v658 += 8;
              uint64_t v660 = v659 - 1;
              uint64_t v661 = *(void *)v657;
              v657 += 8;
              v649 += v661 * v660;
              --v655;
            }
            while (v655);
LABEL_562:
            uint64_t v662 = v649 + 1;
            goto LABEL_880;
          }
LABEL_879:
          uint64_t v662 = 0;
LABEL_880:
          uint64_t v1099 = v1207 + v662;
          if (v1099)
          {
            unint64_t v1100 = 0;
            v1101 = (float *)v1201;
            do
            {
              LOBYTE(v43) = *(unsigned char *)(v45 + v1100);
              float v43 = *v1101 + (float)LODWORD(v43);
              *v1101++ = v43;
              unint64_t v1100 = (v1100 + 1) % v44;
              --v1099;
            }
            while (v1099);
          }
          goto LABEL_981;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1201, (uint64_t)a1);
          unint64_t v65 = *(void *)v1195;
          if (v1199) {
            goto LABEL_847;
          }
          uint64_t v66 = v1193;
          uint64_t v67 = v1196 - v1195;
          if (v1196 == v1195) {
            goto LABEL_305;
          }
          if (!v1193)
          {
            uint64_t v68 = 0;
            goto LABEL_295;
          }
          if ((unint64_t)(v67 - 8) < 8)
          {
            uint64_t v68 = 1;
            uint64_t v69 = v1195;
            do
            {
LABEL_294:
              uint64_t v310 = *(void *)v69;
              v69 += 8;
              v68 *= v310;
            }
            while (v69 != v1196);
            goto LABEL_295;
          }
          unint64_t v305 = ((unint64_t)(v67 - 8) >> 3) + 1;
          uint64_t v69 = &v1195[8 * (v305 & 0x3FFFFFFFFFFFFFFELL)];
          uint64_t v306 = v1195 + 8;
          uint64_t v307 = 1;
          uint64_t v308 = v305 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v309 = 1;
          do
          {
            v307 *= *(v306 - 1);
            v309 *= *v306;
            v306 += 2;
            v308 -= 2;
          }
          while (v308);
          uint64_t v68 = v309 * v307;
          if (v305 != (v305 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_294;
          }
LABEL_295:
          unint64_t v311 = v67 >> 3;
          if ((unint64_t)(v67 >> 3) <= 1) {
            unint64_t v311 = 1;
          }
          if (v311 < 2)
          {
            unint64_t v312 = 0;
            uint64_t v313 = 0;
LABEL_302:
            unint64_t v319 = v311 - v312;
            uint64_t v320 = 8 * v312;
            uint64_t v321 = &v1197[v320];
            uint64_t v322 = &v1195[v320];
            do
            {
              uint64_t v323 = *(void *)v322;
              v322 += 8;
              uint64_t v324 = v323 - 1;
              uint64_t v325 = *(void *)v321;
              v321 += 8;
              v313 += v325 * v324;
              --v319;
            }
            while (v319);
            goto LABEL_304;
          }
          uint64_t v314 = 0;
          uint64_t v315 = 0;
          unint64_t v312 = v311 & 0xFFFFFFFFFFFFFFFELL;
          long long v316 = v1195 + 8;
          uint64_t v317 = v1197 + 8;
          unint64_t v318 = v311 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v314 += *(v317 - 1) * (*(v316 - 1) - 1);
            v315 += *v317 * (*v316 - 1);
            v316 += 2;
            v317 += 2;
            v318 -= 2;
          }
          while (v318);
          uint64_t v313 = v315 + v314;
          if (v311 != v312) {
            goto LABEL_302;
          }
LABEL_304:
          if (v68 != v313 + 1) {
LABEL_847:
          }
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_305:
          uint64_t v204 = v1194;
          if (v1194) {
            atomic_fetch_add_explicit(&v1194->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1207) {
            goto LABEL_930;
          }
          uint64_t v326 = v1204 - v1203;
          if (v1204 == v1203) {
            goto LABEL_931;
          }
          uint64_t v327 = (uint64_t)v1201;
          if (!v1201) {
            goto LABEL_667;
          }
          if ((unint64_t)(v326 - 8) < 8)
          {
            uint64_t v327 = 1;
            uint64_t v328 = v1203;
            do
            {
LABEL_666:
              uint64_t v820 = *(void *)v328;
              v328 += 8;
              v327 *= v820;
            }
            while (v328 != v1204);
            goto LABEL_667;
          }
          unint64_t v815 = ((unint64_t)(v326 - 8) >> 3) + 1;
          uint64_t v328 = &v1203[8 * (v815 & 0x3FFFFFFFFFFFFFFELL)];
          v816 = v1203 + 8;
          uint64_t v817 = 1;
          uint64_t v818 = v815 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v819 = 1;
          do
          {
            v817 *= *(v816 - 1);
            v819 *= *v816;
            v816 += 2;
            v818 -= 2;
          }
          while (v818);
          uint64_t v327 = v819 * v817;
          if (v815 != (v815 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_666;
          }
LABEL_667:
          unint64_t v821 = v326 >> 3;
          if ((unint64_t)(v326 >> 3) <= 1) {
            unint64_t v821 = 1;
          }
          if (v821 < 2)
          {
            unint64_t v822 = 0;
            uint64_t v823 = 0;
LABEL_674:
            unint64_t v829 = v821 - v822;
            uint64_t v830 = 8 * v822;
            v831 = &v1205[v830];
            v832 = &v1203[v830];
            do
            {
              uint64_t v833 = *(void *)v832;
              v832 += 8;
              uint64_t v834 = v833 - 1;
              uint64_t v835 = *(void *)v831;
              v831 += 8;
              v823 += v835 * v834;
              --v829;
            }
            while (v829);
            goto LABEL_676;
          }
          uint64_t v824 = 0;
          uint64_t v825 = 0;
          unint64_t v822 = v821 & 0xFFFFFFFFFFFFFFFELL;
          v826 = v1203 + 8;
          v827 = v1205 + 8;
          unint64_t v828 = v821 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v824 += *(v827 - 1) * (*(v826 - 1) - 1);
            v825 += *v827 * (*v826 - 1);
            v826 += 2;
            v827 += 2;
            v828 -= 2;
          }
          while (v828);
          uint64_t v823 = v825 + v824;
          if (v821 != v822) {
            goto LABEL_674;
          }
LABEL_676:
          if (v327 != v823 + 1) {
LABEL_930:
          }
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v836 = v1204 - v1203;
          if (v1204 != v1203)
          {
            unint64_t v837 = v836 >> 3;
            if ((unint64_t)(v836 >> 3) <= 1) {
              unint64_t v837 = 1;
            }
            if (v837 >= 2)
            {
              uint64_t v840 = 0;
              uint64_t v841 = 0;
              unint64_t v838 = v837 & 0xFFFFFFFFFFFFFFFELL;
              v842 = v1203 + 8;
              v843 = v1205 + 8;
              unint64_t v844 = v837 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v840 += *(v843 - 1) * (*(v842 - 1) - 1);
                v841 += *v843 * (*v842 - 1);
                v842 += 2;
                v843 += 2;
                v844 -= 2;
              }
              while (v844);
              uint64_t v839 = v841 + v840;
              if (v837 == v838) {
                goto LABEL_687;
              }
            }
            else
            {
              unint64_t v838 = 0;
              uint64_t v839 = 0;
            }
            unint64_t v845 = v837 - v838;
            uint64_t v846 = 8 * v838;
            v847 = &v1205[v846];
            v848 = &v1203[v846];
            do
            {
              uint64_t v849 = *(void *)v848;
              v848 += 8;
              uint64_t v850 = v849 - 1;
              uint64_t v851 = *(void *)v847;
              v847 += 8;
              v839 += v851 * v850;
              --v845;
            }
            while (v845);
LABEL_687:
            uint64_t v852 = v839 + 1;
            goto LABEL_932;
          }
LABEL_931:
          uint64_t v852 = 0;
LABEL_932:
          uint64_t v1116 = v1207 + v852;
          if (v1116)
          {
            unint64_t v1117 = 0;
            v1118 = (__int16 *)v1201;
            do
            {
              LOBYTE(_S0) = *(unsigned char *)(v66 + v1117);
              _H1 = *v1118;
              __asm { FCVT            S1, H1 }
              _S0 = (float)LODWORD(_S0) + _S1;
              __asm { FCVT            H0, S0 }
              *v1118++ = LOWORD(_S0);
              unint64_t v1117 = (v1117 + 1) % v65;
              --v1116;
            }
            while (v1116);
          }
LABEL_981:
          if (v204 && !atomic_fetch_add(&v204->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
            std::__shared_weak_count::__release_weak(v204);
          }
          if (v1205)
          {
            v1206 = v1205;
            operator delete(v1205);
          }
          if (v1203)
          {
            v1204 = v1203;
            operator delete(v1203);
          }
          v1135 = v1202;
          if (v1202 && !atomic_fetch_add(&v1202->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1135->__on_zero_shared)(v1135);
            std::__shared_weak_count::__release_weak(v1135);
          }
          if (v1197)
          {
            v1198 = v1197;
            operator delete(v1197);
          }
          if (v1195)
          {
            v1196 = v1195;
            operator delete(v1195);
          }
          v1136 = v1194;
          if (v1194 && !atomic_fetch_add(&v1194->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1136->__on_zero_shared)(v1136);
            std::__shared_weak_count::__release_weak(v1136);
          }
          if (v1190)
          {
            v1191 = v1190;
            operator delete(v1190);
          }
          if (v1188)
          {
            v1189 = v1188;
            operator delete(v1188);
          }
          v1107 = v1187;
          if (!v1187) {
            return;
          }
          goto LABEL_1037;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()();
      }
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v1144, (uint64_t)a2);
      v1150 = &v1200;
      nitro::ndarray<float>::ndarray(&v1151, &v1144);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1201, (uint64_t)a1);
          unint64_t v8 = *(void *)v1153;
          if (v1157) {
            goto LABEL_843;
          }
          uint64_t v9 = v1151;
          uint64_t v10 = v1154 - (unsigned char *)v1153;
          if (v1154 == v1153) {
            goto LABEL_221;
          }
          if (!v1151)
          {
            uint64_t v11 = 0;
            goto LABEL_211;
          }
          if ((unint64_t)(v10 - 8) < 8)
          {
            uint64_t v11 = 1;
            uint64_t v12 = (char *)v1153;
            do
            {
LABEL_210:
              uint64_t v213 = *(void *)v12;
              v12 += 8;
              v11 *= v213;
            }
            while (v12 != v1154);
            goto LABEL_211;
          }
          unint64_t v208 = ((unint64_t)(v10 - 8) >> 3) + 1;
          uint64_t v12 = (char *)v1153 + 8 * (v208 & 0x3FFFFFFFFFFFFFFELL);
          unint64_t v209 = (char *)v1153 + 8;
          uint64_t v210 = 1;
          uint64_t v211 = v208 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v212 = 1;
          do
          {
            v210 *= *(v209 - 1);
            v212 *= *v209;
            v209 += 2;
            v211 -= 2;
          }
          while (v211);
          uint64_t v11 = v212 * v210;
          if (v208 != (v208 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_210;
          }
LABEL_211:
          unint64_t v214 = v10 >> 3;
          if ((unint64_t)(v10 >> 3) <= 1) {
            unint64_t v214 = 1;
          }
          if (v214 < 2)
          {
            unint64_t v215 = 0;
            uint64_t v216 = 0;
LABEL_218:
            unint64_t v222 = v214 - v215;
            uint64_t v223 = 8 * v215;
            uint64_t v224 = (uint64_t *)((char *)__p + v223);
            unint64_t v225 = (uint64_t *)((char *)v1153 + v223);
            do
            {
              uint64_t v226 = *v225++;
              uint64_t v227 = v226 - 1;
              uint64_t v228 = *v224++;
              v216 += v228 * v227;
              --v222;
            }
            while (v222);
            goto LABEL_220;
          }
          uint64_t v217 = 0;
          uint64_t v218 = 0;
          unint64_t v215 = v214 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v219 = (char *)v1153 + 8;
          uint64_t v220 = (char *)__p + 8;
          unint64_t v221 = v214 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v217 += *(v220 - 1) * (*(v219 - 1) - 1);
            v218 += *v220 * (*v219 - 1);
            v219 += 2;
            v220 += 2;
            v221 -= 2;
          }
          while (v221);
          uint64_t v216 = v218 + v217;
          if (v214 != v215) {
            goto LABEL_218;
          }
LABEL_220:
          if (v11 != v216 + 1) {
LABEL_843:
          }
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_221:
          int v106 = v1152;
          if (v1152) {
            atomic_fetch_add_explicit(&v1152->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1207) {
            goto LABEL_884;
          }
          uint64_t v229 = v1204 - v1203;
          if (v1204 == v1203) {
            goto LABEL_885;
          }
          uint64_t v230 = (uint64_t)v1201;
          if (!v1201) {
            goto LABEL_567;
          }
          if ((unint64_t)(v229 - 8) < 8)
          {
            uint64_t v230 = 1;
            uint64_t v231 = v1203;
            do
            {
LABEL_566:
              uint64_t v668 = *(void *)v231;
              v231 += 8;
              v230 *= v668;
            }
            while (v231 != v1204);
            goto LABEL_567;
          }
          unint64_t v663 = ((unint64_t)(v229 - 8) >> 3) + 1;
          uint64_t v231 = &v1203[8 * (v663 & 0x3FFFFFFFFFFFFFFELL)];
          v664 = v1203 + 8;
          uint64_t v665 = 1;
          uint64_t v666 = v663 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v667 = 1;
          do
          {
            v665 *= *(v664 - 1);
            v667 *= *v664;
            v664 += 2;
            v666 -= 2;
          }
          while (v666);
          uint64_t v230 = v667 * v665;
          if (v663 != (v663 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_566;
          }
LABEL_567:
          unint64_t v669 = v229 >> 3;
          if ((unint64_t)(v229 >> 3) <= 1) {
            unint64_t v669 = 1;
          }
          if (v669 < 2)
          {
            unint64_t v670 = 0;
            uint64_t v671 = 0;
LABEL_574:
            unint64_t v677 = v669 - v670;
            uint64_t v678 = 8 * v670;
            v679 = &v1205[v678];
            v680 = &v1203[v678];
            do
            {
              uint64_t v681 = *(void *)v680;
              v680 += 8;
              uint64_t v682 = v681 - 1;
              uint64_t v683 = *(void *)v679;
              v679 += 8;
              v671 += v683 * v682;
              --v677;
            }
            while (v677);
            goto LABEL_576;
          }
          uint64_t v672 = 0;
          uint64_t v673 = 0;
          unint64_t v670 = v669 & 0xFFFFFFFFFFFFFFFELL;
          v674 = v1203 + 8;
          v675 = v1205 + 8;
          unint64_t v676 = v669 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v672 += *(v675 - 1) * (*(v674 - 1) - 1);
            v673 += *v675 * (*v674 - 1);
            v674 += 2;
            v675 += 2;
            v676 -= 2;
          }
          while (v676);
          uint64_t v671 = v673 + v672;
          if (v669 != v670) {
            goto LABEL_574;
          }
LABEL_576:
          if (v230 != v671 + 1) {
LABEL_884:
          }
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v684 = v1204 - v1203;
          if (v1204 != v1203)
          {
            unint64_t v685 = v684 >> 3;
            if ((unint64_t)(v684 >> 3) <= 1) {
              unint64_t v685 = 1;
            }
            if (v685 >= 2)
            {
              uint64_t v688 = 0;
              uint64_t v689 = 0;
              unint64_t v686 = v685 & 0xFFFFFFFFFFFFFFFELL;
              v690 = v1203 + 8;
              v691 = v1205 + 8;
              unint64_t v692 = v685 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v688 += *(v691 - 1) * (*(v690 - 1) - 1);
                v689 += *v691 * (*v690 - 1);
                v690 += 2;
                v691 += 2;
                v692 -= 2;
              }
              while (v692);
              uint64_t v687 = v689 + v688;
              if (v685 == v686) {
                goto LABEL_587;
              }
            }
            else
            {
              unint64_t v686 = 0;
              uint64_t v687 = 0;
            }
            unint64_t v693 = v685 - v686;
            uint64_t v694 = 8 * v686;
            v695 = &v1205[v694];
            v696 = &v1203[v694];
            do
            {
              uint64_t v697 = *(void *)v696;
              v696 += 8;
              uint64_t v698 = v697 - 1;
              uint64_t v699 = *(void *)v695;
              v695 += 8;
              v687 += v699 * v698;
              --v693;
            }
            while (v693);
LABEL_587:
            uint64_t v700 = v687 + 1;
            goto LABEL_886;
          }
LABEL_885:
          uint64_t v700 = 0;
LABEL_886:
          uint64_t v1102 = v1207 + v700;
          if (v1102)
          {
            unint64_t v1103 = 0;
            v1104 = v1201;
            do
            {
              *v1104++ += (int)*(float *)(v9 + 4 * v1103);
              unint64_t v1103 = (v1103 + 1) % v8;
              --v1102;
            }
            while (v1102);
          }
          goto LABEL_889;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1201, (uint64_t)a1);
          unint64_t v38 = *(void *)v1153;
          if (v1157) {
            goto LABEL_841;
          }
          uint64_t v39 = v1151;
          uint64_t v40 = v1154 - (unsigned char *)v1153;
          if (v1154 == v1153) {
            goto LABEL_179;
          }
          if (!v1151)
          {
            uint64_t v41 = 0;
            goto LABEL_169;
          }
          if ((unint64_t)(v40 - 8) < 8)
          {
            uint64_t v41 = 1;
            long long v42 = (char *)v1153;
            do
            {
LABEL_168:
              uint64_t v164 = *(void *)v42;
              v42 += 8;
              v41 *= v164;
            }
            while (v42 != v1154);
            goto LABEL_169;
          }
          unint64_t v159 = ((unint64_t)(v40 - 8) >> 3) + 1;
          long long v42 = (char *)v1153 + 8 * (v159 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v160 = (char *)v1153 + 8;
          uint64_t v161 = 1;
          uint64_t v162 = v159 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v163 = 1;
          do
          {
            v161 *= *(v160 - 1);
            v163 *= *v160;
            v160 += 2;
            v162 -= 2;
          }
          while (v162);
          uint64_t v41 = v163 * v161;
          if (v159 != (v159 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_168;
          }
LABEL_169:
          unint64_t v165 = v40 >> 3;
          if ((unint64_t)(v40 >> 3) <= 1) {
            unint64_t v165 = 1;
          }
          if (v165 < 2)
          {
            unint64_t v166 = 0;
            uint64_t v167 = 0;
LABEL_176:
            unint64_t v173 = v165 - v166;
            uint64_t v174 = 8 * v166;
            uint64_t v175 = (uint64_t *)((char *)__p + v174);
            unint64_t v176 = (uint64_t *)((char *)v1153 + v174);
            do
            {
              uint64_t v177 = *v176++;
              uint64_t v178 = v177 - 1;
              uint64_t v179 = *v175++;
              v167 += v179 * v178;
              --v173;
            }
            while (v173);
            goto LABEL_178;
          }
          uint64_t v168 = 0;
          uint64_t v169 = 0;
          unint64_t v166 = v165 & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v170 = (char *)v1153 + 8;
          uint64_t v171 = (char *)__p + 8;
          unint64_t v172 = v165 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v168 += *(v171 - 1) * (*(v170 - 1) - 1);
            v169 += *v171 * (*v170 - 1);
            v170 += 2;
            v171 += 2;
            v172 -= 2;
          }
          while (v172);
          uint64_t v167 = v169 + v168;
          if (v165 != v166) {
            goto LABEL_176;
          }
LABEL_178:
          if (v41 != v167 + 1) {
LABEL_841:
          }
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_179:
          int v106 = v1152;
          if (v1152) {
            atomic_fetch_add_explicit(&v1152->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1207) {
            goto LABEL_872;
          }
          uint64_t v180 = v1204 - v1203;
          if (v1204 == v1203) {
            goto LABEL_873;
          }
          uint64_t v181 = (uint64_t)v1201;
          if (!v1201) {
            goto LABEL_517;
          }
          if ((unint64_t)(v180 - 8) < 8)
          {
            uint64_t v181 = 1;
            uint64_t v182 = v1203;
            do
            {
LABEL_516:
              uint64_t v592 = *(void *)v182;
              v182 += 8;
              v181 *= v592;
            }
            while (v182 != v1204);
            goto LABEL_517;
          }
          unint64_t v587 = ((unint64_t)(v180 - 8) >> 3) + 1;
          uint64_t v182 = &v1203[8 * (v587 & 0x3FFFFFFFFFFFFFFELL)];
          v588 = v1203 + 8;
          uint64_t v589 = 1;
          uint64_t v590 = v587 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v591 = 1;
          do
          {
            v589 *= *(v588 - 1);
            v591 *= *v588;
            v588 += 2;
            v590 -= 2;
          }
          while (v590);
          uint64_t v181 = v591 * v589;
          if (v587 != (v587 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_516;
          }
LABEL_517:
          unint64_t v593 = v180 >> 3;
          if ((unint64_t)(v180 >> 3) <= 1) {
            unint64_t v593 = 1;
          }
          if (v593 < 2)
          {
            unint64_t v594 = 0;
            uint64_t v595 = 0;
LABEL_524:
            unint64_t v601 = v593 - v594;
            uint64_t v602 = 8 * v594;
            v603 = &v1205[v602];
            v604 = &v1203[v602];
            do
            {
              uint64_t v605 = *(void *)v604;
              v604 += 8;
              uint64_t v606 = v605 - 1;
              uint64_t v607 = *(void *)v603;
              v603 += 8;
              v595 += v607 * v606;
              --v601;
            }
            while (v601);
            goto LABEL_526;
          }
          uint64_t v596 = 0;
          uint64_t v597 = 0;
          unint64_t v594 = v593 & 0xFFFFFFFFFFFFFFFELL;
          v598 = v1203 + 8;
          v599 = v1205 + 8;
          unint64_t v600 = v593 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v596 += *(v599 - 1) * (*(v598 - 1) - 1);
            v597 += *v599 * (*v598 - 1);
            v598 += 2;
            v599 += 2;
            v600 -= 2;
          }
          while (v600);
          uint64_t v595 = v597 + v596;
          if (v593 != v594) {
            goto LABEL_524;
          }
LABEL_526:
          if (v181 != v595 + 1) {
LABEL_872:
          }
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v608 = v1204 - v1203;
          if (v1204 != v1203)
          {
            unint64_t v609 = v608 >> 3;
            if ((unint64_t)(v608 >> 3) <= 1) {
              unint64_t v609 = 1;
            }
            if (v609 >= 2)
            {
              uint64_t v612 = 0;
              uint64_t v613 = 0;
              unint64_t v610 = v609 & 0xFFFFFFFFFFFFFFFELL;
              v614 = v1203 + 8;
              v615 = v1205 + 8;
              unint64_t v616 = v609 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v612 += *(v615 - 1) * (*(v614 - 1) - 1);
                v613 += *v615 * (*v614 - 1);
                v614 += 2;
                v615 += 2;
                v616 -= 2;
              }
              while (v616);
              uint64_t v611 = v613 + v612;
              if (v609 == v610) {
                goto LABEL_537;
              }
            }
            else
            {
              unint64_t v610 = 0;
              uint64_t v611 = 0;
            }
            unint64_t v617 = v609 - v610;
            uint64_t v618 = 8 * v610;
            v619 = &v1205[v618];
            v620 = &v1203[v618];
            do
            {
              uint64_t v621 = *(void *)v620;
              v620 += 8;
              uint64_t v622 = v621 - 1;
              uint64_t v623 = *(void *)v619;
              v619 += 8;
              v611 += v623 * v622;
              --v617;
            }
            while (v617);
LABEL_537:
            uint64_t v624 = v611 + 1;
            goto LABEL_874;
          }
LABEL_873:
          uint64_t v624 = 0;
LABEL_874:
          if (v1207 + v624)
          {
            unint64_t v1097 = 0;
            unint64_t v1098 = 0;
            do
            {
              *((unsigned char *)v1201 + v1097) += (int)*(float *)(v39 + 4 * v1098);
              unint64_t v1098 = (v1098 + 1) % v38;
              ++v1097;
            }
            while (v1097 < v1207 + v624);
          }
          goto LABEL_889;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1201, (uint64_t)a1);
          unint64_t v23 = *(void *)v1153;
          if (v1157) {
            goto LABEL_838;
          }
          uint64_t v24 = v1151;
          uint64_t v25 = v1154 - (unsigned char *)v1153;
          if (v1154 == v1153) {
            goto LABEL_116;
          }
          if (!v1151)
          {
            uint64_t v26 = 0;
            goto LABEL_106;
          }
          if ((unint64_t)(v25 - 8) < 8)
          {
            uint64_t v26 = 1;
            uint64_t v27 = (char *)v1153;
            do
            {
LABEL_105:
              uint64_t v90 = *(void *)v27;
              v27 += 8;
              v26 *= v90;
            }
            while (v27 != v1154);
            goto LABEL_106;
          }
          unint64_t v85 = ((unint64_t)(v25 - 8) >> 3) + 1;
          uint64_t v27 = (char *)v1153 + 8 * (v85 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v86 = (char *)v1153 + 8;
          uint64_t v87 = 1;
          uint64_t v88 = v85 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v89 = 1;
          do
          {
            v87 *= *(v86 - 1);
            v89 *= *v86;
            v86 += 2;
            v88 -= 2;
          }
          while (v88);
          uint64_t v26 = v89 * v87;
          if (v85 != (v85 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_105;
          }
LABEL_106:
          unint64_t v91 = v25 >> 3;
          if ((unint64_t)(v25 >> 3) <= 1) {
            unint64_t v91 = 1;
          }
          if (v91 < 2)
          {
            unint64_t v92 = 0;
            uint64_t v93 = 0;
LABEL_113:
            unint64_t v99 = v91 - v92;
            uint64_t v100 = 8 * v92;
            uint64_t v101 = (uint64_t *)((char *)__p + v100);
            unint64_t v102 = (uint64_t *)((char *)v1153 + v100);
            do
            {
              uint64_t v103 = *v102++;
              uint64_t v104 = v103 - 1;
              uint64_t v105 = *v101++;
              v93 += v105 * v104;
              --v99;
            }
            while (v99);
            goto LABEL_115;
          }
          uint64_t v94 = 0;
          uint64_t v95 = 0;
          unint64_t v92 = v91 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v96 = (char *)v1153 + 8;
          __n128 v97 = (char *)__p + 8;
          unint64_t v98 = v91 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v94 += *(v97 - 1) * (*(v96 - 1) - 1);
            v95 += *v97 * (*v96 - 1);
            v96 += 2;
            v97 += 2;
            v98 -= 2;
          }
          while (v98);
          uint64_t v93 = v95 + v94;
          if (v91 != v92) {
            goto LABEL_113;
          }
LABEL_115:
          if (v26 != v93 + 1) {
LABEL_838:
          }
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_116:
          int v106 = v1152;
          if (v1152) {
            atomic_fetch_add_explicit(&v1152->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1207) {
            goto LABEL_854;
          }
          uint64_t v107 = v1204 - v1203;
          if (v1204 == v1203) {
            goto LABEL_855;
          }
          uint64_t v108 = (uint64_t)v1201;
          if (!v1201) {
            goto LABEL_442;
          }
          if ((unint64_t)(v107 - 8) < 8)
          {
            uint64_t v108 = 1;
            uint64_t v109 = v1203;
            do
            {
LABEL_441:
              uint64_t v478 = *(void *)v109;
              v109 += 8;
              v108 *= v478;
            }
            while (v109 != v1204);
            goto LABEL_442;
          }
          unint64_t v473 = ((unint64_t)(v107 - 8) >> 3) + 1;
          uint64_t v109 = &v1203[8 * (v473 & 0x3FFFFFFFFFFFFFFELL)];
          v474 = v1203 + 8;
          uint64_t v475 = 1;
          uint64_t v476 = v473 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v477 = 1;
          do
          {
            v475 *= *(v474 - 1);
            v477 *= *v474;
            v474 += 2;
            v476 -= 2;
          }
          while (v476);
          uint64_t v108 = v477 * v475;
          if (v473 != (v473 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_441;
          }
LABEL_442:
          unint64_t v479 = v107 >> 3;
          if ((unint64_t)(v107 >> 3) <= 1) {
            unint64_t v479 = 1;
          }
          if (v479 < 2)
          {
            unint64_t v480 = 0;
            uint64_t v481 = 0;
LABEL_449:
            unint64_t v487 = v479 - v480;
            uint64_t v488 = 8 * v480;
            v489 = &v1205[v488];
            v490 = &v1203[v488];
            do
            {
              uint64_t v491 = *(void *)v490;
              v490 += 8;
              uint64_t v492 = v491 - 1;
              uint64_t v493 = *(void *)v489;
              v489 += 8;
              v481 += v493 * v492;
              --v487;
            }
            while (v487);
            goto LABEL_451;
          }
          uint64_t v482 = 0;
          uint64_t v483 = 0;
          unint64_t v480 = v479 & 0xFFFFFFFFFFFFFFFELL;
          v484 = v1203 + 8;
          v485 = v1205 + 8;
          unint64_t v486 = v479 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v482 += *(v485 - 1) * (*(v484 - 1) - 1);
            v483 += *v485 * (*v484 - 1);
            v484 += 2;
            v485 += 2;
            v486 -= 2;
          }
          while (v486);
          uint64_t v481 = v483 + v482;
          if (v479 != v480) {
            goto LABEL_449;
          }
LABEL_451:
          if (v108 != v481 + 1) {
LABEL_854:
          }
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v494 = v1204 - v1203;
          if (v1204 != v1203)
          {
            unint64_t v495 = v494 >> 3;
            if ((unint64_t)(v494 >> 3) <= 1) {
              unint64_t v495 = 1;
            }
            if (v495 >= 2)
            {
              uint64_t v498 = 0;
              uint64_t v499 = 0;
              unint64_t v496 = v495 & 0xFFFFFFFFFFFFFFFELL;
              v500 = v1203 + 8;
              v501 = v1205 + 8;
              unint64_t v502 = v495 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v498 += *(v501 - 1) * (*(v500 - 1) - 1);
                v499 += *v501 * (*v500 - 1);
                v500 += 2;
                v501 += 2;
                v502 -= 2;
              }
              while (v502);
              uint64_t v497 = v499 + v498;
              if (v495 == v496) {
                goto LABEL_462;
              }
            }
            else
            {
              unint64_t v496 = 0;
              uint64_t v497 = 0;
            }
            unint64_t v503 = v495 - v496;
            uint64_t v504 = 8 * v496;
            v505 = &v1205[v504];
            v506 = &v1203[v504];
            do
            {
              uint64_t v507 = *(void *)v506;
              v506 += 8;
              uint64_t v508 = v507 - 1;
              uint64_t v509 = *(void *)v505;
              v505 += 8;
              v497 += v509 * v508;
              --v503;
            }
            while (v503);
LABEL_462:
            uint64_t v510 = v497 + 1;
            goto LABEL_856;
          }
LABEL_855:
          uint64_t v510 = 0;
LABEL_856:
          uint64_t v1081 = v1207 + v510;
          if (v1081)
          {
            unint64_t v1082 = 0;
            v1083 = (float *)v1201;
            do
            {
              float *v1083 = *(float *)(v24 + 4 * v1082) + *v1083;
              ++v1083;
              unint64_t v1082 = (v1082 + 1) % v23;
              --v1081;
            }
            while (v1081);
          }
          goto LABEL_889;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1201, (uint64_t)a1);
          unint64_t v28 = *(void *)v1153;
          if (v1157) {
            goto LABEL_839;
          }
          uint64_t v29 = v1151;
          uint64_t v30 = v1154 - (unsigned char *)v1153;
          if (v1154 == v1153) {
            goto LABEL_137;
          }
          if (!v1151)
          {
            uint64_t v31 = 0;
            goto LABEL_127;
          }
          if ((unint64_t)(v30 - 8) < 8)
          {
            uint64_t v31 = 1;
            unint64_t v32 = (char *)v1153;
            do
            {
LABEL_126:
              uint64_t v115 = *(void *)v32;
              v32 += 8;
              v31 *= v115;
            }
            while (v32 != v1154);
            goto LABEL_127;
          }
          unint64_t v110 = ((unint64_t)(v30 - 8) >> 3) + 1;
          unint64_t v32 = (char *)v1153 + 8 * (v110 & 0x3FFFFFFFFFFFFFFELL);
          unint64_t v111 = (char *)v1153 + 8;
          uint64_t v112 = 1;
          uint64_t v113 = v110 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v114 = 1;
          do
          {
            v112 *= *(v111 - 1);
            v114 *= *v111;
            v111 += 2;
            v113 -= 2;
          }
          while (v113);
          uint64_t v31 = v114 * v112;
          if (v110 != (v110 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_126;
          }
LABEL_127:
          unint64_t v116 = v30 >> 3;
          if ((unint64_t)(v30 >> 3) <= 1) {
            unint64_t v116 = 1;
          }
          if (v116 < 2)
          {
            unint64_t v117 = 0;
            uint64_t v118 = 0;
LABEL_134:
            unint64_t v124 = v116 - v117;
            uint64_t v125 = 8 * v117;
            unint64_t v126 = (uint64_t *)((char *)__p + v125);
            unint64_t v127 = (uint64_t *)((char *)v1153 + v125);
            do
            {
              uint64_t v128 = *v127++;
              uint64_t v129 = v128 - 1;
              uint64_t v130 = *v126++;
              v118 += v130 * v129;
              --v124;
            }
            while (v124);
            goto LABEL_136;
          }
          uint64_t v119 = 0;
          uint64_t v120 = 0;
          unint64_t v117 = v116 & 0xFFFFFFFFFFFFFFFELL;
          std::string::size_type v121 = (char *)v1153 + 8;
          uint64_t v122 = (char *)__p + 8;
          unint64_t v123 = v116 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v119 += *(v122 - 1) * (*(v121 - 1) - 1);
            v120 += *v122 * (*v121 - 1);
            v121 += 2;
            v122 += 2;
            v123 -= 2;
          }
          while (v123);
          uint64_t v118 = v120 + v119;
          if (v116 != v117) {
            goto LABEL_134;
          }
LABEL_136:
          if (v31 != v118 + 1) {
LABEL_839:
          }
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_137:
          int v106 = v1152;
          if (v1152) {
            atomic_fetch_add_explicit(&v1152->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1207) {
            goto LABEL_860;
          }
          uint64_t v131 = v1204 - v1203;
          if (v1204 == v1203) {
            goto LABEL_861;
          }
          uint64_t v132 = (uint64_t)v1201;
          if (!v1201) {
            goto LABEL_467;
          }
          if ((unint64_t)(v131 - 8) < 8)
          {
            uint64_t v132 = 1;
            uint64_t v133 = v1203;
            do
            {
LABEL_466:
              uint64_t v516 = *(void *)v133;
              v133 += 8;
              v132 *= v516;
            }
            while (v133 != v1204);
            goto LABEL_467;
          }
          unint64_t v511 = ((unint64_t)(v131 - 8) >> 3) + 1;
          uint64_t v133 = &v1203[8 * (v511 & 0x3FFFFFFFFFFFFFFELL)];
          v512 = v1203 + 8;
          uint64_t v513 = 1;
          uint64_t v514 = v511 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v515 = 1;
          do
          {
            v513 *= *(v512 - 1);
            v515 *= *v512;
            v512 += 2;
            v514 -= 2;
          }
          while (v514);
          uint64_t v132 = v515 * v513;
          if (v511 != (v511 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_466;
          }
LABEL_467:
          unint64_t v517 = v131 >> 3;
          if ((unint64_t)(v131 >> 3) <= 1) {
            unint64_t v517 = 1;
          }
          if (v517 < 2)
          {
            unint64_t v518 = 0;
            uint64_t v519 = 0;
LABEL_474:
            unint64_t v525 = v517 - v518;
            uint64_t v526 = 8 * v518;
            v527 = &v1205[v526];
            v528 = &v1203[v526];
            do
            {
              uint64_t v529 = *(void *)v528;
              v528 += 8;
              uint64_t v530 = v529 - 1;
              uint64_t v531 = *(void *)v527;
              v527 += 8;
              v519 += v531 * v530;
              --v525;
            }
            while (v525);
            goto LABEL_476;
          }
          uint64_t v520 = 0;
          uint64_t v521 = 0;
          unint64_t v518 = v517 & 0xFFFFFFFFFFFFFFFELL;
          v522 = v1203 + 8;
          v523 = v1205 + 8;
          unint64_t v524 = v517 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v520 += *(v523 - 1) * (*(v522 - 1) - 1);
            v521 += *v523 * (*v522 - 1);
            v522 += 2;
            v523 += 2;
            v524 -= 2;
          }
          while (v524);
          uint64_t v519 = v521 + v520;
          if (v517 != v518) {
            goto LABEL_474;
          }
LABEL_476:
          if (v132 != v519 + 1) {
LABEL_860:
          }
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v532 = v1204 - v1203;
          if (v1204 != v1203)
          {
            unint64_t v533 = v532 >> 3;
            if ((unint64_t)(v532 >> 3) <= 1) {
              unint64_t v533 = 1;
            }
            if (v533 >= 2)
            {
              uint64_t v536 = 0;
              uint64_t v537 = 0;
              unint64_t v534 = v533 & 0xFFFFFFFFFFFFFFFELL;
              v538 = v1203 + 8;
              v539 = v1205 + 8;
              unint64_t v540 = v533 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v536 += *(v539 - 1) * (*(v538 - 1) - 1);
                v537 += *v539 * (*v538 - 1);
                v538 += 2;
                v539 += 2;
                v540 -= 2;
              }
              while (v540);
              uint64_t v535 = v537 + v536;
              if (v533 == v534) {
                goto LABEL_487;
              }
            }
            else
            {
              unint64_t v534 = 0;
              uint64_t v535 = 0;
            }
            unint64_t v541 = v533 - v534;
            uint64_t v542 = 8 * v534;
            v543 = &v1205[v542];
            v544 = &v1203[v542];
            do
            {
              uint64_t v545 = *(void *)v544;
              v544 += 8;
              uint64_t v546 = v545 - 1;
              uint64_t v547 = *(void *)v543;
              v543 += 8;
              v535 += v547 * v546;
              --v541;
            }
            while (v541);
LABEL_487:
            uint64_t v548 = v535 + 1;
            goto LABEL_862;
          }
LABEL_861:
          uint64_t v548 = 0;
LABEL_862:
          uint64_t v1084 = v1207 + v548;
          if (v1084)
          {
            unint64_t v1085 = 0;
            v1086 = (short float *)v1201;
            do
            {
              _S0 = *(_DWORD *)(v29 + 4 * v1085);
              __asm { FCVT            H0, S0 }
              short float *v1086 = *v1086 + *(short float *)&_S0;
              ++v1086;
              unint64_t v1085 = (v1085 + 1) % v28;
              --v1084;
            }
            while (v1084);
          }
LABEL_889:
          if (v106 && !atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
          if (v1205)
          {
            v1206 = v1205;
            operator delete(v1205);
          }
          if (v1203)
          {
            v1204 = v1203;
            operator delete(v1203);
          }
          v1105 = v1202;
          if (v1202 && !atomic_fetch_add(&v1202->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1105->__on_zero_shared)(v1105);
            std::__shared_weak_count::__release_weak(v1105);
          }
          if (__p)
          {
            v1156 = __p;
            operator delete(__p);
          }
          if (v1153)
          {
            v1154 = (char *)v1153;
            operator delete(v1153);
          }
          v1106 = v1152;
          if (v1152 && !atomic_fetch_add(&v1152->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1106->__on_zero_shared)(v1106);
            std::__shared_weak_count::__release_weak(v1106);
          }
          if (v1148)
          {
            v1149 = v1148;
            operator delete(v1148);
          }
          if (v1146)
          {
            v1147 = v1146;
            operator delete(v1146);
          }
          v1107 = v1145;
          if (!v1145) {
            return;
          }
          goto LABEL_1037;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()();
      }
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v1158, (uint64_t)a2);
      v1164 = &v1200;
      nitro::ndarray<half>::ndarray(&v1165, &v1158);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1201, (uint64_t)a1);
          unint64_t v13 = *(void *)v1167;
          if (v1171) {
            goto LABEL_848;
          }
          uint64_t v14 = v1165;
          uint64_t v15 = v1168 - (unsigned char *)v1167;
          if (v1168 == v1167) {
            goto LABEL_326;
          }
          if (!v1165)
          {
            uint64_t v16 = 0;
            goto LABEL_316;
          }
          if ((unint64_t)(v15 - 8) < 8)
          {
            uint64_t v16 = 1;
            uint64_t v17 = (char *)v1167;
            do
            {
LABEL_315:
              uint64_t v334 = *(void *)v17;
              v17 += 8;
              v16 *= v334;
            }
            while (v17 != v1168);
            goto LABEL_316;
          }
          unint64_t v329 = ((unint64_t)(v15 - 8) >> 3) + 1;
          uint64_t v17 = (char *)v1167 + 8 * (v329 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v330 = (char *)v1167 + 8;
          uint64_t v331 = 1;
          uint64_t v332 = v329 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v333 = 1;
          do
          {
            v331 *= *(v330 - 1);
            v333 *= *v330;
            v330 += 2;
            v332 -= 2;
          }
          while (v332);
          uint64_t v16 = v333 * v331;
          if (v329 != (v329 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_315;
          }
LABEL_316:
          unint64_t v335 = v15 >> 3;
          if ((unint64_t)(v15 >> 3) <= 1) {
            unint64_t v335 = 1;
          }
          if (v335 < 2)
          {
            unint64_t v336 = 0;
            uint64_t v337 = 0;
LABEL_323:
            unint64_t v343 = v335 - v336;
            uint64_t v344 = 8 * v336;
            uint64_t v345 = (uint64_t *)((char *)v1169 + v344);
            uint64_t v346 = (uint64_t *)((char *)v1167 + v344);
            do
            {
              uint64_t v347 = *v346++;
              uint64_t v348 = v347 - 1;
              uint64_t v349 = *v345++;
              v337 += v349 * v348;
              --v343;
            }
            while (v343);
            goto LABEL_325;
          }
          uint64_t v338 = 0;
          uint64_t v339 = 0;
          unint64_t v336 = v335 & 0xFFFFFFFFFFFFFFFELL;
          v340 = (char *)v1167 + 8;
          v341 = (char *)v1169 + 8;
          unint64_t v342 = v335 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v338 += *(v341 - 1) * (*(v340 - 1) - 1);
            v339 += *v341 * (*v340 - 1);
            v340 += 2;
            v341 += 2;
            v342 -= 2;
          }
          while (v342);
          uint64_t v337 = v339 + v338;
          if (v335 != v336) {
            goto LABEL_323;
          }
LABEL_325:
          if (v16 != v337 + 1) {
LABEL_848:
          }
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_326:
          unint64_t v155 = v1166;
          if (v1166) {
            atomic_fetch_add_explicit(&v1166->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1207) {
            goto LABEL_936;
          }
          uint64_t v350 = v1204 - v1203;
          if (v1204 == v1203) {
            goto LABEL_937;
          }
          uint64_t v351 = (uint64_t)v1201;
          if (!v1201) {
            goto LABEL_692;
          }
          if ((unint64_t)(v350 - 8) < 8)
          {
            uint64_t v351 = 1;
            uint64_t v352 = v1203;
            do
            {
LABEL_691:
              uint64_t v858 = *(void *)v352;
              v352 += 8;
              v351 *= v858;
            }
            while (v352 != v1204);
            goto LABEL_692;
          }
          unint64_t v853 = ((unint64_t)(v350 - 8) >> 3) + 1;
          uint64_t v352 = &v1203[8 * (v853 & 0x3FFFFFFFFFFFFFFELL)];
          v854 = v1203 + 8;
          uint64_t v855 = 1;
          uint64_t v856 = v853 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v857 = 1;
          do
          {
            v855 *= *(v854 - 1);
            v857 *= *v854;
            v854 += 2;
            v856 -= 2;
          }
          while (v856);
          uint64_t v351 = v857 * v855;
          if (v853 != (v853 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_691;
          }
LABEL_692:
          unint64_t v859 = v350 >> 3;
          if ((unint64_t)(v350 >> 3) <= 1) {
            unint64_t v859 = 1;
          }
          if (v859 < 2)
          {
            unint64_t v860 = 0;
            uint64_t v861 = 0;
LABEL_699:
            unint64_t v867 = v859 - v860;
            uint64_t v868 = 8 * v860;
            v869 = &v1205[v868];
            v870 = &v1203[v868];
            do
            {
              uint64_t v871 = *(void *)v870;
              v870 += 8;
              uint64_t v872 = v871 - 1;
              uint64_t v873 = *(void *)v869;
              v869 += 8;
              v861 += v873 * v872;
              --v867;
            }
            while (v867);
            goto LABEL_701;
          }
          uint64_t v862 = 0;
          uint64_t v863 = 0;
          unint64_t v860 = v859 & 0xFFFFFFFFFFFFFFFELL;
          v864 = v1203 + 8;
          v865 = v1205 + 8;
          unint64_t v866 = v859 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v862 += *(v865 - 1) * (*(v864 - 1) - 1);
            v863 += *v865 * (*v864 - 1);
            v864 += 2;
            v865 += 2;
            v866 -= 2;
          }
          while (v866);
          uint64_t v861 = v863 + v862;
          if (v859 != v860) {
            goto LABEL_699;
          }
LABEL_701:
          if (v351 != v861 + 1) {
LABEL_936:
          }
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v874 = v1204 - v1203;
          if (v1204 != v1203)
          {
            unint64_t v875 = v874 >> 3;
            if ((unint64_t)(v874 >> 3) <= 1) {
              unint64_t v875 = 1;
            }
            if (v875 >= 2)
            {
              uint64_t v878 = 0;
              uint64_t v879 = 0;
              unint64_t v876 = v875 & 0xFFFFFFFFFFFFFFFELL;
              v880 = v1203 + 8;
              v881 = v1205 + 8;
              unint64_t v882 = v875 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v878 += *(v881 - 1) * (*(v880 - 1) - 1);
                v879 += *v881 * (*v880 - 1);
                v880 += 2;
                v881 += 2;
                v882 -= 2;
              }
              while (v882);
              uint64_t v877 = v879 + v878;
              if (v875 == v876) {
                goto LABEL_712;
              }
            }
            else
            {
              unint64_t v876 = 0;
              uint64_t v877 = 0;
            }
            unint64_t v883 = v875 - v876;
            uint64_t v884 = 8 * v876;
            v885 = &v1205[v884];
            v886 = &v1203[v884];
            do
            {
              uint64_t v887 = *(void *)v886;
              v886 += 8;
              uint64_t v888 = v887 - 1;
              uint64_t v889 = *(void *)v885;
              v885 += 8;
              v877 += v889 * v888;
              --v883;
            }
            while (v883);
LABEL_712:
            uint64_t v890 = v877 + 1;
            goto LABEL_938;
          }
LABEL_937:
          uint64_t v890 = 0;
LABEL_938:
          uint64_t v1121 = v1207 + v890;
          if (v1121)
          {
            unint64_t v1122 = 0;
            v1123 = v1201;
            do
            {
              *v1123++ += (int)*(short float *)(v14 + 2 * v1122);
              unint64_t v1122 = (v1122 + 1) % v13;
              --v1121;
            }
            while (v1121);
          }
          goto LABEL_941;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1201, (uint64_t)a1);
          unint64_t v59 = *(void *)v1167;
          if (v1171) {
            goto LABEL_846;
          }
          uint64_t v60 = v1165;
          uint64_t v61 = v1168 - (unsigned char *)v1167;
          if (v1168 == v1167) {
            goto LABEL_284;
          }
          if (!v1165)
          {
            uint64_t v62 = 0;
            goto LABEL_274;
          }
          if ((unint64_t)(v61 - 8) < 8)
          {
            uint64_t v62 = 1;
            uint64_t v63 = (char *)v1167;
            do
            {
LABEL_273:
              uint64_t v286 = *(void *)v63;
              v63 += 8;
              v62 *= v286;
            }
            while (v63 != v1168);
            goto LABEL_274;
          }
          unint64_t v281 = ((unint64_t)(v61 - 8) >> 3) + 1;
          uint64_t v63 = (char *)v1167 + 8 * (v281 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v282 = (char *)v1167 + 8;
          uint64_t v283 = 1;
          uint64_t v284 = v281 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v285 = 1;
          do
          {
            v283 *= *(v282 - 1);
            v285 *= *v282;
            v282 += 2;
            v284 -= 2;
          }
          while (v284);
          uint64_t v62 = v285 * v283;
          if (v281 != (v281 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_273;
          }
LABEL_274:
          unint64_t v287 = v61 >> 3;
          if ((unint64_t)(v61 >> 3) <= 1) {
            unint64_t v287 = 1;
          }
          if (v287 < 2)
          {
            unint64_t v288 = 0;
            uint64_t v289 = 0;
LABEL_281:
            unint64_t v295 = v287 - v288;
            uint64_t v296 = 8 * v288;
            unint64_t v297 = (uint64_t *)((char *)v1169 + v296);
            int64_t v298 = (uint64_t *)((char *)v1167 + v296);
            do
            {
              uint64_t v299 = *v298++;
              uint64_t v300 = v299 - 1;
              uint64_t v301 = *v297++;
              v289 += v301 * v300;
              --v295;
            }
            while (v295);
            goto LABEL_283;
          }
          uint64_t v290 = 0;
          uint64_t v291 = 0;
          unint64_t v288 = v287 & 0xFFFFFFFFFFFFFFFELL;
          int v292 = (char *)v1167 + 8;
          std::string v293 = (char *)v1169 + 8;
          unint64_t v294 = v287 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v290 += *(v293 - 1) * (*(v292 - 1) - 1);
            v291 += *v293 * (*v292 - 1);
            v292 += 2;
            v293 += 2;
            v294 -= 2;
          }
          while (v294);
          uint64_t v289 = v291 + v290;
          if (v287 != v288) {
            goto LABEL_281;
          }
LABEL_283:
          if (v62 != v289 + 1) {
LABEL_846:
          }
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_284:
          unint64_t v155 = v1166;
          if (v1166) {
            atomic_fetch_add_explicit(&v1166->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1207) {
            goto LABEL_924;
          }
          uint64_t v302 = v1204 - v1203;
          if (v1204 == v1203) {
            goto LABEL_925;
          }
          uint64_t v303 = (uint64_t)v1201;
          if (!v1201) {
            goto LABEL_642;
          }
          if ((unint64_t)(v302 - 8) < 8)
          {
            uint64_t v303 = 1;
            uint64_t v304 = v1203;
            do
            {
LABEL_641:
              uint64_t v782 = *(void *)v304;
              v304 += 8;
              v303 *= v782;
            }
            while (v304 != v1204);
            goto LABEL_642;
          }
          unint64_t v777 = ((unint64_t)(v302 - 8) >> 3) + 1;
          uint64_t v304 = &v1203[8 * (v777 & 0x3FFFFFFFFFFFFFFELL)];
          v778 = v1203 + 8;
          uint64_t v779 = 1;
          uint64_t v780 = v777 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v781 = 1;
          do
          {
            v779 *= *(v778 - 1);
            v781 *= *v778;
            v778 += 2;
            v780 -= 2;
          }
          while (v780);
          uint64_t v303 = v781 * v779;
          if (v777 != (v777 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_641;
          }
LABEL_642:
          unint64_t v783 = v302 >> 3;
          if ((unint64_t)(v302 >> 3) <= 1) {
            unint64_t v783 = 1;
          }
          if (v783 < 2)
          {
            unint64_t v784 = 0;
            uint64_t v785 = 0;
LABEL_649:
            unint64_t v791 = v783 - v784;
            uint64_t v792 = 8 * v784;
            v793 = &v1205[v792];
            v794 = &v1203[v792];
            do
            {
              uint64_t v795 = *(void *)v794;
              v794 += 8;
              uint64_t v796 = v795 - 1;
              uint64_t v797 = *(void *)v793;
              v793 += 8;
              v785 += v797 * v796;
              --v791;
            }
            while (v791);
            goto LABEL_651;
          }
          uint64_t v786 = 0;
          uint64_t v787 = 0;
          unint64_t v784 = v783 & 0xFFFFFFFFFFFFFFFELL;
          v788 = v1203 + 8;
          v789 = v1205 + 8;
          unint64_t v790 = v783 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v786 += *(v789 - 1) * (*(v788 - 1) - 1);
            v787 += *v789 * (*v788 - 1);
            v788 += 2;
            v789 += 2;
            v790 -= 2;
          }
          while (v790);
          uint64_t v785 = v787 + v786;
          if (v783 != v784) {
            goto LABEL_649;
          }
LABEL_651:
          if (v303 != v785 + 1) {
LABEL_924:
          }
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v798 = v1204 - v1203;
          if (v1204 != v1203)
          {
            unint64_t v799 = v798 >> 3;
            if ((unint64_t)(v798 >> 3) <= 1) {
              unint64_t v799 = 1;
            }
            if (v799 >= 2)
            {
              uint64_t v802 = 0;
              uint64_t v803 = 0;
              unint64_t v800 = v799 & 0xFFFFFFFFFFFFFFFELL;
              v804 = v1203 + 8;
              v805 = v1205 + 8;
              unint64_t v806 = v799 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v802 += *(v805 - 1) * (*(v804 - 1) - 1);
                v803 += *v805 * (*v804 - 1);
                v804 += 2;
                v805 += 2;
                v806 -= 2;
              }
              while (v806);
              uint64_t v801 = v803 + v802;
              if (v799 == v800) {
                goto LABEL_662;
              }
            }
            else
            {
              unint64_t v800 = 0;
              uint64_t v801 = 0;
            }
            unint64_t v807 = v799 - v800;
            uint64_t v808 = 8 * v800;
            v809 = &v1205[v808];
            v810 = &v1203[v808];
            do
            {
              uint64_t v811 = *(void *)v810;
              v810 += 8;
              uint64_t v812 = v811 - 1;
              uint64_t v813 = *(void *)v809;
              v809 += 8;
              v801 += v813 * v812;
              --v807;
            }
            while (v807);
LABEL_662:
            uint64_t v814 = v801 + 1;
            goto LABEL_926;
          }
LABEL_925:
          uint64_t v814 = 0;
LABEL_926:
          if (v1207 + v814)
          {
            unint64_t v1114 = 0;
            unint64_t v1115 = 0;
            do
            {
              *((unsigned char *)v1201 + v1114) += (int)*(short float *)(v60 + 2 * v1115);
              unint64_t v1115 = (v1115 + 1) % v59;
              ++v1114;
            }
            while (v1114 < v1207 + v814);
          }
          goto LABEL_941;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1201, (uint64_t)a1);
          unint64_t v33 = *(void *)v1167;
          if (v1171) {
            goto LABEL_840;
          }
          uint64_t v34 = v1165;
          uint64_t v35 = v1168 - (unsigned char *)v1167;
          if (v1168 == v1167) {
            goto LABEL_158;
          }
          if (!v1165)
          {
            uint64_t v36 = 0;
            goto LABEL_148;
          }
          if ((unint64_t)(v35 - 8) < 8)
          {
            uint64_t v36 = 1;
            unint64_t v37 = (char *)v1167;
            do
            {
LABEL_147:
              uint64_t v139 = *(void *)v37;
              v37 += 8;
              v36 *= v139;
            }
            while (v37 != v1168);
            goto LABEL_148;
          }
          unint64_t v134 = ((unint64_t)(v35 - 8) >> 3) + 1;
          unint64_t v37 = (char *)v1167 + 8 * (v134 & 0x3FFFFFFFFFFFFFFELL);
          unint64_t v135 = (char *)v1167 + 8;
          uint64_t v136 = 1;
          uint64_t v137 = v134 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v138 = 1;
          do
          {
            v136 *= *(v135 - 1);
            v138 *= *v135;
            v135 += 2;
            v137 -= 2;
          }
          while (v137);
          uint64_t v36 = v138 * v136;
          if (v134 != (v134 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_147;
          }
LABEL_148:
          unint64_t v140 = v35 >> 3;
          if ((unint64_t)(v35 >> 3) <= 1) {
            unint64_t v140 = 1;
          }
          if (v140 < 2)
          {
            unint64_t v141 = 0;
            uint64_t v142 = 0;
LABEL_155:
            unint64_t v148 = v140 - v141;
            uint64_t v149 = 8 * v141;
            uint64_t v150 = (uint64_t *)((char *)v1169 + v149);
            uint64_t v151 = (uint64_t *)((char *)v1167 + v149);
            do
            {
              uint64_t v152 = *v151++;
              uint64_t v153 = v152 - 1;
              uint64_t v154 = *v150++;
              v142 += v154 * v153;
              --v148;
            }
            while (v148);
            goto LABEL_157;
          }
          uint64_t v143 = 0;
          uint64_t v144 = 0;
          unint64_t v141 = v140 & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v145 = (char *)v1167 + 8;
          uint64_t v146 = (char *)v1169 + 8;
          unint64_t v147 = v140 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v143 += *(v146 - 1) * (*(v145 - 1) - 1);
            v144 += *v146 * (*v145 - 1);
            v145 += 2;
            v146 += 2;
            v147 -= 2;
          }
          while (v147);
          uint64_t v142 = v144 + v143;
          if (v140 != v141) {
            goto LABEL_155;
          }
LABEL_157:
          if (v36 != v142 + 1) {
LABEL_840:
          }
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_158:
          unint64_t v155 = v1166;
          if (v1166) {
            atomic_fetch_add_explicit(&v1166->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1207) {
            goto LABEL_866;
          }
          uint64_t v156 = v1204 - v1203;
          if (v1204 == v1203) {
            goto LABEL_867;
          }
          uint64_t v157 = (uint64_t)v1201;
          if (!v1201) {
            goto LABEL_492;
          }
          if ((unint64_t)(v156 - 8) < 8)
          {
            uint64_t v157 = 1;
            uint64_t v158 = v1203;
            do
            {
LABEL_491:
              uint64_t v554 = *(void *)v158;
              v158 += 8;
              v157 *= v554;
            }
            while (v158 != v1204);
            goto LABEL_492;
          }
          unint64_t v549 = ((unint64_t)(v156 - 8) >> 3) + 1;
          uint64_t v158 = &v1203[8 * (v549 & 0x3FFFFFFFFFFFFFFELL)];
          v550 = v1203 + 8;
          uint64_t v551 = 1;
          uint64_t v552 = v549 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v553 = 1;
          do
          {
            v551 *= *(v550 - 1);
            v553 *= *v550;
            v550 += 2;
            v552 -= 2;
          }
          while (v552);
          uint64_t v157 = v553 * v551;
          if (v549 != (v549 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_491;
          }
LABEL_492:
          unint64_t v555 = v156 >> 3;
          if ((unint64_t)(v156 >> 3) <= 1) {
            unint64_t v555 = 1;
          }
          if (v555 < 2)
          {
            unint64_t v556 = 0;
            uint64_t v557 = 0;
LABEL_499:
            unint64_t v563 = v555 - v556;
            uint64_t v564 = 8 * v556;
            v565 = &v1205[v564];
            v566 = &v1203[v564];
            do
            {
              uint64_t v567 = *(void *)v566;
              v566 += 8;
              uint64_t v568 = v567 - 1;
              uint64_t v569 = *(void *)v565;
              v565 += 8;
              v557 += v569 * v568;
              --v563;
            }
            while (v563);
            goto LABEL_501;
          }
          uint64_t v558 = 0;
          uint64_t v559 = 0;
          unint64_t v556 = v555 & 0xFFFFFFFFFFFFFFFELL;
          v560 = v1203 + 8;
          v561 = v1205 + 8;
          unint64_t v562 = v555 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v558 += *(v561 - 1) * (*(v560 - 1) - 1);
            v559 += *v561 * (*v560 - 1);
            v560 += 2;
            v561 += 2;
            v562 -= 2;
          }
          while (v562);
          uint64_t v557 = v559 + v558;
          if (v555 != v556) {
            goto LABEL_499;
          }
LABEL_501:
          if (v157 != v557 + 1) {
LABEL_866:
          }
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v570 = v1204 - v1203;
          if (v1204 != v1203)
          {
            unint64_t v571 = v570 >> 3;
            if ((unint64_t)(v570 >> 3) <= 1) {
              unint64_t v571 = 1;
            }
            if (v571 >= 2)
            {
              uint64_t v574 = 0;
              uint64_t v575 = 0;
              unint64_t v572 = v571 & 0xFFFFFFFFFFFFFFFELL;
              v576 = v1203 + 8;
              v577 = v1205 + 8;
              unint64_t v578 = v571 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v574 += *(v577 - 1) * (*(v576 - 1) - 1);
                v575 += *v577 * (*v576 - 1);
                v576 += 2;
                v577 += 2;
                v578 -= 2;
              }
              while (v578);
              uint64_t v573 = v575 + v574;
              if (v571 == v572) {
                goto LABEL_512;
              }
            }
            else
            {
              unint64_t v572 = 0;
              uint64_t v573 = 0;
            }
            unint64_t v579 = v571 - v572;
            uint64_t v580 = 8 * v572;
            v581 = &v1205[v580];
            v582 = &v1203[v580];
            do
            {
              uint64_t v583 = *(void *)v582;
              v582 += 8;
              uint64_t v584 = v583 - 1;
              uint64_t v585 = *(void *)v581;
              v581 += 8;
              v573 += v585 * v584;
              --v579;
            }
            while (v579);
LABEL_512:
            uint64_t v586 = v573 + 1;
            goto LABEL_868;
          }
LABEL_867:
          uint64_t v586 = 0;
LABEL_868:
          uint64_t v1092 = v1207 + v586;
          if (v1092)
          {
            unint64_t v1093 = 0;
            v1094 = (float *)v1201;
            do
            {
              _H0 = *(_WORD *)(v34 + 2 * v1093);
              __asm { FCVT            S0, H0 }
              float *v1094 = *v1094 + _S0;
              ++v1094;
              unint64_t v1093 = (v1093 + 1) % v33;
              --v1092;
            }
            while (v1092);
          }
          goto LABEL_941;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1201, (uint64_t)a1);
          unint64_t v54 = *(void *)v1167;
          if (v1171) {
            goto LABEL_845;
          }
          uint64_t v55 = v1165;
          uint64_t v56 = v1168 - (unsigned char *)v1167;
          if (v1168 == v1167) {
            goto LABEL_263;
          }
          if (!v1165)
          {
            uint64_t v57 = 0;
            goto LABEL_253;
          }
          if ((unint64_t)(v56 - 8) < 8)
          {
            uint64_t v57 = 1;
            uint64_t v58 = (char *)v1167;
            do
            {
LABEL_252:
              uint64_t v262 = *(void *)v58;
              v58 += 8;
              v57 *= v262;
            }
            while (v58 != v1168);
            goto LABEL_253;
          }
          unint64_t v257 = ((unint64_t)(v56 - 8) >> 3) + 1;
          uint64_t v58 = (char *)v1167 + 8 * (v257 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v258 = (char *)v1167 + 8;
          uint64_t v259 = 1;
          uint64_t v260 = v257 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v261 = 1;
          do
          {
            v259 *= *(v258 - 1);
            v261 *= *v258;
            v258 += 2;
            v260 -= 2;
          }
          while (v260);
          uint64_t v57 = v261 * v259;
          if (v257 != (v257 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_252;
          }
LABEL_253:
          unint64_t v263 = v56 >> 3;
          if ((unint64_t)(v56 >> 3) <= 1) {
            unint64_t v263 = 1;
          }
          if (v263 < 2)
          {
            unint64_t v264 = 0;
            uint64_t v265 = 0;
LABEL_260:
            unint64_t v271 = v263 - v264;
            uint64_t v272 = 8 * v264;
            uint64_t v273 = (uint64_t *)((char *)v1169 + v272);
            unint64_t v274 = (uint64_t *)((char *)v1167 + v272);
            do
            {
              uint64_t v275 = *v274++;
              uint64_t v276 = v275 - 1;
              uint64_t v277 = *v273++;
              v265 += v277 * v276;
              --v271;
            }
            while (v271);
            goto LABEL_262;
          }
          uint64_t v266 = 0;
          uint64_t v267 = 0;
          unint64_t v264 = v263 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v268 = (char *)v1167 + 8;
          v269 = (char *)v1169 + 8;
          unint64_t v270 = v263 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v266 += *(v269 - 1) * (*(v268 - 1) - 1);
            v267 += *v269 * (*v268 - 1);
            v268 += 2;
            v269 += 2;
            v270 -= 2;
          }
          while (v270);
          uint64_t v265 = v267 + v266;
          if (v263 != v264) {
            goto LABEL_260;
          }
LABEL_262:
          if (v57 != v265 + 1) {
LABEL_845:
          }
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_263:
          unint64_t v155 = v1166;
          if (v1166) {
            atomic_fetch_add_explicit(&v1166->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1207) {
            goto LABEL_918;
          }
          uint64_t v278 = v1204 - v1203;
          if (v1204 == v1203) {
            goto LABEL_919;
          }
          uint64_t v279 = (uint64_t)v1201;
          if (!v1201) {
            goto LABEL_617;
          }
          if ((unint64_t)(v278 - 8) < 8)
          {
            uint64_t v279 = 1;
            unint64_t v280 = v1203;
            do
            {
LABEL_616:
              uint64_t v744 = *(void *)v280;
              v280 += 8;
              v279 *= v744;
            }
            while (v280 != v1204);
            goto LABEL_617;
          }
          unint64_t v739 = ((unint64_t)(v278 - 8) >> 3) + 1;
          unint64_t v280 = &v1203[8 * (v739 & 0x3FFFFFFFFFFFFFFELL)];
          v740 = v1203 + 8;
          uint64_t v741 = 1;
          uint64_t v742 = v739 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v743 = 1;
          do
          {
            v741 *= *(v740 - 1);
            v743 *= *v740;
            v740 += 2;
            v742 -= 2;
          }
          while (v742);
          uint64_t v279 = v743 * v741;
          if (v739 != (v739 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_616;
          }
LABEL_617:
          unint64_t v745 = v278 >> 3;
          if ((unint64_t)(v278 >> 3) <= 1) {
            unint64_t v745 = 1;
          }
          if (v745 < 2)
          {
            unint64_t v746 = 0;
            uint64_t v747 = 0;
LABEL_624:
            unint64_t v753 = v745 - v746;
            uint64_t v754 = 8 * v746;
            v755 = &v1205[v754];
            v756 = &v1203[v754];
            do
            {
              uint64_t v757 = *(void *)v756;
              v756 += 8;
              uint64_t v758 = v757 - 1;
              uint64_t v759 = *(void *)v755;
              v755 += 8;
              v747 += v759 * v758;
              --v753;
            }
            while (v753);
            goto LABEL_626;
          }
          uint64_t v748 = 0;
          uint64_t v749 = 0;
          unint64_t v746 = v745 & 0xFFFFFFFFFFFFFFFELL;
          v750 = v1203 + 8;
          v751 = v1205 + 8;
          unint64_t v752 = v745 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v748 += *(v751 - 1) * (*(v750 - 1) - 1);
            v749 += *v751 * (*v750 - 1);
            v750 += 2;
            v751 += 2;
            v752 -= 2;
          }
          while (v752);
          uint64_t v747 = v749 + v748;
          if (v745 != v746) {
            goto LABEL_624;
          }
LABEL_626:
          if (v279 != v747 + 1) {
LABEL_918:
          }
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v760 = v1204 - v1203;
          if (v1204 != v1203)
          {
            unint64_t v761 = v760 >> 3;
            if ((unint64_t)(v760 >> 3) <= 1) {
              unint64_t v761 = 1;
            }
            if (v761 >= 2)
            {
              uint64_t v764 = 0;
              uint64_t v765 = 0;
              unint64_t v762 = v761 & 0xFFFFFFFFFFFFFFFELL;
              v766 = v1203 + 8;
              v767 = v1205 + 8;
              unint64_t v768 = v761 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v764 += *(v767 - 1) * (*(v766 - 1) - 1);
                v765 += *v767 * (*v766 - 1);
                v766 += 2;
                v767 += 2;
                v768 -= 2;
              }
              while (v768);
              uint64_t v763 = v765 + v764;
              if (v761 == v762) {
                goto LABEL_637;
              }
            }
            else
            {
              unint64_t v762 = 0;
              uint64_t v763 = 0;
            }
            unint64_t v769 = v761 - v762;
            uint64_t v770 = 8 * v762;
            v771 = &v1205[v770];
            v772 = &v1203[v770];
            do
            {
              uint64_t v773 = *(void *)v772;
              v772 += 8;
              uint64_t v774 = v773 - 1;
              uint64_t v775 = *(void *)v771;
              v771 += 8;
              v763 += v775 * v774;
              --v769;
            }
            while (v769);
LABEL_637:
            uint64_t v776 = v763 + 1;
            goto LABEL_920;
          }
LABEL_919:
          uint64_t v776 = 0;
LABEL_920:
          uint64_t v1111 = v1207 + v776;
          if (v1111)
          {
            unint64_t v1112 = 0;
            v1113 = (short float *)v1201;
            do
            {
              short float *v1113 = *(short float *)(v55 + 2 * v1112) + *v1113;
              ++v1113;
              unint64_t v1112 = (v1112 + 1) % v54;
              --v1111;
            }
            while (v1111);
          }
LABEL_941:
          if (v155 && !atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
          if (v1205)
          {
            v1206 = v1205;
            operator delete(v1205);
          }
          if (v1203)
          {
            v1204 = v1203;
            operator delete(v1203);
          }
          v1124 = v1202;
          if (v1202 && !atomic_fetch_add(&v1202->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1124->__on_zero_shared)(v1124);
            std::__shared_weak_count::__release_weak(v1124);
          }
          if (v1169)
          {
            v1170 = v1169;
            operator delete(v1169);
          }
          if (v1167)
          {
            v1168 = (char *)v1167;
            operator delete(v1167);
          }
          v1125 = v1166;
          if (v1166 && !atomic_fetch_add(&v1166->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1125->__on_zero_shared)(v1125);
            std::__shared_weak_count::__release_weak(v1125);
          }
          if (v1162)
          {
            v1163 = v1162;
            operator delete(v1162);
          }
          if (v1160)
          {
            v1161 = v1160;
            operator delete(v1160);
          }
          v1107 = v1159;
          if (v1159)
          {
LABEL_1037:
            if (!atomic_fetch_add(&v1107->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v1107->__on_zero_shared)(v1107);
              std::__shared_weak_count::__release_weak(v1107);
            }
          }
          return;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()();
      }
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(nitro::ndarray_container &,nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
}

void sub_192658594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (v57)
  {
    nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(v57);
    a1 = *(_Unwind_Exception **)(v58 - 48);
  }
  nitro::ndarray<float>::~ndarray((void *)(v58 - 128));
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a57);
  nitro::ndarray<float>::~ndarray(&a48);
  _Unwind_Resume(a1);
}

uint64_t nitro::nitro_builtins::Sum(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void nitro::nitro_builtins::MatMul(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, const nitro::flexible_type *a4@<X3>, uint64_t a5@<X8>)
{
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v90, (const nitro::ndarray_container *)(*(void *)this + 8));
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v83, (const nitro::ndarray_container *)(*(void *)a2 + 8));
  switch(*((unsigned char *)a3 + 8))
  {
    case 1:
      std::string::size_type v10 = (uint64_t)*(double *)a3;
      goto LABEL_38;
    case 2:
      double v11 = *(double *)a3;
      uint64_t v12 = (const char **)(*(void *)a3 + 8);
      size_t __idx = 0;
      unint64_t v13 = (const char *)v12;
      if (*(char *)(*(void *)&v11 + 31) < 0) {
        unint64_t v13 = *v12;
      }
      size_t v14 = strlen(v13);
      if (v14 > 0x7FFFFFFFFFFFFFF7) {
LABEL_124:
      }
        std::string::__throw_length_error[abi:ne180100]();
      std::string::size_type v10 = v14;
      if (v14 >= 0x17)
      {
        uint64_t v30 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17) {
          uint64_t v30 = v14 | 7;
        }
        uint64_t v31 = v30 + 1;
        p_dst = (std::string *)operator new(v30 + 1);
        __dst.__r_.__value_.__l.__size_ = v10;
        __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14;
        p_dst = &__dst;
        if (!v14)
        {
LABEL_34:
          p_dst->__r_.__value_.__s.__data_[v10] = 0;
          LODWORD(v10) = std::stoll(&__dst, &__idx, 10);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (*(char *)(*(void *)&v11 + 31) < 0)
          {
            if (__idx == *(void *)(*(void *)&v11 + 16)) {
              goto LABEL_38;
            }
          }
          else if (__idx == *(unsigned __int8 *)(*(void *)&v11 + 31))
          {
LABEL_38:
            if (v10)
            {
              unint64_t v32 = operator new(0x10uLL);
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
              _OWORD *v32 = xmmword_192DC8DC0;
              __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v32 + 1);
              __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)(v32 + 1);
              nitro::ndarray_container::transpose((uint64_t)&v90, (uint64_t)&__dst, (uint64_t)&v98);
              int v90 = v98;
              long long v33 = v99;
              long long v99 = 0uLL;
              uint64_t v34 = (std::__shared_weak_count *)*((void *)&v91 + 1);
              long long v91 = v33;
              if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
              if ((void)__p)
              {
                *((void *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              long long __p = v100;
              uint64_t v93 = v101;
              uint64_t v101 = 0;
              long long v100 = 0uLL;
              uint64_t v35 = (void *)v94;
              if ((void)v94)
              {
                *((void *)&v94 + 1) = v94;
                operator delete((void *)v94);
                uint64_t v35 = (void *)v100;
              }
              long long v94 = v102;
              uint64_t v36 = v103;
              uint64_t v103 = 0;
              long long v102 = 0uLL;
              uint64_t v95 = v36;
              uint64_t v96 = v104;
              if (v35)
              {
                *((void *)&v100 + 1) = v35;
                operator delete(v35);
              }
              unint64_t v37 = (std::__shared_weak_count *)*((void *)&v99 + 1);
              if (*((void *)&v99 + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v99 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
              uint64_t v25 = (void *)__dst.__r_.__value_.__r.__words[0];
              if (__dst.__r_.__value_.__r.__words[0])
              {
                __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
LABEL_56:
                operator delete(v25);
              }
            }
LABEL_57:
            switch(*((unsigned char *)a4 + 8))
            {
              case 1:
                std::string::size_type v38 = (uint64_t)*(double *)a4;
                goto LABEL_94;
              case 2:
                double v39 = *(double *)a4;
                uint64_t v40 = (const char **)(*(void *)a4 + 8);
                size_t __idx = 0;
                uint64_t v41 = (const char *)v40;
                if (*(char *)(*(void *)&v39 + 31) < 0) {
                  uint64_t v41 = *v40;
                }
                size_t v42 = strlen(v41);
                if (v42 > 0x7FFFFFFFFFFFFFF7) {
                  goto LABEL_124;
                }
                std::string::size_type v38 = v42;
                if (v42 >= 0x17)
                {
                  uint64_t v58 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v42 | 7) != 0x17) {
                    uint64_t v58 = v42 | 7;
                  }
                  uint64_t v59 = v58 + 1;
                  float v43 = (std::string *)operator new(v58 + 1);
                  __dst.__r_.__value_.__l.__size_ = v38;
                  __dst.__r_.__value_.__r.__words[2] = v59 | 0x8000000000000000;
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
                }
                else
                {
                  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v42;
                  float v43 = &__dst;
                  if (!v42)
                  {
LABEL_90:
                    v43->__r_.__value_.__s.__data_[v38] = 0;
                    LODWORD(v38) = std::stoll(&__dst, &__idx, 10);
                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__dst.__r_.__value_.__l.__data_);
                    }
                    if (*(char *)(*(void *)&v39 + 31) < 0)
                    {
                      if (__idx == *(void *)(*(void *)&v39 + 16)) {
                        goto LABEL_94;
                      }
                    }
                    else if (__idx == *(unsigned __int8 *)(*(void *)&v39 + 31))
                    {
LABEL_94:
                      if (v38)
                      {
                        uint64_t v60 = operator new(0x10uLL);
                        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
                        _OWORD *v60 = xmmword_192DC8DC0;
                        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v60 + 1);
                        __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)(v60 + 1);
                        nitro::ndarray_container::transpose((uint64_t)&v83, (uint64_t)&__dst, (uint64_t)&v98);
                        int v83 = v98;
                        long long v61 = v99;
                        long long v99 = 0uLL;
                        uint64_t v62 = (std::__shared_weak_count *)*((void *)&v84 + 1);
                        long long v84 = v61;
                        if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                          std::__shared_weak_count::__release_weak(v62);
                        }
                        if ((void)v85)
                        {
                          *((void *)&v85 + 1) = v85;
                          operator delete((void *)v85);
                        }
                        long long v85 = v100;
                        uint64_t v86 = v101;
                        uint64_t v101 = 0;
                        long long v100 = 0uLL;
                        uint64_t v63 = (void *)v87;
                        if ((void)v87)
                        {
                          *((void *)&v87 + 1) = v87;
                          operator delete((void *)v87);
                          uint64_t v63 = (void *)v100;
                        }
                        long long v87 = v102;
                        uint64_t v64 = v103;
                        uint64_t v103 = 0;
                        long long v102 = 0uLL;
                        uint64_t v88 = v64;
                        uint64_t v89 = v104;
                        if (v63)
                        {
                          *((void *)&v100 + 1) = v63;
                          operator delete(v63);
                        }
                        unint64_t v65 = (std::__shared_weak_count *)*((void *)&v99 + 1);
                        if (*((void *)&v99 + 1)
                          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v99 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                          std::__shared_weak_count::__release_weak(v65);
                        }
                        uint64_t v48 = (void *)__dst.__r_.__value_.__r.__words[0];
                        if (__dst.__r_.__value_.__r.__words[0])
                        {
                          __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
LABEL_112:
                          operator delete(v48);
                        }
                      }
LABEL_113:
                      if (v90 == 9) {
                        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)&v90);
                      }
                      else {
                        _ZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(&v90, (uint64_t)&__dst);
                      }
                      nitro::ndarray<float>::ndarray((uint64_t)&v77, (uint64_t)&__dst);
                      if (v83 == 9) {
                        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v72, (const nitro::ndarray_container *)&v83);
                      }
                      else {
                        _ZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(&v83, (uint64_t)&v72);
                      }
                      nitro::ndarray<float>::ndarray((uint64_t)&v73, (uint64_t)&v72);
                      nitro::matmul<float>((uint64_t *)&v77, &v73, &v80);
                      *(void *)a5 = 0;
                      *(unsigned char *)(a5 + 8) = 9;
                      operator new();
                    }
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::operator+<char>();
                    unint64_t v70 = std::string::append(&v72, " cannot be interpreted as an integer");
                    long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
                    __dst.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v71;
                    v70->__r_.__value_.__l.__size_ = 0;
                    v70->__r_.__value_.__r.__words[2] = 0;
                    v70->__r_.__value_.__r.__words[0] = 0;
                    std::runtime_error::runtime_error(exception, &__dst);
                    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                }
                memmove(v43, v41, v38);
                goto LABEL_90;
              case 3:
                double v53 = *(double *)a4;
                uint64_t v81 = 0;
                uint64_t v82 = 0;
                unint64_t v80 = 0;
                uint64_t v55 = *(unsigned char **)(*(void *)&v53 + 8);
                unint64_t v54 = *(unsigned char **)(*(void *)&v53 + 16);
                int64_t v56 = v54 - v55;
                if (v54 == v55)
                {
                  uint64_t v57 = 0;
                }
                else
                {
                  if (v56 < 0) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v57 = (char *)operator new(v54 - v55);
                  unint64_t v80 = v57;
                  uint64_t v82 = &v57[8 * (v56 >> 3)];
                  memcpy(v57, v55, v56);
                  uint64_t v81 = &v57[8 * (v56 >> 3)];
                }
                nitro::flexible_type_fail(0);
                if (!v57) {
                  goto LABEL_113;
                }
                uint64_t v48 = v57;
                goto LABEL_112;
              case 4:
                double v45 = *(double *)a4;
                uint64_t v78 = 0;
                uint64_t v79 = 0;
                uint64_t v77 = 0;
                std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&v77, *(void **)(*(void *)&v45 + 8), *(void **)(*(void *)&v45 + 16), (uint64_t)(*(void *)(*(void *)&v45 + 16) - *(void *)(*(void *)&v45 + 8)) >> 4);
                nitro::flexible_type_fail(0);
                uint64_t v46 = (uint64_t)v77;
                if (!v77) {
                  goto LABEL_113;
                }
                uint64_t v47 = v78;
                uint64_t v48 = v77;
                if ((void *)v78 != v77)
                {
                  do
                  {
                    v47 -= 16;
                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v79, v47);
                  }
                  while (v47 != v46);
                  uint64_t v48 = v77;
                }
                uint64_t v78 = v46;
                goto LABEL_112;
              case 5:
                double v49 = *(double *)a4;
                uint64_t v74 = 0;
                unint64_t v75 = 0;
                uint64_t v73 = 0;
                std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&v73, *(char **)(*(void *)&v49 + 8), *(char **)(*(void *)&v49 + 16), (uint64_t)(*(void *)(*(void *)&v49 + 16) - *(void *)(*(void *)&v49 + 8)) >> 5);
                nitro::flexible_type_fail(0);
                uint64_t v50 = v73;
                if (!v73) {
                  goto LABEL_113;
                }
                uint64_t v51 = v74;
                uint64_t v52 = v73;
                if (v74 != v73)
                {
                  do
                    uint64_t v51 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v51 - 32);
                  while (v51 != v50);
                  uint64_t v52 = v73;
                }
                uint64_t v74 = v50;
                uint64_t v48 = (void *)v52;
                goto LABEL_112;
              case 6:
              case 8:
                goto LABEL_127;
              case 7:
                goto LABEL_113;
              case 9:
                nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v98, (const nitro::ndarray_container *)(*(void *)a4 + 8));
                nitro::flexible_type_fail(0);
                if ((void)v102)
                {
                  *((void *)&v102 + 1) = v102;
                  operator delete((void *)v102);
                }
                if ((void)v100)
                {
                  *((void *)&v100 + 1) = v100;
                  operator delete((void *)v100);
                }
                unint64_t v44 = (std::__shared_weak_count *)*((void *)&v99 + 1);
                if (*((void *)&v99 + 1)
                  && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v99 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                  std::__shared_weak_count::__release_weak(v44);
                }
                goto LABEL_113;
              default:
                LODWORD(v38) = *(_DWORD *)a4;
                goto LABEL_94;
            }
          }
          uint64_t v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v67 = std::string::append(&v72, " cannot be interpreted as an integer");
          long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v68;
          v67->__r_.__value_.__l.__size_ = 0;
          v67->__r_.__value_.__r.__words[2] = 0;
          v67->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v66, &__dst);
          __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      memmove(p_dst, v13, v10);
      goto LABEL_34;
    case 3:
      double v17 = *(double *)a3;
      uint64_t v81 = 0;
      uint64_t v82 = 0;
      unint64_t v80 = 0;
      uint64_t v19 = *(unsigned char **)(*(void *)&v17 + 8);
      unint64_t v18 = *(unsigned char **)(*(void *)&v17 + 16);
      int64_t v20 = v18 - v19;
      if (v18 == v19)
      {
        uint64_t v21 = 0;
      }
      else
      {
        if (v20 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v18 - v19);
        unint64_t v80 = v21;
        uint64_t v82 = &v21[8 * (v20 >> 3)];
        memcpy(v21, v19, v20);
        uint64_t v81 = (char *)v82;
      }
      nitro::flexible_type_fail(0);
      if (!v21) {
        goto LABEL_57;
      }
      uint64_t v25 = v21;
      goto LABEL_56;
    case 4:
      double v22 = *(double *)a3;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v77 = 0;
      std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&v77, *(void **)(*(void *)&v22 + 8), *(void **)(*(void *)&v22 + 16), (uint64_t)(*(void *)(*(void *)&v22 + 16) - *(void *)(*(void *)&v22 + 8)) >> 4);
      nitro::flexible_type_fail(0);
      uint64_t v23 = (uint64_t)v77;
      if (!v77) {
        goto LABEL_57;
      }
      uint64_t v24 = v78;
      uint64_t v25 = v77;
      if ((void *)v78 != v77)
      {
        do
        {
          v24 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v79, v24);
        }
        while (v24 != v23);
        uint64_t v25 = v77;
      }
      uint64_t v78 = v23;
      goto LABEL_56;
    case 5:
      double v26 = *(double *)a3;
      uint64_t v74 = 0;
      unint64_t v75 = 0;
      uint64_t v73 = 0;
      std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&v73, *(char **)(*(void *)&v26 + 8), *(char **)(*(void *)&v26 + 16), (uint64_t)(*(void *)(*(void *)&v26 + 16) - *(void *)(*(void *)&v26 + 8)) >> 5);
      nitro::flexible_type_fail(0);
      uint64_t v27 = v73;
      if (!v73) {
        goto LABEL_57;
      }
      uint64_t v28 = v74;
      uint64_t v29 = v73;
      if (v74 != v73)
      {
        do
          uint64_t v28 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v28 - 32);
        while (v28 != v27);
        uint64_t v29 = v73;
      }
      uint64_t v74 = v27;
      uint64_t v25 = (void *)v29;
      goto LABEL_56;
    case 6:
    case 8:
LABEL_127:
      __break(1u);
      return;
    case 7:
      goto LABEL_57;
    case 9:
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v98, (const nitro::ndarray_container *)(*(void *)a3 + 8));
      nitro::flexible_type_fail(0);
      if ((void)v102)
      {
        *((void *)&v102 + 1) = v102;
        operator delete((void *)v102);
      }
      if ((void)v100)
      {
        *((void *)&v100 + 1) = v100;
        operator delete((void *)v100);
      }
      uint64_t v16 = (std::__shared_weak_count *)*((void *)&v99 + 1);
      if (*((void *)&v99 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v99 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      goto LABEL_57;
    default:
      LODWORD(v10) = *(_DWORD *)a3;
      goto LABEL_38;
  }
}

void sub_1926598F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v73 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v73)
  {
LABEL_8:
    nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a64);
    nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a72);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v72);
  goto LABEL_8;
}

void nitro::nitro_builtins::Concat(std::vector<nitro::nitro_variable> const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"nv.size()", 9);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  std::string::size_type v10 = (void *)std::ostream::operator<<();
  double v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 553, 1);
    std::stringbuf::str();
    size_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 553, 1);
    std::stringbuf::str();
    int64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      uint64_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        double v22 = v30;
      }
      else {
        double v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    uint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192659E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::convert_slice_array_to_list(nitro::nitro_builtins *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v4 = *((unsigned __int8 *)this + 8);
  if (v4 == 4)
  {
    if ((uint64_t *)(*(void *)this + 8) != a2) {
      std::vector<nitro::flexible_type>::__assign_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(a2, *(uint64_t **)(*(void *)this + 8), *(uint64_t **)(*(void *)this + 16), (uint64_t)(*(void *)(*(void *)this + 16) - *(void *)(*(void *)this + 8)) >> 4);
    }
  }
  else
  {
    if (v4 != 9)
    {
      if (*((int *)global_logger() + 169) <= 6)
      {
        unint64_t v32 = (file_logger *)global_logger();
        started = file_logger::start_stream(v32, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "convert_slice_array_to_list", 683, 1);
        uint64_t v34 = pthread_getspecific(*((void *)started + 74));
        if (v34 && *((unsigned char *)v34 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34 + 2, (uint64_t)"We can only slice with list or ndarray indices", 46);
        }
        uint64_t v35 = pthread_getspecific(*((void *)started + 74));
        if (v35)
        {
          if (*((unsigned char *)v35 + 280))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35 + 2, (uint64_t)"\n", 1);
            file_logger::stream_flush(started);
            if (*((_DWORD *)started + 150) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              void *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
            }
          }
        }
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v74);
      uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Check failed (", 14);
      unint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)":", 1);
      std::string::size_type v38 = (void *)std::ostream::operator<<();
      double v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"): ", 3);
      uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"false", 5);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v40);
      if (*((int *)global_logger() + 169) <= 6)
      {
        uint64_t v41 = (file_logger *)global_logger();
        size_t v42 = file_logger::start_stream(v41, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 684, 1);
        std::stringbuf::str();
        float v43 = (char *)pthread_getspecific(*((void *)v42 + 74));
        if (v43 && v43[280])
        {
          unint64_t v44 = v43 + 16;
          if (SHIBYTE(v66) >= 0) {
            double v45 = &v64;
          }
          else {
            double v45 = v64;
          }
          if (SHIBYTE(v66) >= 0) {
            uint64_t v46 = HIBYTE(v66);
          }
          else {
            uint64_t v46 = (uint64_t)v65;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
        }
        if (SHIBYTE(v66) < 0) {
          operator delete(v64);
        }
      }
      __print_back_trace();
      if (*((int *)global_logger() + 169) <= 6)
      {
        uint64_t v47 = (file_logger *)global_logger();
        uint64_t v48 = file_logger::start_stream(v47, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 684, 1);
        std::stringbuf::str();
        double v49 = (char *)pthread_getspecific(*((void *)v48 + 74));
        if (v49 && v49[280])
        {
          uint64_t v50 = v49 + 16;
          if (SHIBYTE(v59) >= 0) {
            uint64_t v51 = &v57;
          }
          else {
            uint64_t v51 = v57;
          }
          if (SHIBYTE(v59) >= 0) {
            uint64_t v52 = HIBYTE(v59);
          }
          else {
            uint64_t v52 = (uint64_t)v58;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
        }
        double v53 = pthread_getspecific(*((void *)v48 + 74));
        if (v53)
        {
          if (*((unsigned char *)v53 + 280))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53 + 2, (uint64_t)"\n", 1);
            file_logger::stream_flush(v48);
            if (*((_DWORD *)v48 + 150) == 7)
            {
              __print_back_trace();
              int64_t v56 = __cxa_allocate_exception(8uLL);
              *int64_t v56 = "LOG_FATAL encountered";
              __cxa_throw(v56, MEMORY[0x1E4FBA308], 0);
            }
          }
        }
        if (SHIBYTE(v59) < 0) {
          operator delete(v57);
        }
      }
      unint64_t v54 = __cxa_allocate_exception(0x18uLL);
      std::stringbuf::str();
    }
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v74, (const nitro::ndarray_container *)(*(void *)this + 8));
    long long v71 = 0;
    std::string v72 = 0;
    int v73 = 0;
    uint64_t v5 = v76;
    int64_t v6 = v77 - (unsigned char *)v76;
    if (v77 == v76)
    {
      unint64_t v7 = 0;
      unint64_t v8 = 0;
    }
    else
    {
      if (v6 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v7 = (char *)operator new(v77 - (unsigned char *)v76);
      unint64_t v8 = &v7[8 * (v6 >> 3)];
      long long v71 = v7;
      int v73 = v8;
      memcpy(v7, v5, v6);
      std::string v72 = v8;
    }
    uint64_t v57 = (void *)((v8 - v7) >> 3);
    if (v8 - v7 != 16)
    {
      uint64_t v64 = &v57;
      nitro::nitro_builtins::convert_slice_array_to_list(nitro::flexible_type const&)::$_0::operator()();
    }
    if (LODWORD(v74[0]) == 3) {
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v57, (const nitro::ndarray_container *)v74);
    }
    else {
      _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v74, (uint64_t)&v57);
    }
    nitro::ndarray<int>::ndarray((uint64_t)&v64, (uint64_t)&v57);
    if (__p)
    {
      uint64_t v63 = __p;
      operator delete(__p);
    }
    if (v60)
    {
      long long v61 = v60;
      operator delete(v60);
    }
    uint64_t v9 = v59;
    if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    if (*(void *)v71)
    {
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      uint64_t v57 = 0;
      if (*((void *)v71 + 1))
      {
        unint64_t v10 = 0;
        do
        {
          uint64_t v12 = v70 + *((void *)v68 + 1) * v10;
          char v83 = 0;
          uint64_t v82 = 0;
          uint64_t v82 = (atomic_ullong *)*((int *)v64 + v12);
          unint64_t v13 = v58;
          if (v58 < (char *)v59)
          {
            *(void *)uint64_t v58 = 0;
            v13[8] = 0;
            double v11 = v82;
            v13[8] = v83;
            *(void *)unint64_t v13 = v11;
            v13[8] = v83;
            uint64_t v58 = v13 + 16;
          }
          else
          {
            uint64_t v58 = std::vector<nitro::flexible_type>::__push_back_slow_path<nitro::flexible_type>((char **)&v57, (uint64_t)&v82);
            switch(v83)
            {
              case 2:
                if (atomic_fetch_add(v82, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_24;
                }
                size_t v14 = v82;
                if (!v82) {
                  goto LABEL_24;
                }
                if (*((char *)v82 + 31) < 0) {
                  operator delete((void *)v82[1]);
                }
                uint64_t v15 = v14;
                uint64_t v16 = 0x1012C404EF22A49;
                goto LABEL_63;
              case 3:
                if (atomic_fetch_add(v82, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_24;
                }
                uint64_t v21 = v82;
                if (!v82) {
                  goto LABEL_24;
                }
                double v22 = (void *)v82[1];
                if (v22)
                {
                  void v82[2] = (atomic_ullong)v22;
                  operator delete(v22);
                }
                uint64_t v15 = v21;
                uint64_t v16 = 0x1080C409938AC02;
                goto LABEL_63;
              case 4:
                if (atomic_fetch_add(v82, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_24;
                }
                uint64_t v17 = v82;
                if (!v82) {
                  goto LABEL_24;
                }
                atomic_ullong v18 = v82[1];
                if (!v18) {
                  goto LABEL_52;
                }
                uint64_t v19 = v82[2];
                int64_t v20 = (void *)v82[1];
                if (v19 != v18)
                {
                  do
                  {
                    v19 -= 16;
                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v17 + 3), v19);
                  }
                  while (v19 != v18);
                  int64_t v20 = (void *)v17[1];
                }
                v17[2] = v18;
                break;
              case 5:
                if (atomic_fetch_add(v82, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_24;
                }
                uint64_t v17 = v82;
                if (!v82) {
                  goto LABEL_24;
                }
                atomic_ullong v23 = v82[1];
                if (!v23) {
                  goto LABEL_52;
                }
                uint64_t v24 = v82[2];
                atomic_ullong v25 = v82[1];
                if (v24 != v23)
                {
                  do
                    uint64_t v24 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v24 - 32);
                  while (v24 != v23);
                  atomic_ullong v25 = v17[1];
                }
                v17[2] = v23;
                int64_t v20 = (void *)v25;
                break;
              case 9:
                if (atomic_fetch_add(v82, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_24;
                }
                double v26 = v82;
                if (!v82) {
                  goto LABEL_24;
                }
                uint64_t v27 = (void *)v82[7];
                if (v27)
                {
                  v82[8] = (atomic_ullong)v27;
                  operator delete(v27);
                }
                unsigned __int8 v28 = (void *)v26[4];
                if (v28)
                {
                  v26[5] = (atomic_ullong)v28;
                  operator delete(v28);
                }
                uint64_t v29 = (std::__shared_weak_count *)v26[3];
                if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                  std::__shared_weak_count::__release_weak(v29);
                }
                uint64_t v15 = v26;
                uint64_t v16 = 0x10B0C4002311774;
                goto LABEL_63;
              default:
                goto LABEL_24;
            }
            operator delete(v20);
LABEL_52:
            uint64_t v15 = v17;
            uint64_t v16 = 0x1020C405E66F15BLL;
LABEL_63:
            MEMORY[0x192FF16B0](v15, v16);
          }
LABEL_24:
          ++v10;
        }
        while (v10 < *((void *)v71 + 1));
      }
      uint64_t v80 = 0;
      char v81 = 4;
      operator new();
    }
    if (v68)
    {
      uint64_t v69 = v68;
      operator delete(v68);
    }
    if (v66)
    {
      uint64_t v67 = v66;
      operator delete(v66);
    }
    uint64_t v30 = v65;
    if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    if (v71) {
      operator delete(v71);
    }
    if (v78)
    {
      uint64_t v79 = v78;
      operator delete(v78);
    }
    if (v76)
    {
      uint64_t v77 = v76;
      operator delete(v76);
    }
    unsigned __int8 v31 = v75;
    if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_19265AAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  a38 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a38 + *(void *)(a38 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a39 = MEMORY[0x1E4FBA470] + 16;
  if (a52 < 0) {
    operator delete(a47);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a55);
  std::vector<nitro::flexible_type>::~vector[abi:ne180100](v55);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::SliceMask(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"fbeginmask.get_type() == flex_type_enum::LIST", 45);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 755, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      unint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    double v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 755, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      size_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  atomic_ullong v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19265B128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::SliceMask(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"fendmask.get_type() == flex_type_enum::LIST", 43);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 756, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      unint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    double v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 756, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      size_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  atomic_ullong v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19265B4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::SliceMask(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_2::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"maskidx", 7);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  int64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"slice_tensor.size()", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  double v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 763, 1);
    std::stringbuf::str();
    size_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    atomic_ullong v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 763, 1);
    std::stringbuf::str();
    int64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        double v22 = v30;
      }
      else {
        double v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  atomic_ullong v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19265B8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::SliceMask(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_3::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"maskidx", 7);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  int64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"slice_tensor.size()", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  double v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 768, 1);
    std::stringbuf::str();
    size_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    atomic_ullong v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 768, 1);
    std::stringbuf::str();
    int64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        double v22 = v30;
      }
      else {
        double v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  atomic_ullong v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19265BCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Stack(nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 809, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      unint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    double v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 809, 1);
    std::stringbuf::str();
    unint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      size_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  atomic_ullong v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19265C048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Reshape(nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"right_aligned_i", 15);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  int64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"reverse_input_shape.size()", 26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  double v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 827, 1);
    std::stringbuf::str();
    size_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    atomic_ullong v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 827, 1);
    std::stringbuf::str();
    int64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        double v22 = v30;
      }
      else {
        double v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  atomic_ullong v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19265C45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::TopK_1d(nitro::nitro_builtins *this, const nitro::flexible_type *a2, const nitro::flexible_type *a3)
{
  nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(void *)this + 8), (uint64_t)v6);
  int v4 = nitro::flexible_type_converter<int>::get((uint64_t)&v5, (unsigned __int8 *)a2);
  nitro::ndarray_container::visit<nitro::nitro_builtins::TopK_1d(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(v6, v4);
}

void sub_19265C68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (atomic_fetch_add(0, 0xFFFFFFFFFFFFFFFFLL) == 1) {
    nitro::nitro_builtins::TopK(v13);
  }
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 0;
  std::vector<nitro::flexible_type>::~vector[abi:ne180100](&a9);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a13);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::TopK_1d(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(_DWORD *a1, int a2)
{
  uint64_t v335 = *MEMORY[0x1E4F143B8];
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v310, (uint64_t)a1);
      if (v314) {
        goto LABEL_262;
      }
      uint64_t v3 = v312 - (unsigned char *)v311;
      if (v312 == v311) {
        goto LABEL_263;
      }
      uint64_t v4 = v310;
      if (!v310) {
        goto LABEL_80;
      }
      if ((unint64_t)(v3 - 8) >= 8)
      {
        unint64_t v90 = ((unint64_t)(v3 - 8) >> 3) + 1;
        long long v5 = (char *)v311 + 8 * (v90 & 0x3FFFFFFFFFFFFFFELL);
        long long v91 = (char *)v311 + 8;
        uint64_t v92 = 1;
        uint64_t v93 = v90 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v94 = 1;
        do
        {
          v92 *= *(v91 - 1);
          v94 *= *v91;
          v91 += 2;
          v93 -= 2;
        }
        while (v93);
        uint64_t v4 = v94 * v92;
        if (v90 == (v90 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_80:
          unint64_t v96 = v3 >> 3;
          if ((unint64_t)(v3 >> 3) <= 1) {
            unint64_t v96 = 1;
          }
          if (v96 >= 2)
          {
            uint64_t v99 = 0;
            uint64_t v100 = 0;
            unint64_t v97 = v96 & 0xFFFFFFFFFFFFFFFELL;
            uint64_t v101 = (char *)v311 + 8;
            long long v102 = (char *)v313 + 8;
            unint64_t v103 = v96 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v99 += *(v102 - 1) * (*(v101 - 1) - 1);
              v100 += *v102 * (*v101 - 1);
              v101 += 2;
              v102 += 2;
              v103 -= 2;
            }
            while (v103);
            uint64_t v98 = v100 + v99;
            if (v96 == v97)
            {
LABEL_89:
              if (v4 != v98 + 1) {
LABEL_262:
              }
                nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
              if (v312 == v311 || (unint64_t v111 = v310) == 0)
              {
LABEL_263:
                uint64_t v187 = 0;
                uint64_t v171 = 0;
                unint64_t v170 = 0;
                uint64_t v327 = 0;
                uint64_t v328 = 0;
                unint64_t v329 = 0;
                if (!a2) {
                  goto LABEL_265;
                }
                goto LABEL_264;
              }
              unint64_t v112 = v312 - (unsigned char *)v311 - 8;
              if (v112 >= 8)
              {
                uint64_t v164 = (v112 >> 3) + 1;
                uint64_t v114 = (char *)v311 + 8 * (v164 & 0x3FFFFFFFFFFFFFFELL);
                unint64_t v165 = (char *)v311 + 8;
                uint64_t v166 = 1;
                uint64_t v167 = v164 & 0x3FFFFFFFFFFFFFFELL;
                uint64_t v168 = 1;
                do
                {
                  v166 *= *(v165 - 1);
                  v168 *= *v165;
                  v165 += 2;
                  v167 -= 2;
                }
                while (v167);
                unint64_t v113 = v168 * v166;
                if (v164 == (v164 & 0x3FFFFFFFFFFFFFFELL))
                {
LABEL_155:
                  uint64_t v327 = 0;
                  uint64_t v328 = 0;
                  unint64_t v329 = 0;
                  if (!v113)
                  {
                    uint64_t v187 = 0;
                    uint64_t v171 = 0;
                    unint64_t v170 = 0;
                    if (!a2)
                    {
LABEL_265:
                      v325[0] = 0;
                      v325[1] = 0;
                      uint64_t v326 = 0;
                      uint64_t v273 = (uint64_t *)operator new(8uLL);
                      uint64_t v330 = v273;
                      *uint64_t v273 = a2;
                      uint64_t v331 = v273 + 1;
                      uint64_t v332 = v273 + 1;
                      nitro::ndarray<int>::init_from_shape(&v330, &v323);
                      if (v330)
                      {
                        uint64_t v331 = v330;
                        operator delete(v330);
                      }
                      uint64_t v321 = 0;
                      uint64_t v322 = 0;
                      uint64_t v320 = 0;
                      if (v328 == v170)
                      {
                        uint64_t v275 = 0;
                        if (!a2) {
                          goto LABEL_279;
                        }
                      }
                      else
                      {
                        unint64_t v274 = (char *)v328 - (char *)v187;
                        if ((char *)v328 - (char *)v187 < 0) {
                          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v275 = (float32x4_t *)operator new(v274 >> 1);
                        uint64_t v320 = v275;
                        uint64_t v322 = &v275->i8[4 * ((uint64_t)v274 >> 3)];
                        bzero(v275, v274 >> 1);
                        uint64_t v321 = (char *)v275 + (v274 >> 1);
                        if (!a2)
                        {
LABEL_279:
                          uint64_t v333 = 0;
                          LOBYTE(v334) = 9;
                          operator new();
                        }
                      }
                      uint64_t v276 = v323;
                      uint64_t v277 = v324;
                      if ((unint64_t)a2 <= 1) {
                        unint64_t v278 = 1;
                      }
                      else {
                        unint64_t v278 = a2;
                      }
                      if (v278 >= 0x10)
                      {
                        unint64_t v279 = 0;
                        unint64_t v285 = v323 + 4 * v324;
                        unint64_t v286 = v323 + 4 * v278 + 4 * v324;
                        unint64_t v287 = (char *)(v170 + 1);
                        unint64_t v288 = (float32x4_t *)&v170[2 * v278];
                        BOOL v290 = v285 < (unint64_t)v288 && (unint64_t)v287 < v286;
                        _CF = v275 >= v288;
                        uint64_t v291 = &v275->i8[4 * v278];
                        char v293 = !_CF && v287 < v291;
                        if (((unint64_t)v275 >= v286 || v285 >= (unint64_t)v291)
                          && !v290
                          && (v293 & 1) == 0)
                        {
                          unint64_t v279 = v278 & 0xFFFFFFFFFFFFFFF8;
                          unint64_t v295 = v170 + 8;
                          uint64_t v296 = (int32x4_t *)(v323 + 4 * v324 + 16);
                          unint64_t v297 = v275 + 1;
                          unint64_t v298 = v278 & 0xFFFFFFFFFFFFFFF8;
                          do
                          {
                            uint64_t v299 = v295 - 8;
                            float32x4x2_t v338 = vld2q_f32(v299);
                            float32x4x2_t v341 = vld2q_f32(v295);
                            v296[-1] = vcvtq_s32_f32(v338.val[0]);
                            int32x4_t *v296 = vcvtq_s32_f32(v341.val[0]);
                            v297[-1] = v338.val[1];
                            float32x4_t *v297 = v341.val[1];
                            v295 += 16;
                            v296 += 2;
                            v297 += 2;
                            v298 -= 8;
                          }
                          while (v298);
                          if (v278 == v279) {
                            goto LABEL_279;
                          }
                        }
                      }
                      else
                      {
                        unint64_t v279 = 0;
                      }
                      unint64_t v280 = v278 - v279;
                      unint64_t v281 = &v275->f32[v279];
                      uint64_t v282 = &v170[2 * v279 + 1];
                      uint64_t v283 = (_DWORD *)(v276 + 4 * (v279 + v277));
                      do
                      {
                        *v283++ = (int)*(v282 - 1);
                        float v284 = *v282;
                        v282 += 2;
                        *v281++ = v284;
                        --v280;
                      }
                      while (v280);
                      goto LABEL_279;
                    }
LABEL_264:
                    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<float,int> *>,std::__wrap_iter<std::pair<float,int> *>>(v187, &v170[2 * a2], v171, (uint64_t)&v330);
                    goto LABEL_265;
                  }
                  if (v113 >> 61) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v170 = (float *)operator new(8 * v113);
                  uint64_t v327 = v170;
                  unint64_t v329 = (char *)&v170[2 * v113];
                  bzero(v170, 8 * v113);
                  uint64_t v171 = (uint64_t)&v170[2 * v113];
                  uint64_t v328 = (float *)v171;
                  unint64_t v172 = (uint64_t)(8 * v113) >> 3;
                  if (v172 <= 1) {
                    unint64_t v172 = 1;
                  }
                  if (v172 >= 8
                    && ((unint64_t)(v170 + 1) < v111 + 4 * v172
                      ? (BOOL v173 = v111 >= (unint64_t)&v170[2 * v172])
                      : (BOOL v173 = 1),
                        v173))
                  {
                    unint64_t v174 = v172 & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v175 = v170 + 8;
                    int32x4_t v176 = (int32x4_t)xmmword_192DAF430;
                    uint64_t v177 = (int32x4_t *)(v111 + 16);
                    v178.i64[0] = 0x400000004;
                    v178.i64[1] = 0x400000004;
                    v179.i64[0] = 0x800000008;
                    v179.i64[1] = 0x800000008;
                    unint64_t v180 = v172 & 0xFFFFFFFFFFFFFFF8;
                    do
                    {
                      v343.val[1] = (float32x4_t)vaddq_s32(v176, v178);
                      int32x4_t v181 = *v177;
                      float32x4_t v182 = vcvtq_f32_s32(v177[-1]);
                      unint64_t v183 = v175 - 8;
                      vst2q_f32(v183, *(float32x4x2_t *)(&v176 - 1));
                      v343.val[0] = vcvtq_f32_s32(v181);
                      vst2q_f32(v175, v343);
                      int32x4_t v176 = vaddq_s32(v176, v179);
                      v175 += 16;
                      v177 += 2;
                      v180 -= 8;
                    }
                    while (v180);
                    if (v172 == v174)
                    {
LABEL_177:
                      uint64_t v187 = v170;
                      if (!a2) {
                        goto LABEL_265;
                      }
                      goto LABEL_264;
                    }
                  }
                  else
                  {
                    unint64_t v174 = 0;
                  }
                  uint64_t v186 = &v170[2 * v174 + 1];
                  do
                  {
                    *(v186 - 1) = (float)*(int *)(v111 + 4 * v174);
                    *(_DWORD *)uint64_t v186 = v174;
                    v186 += 2;
                    ++v174;
                  }
                  while (v172 != v174);
                  goto LABEL_177;
                }
              }
              else
              {
                unint64_t v113 = 1;
                uint64_t v114 = (char *)v311;
              }
              do
              {
                uint64_t v169 = *(void *)v114;
                v114 += 8;
                v113 *= v169;
              }
              while (v114 != v312);
              goto LABEL_155;
            }
          }
          else
          {
            unint64_t v97 = 0;
            uint64_t v98 = 0;
          }
          unint64_t v104 = v96 - v97;
          uint64_t v105 = 8 * v97;
          int v106 = (uint64_t *)((char *)v313 + v105);
          uint64_t v107 = (uint64_t *)((char *)v311 + v105);
          do
          {
            uint64_t v108 = *v107++;
            uint64_t v109 = v108 - 1;
            uint64_t v110 = *v106++;
            v98 += v110 * v109;
            --v104;
          }
          while (v104);
          goto LABEL_89;
        }
      }
      else
      {
        uint64_t v4 = 1;
        long long v5 = (char *)v311;
      }
      do
      {
        uint64_t v95 = *(void *)v5;
        v5 += 8;
        v4 *= v95;
      }
      while (v5 != v312);
      goto LABEL_80;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v315, (uint64_t)a1);
      if (v319) {
        goto LABEL_247;
      }
      uint64_t v12 = v317 - (unsigned char *)v316;
      if (v317 == v316) {
        goto LABEL_248;
      }
      uint64_t v13 = v315;
      if (!v315) {
        goto LABEL_62;
      }
      if ((unint64_t)(v12 - 8) >= 8)
      {
        unint64_t v65 = ((unint64_t)(v12 - 8) >> 3) + 1;
        size_t v14 = (char *)v316 + 8 * (v65 & 0x3FFFFFFFFFFFFFFELL);
        uint64_t v66 = (char *)v316 + 8;
        uint64_t v67 = 1;
        uint64_t v68 = v65 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v69 = 1;
        do
        {
          v67 *= *(v66 - 1);
          v69 *= *v66;
          v66 += 2;
          v68 -= 2;
        }
        while (v68);
        uint64_t v13 = v69 * v67;
        if (v65 == (v65 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_62:
          unint64_t v71 = v12 >> 3;
          if ((unint64_t)(v12 >> 3) <= 1) {
            unint64_t v71 = 1;
          }
          if (v71 >= 2)
          {
            uint64_t v74 = 0;
            uint64_t v75 = 0;
            unint64_t v72 = v71 & 0xFFFFFFFFFFFFFFFELL;
            uint64_t v76 = (char *)v316 + 8;
            uint64_t v77 = (char *)v318 + 8;
            unint64_t v78 = v71 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v74 += *(v77 - 1) * (*(v76 - 1) - 1);
              v75 += *v77 * (*v76 - 1);
              v76 += 2;
              v77 += 2;
              v78 -= 2;
            }
            while (v78);
            uint64_t v73 = v75 + v74;
            if (v71 == v72)
            {
LABEL_71:
              if (v13 != v73 + 1) {
LABEL_247:
              }
                nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
              if (v317 == v316 || (unint64_t v86 = v315) == 0)
              {
LABEL_248:
                uint64_t v163 = 0;
                uint64_t v153 = 0;
                uint64_t v150 = 0;
                uint64_t v327 = 0;
                uint64_t v328 = 0;
                unint64_t v329 = 0;
                if (!a2) {
                  goto LABEL_250;
                }
                goto LABEL_249;
              }
              unint64_t v87 = v317 - (unsigned char *)v316 - 8;
              if (v87 >= 8)
              {
                uint64_t v144 = (v87 >> 3) + 1;
                uint64_t v89 = (char *)v316 + 8 * (v144 & 0x3FFFFFFFFFFFFFFELL);
                unint64_t v145 = (char *)v316 + 8;
                uint64_t v146 = 1;
                uint64_t v147 = v144 & 0x3FFFFFFFFFFFFFFELL;
                uint64_t v148 = 1;
                do
                {
                  v146 *= *(v145 - 1);
                  v148 *= *v145;
                  v145 += 2;
                  v147 -= 2;
                }
                while (v147);
                unint64_t v88 = v148 * v146;
                if (v144 == (v144 & 0x3FFFFFFFFFFFFFFELL))
                {
LABEL_126:
                  uint64_t v327 = 0;
                  uint64_t v328 = 0;
                  unint64_t v329 = 0;
                  if (!v88)
                  {
                    uint64_t v163 = 0;
                    uint64_t v153 = 0;
                    uint64_t v150 = 0;
                    if (!a2)
                    {
LABEL_250:
                      v325[0] = 0;
                      v325[1] = 0;
                      uint64_t v326 = 0;
                      uint64_t v266 = (uint64_t *)operator new(8uLL);
                      uint64_t v330 = v266;
                      *uint64_t v266 = a2;
                      uint64_t v331 = v266 + 1;
                      uint64_t v332 = v266 + 1;
                      nitro::ndarray<unsigned char>::init_from_shape(&v330, &v323);
                      if (v330)
                      {
                        uint64_t v331 = v330;
                        operator delete(v330);
                      }
                      uint64_t v321 = 0;
                      uint64_t v322 = 0;
                      uint64_t v320 = 0;
                      if (v328 != v150)
                      {
                        unint64_t v267 = (char *)v328 - (char *)v163;
                        if ((char *)v328 - (char *)v163 < 0) {
                          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v268 = (char *)operator new(v267 >> 1);
                        uint64_t v320 = v268;
                        uint64_t v322 = &v268[4 * ((uint64_t)v267 >> 3)];
                        bzero(v268, v267 >> 1);
                        uint64_t v321 = &v268[v267 >> 1];
                      }
                      if (a2)
                      {
                        uint64_t v269 = 0;
                        if ((unint64_t)a2 <= 1) {
                          uint64_t v270 = 1;
                        }
                        else {
                          uint64_t v270 = a2;
                        }
                        unint64_t v271 = v150 + 1;
                        do
                        {
                          *(unsigned char *)(v323 + v324 + v269) = (int)*(v271 - 1);
                          float v272 = *v271;
                          v271 += 2;
                          *((float *)v320 + v269++) = v272;
                        }
                        while (v270 != v269);
                      }
                      uint64_t v333 = 0;
                      LOBYTE(v334) = 9;
                      operator new();
                    }
LABEL_249:
                    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<float,int> *>,std::__wrap_iter<std::pair<float,int> *>>(v163, &v150[2 * a2], v153, (uint64_t)&v330);
                    goto LABEL_250;
                  }
                  if (v88 >> 61) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v150 = (float *)operator new(8 * v88);
                  uint64_t v327 = v150;
                  unint64_t v329 = (char *)&v150[2 * v88];
                  bzero(v150, 8 * v88);
                  uint64_t v153 = (uint64_t)&v150[2 * v88];
                  uint64_t v328 = (float *)v153;
                  unint64_t v154 = (uint64_t)(8 * v88) >> 3;
                  if (v154 <= 1) {
                    unint64_t v154 = 1;
                  }
                  if (v154 < 4
                    || ((uint64_t v155 = 2 * (v154 - 1),
                         uint64_t v156 = (char *)&v150[v155],
                         unint64_t v157 = (unint64_t)&v150[v155 + 1],
                         v156 >= (char *)v150)
                      ? (BOOL v158 = v157 >= (unint64_t)(v150 + 1))
                      : (BOOL v158 = 0),
                        v158 ? (_ZF = (v154 - 1) >> 61 == 0) : (_ZF = 0),
                        !_ZF
                     || ((unint64_t)v150 < v86 + v154
                       ? (BOOL v160 = v86 >= (unint64_t)&v150[2 * v154])
                       : (BOOL v160 = 1),
                         !v160)))
                  {
                    unint64_t v161 = 0;
                    goto LABEL_147;
                  }
                  if (v154 >= 0x10)
                  {
                    int32x4_t v209 = (int32x4_t)xmmword_192DC8DE0;
                    int32x4_t v152 = (int32x4_t)xmmword_192DC8DF0;
                    int32x4_t v210 = (int32x4_t)xmmword_192DC8DD0;
                    int32x4_t v211 = (int32x4_t)xmmword_192DAF430;
                    unint64_t v161 = v154 & 0xFFFFFFFFFFFFFFF0;
                    v212.i64[0] = 0x1000000010;
                    v212.i64[1] = 0x1000000010;
                    unint64_t v213 = v154 & 0xFFFFFFFFFFFFFFF0;
                    unint64_t v214 = (int8x16_t *)v86;
                    unint64_t v215 = v150;
                    do
                    {
                      int8x16_t v216 = *v214++;
                      float32x4_t v217 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v216, (int8x16_t)xmmword_192DAD3E0));
                      uint64_t v218 = v215;
                      vst2q_f32(v218, *(float32x4x2_t *)(&v211 - 1));
                      v218 += 8;
                      float32x4_t v219 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v216, (int8x16_t)xmmword_192DAD3F0));
                      vst2q_f32(v218, *(float32x4x2_t *)(&v210 - 1));
                      float32x4_t v220 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v216, (int8x16_t)xmmword_192DAD400));
                      unint64_t v221 = v215 + 16;
                      vst2q_f32(v221, *(float32x4x2_t *)(&v152 - 1));
                      float32x4_t v151 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v216, (int8x16_t)xmmword_192DAD410));
                      unint64_t v222 = v215 + 24;
                      vst2q_f32(v222, *(float32x4x2_t *)v151.f32);
                      int32x4_t v211 = vaddq_s32(v211, v212);
                      int32x4_t v210 = vaddq_s32(v210, v212);
                      int32x4_t v152 = vaddq_s32(v152, v212);
                      int32x4_t v209 = vaddq_s32(v209, v212);
                      v215 += 32;
                      v213 -= 16;
                    }
                    while (v213);
                    if (v154 == v161) {
                      goto LABEL_149;
                    }
                    if ((v154 & 0xC) == 0)
                    {
LABEL_147:
                      uint64_t v162 = (char *)&v150[2 * v161 + 1];
                      do
                      {
                        v151.i8[0] = *(unsigned char *)(v86 + v161);
                        v151.f32[0] = (float)v151.u32[0];
                        *((_DWORD *)v162 - 1) = v151.i32[0];
                        *(_DWORD *)uint64_t v162 = v161;
                        v162 += 8;
                        ++v161;
                      }
                      while (v154 != v161);
                      goto LABEL_149;
                    }
                  }
                  else
                  {
                    unint64_t v161 = 0;
                  }
                  unint64_t v223 = v161;
                  unint64_t v161 = v154 & 0xFFFFFFFFFFFFFFFCLL;
                  int32x4_t v224 = (int32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v223), (int8x16_t)xmmword_192DAF430);
                  unint64_t v225 = &v150[2 * v223];
                  uint64_t v226 = (__int32 *)(v86 + v223);
                  unint64_t v227 = v223 - (v154 & 0xFFFFFFFFFFFFFFFCLL);
                  v228.i64[0] = 0x400000004;
                  v228.i64[1] = 0x400000004;
                  do
                  {
                    __int32 v229 = *v226++;
                    v152.i32[0] = v229;
                    int32x4_t v152 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v152.i8));
                    float32x4_t v151 = vcvtq_f32_u32((uint32x4_t)v152);
                    vst2q_f32(v225, *(float32x4x2_t *)v151.f32);
                    v225 += 8;
                    int32x4_t v224 = vaddq_s32(v224, v228);
                    v227 += 4;
                  }
                  while (v227);
                  if (v154 != v161) {
                    goto LABEL_147;
                  }
LABEL_149:
                  uint64_t v163 = v150;
                  if (!a2) {
                    goto LABEL_250;
                  }
                  goto LABEL_249;
                }
              }
              else
              {
                unint64_t v88 = 1;
                uint64_t v89 = (char *)v316;
              }
              do
              {
                uint64_t v149 = *(void *)v89;
                v89 += 8;
                v88 *= v149;
              }
              while (v89 != v317);
              goto LABEL_126;
            }
          }
          else
          {
            unint64_t v72 = 0;
            uint64_t v73 = 0;
          }
          unint64_t v79 = v71 - v72;
          uint64_t v80 = 8 * v72;
          char v81 = (uint64_t *)((char *)v318 + v80);
          uint64_t v82 = (uint64_t *)((char *)v316 + v80);
          do
          {
            uint64_t v83 = *v82++;
            uint64_t v84 = v83 - 1;
            uint64_t v85 = *v81++;
            v73 += v85 * v84;
            --v79;
          }
          while (v79);
          goto LABEL_71;
        }
      }
      else
      {
        uint64_t v13 = 1;
        size_t v14 = (char *)v316;
      }
      do
      {
        uint64_t v70 = *(void *)v14;
        v14 += 8;
        v13 *= v70;
      }
      while (v14 != v317);
      goto LABEL_62;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v300, (uint64_t)a1);
      if (v304) {
        goto LABEL_202;
      }
      uint64_t v6 = v302 - (unsigned char *)v301;
      if (v302 == v301) {
        goto LABEL_203;
      }
      uint64_t v7 = v300;
      if (!v300) {
        goto LABEL_26;
      }
      if ((unint64_t)(v6 - 8) >= 8)
      {
        unint64_t v15 = ((unint64_t)(v6 - 8) >> 3) + 1;
        unint64_t v8 = (char *)v301 + 8 * (v15 & 0x3FFFFFFFFFFFFFFELL);
        uint64_t v16 = (char *)v301 + 8;
        uint64_t v17 = 1;
        uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v19 = 1;
        do
        {
          v17 *= *(v16 - 1);
          v19 *= *v16;
          v16 += 2;
          v18 -= 2;
        }
        while (v18);
        uint64_t v7 = v19 * v17;
        if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_26:
          unint64_t v21 = v6 >> 3;
          if ((unint64_t)(v6 >> 3) <= 1) {
            unint64_t v21 = 1;
          }
          if (v21 >= 2)
          {
            uint64_t v24 = 0;
            uint64_t v25 = 0;
            unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
            double v26 = (char *)v301 + 8;
            uint64_t v27 = (char *)v303 + 8;
            unint64_t v28 = v21 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v24 += *(v27 - 1) * (*(v26 - 1) - 1);
              v25 += *v27 * (*v26 - 1);
              v26 += 2;
              v27 += 2;
              v28 -= 2;
            }
            while (v28);
            uint64_t v23 = v25 + v24;
            if (v21 == v22)
            {
LABEL_35:
              if (v7 != v23 + 1) {
LABEL_202:
              }
                nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
              if (v302 == v301 || (unint64_t v36 = v300) == 0)
              {
LABEL_203:
                uint64_t v185 = 0;
                uint64_t v122 = 0;
                std::string::size_type v121 = 0;
                uint64_t v327 = 0;
                uint64_t v328 = 0;
                unint64_t v329 = 0;
                if (!a2) {
                  goto LABEL_205;
                }
                goto LABEL_204;
              }
              unint64_t v37 = v302 - (unsigned char *)v301 - 8;
              if (v37 >= 8)
              {
                uint64_t v115 = (v37 >> 3) + 1;
                double v39 = (char *)v301 + 8 * (v115 & 0x3FFFFFFFFFFFFFFELL);
                unint64_t v116 = (char *)v301 + 8;
                uint64_t v117 = 1;
                uint64_t v118 = v115 & 0x3FFFFFFFFFFFFFFELL;
                uint64_t v119 = 1;
                do
                {
                  v117 *= *(v116 - 1);
                  v119 *= *v116;
                  v116 += 2;
                  v118 -= 2;
                }
                while (v118);
                unint64_t v38 = v119 * v117;
                if (v115 == (v115 & 0x3FFFFFFFFFFFFFFELL))
                {
LABEL_98:
                  uint64_t v327 = 0;
                  uint64_t v328 = 0;
                  unint64_t v329 = 0;
                  if (!v38)
                  {
                    uint64_t v185 = 0;
                    uint64_t v122 = 0;
                    std::string::size_type v121 = 0;
                    if (!a2)
                    {
LABEL_205:
                      v325[0] = 0;
                      v325[1] = 0;
                      uint64_t v326 = 0;
                      uint64_t v230 = (uint64_t *)operator new(8uLL);
                      uint64_t v330 = v230;
                      *uint64_t v230 = a2;
                      uint64_t v331 = v230 + 1;
                      uint64_t v332 = v230 + 1;
                      nitro::ndarray<float>::init_from_shape(&v330, &v323);
                      if (v330)
                      {
                        uint64_t v331 = v330;
                        operator delete(v330);
                      }
                      uint64_t v321 = 0;
                      uint64_t v322 = 0;
                      uint64_t v320 = 0;
                      if (v328 == v121)
                      {
                        unint64_t v232 = 0;
                        if (!a2) {
                          goto LABEL_221;
                        }
                      }
                      else
                      {
                        unint64_t v231 = (char *)v328 - (char *)v185;
                        if ((char *)v328 - (char *)v185 < 0) {
                          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                        }
                        unint64_t v232 = (float32x4_t *)operator new(v231 >> 1);
                        uint64_t v320 = v232;
                        uint64_t v322 = &v232->i8[4 * ((uint64_t)v231 >> 3)];
                        bzero(v232, v231 >> 1);
                        uint64_t v321 = (char *)v232 + (v231 >> 1);
                        if (!a2)
                        {
LABEL_221:
                          uint64_t v333 = 0;
                          LOBYTE(v334) = 9;
                          operator new();
                        }
                      }
                      uint64_t v233 = v323;
                      uint64_t v234 = v324;
                      if ((unint64_t)a2 <= 1) {
                        unint64_t v235 = 1;
                      }
                      else {
                        unint64_t v235 = a2;
                      }
                      if (v235 >= 8
                        && ((unint64_t v236 = v323 + 4 * v324, v236 >= (unint64_t)&v121[2 * v235 - 1])
                         || (unint64_t)v121 >= v323 + 4 * (v324 + v235)))
                      {
                        unint64_t v237 = v235 & 0xFFFFFFFFFFFFFFF8;
                        uint64_t v243 = v121 + 8;
                        uint64_t v244 = (float32x4_t *)(v236 + 16);
                        unint64_t v245 = v232 + 1;
                        unint64_t v246 = v235 & 0xFFFFFFFFFFFFFFF8;
                        do
                        {
                          uint64_t v247 = v243 - 8;
                          float32x4x2_t v336 = vld2q_f32(v247);
                          float32x4x2_t v339 = vld2q_f32(v243);
                          v244[-1] = v336.val[0];
                          *uint64_t v244 = v339.val[0];
                          v245[-1] = v336.val[1];
                          *unint64_t v245 = v339.val[1];
                          v243 += 16;
                          v244 += 2;
                          v245 += 2;
                          v246 -= 8;
                        }
                        while (v246);
                        if (v235 == v237) {
                          goto LABEL_221;
                        }
                      }
                      else
                      {
                        unint64_t v237 = 0;
                      }
                      unint64_t v238 = v235 - v237;
                      unint64_t v239 = &v232->i32[v237];
                      uint64_t v240 = (char *)&v121[2 * v237 + 1];
                      uint64_t v241 = (_DWORD *)(v233 + 4 * (v237 + v234));
                      do
                      {
                        *v241++ = *((_DWORD *)v240 - 1);
                        __int32 v242 = *(_DWORD *)v240;
                        v240 += 8;
                        *v239++ = v242;
                        --v238;
                      }
                      while (v238);
                      goto LABEL_221;
                    }
LABEL_204:
                    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<float,int> *>,std::__wrap_iter<std::pair<float,int> *>>(v185, &v121[2 * a2], v122, (uint64_t)&v330);
                    goto LABEL_205;
                  }
                  if (v38 >> 61) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  std::string::size_type v121 = (float *)operator new(8 * v38);
                  uint64_t v327 = v121;
                  unint64_t v329 = (char *)&v121[2 * v38];
                  bzero(v121, 8 * v38);
                  uint64_t v122 = (uint64_t)&v121[2 * v38];
                  uint64_t v328 = (float *)v122;
                  unint64_t v123 = (uint64_t)(8 * v38) >> 3;
                  if (v123 <= 1) {
                    unint64_t v123 = 1;
                  }
                  if (v123 >= 8
                    && ((unint64_t)v121 < v36 + 4 * v123
                      ? (_CF = v36 >= (unint64_t)&v121[2 * v123 - 1])
                      : (_CF = 1),
                        _CF))
                  {
                    unint64_t v125 = v123 & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v126 = v121 + 8;
                    int32x4_t v127 = (int32x4_t)xmmword_192DAF430;
                    uint64_t v128 = (float32x4_t *)(v36 + 16);
                    v129.i64[0] = 0x400000004;
                    v129.i64[1] = 0x400000004;
                    v130.i64[0] = 0x800000008;
                    v130.i64[1] = 0x800000008;
                    unint64_t v131 = v123 & 0xFFFFFFFFFFFFFFF8;
                    do
                    {
                      v342.val[1] = (float32x4_t)vaddq_s32(v127, v129);
                      float32x4_t v132 = v128[-1];
                      v342.val[0] = *v128;
                      uint64_t v133 = v126 - 8;
                      vst2q_f32(v133, *(float32x4x2_t *)(&v127 - 1));
                      vst2q_f32(v126, v342);
                      int32x4_t v127 = vaddq_s32(v127, v130);
                      v126 += 16;
                      v128 += 2;
                      v131 -= 8;
                    }
                    while (v131);
                    if (v123 == v125)
                    {
LABEL_172:
                      uint64_t v185 = v121;
                      if (!a2) {
                        goto LABEL_205;
                      }
                      goto LABEL_204;
                    }
                  }
                  else
                  {
                    unint64_t v125 = 0;
                  }
                  uint64_t v184 = (char *)&v121[2 * v125 + 1];
                  do
                  {
                    *((_DWORD *)v184 - 1) = *(_DWORD *)(v36 + 4 * v125);
                    *(_DWORD *)uint64_t v184 = v125;
                    v184 += 8;
                    ++v125;
                  }
                  while (v123 != v125);
                  goto LABEL_172;
                }
              }
              else
              {
                unint64_t v38 = 1;
                double v39 = (char *)v301;
              }
              do
              {
                uint64_t v120 = *(void *)v39;
                v39 += 8;
                v38 *= v120;
              }
              while (v39 != v302);
              goto LABEL_98;
            }
          }
          else
          {
            unint64_t v22 = 0;
            uint64_t v23 = 0;
          }
          unint64_t v29 = v21 - v22;
          uint64_t v30 = 8 * v22;
          unsigned __int8 v31 = (uint64_t *)((char *)v303 + v30);
          unint64_t v32 = (uint64_t *)((char *)v301 + v30);
          do
          {
            uint64_t v33 = *v32++;
            uint64_t v34 = v33 - 1;
            uint64_t v35 = *v31++;
            v23 += v35 * v34;
            --v29;
          }
          while (v29);
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v7 = 1;
        unint64_t v8 = (char *)v301;
      }
      do
      {
        uint64_t v20 = *(void *)v8;
        v8 += 8;
        v7 *= v20;
      }
      while (v8 != v302);
      goto LABEL_26;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v305, (uint64_t)a1);
      if (v309) {
        goto LABEL_226;
      }
      uint64_t v9 = v307 - (unsigned char *)v306;
      if (v307 == v306) {
        goto LABEL_227;
      }
      uint64_t v10 = v305;
      if (!v305) {
        goto LABEL_44;
      }
      if ((unint64_t)(v9 - 8) >= 8)
      {
        unint64_t v40 = ((unint64_t)(v9 - 8) >> 3) + 1;
        double v11 = (char *)v306 + 8 * (v40 & 0x3FFFFFFFFFFFFFFELL);
        uint64_t v41 = (char *)v306 + 8;
        uint64_t v42 = 1;
        uint64_t v43 = v40 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v44 = 1;
        do
        {
          v42 *= *(v41 - 1);
          v44 *= *v41;
          v41 += 2;
          v43 -= 2;
        }
        while (v43);
        uint64_t v10 = v44 * v42;
        if (v40 == (v40 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_44:
          unint64_t v46 = v9 >> 3;
          if ((unint64_t)(v9 >> 3) <= 1) {
            unint64_t v46 = 1;
          }
          if (v46 >= 2)
          {
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            unint64_t v47 = v46 & 0xFFFFFFFFFFFFFFFELL;
            uint64_t v51 = (char *)v306 + 8;
            uint64_t v52 = (char *)v308 + 8;
            unint64_t v53 = v46 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v49 += *(v52 - 1) * (*(v51 - 1) - 1);
              v50 += *v52 * (*v51 - 1);
              v51 += 2;
              v52 += 2;
              v53 -= 2;
            }
            while (v53);
            uint64_t v48 = v50 + v49;
            if (v46 == v47)
            {
LABEL_53:
              if (v10 != v48 + 1) {
LABEL_226:
              }
                nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
              if (v307 == v306 || (long long v61 = (float16x8_t *)v305) == 0)
              {
LABEL_227:
                uint64_t v188 = 0;
                uint64_t v141 = 0;
                unint64_t v140 = 0;
                uint64_t v327 = 0;
                uint64_t v328 = 0;
                unint64_t v329 = 0;
                if (!a2) {
                  goto LABEL_229;
                }
                goto LABEL_228;
              }
              unint64_t v62 = v307 - (unsigned char *)v306 - 8;
              if (v62 >= 8)
              {
                uint64_t v134 = (v62 >> 3) + 1;
                uint64_t v64 = (char *)v306 + 8 * (v134 & 0x3FFFFFFFFFFFFFFELL);
                unint64_t v135 = (char *)v306 + 8;
                uint64_t v136 = 1;
                uint64_t v137 = v134 & 0x3FFFFFFFFFFFFFFELL;
                uint64_t v138 = 1;
                do
                {
                  v136 *= *(v135 - 1);
                  v138 *= *v135;
                  v135 += 2;
                  v137 -= 2;
                }
                while (v137);
                unint64_t v63 = v138 * v136;
                if (v134 == (v134 & 0x3FFFFFFFFFFFFFFELL))
                {
LABEL_116:
                  uint64_t v327 = 0;
                  uint64_t v328 = 0;
                  unint64_t v329 = 0;
                  if (!v63)
                  {
                    uint64_t v188 = 0;
                    uint64_t v141 = 0;
                    unint64_t v140 = 0;
                    if (!a2) {
                      goto LABEL_229;
                    }
                    goto LABEL_228;
                  }
                  if (v63 >> 61) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v140 = (float *)operator new(8 * v63);
                  uint64_t v327 = v140;
                  unint64_t v329 = (char *)&v140[2 * v63];
                  bzero(v140, 8 * v63);
                  uint64_t v141 = (uint64_t)&v140[2 * v63];
                  uint64_t v328 = (float *)v141;
                  unint64_t v142 = (uint64_t)(8 * v63) >> 3;
                  if (v142 <= 1) {
                    unint64_t v142 = 1;
                  }
                  if (v142 >= 0x10)
                  {
                    unint64_t v143 = v142 & 0xFFFFFFFFFFFFFFF0;
                    unint64_t v189 = v140 + 16;
                    int32x4_t v190 = (int32x4_t)xmmword_192DC8DD0;
                    int32x4_t v191 = (int32x4_t)xmmword_192DAF430;
                    uint64_t v192 = v61 + 1;
                    v193.i64[0] = 0x800000008;
                    v193.i64[1] = 0x800000008;
                    v194.i64[0] = 0x1000000010;
                    v194.i64[1] = 0x1000000010;
                    unint64_t v195 = v142 & 0xFFFFFFFFFFFFFFF0;
                    do
                    {
                      v344.val[1] = (float32x4_t)vaddq_s32(v190, v193);
                      v345.val[1] = (float32x4_t)vaddq_s32(v191, v193);
                      float16x8_t v196 = v192[-1];
                      float16x8_t v197 = *v192;
                      float32x4_t v198 = vcvt_hight_f32_f16(v196);
                      float32x4_t v199 = vcvtq_f32_f16(*(float16x4_t *)v196.i8);
                      uint64_t v200 = v189 - 16;
                      vst2q_f32(v200, *(float32x4x2_t *)(&v191 - 1));
                      v345.val[0] = vcvtq_f32_f16(*(float16x4_t *)v197.i8);
                      uint64_t v201 = v189 - 8;
                      vst2q_f32(v201, *(float32x4x2_t *)(&v190 - 1));
                      uint64_t v202 = v189 + 32;
                      vst2q_f32(v189, v345);
                      uint64_t v203 = v189 + 8;
                      v344.val[0] = vcvt_hight_f32_f16(v197);
                      vst2q_f32(v203, v344);
                      int32x4_t v191 = vaddq_s32(v191, v194);
                      int32x4_t v190 = vaddq_s32(v190, v194);
                      v192 += 2;
                      unint64_t v189 = v202;
                      v195 -= 16;
                    }
                    while (v195);
                    if (v142 == v143)
                    {
LABEL_192:
                      uint64_t v188 = v140;
                      if (!a2)
                      {
LABEL_229:
                        v325[0] = 0;
                        v325[1] = 0;
                        uint64_t v326 = 0;
                        unint64_t v248 = (uint64_t *)operator new(8uLL);
                        uint64_t v330 = v248;
                        uint64_t *v248 = a2;
                        uint64_t v331 = v248 + 1;
                        uint64_t v332 = v248 + 1;
                        nitro::ndarray<half>::init_from_shape(&v330, &v323);
                        if (v330)
                        {
                          uint64_t v331 = v330;
                          operator delete(v330);
                        }
                        uint64_t v321 = 0;
                        uint64_t v322 = 0;
                        uint64_t v320 = 0;
                        if (v328 == v140)
                        {
                          uint64_t v250 = 0;
                          if (!a2) {
                            goto LABEL_246;
                          }
                        }
                        else
                        {
                          unint64_t v249 = (char *)v328 - (char *)v188;
                          if ((char *)v328 - (char *)v188 < 0) {
                            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                          }
                          uint64_t v250 = (float32x4_t *)operator new(v249 >> 1);
                          uint64_t v320 = v250;
                          uint64_t v322 = &v250->i8[4 * ((uint64_t)v249 >> 3)];
                          bzero(v250, v249 >> 1);
                          uint64_t v321 = (char *)v250 + (v249 >> 1);
                          if (!a2)
                          {
LABEL_246:
                            uint64_t v333 = 0;
                            LOBYTE(v334) = 9;
                            operator new();
                          }
                        }
                        uint64_t v251 = v323;
                        uint64_t v252 = v324;
                        if ((unint64_t)a2 <= 1) {
                          unint64_t v253 = 1;
                        }
                        else {
                          unint64_t v253 = a2;
                        }
                        if (v253 >= 8)
                        {
                          unint64_t v254 = v253 & 0xFFFFFFFFFFFFFFF8;
                          uint64_t v255 = (float16x8_t *)(v323 + 2 * v324);
                          unint64_t v256 = v253 & 0xFFFFFFFFFFFFFFF8;
                          unint64_t v257 = v250;
                          uint64_t v258 = v140;
                          do
                          {
                            uint64_t v259 = v258;
                            float32x4x2_t v337 = vld2q_f32(v259);
                            v259 += 8;
                            float32x4x2_t v340 = vld2q_f32(v259);
                            *v255++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v337.val[0]), v340.val[0]);
                            float32x4_t *v257 = v337.val[1];
                            v257[1] = v340.val[1];
                            v257 += 2;
                            v258 += 16;
                            v256 -= 8;
                          }
                          while (v256);
                          if (v253 == v254) {
                            goto LABEL_246;
                          }
                        }
                        else
                        {
                          unint64_t v254 = 0;
                        }
                        unint64_t v260 = v253 - v254;
                        uint64_t v261 = &v250->i32[v254];
                        uint64_t v262 = &v140[2 * v254 + 1];
                        unint64_t v263 = (_WORD *)(v251 + 2 * (v254 + v252));
                        do
                        {
                          _S0 = *((_DWORD *)v262 - 1);
                          __asm { FCVT            H0, S0 }
                          *v263++ = _S0;
                          __int32 v265 = *(_DWORD *)v262;
                          v262 += 2;
                          *v261++ = v265;
                          --v260;
                        }
                        while (v260);
                        goto LABEL_246;
                      }
LABEL_228:
                      std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<float,int> *>,std::__wrap_iter<std::pair<float,int> *>>(v188, &v140[2 * a2], v141, (uint64_t)&v330);
                      goto LABEL_229;
                    }
                  }
                  else
                  {
                    unint64_t v143 = 0;
                  }
                  uint64_t v204 = &v140[2 * v143 + 1];
                  do
                  {
                    _H0 = v61->i16[v143];
                    __asm { FCVT            S0, H0 }
                    *((_DWORD *)v204 - 1) = _S0;
                    *(_DWORD *)uint64_t v204 = v143;
                    v204 += 2;
                    ++v143;
                  }
                  while (v142 != v143);
                  goto LABEL_192;
                }
              }
              else
              {
                unint64_t v63 = 1;
                uint64_t v64 = (char *)v306;
              }
              do
              {
                uint64_t v139 = *(void *)v64;
                v64 += 8;
                v63 *= v139;
              }
              while (v64 != v307);
              goto LABEL_116;
            }
          }
          else
          {
            unint64_t v47 = 0;
            uint64_t v48 = 0;
          }
          unint64_t v54 = v46 - v47;
          uint64_t v55 = 8 * v47;
          int64_t v56 = (uint64_t *)((char *)v308 + v55);
          uint64_t v57 = (uint64_t *)((char *)v306 + v55);
          do
          {
            uint64_t v58 = *v57++;
            uint64_t v59 = v58 - 1;
            uint64_t v60 = *v56++;
            v48 += v60 * v59;
            --v54;
          }
          while (v54);
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t v10 = 1;
        double v11 = (char *)v306;
      }
      do
      {
        uint64_t v45 = *(void *)v11;
        v11 += 8;
        v10 *= v45;
      }
      while (v11 != v307);
      goto LABEL_44;
    default:
      printf("%d\n", *a1);
      nitro::ndarray_container::visit<nitro::nitro_builtins::TopK_1d(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::TopK_1d(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
}

void sub_192660020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::TopK(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(_DWORD *a1, uint64_t a2)
{
  uint64_t v227 = *MEMORY[0x1E4F143B8];
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v198, (uint64_t)a1);
      if (v202) {
        goto LABEL_157;
      }
      uint64_t v3 = (char *)v200 - (unsigned char *)v199;
      if (v200 == v199) {
        goto LABEL_135;
      }
      uint64_t v4 = v198;
      if (!v198) {
        goto LABEL_125;
      }
      if ((unint64_t)(v3 - 8) >= 8)
      {
        unint64_t v144 = ((unint64_t)(v3 - 8) >> 3) + 1;
        long long v5 = (uint64_t *)((char *)v199 + 8 * (v144 & 0x3FFFFFFFFFFFFFFELL));
        unint64_t v145 = (char *)v199 + 8;
        uint64_t v146 = 1;
        uint64_t v147 = v144 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v148 = 1;
        do
        {
          v146 *= *(v145 - 1);
          v148 *= *v145;
          v145 += 2;
          v147 -= 2;
        }
        while (v147);
        uint64_t v4 = v148 * v146;
        if (v144 == (v144 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_125:
          unint64_t v150 = v3 >> 3;
          if ((unint64_t)(v3 >> 3) <= 1) {
            unint64_t v150 = 1;
          }
          if (v150 >= 2)
          {
            uint64_t v153 = 0;
            uint64_t v154 = 0;
            unint64_t v151 = v150 & 0xFFFFFFFFFFFFFFFELL;
            uint64_t v155 = (char *)v199 + 8;
            uint64_t v156 = (char *)v201 + 8;
            unint64_t v157 = v150 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v153 += *(v156 - 1) * (*(v155 - 1) - 1);
              v154 += *v156 * (*v155 - 1);
              v155 += 2;
              v156 += 2;
              v157 -= 2;
            }
            while (v157);
            uint64_t v152 = v154 + v153;
            if (v150 == v151)
            {
LABEL_134:
              if (v4 != v152 + 1) {
LABEL_157:
              }
                nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
LABEL_135:
              uint64_t v221 = 0;
              uint64_t v222 = 0;
              uint64_t v223 = 0;
              uint64_t v218 = 0;
              uint64_t v219 = 0;
              uint64_t v220 = 0;
              unint64_t v215 = 0;
              int8x16_t v216 = 0;
              float32x4_t v217 = 0;
              uint64_t v166 = *(unsigned char **)(a2 + 24);
              unint64_t v165 = *(unsigned char **)(a2 + 32);
              int64_t v167 = v165 - v166;
              if (v165 == v166)
              {
                uint64_t v168 = 0;
                uint64_t v169 = 0;
              }
              else
              {
                if (v167 < 0) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v168 = operator new(v165 - v166);
                unint64_t v215 = v168;
                int8x16_t v216 = v168;
                uint64_t v169 = (char *)&v168[v167 >> 3];
                float32x4_t v217 = v169;
                memcpy(v168, v166, v167);
                int8x16_t v216 = v169;
              }
              uint64_t v170 = (v169 - (char *)v168) >> 3;
              uint64_t v171 = v170 - 1;
              if (v170 == 1)
              {
LABEL_149:
                uint64_t v181 = v168[v171];
                float32x4_t v182 = (const void *)v198;
                int32x4_t v209 = 0;
                int32x4_t v210 = 0;
                unint64_t v208 = 0;
                if (v181)
                {
                  if (v181 < 0) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v183 = (char *)operator new(4 * v181);
                  uint64_t v184 = v182;
                  unint64_t v208 = v183;
                  int32x4_t v209 = v183;
                  uint64_t v185 = &v183[4 * v181];
                  int32x4_t v210 = v185;
                  memcpy(v183, v184, 4 * v181);
                  int32x4_t v209 = v185;
                }
                uint64_t v186 = operator new(8uLL);
                int32x4_t v224 = v186;
                *uint64_t v186 = v181;
                unint64_t v225 = v186 + 1;
                uint64_t v226 = v186 + 1;
                int32x4_t v211 = 0;
                uint64_t v212 = 0;
                uint64_t v213 = 0;
                nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&__src);
              }
              if (v170 == 2)
              {
                unint64_t v172 = 0;
                uint64_t v173 = 1;
              }
              else
              {
                unint64_t v172 = v171 & 0xFFFFFFFFFFFFFFFELL;
                unint64_t v174 = v168 + 1;
                uint64_t v175 = 1;
                unint64_t v176 = v171 & 0xFFFFFFFFFFFFFFFELL;
                uint64_t v177 = 1;
                do
                {
                  v175 *= *(v174 - 1);
                  v177 *= *v174;
                  v174 += 2;
                  v176 -= 2;
                }
                while (v176);
                uint64_t v173 = v177 * v175;
                if (v171 == v172)
                {
LABEL_148:
                  if (!v173)
                  {
                    v168[v171] = *(int *)(a2 + 80);
                    int32x4_t v211 = 0;
                    uint64_t v212 = 0;
                    uint64_t v213 = 0;
                    nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&__src);
                  }
                  goto LABEL_149;
                }
              }
              unint64_t v178 = ~v172 + v170;
              int32x4_t v179 = &v168[v172];
              do
              {
                uint64_t v180 = *v179++;
                v173 *= v180;
                --v178;
              }
              while (v178);
              goto LABEL_148;
            }
          }
          else
          {
            unint64_t v151 = 0;
            uint64_t v152 = 0;
          }
          unint64_t v158 = v150 - v151;
          uint64_t v159 = 8 * v151;
          BOOL v160 = (uint64_t *)((char *)v201 + v159);
          unint64_t v161 = (uint64_t *)((char *)v199 + v159);
          do
          {
            uint64_t v162 = *v161++;
            uint64_t v163 = v162 - 1;
            uint64_t v164 = *v160++;
            v152 += v164 * v163;
            --v158;
          }
          while (v158);
          goto LABEL_134;
        }
      }
      else
      {
        uint64_t v4 = 1;
        long long v5 = (uint64_t *)v199;
      }
      do
      {
        uint64_t v149 = *v5++;
        v4 *= v149;
      }
      while (v5 != v200);
      goto LABEL_125;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v203, (uint64_t)a1);
      if (v207) {
        goto LABEL_156;
      }
      uint64_t v12 = (char *)v205 - (unsigned char *)v204;
      if (v205 == v204) {
        goto LABEL_102;
      }
      uint64_t v13 = v203;
      if (!v203) {
        goto LABEL_92;
      }
      if ((unint64_t)(v12 - 8) >= 8)
      {
        unint64_t v101 = ((unint64_t)(v12 - 8) >> 3) + 1;
        size_t v14 = (uint64_t *)((char *)v204 + 8 * (v101 & 0x3FFFFFFFFFFFFFFELL));
        long long v102 = (char *)v204 + 8;
        uint64_t v103 = 1;
        uint64_t v104 = v101 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v105 = 1;
        do
        {
          v103 *= *(v102 - 1);
          v105 *= *v102;
          v102 += 2;
          v104 -= 2;
        }
        while (v104);
        uint64_t v13 = v105 * v103;
        if (v101 == (v101 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_92:
          unint64_t v107 = v12 >> 3;
          if ((unint64_t)(v12 >> 3) <= 1) {
            unint64_t v107 = 1;
          }
          if (v107 >= 2)
          {
            uint64_t v110 = 0;
            uint64_t v111 = 0;
            unint64_t v108 = v107 & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v112 = (char *)v204 + 8;
            unint64_t v113 = (char *)v206 + 8;
            unint64_t v114 = v107 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v110 += *(v113 - 1) * (*(v112 - 1) - 1);
              v111 += *v113 * (*v112 - 1);
              v112 += 2;
              v113 += 2;
              v114 -= 2;
            }
            while (v114);
            uint64_t v109 = v111 + v110;
            if (v107 == v108)
            {
LABEL_101:
              if (v13 != v109 + 1) {
LABEL_156:
              }
                nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
LABEL_102:
              uint64_t v221 = 0;
              uint64_t v222 = 0;
              uint64_t v223 = 0;
              uint64_t v218 = 0;
              uint64_t v219 = 0;
              uint64_t v220 = 0;
              unint64_t v215 = 0;
              int8x16_t v216 = 0;
              float32x4_t v217 = 0;
              unint64_t v123 = *(unsigned char **)(a2 + 24);
              uint64_t v122 = *(unsigned char **)(a2 + 32);
              int64_t v124 = v122 - v123;
              if (v122 == v123)
              {
                unint64_t v125 = 0;
                unint64_t v126 = 0;
              }
              else
              {
                if (v124 < 0) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v125 = operator new(v122 - v123);
                unint64_t v215 = v125;
                int8x16_t v216 = v125;
                unint64_t v126 = (char *)&v125[v124 >> 3];
                float32x4_t v217 = v126;
                memcpy(v125, v123, v124);
                int8x16_t v216 = v126;
              }
              uint64_t v127 = (v126 - (char *)v125) >> 3;
              uint64_t v128 = v127 - 1;
              if (v127 == 1)
              {
LABEL_116:
                size_t v138 = v125[v128];
                uint64_t v139 = (const void *)v203;
                int32x4_t v209 = 0;
                int32x4_t v210 = 0;
                unint64_t v208 = 0;
                if (v138)
                {
                  if ((v138 & 0x8000000000000000) != 0) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v140 = (char *)operator new(v138);
                  uint64_t v141 = v139;
                  unint64_t v208 = v140;
                  int32x4_t v209 = v140;
                  unint64_t v142 = &v140[v138];
                  int32x4_t v210 = &v140[v138];
                  memcpy(v140, v141, v138);
                  int32x4_t v209 = v142;
                }
                unint64_t v143 = operator new(8uLL);
                int32x4_t v224 = v143;
                *unint64_t v143 = v138;
                unint64_t v225 = v143 + 1;
                uint64_t v226 = v143 + 1;
                int32x4_t v211 = 0;
                uint64_t v212 = 0;
                uint64_t v213 = 0;
                nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&__src);
              }
              if (v127 == 2)
              {
                unint64_t v129 = 0;
                uint64_t v130 = 1;
              }
              else
              {
                unint64_t v129 = v128 & 0xFFFFFFFFFFFFFFFELL;
                unint64_t v131 = v125 + 1;
                uint64_t v132 = 1;
                unint64_t v133 = v128 & 0xFFFFFFFFFFFFFFFELL;
                uint64_t v134 = 1;
                do
                {
                  v132 *= *(v131 - 1);
                  v134 *= *v131;
                  v131 += 2;
                  v133 -= 2;
                }
                while (v133);
                uint64_t v130 = v134 * v132;
                if (v128 == v129)
                {
LABEL_115:
                  if (!v130)
                  {
                    v125[v128] = *(int *)(a2 + 80);
                    int32x4_t v211 = 0;
                    uint64_t v212 = 0;
                    uint64_t v213 = 0;
                    nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&__src);
                  }
                  goto LABEL_116;
                }
              }
              unint64_t v135 = ~v129 + v127;
              uint64_t v136 = &v125[v129];
              do
              {
                uint64_t v137 = *v136++;
                v130 *= v137;
                --v135;
              }
              while (v135);
              goto LABEL_115;
            }
          }
          else
          {
            unint64_t v108 = 0;
            uint64_t v109 = 0;
          }
          unint64_t v115 = v107 - v108;
          uint64_t v116 = 8 * v108;
          uint64_t v117 = (uint64_t *)((char *)v206 + v116);
          uint64_t v118 = (uint64_t *)((char *)v204 + v116);
          do
          {
            uint64_t v119 = *v118++;
            uint64_t v120 = v119 - 1;
            uint64_t v121 = *v117++;
            v109 += v121 * v120;
            --v115;
          }
          while (v115);
          goto LABEL_101;
        }
      }
      else
      {
        uint64_t v13 = 1;
        size_t v14 = (uint64_t *)v204;
      }
      do
      {
        uint64_t v106 = *v14++;
        v13 *= v106;
      }
      while (v14 != v205);
      goto LABEL_92;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v188, (uint64_t)a1);
      if (v192) {
        goto LABEL_154;
      }
      uint64_t v6 = (char *)v190 - (unsigned char *)v189;
      if (v190 == v189) {
        goto LABEL_36;
      }
      uint64_t v7 = v188;
      if (!v188) {
        goto LABEL_26;
      }
      if ((unint64_t)(v6 - 8) >= 8)
      {
        unint64_t v15 = ((unint64_t)(v6 - 8) >> 3) + 1;
        unint64_t v8 = (uint64_t *)((char *)v189 + 8 * (v15 & 0x3FFFFFFFFFFFFFFELL));
        uint64_t v16 = (char *)v189 + 8;
        uint64_t v17 = 1;
        uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v19 = 1;
        do
        {
          v17 *= *(v16 - 1);
          v19 *= *v16;
          v16 += 2;
          v18 -= 2;
        }
        while (v18);
        uint64_t v7 = v19 * v17;
        if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_26:
          unint64_t v21 = v6 >> 3;
          if ((unint64_t)(v6 >> 3) <= 1) {
            unint64_t v21 = 1;
          }
          if (v21 >= 2)
          {
            uint64_t v24 = 0;
            uint64_t v25 = 0;
            unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
            double v26 = (char *)v189 + 8;
            uint64_t v27 = (char *)v191 + 8;
            unint64_t v28 = v21 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v24 += *(v27 - 1) * (*(v26 - 1) - 1);
              v25 += *v27 * (*v26 - 1);
              v26 += 2;
              v27 += 2;
              v28 -= 2;
            }
            while (v28);
            uint64_t v23 = v25 + v24;
            if (v21 == v22)
            {
LABEL_35:
              if (v7 != v23 + 1) {
LABEL_154:
              }
                nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
LABEL_36:
              uint64_t v221 = 0;
              uint64_t v222 = 0;
              uint64_t v223 = 0;
              uint64_t v218 = 0;
              uint64_t v219 = 0;
              uint64_t v220 = 0;
              unint64_t v215 = 0;
              int8x16_t v216 = 0;
              float32x4_t v217 = 0;
              unint64_t v37 = *(unsigned char **)(a2 + 24);
              unint64_t v36 = *(unsigned char **)(a2 + 32);
              int64_t v38 = v36 - v37;
              if (v36 == v37)
              {
                double v39 = 0;
                unint64_t v40 = 0;
              }
              else
              {
                if (v38 < 0) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                double v39 = operator new(v36 - v37);
                unint64_t v215 = v39;
                int8x16_t v216 = v39;
                unint64_t v40 = (char *)&v39[v38 >> 3];
                float32x4_t v217 = v40;
                memcpy(v39, v37, v38);
                int8x16_t v216 = v40;
              }
              uint64_t v41 = (v40 - (char *)v39) >> 3;
              uint64_t v42 = v41 - 1;
              if (v41 == 1)
              {
LABEL_50:
                uint64_t v52 = v39[v42];
                unint64_t v53 = (const void *)v188;
                int32x4_t v209 = 0;
                int32x4_t v210 = 0;
                unint64_t v208 = 0;
                if (v52)
                {
                  if (v52 < 0) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v54 = (char *)operator new(4 * v52);
                  uint64_t v55 = v53;
                  unint64_t v208 = v54;
                  int32x4_t v209 = v54;
                  int64_t v56 = &v54[4 * v52];
                  int32x4_t v210 = v56;
                  memcpy(v54, v55, 4 * v52);
                  int32x4_t v209 = v56;
                }
                uint64_t v57 = operator new(8uLL);
                int32x4_t v224 = v57;
                void *v57 = v52;
                unint64_t v225 = v57 + 1;
                uint64_t v226 = v57 + 1;
                int32x4_t v211 = 0;
                uint64_t v212 = 0;
                uint64_t v213 = 0;
                nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__src);
              }
              if (v41 == 2)
              {
                unint64_t v43 = 0;
                uint64_t v44 = 1;
              }
              else
              {
                unint64_t v43 = v42 & 0xFFFFFFFFFFFFFFFELL;
                uint64_t v45 = v39 + 1;
                uint64_t v46 = 1;
                unint64_t v47 = v42 & 0xFFFFFFFFFFFFFFFELL;
                uint64_t v48 = 1;
                do
                {
                  v46 *= *(v45 - 1);
                  v48 *= *v45;
                  v45 += 2;
                  v47 -= 2;
                }
                while (v47);
                uint64_t v44 = v48 * v46;
                if (v42 == v43)
                {
LABEL_49:
                  if (!v44)
                  {
                    v39[v42] = *(int *)(a2 + 80);
                    int32x4_t v211 = 0;
                    uint64_t v212 = 0;
                    uint64_t v213 = 0;
                    nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__src);
                  }
                  goto LABEL_50;
                }
              }
              unint64_t v49 = ~v43 + v41;
              uint64_t v50 = &v39[v43];
              do
              {
                uint64_t v51 = *v50++;
                v44 *= v51;
                --v49;
              }
              while (v49);
              goto LABEL_49;
            }
          }
          else
          {
            unint64_t v22 = 0;
            uint64_t v23 = 0;
          }
          unint64_t v29 = v21 - v22;
          uint64_t v30 = 8 * v22;
          unsigned __int8 v31 = (uint64_t *)((char *)v191 + v30);
          unint64_t v32 = (uint64_t *)((char *)v189 + v30);
          do
          {
            uint64_t v33 = *v32++;
            uint64_t v34 = v33 - 1;
            uint64_t v35 = *v31++;
            v23 += v35 * v34;
            --v29;
          }
          while (v29);
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v7 = 1;
        unint64_t v8 = (uint64_t *)v189;
      }
      do
      {
        uint64_t v20 = *v8++;
        v7 *= v20;
      }
      while (v8 != v190);
      goto LABEL_26;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v193, (uint64_t)a1);
      if (v197) {
        goto LABEL_155;
      }
      uint64_t v9 = (char *)v195 - (unsigned char *)v194;
      if (v195 == v194) {
        goto LABEL_69;
      }
      uint64_t v10 = v193;
      if (!v193) {
        goto LABEL_59;
      }
      if ((unint64_t)(v9 - 8) >= 8)
      {
        unint64_t v58 = ((unint64_t)(v9 - 8) >> 3) + 1;
        double v11 = (uint64_t *)((char *)v194 + 8 * (v58 & 0x3FFFFFFFFFFFFFFELL));
        uint64_t v59 = (char *)v194 + 8;
        uint64_t v60 = 1;
        uint64_t v61 = v58 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v62 = 1;
        do
        {
          v60 *= *(v59 - 1);
          v62 *= *v59;
          v59 += 2;
          v61 -= 2;
        }
        while (v61);
        uint64_t v10 = v62 * v60;
        if (v58 == (v58 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_59:
          unint64_t v64 = v9 >> 3;
          if ((unint64_t)(v9 >> 3) <= 1) {
            unint64_t v64 = 1;
          }
          if (v64 >= 2)
          {
            uint64_t v67 = 0;
            uint64_t v68 = 0;
            unint64_t v65 = v64 & 0xFFFFFFFFFFFFFFFELL;
            uint64_t v69 = (char *)v194 + 8;
            uint64_t v70 = (char *)v196 + 8;
            unint64_t v71 = v64 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v67 += *(v70 - 1) * (*(v69 - 1) - 1);
              v68 += *v70 * (*v69 - 1);
              v69 += 2;
              v70 += 2;
              v71 -= 2;
            }
            while (v71);
            uint64_t v66 = v68 + v67;
            if (v64 == v65)
            {
LABEL_68:
              if (v10 != v66 + 1) {
LABEL_155:
              }
                nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
LABEL_69:
              uint64_t v221 = 0;
              uint64_t v222 = 0;
              uint64_t v223 = 0;
              uint64_t v218 = 0;
              uint64_t v219 = 0;
              uint64_t v220 = 0;
              unint64_t v215 = 0;
              int8x16_t v216 = 0;
              float32x4_t v217 = 0;
              uint64_t v80 = *(unsigned char **)(a2 + 24);
              unint64_t v79 = *(unsigned char **)(a2 + 32);
              int64_t v81 = v79 - v80;
              if (v79 == v80)
              {
                uint64_t v82 = 0;
                uint64_t v83 = 0;
              }
              else
              {
                if (v81 < 0) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v82 = operator new(v79 - v80);
                unint64_t v215 = v82;
                int8x16_t v216 = v82;
                uint64_t v83 = (char *)&v82[v81 >> 3];
                float32x4_t v217 = v83;
                memcpy(v82, v80, v81);
                int8x16_t v216 = v83;
              }
              uint64_t v84 = (v83 - (char *)v82) >> 3;
              uint64_t v85 = v84 - 1;
              if (v84 == 1)
              {
LABEL_83:
                uint64_t v95 = v82[v85];
                unint64_t v96 = (const void *)v193;
                int32x4_t v209 = 0;
                int32x4_t v210 = 0;
                unint64_t v208 = 0;
                if (v95)
                {
                  if (v95 < 0) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v97 = (char *)operator new(2 * v95);
                  uint64_t v98 = v96;
                  unint64_t v208 = v97;
                  int32x4_t v209 = v97;
                  uint64_t v99 = &v97[2 * v95];
                  int32x4_t v210 = v99;
                  memcpy(v97, v98, 2 * v95);
                  int32x4_t v209 = v99;
                }
                uint64_t v100 = operator new(8uLL);
                int32x4_t v224 = v100;
                *uint64_t v100 = v95;
                unint64_t v225 = v100 + 1;
                uint64_t v226 = v100 + 1;
                int32x4_t v211 = 0;
                uint64_t v212 = 0;
                uint64_t v213 = 0;
                nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&__src);
              }
              if (v84 == 2)
              {
                unint64_t v86 = 0;
                uint64_t v87 = 1;
              }
              else
              {
                unint64_t v86 = v85 & 0xFFFFFFFFFFFFFFFELL;
                unint64_t v88 = v82 + 1;
                uint64_t v89 = 1;
                unint64_t v90 = v85 & 0xFFFFFFFFFFFFFFFELL;
                uint64_t v91 = 1;
                do
                {
                  v89 *= *(v88 - 1);
                  v91 *= *v88;
                  v88 += 2;
                  v90 -= 2;
                }
                while (v90);
                uint64_t v87 = v91 * v89;
                if (v85 == v86)
                {
LABEL_82:
                  if (!v87)
                  {
                    v82[v85] = *(int *)(a2 + 80);
                    int32x4_t v211 = 0;
                    uint64_t v212 = 0;
                    uint64_t v213 = 0;
                    nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&__src);
                  }
                  goto LABEL_83;
                }
              }
              unint64_t v92 = ~v86 + v84;
              uint64_t v93 = &v82[v86];
              do
              {
                uint64_t v94 = *v93++;
                v87 *= v94;
                --v92;
              }
              while (v92);
              goto LABEL_82;
            }
          }
          else
          {
            unint64_t v65 = 0;
            uint64_t v66 = 0;
          }
          unint64_t v72 = v64 - v65;
          uint64_t v73 = 8 * v65;
          uint64_t v74 = (uint64_t *)((char *)v196 + v73);
          uint64_t v75 = (uint64_t *)((char *)v194 + v73);
          do
          {
            uint64_t v76 = *v75++;
            uint64_t v77 = v76 - 1;
            uint64_t v78 = *v74++;
            v66 += v78 * v77;
            --v72;
          }
          while (v72);
          goto LABEL_68;
        }
      }
      else
      {
        uint64_t v10 = 1;
        double v11 = (uint64_t *)v194;
      }
      do
      {
        uint64_t v63 = *v11++;
        v10 *= v63;
      }
      while (v11 != v195);
      goto LABEL_59;
    default:
      printf("%d\n", *a1);
      nitro::ndarray_container::visit<nitro::nitro_builtins::TopK(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::TopK(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
}

void sub_192666CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
}

uint64_t nitro::nitro_builtins::ReverseSequence(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(_DWORD *a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v1183, (uint64_t)a2);
      v1189 = &v1211;
      nitro::ndarray<int>::ndarray(&v1190, &v1183);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v3 = *(void *)v1192;
          if (v1196) {
            goto LABEL_853;
          }
          uint64_t v4 = v1190;
          uint64_t v5 = v1193 - (unsigned char *)v1192;
          if (v1193 == v1192) {
            goto LABEL_431;
          }
          if (!v1190)
          {
            uint64_t v6 = 0;
            goto LABEL_421;
          }
          if ((unint64_t)(v5 - 8) < 8)
          {
            uint64_t v6 = 1;
            uint64_t v7 = (char *)v1192;
            do
            {
LABEL_420:
              uint64_t v454 = *(void *)v7;
              v7 += 8;
              v6 *= v454;
            }
            while (v7 != v1193);
            goto LABEL_421;
          }
          unint64_t v449 = ((unint64_t)(v5 - 8) >> 3) + 1;
          uint64_t v7 = (char *)v1192 + 8 * (v449 & 0x3FFFFFFFFFFFFFFELL);
          v450 = (char *)v1192 + 8;
          uint64_t v451 = 1;
          uint64_t v452 = v449 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v453 = 1;
          do
          {
            v451 *= *(v450 - 1);
            v453 *= *v450;
            v450 += 2;
            v452 -= 2;
          }
          while (v452);
          uint64_t v6 = v453 * v451;
          if (v449 != (v449 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_420;
          }
LABEL_421:
          unint64_t v455 = v5 >> 3;
          if ((unint64_t)(v5 >> 3) <= 1) {
            unint64_t v455 = 1;
          }
          if (v455 < 2)
          {
            unint64_t v456 = 0;
            uint64_t v457 = 0;
LABEL_428:
            unint64_t v463 = v455 - v456;
            uint64_t v464 = 8 * v456;
            v465 = (uint64_t *)((char *)v1194 + v464);
            v466 = (uint64_t *)((char *)v1192 + v464);
            do
            {
              uint64_t v467 = *v466++;
              uint64_t v468 = v467 - 1;
              uint64_t v469 = *v465++;
              v457 += v469 * v468;
              --v463;
            }
            while (v463);
            goto LABEL_430;
          }
          uint64_t v458 = 0;
          uint64_t v459 = 0;
          unint64_t v456 = v455 & 0xFFFFFFFFFFFFFFFELL;
          v460 = (char *)v1192 + 8;
          v461 = (char *)v1194 + 8;
          unint64_t v462 = v455 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v458 += *(v461 - 1) * (*(v460 - 1) - 1);
            v459 += *v461 * (*v460 - 1);
            v460 += 2;
            v461 += 2;
            v462 -= 2;
          }
          while (v462);
          uint64_t v457 = v459 + v458;
          if (v455 != v456) {
            goto LABEL_428;
          }
LABEL_430:
          if (v6 != v457 + 1) {
LABEL_853:
          }
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_431:
          unint64_t v253 = v1191;
          if (v1191) {
            atomic_fetch_add_explicit(&v1191->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_1040;
          }
          uint64_t v470 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_1041;
          }
          uint64_t v471 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_817;
          }
          if ((unint64_t)(v470 - 8) < 8)
          {
            uint64_t v471 = 1;
            v472 = v1214;
            do
            {
LABEL_816:
              uint64_t v1048 = *(void *)v472;
              v472 += 8;
              v471 *= v1048;
            }
            while (v472 != v1215);
            goto LABEL_817;
          }
          unint64_t v1043 = ((unint64_t)(v470 - 8) >> 3) + 1;
          v472 = &v1214[8 * (v1043 & 0x3FFFFFFFFFFFFFFELL)];
          v1044 = v1214 + 8;
          uint64_t v1045 = 1;
          uint64_t v1046 = v1043 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v1047 = 1;
          do
          {
            v1045 *= *(v1044 - 1);
            v1047 *= *v1044;
            v1044 += 2;
            v1046 -= 2;
          }
          while (v1046);
          uint64_t v471 = v1047 * v1045;
          if (v1043 != (v1043 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_816;
          }
LABEL_817:
          unint64_t v1049 = v470 >> 3;
          if ((unint64_t)(v470 >> 3) <= 1) {
            unint64_t v1049 = 1;
          }
          if (v1049 < 2)
          {
            unint64_t v1050 = 0;
            uint64_t v1051 = 0;
LABEL_824:
            unint64_t v1057 = v1049 - v1050;
            uint64_t v1058 = 8 * v1050;
            v1059 = &v1216[v1058];
            v1060 = &v1214[v1058];
            do
            {
              uint64_t v1061 = *(void *)v1060;
              v1060 += 8;
              uint64_t v1062 = v1061 - 1;
              uint64_t v1063 = *(void *)v1059;
              v1059 += 8;
              v1051 += v1063 * v1062;
              --v1057;
            }
            while (v1057);
            goto LABEL_826;
          }
          uint64_t v1052 = 0;
          uint64_t v1053 = 0;
          unint64_t v1050 = v1049 & 0xFFFFFFFFFFFFFFFELL;
          v1054 = v1214 + 8;
          v1055 = v1216 + 8;
          unint64_t v1056 = v1049 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v1052 += *(v1055 - 1) * (*(v1054 - 1) - 1);
            v1053 += *v1055 * (*v1054 - 1);
            v1054 += 2;
            v1055 += 2;
            v1056 -= 2;
          }
          while (v1056);
          uint64_t v1051 = v1053 + v1052;
          if (v1049 != v1050) {
            goto LABEL_824;
          }
LABEL_826:
          if (v471 != v1051 + 1) {
LABEL_1040:
          }
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v1064 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v1065 = v1064 >> 3;
            if ((unint64_t)(v1064 >> 3) <= 1) {
              unint64_t v1065 = 1;
            }
            if (v1065 >= 2)
            {
              uint64_t v1068 = 0;
              uint64_t v1069 = 0;
              unint64_t v1066 = v1065 & 0xFFFFFFFFFFFFFFFELL;
              v1070 = v1214 + 8;
              v1071 = v1216 + 8;
              unint64_t v1072 = v1065 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v1068 += *(v1071 - 1) * (*(v1070 - 1) - 1);
                v1069 += *v1071 * (*v1070 - 1);
                v1070 += 2;
                v1071 += 2;
                v1072 -= 2;
              }
              while (v1072);
              uint64_t v1067 = v1069 + v1068;
              if (v1065 == v1066) {
                goto LABEL_837;
              }
            }
            else
            {
              unint64_t v1066 = 0;
              uint64_t v1067 = 0;
            }
            unint64_t v1073 = v1065 - v1066;
            uint64_t v1074 = 8 * v1066;
            v1075 = &v1216[v1074];
            v1076 = &v1214[v1074];
            do
            {
              uint64_t v1077 = *(void *)v1076;
              v1076 += 8;
              uint64_t v1078 = v1077 - 1;
              uint64_t v1079 = *(void *)v1075;
              v1075 += 8;
              v1067 += v1079 * v1078;
              --v1073;
            }
            while (v1073);
LABEL_837:
            uint64_t v1080 = v1067 + 1;
            goto LABEL_1042;
          }
LABEL_1041:
          uint64_t v1080 = 0;
LABEL_1042:
          uint64_t v1149 = v1218 + v1080;
          if (v1149)
          {
            unint64_t v1150 = 0;
            uint64_t v1151 = v1212;
            do
            {
              int v1152 = *(_DWORD *)(v4 + 4 * v1150);
              if (*v1151 > v1152) {
                int v1152 = *v1151;
              }
              *v1151++ = v1152;
              unint64_t v1150 = (v1150 + 1) % v3;
              --v1149;
            }
            while (v1149);
          }
          goto LABEL_1047;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v80 = *(void *)v1192;
          if (v1196) {
            goto LABEL_852;
          }
          uint64_t v81 = v1190;
          uint64_t v82 = v1193 - (unsigned char *)v1192;
          if (v1193 == v1192) {
            goto LABEL_410;
          }
          if (!v1190)
          {
            uint64_t v83 = 0;
            goto LABEL_400;
          }
          if ((unint64_t)(v82 - 8) < 8)
          {
            uint64_t v83 = 1;
            uint64_t v84 = (char *)v1192;
            do
            {
LABEL_399:
              uint64_t v430 = *(void *)v84;
              v84 += 8;
              v83 *= v430;
            }
            while (v84 != v1193);
            goto LABEL_400;
          }
          unint64_t v425 = ((unint64_t)(v82 - 8) >> 3) + 1;
          uint64_t v84 = (char *)v1192 + 8 * (v425 & 0x3FFFFFFFFFFFFFFELL);
          v426 = (char *)v1192 + 8;
          uint64_t v427 = 1;
          uint64_t v428 = v425 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v429 = 1;
          do
          {
            v427 *= *(v426 - 1);
            v429 *= *v426;
            v426 += 2;
            v428 -= 2;
          }
          while (v428);
          uint64_t v83 = v429 * v427;
          if (v425 != (v425 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_399;
          }
LABEL_400:
          unint64_t v431 = v82 >> 3;
          if ((unint64_t)(v82 >> 3) <= 1) {
            unint64_t v431 = 1;
          }
          if (v431 < 2)
          {
            unint64_t v432 = 0;
            uint64_t v433 = 0;
LABEL_407:
            unint64_t v439 = v431 - v432;
            uint64_t v440 = 8 * v432;
            v441 = (uint64_t *)((char *)v1194 + v440);
            v442 = (uint64_t *)((char *)v1192 + v440);
            do
            {
              uint64_t v443 = *v442++;
              uint64_t v444 = v443 - 1;
              uint64_t v445 = *v441++;
              v433 += v445 * v444;
              --v439;
            }
            while (v439);
            goto LABEL_409;
          }
          uint64_t v434 = 0;
          uint64_t v435 = 0;
          unint64_t v432 = v431 & 0xFFFFFFFFFFFFFFFELL;
          v436 = (char *)v1192 + 8;
          v437 = (char *)v1194 + 8;
          unint64_t v438 = v431 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v434 += *(v437 - 1) * (*(v436 - 1) - 1);
            v435 += *v437 * (*v436 - 1);
            v436 += 2;
            v437 += 2;
            v438 -= 2;
          }
          while (v438);
          uint64_t v433 = v435 + v434;
          if (v431 != v432) {
            goto LABEL_407;
          }
LABEL_409:
          if (v83 != v433 + 1) {
LABEL_852:
          }
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_410:
          unint64_t v253 = v1191;
          if (v1191) {
            atomic_fetch_add_explicit(&v1191->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_1032;
          }
          uint64_t v446 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_1033;
          }
          uint64_t v447 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_792;
          }
          if ((unint64_t)(v446 - 8) < 8)
          {
            uint64_t v447 = 1;
            v448 = v1214;
            do
            {
LABEL_791:
              uint64_t v1010 = *(void *)v448;
              v448 += 8;
              v447 *= v1010;
            }
            while (v448 != v1215);
            goto LABEL_792;
          }
          unint64_t v1005 = ((unint64_t)(v446 - 8) >> 3) + 1;
          v448 = &v1214[8 * (v1005 & 0x3FFFFFFFFFFFFFFELL)];
          v1006 = v1214 + 8;
          uint64_t v1007 = 1;
          uint64_t v1008 = v1005 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v1009 = 1;
          do
          {
            v1007 *= *(v1006 - 1);
            v1009 *= *v1006;
            v1006 += 2;
            v1008 -= 2;
          }
          while (v1008);
          uint64_t v447 = v1009 * v1007;
          if (v1005 != (v1005 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_791;
          }
LABEL_792:
          unint64_t v1011 = v446 >> 3;
          if ((unint64_t)(v446 >> 3) <= 1) {
            unint64_t v1011 = 1;
          }
          if (v1011 < 2)
          {
            unint64_t v1012 = 0;
            uint64_t v1013 = 0;
LABEL_799:
            unint64_t v1019 = v1011 - v1012;
            uint64_t v1020 = 8 * v1012;
            v1021 = &v1216[v1020];
            v1022 = &v1214[v1020];
            do
            {
              uint64_t v1023 = *(void *)v1022;
              v1022 += 8;
              uint64_t v1024 = v1023 - 1;
              uint64_t v1025 = *(void *)v1021;
              v1021 += 8;
              v1013 += v1025 * v1024;
              --v1019;
            }
            while (v1019);
            goto LABEL_801;
          }
          uint64_t v1014 = 0;
          uint64_t v1015 = 0;
          unint64_t v1012 = v1011 & 0xFFFFFFFFFFFFFFFELL;
          v1016 = v1214 + 8;
          v1017 = v1216 + 8;
          unint64_t v1018 = v1011 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v1014 += *(v1017 - 1) * (*(v1016 - 1) - 1);
            v1015 += *v1017 * (*v1016 - 1);
            v1016 += 2;
            v1017 += 2;
            v1018 -= 2;
          }
          while (v1018);
          uint64_t v1013 = v1015 + v1014;
          if (v1011 != v1012) {
            goto LABEL_799;
          }
LABEL_801:
          if (v447 != v1013 + 1) {
LABEL_1032:
          }
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v1026 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v1027 = v1026 >> 3;
            if ((unint64_t)(v1026 >> 3) <= 1) {
              unint64_t v1027 = 1;
            }
            if (v1027 >= 2)
            {
              uint64_t v1030 = 0;
              uint64_t v1031 = 0;
              unint64_t v1028 = v1027 & 0xFFFFFFFFFFFFFFFELL;
              v1032 = v1214 + 8;
              v1033 = v1216 + 8;
              unint64_t v1034 = v1027 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v1030 += *(v1033 - 1) * (*(v1032 - 1) - 1);
                v1031 += *v1033 * (*v1032 - 1);
                v1032 += 2;
                v1033 += 2;
                v1034 -= 2;
              }
              while (v1034);
              uint64_t v1029 = v1031 + v1030;
              if (v1027 == v1028) {
                goto LABEL_812;
              }
            }
            else
            {
              unint64_t v1028 = 0;
              uint64_t v1029 = 0;
            }
            unint64_t v1035 = v1027 - v1028;
            uint64_t v1036 = 8 * v1028;
            v1037 = &v1216[v1036];
            v1038 = &v1214[v1036];
            do
            {
              uint64_t v1039 = *(void *)v1038;
              v1038 += 8;
              uint64_t v1040 = v1039 - 1;
              uint64_t v1041 = *(void *)v1037;
              v1037 += 8;
              v1029 += v1041 * v1040;
              --v1035;
            }
            while (v1035);
LABEL_812:
            uint64_t v1042 = v1029 + 1;
            goto LABEL_1034;
          }
LABEL_1033:
          uint64_t v1042 = 0;
LABEL_1034:
          if (v1218 + v1042)
          {
            unint64_t v1146 = 0;
            unint64_t v1147 = 0;
            do
            {
              unsigned int v1148 = *(unsigned __int8 *)(v81 + 4 * v1147);
              if (*((unsigned __int8 *)v1212 + v1146) > v1148) {
                LOBYTE(v1148) = *((unsigned char *)v1212 + v1146);
              }
              *((unsigned char *)v1212 + v1146) = v1148;
              unint64_t v1147 = (v1147 + 1) % v80;
              ++v1146;
            }
            while (v1146 < v1218 + v1042);
          }
          goto LABEL_1047;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v49 = *(void *)v1192;
          if (v1196) {
            goto LABEL_844;
          }
          uint64_t v50 = v1190;
          uint64_t v51 = v1193 - (unsigned char *)v1192;
          if (v1193 == v1192) {
            goto LABEL_242;
          }
          if (!v1190)
          {
            uint64_t v52 = 0;
            goto LABEL_232;
          }
          if ((unint64_t)(v51 - 8) < 8)
          {
            uint64_t v52 = 1;
            unint64_t v53 = (char *)v1192;
            do
            {
LABEL_231:
              uint64_t v237 = *(void *)v53;
              v53 += 8;
              v52 *= v237;
            }
            while (v53 != v1193);
            goto LABEL_232;
          }
          unint64_t v232 = ((unint64_t)(v51 - 8) >> 3) + 1;
          unint64_t v53 = (char *)v1192 + 8 * (v232 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v233 = (char *)v1192 + 8;
          uint64_t v234 = 1;
          uint64_t v235 = v232 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v236 = 1;
          do
          {
            v234 *= *(v233 - 1);
            v236 *= *v233;
            v233 += 2;
            v235 -= 2;
          }
          while (v235);
          uint64_t v52 = v236 * v234;
          if (v232 != (v232 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_231;
          }
LABEL_232:
          unint64_t v238 = v51 >> 3;
          if ((unint64_t)(v51 >> 3) <= 1) {
            unint64_t v238 = 1;
          }
          if (v238 < 2)
          {
            unint64_t v239 = 0;
            uint64_t v240 = 0;
LABEL_239:
            unint64_t v246 = v238 - v239;
            uint64_t v247 = 8 * v239;
            unint64_t v248 = (uint64_t *)((char *)v1194 + v247);
            unint64_t v249 = (uint64_t *)((char *)v1192 + v247);
            do
            {
              uint64_t v250 = *v249++;
              uint64_t v251 = v250 - 1;
              uint64_t v252 = *v248++;
              v240 += v252 * v251;
              --v246;
            }
            while (v246);
            goto LABEL_241;
          }
          uint64_t v241 = 0;
          uint64_t v242 = 0;
          unint64_t v239 = v238 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v243 = (char *)v1192 + 8;
          uint64_t v244 = (char *)v1194 + 8;
          unint64_t v245 = v238 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v241 += *(v244 - 1) * (*(v243 - 1) - 1);
            v242 += *v244 * (*v243 - 1);
            v243 += 2;
            v244 += 2;
            v245 -= 2;
          }
          while (v245);
          uint64_t v240 = v242 + v241;
          if (v238 != v239) {
            goto LABEL_239;
          }
LABEL_241:
          if (v52 != v240 + 1) {
LABEL_844:
          }
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_242:
          unint64_t v253 = v1191;
          if (v1191) {
            atomic_fetch_add_explicit(&v1191->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_924;
          }
          uint64_t v254 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_925;
          }
          uint64_t v255 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_592;
          }
          if ((unint64_t)(v254 - 8) < 8)
          {
            uint64_t v255 = 1;
            unint64_t v256 = v1214;
            do
            {
LABEL_591:
              uint64_t v706 = *(void *)v256;
              v256 += 8;
              v255 *= v706;
            }
            while (v256 != v1215);
            goto LABEL_592;
          }
          unint64_t v701 = ((unint64_t)(v254 - 8) >> 3) + 1;
          unint64_t v256 = &v1214[8 * (v701 & 0x3FFFFFFFFFFFFFFELL)];
          v702 = v1214 + 8;
          uint64_t v703 = 1;
          uint64_t v704 = v701 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v705 = 1;
          do
          {
            v703 *= *(v702 - 1);
            v705 *= *v702;
            v702 += 2;
            v704 -= 2;
          }
          while (v704);
          uint64_t v255 = v705 * v703;
          if (v701 != (v701 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_591;
          }
LABEL_592:
          unint64_t v707 = v254 >> 3;
          if ((unint64_t)(v254 >> 3) <= 1) {
            unint64_t v707 = 1;
          }
          if (v707 < 2)
          {
            unint64_t v708 = 0;
            uint64_t v709 = 0;
LABEL_599:
            unint64_t v715 = v707 - v708;
            uint64_t v716 = 8 * v708;
            v717 = &v1216[v716];
            v718 = &v1214[v716];
            do
            {
              uint64_t v719 = *(void *)v718;
              v718 += 8;
              uint64_t v720 = v719 - 1;
              uint64_t v721 = *(void *)v717;
              v717 += 8;
              v709 += v721 * v720;
              --v715;
            }
            while (v715);
            goto LABEL_601;
          }
          uint64_t v710 = 0;
          uint64_t v711 = 0;
          unint64_t v708 = v707 & 0xFFFFFFFFFFFFFFFELL;
          v712 = v1214 + 8;
          v713 = v1216 + 8;
          unint64_t v714 = v707 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v710 += *(v713 - 1) * (*(v712 - 1) - 1);
            v711 += *v713 * (*v712 - 1);
            v712 += 2;
            v713 += 2;
            v714 -= 2;
          }
          while (v714);
          uint64_t v709 = v711 + v710;
          if (v707 != v708) {
            goto LABEL_599;
          }
LABEL_601:
          if (v255 != v709 + 1) {
LABEL_924:
          }
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v722 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v723 = v722 >> 3;
            if ((unint64_t)(v722 >> 3) <= 1) {
              unint64_t v723 = 1;
            }
            if (v723 >= 2)
            {
              uint64_t v726 = 0;
              uint64_t v727 = 0;
              unint64_t v724 = v723 & 0xFFFFFFFFFFFFFFFELL;
              v728 = v1214 + 8;
              v729 = v1216 + 8;
              unint64_t v730 = v723 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v726 += *(v729 - 1) * (*(v728 - 1) - 1);
                v727 += *v729 * (*v728 - 1);
                v728 += 2;
                v729 += 2;
                v730 -= 2;
              }
              while (v730);
              uint64_t v725 = v727 + v726;
              if (v723 == v724) {
                goto LABEL_612;
              }
            }
            else
            {
              unint64_t v724 = 0;
              uint64_t v725 = 0;
            }
            unint64_t v731 = v723 - v724;
            uint64_t v732 = 8 * v724;
            v733 = &v1216[v732];
            v734 = &v1214[v732];
            do
            {
              uint64_t v735 = *(void *)v734;
              v734 += 8;
              uint64_t v736 = v735 - 1;
              uint64_t v737 = *(void *)v733;
              v733 += 8;
              v725 += v737 * v736;
              --v731;
            }
            while (v731);
LABEL_612:
            uint64_t v738 = v725 + 1;
            goto LABEL_926;
          }
LABEL_925:
          uint64_t v738 = 0;
LABEL_926:
          uint64_t v1112 = v1218 + v738;
          if (v1112)
          {
            unint64_t v1113 = 0;
            unint64_t v1114 = (float *)v1212;
            do
            {
              float v1115 = (float)*(int *)(v50 + 4 * v1113);
              if (*v1114 >= v1115) {
                float v1115 = *v1114;
              }
              *v1114++ = v1115;
              unint64_t v1113 = (v1113 + 1) % v49;
              --v1112;
            }
            while (v1112);
          }
          goto LABEL_1047;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v70 = *(void *)v1192;
          if (v1196) {
            goto LABEL_849;
          }
          uint64_t v71 = v1190;
          uint64_t v72 = v1193 - (unsigned char *)v1192;
          if (v1193 == v1192) {
            goto LABEL_347;
          }
          if (!v1190)
          {
            uint64_t v73 = 0;
            goto LABEL_337;
          }
          if ((unint64_t)(v72 - 8) < 8)
          {
            uint64_t v73 = 1;
            uint64_t v74 = (char *)v1192;
            do
            {
LABEL_336:
              uint64_t v358 = *(void *)v74;
              v74 += 8;
              v73 *= v358;
            }
            while (v74 != v1193);
            goto LABEL_337;
          }
          unint64_t v353 = ((unint64_t)(v72 - 8) >> 3) + 1;
          uint64_t v74 = (char *)v1192 + 8 * (v353 & 0x3FFFFFFFFFFFFFFELL);
          v354 = (char *)v1192 + 8;
          uint64_t v355 = 1;
          uint64_t v356 = v353 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v357 = 1;
          do
          {
            v355 *= *(v354 - 1);
            v357 *= *v354;
            v354 += 2;
            v356 -= 2;
          }
          while (v356);
          uint64_t v73 = v357 * v355;
          if (v353 != (v353 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_336;
          }
LABEL_337:
          unint64_t v359 = v72 >> 3;
          if ((unint64_t)(v72 >> 3) <= 1) {
            unint64_t v359 = 1;
          }
          if (v359 < 2)
          {
            unint64_t v360 = 0;
            uint64_t v361 = 0;
LABEL_344:
            unint64_t v367 = v359 - v360;
            uint64_t v368 = 8 * v360;
            v369 = (uint64_t *)((char *)v1194 + v368);
            v370 = (uint64_t *)((char *)v1192 + v368);
            do
            {
              uint64_t v371 = *v370++;
              uint64_t v372 = v371 - 1;
              uint64_t v373 = *v369++;
              v361 += v373 * v372;
              --v367;
            }
            while (v367);
            goto LABEL_346;
          }
          uint64_t v362 = 0;
          uint64_t v363 = 0;
          unint64_t v360 = v359 & 0xFFFFFFFFFFFFFFFELL;
          v364 = (char *)v1192 + 8;
          v365 = (char *)v1194 + 8;
          unint64_t v366 = v359 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v362 += *(v365 - 1) * (*(v364 - 1) - 1);
            v363 += *v365 * (*v364 - 1);
            v364 += 2;
            v365 += 2;
            v366 -= 2;
          }
          while (v366);
          uint64_t v361 = v363 + v362;
          if (v359 != v360) {
            goto LABEL_344;
          }
LABEL_346:
          if (v73 != v361 + 1) {
LABEL_849:
          }
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_347:
          unint64_t v253 = v1191;
          if (v1191) {
            atomic_fetch_add_explicit(&v1191->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_986;
          }
          uint64_t v374 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_987;
          }
          uint64_t v375 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_717;
          }
          if ((unint64_t)(v374 - 8) < 8)
          {
            uint64_t v375 = 1;
            v376 = v1214;
            do
            {
LABEL_716:
              uint64_t v896 = *(void *)v376;
              v376 += 8;
              v375 *= v896;
            }
            while (v376 != v1215);
            goto LABEL_717;
          }
          unint64_t v891 = ((unint64_t)(v374 - 8) >> 3) + 1;
          v376 = &v1214[8 * (v891 & 0x3FFFFFFFFFFFFFFELL)];
          v892 = v1214 + 8;
          uint64_t v893 = 1;
          uint64_t v894 = v891 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v895 = 1;
          do
          {
            v893 *= *(v892 - 1);
            v895 *= *v892;
            v892 += 2;
            v894 -= 2;
          }
          while (v894);
          uint64_t v375 = v895 * v893;
          if (v891 != (v891 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_716;
          }
LABEL_717:
          unint64_t v897 = v374 >> 3;
          if ((unint64_t)(v374 >> 3) <= 1) {
            unint64_t v897 = 1;
          }
          if (v897 < 2)
          {
            unint64_t v898 = 0;
            uint64_t v899 = 0;
LABEL_724:
            unint64_t v905 = v897 - v898;
            uint64_t v906 = 8 * v898;
            v907 = &v1216[v906];
            v908 = &v1214[v906];
            do
            {
              uint64_t v909 = *(void *)v908;
              v908 += 8;
              uint64_t v910 = v909 - 1;
              uint64_t v911 = *(void *)v907;
              v907 += 8;
              v899 += v911 * v910;
              --v905;
            }
            while (v905);
            goto LABEL_726;
          }
          uint64_t v900 = 0;
          uint64_t v901 = 0;
          unint64_t v898 = v897 & 0xFFFFFFFFFFFFFFFELL;
          v902 = v1214 + 8;
          v903 = v1216 + 8;
          unint64_t v904 = v897 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v900 += *(v903 - 1) * (*(v902 - 1) - 1);
            v901 += *v903 * (*v902 - 1);
            v902 += 2;
            v903 += 2;
            v904 -= 2;
          }
          while (v904);
          uint64_t v899 = v901 + v900;
          if (v897 != v898) {
            goto LABEL_724;
          }
LABEL_726:
          if (v375 != v899 + 1) {
LABEL_986:
          }
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v912 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v913 = v912 >> 3;
            if ((unint64_t)(v912 >> 3) <= 1) {
              unint64_t v913 = 1;
            }
            if (v913 >= 2)
            {
              uint64_t v916 = 0;
              uint64_t v917 = 0;
              unint64_t v914 = v913 & 0xFFFFFFFFFFFFFFFELL;
              v918 = v1214 + 8;
              v919 = v1216 + 8;
              unint64_t v920 = v913 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v916 += *(v919 - 1) * (*(v918 - 1) - 1);
                v917 += *v919 * (*v918 - 1);
                v918 += 2;
                v919 += 2;
                v920 -= 2;
              }
              while (v920);
              uint64_t v915 = v917 + v916;
              if (v913 == v914) {
                goto LABEL_737;
              }
            }
            else
            {
              unint64_t v914 = 0;
              uint64_t v915 = 0;
            }
            unint64_t v921 = v913 - v914;
            uint64_t v922 = 8 * v914;
            v923 = &v1216[v922];
            v924 = &v1214[v922];
            do
            {
              uint64_t v925 = *(void *)v924;
              v924 += 8;
              uint64_t v926 = v925 - 1;
              uint64_t v927 = *(void *)v923;
              v923 += 8;
              v915 += v927 * v926;
              --v921;
            }
            while (v921);
LABEL_737:
            uint64_t v928 = v915 + 1;
            goto LABEL_988;
          }
LABEL_987:
          uint64_t v928 = 0;
LABEL_988:
          uint64_t v1132 = v1218 + v928;
          if (v1132)
          {
            unint64_t v1133 = 0;
            v1134 = (short float *)v1212;
            do
            {
              _S0 = (float)*(int *)(v71 + 4 * v1133);
              __asm { FCVT            H0, S0 }
              if (*v1134 >= _H0) {
                _H0 = *v1134;
              }
              *v1134++ = _H0;
              unint64_t v1133 = (v1133 + 1) % v70;
              --v1132;
            }
            while (v1132);
          }
LABEL_1047:
          if (v253 && !atomic_fetch_add(&v253->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
            std::__shared_weak_count::__release_weak(v253);
          }
          if (v1216)
          {
            v1217 = v1216;
            operator delete(v1216);
          }
          if (v1214)
          {
            v1215 = v1214;
            operator delete(v1214);
          }
          v1153 = v1213;
          if (v1213 && !atomic_fetch_add(&v1213->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1153->__on_zero_shared)(v1153);
            std::__shared_weak_count::__release_weak(v1153);
          }
          if (v1194)
          {
            v1195 = v1194;
            operator delete(v1194);
          }
          if (v1192)
          {
            uint64_t v1193 = (char *)v1192;
            operator delete(v1192);
          }
          v1154 = v1191;
          if (v1191 && !atomic_fetch_add(&v1191->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1154->__on_zero_shared)(v1154);
            std::__shared_weak_count::__release_weak(v1154);
          }
          if (v1187)
          {
            v1188 = v1187;
            operator delete(v1187);
          }
          if (v1185)
          {
            uint64_t v1186 = v1185;
            operator delete(v1185);
          }
          uint64_t v1111 = v1184;
          if (v1184) {
            goto LABEL_1069;
          }
          return;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()();
      }
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1197, (uint64_t)a2);
      v1203 = &v1211;
      nitro::ndarray<unsigned char>::ndarray(&v1204, &v1197);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v18 = *(void *)v1206;
          if (v1210) {
            goto LABEL_851;
          }
          uint64_t v19 = v1204;
          uint64_t v20 = v1207 - v1206;
          if (v1207 == v1206) {
            goto LABEL_389;
          }
          if (!v1204)
          {
            uint64_t v21 = 0;
            goto LABEL_379;
          }
          if ((unint64_t)(v20 - 8) < 8)
          {
            uint64_t v21 = 1;
            unint64_t v22 = v1206;
            do
            {
LABEL_378:
              uint64_t v406 = *(void *)v22;
              v22 += 8;
              v21 *= v406;
            }
            while (v22 != v1207);
            goto LABEL_379;
          }
          unint64_t v401 = ((unint64_t)(v20 - 8) >> 3) + 1;
          unint64_t v22 = &v1206[8 * (v401 & 0x3FFFFFFFFFFFFFFELL)];
          v402 = v1206 + 8;
          uint64_t v403 = 1;
          uint64_t v404 = v401 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v405 = 1;
          do
          {
            v403 *= *(v402 - 1);
            v405 *= *v402;
            v402 += 2;
            v404 -= 2;
          }
          while (v404);
          uint64_t v21 = v405 * v403;
          if (v401 != (v401 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_378;
          }
LABEL_379:
          unint64_t v407 = v20 >> 3;
          if ((unint64_t)(v20 >> 3) <= 1) {
            unint64_t v407 = 1;
          }
          if (v407 < 2)
          {
            unint64_t v408 = 0;
            uint64_t v409 = 0;
LABEL_386:
            unint64_t v415 = v407 - v408;
            uint64_t v416 = 8 * v408;
            v417 = &v1208[v416];
            v418 = &v1206[v416];
            do
            {
              uint64_t v419 = *(void *)v418;
              v418 += 8;
              uint64_t v420 = v419 - 1;
              uint64_t v421 = *(void *)v417;
              v417 += 8;
              v409 += v421 * v420;
              --v415;
            }
            while (v415);
            goto LABEL_388;
          }
          uint64_t v410 = 0;
          uint64_t v411 = 0;
          unint64_t v408 = v407 & 0xFFFFFFFFFFFFFFFELL;
          v412 = v1206 + 8;
          v413 = v1208 + 8;
          unint64_t v414 = v407 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v410 += *(v413 - 1) * (*(v412 - 1) - 1);
            v411 += *v413 * (*v412 - 1);
            v412 += 2;
            v413 += 2;
            v414 -= 2;
          }
          while (v414);
          uint64_t v409 = v411 + v410;
          if (v407 != v408) {
            goto LABEL_386;
          }
LABEL_388:
          if (v21 != v409 + 1) {
LABEL_851:
          }
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_389:
          uint64_t v204 = v1205;
          if (v1205) {
            atomic_fetch_add_explicit(&v1205->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_1002;
          }
          uint64_t v422 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_1003;
          }
          uint64_t v423 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_767;
          }
          if ((unint64_t)(v422 - 8) < 8)
          {
            uint64_t v423 = 1;
            v424 = v1214;
            do
            {
LABEL_766:
              uint64_t v972 = *(void *)v424;
              v424 += 8;
              v423 *= v972;
            }
            while (v424 != v1215);
            goto LABEL_767;
          }
          unint64_t v967 = ((unint64_t)(v422 - 8) >> 3) + 1;
          v424 = &v1214[8 * (v967 & 0x3FFFFFFFFFFFFFFELL)];
          v968 = v1214 + 8;
          uint64_t v969 = 1;
          uint64_t v970 = v967 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v971 = 1;
          do
          {
            v969 *= *(v968 - 1);
            v971 *= *v968;
            v968 += 2;
            v970 -= 2;
          }
          while (v970);
          uint64_t v423 = v971 * v969;
          if (v967 != (v967 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_766;
          }
LABEL_767:
          unint64_t v973 = v422 >> 3;
          if ((unint64_t)(v422 >> 3) <= 1) {
            unint64_t v973 = 1;
          }
          if (v973 < 2)
          {
            unint64_t v974 = 0;
            uint64_t v975 = 0;
LABEL_774:
            unint64_t v981 = v973 - v974;
            uint64_t v982 = 8 * v974;
            v983 = &v1216[v982];
            v984 = &v1214[v982];
            do
            {
              uint64_t v985 = *(void *)v984;
              v984 += 8;
              uint64_t v986 = v985 - 1;
              uint64_t v987 = *(void *)v983;
              v983 += 8;
              v975 += v987 * v986;
              --v981;
            }
            while (v981);
            goto LABEL_776;
          }
          uint64_t v976 = 0;
          uint64_t v977 = 0;
          unint64_t v974 = v973 & 0xFFFFFFFFFFFFFFFELL;
          v978 = v1214 + 8;
          v979 = v1216 + 8;
          unint64_t v980 = v973 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v976 += *(v979 - 1) * (*(v978 - 1) - 1);
            v977 += *v979 * (*v978 - 1);
            v978 += 2;
            v979 += 2;
            v980 -= 2;
          }
          while (v980);
          uint64_t v975 = v977 + v976;
          if (v973 != v974) {
            goto LABEL_774;
          }
LABEL_776:
          if (v423 != v975 + 1) {
LABEL_1002:
          }
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v988 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v989 = v988 >> 3;
            if ((unint64_t)(v988 >> 3) <= 1) {
              unint64_t v989 = 1;
            }
            if (v989 >= 2)
            {
              uint64_t v992 = 0;
              uint64_t v993 = 0;
              unint64_t v990 = v989 & 0xFFFFFFFFFFFFFFFELL;
              v994 = v1214 + 8;
              v995 = v1216 + 8;
              unint64_t v996 = v989 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v992 += *(v995 - 1) * (*(v994 - 1) - 1);
                v993 += *v995 * (*v994 - 1);
                v994 += 2;
                v995 += 2;
                v996 -= 2;
              }
              while (v996);
              uint64_t v991 = v993 + v992;
              if (v989 == v990) {
                goto LABEL_787;
              }
            }
            else
            {
              unint64_t v990 = 0;
              uint64_t v991 = 0;
            }
            unint64_t v997 = v989 - v990;
            uint64_t v998 = 8 * v990;
            v999 = &v1216[v998];
            v1000 = &v1214[v998];
            do
            {
              uint64_t v1001 = *(void *)v1000;
              v1000 += 8;
              uint64_t v1002 = v1001 - 1;
              uint64_t v1003 = *(void *)v999;
              v999 += 8;
              v991 += v1003 * v1002;
              --v997;
            }
            while (v997);
LABEL_787:
            uint64_t v1004 = v991 + 1;
            goto LABEL_1004;
          }
LABEL_1003:
          uint64_t v1004 = 0;
LABEL_1004:
          uint64_t v1140 = v1218 + v1004;
          if (v1140)
          {
            unint64_t v1141 = 0;
            v1142 = v1212;
            do
            {
              int v1143 = *(unsigned __int8 *)(v19 + v1141);
              if (*v1142 > v1143) {
                int v1143 = *v1142;
              }
              *v1142++ = v1143;
              unint64_t v1141 = (v1141 + 1) % v18;
              --v1140;
            }
            while (v1140);
          }
          goto LABEL_1009;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v75 = *(void *)v1206;
          if (v1210) {
            goto LABEL_850;
          }
          uint64_t v76 = v1204;
          uint64_t v77 = v1207 - v1206;
          if (v1207 == v1206) {
            goto LABEL_368;
          }
          if (!v1204)
          {
            uint64_t v78 = 0;
            goto LABEL_358;
          }
          if ((unint64_t)(v77 - 8) < 8)
          {
            uint64_t v78 = 1;
            unint64_t v79 = v1206;
            do
            {
LABEL_357:
              uint64_t v382 = *(void *)v79;
              v79 += 8;
              v78 *= v382;
            }
            while (v79 != v1207);
            goto LABEL_358;
          }
          unint64_t v377 = ((unint64_t)(v77 - 8) >> 3) + 1;
          unint64_t v79 = &v1206[8 * (v377 & 0x3FFFFFFFFFFFFFFELL)];
          v378 = v1206 + 8;
          uint64_t v379 = 1;
          uint64_t v380 = v377 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v381 = 1;
          do
          {
            v379 *= *(v378 - 1);
            v381 *= *v378;
            v378 += 2;
            v380 -= 2;
          }
          while (v380);
          uint64_t v78 = v381 * v379;
          if (v377 != (v377 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_357;
          }
LABEL_358:
          unint64_t v383 = v77 >> 3;
          if ((unint64_t)(v77 >> 3) <= 1) {
            unint64_t v383 = 1;
          }
          if (v383 < 2)
          {
            unint64_t v384 = 0;
            uint64_t v385 = 0;
LABEL_365:
            unint64_t v391 = v383 - v384;
            uint64_t v392 = 8 * v384;
            v393 = &v1208[v392];
            v394 = &v1206[v392];
            do
            {
              uint64_t v395 = *(void *)v394;
              v394 += 8;
              uint64_t v396 = v395 - 1;
              uint64_t v397 = *(void *)v393;
              v393 += 8;
              v385 += v397 * v396;
              --v391;
            }
            while (v391);
            goto LABEL_367;
          }
          uint64_t v386 = 0;
          uint64_t v387 = 0;
          unint64_t v384 = v383 & 0xFFFFFFFFFFFFFFFELL;
          v388 = v1206 + 8;
          v389 = v1208 + 8;
          unint64_t v390 = v383 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v386 += *(v389 - 1) * (*(v388 - 1) - 1);
            v387 += *v389 * (*v388 - 1);
            v388 += 2;
            v389 += 2;
            v390 -= 2;
          }
          while (v390);
          uint64_t v385 = v387 + v386;
          if (v383 != v384) {
            goto LABEL_365;
          }
LABEL_367:
          if (v78 != v385 + 1) {
LABEL_850:
          }
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_368:
          uint64_t v204 = v1205;
          if (v1205) {
            atomic_fetch_add_explicit(&v1205->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_994;
          }
          uint64_t v398 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_995;
          }
          uint64_t v399 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_742;
          }
          if ((unint64_t)(v398 - 8) < 8)
          {
            uint64_t v399 = 1;
            v400 = v1214;
            do
            {
LABEL_741:
              uint64_t v934 = *(void *)v400;
              v400 += 8;
              v399 *= v934;
            }
            while (v400 != v1215);
            goto LABEL_742;
          }
          unint64_t v929 = ((unint64_t)(v398 - 8) >> 3) + 1;
          v400 = &v1214[8 * (v929 & 0x3FFFFFFFFFFFFFFELL)];
          v930 = v1214 + 8;
          uint64_t v931 = 1;
          uint64_t v932 = v929 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v933 = 1;
          do
          {
            v931 *= *(v930 - 1);
            v933 *= *v930;
            v930 += 2;
            v932 -= 2;
          }
          while (v932);
          uint64_t v399 = v933 * v931;
          if (v929 != (v929 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_741;
          }
LABEL_742:
          unint64_t v935 = v398 >> 3;
          if ((unint64_t)(v398 >> 3) <= 1) {
            unint64_t v935 = 1;
          }
          if (v935 < 2)
          {
            unint64_t v936 = 0;
            uint64_t v937 = 0;
LABEL_749:
            unint64_t v943 = v935 - v936;
            uint64_t v944 = 8 * v936;
            v945 = &v1216[v944];
            v946 = &v1214[v944];
            do
            {
              uint64_t v947 = *(void *)v946;
              v946 += 8;
              uint64_t v948 = v947 - 1;
              uint64_t v949 = *(void *)v945;
              v945 += 8;
              v937 += v949 * v948;
              --v943;
            }
            while (v943);
            goto LABEL_751;
          }
          uint64_t v938 = 0;
          uint64_t v939 = 0;
          unint64_t v936 = v935 & 0xFFFFFFFFFFFFFFFELL;
          v940 = v1214 + 8;
          v941 = v1216 + 8;
          unint64_t v942 = v935 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v938 += *(v941 - 1) * (*(v940 - 1) - 1);
            v939 += *v941 * (*v940 - 1);
            v940 += 2;
            v941 += 2;
            v942 -= 2;
          }
          while (v942);
          uint64_t v937 = v939 + v938;
          if (v935 != v936) {
            goto LABEL_749;
          }
LABEL_751:
          if (v399 != v937 + 1) {
LABEL_994:
          }
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v950 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v951 = v950 >> 3;
            if ((unint64_t)(v950 >> 3) <= 1) {
              unint64_t v951 = 1;
            }
            if (v951 >= 2)
            {
              uint64_t v954 = 0;
              uint64_t v955 = 0;
              unint64_t v952 = v951 & 0xFFFFFFFFFFFFFFFELL;
              v956 = v1214 + 8;
              v957 = v1216 + 8;
              unint64_t v958 = v951 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v954 += *(v957 - 1) * (*(v956 - 1) - 1);
                v955 += *v957 * (*v956 - 1);
                v956 += 2;
                v957 += 2;
                v958 -= 2;
              }
              while (v958);
              uint64_t v953 = v955 + v954;
              if (v951 == v952) {
                goto LABEL_762;
              }
            }
            else
            {
              unint64_t v952 = 0;
              uint64_t v953 = 0;
            }
            unint64_t v959 = v951 - v952;
            uint64_t v960 = 8 * v952;
            v961 = &v1216[v960];
            v962 = &v1214[v960];
            do
            {
              uint64_t v963 = *(void *)v962;
              v962 += 8;
              uint64_t v964 = v963 - 1;
              uint64_t v965 = *(void *)v961;
              v961 += 8;
              v953 += v965 * v964;
              --v959;
            }
            while (v959);
LABEL_762:
            uint64_t v966 = v953 + 1;
            goto LABEL_996;
          }
LABEL_995:
          uint64_t v966 = 0;
LABEL_996:
          if (v1218 + v966)
          {
            unint64_t v1137 = 0;
            unint64_t v1138 = 0;
            do
            {
              unsigned int v1139 = *(unsigned __int8 *)(v76 + v1138);
              if (*((unsigned __int8 *)v1212 + v1137) > v1139) {
                LOBYTE(v1139) = *((unsigned char *)v1212 + v1137);
              }
              *((unsigned char *)v1212 + v1137) = v1139;
              unint64_t v1138 = (v1138 + 1) % v75;
              ++v1137;
            }
            while (v1137 < v1218 + v966);
          }
          goto LABEL_1009;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v44 = *(void *)v1206;
          if (v1210) {
            goto LABEL_842;
          }
          uint64_t v45 = v1204;
          uint64_t v46 = v1207 - v1206;
          if (v1207 == v1206) {
            goto LABEL_200;
          }
          if (!v1204)
          {
            uint64_t v47 = 0;
            goto LABEL_190;
          }
          if ((unint64_t)(v46 - 8) < 8)
          {
            uint64_t v47 = 1;
            uint64_t v48 = v1206;
            do
            {
LABEL_189:
              uint64_t v188 = *(void *)v48;
              v48 += 8;
              v47 *= v188;
            }
            while (v48 != v1207);
            goto LABEL_190;
          }
          unint64_t v183 = ((unint64_t)(v46 - 8) >> 3) + 1;
          uint64_t v48 = &v1206[8 * (v183 & 0x3FFFFFFFFFFFFFFELL)];
          uint64_t v184 = v1206 + 8;
          uint64_t v185 = 1;
          uint64_t v186 = v183 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v187 = 1;
          do
          {
            v185 *= *(v184 - 1);
            v187 *= *v184;
            v184 += 2;
            v186 -= 2;
          }
          while (v186);
          uint64_t v47 = v187 * v185;
          if (v183 != (v183 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_189;
          }
LABEL_190:
          unint64_t v189 = v46 >> 3;
          if ((unint64_t)(v46 >> 3) <= 1) {
            unint64_t v189 = 1;
          }
          if (v189 < 2)
          {
            unint64_t v190 = 0;
            uint64_t v191 = 0;
LABEL_197:
            unint64_t v197 = v189 - v190;
            uint64_t v198 = 8 * v190;
            float32x4_t v199 = &v1208[v198];
            uint64_t v200 = &v1206[v198];
            do
            {
              uint64_t v201 = *(void *)v200;
              v200 += 8;
              uint64_t v202 = v201 - 1;
              uint64_t v203 = *(void *)v199;
              v199 += 8;
              v191 += v203 * v202;
              --v197;
            }
            while (v197);
            goto LABEL_199;
          }
          uint64_t v192 = 0;
          uint64_t v193 = 0;
          unint64_t v190 = v189 & 0xFFFFFFFFFFFFFFFELL;
          int32x4_t v194 = v1206 + 8;
          unint64_t v195 = v1208 + 8;
          unint64_t v196 = v189 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v192 += *(v195 - 1) * (*(v194 - 1) - 1);
            v193 += *v195 * (*v194 - 1);
            v194 += 2;
            v195 += 2;
            v196 -= 2;
          }
          while (v196);
          uint64_t v191 = v193 + v192;
          if (v189 != v190) {
            goto LABEL_197;
          }
LABEL_199:
          if (v47 != v191 + 1) {
LABEL_842:
          }
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_200:
          uint64_t v204 = v1205;
          if (v1205) {
            atomic_fetch_add_explicit(&v1205->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_886;
          }
          uint64_t v205 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_887;
          }
          uint64_t v206 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_542;
          }
          if ((unint64_t)(v205 - 8) < 8)
          {
            uint64_t v206 = 1;
            uint64_t v207 = v1214;
            do
            {
LABEL_541:
              uint64_t v630 = *(void *)v207;
              v207 += 8;
              v206 *= v630;
            }
            while (v207 != v1215);
            goto LABEL_542;
          }
          unint64_t v625 = ((unint64_t)(v205 - 8) >> 3) + 1;
          uint64_t v207 = &v1214[8 * (v625 & 0x3FFFFFFFFFFFFFFELL)];
          v626 = v1214 + 8;
          uint64_t v627 = 1;
          uint64_t v628 = v625 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v629 = 1;
          do
          {
            v627 *= *(v626 - 1);
            v629 *= *v626;
            v626 += 2;
            v628 -= 2;
          }
          while (v628);
          uint64_t v206 = v629 * v627;
          if (v625 != (v625 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_541;
          }
LABEL_542:
          unint64_t v631 = v205 >> 3;
          if ((unint64_t)(v205 >> 3) <= 1) {
            unint64_t v631 = 1;
          }
          if (v631 < 2)
          {
            unint64_t v632 = 0;
            uint64_t v633 = 0;
LABEL_549:
            unint64_t v639 = v631 - v632;
            uint64_t v640 = 8 * v632;
            v641 = &v1216[v640];
            v642 = &v1214[v640];
            do
            {
              uint64_t v643 = *(void *)v642;
              v642 += 8;
              uint64_t v644 = v643 - 1;
              uint64_t v645 = *(void *)v641;
              v641 += 8;
              v633 += v645 * v644;
              --v639;
            }
            while (v639);
            goto LABEL_551;
          }
          uint64_t v634 = 0;
          uint64_t v635 = 0;
          unint64_t v632 = v631 & 0xFFFFFFFFFFFFFFFELL;
          v636 = v1214 + 8;
          v637 = v1216 + 8;
          unint64_t v638 = v631 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v634 += *(v637 - 1) * (*(v636 - 1) - 1);
            v635 += *v637 * (*v636 - 1);
            v636 += 2;
            v637 += 2;
            v638 -= 2;
          }
          while (v638);
          uint64_t v633 = v635 + v634;
          if (v631 != v632) {
            goto LABEL_549;
          }
LABEL_551:
          if (v206 != v633 + 1) {
LABEL_886:
          }
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v646 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v647 = v646 >> 3;
            if ((unint64_t)(v646 >> 3) <= 1) {
              unint64_t v647 = 1;
            }
            if (v647 >= 2)
            {
              uint64_t v650 = 0;
              uint64_t v651 = 0;
              unint64_t v648 = v647 & 0xFFFFFFFFFFFFFFFELL;
              v652 = v1214 + 8;
              v653 = v1216 + 8;
              unint64_t v654 = v647 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v650 += *(v653 - 1) * (*(v652 - 1) - 1);
                v651 += *v653 * (*v652 - 1);
                v652 += 2;
                v653 += 2;
                v654 -= 2;
              }
              while (v654);
              uint64_t v649 = v651 + v650;
              if (v647 == v648) {
                goto LABEL_562;
              }
            }
            else
            {
              unint64_t v648 = 0;
              uint64_t v649 = 0;
            }
            unint64_t v655 = v647 - v648;
            uint64_t v656 = 8 * v648;
            v657 = &v1216[v656];
            v658 = &v1214[v656];
            do
            {
              uint64_t v659 = *(void *)v658;
              v658 += 8;
              uint64_t v660 = v659 - 1;
              uint64_t v661 = *(void *)v657;
              v657 += 8;
              v649 += v661 * v660;
              --v655;
            }
            while (v655);
LABEL_562:
            uint64_t v662 = v649 + 1;
            goto LABEL_888;
          }
LABEL_887:
          uint64_t v662 = 0;
LABEL_888:
          uint64_t v1102 = v1218 + v662;
          if (v1102)
          {
            unint64_t v1103 = 0;
            v1104 = (float *)v1212;
            do
            {
              LOBYTE(v43) = *(unsigned char *)(v45 + v1103);
              float v43 = (float)LODWORD(v43);
              if (*v1104 >= v43) {
                float v43 = *v1104;
              }
              *v1104++ = v43;
              unint64_t v1103 = (v1103 + 1) % v44;
              --v1102;
            }
            while (v1102);
          }
          goto LABEL_1009;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v65 = *(void *)v1206;
          if (v1210) {
            goto LABEL_847;
          }
          uint64_t v66 = v1204;
          uint64_t v67 = v1207 - v1206;
          if (v1207 == v1206) {
            goto LABEL_305;
          }
          if (!v1204)
          {
            uint64_t v68 = 0;
            goto LABEL_295;
          }
          if ((unint64_t)(v67 - 8) < 8)
          {
            uint64_t v68 = 1;
            uint64_t v69 = v1206;
            do
            {
LABEL_294:
              uint64_t v310 = *(void *)v69;
              v69 += 8;
              v68 *= v310;
            }
            while (v69 != v1207);
            goto LABEL_295;
          }
          unint64_t v305 = ((unint64_t)(v67 - 8) >> 3) + 1;
          uint64_t v69 = &v1206[8 * (v305 & 0x3FFFFFFFFFFFFFFELL)];
          uint64_t v306 = v1206 + 8;
          uint64_t v307 = 1;
          uint64_t v308 = v305 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v309 = 1;
          do
          {
            v307 *= *(v306 - 1);
            v309 *= *v306;
            v306 += 2;
            v308 -= 2;
          }
          while (v308);
          uint64_t v68 = v309 * v307;
          if (v305 != (v305 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_294;
          }
LABEL_295:
          unint64_t v311 = v67 >> 3;
          if ((unint64_t)(v67 >> 3) <= 1) {
            unint64_t v311 = 1;
          }
          if (v311 < 2)
          {
            unint64_t v312 = 0;
            uint64_t v313 = 0;
LABEL_302:
            unint64_t v319 = v311 - v312;
            uint64_t v320 = 8 * v312;
            uint64_t v321 = &v1208[v320];
            uint64_t v322 = &v1206[v320];
            do
            {
              uint64_t v323 = *(void *)v322;
              v322 += 8;
              uint64_t v324 = v323 - 1;
              uint64_t v325 = *(void *)v321;
              v321 += 8;
              v313 += v325 * v324;
              --v319;
            }
            while (v319);
            goto LABEL_304;
          }
          uint64_t v314 = 0;
          uint64_t v315 = 0;
          unint64_t v312 = v311 & 0xFFFFFFFFFFFFFFFELL;
          long long v316 = v1206 + 8;
          uint64_t v317 = v1208 + 8;
          unint64_t v318 = v311 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v314 += *(v317 - 1) * (*(v316 - 1) - 1);
            v315 += *v317 * (*v316 - 1);
            v316 += 2;
            v317 += 2;
            v318 -= 2;
          }
          while (v318);
          uint64_t v313 = v315 + v314;
          if (v311 != v312) {
            goto LABEL_302;
          }
LABEL_304:
          if (v68 != v313 + 1) {
LABEL_847:
          }
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_305:
          uint64_t v204 = v1205;
          if (v1205) {
            atomic_fetch_add_explicit(&v1205->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_948;
          }
          uint64_t v326 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_949;
          }
          uint64_t v327 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_667;
          }
          if ((unint64_t)(v326 - 8) < 8)
          {
            uint64_t v327 = 1;
            uint64_t v328 = v1214;
            do
            {
LABEL_666:
              uint64_t v820 = *(void *)v328;
              v328 += 8;
              v327 *= v820;
            }
            while (v328 != v1215);
            goto LABEL_667;
          }
          unint64_t v815 = ((unint64_t)(v326 - 8) >> 3) + 1;
          uint64_t v328 = &v1214[8 * (v815 & 0x3FFFFFFFFFFFFFFELL)];
          v816 = v1214 + 8;
          uint64_t v817 = 1;
          uint64_t v818 = v815 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v819 = 1;
          do
          {
            v817 *= *(v816 - 1);
            v819 *= *v816;
            v816 += 2;
            v818 -= 2;
          }
          while (v818);
          uint64_t v327 = v819 * v817;
          if (v815 != (v815 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_666;
          }
LABEL_667:
          unint64_t v821 = v326 >> 3;
          if ((unint64_t)(v326 >> 3) <= 1) {
            unint64_t v821 = 1;
          }
          if (v821 < 2)
          {
            unint64_t v822 = 0;
            uint64_t v823 = 0;
LABEL_674:
            unint64_t v829 = v821 - v822;
            uint64_t v830 = 8 * v822;
            v831 = &v1216[v830];
            v832 = &v1214[v830];
            do
            {
              uint64_t v833 = *(void *)v832;
              v832 += 8;
              uint64_t v834 = v833 - 1;
              uint64_t v835 = *(void *)v831;
              v831 += 8;
              v823 += v835 * v834;
              --v829;
            }
            while (v829);
            goto LABEL_676;
          }
          uint64_t v824 = 0;
          uint64_t v825 = 0;
          unint64_t v822 = v821 & 0xFFFFFFFFFFFFFFFELL;
          v826 = v1214 + 8;
          v827 = v1216 + 8;
          unint64_t v828 = v821 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v824 += *(v827 - 1) * (*(v826 - 1) - 1);
            v825 += *v827 * (*v826 - 1);
            v826 += 2;
            v827 += 2;
            v828 -= 2;
          }
          while (v828);
          uint64_t v823 = v825 + v824;
          if (v821 != v822) {
            goto LABEL_674;
          }
LABEL_676:
          if (v327 != v823 + 1) {
LABEL_948:
          }
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v836 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v837 = v836 >> 3;
            if ((unint64_t)(v836 >> 3) <= 1) {
              unint64_t v837 = 1;
            }
            if (v837 >= 2)
            {
              uint64_t v840 = 0;
              uint64_t v841 = 0;
              unint64_t v838 = v837 & 0xFFFFFFFFFFFFFFFELL;
              v842 = v1214 + 8;
              v843 = v1216 + 8;
              unint64_t v844 = v837 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v840 += *(v843 - 1) * (*(v842 - 1) - 1);
                v841 += *v843 * (*v842 - 1);
                v842 += 2;
                v843 += 2;
                v844 -= 2;
              }
              while (v844);
              uint64_t v839 = v841 + v840;
              if (v837 == v838) {
                goto LABEL_687;
              }
            }
            else
            {
              unint64_t v838 = 0;
              uint64_t v839 = 0;
            }
            unint64_t v845 = v837 - v838;
            uint64_t v846 = 8 * v838;
            v847 = &v1216[v846];
            v848 = &v1214[v846];
            do
            {
              uint64_t v849 = *(void *)v848;
              v848 += 8;
              uint64_t v850 = v849 - 1;
              uint64_t v851 = *(void *)v847;
              v847 += 8;
              v839 += v851 * v850;
              --v845;
            }
            while (v845);
LABEL_687:
            uint64_t v852 = v839 + 1;
            goto LABEL_950;
          }
LABEL_949:
          uint64_t v852 = 0;
LABEL_950:
          uint64_t v1123 = v1218 + v852;
          if (v1123)
          {
            unint64_t v1124 = 0;
            v1125 = (short float *)v1212;
            do
            {
              LOBYTE(v64) = *(unsigned char *)(v66 + v1124);
              short float v64 = (short float)LOWORD(v64);
              if (*v1125 >= v64) {
                short float v64 = *v1125;
              }
              *v1125++ = v64;
              unint64_t v1124 = (v1124 + 1) % v65;
              --v1123;
            }
            while (v1123);
          }
LABEL_1009:
          if (v204 && !atomic_fetch_add(&v204->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
            std::__shared_weak_count::__release_weak(v204);
          }
          if (v1216)
          {
            v1217 = v1216;
            operator delete(v1216);
          }
          if (v1214)
          {
            v1215 = v1214;
            operator delete(v1214);
          }
          uint64_t v1144 = v1213;
          if (v1213 && !atomic_fetch_add(&v1213->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1144->__on_zero_shared)(v1144);
            std::__shared_weak_count::__release_weak(v1144);
          }
          if (v1208)
          {
            v1209 = v1208;
            operator delete(v1208);
          }
          if (v1206)
          {
            uint64_t v1207 = v1206;
            operator delete(v1206);
          }
          v1145 = v1205;
          if (v1205 && !atomic_fetch_add(&v1205->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1145->__on_zero_shared)(v1145);
            std::__shared_weak_count::__release_weak(v1145);
          }
          if (v1201)
          {
            v1202 = v1201;
            operator delete(v1201);
          }
          if (v1199)
          {
            char v1200 = v1199;
            operator delete(v1199);
          }
          uint64_t v1111 = v1198;
          if (!v1198) {
            return;
          }
          goto LABEL_1069;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()();
      }
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v1155, (uint64_t)a2);
      v1161 = &v1211;
      nitro::ndarray<float>::ndarray(&v1162, &v1155);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v8 = *(void *)v1164;
          if (v1168) {
            goto LABEL_843;
          }
          uint64_t v9 = v1162;
          uint64_t v10 = v1165 - (unsigned char *)v1164;
          if (v1165 == v1164) {
            goto LABEL_221;
          }
          if (!v1162)
          {
            uint64_t v11 = 0;
            goto LABEL_211;
          }
          if ((unint64_t)(v10 - 8) < 8)
          {
            uint64_t v11 = 1;
            uint64_t v12 = (char *)v1164;
            do
            {
LABEL_210:
              uint64_t v213 = *(void *)v12;
              v12 += 8;
              v11 *= v213;
            }
            while (v12 != v1165);
            goto LABEL_211;
          }
          unint64_t v208 = ((unint64_t)(v10 - 8) >> 3) + 1;
          uint64_t v12 = (char *)v1164 + 8 * (v208 & 0x3FFFFFFFFFFFFFFELL);
          int32x4_t v209 = (char *)v1164 + 8;
          uint64_t v210 = 1;
          uint64_t v211 = v208 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v212 = 1;
          do
          {
            v210 *= *(v209 - 1);
            v212 *= *v209;
            v209 += 2;
            v211 -= 2;
          }
          while (v211);
          uint64_t v11 = v212 * v210;
          if (v208 != (v208 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_210;
          }
LABEL_211:
          unint64_t v214 = v10 >> 3;
          if ((unint64_t)(v10 >> 3) <= 1) {
            unint64_t v214 = 1;
          }
          if (v214 < 2)
          {
            unint64_t v215 = 0;
            uint64_t v216 = 0;
LABEL_218:
            unint64_t v222 = v214 - v215;
            uint64_t v223 = 8 * v215;
            int32x4_t v224 = (uint64_t *)((char *)__p + v223);
            unint64_t v225 = (uint64_t *)((char *)v1164 + v223);
            do
            {
              uint64_t v226 = *v225++;
              uint64_t v227 = v226 - 1;
              uint64_t v228 = *v224++;
              v216 += v228 * v227;
              --v222;
            }
            while (v222);
            goto LABEL_220;
          }
          uint64_t v217 = 0;
          uint64_t v218 = 0;
          unint64_t v215 = v214 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v219 = (char *)v1164 + 8;
          uint64_t v220 = (char *)__p + 8;
          unint64_t v221 = v214 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v217 += *(v220 - 1) * (*(v219 - 1) - 1);
            v218 += *v220 * (*v219 - 1);
            v219 += 2;
            v220 += 2;
            v221 -= 2;
          }
          while (v221);
          uint64_t v216 = v218 + v217;
          if (v214 != v215) {
            goto LABEL_218;
          }
LABEL_220:
          if (v11 != v216 + 1) {
LABEL_843:
          }
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_221:
          uint64_t v106 = v1163;
          if (v1163) {
            atomic_fetch_add_explicit(&v1163->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_894;
          }
          uint64_t v229 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_895;
          }
          uint64_t v230 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_567;
          }
          if ((unint64_t)(v229 - 8) < 8)
          {
            uint64_t v230 = 1;
            unint64_t v231 = v1214;
            do
            {
LABEL_566:
              uint64_t v668 = *(void *)v231;
              v231 += 8;
              v230 *= v668;
            }
            while (v231 != v1215);
            goto LABEL_567;
          }
          unint64_t v663 = ((unint64_t)(v229 - 8) >> 3) + 1;
          unint64_t v231 = &v1214[8 * (v663 & 0x3FFFFFFFFFFFFFFELL)];
          v664 = v1214 + 8;
          uint64_t v665 = 1;
          uint64_t v666 = v663 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v667 = 1;
          do
          {
            v665 *= *(v664 - 1);
            v667 *= *v664;
            v664 += 2;
            v666 -= 2;
          }
          while (v666);
          uint64_t v230 = v667 * v665;
          if (v663 != (v663 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_566;
          }
LABEL_567:
          unint64_t v669 = v229 >> 3;
          if ((unint64_t)(v229 >> 3) <= 1) {
            unint64_t v669 = 1;
          }
          if (v669 < 2)
          {
            unint64_t v670 = 0;
            uint64_t v671 = 0;
LABEL_574:
            unint64_t v677 = v669 - v670;
            uint64_t v678 = 8 * v670;
            v679 = &v1216[v678];
            v680 = &v1214[v678];
            do
            {
              uint64_t v681 = *(void *)v680;
              v680 += 8;
              uint64_t v682 = v681 - 1;
              uint64_t v683 = *(void *)v679;
              v679 += 8;
              v671 += v683 * v682;
              --v677;
            }
            while (v677);
            goto LABEL_576;
          }
          uint64_t v672 = 0;
          uint64_t v673 = 0;
          unint64_t v670 = v669 & 0xFFFFFFFFFFFFFFFELL;
          v674 = v1214 + 8;
          v675 = v1216 + 8;
          unint64_t v676 = v669 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v672 += *(v675 - 1) * (*(v674 - 1) - 1);
            v673 += *v675 * (*v674 - 1);
            v674 += 2;
            v675 += 2;
            v676 -= 2;
          }
          while (v676);
          uint64_t v671 = v673 + v672;
          if (v669 != v670) {
            goto LABEL_574;
          }
LABEL_576:
          if (v230 != v671 + 1) {
LABEL_894:
          }
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v684 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v685 = v684 >> 3;
            if ((unint64_t)(v684 >> 3) <= 1) {
              unint64_t v685 = 1;
            }
            if (v685 >= 2)
            {
              uint64_t v688 = 0;
              uint64_t v689 = 0;
              unint64_t v686 = v685 & 0xFFFFFFFFFFFFFFFELL;
              v690 = v1214 + 8;
              v691 = v1216 + 8;
              unint64_t v692 = v685 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v688 += *(v691 - 1) * (*(v690 - 1) - 1);
                v689 += *v691 * (*v690 - 1);
                v690 += 2;
                v691 += 2;
                v692 -= 2;
              }
              while (v692);
              uint64_t v687 = v689 + v688;
              if (v685 == v686) {
                goto LABEL_587;
              }
            }
            else
            {
              unint64_t v686 = 0;
              uint64_t v687 = 0;
            }
            unint64_t v693 = v685 - v686;
            uint64_t v694 = 8 * v686;
            v695 = &v1216[v694];
            v696 = &v1214[v694];
            do
            {
              uint64_t v697 = *(void *)v696;
              v696 += 8;
              uint64_t v698 = v697 - 1;
              uint64_t v699 = *(void *)v695;
              v695 += 8;
              v687 += v699 * v698;
              --v693;
            }
            while (v693);
LABEL_587:
            uint64_t v700 = v687 + 1;
            goto LABEL_896;
          }
LABEL_895:
          uint64_t v700 = 0;
LABEL_896:
          uint64_t v1105 = v1218 + v700;
          if (v1105)
          {
            unint64_t v1106 = 0;
            v1107 = v1212;
            do
            {
              int v1108 = (int)*(float *)(v9 + 4 * v1106);
              if (*v1107 > v1108) {
                int v1108 = *v1107;
              }
              *v1107++ = v1108;
              unint64_t v1106 = (v1106 + 1) % v8;
              --v1105;
            }
            while (v1105);
          }
          goto LABEL_901;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v38 = *(void *)v1164;
          if (v1168) {
            goto LABEL_841;
          }
          uint64_t v39 = v1162;
          uint64_t v40 = v1165 - (unsigned char *)v1164;
          if (v1165 == v1164) {
            goto LABEL_179;
          }
          if (!v1162)
          {
            uint64_t v41 = 0;
            goto LABEL_169;
          }
          if ((unint64_t)(v40 - 8) < 8)
          {
            uint64_t v41 = 1;
            uint64_t v42 = (char *)v1164;
            do
            {
LABEL_168:
              uint64_t v164 = *(void *)v42;
              v42 += 8;
              v41 *= v164;
            }
            while (v42 != v1165);
            goto LABEL_169;
          }
          unint64_t v159 = ((unint64_t)(v40 - 8) >> 3) + 1;
          uint64_t v42 = (char *)v1164 + 8 * (v159 & 0x3FFFFFFFFFFFFFFELL);
          BOOL v160 = (char *)v1164 + 8;
          uint64_t v161 = 1;
          uint64_t v162 = v159 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v163 = 1;
          do
          {
            v161 *= *(v160 - 1);
            v163 *= *v160;
            v160 += 2;
            v162 -= 2;
          }
          while (v162);
          uint64_t v41 = v163 * v161;
          if (v159 != (v159 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_168;
          }
LABEL_169:
          unint64_t v165 = v40 >> 3;
          if ((unint64_t)(v40 >> 3) <= 1) {
            unint64_t v165 = 1;
          }
          if (v165 < 2)
          {
            unint64_t v166 = 0;
            uint64_t v167 = 0;
LABEL_176:
            unint64_t v173 = v165 - v166;
            uint64_t v174 = 8 * v166;
            uint64_t v175 = (uint64_t *)((char *)__p + v174);
            unint64_t v176 = (uint64_t *)((char *)v1164 + v174);
            do
            {
              uint64_t v177 = *v176++;
              uint64_t v178 = v177 - 1;
              uint64_t v179 = *v175++;
              v167 += v179 * v178;
              --v173;
            }
            while (v173);
            goto LABEL_178;
          }
          uint64_t v168 = 0;
          uint64_t v169 = 0;
          unint64_t v166 = v165 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v170 = (char *)v1164 + 8;
          uint64_t v171 = (char *)__p + 8;
          unint64_t v172 = v165 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v168 += *(v171 - 1) * (*(v170 - 1) - 1);
            v169 += *v171 * (*v170 - 1);
            v170 += 2;
            v171 += 2;
            v172 -= 2;
          }
          while (v172);
          uint64_t v167 = v169 + v168;
          if (v165 != v166) {
            goto LABEL_176;
          }
LABEL_178:
          if (v41 != v167 + 1) {
LABEL_841:
          }
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_179:
          uint64_t v106 = v1163;
          if (v1163) {
            atomic_fetch_add_explicit(&v1163->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_878;
          }
          uint64_t v180 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_879;
          }
          uint64_t v181 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_517;
          }
          if ((unint64_t)(v180 - 8) < 8)
          {
            uint64_t v181 = 1;
            float32x4_t v182 = v1214;
            do
            {
LABEL_516:
              uint64_t v592 = *(void *)v182;
              v182 += 8;
              v181 *= v592;
            }
            while (v182 != v1215);
            goto LABEL_517;
          }
          unint64_t v587 = ((unint64_t)(v180 - 8) >> 3) + 1;
          float32x4_t v182 = &v1214[8 * (v587 & 0x3FFFFFFFFFFFFFFELL)];
          v588 = v1214 + 8;
          uint64_t v589 = 1;
          uint64_t v590 = v587 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v591 = 1;
          do
          {
            v589 *= *(v588 - 1);
            v591 *= *v588;
            v588 += 2;
            v590 -= 2;
          }
          while (v590);
          uint64_t v181 = v591 * v589;
          if (v587 != (v587 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_516;
          }
LABEL_517:
          unint64_t v593 = v180 >> 3;
          if ((unint64_t)(v180 >> 3) <= 1) {
            unint64_t v593 = 1;
          }
          if (v593 < 2)
          {
            unint64_t v594 = 0;
            uint64_t v595 = 0;
LABEL_524:
            unint64_t v601 = v593 - v594;
            uint64_t v602 = 8 * v594;
            v603 = &v1216[v602];
            v604 = &v1214[v602];
            do
            {
              uint64_t v605 = *(void *)v604;
              v604 += 8;
              uint64_t v606 = v605 - 1;
              uint64_t v607 = *(void *)v603;
              v603 += 8;
              v595 += v607 * v606;
              --v601;
            }
            while (v601);
            goto LABEL_526;
          }
          uint64_t v596 = 0;
          uint64_t v597 = 0;
          unint64_t v594 = v593 & 0xFFFFFFFFFFFFFFFELL;
          v598 = v1214 + 8;
          v599 = v1216 + 8;
          unint64_t v600 = v593 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v596 += *(v599 - 1) * (*(v598 - 1) - 1);
            v597 += *v599 * (*v598 - 1);
            v598 += 2;
            v599 += 2;
            v600 -= 2;
          }
          while (v600);
          uint64_t v595 = v597 + v596;
          if (v593 != v594) {
            goto LABEL_524;
          }
LABEL_526:
          if (v181 != v595 + 1) {
LABEL_878:
          }
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v608 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v609 = v608 >> 3;
            if ((unint64_t)(v608 >> 3) <= 1) {
              unint64_t v609 = 1;
            }
            if (v609 >= 2)
            {
              uint64_t v612 = 0;
              uint64_t v613 = 0;
              unint64_t v610 = v609 & 0xFFFFFFFFFFFFFFFELL;
              v614 = v1214 + 8;
              v615 = v1216 + 8;
              unint64_t v616 = v609 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v612 += *(v615 - 1) * (*(v614 - 1) - 1);
                v613 += *v615 * (*v614 - 1);
                v614 += 2;
                v615 += 2;
                v616 -= 2;
              }
              while (v616);
              uint64_t v611 = v613 + v612;
              if (v609 == v610) {
                goto LABEL_537;
              }
            }
            else
            {
              unint64_t v610 = 0;
              uint64_t v611 = 0;
            }
            unint64_t v617 = v609 - v610;
            uint64_t v618 = 8 * v610;
            v619 = &v1216[v618];
            v620 = &v1214[v618];
            do
            {
              uint64_t v621 = *(void *)v620;
              v620 += 8;
              uint64_t v622 = v621 - 1;
              uint64_t v623 = *(void *)v619;
              v619 += 8;
              v611 += v623 * v622;
              --v617;
            }
            while (v617);
LABEL_537:
            uint64_t v624 = v611 + 1;
            goto LABEL_880;
          }
LABEL_879:
          uint64_t v624 = 0;
LABEL_880:
          if (v1218 + v624)
          {
            unint64_t v1099 = 0;
            unint64_t v1100 = 0;
            do
            {
              unsigned int v1101 = (int)*(float *)(v39 + 4 * v1100);
              if (*((unsigned __int8 *)v1212 + v1099) > v1101) {
                LOBYTE(v1101) = *((unsigned char *)v1212 + v1099);
              }
              *((unsigned char *)v1212 + v1099) = v1101;
              unint64_t v1100 = (v1100 + 1) % v38;
              ++v1099;
            }
            while (v1099 < v1218 + v624);
          }
          goto LABEL_901;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v23 = *(void *)v1164;
          if (v1168) {
            goto LABEL_838;
          }
          uint64_t v24 = v1162;
          uint64_t v25 = v1165 - (unsigned char *)v1164;
          if (v1165 == v1164) {
            goto LABEL_116;
          }
          if (!v1162)
          {
            uint64_t v26 = 0;
            goto LABEL_106;
          }
          if ((unint64_t)(v25 - 8) < 8)
          {
            uint64_t v26 = 1;
            uint64_t v27 = (char *)v1164;
            do
            {
LABEL_105:
              uint64_t v90 = *(void *)v27;
              v27 += 8;
              v26 *= v90;
            }
            while (v27 != v1165);
            goto LABEL_106;
          }
          unint64_t v85 = ((unint64_t)(v25 - 8) >> 3) + 1;
          uint64_t v27 = (char *)v1164 + 8 * (v85 & 0x3FFFFFFFFFFFFFFELL);
          unint64_t v86 = (char *)v1164 + 8;
          uint64_t v87 = 1;
          uint64_t v88 = v85 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v89 = 1;
          do
          {
            v87 *= *(v86 - 1);
            v89 *= *v86;
            v86 += 2;
            v88 -= 2;
          }
          while (v88);
          uint64_t v26 = v89 * v87;
          if (v85 != (v85 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_105;
          }
LABEL_106:
          unint64_t v91 = v25 >> 3;
          if ((unint64_t)(v25 >> 3) <= 1) {
            unint64_t v91 = 1;
          }
          if (v91 < 2)
          {
            unint64_t v92 = 0;
            uint64_t v93 = 0;
LABEL_113:
            unint64_t v99 = v91 - v92;
            uint64_t v100 = 8 * v92;
            unint64_t v101 = (uint64_t *)((char *)__p + v100);
            long long v102 = (uint64_t *)((char *)v1164 + v100);
            do
            {
              uint64_t v103 = *v102++;
              uint64_t v104 = v103 - 1;
              uint64_t v105 = *v101++;
              v93 += v105 * v104;
              --v99;
            }
            while (v99);
            goto LABEL_115;
          }
          uint64_t v94 = 0;
          uint64_t v95 = 0;
          unint64_t v92 = v91 & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v96 = (char *)v1164 + 8;
          unint64_t v97 = (char *)__p + 8;
          unint64_t v98 = v91 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v94 += *(v97 - 1) * (*(v96 - 1) - 1);
            v95 += *v97 * (*v96 - 1);
            v96 += 2;
            v97 += 2;
            v98 -= 2;
          }
          while (v98);
          uint64_t v93 = v95 + v94;
          if (v91 != v92) {
            goto LABEL_113;
          }
LABEL_115:
          if (v26 != v93 + 1) {
LABEL_838:
          }
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_116:
          uint64_t v106 = v1163;
          if (v1163) {
            atomic_fetch_add_explicit(&v1163->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_854;
          }
          uint64_t v107 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_855;
          }
          uint64_t v108 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_442;
          }
          if ((unint64_t)(v107 - 8) < 8)
          {
            uint64_t v108 = 1;
            uint64_t v109 = v1214;
            do
            {
LABEL_441:
              uint64_t v478 = *(void *)v109;
              v109 += 8;
              v108 *= v478;
            }
            while (v109 != v1215);
            goto LABEL_442;
          }
          unint64_t v473 = ((unint64_t)(v107 - 8) >> 3) + 1;
          uint64_t v109 = &v1214[8 * (v473 & 0x3FFFFFFFFFFFFFFELL)];
          v474 = v1214 + 8;
          uint64_t v475 = 1;
          uint64_t v476 = v473 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v477 = 1;
          do
          {
            v475 *= *(v474 - 1);
            v477 *= *v474;
            v474 += 2;
            v476 -= 2;
          }
          while (v476);
          uint64_t v108 = v477 * v475;
          if (v473 != (v473 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_441;
          }
LABEL_442:
          unint64_t v479 = v107 >> 3;
          if ((unint64_t)(v107 >> 3) <= 1) {
            unint64_t v479 = 1;
          }
          if (v479 < 2)
          {
            unint64_t v480 = 0;
            uint64_t v481 = 0;
LABEL_449:
            unint64_t v487 = v479 - v480;
            uint64_t v488 = 8 * v480;
            v489 = &v1216[v488];
            v490 = &v1214[v488];
            do
            {
              uint64_t v491 = *(void *)v490;
              v490 += 8;
              uint64_t v492 = v491 - 1;
              uint64_t v493 = *(void *)v489;
              v489 += 8;
              v481 += v493 * v492;
              --v487;
            }
            while (v487);
            goto LABEL_451;
          }
          uint64_t v482 = 0;
          uint64_t v483 = 0;
          unint64_t v480 = v479 & 0xFFFFFFFFFFFFFFFELL;
          v484 = v1214 + 8;
          v485 = v1216 + 8;
          unint64_t v486 = v479 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v482 += *(v485 - 1) * (*(v484 - 1) - 1);
            v483 += *v485 * (*v484 - 1);
            v484 += 2;
            v485 += 2;
            v486 -= 2;
          }
          while (v486);
          uint64_t v481 = v483 + v482;
          if (v479 != v480) {
            goto LABEL_449;
          }
LABEL_451:
          if (v108 != v481 + 1) {
LABEL_854:
          }
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v494 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v495 = v494 >> 3;
            if ((unint64_t)(v494 >> 3) <= 1) {
              unint64_t v495 = 1;
            }
            if (v495 >= 2)
            {
              uint64_t v498 = 0;
              uint64_t v499 = 0;
              unint64_t v496 = v495 & 0xFFFFFFFFFFFFFFFELL;
              v500 = v1214 + 8;
              v501 = v1216 + 8;
              unint64_t v502 = v495 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v498 += *(v501 - 1) * (*(v500 - 1) - 1);
                v499 += *v501 * (*v500 - 1);
                v500 += 2;
                v501 += 2;
                v502 -= 2;
              }
              while (v502);
              uint64_t v497 = v499 + v498;
              if (v495 == v496) {
                goto LABEL_462;
              }
            }
            else
            {
              unint64_t v496 = 0;
              uint64_t v497 = 0;
            }
            unint64_t v503 = v495 - v496;
            uint64_t v504 = 8 * v496;
            v505 = &v1216[v504];
            v506 = &v1214[v504];
            do
            {
              uint64_t v507 = *(void *)v506;
              v506 += 8;
              uint64_t v508 = v507 - 1;
              uint64_t v509 = *(void *)v505;
              v505 += 8;
              v497 += v509 * v508;
              --v503;
            }
            while (v503);
LABEL_462:
            uint64_t v510 = v497 + 1;
            goto LABEL_856;
          }
LABEL_855:
          uint64_t v510 = 0;
LABEL_856:
          uint64_t v1081 = v1218 + v510;
          if (v1081)
          {
            unint64_t v1082 = 0;
            v1083 = (float *)v1212;
            do
            {
              float v1084 = *(float *)(v24 + 4 * v1082);
              if (*v1083 >= v1084) {
                float v1084 = *v1083;
              }
              *v1083++ = v1084;
              unint64_t v1082 = (v1082 + 1) % v23;
              --v1081;
            }
            while (v1081);
          }
          goto LABEL_901;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v28 = *(void *)v1164;
          if (v1168) {
            goto LABEL_839;
          }
          uint64_t v29 = v1162;
          uint64_t v30 = v1165 - (unsigned char *)v1164;
          if (v1165 == v1164) {
            goto LABEL_137;
          }
          if (!v1162)
          {
            uint64_t v31 = 0;
            goto LABEL_127;
          }
          if ((unint64_t)(v30 - 8) < 8)
          {
            uint64_t v31 = 1;
            unint64_t v32 = (char *)v1164;
            do
            {
LABEL_126:
              uint64_t v115 = *(void *)v32;
              v32 += 8;
              v31 *= v115;
            }
            while (v32 != v1165);
            goto LABEL_127;
          }
          unint64_t v110 = ((unint64_t)(v30 - 8) >> 3) + 1;
          unint64_t v32 = (char *)v1164 + 8 * (v110 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v111 = (char *)v1164 + 8;
          uint64_t v112 = 1;
          uint64_t v113 = v110 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v114 = 1;
          do
          {
            v112 *= *(v111 - 1);
            v114 *= *v111;
            v111 += 2;
            v113 -= 2;
          }
          while (v113);
          uint64_t v31 = v114 * v112;
          if (v110 != (v110 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_126;
          }
LABEL_127:
          unint64_t v116 = v30 >> 3;
          if ((unint64_t)(v30 >> 3) <= 1) {
            unint64_t v116 = 1;
          }
          if (v116 < 2)
          {
            unint64_t v117 = 0;
            uint64_t v118 = 0;
LABEL_134:
            unint64_t v124 = v116 - v117;
            uint64_t v125 = 8 * v117;
            unint64_t v126 = (uint64_t *)((char *)__p + v125);
            uint64_t v127 = (uint64_t *)((char *)v1164 + v125);
            do
            {
              uint64_t v128 = *v127++;
              uint64_t v129 = v128 - 1;
              uint64_t v130 = *v126++;
              v118 += v130 * v129;
              --v124;
            }
            while (v124);
            goto LABEL_136;
          }
          uint64_t v119 = 0;
          uint64_t v120 = 0;
          unint64_t v117 = v116 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v121 = (char *)v1164 + 8;
          uint64_t v122 = (char *)__p + 8;
          unint64_t v123 = v116 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v119 += *(v122 - 1) * (*(v121 - 1) - 1);
            v120 += *v122 * (*v121 - 1);
            v121 += 2;
            v122 += 2;
            v123 -= 2;
          }
          while (v123);
          uint64_t v118 = v120 + v119;
          if (v116 != v117) {
            goto LABEL_134;
          }
LABEL_136:
          if (v31 != v118 + 1) {
LABEL_839:
          }
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_137:
          uint64_t v106 = v1163;
          if (v1163) {
            atomic_fetch_add_explicit(&v1163->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_862;
          }
          uint64_t v131 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_863;
          }
          uint64_t v132 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_467;
          }
          if ((unint64_t)(v131 - 8) < 8)
          {
            uint64_t v132 = 1;
            unint64_t v133 = v1214;
            do
            {
LABEL_466:
              uint64_t v516 = *(void *)v133;
              v133 += 8;
              v132 *= v516;
            }
            while (v133 != v1215);
            goto LABEL_467;
          }
          unint64_t v511 = ((unint64_t)(v131 - 8) >> 3) + 1;
          unint64_t v133 = &v1214[8 * (v511 & 0x3FFFFFFFFFFFFFFELL)];
          v512 = v1214 + 8;
          uint64_t v513 = 1;
          uint64_t v514 = v511 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v515 = 1;
          do
          {
            v513 *= *(v512 - 1);
            v515 *= *v512;
            v512 += 2;
            v514 -= 2;
          }
          while (v514);
          uint64_t v132 = v515 * v513;
          if (v511 != (v511 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_466;
          }
LABEL_467:
          unint64_t v517 = v131 >> 3;
          if ((unint64_t)(v131 >> 3) <= 1) {
            unint64_t v517 = 1;
          }
          if (v517 < 2)
          {
            unint64_t v518 = 0;
            uint64_t v519 = 0;
LABEL_474:
            unint64_t v525 = v517 - v518;
            uint64_t v526 = 8 * v518;
            v527 = &v1216[v526];
            v528 = &v1214[v526];
            do
            {
              uint64_t v529 = *(void *)v528;
              v528 += 8;
              uint64_t v530 = v529 - 1;
              uint64_t v531 = *(void *)v527;
              v527 += 8;
              v519 += v531 * v530;
              --v525;
            }
            while (v525);
            goto LABEL_476;
          }
          uint64_t v520 = 0;
          uint64_t v521 = 0;
          unint64_t v518 = v517 & 0xFFFFFFFFFFFFFFFELL;
          v522 = v1214 + 8;
          v523 = v1216 + 8;
          unint64_t v524 = v517 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v520 += *(v523 - 1) * (*(v522 - 1) - 1);
            v521 += *v523 * (*v522 - 1);
            v522 += 2;
            v523 += 2;
            v524 -= 2;
          }
          while (v524);
          uint64_t v519 = v521 + v520;
          if (v517 != v518) {
            goto LABEL_474;
          }
LABEL_476:
          if (v132 != v519 + 1) {
LABEL_862:
          }
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v532 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v533 = v532 >> 3;
            if ((unint64_t)(v532 >> 3) <= 1) {
              unint64_t v533 = 1;
            }
            if (v533 >= 2)
            {
              uint64_t v536 = 0;
              uint64_t v537 = 0;
              unint64_t v534 = v533 & 0xFFFFFFFFFFFFFFFELL;
              v538 = v1214 + 8;
              v539 = v1216 + 8;
              unint64_t v540 = v533 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v536 += *(v539 - 1) * (*(v538 - 1) - 1);
                v537 += *v539 * (*v538 - 1);
                v538 += 2;
                v539 += 2;
                v540 -= 2;
              }
              while (v540);
              uint64_t v535 = v537 + v536;
              if (v533 == v534) {
                goto LABEL_487;
              }
            }
            else
            {
              unint64_t v534 = 0;
              uint64_t v535 = 0;
            }
            unint64_t v541 = v533 - v534;
            uint64_t v542 = 8 * v534;
            v543 = &v1216[v542];
            v544 = &v1214[v542];
            do
            {
              uint64_t v545 = *(void *)v544;
              v544 += 8;
              uint64_t v546 = v545 - 1;
              uint64_t v547 = *(void *)v543;
              v543 += 8;
              v535 += v547 * v546;
              --v541;
            }
            while (v541);
LABEL_487:
            uint64_t v548 = v535 + 1;
            goto LABEL_864;
          }
LABEL_863:
          uint64_t v548 = 0;
LABEL_864:
          uint64_t v1085 = v1218 + v548;
          if (v1085)
          {
            unint64_t v1086 = 0;
            v1087 = (short float *)v1212;
            do
            {
              _S0 = *(_DWORD *)(v29 + 4 * v1086);
              __asm { FCVT            H0, S0 }
              if (*v1087 >= _H0) {
                _H0 = *v1087;
              }
              *v1087++ = _H0;
              unint64_t v1086 = (v1086 + 1) % v28;
              --v1085;
            }
            while (v1085);
          }
LABEL_901:
          if (v106 && !atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
          if (v1216)
          {
            v1217 = v1216;
            operator delete(v1216);
          }
          if (v1214)
          {
            v1215 = v1214;
            operator delete(v1214);
          }
          unint64_t v1109 = v1213;
          if (v1213 && !atomic_fetch_add(&v1213->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1109->__on_zero_shared)(v1109);
            std::__shared_weak_count::__release_weak(v1109);
          }
          if (__p)
          {
            v1167 = __p;
            operator delete(__p);
          }
          if (v1164)
          {
            uint64_t v1165 = (char *)v1164;
            operator delete(v1164);
          }
          v1110 = v1163;
          if (v1163 && !atomic_fetch_add(&v1163->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1110->__on_zero_shared)(v1110);
            std::__shared_weak_count::__release_weak(v1110);
          }
          if (v1159)
          {
            v1160 = v1159;
            operator delete(v1159);
          }
          if (v1157)
          {
            uint64_t v1158 = v1157;
            operator delete(v1157);
          }
          uint64_t v1111 = v1156;
          if (!v1156) {
            return;
          }
          goto LABEL_1069;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()();
      }
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v1169, (uint64_t)a2);
      v1175 = &v1211;
      nitro::ndarray<half>::ndarray(&v1176, &v1169);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v13 = *(void *)v1178;
          if (v1182) {
            goto LABEL_848;
          }
          uint64_t v14 = v1176;
          uint64_t v15 = v1179 - (unsigned char *)v1178;
          if (v1179 == v1178) {
            goto LABEL_326;
          }
          if (!v1176)
          {
            uint64_t v16 = 0;
            goto LABEL_316;
          }
          if ((unint64_t)(v15 - 8) < 8)
          {
            uint64_t v16 = 1;
            uint64_t v17 = (char *)v1178;
            do
            {
LABEL_315:
              uint64_t v334 = *(void *)v17;
              v17 += 8;
              v16 *= v334;
            }
            while (v17 != v1179);
            goto LABEL_316;
          }
          unint64_t v329 = ((unint64_t)(v15 - 8) >> 3) + 1;
          uint64_t v17 = (char *)v1178 + 8 * (v329 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v330 = (char *)v1178 + 8;
          uint64_t v331 = 1;
          uint64_t v332 = v329 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v333 = 1;
          do
          {
            v331 *= *(v330 - 1);
            v333 *= *v330;
            v330 += 2;
            v332 -= 2;
          }
          while (v332);
          uint64_t v16 = v333 * v331;
          if (v329 != (v329 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_315;
          }
LABEL_316:
          unint64_t v335 = v15 >> 3;
          if ((unint64_t)(v15 >> 3) <= 1) {
            unint64_t v335 = 1;
          }
          if (v335 < 2)
          {
            unint64_t v336 = 0;
            uint64_t v337 = 0;
LABEL_323:
            unint64_t v343 = v335 - v336;
            uint64_t v344 = 8 * v336;
            float32x4x2_t v345 = (uint64_t *)((char *)v1180 + v344);
            uint64_t v346 = (uint64_t *)((char *)v1178 + v344);
            do
            {
              uint64_t v347 = *v346++;
              uint64_t v348 = v347 - 1;
              uint64_t v349 = *v345++;
              v337 += v349 * v348;
              --v343;
            }
            while (v343);
            goto LABEL_325;
          }
          uint64_t v338 = 0;
          uint64_t v339 = 0;
          unint64_t v336 = v335 & 0xFFFFFFFFFFFFFFFELL;
          float32x4x2_t v340 = (char *)v1178 + 8;
          float32x4x2_t v341 = (char *)v1180 + 8;
          unint64_t v342 = v335 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v338 += *(v341 - 1) * (*(v340 - 1) - 1);
            v339 += *v341 * (*v340 - 1);
            v340 += 2;
            v341 += 2;
            v342 -= 2;
          }
          while (v342);
          uint64_t v337 = v339 + v338;
          if (v335 != v336) {
            goto LABEL_323;
          }
LABEL_325:
          if (v16 != v337 + 1) {
LABEL_848:
          }
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_326:
          uint64_t v155 = v1177;
          if (v1177) {
            atomic_fetch_add_explicit(&v1177->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_956;
          }
          uint64_t v350 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_957;
          }
          uint64_t v351 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_692;
          }
          if ((unint64_t)(v350 - 8) < 8)
          {
            uint64_t v351 = 1;
            uint64_t v352 = v1214;
            do
            {
LABEL_691:
              uint64_t v858 = *(void *)v352;
              v352 += 8;
              v351 *= v858;
            }
            while (v352 != v1215);
            goto LABEL_692;
          }
          unint64_t v853 = ((unint64_t)(v350 - 8) >> 3) + 1;
          uint64_t v352 = &v1214[8 * (v853 & 0x3FFFFFFFFFFFFFFELL)];
          v854 = v1214 + 8;
          uint64_t v855 = 1;
          uint64_t v856 = v853 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v857 = 1;
          do
          {
            v855 *= *(v854 - 1);
            v857 *= *v854;
            v854 += 2;
            v856 -= 2;
          }
          while (v856);
          uint64_t v351 = v857 * v855;
          if (v853 != (v853 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_691;
          }
LABEL_692:
          unint64_t v859 = v350 >> 3;
          if ((unint64_t)(v350 >> 3) <= 1) {
            unint64_t v859 = 1;
          }
          if (v859 < 2)
          {
            unint64_t v860 = 0;
            uint64_t v861 = 0;
LABEL_699:
            unint64_t v867 = v859 - v860;
            uint64_t v868 = 8 * v860;
            v869 = &v1216[v868];
            v870 = &v1214[v868];
            do
            {
              uint64_t v871 = *(void *)v870;
              v870 += 8;
              uint64_t v872 = v871 - 1;
              uint64_t v873 = *(void *)v869;
              v869 += 8;
              v861 += v873 * v872;
              --v867;
            }
            while (v867);
            goto LABEL_701;
          }
          uint64_t v862 = 0;
          uint64_t v863 = 0;
          unint64_t v860 = v859 & 0xFFFFFFFFFFFFFFFELL;
          v864 = v1214 + 8;
          v865 = v1216 + 8;
          unint64_t v866 = v859 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v862 += *(v865 - 1) * (*(v864 - 1) - 1);
            v863 += *v865 * (*v864 - 1);
            v864 += 2;
            v865 += 2;
            v866 -= 2;
          }
          while (v866);
          uint64_t v861 = v863 + v862;
          if (v859 != v860) {
            goto LABEL_699;
          }
LABEL_701:
          if (v351 != v861 + 1) {
LABEL_956:
          }
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v874 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v875 = v874 >> 3;
            if ((unint64_t)(v874 >> 3) <= 1) {
              unint64_t v875 = 1;
            }
            if (v875 >= 2)
            {
              uint64_t v878 = 0;
              uint64_t v879 = 0;
              unint64_t v876 = v875 & 0xFFFFFFFFFFFFFFFELL;
              v880 = v1214 + 8;
              v881 = v1216 + 8;
              unint64_t v882 = v875 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v878 += *(v881 - 1) * (*(v880 - 1) - 1);
                v879 += *v881 * (*v880 - 1);
                v880 += 2;
                v881 += 2;
                v882 -= 2;
              }
              while (v882);
              uint64_t v877 = v879 + v878;
              if (v875 == v876) {
                goto LABEL_712;
              }
            }
            else
            {
              unint64_t v876 = 0;
              uint64_t v877 = 0;
            }
            unint64_t v883 = v875 - v876;
            uint64_t v884 = 8 * v876;
            v885 = &v1216[v884];
            v886 = &v1214[v884];
            do
            {
              uint64_t v887 = *(void *)v886;
              v886 += 8;
              uint64_t v888 = v887 - 1;
              uint64_t v889 = *(void *)v885;
              v885 += 8;
              v877 += v889 * v888;
              --v883;
            }
            while (v883);
LABEL_712:
            uint64_t v890 = v877 + 1;
            goto LABEL_958;
          }
LABEL_957:
          uint64_t v890 = 0;
LABEL_958:
          uint64_t v1126 = v1218 + v890;
          if (v1126)
          {
            unint64_t v1127 = 0;
            v1128 = v1212;
            do
            {
              int v1129 = (int)*(short float *)(v14 + 2 * v1127);
              if (*v1128 > v1129) {
                int v1129 = *v1128;
              }
              *v1128++ = v1129;
              unint64_t v1127 = (v1127 + 1) % v13;
              --v1126;
            }
            while (v1126);
          }
          goto LABEL_963;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v59 = *(void *)v1178;
          if (v1182) {
            goto LABEL_846;
          }
          uint64_t v60 = v1176;
          uint64_t v61 = v1179 - (unsigned char *)v1178;
          if (v1179 == v1178) {
            goto LABEL_284;
          }
          if (!v1176)
          {
            uint64_t v62 = 0;
            goto LABEL_274;
          }
          if ((unint64_t)(v61 - 8) < 8)
          {
            uint64_t v62 = 1;
            uint64_t v63 = (char *)v1178;
            do
            {
LABEL_273:
              uint64_t v286 = *(void *)v63;
              v63 += 8;
              v62 *= v286;
            }
            while (v63 != v1179);
            goto LABEL_274;
          }
          unint64_t v281 = ((unint64_t)(v61 - 8) >> 3) + 1;
          uint64_t v63 = (char *)v1178 + 8 * (v281 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v282 = (char *)v1178 + 8;
          uint64_t v283 = 1;
          uint64_t v284 = v281 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v285 = 1;
          do
          {
            v283 *= *(v282 - 1);
            v285 *= *v282;
            v282 += 2;
            v284 -= 2;
          }
          while (v284);
          uint64_t v62 = v285 * v283;
          if (v281 != (v281 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_273;
          }
LABEL_274:
          unint64_t v287 = v61 >> 3;
          if ((unint64_t)(v61 >> 3) <= 1) {
            unint64_t v287 = 1;
          }
          if (v287 < 2)
          {
            unint64_t v288 = 0;
            uint64_t v289 = 0;
LABEL_281:
            unint64_t v295 = v287 - v288;
            uint64_t v296 = 8 * v288;
            unint64_t v297 = (uint64_t *)((char *)v1180 + v296);
            unint64_t v298 = (uint64_t *)((char *)v1178 + v296);
            do
            {
              uint64_t v299 = *v298++;
              uint64_t v300 = v299 - 1;
              uint64_t v301 = *v297++;
              v289 += v301 * v300;
              --v295;
            }
            while (v295);
            goto LABEL_283;
          }
          uint64_t v290 = 0;
          uint64_t v291 = 0;
          unint64_t v288 = v287 & 0xFFFFFFFFFFFFFFFELL;
          int v292 = (char *)v1178 + 8;
          char v293 = (char *)v1180 + 8;
          unint64_t v294 = v287 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v290 += *(v293 - 1) * (*(v292 - 1) - 1);
            v291 += *v293 * (*v292 - 1);
            v292 += 2;
            v293 += 2;
            v294 -= 2;
          }
          while (v294);
          uint64_t v289 = v291 + v290;
          if (v287 != v288) {
            goto LABEL_281;
          }
LABEL_283:
          if (v62 != v289 + 1) {
LABEL_846:
          }
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_284:
          uint64_t v155 = v1177;
          if (v1177) {
            atomic_fetch_add_explicit(&v1177->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_940;
          }
          uint64_t v302 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_941;
          }
          uint64_t v303 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_642;
          }
          if ((unint64_t)(v302 - 8) < 8)
          {
            uint64_t v303 = 1;
            uint64_t v304 = v1214;
            do
            {
LABEL_641:
              uint64_t v782 = *(void *)v304;
              v304 += 8;
              v303 *= v782;
            }
            while (v304 != v1215);
            goto LABEL_642;
          }
          unint64_t v777 = ((unint64_t)(v302 - 8) >> 3) + 1;
          uint64_t v304 = &v1214[8 * (v777 & 0x3FFFFFFFFFFFFFFELL)];
          v778 = v1214 + 8;
          uint64_t v779 = 1;
          uint64_t v780 = v777 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v781 = 1;
          do
          {
            v779 *= *(v778 - 1);
            v781 *= *v778;
            v778 += 2;
            v780 -= 2;
          }
          while (v780);
          uint64_t v303 = v781 * v779;
          if (v777 != (v777 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_641;
          }
LABEL_642:
          unint64_t v783 = v302 >> 3;
          if ((unint64_t)(v302 >> 3) <= 1) {
            unint64_t v783 = 1;
          }
          if (v783 < 2)
          {
            unint64_t v784 = 0;
            uint64_t v785 = 0;
LABEL_649:
            unint64_t v791 = v783 - v784;
            uint64_t v792 = 8 * v784;
            v793 = &v1216[v792];
            v794 = &v1214[v792];
            do
            {
              uint64_t v795 = *(void *)v794;
              v794 += 8;
              uint64_t v796 = v795 - 1;
              uint64_t v797 = *(void *)v793;
              v793 += 8;
              v785 += v797 * v796;
              --v791;
            }
            while (v791);
            goto LABEL_651;
          }
          uint64_t v786 = 0;
          uint64_t v787 = 0;
          unint64_t v784 = v783 & 0xFFFFFFFFFFFFFFFELL;
          v788 = v1214 + 8;
          v789 = v1216 + 8;
          unint64_t v790 = v783 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v786 += *(v789 - 1) * (*(v788 - 1) - 1);
            v787 += *v789 * (*v788 - 1);
            v788 += 2;
            v789 += 2;
            v790 -= 2;
          }
          while (v790);
          uint64_t v785 = v787 + v786;
          if (v783 != v784) {
            goto LABEL_649;
          }
LABEL_651:
          if (v303 != v785 + 1) {
LABEL_940:
          }
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v798 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v799 = v798 >> 3;
            if ((unint64_t)(v798 >> 3) <= 1) {
              unint64_t v799 = 1;
            }
            if (v799 >= 2)
            {
              uint64_t v802 = 0;
              uint64_t v803 = 0;
              unint64_t v800 = v799 & 0xFFFFFFFFFFFFFFFELL;
              v804 = v1214 + 8;
              v805 = v1216 + 8;
              unint64_t v806 = v799 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v802 += *(v805 - 1) * (*(v804 - 1) - 1);
                v803 += *v805 * (*v804 - 1);
                v804 += 2;
                v805 += 2;
                v806 -= 2;
              }
              while (v806);
              uint64_t v801 = v803 + v802;
              if (v799 == v800) {
                goto LABEL_662;
              }
            }
            else
            {
              unint64_t v800 = 0;
              uint64_t v801 = 0;
            }
            unint64_t v807 = v799 - v800;
            uint64_t v808 = 8 * v800;
            v809 = &v1216[v808];
            v810 = &v1214[v808];
            do
            {
              uint64_t v811 = *(void *)v810;
              v810 += 8;
              uint64_t v812 = v811 - 1;
              uint64_t v813 = *(void *)v809;
              v809 += 8;
              v801 += v813 * v812;
              --v807;
            }
            while (v807);
LABEL_662:
            uint64_t v814 = v801 + 1;
            goto LABEL_942;
          }
LABEL_941:
          uint64_t v814 = 0;
LABEL_942:
          if (v1218 + v814)
          {
            unint64_t v1120 = 0;
            unint64_t v1121 = 0;
            do
            {
              unsigned int v1122 = *((unsigned __int8 *)v1212 + v1120);
              if (v1122 <= (int)*(short float *)(v60 + 2 * v1121)) {
                LOBYTE(v1122) = (int)*(short float *)(v60 + 2 * v1121);
              }
              *((unsigned char *)v1212 + v1120) = v1122;
              unint64_t v1121 = (v1121 + 1) % v59;
              ++v1120;
            }
            while (v1120 < v1218 + v814);
          }
          goto LABEL_963;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v33 = *(void *)v1178;
          if (v1182) {
            goto LABEL_840;
          }
          uint64_t v34 = v1176;
          uint64_t v35 = v1179 - (unsigned char *)v1178;
          if (v1179 == v1178) {
            goto LABEL_158;
          }
          if (!v1176)
          {
            uint64_t v36 = 0;
            goto LABEL_148;
          }
          if ((unint64_t)(v35 - 8) < 8)
          {
            uint64_t v36 = 1;
            unint64_t v37 = (char *)v1178;
            do
            {
LABEL_147:
              uint64_t v139 = *(void *)v37;
              v37 += 8;
              v36 *= v139;
            }
            while (v37 != v1179);
            goto LABEL_148;
          }
          unint64_t v134 = ((unint64_t)(v35 - 8) >> 3) + 1;
          unint64_t v37 = (char *)v1178 + 8 * (v134 & 0x3FFFFFFFFFFFFFFELL);
          unint64_t v135 = (char *)v1178 + 8;
          uint64_t v136 = 1;
          uint64_t v137 = v134 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v138 = 1;
          do
          {
            v136 *= *(v135 - 1);
            v138 *= *v135;
            v135 += 2;
            v137 -= 2;
          }
          while (v137);
          uint64_t v36 = v138 * v136;
          if (v134 != (v134 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_147;
          }
LABEL_148:
          unint64_t v140 = v35 >> 3;
          if ((unint64_t)(v35 >> 3) <= 1) {
            unint64_t v140 = 1;
          }
          if (v140 < 2)
          {
            unint64_t v141 = 0;
            uint64_t v142 = 0;
LABEL_155:
            unint64_t v148 = v140 - v141;
            uint64_t v149 = 8 * v141;
            unint64_t v150 = (uint64_t *)((char *)v1180 + v149);
            unint64_t v151 = (uint64_t *)((char *)v1178 + v149);
            do
            {
              uint64_t v152 = *v151++;
              uint64_t v153 = v152 - 1;
              uint64_t v154 = *v150++;
              v142 += v154 * v153;
              --v148;
            }
            while (v148);
            goto LABEL_157;
          }
          uint64_t v143 = 0;
          uint64_t v144 = 0;
          unint64_t v141 = v140 & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v145 = (char *)v1178 + 8;
          uint64_t v146 = (char *)v1180 + 8;
          unint64_t v147 = v140 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v143 += *(v146 - 1) * (*(v145 - 1) - 1);
            v144 += *v146 * (*v145 - 1);
            v145 += 2;
            v146 += 2;
            v147 -= 2;
          }
          while (v147);
          uint64_t v142 = v144 + v143;
          if (v140 != v141) {
            goto LABEL_155;
          }
LABEL_157:
          if (v36 != v142 + 1) {
LABEL_840:
          }
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_158:
          uint64_t v155 = v1177;
          if (v1177) {
            atomic_fetch_add_explicit(&v1177->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_870;
          }
          uint64_t v156 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_871;
          }
          uint64_t v157 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_492;
          }
          if ((unint64_t)(v156 - 8) < 8)
          {
            uint64_t v157 = 1;
            unint64_t v158 = v1214;
            do
            {
LABEL_491:
              uint64_t v554 = *(void *)v158;
              v158 += 8;
              v157 *= v554;
            }
            while (v158 != v1215);
            goto LABEL_492;
          }
          unint64_t v549 = ((unint64_t)(v156 - 8) >> 3) + 1;
          unint64_t v158 = &v1214[8 * (v549 & 0x3FFFFFFFFFFFFFFELL)];
          v550 = v1214 + 8;
          uint64_t v551 = 1;
          uint64_t v552 = v549 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v553 = 1;
          do
          {
            v551 *= *(v550 - 1);
            v553 *= *v550;
            v550 += 2;
            v552 -= 2;
          }
          while (v552);
          uint64_t v157 = v553 * v551;
          if (v549 != (v549 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_491;
          }
LABEL_492:
          unint64_t v555 = v156 >> 3;
          if ((unint64_t)(v156 >> 3) <= 1) {
            unint64_t v555 = 1;
          }
          if (v555 < 2)
          {
            unint64_t v556 = 0;
            uint64_t v557 = 0;
LABEL_499:
            unint64_t v563 = v555 - v556;
            uint64_t v564 = 8 * v556;
            v565 = &v1216[v564];
            v566 = &v1214[v564];
            do
            {
              uint64_t v567 = *(void *)v566;
              v566 += 8;
              uint64_t v568 = v567 - 1;
              uint64_t v569 = *(void *)v565;
              v565 += 8;
              v557 += v569 * v568;
              --v563;
            }
            while (v563);
            goto LABEL_501;
          }
          uint64_t v558 = 0;
          uint64_t v559 = 0;
          unint64_t v556 = v555 & 0xFFFFFFFFFFFFFFFELL;
          v560 = v1214 + 8;
          v561 = v1216 + 8;
          unint64_t v562 = v555 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v558 += *(v561 - 1) * (*(v560 - 1) - 1);
            v559 += *v561 * (*v560 - 1);
            v560 += 2;
            v561 += 2;
            v562 -= 2;
          }
          while (v562);
          uint64_t v557 = v559 + v558;
          if (v555 != v556) {
            goto LABEL_499;
          }
LABEL_501:
          if (v157 != v557 + 1) {
LABEL_870:
          }
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v570 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v571 = v570 >> 3;
            if ((unint64_t)(v570 >> 3) <= 1) {
              unint64_t v571 = 1;
            }
            if (v571 >= 2)
            {
              uint64_t v574 = 0;
              uint64_t v575 = 0;
              unint64_t v572 = v571 & 0xFFFFFFFFFFFFFFFELL;
              v576 = v1214 + 8;
              v577 = v1216 + 8;
              unint64_t v578 = v571 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v574 += *(v577 - 1) * (*(v576 - 1) - 1);
                v575 += *v577 * (*v576 - 1);
                v576 += 2;
                v577 += 2;
                v578 -= 2;
              }
              while (v578);
              uint64_t v573 = v575 + v574;
              if (v571 == v572) {
                goto LABEL_512;
              }
            }
            else
            {
              unint64_t v572 = 0;
              uint64_t v573 = 0;
            }
            unint64_t v579 = v571 - v572;
            uint64_t v580 = 8 * v572;
            v581 = &v1216[v580];
            v582 = &v1214[v580];
            do
            {
              uint64_t v583 = *(void *)v582;
              v582 += 8;
              uint64_t v584 = v583 - 1;
              uint64_t v585 = *(void *)v581;
              v581 += 8;
              v573 += v585 * v584;
              --v579;
            }
            while (v579);
LABEL_512:
            uint64_t v586 = v573 + 1;
            goto LABEL_872;
          }
LABEL_871:
          uint64_t v586 = 0;
LABEL_872:
          uint64_t v1094 = v1218 + v586;
          if (v1094)
          {
            unint64_t v1095 = 0;
            v1096 = (float *)v1212;
            do
            {
              _H0 = *(_WORD *)(v34 + 2 * v1095);
              __asm { FCVT            S0, H0 }
              if (*v1096 >= _S0) {
                _S0 = *v1096;
              }
              *v1096++ = _S0;
              unint64_t v1095 = (v1095 + 1) % v33;
              --v1094;
            }
            while (v1094);
          }
          goto LABEL_963;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v54 = *(void *)v1178;
          if (v1182) {
            goto LABEL_845;
          }
          uint64_t v55 = v1176;
          uint64_t v56 = v1179 - (unsigned char *)v1178;
          if (v1179 == v1178) {
            goto LABEL_263;
          }
          if (!v1176)
          {
            uint64_t v57 = 0;
            goto LABEL_253;
          }
          if ((unint64_t)(v56 - 8) < 8)
          {
            uint64_t v57 = 1;
            unint64_t v58 = (char *)v1178;
            do
            {
LABEL_252:
              uint64_t v262 = *(void *)v58;
              v58 += 8;
              v57 *= v262;
            }
            while (v58 != v1179);
            goto LABEL_253;
          }
          unint64_t v257 = ((unint64_t)(v56 - 8) >> 3) + 1;
          unint64_t v58 = (char *)v1178 + 8 * (v257 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v258 = (char *)v1178 + 8;
          uint64_t v259 = 1;
          uint64_t v260 = v257 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v261 = 1;
          do
          {
            v259 *= *(v258 - 1);
            v261 *= *v258;
            v258 += 2;
            v260 -= 2;
          }
          while (v260);
          uint64_t v57 = v261 * v259;
          if (v257 != (v257 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_252;
          }
LABEL_253:
          unint64_t v263 = v56 >> 3;
          if ((unint64_t)(v56 >> 3) <= 1) {
            unint64_t v263 = 1;
          }
          if (v263 < 2)
          {
            unint64_t v264 = 0;
            uint64_t v265 = 0;
LABEL_260:
            unint64_t v271 = v263 - v264;
            uint64_t v272 = 8 * v264;
            uint64_t v273 = (uint64_t *)((char *)v1180 + v272);
            unint64_t v274 = (uint64_t *)((char *)v1178 + v272);
            do
            {
              uint64_t v275 = *v274++;
              uint64_t v276 = v275 - 1;
              uint64_t v277 = *v273++;
              v265 += v277 * v276;
              --v271;
            }
            while (v271);
            goto LABEL_262;
          }
          uint64_t v266 = 0;
          uint64_t v267 = 0;
          unint64_t v264 = v263 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v268 = (char *)v1178 + 8;
          uint64_t v269 = (char *)v1180 + 8;
          unint64_t v270 = v263 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v266 += *(v269 - 1) * (*(v268 - 1) - 1);
            v267 += *v269 * (*v268 - 1);
            v268 += 2;
            v269 += 2;
            v270 -= 2;
          }
          while (v270);
          uint64_t v265 = v267 + v266;
          if (v263 != v264) {
            goto LABEL_260;
          }
LABEL_262:
          if (v57 != v265 + 1) {
LABEL_845:
          }
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_263:
          uint64_t v155 = v1177;
          if (v1177) {
            atomic_fetch_add_explicit(&v1177->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_932;
          }
          uint64_t v278 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_933;
          }
          uint64_t v279 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_617;
          }
          if ((unint64_t)(v278 - 8) < 8)
          {
            uint64_t v279 = 1;
            unint64_t v280 = v1214;
            do
            {
LABEL_616:
              uint64_t v744 = *(void *)v280;
              v280 += 8;
              v279 *= v744;
            }
            while (v280 != v1215);
            goto LABEL_617;
          }
          unint64_t v739 = ((unint64_t)(v278 - 8) >> 3) + 1;
          unint64_t v280 = &v1214[8 * (v739 & 0x3FFFFFFFFFFFFFFELL)];
          v740 = v1214 + 8;
          uint64_t v741 = 1;
          uint64_t v742 = v739 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v743 = 1;
          do
          {
            v741 *= *(v740 - 1);
            v743 *= *v740;
            v740 += 2;
            v742 -= 2;
          }
          while (v742);
          uint64_t v279 = v743 * v741;
          if (v739 != (v739 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_616;
          }
LABEL_617:
          unint64_t v745 = v278 >> 3;
          if ((unint64_t)(v278 >> 3) <= 1) {
            unint64_t v745 = 1;
          }
          if (v745 < 2)
          {
            unint64_t v746 = 0;
            uint64_t v747 = 0;
LABEL_624:
            unint64_t v753 = v745 - v746;
            uint64_t v754 = 8 * v746;
            v755 = &v1216[v754];
            v756 = &v1214[v754];
            do
            {
              uint64_t v757 = *(void *)v756;
              v756 += 8;
              uint64_t v758 = v757 - 1;
              uint64_t v759 = *(void *)v755;
              v755 += 8;
              v747 += v759 * v758;
              --v753;
            }
            while (v753);
            goto LABEL_626;
          }
          uint64_t v748 = 0;
          uint64_t v749 = 0;
          unint64_t v746 = v745 & 0xFFFFFFFFFFFFFFFELL;
          v750 = v1214 + 8;
          v751 = v1216 + 8;
          unint64_t v752 = v745 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v748 += *(v751 - 1) * (*(v750 - 1) - 1);
            v749 += *v751 * (*v750 - 1);
            v750 += 2;
            v751 += 2;
            v752 -= 2;
          }
          while (v752);
          uint64_t v747 = v749 + v748;
          if (v745 != v746) {
            goto LABEL_624;
          }
LABEL_626:
          if (v279 != v747 + 1) {
LABEL_932:
          }
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v760 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v761 = v760 >> 3;
            if ((unint64_t)(v760 >> 3) <= 1) {
              unint64_t v761 = 1;
            }
            if (v761 >= 2)
            {
              uint64_t v764 = 0;
              uint64_t v765 = 0;
              unint64_t v762 = v761 & 0xFFFFFFFFFFFFFFFELL;
              v766 = v1214 + 8;
              v767 = v1216 + 8;
              unint64_t v768 = v761 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v764 += *(v767 - 1) * (*(v766 - 1) - 1);
                v765 += *v767 * (*v766 - 1);
                v766 += 2;
                v767 += 2;
                v768 -= 2;
              }
              while (v768);
              uint64_t v763 = v765 + v764;
              if (v761 == v762) {
                goto LABEL_637;
              }
            }
            else
            {
              unint64_t v762 = 0;
              uint64_t v763 = 0;
            }
            unint64_t v769 = v761 - v762;
            uint64_t v770 = 8 * v762;
            v771 = &v1216[v770];
            v772 = &v1214[v770];
            do
            {
              uint64_t v773 = *(void *)v772;
              v772 += 8;
              uint64_t v774 = v773 - 1;
              uint64_t v775 = *(void *)v771;
              v771 += 8;
              v763 += v775 * v774;
              --v769;
            }
            while (v769);
LABEL_637:
            uint64_t v776 = v763 + 1;
            goto LABEL_934;
          }
LABEL_933:
          uint64_t v776 = 0;
LABEL_934:
          uint64_t v1116 = v1218 + v776;
          if (v1116)
          {
            unint64_t v1117 = 0;
            v1118 = (short float *)v1212;
            do
            {
              short float v1119 = *(short float *)(v55 + 2 * v1117);
              if (*v1118 >= v1119) {
                short float v1119 = *v1118;
              }
              *v1118++ = v1119;
              unint64_t v1117 = (v1117 + 1) % v54;
              --v1116;
            }
            while (v1116);
          }
LABEL_963:
          if (v155 && !atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
          if (v1216)
          {
            v1217 = v1216;
            operator delete(v1216);
          }
          if (v1214)
          {
            v1215 = v1214;
            operator delete(v1214);
          }
          unint64_t v1130 = v1213;
          if (v1213 && !atomic_fetch_add(&v1213->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1130->__on_zero_shared)(v1130);
            std::__shared_weak_count::__release_weak(v1130);
          }
          if (v1180)
          {
            v1181 = v1180;
            operator delete(v1180);
          }
          if (v1178)
          {
            uint64_t v1179 = (char *)v1178;
            operator delete(v1178);
          }
          unint64_t v1131 = v1177;
          if (v1177 && !atomic_fetch_add(&v1177->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1131->__on_zero_shared)(v1131);
            std::__shared_weak_count::__release_weak(v1131);
          }
          if (v1173)
          {
            v1174 = v1173;
            operator delete(v1173);
          }
          if (v1171)
          {
            uint64_t v1172 = v1171;
            operator delete(v1171);
          }
          uint64_t v1111 = v1170;
          if (v1170)
          {
LABEL_1069:
            if (!atomic_fetch_add(&v1111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v1111->__on_zero_shared)(v1111);
              std::__shared_weak_count::__release_weak(v1111);
            }
          }
          return;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()();
      }
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(nitro::ndarray_container &,nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
}

void sub_19266D338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (v57)
  {
    nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(v57);
    a1 = *(_Unwind_Exception **)(v58 - 48);
  }
  nitro::ndarray<float>::~ndarray((void *)(v58 - 128));
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a57);
  nitro::ndarray<float>::~ndarray(&a48);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(_DWORD *a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v1183, (uint64_t)a2);
      v1189 = &v1211;
      nitro::ndarray<int>::ndarray(&v1190, &v1183);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v3 = *(void *)v1192;
          if (v1196) {
            goto LABEL_853;
          }
          uint64_t v4 = v1190;
          uint64_t v5 = v1193 - (unsigned char *)v1192;
          if (v1193 == v1192) {
            goto LABEL_431;
          }
          if (!v1190)
          {
            uint64_t v6 = 0;
            goto LABEL_421;
          }
          if ((unint64_t)(v5 - 8) < 8)
          {
            uint64_t v6 = 1;
            uint64_t v7 = (char *)v1192;
            do
            {
LABEL_420:
              uint64_t v454 = *(void *)v7;
              v7 += 8;
              v6 *= v454;
            }
            while (v7 != v1193);
            goto LABEL_421;
          }
          unint64_t v449 = ((unint64_t)(v5 - 8) >> 3) + 1;
          uint64_t v7 = (char *)v1192 + 8 * (v449 & 0x3FFFFFFFFFFFFFFELL);
          v450 = (char *)v1192 + 8;
          uint64_t v451 = 1;
          uint64_t v452 = v449 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v453 = 1;
          do
          {
            v451 *= *(v450 - 1);
            v453 *= *v450;
            v450 += 2;
            v452 -= 2;
          }
          while (v452);
          uint64_t v6 = v453 * v451;
          if (v449 != (v449 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_420;
          }
LABEL_421:
          unint64_t v455 = v5 >> 3;
          if ((unint64_t)(v5 >> 3) <= 1) {
            unint64_t v455 = 1;
          }
          if (v455 < 2)
          {
            unint64_t v456 = 0;
            uint64_t v457 = 0;
LABEL_428:
            unint64_t v463 = v455 - v456;
            uint64_t v464 = 8 * v456;
            v465 = (uint64_t *)((char *)v1194 + v464);
            v466 = (uint64_t *)((char *)v1192 + v464);
            do
            {
              uint64_t v467 = *v466++;
              uint64_t v468 = v467 - 1;
              uint64_t v469 = *v465++;
              v457 += v469 * v468;
              --v463;
            }
            while (v463);
            goto LABEL_430;
          }
          uint64_t v458 = 0;
          uint64_t v459 = 0;
          unint64_t v456 = v455 & 0xFFFFFFFFFFFFFFFELL;
          v460 = (char *)v1192 + 8;
          v461 = (char *)v1194 + 8;
          unint64_t v462 = v455 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v458 += *(v461 - 1) * (*(v460 - 1) - 1);
            v459 += *v461 * (*v460 - 1);
            v460 += 2;
            v461 += 2;
            v462 -= 2;
          }
          while (v462);
          uint64_t v457 = v459 + v458;
          if (v455 != v456) {
            goto LABEL_428;
          }
LABEL_430:
          if (v6 != v457 + 1) {
LABEL_853:
          }
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_431:
          unint64_t v253 = v1191;
          if (v1191) {
            atomic_fetch_add_explicit(&v1191->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_1040;
          }
          uint64_t v470 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_1041;
          }
          uint64_t v471 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_817;
          }
          if ((unint64_t)(v470 - 8) < 8)
          {
            uint64_t v471 = 1;
            v472 = v1214;
            do
            {
LABEL_816:
              uint64_t v1048 = *(void *)v472;
              v472 += 8;
              v471 *= v1048;
            }
            while (v472 != v1215);
            goto LABEL_817;
          }
          unint64_t v1043 = ((unint64_t)(v470 - 8) >> 3) + 1;
          v472 = &v1214[8 * (v1043 & 0x3FFFFFFFFFFFFFFELL)];
          v1044 = v1214 + 8;
          uint64_t v1045 = 1;
          uint64_t v1046 = v1043 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v1047 = 1;
          do
          {
            v1045 *= *(v1044 - 1);
            v1047 *= *v1044;
            v1044 += 2;
            v1046 -= 2;
          }
          while (v1046);
          uint64_t v471 = v1047 * v1045;
          if (v1043 != (v1043 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_816;
          }
LABEL_817:
          unint64_t v1049 = v470 >> 3;
          if ((unint64_t)(v470 >> 3) <= 1) {
            unint64_t v1049 = 1;
          }
          if (v1049 < 2)
          {
            unint64_t v1050 = 0;
            uint64_t v1051 = 0;
LABEL_824:
            unint64_t v1057 = v1049 - v1050;
            uint64_t v1058 = 8 * v1050;
            v1059 = &v1216[v1058];
            v1060 = &v1214[v1058];
            do
            {
              uint64_t v1061 = *(void *)v1060;
              v1060 += 8;
              uint64_t v1062 = v1061 - 1;
              uint64_t v1063 = *(void *)v1059;
              v1059 += 8;
              v1051 += v1063 * v1062;
              --v1057;
            }
            while (v1057);
            goto LABEL_826;
          }
          uint64_t v1052 = 0;
          uint64_t v1053 = 0;
          unint64_t v1050 = v1049 & 0xFFFFFFFFFFFFFFFELL;
          v1054 = v1214 + 8;
          v1055 = v1216 + 8;
          unint64_t v1056 = v1049 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v1052 += *(v1055 - 1) * (*(v1054 - 1) - 1);
            v1053 += *v1055 * (*v1054 - 1);
            v1054 += 2;
            v1055 += 2;
            v1056 -= 2;
          }
          while (v1056);
          uint64_t v1051 = v1053 + v1052;
          if (v1049 != v1050) {
            goto LABEL_824;
          }
LABEL_826:
          if (v471 != v1051 + 1) {
LABEL_1040:
          }
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v1064 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v1065 = v1064 >> 3;
            if ((unint64_t)(v1064 >> 3) <= 1) {
              unint64_t v1065 = 1;
            }
            if (v1065 >= 2)
            {
              uint64_t v1068 = 0;
              uint64_t v1069 = 0;
              unint64_t v1066 = v1065 & 0xFFFFFFFFFFFFFFFELL;
              v1070 = v1214 + 8;
              v1071 = v1216 + 8;
              unint64_t v1072 = v1065 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v1068 += *(v1071 - 1) * (*(v1070 - 1) - 1);
                v1069 += *v1071 * (*v1070 - 1);
                v1070 += 2;
                v1071 += 2;
                v1072 -= 2;
              }
              while (v1072);
              uint64_t v1067 = v1069 + v1068;
              if (v1065 == v1066) {
                goto LABEL_837;
              }
            }
            else
            {
              unint64_t v1066 = 0;
              uint64_t v1067 = 0;
            }
            unint64_t v1073 = v1065 - v1066;
            uint64_t v1074 = 8 * v1066;
            v1075 = &v1216[v1074];
            v1076 = &v1214[v1074];
            do
            {
              uint64_t v1077 = *(void *)v1076;
              v1076 += 8;
              uint64_t v1078 = v1077 - 1;
              uint64_t v1079 = *(void *)v1075;
              v1075 += 8;
              v1067 += v1079 * v1078;
              --v1073;
            }
            while (v1073);
LABEL_837:
            uint64_t v1080 = v1067 + 1;
            goto LABEL_1042;
          }
LABEL_1041:
          uint64_t v1080 = 0;
LABEL_1042:
          uint64_t v1149 = v1218 + v1080;
          if (v1149)
          {
            unint64_t v1150 = 0;
            uint64_t v1151 = v1212;
            do
            {
              int v1152 = *(_DWORD *)(v4 + 4 * v1150);
              if (v1152 >= *v1151) {
                int v1152 = *v1151;
              }
              *v1151++ = v1152;
              unint64_t v1150 = (v1150 + 1) % v3;
              --v1149;
            }
            while (v1149);
          }
          goto LABEL_1047;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v80 = *(void *)v1192;
          if (v1196) {
            goto LABEL_852;
          }
          uint64_t v81 = v1190;
          uint64_t v82 = v1193 - (unsigned char *)v1192;
          if (v1193 == v1192) {
            goto LABEL_410;
          }
          if (!v1190)
          {
            uint64_t v83 = 0;
            goto LABEL_400;
          }
          if ((unint64_t)(v82 - 8) < 8)
          {
            uint64_t v83 = 1;
            uint64_t v84 = (char *)v1192;
            do
            {
LABEL_399:
              uint64_t v430 = *(void *)v84;
              v84 += 8;
              v83 *= v430;
            }
            while (v84 != v1193);
            goto LABEL_400;
          }
          unint64_t v425 = ((unint64_t)(v82 - 8) >> 3) + 1;
          uint64_t v84 = (char *)v1192 + 8 * (v425 & 0x3FFFFFFFFFFFFFFELL);
          v426 = (char *)v1192 + 8;
          uint64_t v427 = 1;
          uint64_t v428 = v425 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v429 = 1;
          do
          {
            v427 *= *(v426 - 1);
            v429 *= *v426;
            v426 += 2;
            v428 -= 2;
          }
          while (v428);
          uint64_t v83 = v429 * v427;
          if (v425 != (v425 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_399;
          }
LABEL_400:
          unint64_t v431 = v82 >> 3;
          if ((unint64_t)(v82 >> 3) <= 1) {
            unint64_t v431 = 1;
          }
          if (v431 < 2)
          {
            unint64_t v432 = 0;
            uint64_t v433 = 0;
LABEL_407:
            unint64_t v439 = v431 - v432;
            uint64_t v440 = 8 * v432;
            v441 = (uint64_t *)((char *)v1194 + v440);
            v442 = (uint64_t *)((char *)v1192 + v440);
            do
            {
              uint64_t v443 = *v442++;
              uint64_t v444 = v443 - 1;
              uint64_t v445 = *v441++;
              v433 += v445 * v444;
              --v439;
            }
            while (v439);
            goto LABEL_409;
          }
          uint64_t v434 = 0;
          uint64_t v435 = 0;
          unint64_t v432 = v431 & 0xFFFFFFFFFFFFFFFELL;
          v436 = (char *)v1192 + 8;
          v437 = (char *)v1194 + 8;
          unint64_t v438 = v431 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v434 += *(v437 - 1) * (*(v436 - 1) - 1);
            v435 += *v437 * (*v436 - 1);
            v436 += 2;
            v437 += 2;
            v438 -= 2;
          }
          while (v438);
          uint64_t v433 = v435 + v434;
          if (v431 != v432) {
            goto LABEL_407;
          }
LABEL_409:
          if (v83 != v433 + 1) {
LABEL_852:
          }
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_410:
          unint64_t v253 = v1191;
          if (v1191) {
            atomic_fetch_add_explicit(&v1191->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_1032;
          }
          uint64_t v446 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_1033;
          }
          uint64_t v447 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_792;
          }
          if ((unint64_t)(v446 - 8) < 8)
          {
            uint64_t v447 = 1;
            v448 = v1214;
            do
            {
LABEL_791:
              uint64_t v1010 = *(void *)v448;
              v448 += 8;
              v447 *= v1010;
            }
            while (v448 != v1215);
            goto LABEL_792;
          }
          unint64_t v1005 = ((unint64_t)(v446 - 8) >> 3) + 1;
          v448 = &v1214[8 * (v1005 & 0x3FFFFFFFFFFFFFFELL)];
          v1006 = v1214 + 8;
          uint64_t v1007 = 1;
          uint64_t v1008 = v1005 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v1009 = 1;
          do
          {
            v1007 *= *(v1006 - 1);
            v1009 *= *v1006;
            v1006 += 2;
            v1008 -= 2;
          }
          while (v1008);
          uint64_t v447 = v1009 * v1007;
          if (v1005 != (v1005 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_791;
          }
LABEL_792:
          unint64_t v1011 = v446 >> 3;
          if ((unint64_t)(v446 >> 3) <= 1) {
            unint64_t v1011 = 1;
          }
          if (v1011 < 2)
          {
            unint64_t v1012 = 0;
            uint64_t v1013 = 0;
LABEL_799:
            unint64_t v1019 = v1011 - v1012;
            uint64_t v1020 = 8 * v1012;
            v1021 = &v1216[v1020];
            v1022 = &v1214[v1020];
            do
            {
              uint64_t v1023 = *(void *)v1022;
              v1022 += 8;
              uint64_t v1024 = v1023 - 1;
              uint64_t v1025 = *(void *)v1021;
              v1021 += 8;
              v1013 += v1025 * v1024;
              --v1019;
            }
            while (v1019);
            goto LABEL_801;
          }
          uint64_t v1014 = 0;
          uint64_t v1015 = 0;
          unint64_t v1012 = v1011 & 0xFFFFFFFFFFFFFFFELL;
          v1016 = v1214 + 8;
          v1017 = v1216 + 8;
          unint64_t v1018 = v1011 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v1014 += *(v1017 - 1) * (*(v1016 - 1) - 1);
            v1015 += *v1017 * (*v1016 - 1);
            v1016 += 2;
            v1017 += 2;
            v1018 -= 2;
          }
          while (v1018);
          uint64_t v1013 = v1015 + v1014;
          if (v1011 != v1012) {
            goto LABEL_799;
          }
LABEL_801:
          if (v447 != v1013 + 1) {
LABEL_1032:
          }
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v1026 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v1027 = v1026 >> 3;
            if ((unint64_t)(v1026 >> 3) <= 1) {
              unint64_t v1027 = 1;
            }
            if (v1027 >= 2)
            {
              uint64_t v1030 = 0;
              uint64_t v1031 = 0;
              unint64_t v1028 = v1027 & 0xFFFFFFFFFFFFFFFELL;
              v1032 = v1214 + 8;
              v1033 = v1216 + 8;
              unint64_t v1034 = v1027 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v1030 += *(v1033 - 1) * (*(v1032 - 1) - 1);
                v1031 += *v1033 * (*v1032 - 1);
                v1032 += 2;
                v1033 += 2;
                v1034 -= 2;
              }
              while (v1034);
              uint64_t v1029 = v1031 + v1030;
              if (v1027 == v1028) {
                goto LABEL_812;
              }
            }
            else
            {
              unint64_t v1028 = 0;
              uint64_t v1029 = 0;
            }
            unint64_t v1035 = v1027 - v1028;
            uint64_t v1036 = 8 * v1028;
            v1037 = &v1216[v1036];
            v1038 = &v1214[v1036];
            do
            {
              uint64_t v1039 = *(void *)v1038;
              v1038 += 8;
              uint64_t v1040 = v1039 - 1;
              uint64_t v1041 = *(void *)v1037;
              v1037 += 8;
              v1029 += v1041 * v1040;
              --v1035;
            }
            while (v1035);
LABEL_812:
            uint64_t v1042 = v1029 + 1;
            goto LABEL_1034;
          }
LABEL_1033:
          uint64_t v1042 = 0;
LABEL_1034:
          if (v1218 + v1042)
          {
            unint64_t v1146 = 0;
            unint64_t v1147 = 0;
            do
            {
              unsigned int v1148 = *(unsigned __int8 *)(v81 + 4 * v1147);
              if (*((unsigned __int8 *)v1212 + v1146) < v1148) {
                LOBYTE(v1148) = *((unsigned char *)v1212 + v1146);
              }
              *((unsigned char *)v1212 + v1146) = v1148;
              unint64_t v1147 = (v1147 + 1) % v80;
              ++v1146;
            }
            while (v1146 < v1218 + v1042);
          }
          goto LABEL_1047;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v49 = *(void *)v1192;
          if (v1196) {
            goto LABEL_844;
          }
          uint64_t v50 = v1190;
          uint64_t v51 = v1193 - (unsigned char *)v1192;
          if (v1193 == v1192) {
            goto LABEL_242;
          }
          if (!v1190)
          {
            uint64_t v52 = 0;
            goto LABEL_232;
          }
          if ((unint64_t)(v51 - 8) < 8)
          {
            uint64_t v52 = 1;
            unint64_t v53 = (char *)v1192;
            do
            {
LABEL_231:
              uint64_t v237 = *(void *)v53;
              v53 += 8;
              v52 *= v237;
            }
            while (v53 != v1193);
            goto LABEL_232;
          }
          unint64_t v232 = ((unint64_t)(v51 - 8) >> 3) + 1;
          unint64_t v53 = (char *)v1192 + 8 * (v232 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v233 = (char *)v1192 + 8;
          uint64_t v234 = 1;
          uint64_t v235 = v232 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v236 = 1;
          do
          {
            v234 *= *(v233 - 1);
            v236 *= *v233;
            v233 += 2;
            v235 -= 2;
          }
          while (v235);
          uint64_t v52 = v236 * v234;
          if (v232 != (v232 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_231;
          }
LABEL_232:
          unint64_t v238 = v51 >> 3;
          if ((unint64_t)(v51 >> 3) <= 1) {
            unint64_t v238 = 1;
          }
          if (v238 < 2)
          {
            unint64_t v239 = 0;
            uint64_t v240 = 0;
LABEL_239:
            unint64_t v246 = v238 - v239;
            uint64_t v247 = 8 * v239;
            unint64_t v248 = (uint64_t *)((char *)v1194 + v247);
            unint64_t v249 = (uint64_t *)((char *)v1192 + v247);
            do
            {
              uint64_t v250 = *v249++;
              uint64_t v251 = v250 - 1;
              uint64_t v252 = *v248++;
              v240 += v252 * v251;
              --v246;
            }
            while (v246);
            goto LABEL_241;
          }
          uint64_t v241 = 0;
          uint64_t v242 = 0;
          unint64_t v239 = v238 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v243 = (char *)v1192 + 8;
          uint64_t v244 = (char *)v1194 + 8;
          unint64_t v245 = v238 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v241 += *(v244 - 1) * (*(v243 - 1) - 1);
            v242 += *v244 * (*v243 - 1);
            v243 += 2;
            v244 += 2;
            v245 -= 2;
          }
          while (v245);
          uint64_t v240 = v242 + v241;
          if (v238 != v239) {
            goto LABEL_239;
          }
LABEL_241:
          if (v52 != v240 + 1) {
LABEL_844:
          }
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_242:
          unint64_t v253 = v1191;
          if (v1191) {
            atomic_fetch_add_explicit(&v1191->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_924;
          }
          uint64_t v254 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_925;
          }
          uint64_t v255 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_592;
          }
          if ((unint64_t)(v254 - 8) < 8)
          {
            uint64_t v255 = 1;
            unint64_t v256 = v1214;
            do
            {
LABEL_591:
              uint64_t v706 = *(void *)v256;
              v256 += 8;
              v255 *= v706;
            }
            while (v256 != v1215);
            goto LABEL_592;
          }
          unint64_t v701 = ((unint64_t)(v254 - 8) >> 3) + 1;
          unint64_t v256 = &v1214[8 * (v701 & 0x3FFFFFFFFFFFFFFELL)];
          v702 = v1214 + 8;
          uint64_t v703 = 1;
          uint64_t v704 = v701 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v705 = 1;
          do
          {
            v703 *= *(v702 - 1);
            v705 *= *v702;
            v702 += 2;
            v704 -= 2;
          }
          while (v704);
          uint64_t v255 = v705 * v703;
          if (v701 != (v701 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_591;
          }
LABEL_592:
          unint64_t v707 = v254 >> 3;
          if ((unint64_t)(v254 >> 3) <= 1) {
            unint64_t v707 = 1;
          }
          if (v707 < 2)
          {
            unint64_t v708 = 0;
            uint64_t v709 = 0;
LABEL_599:
            unint64_t v715 = v707 - v708;
            uint64_t v716 = 8 * v708;
            v717 = &v1216[v716];
            v718 = &v1214[v716];
            do
            {
              uint64_t v719 = *(void *)v718;
              v718 += 8;
              uint64_t v720 = v719 - 1;
              uint64_t v721 = *(void *)v717;
              v717 += 8;
              v709 += v721 * v720;
              --v715;
            }
            while (v715);
            goto LABEL_601;
          }
          uint64_t v710 = 0;
          uint64_t v711 = 0;
          unint64_t v708 = v707 & 0xFFFFFFFFFFFFFFFELL;
          v712 = v1214 + 8;
          v713 = v1216 + 8;
          unint64_t v714 = v707 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v710 += *(v713 - 1) * (*(v712 - 1) - 1);
            v711 += *v713 * (*v712 - 1);
            v712 += 2;
            v713 += 2;
            v714 -= 2;
          }
          while (v714);
          uint64_t v709 = v711 + v710;
          if (v707 != v708) {
            goto LABEL_599;
          }
LABEL_601:
          if (v255 != v709 + 1) {
LABEL_924:
          }
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v722 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v723 = v722 >> 3;
            if ((unint64_t)(v722 >> 3) <= 1) {
              unint64_t v723 = 1;
            }
            if (v723 >= 2)
            {
              uint64_t v726 = 0;
              uint64_t v727 = 0;
              unint64_t v724 = v723 & 0xFFFFFFFFFFFFFFFELL;
              v728 = v1214 + 8;
              v729 = v1216 + 8;
              unint64_t v730 = v723 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v726 += *(v729 - 1) * (*(v728 - 1) - 1);
                v727 += *v729 * (*v728 - 1);
                v728 += 2;
                v729 += 2;
                v730 -= 2;
              }
              while (v730);
              uint64_t v725 = v727 + v726;
              if (v723 == v724) {
                goto LABEL_612;
              }
            }
            else
            {
              unint64_t v724 = 0;
              uint64_t v725 = 0;
            }
            unint64_t v731 = v723 - v724;
            uint64_t v732 = 8 * v724;
            v733 = &v1216[v732];
            v734 = &v1214[v732];
            do
            {
              uint64_t v735 = *(void *)v734;
              v734 += 8;
              uint64_t v736 = v735 - 1;
              uint64_t v737 = *(void *)v733;
              v733 += 8;
              v725 += v737 * v736;
              --v731;
            }
            while (v731);
LABEL_612:
            uint64_t v738 = v725 + 1;
            goto LABEL_926;
          }
LABEL_925:
          uint64_t v738 = 0;
LABEL_926:
          uint64_t v1112 = v1218 + v738;
          if (v1112)
          {
            unint64_t v1113 = 0;
            unint64_t v1114 = (float *)v1212;
            do
            {
              float v1115 = (float)*(int *)(v50 + 4 * v1113);
              if (*v1114 <= v1115) {
                float v1115 = *v1114;
              }
              *v1114++ = v1115;
              unint64_t v1113 = (v1113 + 1) % v49;
              --v1112;
            }
            while (v1112);
          }
          goto LABEL_1047;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v70 = *(void *)v1192;
          if (v1196) {
            goto LABEL_849;
          }
          uint64_t v71 = v1190;
          uint64_t v72 = v1193 - (unsigned char *)v1192;
          if (v1193 == v1192) {
            goto LABEL_347;
          }
          if (!v1190)
          {
            uint64_t v73 = 0;
            goto LABEL_337;
          }
          if ((unint64_t)(v72 - 8) < 8)
          {
            uint64_t v73 = 1;
            uint64_t v74 = (char *)v1192;
            do
            {
LABEL_336:
              uint64_t v358 = *(void *)v74;
              v74 += 8;
              v73 *= v358;
            }
            while (v74 != v1193);
            goto LABEL_337;
          }
          unint64_t v353 = ((unint64_t)(v72 - 8) >> 3) + 1;
          uint64_t v74 = (char *)v1192 + 8 * (v353 & 0x3FFFFFFFFFFFFFFELL);
          v354 = (char *)v1192 + 8;
          uint64_t v355 = 1;
          uint64_t v356 = v353 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v357 = 1;
          do
          {
            v355 *= *(v354 - 1);
            v357 *= *v354;
            v354 += 2;
            v356 -= 2;
          }
          while (v356);
          uint64_t v73 = v357 * v355;
          if (v353 != (v353 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_336;
          }
LABEL_337:
          unint64_t v359 = v72 >> 3;
          if ((unint64_t)(v72 >> 3) <= 1) {
            unint64_t v359 = 1;
          }
          if (v359 < 2)
          {
            unint64_t v360 = 0;
            uint64_t v361 = 0;
LABEL_344:
            unint64_t v367 = v359 - v360;
            uint64_t v368 = 8 * v360;
            v369 = (uint64_t *)((char *)v1194 + v368);
            v370 = (uint64_t *)((char *)v1192 + v368);
            do
            {
              uint64_t v371 = *v370++;
              uint64_t v372 = v371 - 1;
              uint64_t v373 = *v369++;
              v361 += v373 * v372;
              --v367;
            }
            while (v367);
            goto LABEL_346;
          }
          uint64_t v362 = 0;
          uint64_t v363 = 0;
          unint64_t v360 = v359 & 0xFFFFFFFFFFFFFFFELL;
          v364 = (char *)v1192 + 8;
          v365 = (char *)v1194 + 8;
          unint64_t v366 = v359 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v362 += *(v365 - 1) * (*(v364 - 1) - 1);
            v363 += *v365 * (*v364 - 1);
            v364 += 2;
            v365 += 2;
            v366 -= 2;
          }
          while (v366);
          uint64_t v361 = v363 + v362;
          if (v359 != v360) {
            goto LABEL_344;
          }
LABEL_346:
          if (v73 != v361 + 1) {
LABEL_849:
          }
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_347:
          unint64_t v253 = v1191;
          if (v1191) {
            atomic_fetch_add_explicit(&v1191->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_986;
          }
          uint64_t v374 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_987;
          }
          uint64_t v375 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_717;
          }
          if ((unint64_t)(v374 - 8) < 8)
          {
            uint64_t v375 = 1;
            v376 = v1214;
            do
            {
LABEL_716:
              uint64_t v896 = *(void *)v376;
              v376 += 8;
              v375 *= v896;
            }
            while (v376 != v1215);
            goto LABEL_717;
          }
          unint64_t v891 = ((unint64_t)(v374 - 8) >> 3) + 1;
          v376 = &v1214[8 * (v891 & 0x3FFFFFFFFFFFFFFELL)];
          v892 = v1214 + 8;
          uint64_t v893 = 1;
          uint64_t v894 = v891 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v895 = 1;
          do
          {
            v893 *= *(v892 - 1);
            v895 *= *v892;
            v892 += 2;
            v894 -= 2;
          }
          while (v894);
          uint64_t v375 = v895 * v893;
          if (v891 != (v891 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_716;
          }
LABEL_717:
          unint64_t v897 = v374 >> 3;
          if ((unint64_t)(v374 >> 3) <= 1) {
            unint64_t v897 = 1;
          }
          if (v897 < 2)
          {
            unint64_t v898 = 0;
            uint64_t v899 = 0;
LABEL_724:
            unint64_t v905 = v897 - v898;
            uint64_t v906 = 8 * v898;
            v907 = &v1216[v906];
            v908 = &v1214[v906];
            do
            {
              uint64_t v909 = *(void *)v908;
              v908 += 8;
              uint64_t v910 = v909 - 1;
              uint64_t v911 = *(void *)v907;
              v907 += 8;
              v899 += v911 * v910;
              --v905;
            }
            while (v905);
            goto LABEL_726;
          }
          uint64_t v900 = 0;
          uint64_t v901 = 0;
          unint64_t v898 = v897 & 0xFFFFFFFFFFFFFFFELL;
          v902 = v1214 + 8;
          v903 = v1216 + 8;
          unint64_t v904 = v897 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v900 += *(v903 - 1) * (*(v902 - 1) - 1);
            v901 += *v903 * (*v902 - 1);
            v902 += 2;
            v903 += 2;
            v904 -= 2;
          }
          while (v904);
          uint64_t v899 = v901 + v900;
          if (v897 != v898) {
            goto LABEL_724;
          }
LABEL_726:
          if (v375 != v899 + 1) {
LABEL_986:
          }
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v912 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v913 = v912 >> 3;
            if ((unint64_t)(v912 >> 3) <= 1) {
              unint64_t v913 = 1;
            }
            if (v913 >= 2)
            {
              uint64_t v916 = 0;
              uint64_t v917 = 0;
              unint64_t v914 = v913 & 0xFFFFFFFFFFFFFFFELL;
              v918 = v1214 + 8;
              v919 = v1216 + 8;
              unint64_t v920 = v913 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v916 += *(v919 - 1) * (*(v918 - 1) - 1);
                v917 += *v919 * (*v918 - 1);
                v918 += 2;
                v919 += 2;
                v920 -= 2;
              }
              while (v920);
              uint64_t v915 = v917 + v916;
              if (v913 == v914) {
                goto LABEL_737;
              }
            }
            else
            {
              unint64_t v914 = 0;
              uint64_t v915 = 0;
            }
            unint64_t v921 = v913 - v914;
            uint64_t v922 = 8 * v914;
            v923 = &v1216[v922];
            v924 = &v1214[v922];
            do
            {
              uint64_t v925 = *(void *)v924;
              v924 += 8;
              uint64_t v926 = v925 - 1;
              uint64_t v927 = *(void *)v923;
              v923 += 8;
              v915 += v927 * v926;
              --v921;
            }
            while (v921);
LABEL_737:
            uint64_t v928 = v915 + 1;
            goto LABEL_988;
          }
LABEL_987:
          uint64_t v928 = 0;
LABEL_988:
          uint64_t v1132 = v1218 + v928;
          if (v1132)
          {
            unint64_t v1133 = 0;
            v1134 = (short float *)v1212;
            do
            {
              _S0 = (float)*(int *)(v71 + 4 * v1133);
              __asm { FCVT            H0, S0 }
              if (*v1134 <= _H0) {
                _H0 = *v1134;
              }
              *v1134++ = _H0;
              unint64_t v1133 = (v1133 + 1) % v70;
              --v1132;
            }
            while (v1132);
          }
LABEL_1047:
          if (v253 && !atomic_fetch_add(&v253->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
            std::__shared_weak_count::__release_weak(v253);
          }
          if (v1216)
          {
            v1217 = v1216;
            operator delete(v1216);
          }
          if (v1214)
          {
            v1215 = v1214;
            operator delete(v1214);
          }
          v1153 = v1213;
          if (v1213 && !atomic_fetch_add(&v1213->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1153->__on_zero_shared)(v1153);
            std::__shared_weak_count::__release_weak(v1153);
          }
          if (v1194)
          {
            v1195 = v1194;
            operator delete(v1194);
          }
          if (v1192)
          {
            uint64_t v1193 = (char *)v1192;
            operator delete(v1192);
          }
          v1154 = v1191;
          if (v1191 && !atomic_fetch_add(&v1191->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1154->__on_zero_shared)(v1154);
            std::__shared_weak_count::__release_weak(v1154);
          }
          if (v1187)
          {
            v1188 = v1187;
            operator delete(v1187);
          }
          if (v1185)
          {
            uint64_t v1186 = v1185;
            operator delete(v1185);
          }
          uint64_t v1111 = v1184;
          if (v1184) {
            goto LABEL_1069;
          }
          return;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()();
      }
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1197, (uint64_t)a2);
      v1203 = &v1211;
      nitro::ndarray<unsigned char>::ndarray(&v1204, &v1197);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v18 = *(void *)v1206;
          if (v1210) {
            goto LABEL_851;
          }
          uint64_t v19 = v1204;
          uint64_t v20 = v1207 - v1206;
          if (v1207 == v1206) {
            goto LABEL_389;
          }
          if (!v1204)
          {
            uint64_t v21 = 0;
            goto LABEL_379;
          }
          if ((unint64_t)(v20 - 8) < 8)
          {
            uint64_t v21 = 1;
            unint64_t v22 = v1206;
            do
            {
LABEL_378:
              uint64_t v406 = *(void *)v22;
              v22 += 8;
              v21 *= v406;
            }
            while (v22 != v1207);
            goto LABEL_379;
          }
          unint64_t v401 = ((unint64_t)(v20 - 8) >> 3) + 1;
          unint64_t v22 = &v1206[8 * (v401 & 0x3FFFFFFFFFFFFFFELL)];
          v402 = v1206 + 8;
          uint64_t v403 = 1;
          uint64_t v404 = v401 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v405 = 1;
          do
          {
            v403 *= *(v402 - 1);
            v405 *= *v402;
            v402 += 2;
            v404 -= 2;
          }
          while (v404);
          uint64_t v21 = v405 * v403;
          if (v401 != (v401 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_378;
          }
LABEL_379:
          unint64_t v407 = v20 >> 3;
          if ((unint64_t)(v20 >> 3) <= 1) {
            unint64_t v407 = 1;
          }
          if (v407 < 2)
          {
            unint64_t v408 = 0;
            uint64_t v409 = 0;
LABEL_386:
            unint64_t v415 = v407 - v408;
            uint64_t v416 = 8 * v408;
            v417 = &v1208[v416];
            v418 = &v1206[v416];
            do
            {
              uint64_t v419 = *(void *)v418;
              v418 += 8;
              uint64_t v420 = v419 - 1;
              uint64_t v421 = *(void *)v417;
              v417 += 8;
              v409 += v421 * v420;
              --v415;
            }
            while (v415);
            goto LABEL_388;
          }
          uint64_t v410 = 0;
          uint64_t v411 = 0;
          unint64_t v408 = v407 & 0xFFFFFFFFFFFFFFFELL;
          v412 = v1206 + 8;
          v413 = v1208 + 8;
          unint64_t v414 = v407 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v410 += *(v413 - 1) * (*(v412 - 1) - 1);
            v411 += *v413 * (*v412 - 1);
            v412 += 2;
            v413 += 2;
            v414 -= 2;
          }
          while (v414);
          uint64_t v409 = v411 + v410;
          if (v407 != v408) {
            goto LABEL_386;
          }
LABEL_388:
          if (v21 != v409 + 1) {
LABEL_851:
          }
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_389:
          uint64_t v204 = v1205;
          if (v1205) {
            atomic_fetch_add_explicit(&v1205->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_1002;
          }
          uint64_t v422 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_1003;
          }
          uint64_t v423 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_767;
          }
          if ((unint64_t)(v422 - 8) < 8)
          {
            uint64_t v423 = 1;
            v424 = v1214;
            do
            {
LABEL_766:
              uint64_t v972 = *(void *)v424;
              v424 += 8;
              v423 *= v972;
            }
            while (v424 != v1215);
            goto LABEL_767;
          }
          unint64_t v967 = ((unint64_t)(v422 - 8) >> 3) + 1;
          v424 = &v1214[8 * (v967 & 0x3FFFFFFFFFFFFFFELL)];
          v968 = v1214 + 8;
          uint64_t v969 = 1;
          uint64_t v970 = v967 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v971 = 1;
          do
          {
            v969 *= *(v968 - 1);
            v971 *= *v968;
            v968 += 2;
            v970 -= 2;
          }
          while (v970);
          uint64_t v423 = v971 * v969;
          if (v967 != (v967 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_766;
          }
LABEL_767:
          unint64_t v973 = v422 >> 3;
          if ((unint64_t)(v422 >> 3) <= 1) {
            unint64_t v973 = 1;
          }
          if (v973 < 2)
          {
            unint64_t v974 = 0;
            uint64_t v975 = 0;
LABEL_774:
            unint64_t v981 = v973 - v974;
            uint64_t v982 = 8 * v974;
            v983 = &v1216[v982];
            v984 = &v1214[v982];
            do
            {
              uint64_t v985 = *(void *)v984;
              v984 += 8;
              uint64_t v986 = v985 - 1;
              uint64_t v987 = *(void *)v983;
              v983 += 8;
              v975 += v987 * v986;
              --v981;
            }
            while (v981);
            goto LABEL_776;
          }
          uint64_t v976 = 0;
          uint64_t v977 = 0;
          unint64_t v974 = v973 & 0xFFFFFFFFFFFFFFFELL;
          v978 = v1214 + 8;
          v979 = v1216 + 8;
          unint64_t v980 = v973 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v976 += *(v979 - 1) * (*(v978 - 1) - 1);
            v977 += *v979 * (*v978 - 1);
            v978 += 2;
            v979 += 2;
            v980 -= 2;
          }
          while (v980);
          uint64_t v975 = v977 + v976;
          if (v973 != v974) {
            goto LABEL_774;
          }
LABEL_776:
          if (v423 != v975 + 1) {
LABEL_1002:
          }
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v988 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v989 = v988 >> 3;
            if ((unint64_t)(v988 >> 3) <= 1) {
              unint64_t v989 = 1;
            }
            if (v989 >= 2)
            {
              uint64_t v992 = 0;
              uint64_t v993 = 0;
              unint64_t v990 = v989 & 0xFFFFFFFFFFFFFFFELL;
              v994 = v1214 + 8;
              v995 = v1216 + 8;
              unint64_t v996 = v989 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v992 += *(v995 - 1) * (*(v994 - 1) - 1);
                v993 += *v995 * (*v994 - 1);
                v994 += 2;
                v995 += 2;
                v996 -= 2;
              }
              while (v996);
              uint64_t v991 = v993 + v992;
              if (v989 == v990) {
                goto LABEL_787;
              }
            }
            else
            {
              unint64_t v990 = 0;
              uint64_t v991 = 0;
            }
            unint64_t v997 = v989 - v990;
            uint64_t v998 = 8 * v990;
            v999 = &v1216[v998];
            v1000 = &v1214[v998];
            do
            {
              uint64_t v1001 = *(void *)v1000;
              v1000 += 8;
              uint64_t v1002 = v1001 - 1;
              uint64_t v1003 = *(void *)v999;
              v999 += 8;
              v991 += v1003 * v1002;
              --v997;
            }
            while (v997);
LABEL_787:
            uint64_t v1004 = v991 + 1;
            goto LABEL_1004;
          }
LABEL_1003:
          uint64_t v1004 = 0;
LABEL_1004:
          uint64_t v1140 = v1218 + v1004;
          if (v1140)
          {
            unint64_t v1141 = 0;
            v1142 = v1212;
            do
            {
              int v1143 = *(unsigned __int8 *)(v19 + v1141);
              if (*v1142 < v1143) {
                int v1143 = *v1142;
              }
              *v1142++ = v1143;
              unint64_t v1141 = (v1141 + 1) % v18;
              --v1140;
            }
            while (v1140);
          }
          goto LABEL_1009;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v75 = *(void *)v1206;
          if (v1210) {
            goto LABEL_850;
          }
          uint64_t v76 = v1204;
          uint64_t v77 = v1207 - v1206;
          if (v1207 == v1206) {
            goto LABEL_368;
          }
          if (!v1204)
          {
            uint64_t v78 = 0;
            goto LABEL_358;
          }
          if ((unint64_t)(v77 - 8) < 8)
          {
            uint64_t v78 = 1;
            unint64_t v79 = v1206;
            do
            {
LABEL_357:
              uint64_t v382 = *(void *)v79;
              v79 += 8;
              v78 *= v382;
            }
            while (v79 != v1207);
            goto LABEL_358;
          }
          unint64_t v377 = ((unint64_t)(v77 - 8) >> 3) + 1;
          unint64_t v79 = &v1206[8 * (v377 & 0x3FFFFFFFFFFFFFFELL)];
          v378 = v1206 + 8;
          uint64_t v379 = 1;
          uint64_t v380 = v377 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v381 = 1;
          do
          {
            v379 *= *(v378 - 1);
            v381 *= *v378;
            v378 += 2;
            v380 -= 2;
          }
          while (v380);
          uint64_t v78 = v381 * v379;
          if (v377 != (v377 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_357;
          }
LABEL_358:
          unint64_t v383 = v77 >> 3;
          if ((unint64_t)(v77 >> 3) <= 1) {
            unint64_t v383 = 1;
          }
          if (v383 < 2)
          {
            unint64_t v384 = 0;
            uint64_t v385 = 0;
LABEL_365:
            unint64_t v391 = v383 - v384;
            uint64_t v392 = 8 * v384;
            v393 = &v1208[v392];
            v394 = &v1206[v392];
            do
            {
              uint64_t v395 = *(void *)v394;
              v394 += 8;
              uint64_t v396 = v395 - 1;
              uint64_t v397 = *(void *)v393;
              v393 += 8;
              v385 += v397 * v396;
              --v391;
            }
            while (v391);
            goto LABEL_367;
          }
          uint64_t v386 = 0;
          uint64_t v387 = 0;
          unint64_t v384 = v383 & 0xFFFFFFFFFFFFFFFELL;
          v388 = v1206 + 8;
          v389 = v1208 + 8;
          unint64_t v390 = v383 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v386 += *(v389 - 1) * (*(v388 - 1) - 1);
            v387 += *v389 * (*v388 - 1);
            v388 += 2;
            v389 += 2;
            v390 -= 2;
          }
          while (v390);
          uint64_t v385 = v387 + v386;
          if (v383 != v384) {
            goto LABEL_365;
          }
LABEL_367:
          if (v78 != v385 + 1) {
LABEL_850:
          }
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_368:
          uint64_t v204 = v1205;
          if (v1205) {
            atomic_fetch_add_explicit(&v1205->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_994;
          }
          uint64_t v398 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_995;
          }
          uint64_t v399 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_742;
          }
          if ((unint64_t)(v398 - 8) < 8)
          {
            uint64_t v399 = 1;
            v400 = v1214;
            do
            {
LABEL_741:
              uint64_t v934 = *(void *)v400;
              v400 += 8;
              v399 *= v934;
            }
            while (v400 != v1215);
            goto LABEL_742;
          }
          unint64_t v929 = ((unint64_t)(v398 - 8) >> 3) + 1;
          v400 = &v1214[8 * (v929 & 0x3FFFFFFFFFFFFFFELL)];
          v930 = v1214 + 8;
          uint64_t v931 = 1;
          uint64_t v932 = v929 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v933 = 1;
          do
          {
            v931 *= *(v930 - 1);
            v933 *= *v930;
            v930 += 2;
            v932 -= 2;
          }
          while (v932);
          uint64_t v399 = v933 * v931;
          if (v929 != (v929 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_741;
          }
LABEL_742:
          unint64_t v935 = v398 >> 3;
          if ((unint64_t)(v398 >> 3) <= 1) {
            unint64_t v935 = 1;
          }
          if (v935 < 2)
          {
            unint64_t v936 = 0;
            uint64_t v937 = 0;
LABEL_749:
            unint64_t v943 = v935 - v936;
            uint64_t v944 = 8 * v936;
            v945 = &v1216[v944];
            v946 = &v1214[v944];
            do
            {
              uint64_t v947 = *(void *)v946;
              v946 += 8;
              uint64_t v948 = v947 - 1;
              uint64_t v949 = *(void *)v945;
              v945 += 8;
              v937 += v949 * v948;
              --v943;
            }
            while (v943);
            goto LABEL_751;
          }
          uint64_t v938 = 0;
          uint64_t v939 = 0;
          unint64_t v936 = v935 & 0xFFFFFFFFFFFFFFFELL;
          v940 = v1214 + 8;
          v941 = v1216 + 8;
          unint64_t v942 = v935 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v938 += *(v941 - 1) * (*(v940 - 1) - 1);
            v939 += *v941 * (*v940 - 1);
            v940 += 2;
            v941 += 2;
            v942 -= 2;
          }
          while (v942);
          uint64_t v937 = v939 + v938;
          if (v935 != v936) {
            goto LABEL_749;
          }
LABEL_751:
          if (v399 != v937 + 1) {
LABEL_994:
          }
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v950 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v951 = v950 >> 3;
            if ((unint64_t)(v950 >> 3) <= 1) {
              unint64_t v951 = 1;
            }
            if (v951 >= 2)
            {
              uint64_t v954 = 0;
              uint64_t v955 = 0;
              unint64_t v952 = v951 & 0xFFFFFFFFFFFFFFFELL;
              v956 = v1214 + 8;
              v957 = v1216 + 8;
              unint64_t v958 = v951 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v954 += *(v957 - 1) * (*(v956 - 1) - 1);
                v955 += *v957 * (*v956 - 1);
                v956 += 2;
                v957 += 2;
                v958 -= 2;
              }
              while (v958);
              uint64_t v953 = v955 + v954;
              if (v951 == v952) {
                goto LABEL_762;
              }
            }
            else
            {
              unint64_t v952 = 0;
              uint64_t v953 = 0;
            }
            unint64_t v959 = v951 - v952;
            uint64_t v960 = 8 * v952;
            v961 = &v1216[v960];
            v962 = &v1214[v960];
            do
            {
              uint64_t v963 = *(void *)v962;
              v962 += 8;
              uint64_t v964 = v963 - 1;
              uint64_t v965 = *(void *)v961;
              v961 += 8;
              v953 += v965 * v964;
              --v959;
            }
            while (v959);
LABEL_762:
            uint64_t v966 = v953 + 1;
            goto LABEL_996;
          }
LABEL_995:
          uint64_t v966 = 0;
LABEL_996:
          if (v1218 + v966)
          {
            unint64_t v1137 = 0;
            unint64_t v1138 = 0;
            do
            {
              unsigned int v1139 = *(unsigned __int8 *)(v76 + v1138);
              if (v1139 >= *((unsigned __int8 *)v1212 + v1137)) {
                LOBYTE(v1139) = *((unsigned char *)v1212 + v1137);
              }
              *((unsigned char *)v1212 + v1137) = v1139;
              unint64_t v1138 = (v1138 + 1) % v75;
              ++v1137;
            }
            while (v1137 < v1218 + v966);
          }
          goto LABEL_1009;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v44 = *(void *)v1206;
          if (v1210) {
            goto LABEL_842;
          }
          uint64_t v45 = v1204;
          uint64_t v46 = v1207 - v1206;
          if (v1207 == v1206) {
            goto LABEL_200;
          }
          if (!v1204)
          {
            uint64_t v47 = 0;
            goto LABEL_190;
          }
          if ((unint64_t)(v46 - 8) < 8)
          {
            uint64_t v47 = 1;
            uint64_t v48 = v1206;
            do
            {
LABEL_189:
              uint64_t v188 = *(void *)v48;
              v48 += 8;
              v47 *= v188;
            }
            while (v48 != v1207);
            goto LABEL_190;
          }
          unint64_t v183 = ((unint64_t)(v46 - 8) >> 3) + 1;
          uint64_t v48 = &v1206[8 * (v183 & 0x3FFFFFFFFFFFFFFELL)];
          uint64_t v184 = v1206 + 8;
          uint64_t v185 = 1;
          uint64_t v186 = v183 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v187 = 1;
          do
          {
            v185 *= *(v184 - 1);
            v187 *= *v184;
            v184 += 2;
            v186 -= 2;
          }
          while (v186);
          uint64_t v47 = v187 * v185;
          if (v183 != (v183 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_189;
          }
LABEL_190:
          unint64_t v189 = v46 >> 3;
          if ((unint64_t)(v46 >> 3) <= 1) {
            unint64_t v189 = 1;
          }
          if (v189 < 2)
          {
            unint64_t v190 = 0;
            uint64_t v191 = 0;
LABEL_197:
            unint64_t v197 = v189 - v190;
            uint64_t v198 = 8 * v190;
            float32x4_t v199 = &v1208[v198];
            uint64_t v200 = &v1206[v198];
            do
            {
              uint64_t v201 = *(void *)v200;
              v200 += 8;
              uint64_t v202 = v201 - 1;
              uint64_t v203 = *(void *)v199;
              v199 += 8;
              v191 += v203 * v202;
              --v197;
            }
            while (v197);
            goto LABEL_199;
          }
          uint64_t v192 = 0;
          uint64_t v193 = 0;
          unint64_t v190 = v189 & 0xFFFFFFFFFFFFFFFELL;
          int32x4_t v194 = v1206 + 8;
          unint64_t v195 = v1208 + 8;
          unint64_t v196 = v189 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v192 += *(v195 - 1) * (*(v194 - 1) - 1);
            v193 += *v195 * (*v194 - 1);
            v194 += 2;
            v195 += 2;
            v196 -= 2;
          }
          while (v196);
          uint64_t v191 = v193 + v192;
          if (v189 != v190) {
            goto LABEL_197;
          }
LABEL_199:
          if (v47 != v191 + 1) {
LABEL_842:
          }
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_200:
          uint64_t v204 = v1205;
          if (v1205) {
            atomic_fetch_add_explicit(&v1205->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_886;
          }
          uint64_t v205 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_887;
          }
          uint64_t v206 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_542;
          }
          if ((unint64_t)(v205 - 8) < 8)
          {
            uint64_t v206 = 1;
            uint64_t v207 = v1214;
            do
            {
LABEL_541:
              uint64_t v630 = *(void *)v207;
              v207 += 8;
              v206 *= v630;
            }
            while (v207 != v1215);
            goto LABEL_542;
          }
          unint64_t v625 = ((unint64_t)(v205 - 8) >> 3) + 1;
          uint64_t v207 = &v1214[8 * (v625 & 0x3FFFFFFFFFFFFFFELL)];
          v626 = v1214 + 8;
          uint64_t v627 = 1;
          uint64_t v628 = v625 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v629 = 1;
          do
          {
            v627 *= *(v626 - 1);
            v629 *= *v626;
            v626 += 2;
            v628 -= 2;
          }
          while (v628);
          uint64_t v206 = v629 * v627;
          if (v625 != (v625 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_541;
          }
LABEL_542:
          unint64_t v631 = v205 >> 3;
          if ((unint64_t)(v205 >> 3) <= 1) {
            unint64_t v631 = 1;
          }
          if (v631 < 2)
          {
            unint64_t v632 = 0;
            uint64_t v633 = 0;
LABEL_549:
            unint64_t v639 = v631 - v632;
            uint64_t v640 = 8 * v632;
            v641 = &v1216[v640];
            v642 = &v1214[v640];
            do
            {
              uint64_t v643 = *(void *)v642;
              v642 += 8;
              uint64_t v644 = v643 - 1;
              uint64_t v645 = *(void *)v641;
              v641 += 8;
              v633 += v645 * v644;
              --v639;
            }
            while (v639);
            goto LABEL_551;
          }
          uint64_t v634 = 0;
          uint64_t v635 = 0;
          unint64_t v632 = v631 & 0xFFFFFFFFFFFFFFFELL;
          v636 = v1214 + 8;
          v637 = v1216 + 8;
          unint64_t v638 = v631 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v634 += *(v637 - 1) * (*(v636 - 1) - 1);
            v635 += *v637 * (*v636 - 1);
            v636 += 2;
            v637 += 2;
            v638 -= 2;
          }
          while (v638);
          uint64_t v633 = v635 + v634;
          if (v631 != v632) {
            goto LABEL_549;
          }
LABEL_551:
          if (v206 != v633 + 1) {
LABEL_886:
          }
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v646 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v647 = v646 >> 3;
            if ((unint64_t)(v646 >> 3) <= 1) {
              unint64_t v647 = 1;
            }
            if (v647 >= 2)
            {
              uint64_t v650 = 0;
              uint64_t v651 = 0;
              unint64_t v648 = v647 & 0xFFFFFFFFFFFFFFFELL;
              v652 = v1214 + 8;
              v653 = v1216 + 8;
              unint64_t v654 = v647 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v650 += *(v653 - 1) * (*(v652 - 1) - 1);
                v651 += *v653 * (*v652 - 1);
                v652 += 2;
                v653 += 2;
                v654 -= 2;
              }
              while (v654);
              uint64_t v649 = v651 + v650;
              if (v647 == v648) {
                goto LABEL_562;
              }
            }
            else
            {
              unint64_t v648 = 0;
              uint64_t v649 = 0;
            }
            unint64_t v655 = v647 - v648;
            uint64_t v656 = 8 * v648;
            v657 = &v1216[v656];
            v658 = &v1214[v656];
            do
            {
              uint64_t v659 = *(void *)v658;
              v658 += 8;
              uint64_t v660 = v659 - 1;
              uint64_t v661 = *(void *)v657;
              v657 += 8;
              v649 += v661 * v660;
              --v655;
            }
            while (v655);
LABEL_562:
            uint64_t v662 = v649 + 1;
            goto LABEL_888;
          }
LABEL_887:
          uint64_t v662 = 0;
LABEL_888:
          uint64_t v1102 = v1218 + v662;
          if (v1102)
          {
            unint64_t v1103 = 0;
            v1104 = (float *)v1212;
            do
            {
              LOBYTE(v43) = *(unsigned char *)(v45 + v1103);
              float v43 = (float)LODWORD(v43);
              if (*v1104 <= v43) {
                float v43 = *v1104;
              }
              *v1104++ = v43;
              unint64_t v1103 = (v1103 + 1) % v44;
              --v1102;
            }
            while (v1102);
          }
          goto LABEL_1009;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v65 = *(void *)v1206;
          if (v1210) {
            goto LABEL_847;
          }
          uint64_t v66 = v1204;
          uint64_t v67 = v1207 - v1206;
          if (v1207 == v1206) {
            goto LABEL_305;
          }
          if (!v1204)
          {
            uint64_t v68 = 0;
            goto LABEL_295;
          }
          if ((unint64_t)(v67 - 8) < 8)
          {
            uint64_t v68 = 1;
            uint64_t v69 = v1206;
            do
            {
LABEL_294:
              uint64_t v310 = *(void *)v69;
              v69 += 8;
              v68 *= v310;
            }
            while (v69 != v1207);
            goto LABEL_295;
          }
          unint64_t v305 = ((unint64_t)(v67 - 8) >> 3) + 1;
          uint64_t v69 = &v1206[8 * (v305 & 0x3FFFFFFFFFFFFFFELL)];
          uint64_t v306 = v1206 + 8;
          uint64_t v307 = 1;
          uint64_t v308 = v305 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v309 = 1;
          do
          {
            v307 *= *(v306 - 1);
            v309 *= *v306;
            v306 += 2;
            v308 -= 2;
          }
          while (v308);
          uint64_t v68 = v309 * v307;
          if (v305 != (v305 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_294;
          }
LABEL_295:
          unint64_t v311 = v67 >> 3;
          if ((unint64_t)(v67 >> 3) <= 1) {
            unint64_t v311 = 1;
          }
          if (v311 < 2)
          {
            unint64_t v312 = 0;
            uint64_t v313 = 0;
LABEL_302:
            unint64_t v319 = v311 - v312;
            uint64_t v320 = 8 * v312;
            uint64_t v321 = &v1208[v320];
            uint64_t v322 = &v1206[v320];
            do
            {
              uint64_t v323 = *(void *)v322;
              v322 += 8;
              uint64_t v324 = v323 - 1;
              uint64_t v325 = *(void *)v321;
              v321 += 8;
              v313 += v325 * v324;
              --v319;
            }
            while (v319);
            goto LABEL_304;
          }
          uint64_t v314 = 0;
          uint64_t v315 = 0;
          unint64_t v312 = v311 & 0xFFFFFFFFFFFFFFFELL;
          long long v316 = v1206 + 8;
          uint64_t v317 = v1208 + 8;
          unint64_t v318 = v311 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v314 += *(v317 - 1) * (*(v316 - 1) - 1);
            v315 += *v317 * (*v316 - 1);
            v316 += 2;
            v317 += 2;
            v318 -= 2;
          }
          while (v318);
          uint64_t v313 = v315 + v314;
          if (v311 != v312) {
            goto LABEL_302;
          }
LABEL_304:
          if (v68 != v313 + 1) {
LABEL_847:
          }
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_305:
          uint64_t v204 = v1205;
          if (v1205) {
            atomic_fetch_add_explicit(&v1205->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_948;
          }
          uint64_t v326 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_949;
          }
          uint64_t v327 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_667;
          }
          if ((unint64_t)(v326 - 8) < 8)
          {
            uint64_t v327 = 1;
            uint64_t v328 = v1214;
            do
            {
LABEL_666:
              uint64_t v820 = *(void *)v328;
              v328 += 8;
              v327 *= v820;
            }
            while (v328 != v1215);
            goto LABEL_667;
          }
          unint64_t v815 = ((unint64_t)(v326 - 8) >> 3) + 1;
          uint64_t v328 = &v1214[8 * (v815 & 0x3FFFFFFFFFFFFFFELL)];
          v816 = v1214 + 8;
          uint64_t v817 = 1;
          uint64_t v818 = v815 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v819 = 1;
          do
          {
            v817 *= *(v816 - 1);
            v819 *= *v816;
            v816 += 2;
            v818 -= 2;
          }
          while (v818);
          uint64_t v327 = v819 * v817;
          if (v815 != (v815 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_666;
          }
LABEL_667:
          unint64_t v821 = v326 >> 3;
          if ((unint64_t)(v326 >> 3) <= 1) {
            unint64_t v821 = 1;
          }
          if (v821 < 2)
          {
            unint64_t v822 = 0;
            uint64_t v823 = 0;
LABEL_674:
            unint64_t v829 = v821 - v822;
            uint64_t v830 = 8 * v822;
            v831 = &v1216[v830];
            v832 = &v1214[v830];
            do
            {
              uint64_t v833 = *(void *)v832;
              v832 += 8;
              uint64_t v834 = v833 - 1;
              uint64_t v835 = *(void *)v831;
              v831 += 8;
              v823 += v835 * v834;
              --v829;
            }
            while (v829);
            goto LABEL_676;
          }
          uint64_t v824 = 0;
          uint64_t v825 = 0;
          unint64_t v822 = v821 & 0xFFFFFFFFFFFFFFFELL;
          v826 = v1214 + 8;
          v827 = v1216 + 8;
          unint64_t v828 = v821 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v824 += *(v827 - 1) * (*(v826 - 1) - 1);
            v825 += *v827 * (*v826 - 1);
            v826 += 2;
            v827 += 2;
            v828 -= 2;
          }
          while (v828);
          uint64_t v823 = v825 + v824;
          if (v821 != v822) {
            goto LABEL_674;
          }
LABEL_676:
          if (v327 != v823 + 1) {
LABEL_948:
          }
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v836 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v837 = v836 >> 3;
            if ((unint64_t)(v836 >> 3) <= 1) {
              unint64_t v837 = 1;
            }
            if (v837 >= 2)
            {
              uint64_t v840 = 0;
              uint64_t v841 = 0;
              unint64_t v838 = v837 & 0xFFFFFFFFFFFFFFFELL;
              v842 = v1214 + 8;
              v843 = v1216 + 8;
              unint64_t v844 = v837 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v840 += *(v843 - 1) * (*(v842 - 1) - 1);
                v841 += *v843 * (*v842 - 1);
                v842 += 2;
                v843 += 2;
                v844 -= 2;
              }
              while (v844);
              uint64_t v839 = v841 + v840;
              if (v837 == v838) {
                goto LABEL_687;
              }
            }
            else
            {
              unint64_t v838 = 0;
              uint64_t v839 = 0;
            }
            unint64_t v845 = v837 - v838;
            uint64_t v846 = 8 * v838;
            v847 = &v1216[v846];
            v848 = &v1214[v846];
            do
            {
              uint64_t v849 = *(void *)v848;
              v848 += 8;
              uint64_t v850 = v849 - 1;
              uint64_t v851 = *(void *)v847;
              v847 += 8;
              v839 += v851 * v850;
              --v845;
            }
            while (v845);
LABEL_687:
            uint64_t v852 = v839 + 1;
            goto LABEL_950;
          }
LABEL_949:
          uint64_t v852 = 0;
LABEL_950:
          uint64_t v1123 = v1218 + v852;
          if (v1123)
          {
            unint64_t v1124 = 0;
            v1125 = (short float *)v1212;
            do
            {
              LOBYTE(v64) = *(unsigned char *)(v66 + v1124);
              short float v64 = (short float)LOWORD(v64);
              if (*v1125 <= v64) {
                short float v64 = *v1125;
              }
              *v1125++ = v64;
              unint64_t v1124 = (v1124 + 1) % v65;
              --v1123;
            }
            while (v1123);
          }
LABEL_1009:
          if (v204 && !atomic_fetch_add(&v204->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
            std::__shared_weak_count::__release_weak(v204);
          }
          if (v1216)
          {
            v1217 = v1216;
            operator delete(v1216);
          }
          if (v1214)
          {
            v1215 = v1214;
            operator delete(v1214);
          }
          uint64_t v1144 = v1213;
          if (v1213 && !atomic_fetch_add(&v1213->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1144->__on_zero_shared)(v1144);
            std::__shared_weak_count::__release_weak(v1144);
          }
          if (v1208)
          {
            v1209 = v1208;
            operator delete(v1208);
          }
          if (v1206)
          {
            uint64_t v1207 = v1206;
            operator delete(v1206);
          }
          v1145 = v1205;
          if (v1205 && !atomic_fetch_add(&v1205->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1145->__on_zero_shared)(v1145);
            std::__shared_weak_count::__release_weak(v1145);
          }
          if (v1201)
          {
            v1202 = v1201;
            operator delete(v1201);
          }
          if (v1199)
          {
            char v1200 = v1199;
            operator delete(v1199);
          }
          uint64_t v1111 = v1198;
          if (!v1198) {
            return;
          }
          goto LABEL_1069;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()();
      }
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v1155, (uint64_t)a2);
      v1161 = &v1211;
      nitro::ndarray<float>::ndarray(&v1162, &v1155);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v8 = *(void *)v1164;
          if (v1168) {
            goto LABEL_843;
          }
          uint64_t v9 = v1162;
          uint64_t v10 = v1165 - (unsigned char *)v1164;
          if (v1165 == v1164) {
            goto LABEL_221;
          }
          if (!v1162)
          {
            uint64_t v11 = 0;
            goto LABEL_211;
          }
          if ((unint64_t)(v10 - 8) < 8)
          {
            uint64_t v11 = 1;
            uint64_t v12 = (char *)v1164;
            do
            {
LABEL_210:
              uint64_t v213 = *(void *)v12;
              v12 += 8;
              v11 *= v213;
            }
            while (v12 != v1165);
            goto LABEL_211;
          }
          unint64_t v208 = ((unint64_t)(v10 - 8) >> 3) + 1;
          uint64_t v12 = (char *)v1164 + 8 * (v208 & 0x3FFFFFFFFFFFFFFELL);
          int32x4_t v209 = (char *)v1164 + 8;
          uint64_t v210 = 1;
          uint64_t v211 = v208 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v212 = 1;
          do
          {
            v210 *= *(v209 - 1);
            v212 *= *v209;
            v209 += 2;
            v211 -= 2;
          }
          while (v211);
          uint64_t v11 = v212 * v210;
          if (v208 != (v208 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_210;
          }
LABEL_211:
          unint64_t v214 = v10 >> 3;
          if ((unint64_t)(v10 >> 3) <= 1) {
            unint64_t v214 = 1;
          }
          if (v214 < 2)
          {
            unint64_t v215 = 0;
            uint64_t v216 = 0;
LABEL_218:
            unint64_t v222 = v214 - v215;
            uint64_t v223 = 8 * v215;
            int32x4_t v224 = (uint64_t *)((char *)__p + v223);
            unint64_t v225 = (uint64_t *)((char *)v1164 + v223);
            do
            {
              uint64_t v226 = *v225++;
              uint64_t v227 = v226 - 1;
              uint64_t v228 = *v224++;
              v216 += v228 * v227;
              --v222;
            }
            while (v222);
            goto LABEL_220;
          }
          uint64_t v217 = 0;
          uint64_t v218 = 0;
          unint64_t v215 = v214 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v219 = (char *)v1164 + 8;
          uint64_t v220 = (char *)__p + 8;
          unint64_t v221 = v214 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v217 += *(v220 - 1) * (*(v219 - 1) - 1);
            v218 += *v220 * (*v219 - 1);
            v219 += 2;
            v220 += 2;
            v221 -= 2;
          }
          while (v221);
          uint64_t v216 = v218 + v217;
          if (v214 != v215) {
            goto LABEL_218;
          }
LABEL_220:
          if (v11 != v216 + 1) {
LABEL_843:
          }
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_221:
          uint64_t v106 = v1163;
          if (v1163) {
            atomic_fetch_add_explicit(&v1163->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_894;
          }
          uint64_t v229 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_895;
          }
          uint64_t v230 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_567;
          }
          if ((unint64_t)(v229 - 8) < 8)
          {
            uint64_t v230 = 1;
            unint64_t v231 = v1214;
            do
            {
LABEL_566:
              uint64_t v668 = *(void *)v231;
              v231 += 8;
              v230 *= v668;
            }
            while (v231 != v1215);
            goto LABEL_567;
          }
          unint64_t v663 = ((unint64_t)(v229 - 8) >> 3) + 1;
          unint64_t v231 = &v1214[8 * (v663 & 0x3FFFFFFFFFFFFFFELL)];
          v664 = v1214 + 8;
          uint64_t v665 = 1;
          uint64_t v666 = v663 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v667 = 1;
          do
          {
            v665 *= *(v664 - 1);
            v667 *= *v664;
            v664 += 2;
            v666 -= 2;
          }
          while (v666);
          uint64_t v230 = v667 * v665;
          if (v663 != (v663 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_566;
          }
LABEL_567:
          unint64_t v669 = v229 >> 3;
          if ((unint64_t)(v229 >> 3) <= 1) {
            unint64_t v669 = 1;
          }
          if (v669 < 2)
          {
            unint64_t v670 = 0;
            uint64_t v671 = 0;
LABEL_574:
            unint64_t v677 = v669 - v670;
            uint64_t v678 = 8 * v670;
            v679 = &v1216[v678];
            v680 = &v1214[v678];
            do
            {
              uint64_t v681 = *(void *)v680;
              v680 += 8;
              uint64_t v682 = v681 - 1;
              uint64_t v683 = *(void *)v679;
              v679 += 8;
              v671 += v683 * v682;
              --v677;
            }
            while (v677);
            goto LABEL_576;
          }
          uint64_t v672 = 0;
          uint64_t v673 = 0;
          unint64_t v670 = v669 & 0xFFFFFFFFFFFFFFFELL;
          v674 = v1214 + 8;
          v675 = v1216 + 8;
          unint64_t v676 = v669 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v672 += *(v675 - 1) * (*(v674 - 1) - 1);
            v673 += *v675 * (*v674 - 1);
            v674 += 2;
            v675 += 2;
            v676 -= 2;
          }
          while (v676);
          uint64_t v671 = v673 + v672;
          if (v669 != v670) {
            goto LABEL_574;
          }
LABEL_576:
          if (v230 != v671 + 1) {
LABEL_894:
          }
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v684 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v685 = v684 >> 3;
            if ((unint64_t)(v684 >> 3) <= 1) {
              unint64_t v685 = 1;
            }
            if (v685 >= 2)
            {
              uint64_t v688 = 0;
              uint64_t v689 = 0;
              unint64_t v686 = v685 & 0xFFFFFFFFFFFFFFFELL;
              v690 = v1214 + 8;
              v691 = v1216 + 8;
              unint64_t v692 = v685 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v688 += *(v691 - 1) * (*(v690 - 1) - 1);
                v689 += *v691 * (*v690 - 1);
                v690 += 2;
                v691 += 2;
                v692 -= 2;
              }
              while (v692);
              uint64_t v687 = v689 + v688;
              if (v685 == v686) {
                goto LABEL_587;
              }
            }
            else
            {
              unint64_t v686 = 0;
              uint64_t v687 = 0;
            }
            unint64_t v693 = v685 - v686;
            uint64_t v694 = 8 * v686;
            v695 = &v1216[v694];
            v696 = &v1214[v694];
            do
            {
              uint64_t v697 = *(void *)v696;
              v696 += 8;
              uint64_t v698 = v697 - 1;
              uint64_t v699 = *(void *)v695;
              v695 += 8;
              v687 += v699 * v698;
              --v693;
            }
            while (v693);
LABEL_587:
            uint64_t v700 = v687 + 1;
            goto LABEL_896;
          }
LABEL_895:
          uint64_t v700 = 0;
LABEL_896:
          uint64_t v1105 = v1218 + v700;
          if (v1105)
          {
            unint64_t v1106 = 0;
            v1107 = v1212;
            do
            {
              int v1108 = (int)*(float *)(v9 + 4 * v1106);
              if (*v1107 < v1108) {
                int v1108 = *v1107;
              }
              *v1107++ = v1108;
              unint64_t v1106 = (v1106 + 1) % v8;
              --v1105;
            }
            while (v1105);
          }
          goto LABEL_901;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v38 = *(void *)v1164;
          if (v1168) {
            goto LABEL_841;
          }
          uint64_t v39 = v1162;
          uint64_t v40 = v1165 - (unsigned char *)v1164;
          if (v1165 == v1164) {
            goto LABEL_179;
          }
          if (!v1162)
          {
            uint64_t v41 = 0;
            goto LABEL_169;
          }
          if ((unint64_t)(v40 - 8) < 8)
          {
            uint64_t v41 = 1;
            uint64_t v42 = (char *)v1164;
            do
            {
LABEL_168:
              uint64_t v164 = *(void *)v42;
              v42 += 8;
              v41 *= v164;
            }
            while (v42 != v1165);
            goto LABEL_169;
          }
          unint64_t v159 = ((unint64_t)(v40 - 8) >> 3) + 1;
          uint64_t v42 = (char *)v1164 + 8 * (v159 & 0x3FFFFFFFFFFFFFFELL);
          BOOL v160 = (char *)v1164 + 8;
          uint64_t v161 = 1;
          uint64_t v162 = v159 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v163 = 1;
          do
          {
            v161 *= *(v160 - 1);
            v163 *= *v160;
            v160 += 2;
            v162 -= 2;
          }
          while (v162);
          uint64_t v41 = v163 * v161;
          if (v159 != (v159 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_168;
          }
LABEL_169:
          unint64_t v165 = v40 >> 3;
          if ((unint64_t)(v40 >> 3) <= 1) {
            unint64_t v165 = 1;
          }
          if (v165 < 2)
          {
            unint64_t v166 = 0;
            uint64_t v167 = 0;
LABEL_176:
            unint64_t v173 = v165 - v166;
            uint64_t v174 = 8 * v166;
            uint64_t v175 = (uint64_t *)((char *)__p + v174);
            unint64_t v176 = (uint64_t *)((char *)v1164 + v174);
            do
            {
              uint64_t v177 = *v176++;
              uint64_t v178 = v177 - 1;
              uint64_t v179 = *v175++;
              v167 += v179 * v178;
              --v173;
            }
            while (v173);
            goto LABEL_178;
          }
          uint64_t v168 = 0;
          uint64_t v169 = 0;
          unint64_t v166 = v165 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v170 = (char *)v1164 + 8;
          uint64_t v171 = (char *)__p + 8;
          unint64_t v172 = v165 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v168 += *(v171 - 1) * (*(v170 - 1) - 1);
            v169 += *v171 * (*v170 - 1);
            v170 += 2;
            v171 += 2;
            v172 -= 2;
          }
          while (v172);
          uint64_t v167 = v169 + v168;
          if (v165 != v166) {
            goto LABEL_176;
          }
LABEL_178:
          if (v41 != v167 + 1) {
LABEL_841:
          }
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_179:
          uint64_t v106 = v1163;
          if (v1163) {
            atomic_fetch_add_explicit(&v1163->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_878;
          }
          uint64_t v180 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_879;
          }
          uint64_t v181 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_517;
          }
          if ((unint64_t)(v180 - 8) < 8)
          {
            uint64_t v181 = 1;
            float32x4_t v182 = v1214;
            do
            {
LABEL_516:
              uint64_t v592 = *(void *)v182;
              v182 += 8;
              v181 *= v592;
            }
            while (v182 != v1215);
            goto LABEL_517;
          }
          unint64_t v587 = ((unint64_t)(v180 - 8) >> 3) + 1;
          float32x4_t v182 = &v1214[8 * (v587 & 0x3FFFFFFFFFFFFFFELL)];
          v588 = v1214 + 8;
          uint64_t v589 = 1;
          uint64_t v590 = v587 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v591 = 1;
          do
          {
            v589 *= *(v588 - 1);
            v591 *= *v588;
            v588 += 2;
            v590 -= 2;
          }
          while (v590);
          uint64_t v181 = v591 * v589;
          if (v587 != (v587 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_516;
          }
LABEL_517:
          unint64_t v593 = v180 >> 3;
          if ((unint64_t)(v180 >> 3) <= 1) {
            unint64_t v593 = 1;
          }
          if (v593 < 2)
          {
            unint64_t v594 = 0;
            uint64_t v595 = 0;
LABEL_524:
            unint64_t v601 = v593 - v594;
            uint64_t v602 = 8 * v594;
            v603 = &v1216[v602];
            v604 = &v1214[v602];
            do
            {
              uint64_t v605 = *(void *)v604;
              v604 += 8;
              uint64_t v606 = v605 - 1;
              uint64_t v607 = *(void *)v603;
              v603 += 8;
              v595 += v607 * v606;
              --v601;
            }
            while (v601);
            goto LABEL_526;
          }
          uint64_t v596 = 0;
          uint64_t v597 = 0;
          unint64_t v594 = v593 & 0xFFFFFFFFFFFFFFFELL;
          v598 = v1214 + 8;
          v599 = v1216 + 8;
          unint64_t v600 = v593 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v596 += *(v599 - 1) * (*(v598 - 1) - 1);
            v597 += *v599 * (*v598 - 1);
            v598 += 2;
            v599 += 2;
            v600 -= 2;
          }
          while (v600);
          uint64_t v595 = v597 + v596;
          if (v593 != v594) {
            goto LABEL_524;
          }
LABEL_526:
          if (v181 != v595 + 1) {
LABEL_878:
          }
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v608 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v609 = v608 >> 3;
            if ((unint64_t)(v608 >> 3) <= 1) {
              unint64_t v609 = 1;
            }
            if (v609 >= 2)
            {
              uint64_t v612 = 0;
              uint64_t v613 = 0;
              unint64_t v610 = v609 & 0xFFFFFFFFFFFFFFFELL;
              v614 = v1214 + 8;
              v615 = v1216 + 8;
              unint64_t v616 = v609 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v612 += *(v615 - 1) * (*(v614 - 1) - 1);
                v613 += *v615 * (*v614 - 1);
                v614 += 2;
                v615 += 2;
                v616 -= 2;
              }
              while (v616);
              uint64_t v611 = v613 + v612;
              if (v609 == v610) {
                goto LABEL_537;
              }
            }
            else
            {
              unint64_t v610 = 0;
              uint64_t v611 = 0;
            }
            unint64_t v617 = v609 - v610;
            uint64_t v618 = 8 * v610;
            v619 = &v1216[v618];
            v620 = &v1214[v618];
            do
            {
              uint64_t v621 = *(void *)v620;
              v620 += 8;
              uint64_t v622 = v621 - 1;
              uint64_t v623 = *(void *)v619;
              v619 += 8;
              v611 += v623 * v622;
              --v617;
            }
            while (v617);
LABEL_537:
            uint64_t v624 = v611 + 1;
            goto LABEL_880;
          }
LABEL_879:
          uint64_t v624 = 0;
LABEL_880:
          if (v1218 + v624)
          {
            unint64_t v1099 = 0;
            unint64_t v1100 = 0;
            do
            {
              unsigned int v1101 = (int)*(float *)(v39 + 4 * v1100);
              if (*((unsigned __int8 *)v1212 + v1099) < v1101) {
                LOBYTE(v1101) = *((unsigned char *)v1212 + v1099);
              }
              *((unsigned char *)v1212 + v1099) = v1101;
              unint64_t v1100 = (v1100 + 1) % v38;
              ++v1099;
            }
            while (v1099 < v1218 + v624);
          }
          goto LABEL_901;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v23 = *(void *)v1164;
          if (v1168) {
            goto LABEL_838;
          }
          uint64_t v24 = v1162;
          uint64_t v25 = v1165 - (unsigned char *)v1164;
          if (v1165 == v1164) {
            goto LABEL_116;
          }
          if (!v1162)
          {
            uint64_t v26 = 0;
            goto LABEL_106;
          }
          if ((unint64_t)(v25 - 8) < 8)
          {
            uint64_t v26 = 1;
            uint64_t v27 = (char *)v1164;
            do
            {
LABEL_105:
              uint64_t v90 = *(void *)v27;
              v27 += 8;
              v26 *= v90;
            }
            while (v27 != v1165);
            goto LABEL_106;
          }
          unint64_t v85 = ((unint64_t)(v25 - 8) >> 3) + 1;
          uint64_t v27 = (char *)v1164 + 8 * (v85 & 0x3FFFFFFFFFFFFFFELL);
          unint64_t v86 = (char *)v1164 + 8;
          uint64_t v87 = 1;
          uint64_t v88 = v85 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v89 = 1;
          do
          {
            v87 *= *(v86 - 1);
            v89 *= *v86;
            v86 += 2;
            v88 -= 2;
          }
          while (v88);
          uint64_t v26 = v89 * v87;
          if (v85 != (v85 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_105;
          }
LABEL_106:
          unint64_t v91 = v25 >> 3;
          if ((unint64_t)(v25 >> 3) <= 1) {
            unint64_t v91 = 1;
          }
          if (v91 < 2)
          {
            unint64_t v92 = 0;
            uint64_t v93 = 0;
LABEL_113:
            unint64_t v99 = v91 - v92;
            uint64_t v100 = 8 * v92;
            unint64_t v101 = (uint64_t *)((char *)__p + v100);
            long long v102 = (uint64_t *)((char *)v1164 + v100);
            do
            {
              uint64_t v103 = *v102++;
              uint64_t v104 = v103 - 1;
              uint64_t v105 = *v101++;
              v93 += v105 * v104;
              --v99;
            }
            while (v99);
            goto LABEL_115;
          }
          uint64_t v94 = 0;
          uint64_t v95 = 0;
          unint64_t v92 = v91 & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v96 = (char *)v1164 + 8;
          unint64_t v97 = (char *)__p + 8;
          unint64_t v98 = v91 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v94 += *(v97 - 1) * (*(v96 - 1) - 1);
            v95 += *v97 * (*v96 - 1);
            v96 += 2;
            v97 += 2;
            v98 -= 2;
          }
          while (v98);
          uint64_t v93 = v95 + v94;
          if (v91 != v92) {
            goto LABEL_113;
          }
LABEL_115:
          if (v26 != v93 + 1) {
LABEL_838:
          }
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_116:
          uint64_t v106 = v1163;
          if (v1163) {
            atomic_fetch_add_explicit(&v1163->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_854;
          }
          uint64_t v107 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_855;
          }
          uint64_t v108 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_442;
          }
          if ((unint64_t)(v107 - 8) < 8)
          {
            uint64_t v108 = 1;
            uint64_t v109 = v1214;
            do
            {
LABEL_441:
              uint64_t v478 = *(void *)v109;
              v109 += 8;
              v108 *= v478;
            }
            while (v109 != v1215);
            goto LABEL_442;
          }
          unint64_t v473 = ((unint64_t)(v107 - 8) >> 3) + 1;
          uint64_t v109 = &v1214[8 * (v473 & 0x3FFFFFFFFFFFFFFELL)];
          v474 = v1214 + 8;
          uint64_t v475 = 1;
          uint64_t v476 = v473 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v477 = 1;
          do
          {
            v475 *= *(v474 - 1);
            v477 *= *v474;
            v474 += 2;
            v476 -= 2;
          }
          while (v476);
          uint64_t v108 = v477 * v475;
          if (v473 != (v473 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_441;
          }
LABEL_442:
          unint64_t v479 = v107 >> 3;
          if ((unint64_t)(v107 >> 3) <= 1) {
            unint64_t v479 = 1;
          }
          if (v479 < 2)
          {
            unint64_t v480 = 0;
            uint64_t v481 = 0;
LABEL_449:
            unint64_t v487 = v479 - v480;
            uint64_t v488 = 8 * v480;
            v489 = &v1216[v488];
            v490 = &v1214[v488];
            do
            {
              uint64_t v491 = *(void *)v490;
              v490 += 8;
              uint64_t v492 = v491 - 1;
              uint64_t v493 = *(void *)v489;
              v489 += 8;
              v481 += v493 * v492;
              --v487;
            }
            while (v487);
            goto LABEL_451;
          }
          uint64_t v482 = 0;
          uint64_t v483 = 0;
          unint64_t v480 = v479 & 0xFFFFFFFFFFFFFFFELL;
          v484 = v1214 + 8;
          v485 = v1216 + 8;
          unint64_t v486 = v479 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v482 += *(v485 - 1) * (*(v484 - 1) - 1);
            v483 += *v485 * (*v484 - 1);
            v484 += 2;
            v485 += 2;
            v486 -= 2;
          }
          while (v486);
          uint64_t v481 = v483 + v482;
          if (v479 != v480) {
            goto LABEL_449;
          }
LABEL_451:
          if (v108 != v481 + 1) {
LABEL_854:
          }
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v494 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v495 = v494 >> 3;
            if ((unint64_t)(v494 >> 3) <= 1) {
              unint64_t v495 = 1;
            }
            if (v495 >= 2)
            {
              uint64_t v498 = 0;
              uint64_t v499 = 0;
              unint64_t v496 = v495 & 0xFFFFFFFFFFFFFFFELL;
              v500 = v1214 + 8;
              v501 = v1216 + 8;
              unint64_t v502 = v495 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v498 += *(v501 - 1) * (*(v500 - 1) - 1);
                v499 += *v501 * (*v500 - 1);
                v500 += 2;
                v501 += 2;
                v502 -= 2;
              }
              while (v502);
              uint64_t v497 = v499 + v498;
              if (v495 == v496) {
                goto LABEL_462;
              }
            }
            else
            {
              unint64_t v496 = 0;
              uint64_t v497 = 0;
            }
            unint64_t v503 = v495 - v496;
            uint64_t v504 = 8 * v496;
            v505 = &v1216[v504];
            v506 = &v1214[v504];
            do
            {
              uint64_t v507 = *(void *)v506;
              v506 += 8;
              uint64_t v508 = v507 - 1;
              uint64_t v509 = *(void *)v505;
              v505 += 8;
              v497 += v509 * v508;
              --v503;
            }
            while (v503);
LABEL_462:
            uint64_t v510 = v497 + 1;
            goto LABEL_856;
          }
LABEL_855:
          uint64_t v510 = 0;
LABEL_856:
          uint64_t v1081 = v1218 + v510;
          if (v1081)
          {
            unint64_t v1082 = 0;
            v1083 = (float *)v1212;
            do
            {
              float v1084 = *(float *)(v24 + 4 * v1082);
              if (v1084 >= *v1083) {
                float v1084 = *v1083;
              }
              *v1083++ = v1084;
              unint64_t v1082 = (v1082 + 1) % v23;
              --v1081;
            }
            while (v1081);
          }
          goto LABEL_901;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v28 = *(void *)v1164;
          if (v1168) {
            goto LABEL_839;
          }
          uint64_t v29 = v1162;
          uint64_t v30 = v1165 - (unsigned char *)v1164;
          if (v1165 == v1164) {
            goto LABEL_137;
          }
          if (!v1162)
          {
            uint64_t v31 = 0;
            goto LABEL_127;
          }
          if ((unint64_t)(v30 - 8) < 8)
          {
            uint64_t v31 = 1;
            unint64_t v32 = (char *)v1164;
            do
            {
LABEL_126:
              uint64_t v115 = *(void *)v32;
              v32 += 8;
              v31 *= v115;
            }
            while (v32 != v1165);
            goto LABEL_127;
          }
          unint64_t v110 = ((unint64_t)(v30 - 8) >> 3) + 1;
          unint64_t v32 = (char *)v1164 + 8 * (v110 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v111 = (char *)v1164 + 8;
          uint64_t v112 = 1;
          uint64_t v113 = v110 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v114 = 1;
          do
          {
            v112 *= *(v111 - 1);
            v114 *= *v111;
            v111 += 2;
            v113 -= 2;
          }
          while (v113);
          uint64_t v31 = v114 * v112;
          if (v110 != (v110 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_126;
          }
LABEL_127:
          unint64_t v116 = v30 >> 3;
          if ((unint64_t)(v30 >> 3) <= 1) {
            unint64_t v116 = 1;
          }
          if (v116 < 2)
          {
            unint64_t v117 = 0;
            uint64_t v118 = 0;
LABEL_134:
            unint64_t v124 = v116 - v117;
            uint64_t v125 = 8 * v117;
            unint64_t v126 = (uint64_t *)((char *)__p + v125);
            uint64_t v127 = (uint64_t *)((char *)v1164 + v125);
            do
            {
              uint64_t v128 = *v127++;
              uint64_t v129 = v128 - 1;
              uint64_t v130 = *v126++;
              v118 += v130 * v129;
              --v124;
            }
            while (v124);
            goto LABEL_136;
          }
          uint64_t v119 = 0;
          uint64_t v120 = 0;
          unint64_t v117 = v116 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v121 = (char *)v1164 + 8;
          uint64_t v122 = (char *)__p + 8;
          unint64_t v123 = v116 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v119 += *(v122 - 1) * (*(v121 - 1) - 1);
            v120 += *v122 * (*v121 - 1);
            v121 += 2;
            v122 += 2;
            v123 -= 2;
          }
          while (v123);
          uint64_t v118 = v120 + v119;
          if (v116 != v117) {
            goto LABEL_134;
          }
LABEL_136:
          if (v31 != v118 + 1) {
LABEL_839:
          }
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_137:
          uint64_t v106 = v1163;
          if (v1163) {
            atomic_fetch_add_explicit(&v1163->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_862;
          }
          uint64_t v131 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_863;
          }
          uint64_t v132 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_467;
          }
          if ((unint64_t)(v131 - 8) < 8)
          {
            uint64_t v132 = 1;
            unint64_t v133 = v1214;
            do
            {
LABEL_466:
              uint64_t v516 = *(void *)v133;
              v133 += 8;
              v132 *= v516;
            }
            while (v133 != v1215);
            goto LABEL_467;
          }
          unint64_t v511 = ((unint64_t)(v131 - 8) >> 3) + 1;
          unint64_t v133 = &v1214[8 * (v511 & 0x3FFFFFFFFFFFFFFELL)];
          v512 = v1214 + 8;
          uint64_t v513 = 1;
          uint64_t v514 = v511 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v515 = 1;
          do
          {
            v513 *= *(v512 - 1);
            v515 *= *v512;
            v512 += 2;
            v514 -= 2;
          }
          while (v514);
          uint64_t v132 = v515 * v513;
          if (v511 != (v511 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_466;
          }
LABEL_467:
          unint64_t v517 = v131 >> 3;
          if ((unint64_t)(v131 >> 3) <= 1) {
            unint64_t v517 = 1;
          }
          if (v517 < 2)
          {
            unint64_t v518 = 0;
            uint64_t v519 = 0;
LABEL_474:
            unint64_t v525 = v517 - v518;
            uint64_t v526 = 8 * v518;
            v527 = &v1216[v526];
            v528 = &v1214[v526];
            do
            {
              uint64_t v529 = *(void *)v528;
              v528 += 8;
              uint64_t v530 = v529 - 1;
              uint64_t v531 = *(void *)v527;
              v527 += 8;
              v519 += v531 * v530;
              --v525;
            }
            while (v525);
            goto LABEL_476;
          }
          uint64_t v520 = 0;
          uint64_t v521 = 0;
          unint64_t v518 = v517 & 0xFFFFFFFFFFFFFFFELL;
          v522 = v1214 + 8;
          v523 = v1216 + 8;
          unint64_t v524 = v517 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v520 += *(v523 - 1) * (*(v522 - 1) - 1);
            v521 += *v523 * (*v522 - 1);
            v522 += 2;
            v523 += 2;
            v524 -= 2;
          }
          while (v524);
          uint64_t v519 = v521 + v520;
          if (v517 != v518) {
            goto LABEL_474;
          }
LABEL_476:
          if (v132 != v519 + 1) {
LABEL_862:
          }
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v532 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v533 = v532 >> 3;
            if ((unint64_t)(v532 >> 3) <= 1) {
              unint64_t v533 = 1;
            }
            if (v533 >= 2)
            {
              uint64_t v536 = 0;
              uint64_t v537 = 0;
              unint64_t v534 = v533 & 0xFFFFFFFFFFFFFFFELL;
              v538 = v1214 + 8;
              v539 = v1216 + 8;
              unint64_t v540 = v533 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v536 += *(v539 - 1) * (*(v538 - 1) - 1);
                v537 += *v539 * (*v538 - 1);
                v538 += 2;
                v539 += 2;
                v540 -= 2;
              }
              while (v540);
              uint64_t v535 = v537 + v536;
              if (v533 == v534) {
                goto LABEL_487;
              }
            }
            else
            {
              unint64_t v534 = 0;
              uint64_t v535 = 0;
            }
            unint64_t v541 = v533 - v534;
            uint64_t v542 = 8 * v534;
            v543 = &v1216[v542];
            v544 = &v1214[v542];
            do
            {
              uint64_t v545 = *(void *)v544;
              v544 += 8;
              uint64_t v546 = v545 - 1;
              uint64_t v547 = *(void *)v543;
              v543 += 8;
              v535 += v547 * v546;
              --v541;
            }
            while (v541);
LABEL_487:
            uint64_t v548 = v535 + 1;
            goto LABEL_864;
          }
LABEL_863:
          uint64_t v548 = 0;
LABEL_864:
          uint64_t v1085 = v1218 + v548;
          if (v1085)
          {
            unint64_t v1086 = 0;
            v1087 = (short float *)v1212;
            do
            {
              _S0 = *(_DWORD *)(v29 + 4 * v1086);
              __asm { FCVT            H0, S0 }
              if (*v1087 <= _H0) {
                _H0 = *v1087;
              }
              *v1087++ = _H0;
              unint64_t v1086 = (v1086 + 1) % v28;
              --v1085;
            }
            while (v1085);
          }
LABEL_901:
          if (v106 && !atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
          if (v1216)
          {
            v1217 = v1216;
            operator delete(v1216);
          }
          if (v1214)
          {
            v1215 = v1214;
            operator delete(v1214);
          }
          unint64_t v1109 = v1213;
          if (v1213 && !atomic_fetch_add(&v1213->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1109->__on_zero_shared)(v1109);
            std::__shared_weak_count::__release_weak(v1109);
          }
          if (__p)
          {
            v1167 = __p;
            operator delete(__p);
          }
          if (v1164)
          {
            uint64_t v1165 = (char *)v1164;
            operator delete(v1164);
          }
          v1110 = v1163;
          if (v1163 && !atomic_fetch_add(&v1163->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1110->__on_zero_shared)(v1110);
            std::__shared_weak_count::__release_weak(v1110);
          }
          if (v1159)
          {
            v1160 = v1159;
            operator delete(v1159);
          }
          if (v1157)
          {
            uint64_t v1158 = v1157;
            operator delete(v1157);
          }
          uint64_t v1111 = v1156;
          if (!v1156) {
            return;
          }
          goto LABEL_1069;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()();
      }
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v1169, (uint64_t)a2);
      v1175 = &v1211;
      nitro::ndarray<half>::ndarray(&v1176, &v1169);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v13 = *(void *)v1178;
          if (v1182) {
            goto LABEL_848;
          }
          uint64_t v14 = v1176;
          uint64_t v15 = v1179 - (unsigned char *)v1178;
          if (v1179 == v1178) {
            goto LABEL_326;
          }
          if (!v1176)
          {
            uint64_t v16 = 0;
            goto LABEL_316;
          }
          if ((unint64_t)(v15 - 8) < 8)
          {
            uint64_t v16 = 1;
            uint64_t v17 = (char *)v1178;
            do
            {
LABEL_315:
              uint64_t v334 = *(void *)v17;
              v17 += 8;
              v16 *= v334;
            }
            while (v17 != v1179);
            goto LABEL_316;
          }
          unint64_t v329 = ((unint64_t)(v15 - 8) >> 3) + 1;
          uint64_t v17 = (char *)v1178 + 8 * (v329 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v330 = (char *)v1178 + 8;
          uint64_t v331 = 1;
          uint64_t v332 = v329 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v333 = 1;
          do
          {
            v331 *= *(v330 - 1);
            v333 *= *v330;
            v330 += 2;
            v332 -= 2;
          }
          while (v332);
          uint64_t v16 = v333 * v331;
          if (v329 != (v329 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_315;
          }
LABEL_316:
          unint64_t v335 = v15 >> 3;
          if ((unint64_t)(v15 >> 3) <= 1) {
            unint64_t v335 = 1;
          }
          if (v335 < 2)
          {
            unint64_t v336 = 0;
            uint64_t v337 = 0;
LABEL_323:
            unint64_t v343 = v335 - v336;
            uint64_t v344 = 8 * v336;
            float32x4x2_t v345 = (uint64_t *)((char *)v1180 + v344);
            uint64_t v346 = (uint64_t *)((char *)v1178 + v344);
            do
            {
              uint64_t v347 = *v346++;
              uint64_t v348 = v347 - 1;
              uint64_t v349 = *v345++;
              v337 += v349 * v348;
              --v343;
            }
            while (v343);
            goto LABEL_325;
          }
          uint64_t v338 = 0;
          uint64_t v339 = 0;
          unint64_t v336 = v335 & 0xFFFFFFFFFFFFFFFELL;
          float32x4x2_t v340 = (char *)v1178 + 8;
          float32x4x2_t v341 = (char *)v1180 + 8;
          unint64_t v342 = v335 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v338 += *(v341 - 1) * (*(v340 - 1) - 1);
            v339 += *v341 * (*v340 - 1);
            v340 += 2;
            v341 += 2;
            v342 -= 2;
          }
          while (v342);
          uint64_t v337 = v339 + v338;
          if (v335 != v336) {
            goto LABEL_323;
          }
LABEL_325:
          if (v16 != v337 + 1) {
LABEL_848:
          }
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_326:
          uint64_t v155 = v1177;
          if (v1177) {
            atomic_fetch_add_explicit(&v1177->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_956;
          }
          uint64_t v350 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_957;
          }
          uint64_t v351 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_692;
          }
          if ((unint64_t)(v350 - 8) < 8)
          {
            uint64_t v351 = 1;
            uint64_t v352 = v1214;
            do
            {
LABEL_691:
              uint64_t v858 = *(void *)v352;
              v352 += 8;
              v351 *= v858;
            }
            while (v352 != v1215);
            goto LABEL_692;
          }
          unint64_t v853 = ((unint64_t)(v350 - 8) >> 3) + 1;
          uint64_t v352 = &v1214[8 * (v853 & 0x3FFFFFFFFFFFFFFELL)];
          v854 = v1214 + 8;
          uint64_t v855 = 1;
          uint64_t v856 = v853 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v857 = 1;
          do
          {
            v855 *= *(v854 - 1);
            v857 *= *v854;
            v854 += 2;
            v856 -= 2;
          }
          while (v856);
          uint64_t v351 = v857 * v855;
          if (v853 != (v853 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_691;
          }
LABEL_692:
          unint64_t v859 = v350 >> 3;
          if ((unint64_t)(v350 >> 3) <= 1) {
            unint64_t v859 = 1;
          }
          if (v859 < 2)
          {
            unint64_t v860 = 0;
            uint64_t v861 = 0;
LABEL_699:
            unint64_t v867 = v859 - v860;
            uint64_t v868 = 8 * v860;
            v869 = &v1216[v868];
            v870 = &v1214[v868];
            do
            {
              uint64_t v871 = *(void *)v870;
              v870 += 8;
              uint64_t v872 = v871 - 1;
              uint64_t v873 = *(void *)v869;
              v869 += 8;
              v861 += v873 * v872;
              --v867;
            }
            while (v867);
            goto LABEL_701;
          }
          uint64_t v862 = 0;
          uint64_t v863 = 0;
          unint64_t v860 = v859 & 0xFFFFFFFFFFFFFFFELL;
          v864 = v1214 + 8;
          v865 = v1216 + 8;
          unint64_t v866 = v859 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v862 += *(v865 - 1) * (*(v864 - 1) - 1);
            v863 += *v865 * (*v864 - 1);
            v864 += 2;
            v865 += 2;
            v866 -= 2;
          }
          while (v866);
          uint64_t v861 = v863 + v862;
          if (v859 != v860) {
            goto LABEL_699;
          }
LABEL_701:
          if (v351 != v861 + 1) {
LABEL_956:
          }
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v874 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v875 = v874 >> 3;
            if ((unint64_t)(v874 >> 3) <= 1) {
              unint64_t v875 = 1;
            }
            if (v875 >= 2)
            {
              uint64_t v878 = 0;
              uint64_t v879 = 0;
              unint64_t v876 = v875 & 0xFFFFFFFFFFFFFFFELL;
              v880 = v1214 + 8;
              v881 = v1216 + 8;
              unint64_t v882 = v875 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v878 += *(v881 - 1) * (*(v880 - 1) - 1);
                v879 += *v881 * (*v880 - 1);
                v880 += 2;
                v881 += 2;
                v882 -= 2;
              }
              while (v882);
              uint64_t v877 = v879 + v878;
              if (v875 == v876) {
                goto LABEL_712;
              }
            }
            else
            {
              unint64_t v876 = 0;
              uint64_t v877 = 0;
            }
            unint64_t v883 = v875 - v876;
            uint64_t v884 = 8 * v876;
            v885 = &v1216[v884];
            v886 = &v1214[v884];
            do
            {
              uint64_t v887 = *(void *)v886;
              v886 += 8;
              uint64_t v888 = v887 - 1;
              uint64_t v889 = *(void *)v885;
              v885 += 8;
              v877 += v889 * v888;
              --v883;
            }
            while (v883);
LABEL_712:
            uint64_t v890 = v877 + 1;
            goto LABEL_958;
          }
LABEL_957:
          uint64_t v890 = 0;
LABEL_958:
          uint64_t v1126 = v1218 + v890;
          if (v1126)
          {
            unint64_t v1127 = 0;
            v1128 = v1212;
            do
            {
              int v1129 = (int)*(short float *)(v14 + 2 * v1127);
              if (*v1128 < v1129) {
                int v1129 = *v1128;
              }
              *v1128++ = v1129;
              unint64_t v1127 = (v1127 + 1) % v13;
              --v1126;
            }
            while (v1126);
          }
          goto LABEL_963;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v59 = *(void *)v1178;
          if (v1182) {
            goto LABEL_846;
          }
          uint64_t v60 = v1176;
          uint64_t v61 = v1179 - (unsigned char *)v1178;
          if (v1179 == v1178) {
            goto LABEL_284;
          }
          if (!v1176)
          {
            uint64_t v62 = 0;
            goto LABEL_274;
          }
          if ((unint64_t)(v61 - 8) < 8)
          {
            uint64_t v62 = 1;
            uint64_t v63 = (char *)v1178;
            do
            {
LABEL_273:
              uint64_t v286 = *(void *)v63;
              v63 += 8;
              v62 *= v286;
            }
            while (v63 != v1179);
            goto LABEL_274;
          }
          unint64_t v281 = ((unint64_t)(v61 - 8) >> 3) + 1;
          uint64_t v63 = (char *)v1178 + 8 * (v281 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v282 = (char *)v1178 + 8;
          uint64_t v283 = 1;
          uint64_t v284 = v281 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v285 = 1;
          do
          {
            v283 *= *(v282 - 1);
            v285 *= *v282;
            v282 += 2;
            v284 -= 2;
          }
          while (v284);
          uint64_t v62 = v285 * v283;
          if (v281 != (v281 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_273;
          }
LABEL_274:
          unint64_t v287 = v61 >> 3;
          if ((unint64_t)(v61 >> 3) <= 1) {
            unint64_t v287 = 1;
          }
          if (v287 < 2)
          {
            unint64_t v288 = 0;
            uint64_t v289 = 0;
LABEL_281:
            unint64_t v295 = v287 - v288;
            uint64_t v296 = 8 * v288;
            unint64_t v297 = (uint64_t *)((char *)v1180 + v296);
            unint64_t v298 = (uint64_t *)((char *)v1178 + v296);
            do
            {
              uint64_t v299 = *v298++;
              uint64_t v300 = v299 - 1;
              uint64_t v301 = *v297++;
              v289 += v301 * v300;
              --v295;
            }
            while (v295);
            goto LABEL_283;
          }
          uint64_t v290 = 0;
          uint64_t v291 = 0;
          unint64_t v288 = v287 & 0xFFFFFFFFFFFFFFFELL;
          int v292 = (char *)v1178 + 8;
          char v293 = (char *)v1180 + 8;
          unint64_t v294 = v287 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v290 += *(v293 - 1) * (*(v292 - 1) - 1);
            v291 += *v293 * (*v292 - 1);
            v292 += 2;
            v293 += 2;
            v294 -= 2;
          }
          while (v294);
          uint64_t v289 = v291 + v290;
          if (v287 != v288) {
            goto LABEL_281;
          }
LABEL_283:
          if (v62 != v289 + 1) {
LABEL_846:
          }
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_284:
          uint64_t v155 = v1177;
          if (v1177) {
            atomic_fetch_add_explicit(&v1177->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_940;
          }
          uint64_t v302 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_941;
          }
          uint64_t v303 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_642;
          }
          if ((unint64_t)(v302 - 8) < 8)
          {
            uint64_t v303 = 1;
            uint64_t v304 = v1214;
            do
            {
LABEL_641:
              uint64_t v782 = *(void *)v304;
              v304 += 8;
              v303 *= v782;
            }
            while (v304 != v1215);
            goto LABEL_642;
          }
          unint64_t v777 = ((unint64_t)(v302 - 8) >> 3) + 1;
          uint64_t v304 = &v1214[8 * (v777 & 0x3FFFFFFFFFFFFFFELL)];
          v778 = v1214 + 8;
          uint64_t v779 = 1;
          uint64_t v780 = v777 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v781 = 1;
          do
          {
            v779 *= *(v778 - 1);
            v781 *= *v778;
            v778 += 2;
            v780 -= 2;
          }
          while (v780);
          uint64_t v303 = v781 * v779;
          if (v777 != (v777 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_641;
          }
LABEL_642:
          unint64_t v783 = v302 >> 3;
          if ((unint64_t)(v302 >> 3) <= 1) {
            unint64_t v783 = 1;
          }
          if (v783 < 2)
          {
            unint64_t v784 = 0;
            uint64_t v785 = 0;
LABEL_649:
            unint64_t v791 = v783 - v784;
            uint64_t v792 = 8 * v784;
            v793 = &v1216[v792];
            v794 = &v1214[v792];
            do
            {
              uint64_t v795 = *(void *)v794;
              v794 += 8;
              uint64_t v796 = v795 - 1;
              uint64_t v797 = *(void *)v793;
              v793 += 8;
              v785 += v797 * v796;
              --v791;
            }
            while (v791);
            goto LABEL_651;
          }
          uint64_t v786 = 0;
          uint64_t v787 = 0;
          unint64_t v784 = v783 & 0xFFFFFFFFFFFFFFFELL;
          v788 = v1214 + 8;
          v789 = v1216 + 8;
          unint64_t v790 = v783 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v786 += *(v789 - 1) * (*(v788 - 1) - 1);
            v787 += *v789 * (*v788 - 1);
            v788 += 2;
            v789 += 2;
            v790 -= 2;
          }
          while (v790);
          uint64_t v785 = v787 + v786;
          if (v783 != v784) {
            goto LABEL_649;
          }
LABEL_651:
          if (v303 != v785 + 1) {
LABEL_940:
          }
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v798 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v799 = v798 >> 3;
            if ((unint64_t)(v798 >> 3) <= 1) {
              unint64_t v799 = 1;
            }
            if (v799 >= 2)
            {
              uint64_t v802 = 0;
              uint64_t v803 = 0;
              unint64_t v800 = v799 & 0xFFFFFFFFFFFFFFFELL;
              v804 = v1214 + 8;
              v805 = v1216 + 8;
              unint64_t v806 = v799 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v802 += *(v805 - 1) * (*(v804 - 1) - 1);
                v803 += *v805 * (*v804 - 1);
                v804 += 2;
                v805 += 2;
                v806 -= 2;
              }
              while (v806);
              uint64_t v801 = v803 + v802;
              if (v799 == v800) {
                goto LABEL_662;
              }
            }
            else
            {
              unint64_t v800 = 0;
              uint64_t v801 = 0;
            }
            unint64_t v807 = v799 - v800;
            uint64_t v808 = 8 * v800;
            v809 = &v1216[v808];
            v810 = &v1214[v808];
            do
            {
              uint64_t v811 = *(void *)v810;
              v810 += 8;
              uint64_t v812 = v811 - 1;
              uint64_t v813 = *(void *)v809;
              v809 += 8;
              v801 += v813 * v812;
              --v807;
            }
            while (v807);
LABEL_662:
            uint64_t v814 = v801 + 1;
            goto LABEL_942;
          }
LABEL_941:
          uint64_t v814 = 0;
LABEL_942:
          if (v1218 + v814)
          {
            unint64_t v1120 = 0;
            unint64_t v1121 = 0;
            do
            {
              unsigned int v1122 = *((unsigned __int8 *)v1212 + v1120);
              if (v1122 >= (int)*(short float *)(v60 + 2 * v1121)) {
                LOBYTE(v1122) = (int)*(short float *)(v60 + 2 * v1121);
              }
              *((unsigned char *)v1212 + v1120) = v1122;
              unint64_t v1121 = (v1121 + 1) % v59;
              ++v1120;
            }
            while (v1120 < v1218 + v814);
          }
          goto LABEL_963;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v33 = *(void *)v1178;
          if (v1182) {
            goto LABEL_840;
          }
          uint64_t v34 = v1176;
          uint64_t v35 = v1179 - (unsigned char *)v1178;
          if (v1179 == v1178) {
            goto LABEL_158;
          }
          if (!v1176)
          {
            uint64_t v36 = 0;
            goto LABEL_148;
          }
          if ((unint64_t)(v35 - 8) < 8)
          {
            uint64_t v36 = 1;
            unint64_t v37 = (char *)v1178;
            do
            {
LABEL_147:
              uint64_t v139 = *(void *)v37;
              v37 += 8;
              v36 *= v139;
            }
            while (v37 != v1179);
            goto LABEL_148;
          }
          unint64_t v134 = ((unint64_t)(v35 - 8) >> 3) + 1;
          unint64_t v37 = (char *)v1178 + 8 * (v134 & 0x3FFFFFFFFFFFFFFELL);
          unint64_t v135 = (char *)v1178 + 8;
          uint64_t v136 = 1;
          uint64_t v137 = v134 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v138 = 1;
          do
          {
            v136 *= *(v135 - 1);
            v138 *= *v135;
            v135 += 2;
            v137 -= 2;
          }
          while (v137);
          uint64_t v36 = v138 * v136;
          if (v134 != (v134 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_147;
          }
LABEL_148:
          unint64_t v140 = v35 >> 3;
          if ((unint64_t)(v35 >> 3) <= 1) {
            unint64_t v140 = 1;
          }
          if (v140 < 2)
          {
            unint64_t v141 = 0;
            uint64_t v142 = 0;
LABEL_155:
            unint64_t v148 = v140 - v141;
            uint64_t v149 = 8 * v141;
            unint64_t v150 = (uint64_t *)((char *)v1180 + v149);
            unint64_t v151 = (uint64_t *)((char *)v1178 + v149);
            do
            {
              uint64_t v152 = *v151++;
              uint64_t v153 = v152 - 1;
              uint64_t v154 = *v150++;
              v142 += v154 * v153;
              --v148;
            }
            while (v148);
            goto LABEL_157;
          }
          uint64_t v143 = 0;
          uint64_t v144 = 0;
          unint64_t v141 = v140 & 0xFFFFFFFFFFFFFFFELL;
          unint64_t v145 = (char *)v1178 + 8;
          uint64_t v146 = (char *)v1180 + 8;
          unint64_t v147 = v140 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v143 += *(v146 - 1) * (*(v145 - 1) - 1);
            v144 += *v146 * (*v145 - 1);
            v145 += 2;
            v146 += 2;
            v147 -= 2;
          }
          while (v147);
          uint64_t v142 = v144 + v143;
          if (v140 != v141) {
            goto LABEL_155;
          }
LABEL_157:
          if (v36 != v142 + 1) {
LABEL_840:
          }
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_158:
          uint64_t v155 = v1177;
          if (v1177) {
            atomic_fetch_add_explicit(&v1177->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_870;
          }
          uint64_t v156 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_871;
          }
          uint64_t v157 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_492;
          }
          if ((unint64_t)(v156 - 8) < 8)
          {
            uint64_t v157 = 1;
            unint64_t v158 = v1214;
            do
            {
LABEL_491:
              uint64_t v554 = *(void *)v158;
              v158 += 8;
              v157 *= v554;
            }
            while (v158 != v1215);
            goto LABEL_492;
          }
          unint64_t v549 = ((unint64_t)(v156 - 8) >> 3) + 1;
          unint64_t v158 = &v1214[8 * (v549 & 0x3FFFFFFFFFFFFFFELL)];
          v550 = v1214 + 8;
          uint64_t v551 = 1;
          uint64_t v552 = v549 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v553 = 1;
          do
          {
            v551 *= *(v550 - 1);
            v553 *= *v550;
            v550 += 2;
            v552 -= 2;
          }
          while (v552);
          uint64_t v157 = v553 * v551;
          if (v549 != (v549 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_491;
          }
LABEL_492:
          unint64_t v555 = v156 >> 3;
          if ((unint64_t)(v156 >> 3) <= 1) {
            unint64_t v555 = 1;
          }
          if (v555 < 2)
          {
            unint64_t v556 = 0;
            uint64_t v557 = 0;
LABEL_499:
            unint64_t v563 = v555 - v556;
            uint64_t v564 = 8 * v556;
            v565 = &v1216[v564];
            v566 = &v1214[v564];
            do
            {
              uint64_t v567 = *(void *)v566;
              v566 += 8;
              uint64_t v568 = v567 - 1;
              uint64_t v569 = *(void *)v565;
              v565 += 8;
              v557 += v569 * v568;
              --v563;
            }
            while (v563);
            goto LABEL_501;
          }
          uint64_t v558 = 0;
          uint64_t v559 = 0;
          unint64_t v556 = v555 & 0xFFFFFFFFFFFFFFFELL;
          v560 = v1214 + 8;
          v561 = v1216 + 8;
          unint64_t v562 = v555 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v558 += *(v561 - 1) * (*(v560 - 1) - 1);
            v559 += *v561 * (*v560 - 1);
            v560 += 2;
            v561 += 2;
            v562 -= 2;
          }
          while (v562);
          uint64_t v557 = v559 + v558;
          if (v555 != v556) {
            goto LABEL_499;
          }
LABEL_501:
          if (v157 != v557 + 1) {
LABEL_870:
          }
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v570 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v571 = v570 >> 3;
            if ((unint64_t)(v570 >> 3) <= 1) {
              unint64_t v571 = 1;
            }
            if (v571 >= 2)
            {
              uint64_t v574 = 0;
              uint64_t v575 = 0;
              unint64_t v572 = v571 & 0xFFFFFFFFFFFFFFFELL;
              v576 = v1214 + 8;
              v577 = v1216 + 8;
              unint64_t v578 = v571 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v574 += *(v577 - 1) * (*(v576 - 1) - 1);
                v575 += *v577 * (*v576 - 1);
                v576 += 2;
                v577 += 2;
                v578 -= 2;
              }
              while (v578);
              uint64_t v573 = v575 + v574;
              if (v571 == v572) {
                goto LABEL_512;
              }
            }
            else
            {
              unint64_t v572 = 0;
              uint64_t v573 = 0;
            }
            unint64_t v579 = v571 - v572;
            uint64_t v580 = 8 * v572;
            v581 = &v1216[v580];
            v582 = &v1214[v580];
            do
            {
              uint64_t v583 = *(void *)v582;
              v582 += 8;
              uint64_t v584 = v583 - 1;
              uint64_t v585 = *(void *)v581;
              v581 += 8;
              v573 += v585 * v584;
              --v579;
            }
            while (v579);
LABEL_512:
            uint64_t v586 = v573 + 1;
            goto LABEL_872;
          }
LABEL_871:
          uint64_t v586 = 0;
LABEL_872:
          uint64_t v1094 = v1218 + v586;
          if (v1094)
          {
            unint64_t v1095 = 0;
            v1096 = (float *)v1212;
            do
            {
              _H0 = *(_WORD *)(v34 + 2 * v1095);
              __asm { FCVT            S0, H0 }
              if (*v1096 <= _S0) {
                _S0 = *v1096;
              }
              *v1096++ = _S0;
              unint64_t v1095 = (v1095 + 1) % v33;
              --v1094;
            }
            while (v1094);
          }
          goto LABEL_963;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1212, (uint64_t)a1);
          unint64_t v54 = *(void *)v1178;
          if (v1182) {
            goto LABEL_845;
          }
          uint64_t v55 = v1176;
          uint64_t v56 = v1179 - (unsigned char *)v1178;
          if (v1179 == v1178) {
            goto LABEL_263;
          }
          if (!v1176)
          {
            uint64_t v57 = 0;
            goto LABEL_253;
          }
          if ((unint64_t)(v56 - 8) < 8)
          {
            uint64_t v57 = 1;
            uint64_t v58 = (char *)v1178;
            do
            {
LABEL_252:
              uint64_t v262 = *(void *)v58;
              v58 += 8;
              v57 *= v262;
            }
            while (v58 != v1179);
            goto LABEL_253;
          }
          unint64_t v257 = ((unint64_t)(v56 - 8) >> 3) + 1;
          uint64_t v58 = (char *)v1178 + 8 * (v257 & 0x3FFFFFFFFFFFFFFELL);
          uint64_t v258 = (char *)v1178 + 8;
          uint64_t v259 = 1;
          uint64_t v260 = v257 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v261 = 1;
          do
          {
            v259 *= *(v258 - 1);
            v261 *= *v258;
            v258 += 2;
            v260 -= 2;
          }
          while (v260);
          uint64_t v57 = v261 * v259;
          if (v257 != (v257 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_252;
          }
LABEL_253:
          unint64_t v263 = v56 >> 3;
          if ((unint64_t)(v56 >> 3) <= 1) {
            unint64_t v263 = 1;
          }
          if (v263 < 2)
          {
            unint64_t v264 = 0;
            uint64_t v265 = 0;
LABEL_260:
            unint64_t v271 = v263 - v264;
            uint64_t v272 = 8 * v264;
            uint64_t v273 = (uint64_t *)((char *)v1180 + v272);
            unint64_t v274 = (uint64_t *)((char *)v1178 + v272);
            do
            {
              uint64_t v275 = *v274++;
              uint64_t v276 = v275 - 1;
              uint64_t v277 = *v273++;
              v265 += v277 * v276;
              --v271;
            }
            while (v271);
            goto LABEL_262;
          }
          uint64_t v266 = 0;
          uint64_t v267 = 0;
          unint64_t v264 = v263 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v268 = (char *)v1178 + 8;
          uint64_t v269 = (char *)v1180 + 8;
          unint64_t v270 = v263 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v266 += *(v269 - 1) * (*(v268 - 1) - 1);
            v267 += *v269 * (*v268 - 1);
            v268 += 2;
            v269 += 2;
            v270 -= 2;
          }
          while (v270);
          uint64_t v265 = v267 + v266;
          if (v263 != v264) {
            goto LABEL_260;
          }
LABEL_262:
          if (v57 != v265 + 1) {
LABEL_845:
          }
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_263:
          uint64_t v155 = v1177;
          if (v1177) {
            atomic_fetch_add_explicit(&v1177->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v1218) {
            goto LABEL_932;
          }
          uint64_t v278 = v1215 - v1214;
          if (v1215 == v1214) {
            goto LABEL_933;
          }
          uint64_t v279 = (uint64_t)v1212;
          if (!v1212) {
            goto LABEL_617;
          }
          if ((unint64_t)(v278 - 8) < 8)
          {
            uint64_t v279 = 1;
            unint64_t v280 = v1214;
            do
            {
LABEL_616:
              uint64_t v744 = *(void *)v280;
              v280 += 8;
              v279 *= v744;
            }
            while (v280 != v1215);
            goto LABEL_617;
          }
          unint64_t v739 = ((unint64_t)(v278 - 8) >> 3) + 1;
          unint64_t v280 = &v1214[8 * (v739 & 0x3FFFFFFFFFFFFFFELL)];
          v740 = v1214 + 8;
          uint64_t v741 = 1;
          uint64_t v742 = v739 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v743 = 1;
          do
          {
            v741 *= *(v740 - 1);
            v743 *= *v740;
            v740 += 2;
            v742 -= 2;
          }
          while (v742);
          uint64_t v279 = v743 * v741;
          if (v739 != (v739 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_616;
          }
LABEL_617:
          unint64_t v745 = v278 >> 3;
          if ((unint64_t)(v278 >> 3) <= 1) {
            unint64_t v745 = 1;
          }
          if (v745 < 2)
          {
            unint64_t v746 = 0;
            uint64_t v747 = 0;
LABEL_624:
            unint64_t v753 = v745 - v746;
            uint64_t v754 = 8 * v746;
            v755 = &v1216[v754];
            v756 = &v1214[v754];
            do
            {
              uint64_t v757 = *(void *)v756;
              v756 += 8;
              uint64_t v758 = v757 - 1;
              uint64_t v759 = *(void *)v755;
              v755 += 8;
              v747 += v759 * v758;
              --v753;
            }
            while (v753);
            goto LABEL_626;
          }
          uint64_t v748 = 0;
          uint64_t v749 = 0;
          unint64_t v746 = v745 & 0xFFFFFFFFFFFFFFFELL;
          v750 = v1214 + 8;
          v751 = v1216 + 8;
          unint64_t v752 = v745 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v748 += *(v751 - 1) * (*(v750 - 1) - 1);
            v749 += *v751 * (*v750 - 1);
            v750 += 2;
            v751 += 2;
            v752 -= 2;
          }
          while (v752);
          uint64_t v747 = v749 + v748;
          if (v745 != v746) {
            goto LABEL_624;
          }
LABEL_626:
          if (v279 != v747 + 1) {
LABEL_932:
          }
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          uint64_t v760 = v1215 - v1214;
          if (v1215 != v1214)
          {
            unint64_t v761 = v760 >> 3;
            if ((unint64_t)(v760 >> 3) <= 1) {
              unint64_t v761 = 1;
            }
            if (v761 >= 2)
            {
              uint64_t v764 = 0;
              uint64_t v765 = 0;
              unint64_t v762 = v761 & 0xFFFFFFFFFFFFFFFELL;
              v766 = v1214 + 8;
              v767 = v1216 + 8;
              unint64_t v768 = v761 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v764 += *(v767 - 1) * (*(v766 - 1) - 1);
                v765 += *v767 * (*v766 - 1);
                v766 += 2;
                v767 += 2;
                v768 -= 2;
              }
              while (v768);
              uint64_t v763 = v765 + v764;
              if (v761 == v762) {
                goto LABEL_637;
              }
            }
            else
            {
              unint64_t v762 = 0;
              uint64_t v763 = 0;
            }
            unint64_t v769 = v761 - v762;
            uint64_t v770 = 8 * v762;
            v771 = &v1216[v770];
            v772 = &v1214[v770];
            do
            {
              uint64_t v773 = *(void *)v772;
              v772 += 8;
              uint64_t v774 = v773 - 1;
              uint64_t v775 = *(void *)v771;
              v771 += 8;
              v763 += v775 * v774;
              --v769;
            }
            while (v769);
LABEL_637:
            uint64_t v776 = v763 + 1;
            goto LABEL_934;
          }
LABEL_933:
          uint64_t v776 = 0;
LABEL_934:
          uint64_t v1116 = v1218 + v776;
          if (v1116)
          {
            unint64_t v1117 = 0;
            v1118 = (short float *)v1212;
            do
            {
              short float v1119 = *(short float *)(v55 + 2 * v1117);
              if (v1119 >= *v1118) {
                short float v1119 = *v1118;
              }
              *v1118++ = v1119;
              unint64_t v1117 = (v1117 + 1) % v54;
              --v1116;
            }
            while (v1116);
          }
LABEL_963:
          if (v155 && !atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
          if (v1216)
          {
            v1217 = v1216;
            operator delete(v1216);
          }
          if (v1214)
          {
            v1215 = v1214;
            operator delete(v1214);
          }
          unint64_t v1130 = v1213;
          if (v1213 && !atomic_fetch_add(&v1213->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1130->__on_zero_shared)(v1130);
            std::__shared_weak_count::__release_weak(v1130);
          }
          if (v1180)
          {
            v1181 = v1180;
            operator delete(v1180);
          }
          if (v1178)
          {
            uint64_t v1179 = (char *)v1178;
            operator delete(v1178);
          }
          unint64_t v1131 = v1177;
          if (v1177 && !atomic_fetch_add(&v1177->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1131->__on_zero_shared)(v1131);
            std::__shared_weak_count::__release_weak(v1131);
          }
          if (v1173)
          {
            v1174 = v1173;
            operator delete(v1173);
          }
          if (v1171)
          {
            uint64_t v1172 = v1171;
            operator delete(v1171);
          }
          uint64_t v1111 = v1170;
          if (v1170)
          {
LABEL_1069:
            if (!atomic_fetch_add(&v1111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v1111->__on_zero_shared)(v1111);
              std::__shared_weak_count::__release_weak(v1111);
            }
          }
          return;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()();
      }
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(nitro::ndarray_container &,nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
}

void sub_19267195C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (v57)
  {
    nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(v57);
    a1 = *(_Unwind_Exception **)(v58 - 48);
  }
  nitro::ndarray<float>::~ndarray((void *)(v58 - 128));
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a57);
  nitro::ndarray<float>::~ndarray(&a48);
  _Unwind_Resume(a1);
}

uint64_t nitro::nitro_builtins::Pad(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void nitro::nitro_builtins::ExpandDims(nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 1340, 1);
    uint64_t v2 = pthread_getspecific(*((void *)started + 74));
    if (v2 && *((unsigned char *)v2 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2 + 2, (uint64_t)"Unsupported type for ExpandDims operation", 41);
    }
    unint64_t v3 = pthread_getspecific(*((void *)started + 74));
    if (v3 && *((unsigned char *)v3 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"\n", 1);
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
      }
    }
  }
  uint64_t v5 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "Unsupported type for ExpandDims operation");
}

void sub_192671F40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(void *a1)
{
  *a1 = &unk_1EE379E08;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(void *a1)
{
  *a1 = &unk_1EE379E08;
  uint64_t v1 = a1 + 1;
  uint64_t v2 = (void *)a1[4];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1EE379E08;
  unint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      return v2;
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_192672174(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EE379E08;
  unint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      uint64_t v5 = *(uint64_t (**)(void))(**(void **)(result + 32) + 24);
      return v5();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t result = *(void *)(a1 + 32);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 8;
  unint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }

  operator delete(__p);
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v6 = (char *)v4 - (char *)*a2;
  uint64_t v28 = v6 >> 5;
  if (v6 != 32) {
    nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()();
  }
  uint64_t v7 = *v5;
  if (v4 == v5)
  {
    if (v7) {
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    }
  }
  else if (v7)
  {
    nitro::nitro_builtins::check_all_flexible_type(std::vector<nitro::nitro_variable> const&)::$_0::operator()();
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (!v8) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)v8 + 48))(&v28);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  if ((uint64_t *)(a3 + 16) != &v28)
  {
    uint64_t v10 = (atomic_ullong *)v28;
    *(void *)(a3 + 16) = v28;
    int v11 = v29;
    *(unsigned char *)(a3 + 24) = v29;
    if ((v11 - 2) < 4 || v11 == 9) {
      atomic_fetch_add(v10, 1uLL);
    }
  }
  switch(v29)
  {
    case 2u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v12 = v28;
        if (v28)
        {
          if (*(char *)(v28 + 31) < 0) {
            operator delete(*(void **)(v28 + 8));
          }
          unint64_t v13 = (void *)v12;
          uint64_t v14 = 0x1012C404EF22A49;
          goto LABEL_48;
        }
      }
      break;
    case 3u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v19 = v28;
        if (v28)
        {
          uint64_t v20 = *(void **)(v28 + 8);
          if (v20)
          {
            *(void *)(v28 + 16) = v20;
            operator delete(v20);
          }
          unint64_t v13 = (void *)v19;
          uint64_t v14 = 0x1080C409938AC02;
          goto LABEL_48;
        }
      }
      break;
    case 4u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v15 = v28;
        if (v28)
        {
          atomic_ullong v16 = *(void *)(v28 + 8);
          if (!v16) {
            goto LABEL_37;
          }
          uint64_t v17 = *(void *)(v28 + 16);
          unint64_t v18 = *(void **)(v28 + 8);
          if (v17 != v16)
          {
            do
            {
              v17 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v15 + 24, v17);
            }
            while (v17 != v16);
            unint64_t v18 = *(void **)(v15 + 8);
          }
          *(void *)(v15 + 16) = v16;
          goto LABEL_36;
        }
      }
      break;
    case 5u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v15 = v28;
        if (v28)
        {
          atomic_ullong v21 = *(void *)(v28 + 8);
          if (v21)
          {
            uint64_t v22 = *(void *)(v28 + 16);
            atomic_ullong v23 = *(void *)(v28 + 8);
            if (v22 != v21)
            {
              do
                uint64_t v22 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v22 - 32);
              while (v22 != v21);
              atomic_ullong v23 = *(void *)(v15 + 8);
            }
            *(void *)(v15 + 16) = v21;
            unint64_t v18 = (void *)v23;
LABEL_36:
            operator delete(v18);
          }
LABEL_37:
          unint64_t v13 = (void *)v15;
          uint64_t v14 = 0x1020C405E66F15BLL;
          goto LABEL_48;
        }
      }
      break;
    case 9u:
      if (atomic_fetch_add((atomic_ullong *volatile)v28, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v24 = (void *)v28;
        if (v28)
        {
          uint64_t v25 = *(void **)(v28 + 56);
          if (v25)
          {
            *(void *)(v28 + 64) = v25;
            operator delete(v25);
          }
          uint64_t v26 = (void *)v24[4];
          if (v26)
          {
            v24[5] = v26;
            operator delete(v26);
          }
          uint64_t v27 = (std::__shared_weak_count *)v24[3];
          if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          unint64_t v13 = v24;
          uint64_t v14 = 0x10B0C4002311774;
LABEL_48:
          uint64_t result = (void *)MEMORY[0x192FF16B0](v13, v14);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_EEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_EEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_EEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target_type()
{
}

void nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"nv.size()", 9);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 18, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        atomic_ullong v16 = __p;
      }
      else {
        atomic_ullong v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 18, 1);
    std::stringbuf::str();
    uint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      atomic_ullong v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    uint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192672A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(void *a1)
{
  *a1 = &unk_1EE379E60;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}